{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.min.js","path":"js/main.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.min.js","path":"js/search.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"6b95915f7e8930abf834565f216d5ce07d42abde","modified":1571989314520},{"_id":"themes/indigo/README.md","hash":"4bf26d9b43bf24b8e0a1a0d058437a347972f5e6","modified":1571043670284},{"_id":"themes/indigo/package.json","hash":"c795e3100ae3655bfa8b39adcca7333a7925b47f","modified":1571043668753},{"_id":"themes/indigo/LICENSE","hash":"24944bf7920108f5a4790e6071c32e9102760c37","modified":1571043668716},{"_id":"themes/indigo/_config.yml","hash":"a6e757cc14a9b422d4b34d0f1c8f1bc477518681","modified":1571043668580},{"_id":"source/_posts/JSqlParser教程.md","hash":"6d0e1f51c237d8c401f25347381fa4af21e87463","modified":1571043667647},{"_id":"source/_posts/.DS_Store","hash":"3641f0197168dfc741be9c72cece6c6112a9fe35","modified":1571990830855},{"_id":"source/_posts/Odoo 12开发者指南第二章 管理Odoo服务器实例.md","hash":"ac307013a224c499676509c82b57d81139406b19","modified":1571043667986},{"_id":"source/_posts/Druid初始化.md","hash":"a969a8526288471d20b1b0506e9f4098ad12d307","modified":1571043667371},{"_id":"source/_posts/Tiemline设计方案.md","hash":"6e8a9776159ba4d1938cb8c863d62458286724cd","modified":1571043668334},{"_id":"source/_posts/VirtualBox磁盘扩容.md","hash":"3cb8ca68e61499bddc9471b115e27be194667b1f","modified":1571043668354},{"_id":"source/_posts/Vue插件开发.md","hash":"abf1908e401e8ec77fa27e4199462e1350ba2f46","modified":1571043668378},{"_id":"source/_posts/centos7修改网卡.md","hash":"df167009444c71bd2ad0f9ebbd0bb89e09124bab","modified":1571043667164},{"_id":"source/_posts/cordova打包vue.md","hash":"7b446a7ae73aa64e3d8e26e93c1111f9b9faec64","modified":1571043667182},{"_id":"source/_posts/git基本操作.md","hash":"ee8992b072471cf26274821cb5605131fe3a8ac5","modified":1571043667397},{"_id":"source/_posts/css动画.md","hash":"9e5286e0a039885829e8acda958cd0b0b68d1b34","modified":1571043667346},{"_id":"source/_posts/go基本语法.md","hash":"2d0dc48d005ae8a3cf3be9f88b864be7b7fb3c4f","modified":1571043667429},{"_id":"source/_posts/docker教程.md","hash":"2c190a5a73e3ed18907e326b06a11b262eea61d0","modified":1571043667362},{"_id":"source/_posts/babel配置.md","hash":"4ebe3df52e822d532e0d9fb95c5d08144af3753c","modified":1571969971483},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1571043667433},{"_id":"source/_posts/import-在python中的区别.md","hash":"5d6ae9e9ff8e26f4f7966f9157305ad68e9744ea","modified":1571043667495},{"_id":"source/_posts/java-线程池.md","hash":"48c654bf26bca9ff03f9effa0eab048b2e82c273","modified":1572252075657},{"_id":"source/_posts/java多线程.md","hash":"d3e19aaca4455a58b5d375c3126eac027da5b96a","modified":1572252075657},{"_id":"source/_posts/java多线程自问.md","hash":"eece63b81198c894262b8db1d963603a6a969c5a","modified":1572252075657},{"_id":"source/_posts/jquery基本操作.md","hash":"99741a5ef6729e9968e9333be680b84baedd8a5e","modified":1571043667643},{"_id":"source/_posts/let-us-encrypt证书.md","hash":"9b73a4ba4f3bbabb7443b943b459fcaf6f4f5cc8","modified":1571043667676},{"_id":"source/_posts/linux压缩.md","hash":"eeb14d038306087eeaae400ef292fce700c0703e","modified":1571043667681},{"_id":"source/_posts/lorawan协议.md","hash":"9c68443a144c4f1be959c6ecc8506bfc72340dd7","modified":1571043667716},{"_id":"source/_posts/lorawan协议（中文版）.md","hash":"806513ac01eb685e678824f5c50d83b28edbe4b3","modified":1571043667718},{"_id":"source/_posts/mybatis-sessions.md","hash":"83f08b5a2e01e894f13b87b8504755aca314c615","modified":1571043667751},{"_id":"source/_posts/lodash按需加载.md","hash":"9d77b7e721fe87b4d7b15eb4d33fdee2a2959e83","modified":1571970023073},{"_id":"source/_posts/ngrok环境搭建.md","hash":"1b8bc07302663a9ad82dc80ac7fe0a10dff35881","modified":1571043667824},{"_id":"source/_posts/makefile编写.md","hash":"5bc7bb88fdbcc8de26b4bca825f58f2fb6a2b73e","modified":1571043667754},{"_id":"source/_posts/nvc-server安装.md","hash":"ab274aac765a0aeb2d7c70039ec3cdb285487951","modified":1571043667833},{"_id":"source/_posts/php5环境搭建.md","hash":"71960f5e644b4b01a6eb35541619ff71b783b936","modified":1571043668059},{"_id":"source/_posts/react入门教程.md","hash":"e5bc885b5d26384f7b0ab24dc220d1eddec81bd1","modified":1571043668201},{"_id":"source/_posts/protobuf使用.md","hash":"5df27e2995e09f695a164d054904b2c63d940539","modified":1571043668058},{"_id":"source/_posts/react-tree-walker学习.md","hash":"364b90e706b863480ed38eac663ed37943032404","modified":1571970042842},{"_id":"source/_posts/redis分布式锁.md","hash":"e3bea8f5404ce3b863753095fbf9d73b8d91b7db","modified":1571043668227},{"_id":"source/_posts/springboot-mongodb使用.md","hash":"921443187f44b554cdee7f9fb7e778ea2e35acc9","modified":1571043668263},{"_id":"source/_posts/springcloud-eureka.md","hash":"ed6bf9f1e7f79614734b0d571b4a355593e6c19d","modified":1571043668276},{"_id":"source/_posts/spring数据库事务.md","hash":"f52eef7369a7f6b7a13c8b2430b8d77d9b63ea19","modified":1571043668295},{"_id":"source/_posts/weboack性能优化笔记.md","hash":"0adbb3fc7cd227b789f1afda61299b0916a7af19","modified":1571970054751},{"_id":"source/_posts/查找附近的人.md","hash":"5c07a3ba3bd7642d122e343a935a464312cd92f7","modified":1571043668401},{"_id":"source/_posts/清除inline-block之间的间隙.md","hash":"93a341a7d0f14490eace87ce7b770098d209a9bd","modified":1571043668413},{"_id":"source/categories/index.md","hash":"9a7cf56b2562ecb1dd1853ead4d1b128af155a5f","modified":1571043668417},{"_id":"source/tags/index.md","hash":"f6dde816fbccea997e7eb100a7d14b845cf28975","modified":1571043668434},{"_id":"themes/indigo/languages/en.yml","hash":"1957d2bfc3a4cef299f4f169b431e9b1128ba162","modified":1571043668770},{"_id":"themes/indigo/languages/ja.yml","hash":"74fd480874bf5e773ba7f9d2a94697cda979091f","modified":1571043668835},{"_id":"themes/indigo/languages/nl-NL","hash":"9085c04491f93066f2369911cc2175b59ae596ad","modified":1571043668864},{"_id":"themes/indigo/languages/zh-CN.yml","hash":"7dc6ae434dde390b6768d244132e23cc78c33817","modified":1571043668901},{"_id":"themes/indigo/layout/archive.ejs","hash":"d039719e21f6a6fa2925b00aaa623a180a78c818","modified":1571043668998},{"_id":"themes/indigo/languages/zh-TW.yml","hash":"6a9e820be66eb12ae746f2527e0dc1adf927c685","modified":1571043668901},{"_id":"themes/indigo/layout/categories.ejs","hash":"41783d2069d5080566a99e6312aa2113105f8b41","modified":1571043669009},{"_id":"themes/indigo/layout/category.ejs","hash":"7ea26a8a935886963eda82f41c7bd5270cf780d9","modified":1571043670132},{"_id":"themes/indigo/layout/index.ejs","hash":"39477807b98b2d2df78f3b82498a11e90be8222c","modified":1571043670155},{"_id":"themes/indigo/layout/layout.ejs","hash":"d52f43fa9572d70cae834e4887c8897b43744805","modified":1571043670186},{"_id":"themes/indigo/layout/page.ejs","hash":"afb98face24d39a21ebbbde6592a9afc98572aa4","modified":1571043670201},{"_id":"themes/indigo/scripts/plugins.js","hash":"e439d717513616bedeed37ba9b05117470809b21","modified":1571043670351},{"_id":"themes/indigo/layout/post.ejs","hash":"afbf8532dc8d148ca4dff2ca127a3382907cf2f5","modified":1571043670205},{"_id":"themes/indigo/layout/tag.ejs","hash":"36786a3de7f6cad58209603f7d84ba23addea174","modified":1571043670229},{"_id":"themes/indigo/layout/tags.ejs","hash":"20466446c41409d14a3d42ccaec24a65a045efef","modified":1571043670259},{"_id":"source/_posts/assets/162fcc0e7e711dc7.png","hash":"ebde565e65804be337543db63d14bd838753521e","modified":1571043667297},{"_id":"source/_posts/go/go工程搭建.md","hash":"59a92264e2438a0fd553317c7d588d95058116d4","modified":1571043667463},{"_id":"source/_posts/go/sqlx基本使用.md","hash":"18344502a0cb1611701a538caa69019684f8f67f","modified":1571043667474},{"_id":"source/_posts/java/hibernate-@Embedded和-Embeddable.md","hash":"34cc6b685010846c60cc08adfd0158a994b43ae1","modified":1571043667581},{"_id":"source/_posts/java/java-线程池.md","hash":"48c654bf26bca9ff03f9effa0eab048b2e82c273","modified":1571043667548},{"_id":"source/_posts/java/.DS_Store","hash":"8147b3ec4986421018b55547a6233703e000bdd7","modified":1571970196494},{"_id":"source/_posts/java/java多线程.md","hash":"d3e19aaca4455a58b5d375c3126eac027da5b96a","modified":1571043667551},{"_id":"source/_posts/java/java多线程自问.md","hash":"eece63b81198c894262b8db1d963603a6a969c5a","modified":1571043667616},{"_id":"source/_posts/java/spring的jms事务.md","hash":"c3c6cf1abc3df47b7ee04114e286420afe147923","modified":1571043667607},{"_id":"source/_posts/java/使用jenv对java多版本管理.md","hash":"392c52a48cfbbcc4102af6abc361c72af0cf4dbc","modified":1571971467960},{"_id":"source/_posts/mysql/mysql修改字符集.md","hash":"8d143f2ced3ca0bacbbdb80236c370cd6d53e355","modified":1571043667861},{"_id":"source/_posts/java/spring事务实现.md","hash":"d7ef264f0bc3141c3ee5c463bd5d92a93306633a","modified":1571043667601},{"_id":"source/_posts/mysql/mysql安装.md","hash":"8cb3923c5a88d495993782adcdd588a15ff4e35b","modified":1571043667874},{"_id":"source/_posts/mysql/mysql性能检测.md","hash":"c9b4736938d21ba8a8e8bbebc539d2eb5755bd49","modified":1571043667878},{"_id":"source/_posts/mysql/mysql权限管理.md","hash":"c33ba32cdb1d7242069ba1de60350a109700815a","modified":1571043667907},{"_id":"source/_posts/mysql/mysql自带的数据库.md","hash":"34f998ee48da9c463cb6d9165d0b1e2f70a80fbd","modified":1571043667921},{"_id":"source/_posts/mysql/数据库事务.md","hash":"8c6c999312d46630634872b302be4734ffa3e1e9","modified":1571043667924},{"_id":"source/_posts/nginx/nginx伪静态.md","hash":"8c16a3b620863f34545113300d2cfd8609f1d5cb","modified":1571043667949},{"_id":"source/_posts/nginx/nginx配置.md","hash":"d3c2ccb6657550b56b9a951fa3c48b5717871dc6","modified":1571043667958},{"_id":"source/_posts/oracle/Oracle基本管理.md","hash":"dba5961ecc8b54f89dcac6e942f025419fbc7b5f","modified":1571043668111},{"_id":"source/_posts/oracle/Oracle表管理.md","hash":"112c69d871eab39ed4875b4b52bd41768f71cbf4","modified":1571043668119},{"_id":"source/_posts/python/python-类.md","hash":"1a88f4b6743551720e994bddf61a9cd70fd4b57e","modified":1571043668165},{"_id":"source/_posts/python/python-字符串格式.md","hash":"5722ad8a7c9738d52b49454d77160c8eb8cfe444","modified":1571043668165},{"_id":"source/_posts/python/python-装饰器.md","hash":"bbc959ff999c57f79d49962266e2e6b12dfd4825","modified":1571043668165},{"_id":"source/_posts/react/create-react-app脚手架.md","hash":"1f6182e86ddec3d7afc1e2d68870c12bb9f61585","modified":1571043668244},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"9ac30b9439fab69973cf4722dbf2945a18fd3804","modified":1571043669009},{"_id":"source/_posts/python/python中and和or用法.md","hash":"08baa4624e723ab0a40db96989c6edf3f75e672f","modified":1571989447393},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"55cd81ef9183426d6d99fd91550fce0a9cc92aa0","modified":1571043669009},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"1a88a13547897652a532b05a7d79802d83e31ce5","modified":1571043669118},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"02a95a88774cc50dbcc32242b6c8ac7e9d9028bb","modified":1571043669099},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"6156bf20791e46fc1c5872113276c1c1f5c13773","modified":1571043669101},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"ec7b3ec79bbbead9c7e43e2e6c6b5c8bef509410","modified":1571043669159},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"bc4cb19b20de55a0332647f4dca9684184383685","modified":1571043669210},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"d39afaad6b0dd2a3ae27e6db3e9a6cd6014622fa","modified":1571043669210},{"_id":"themes/indigo/layout/_partial/paginator.ejs","hash":"dc27242927890f130a64400596b9b7ad5fca8972","modified":1571043669219},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"a87d9b0485b3bf4cdfdad890e5974c43dbaa8240","modified":1571043669331},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"439d6315a1b16e32b77a68c3f0cb2961d581086a","modified":1571043669364},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"c2091c621b5480ef1e69d72027028cec8e929892","modified":1571043669377},{"_id":"themes/indigo/layout/_partial/tags-bar.ejs","hash":"19eff4876d31080a427644f7a43fe172d0c008c6","modified":1571043670118},{"_id":"themes/indigo/source/css/style.less","hash":"f22d4146e0bdb4485d33f20080c67ba05724afea","modified":1571043671360},{"_id":"themes/indigo/source/img/alipay.jpg","hash":"6054d9ed2ca7cd1f645b729e05632134467d4daa","modified":1571043671368},{"_id":"themes/indigo/source/img/avatar.jpg","hash":"62a4893b1a32e997dcdb6e467b10559df75221e2","modified":1571043671381},{"_id":"themes/indigo/source/img/avatar.png","hash":"2c14f8e54893a61fdeb47dc1dbcc1074b427738b","modified":1571043671395},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1571043671436},{"_id":"themes/indigo/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1571043671427},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1571043671446},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1571043671463},{"_id":"themes/indigo/source/img/wechat.jpg","hash":"ef069cc9e80c7553fd60589b0727bbbf8c6de372","modified":1571043671486},{"_id":"themes/indigo/source/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1571043671555},{"_id":"themes/indigo/source/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1571043671571},{"_id":"themes/indigo/source/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1571043671596},{"_id":"themes/indigo/source/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1571043671617},{"_id":"source/_posts/assets/16a07877f982bd5c-20190428093516267.png","hash":"6aab0e4021f072f930dc394306f51df9ff8c51f5","modified":1571043667212},{"_id":"source/_posts/assets/16a07877f982bd5c-20190428093525747.png","hash":"6aab0e4021f072f930dc394306f51df9ff8c51f5","modified":1571043667221},{"_id":"source/_posts/assets/16a07877f982bd5c-20190428093534567.png","hash":"6aab0e4021f072f930dc394306f51df9ff8c51f5","modified":1571043667241},{"_id":"source/_posts/assets/16a07877f982bd5c-6415292.png","hash":"6aab0e4021f072f930dc394306f51df9ff8c51f5","modified":1571043667195},{"_id":"source/_posts/assets/16a07877f982bd5c.png","hash":"6aab0e4021f072f930dc394306f51df9ff8c51f5","modified":1571043667276},{"_id":"source/_posts/assets/16a07879db4e469e.png","hash":"c00e7874920e18a20edd208590f63174a8305918","modified":1571043667276},{"_id":"themes/indigo/layout/_partial/plugins/baidu.ejs","hash":"e44d526029f122e9c2c74f3a647c35002c818cbe","modified":1571043669429},{"_id":"themes/indigo/layout/_partial/plugins/disqus.ejs","hash":"4a0c01e4195f685f9825fcd016d01249dbdd52ca","modified":1571043669438},{"_id":"themes/indigo/layout/_partial/plugins/dynamic-title.ejs","hash":"23c101d45911eb0846533aaa2d409c43aa5e899a","modified":1571043669464},{"_id":"themes/indigo/layout/_partial/plugins/gitment.ejs","hash":"5723d507eca4390e8e5d18c0770e7953b8c22f5a","modified":1571043669502},{"_id":"themes/indigo/layout/_partial/plugins/google-analytics.ejs","hash":"a947f4076b54b48d4df5baf2d5b3c39b632c7576","modified":1571043669503},{"_id":"themes/indigo/layout/_partial/plugins/hyper-comments.ejs","hash":"e5a83acc7c2e385b0c9abf428e86e8fdfd3a5202","modified":1571043669524},{"_id":"themes/indigo/layout/_partial/plugins/mathjax.ejs","hash":"ea603a057196de53bd6afab1fddb93d11f27eb81","modified":1571043669548},{"_id":"themes/indigo/layout/_partial/plugins/page-visit.ejs","hash":"2decb77bf3c1a064ea6ce1d4e78892c434d9c884","modified":1571043669586},{"_id":"themes/indigo/layout/_partial/plugins/site-visit.ejs","hash":"8fbd0910828f1ab6eba728bdecc9811d623baae2","modified":1571043669598},{"_id":"themes/indigo/layout/_partial/plugins/tajs.ejs","hash":"97b48fe10be1c71d4ff25ccec3bd92d97466c9c5","modified":1571043669618},{"_id":"themes/indigo/layout/_partial/plugins/uyan.ejs","hash":"e370bd04ea5cf1c83e0c20516aff7ba3ca8b2d0b","modified":1571043669651},{"_id":"themes/indigo/layout/_partial/plugins/valine.ejs","hash":"a976ca36bd09aeb2902bf94fcc7a59975ea25148","modified":1571043669684},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c7476165721a3a5e34d00d8c5c07e1e5474cd800","modified":1571043669684},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"bcc3bd7a9023d71778f15e98c88552335ae69a69","modified":1571043669684},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"b0c680ce5b8aaf461a6731b1ff1287bd140c168a","modified":1571043669793},{"_id":"themes/indigo/layout/_partial/post/copyright.ejs","hash":"5305ed30ee35cf50f87656737d0ffe85f5bfc16b","modified":1571043669711},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"11e7d504f7c7a3c4c052da13cfa8ea4862c9383e","modified":1571043669817},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"ea85b46e12d3b9c3612eef7aa76289a663fbc096","modified":1571043669783},{"_id":"themes/indigo/layout/_partial/post/reward-btn.ejs","hash":"41c242fe3159dc68cec8dd00ab6d2663f5a51179","modified":1571043669857},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"23719e09689b3afbb19214c6603eb02f896cb9ba","modified":1571043669899},{"_id":"themes/indigo/layout/_partial/post/share-fab.ejs","hash":"93482ad7d1e01b966f5ee1c5d12b88564e02b349","modified":1571043669918},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"8df0d7bf6f8e106cdbdac2dd10a97367aa0695f8","modified":1571043669941},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"b3dc38652c4a018a37418136478dcd522fc49f79","modified":1571043669965},{"_id":"themes/indigo/layout/_partial/post/toc.ejs","hash":"ad287a70724eb7cd8cd2a03a45b68032ee99973d","modified":1571043670024},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"062d56cb88ae2be3a6616b911d4ebeffcbfe3cff","modified":1571043669992},{"_id":"themes/indigo/layout/_partial/post/updated.ejs","hash":"5caa71745aa340ce57938a930f3b898ee7518d74","modified":1571043670076},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"7d2a6886265386c640e94ffca3f042675f701a35","modified":1571043670448},{"_id":"themes/indigo/source/css/_plugin/valine.less","hash":"ddbb7647d83f732f9b0d5d817d40a748006949cc","modified":1571043670799},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"d476cd3537bcd8a02d055cc223f5c805b8638cc2","modified":1571043670461},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"b7db31b9bc563c10b9e3cf3e6d9cfddfeb3e805a","modified":1571043670486},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"90f0948a9182c14b1dac1e9dbed3c883543266f9","modified":1571043670510},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"58492b7cdb45fe09b026b2f34e8ae69c2ddb8228","modified":1571043670538},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"4390ed22abad59c8b28ed1a479a52f15b5f9cf4a","modified":1571043670552},{"_id":"themes/indigo/source/css/_partial/lightbox.less","hash":"9b961eb1d70e7658f42cf2ca895fa5e35a6b6541","modified":1571043670579},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"f9d06a1e24fb4857fd18d7a0bfbb3a0ab2d1c742","modified":1571043670619},{"_id":"themes/indigo/source/css/_partial/page.less","hash":"e92ccb53e6ac73a51498c6a9672db9d0d2bc7f1a","modified":1571043670649},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"1c041bf91106808e5480c60d9ece45431bb503b3","modified":1571043670659},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"4857f90bb57fc22ca3f942d8934d86d5e9e82c1e","modified":1571043670679},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"1d6641ae7568a0153d24beba9fd9704d2b155f6c","modified":1571043670721},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"2e0469ed8161d5672d903ca1a8027cd65fe007f1","modified":1571043670699},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"27d80bcc96a53dd1e7eaa9a7d746e4b212357302","modified":1571043670733},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"959f4373fda6e45f6a4041a995ed3ea8a05a5170","modified":1571043670749},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"082896b966ed25b39c74e7b007b4f54c235685a4","modified":1571043670769},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"77bfd0b373b0469eb0176167fb076ccda4edf2a7","modified":1571043670784},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"ca30b732d2efbb0cd55a272ecdabc97f895aee78","modified":1571043670477},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1571043671031},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1571043671093},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1571043671076},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1571043671143},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1571043671151},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1571043671238},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1571043671194},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1571043671219},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1571043671356},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1571043671315},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1571043671000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1571043670982},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1571043671058},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1571043671123},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1571043671070},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1571043671336},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1571043671288},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1571043671271},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1571043671262},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1571043671019},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1571043670885},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1571043671331},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1571043670944},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1571043671118},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1571043671184},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1571043670917},{"_id":"public/atom.xml","hash":"b813a25c428fa829406b3843e48977d28a1c9b82","modified":1572253738922},{"_id":"public/content.json","hash":"d398bb8cfb16c34e0ac05e00f5436c99fd98c732","modified":1572253738923},{"_id":"public/categories/index.html","hash":"7d0f3cfb9fb72da827ce13d5ad97af7b4b27e830","modified":1572253740017},{"_id":"public/tags/index.html","hash":"5705e75d345a5fbdbc77a1f1673b721383ad1e08","modified":1572253740017},{"_id":"public/2019/04/15/java多线程自问/index.html","hash":"0e7b90407cdcc2de530f258edabf144ae3c7bcb8","modified":1572253740388},{"_id":"public/2019/04/09/go/go工程搭建/index.html","hash":"cca20ef3d5c6951b08bd76d05ca8718c8246da58","modified":1572253740389},{"_id":"public/2019/02/15/java多线程/index.html","hash":"e07d621988bab3da3102b1f685a6a32264cd97f4","modified":1572253740394},{"_id":"public/2019/01/04/Tiemline设计方案/index.html","hash":"03cae4d905ed037f940c119f00cb36c554bb06a3","modified":1572253740395},{"_id":"public/2019/01/04/springboot-mongodb使用/index.html","hash":"9b5e8cc72450674ca487cc0deaa96cd33b752cb4","modified":1572253740395},{"_id":"public/2019/01/02/cordova打包vue/index.html","hash":"151512b6c864256aea9c4022e331c0510ee65f17","modified":1572253740395},{"_id":"public/archives/index.html","hash":"06aab03be279eba89ed91ed669a910a877dd0deb","modified":1572253740395},{"_id":"public/archives/2018/index.html","hash":"560b63272d6dcd910d70c19f40acde46bc1cf82a","modified":1572253740395},{"_id":"public/archives/2018/page/2/index.html","hash":"af2c12615f539ecb779602b42530f1a652a64409","modified":1572253740395},{"_id":"public/archives/2018/12/page/2/index.html","hash":"144087046e07d9f71c5b3240a7926c09dcd85b43","modified":1572253740395},{"_id":"public/archives/2019/index.html","hash":"a4f315a4f6407c2b176701fa0f975151e26c6f3a","modified":1572253740395},{"_id":"public/archives/2019/01/index.html","hash":"6d896097bde51261d72766d5cbcace383bcb0a3d","modified":1572253740395},{"_id":"public/archives/2019/02/index.html","hash":"1e8ab7d328c82d0e87e7c124a8c0a6c8bf8c886f","modified":1572253740395},{"_id":"public/archives/2019/03/index.html","hash":"236935ffd246e09db7b0694c9fb63d54a83cb5da","modified":1572253740395},{"_id":"public/archives/2019/04/index.html","hash":"bf7d03a2df65024465fbe1db5eb40edbc085755e","modified":1572253740395},{"_id":"public/archives/2019/06/index.html","hash":"6bf7f19e58c623c2d17a1a9d7e398752b13ed688","modified":1572253740395},{"_id":"public/archives/2019/07/index.html","hash":"bc0f624ad0ce27cc2809a8f3042f8609dabbec97","modified":1572253740395},{"_id":"public/tags/web/index.html","hash":"f9ca7e8ccad01a17761c399366813cbd123d0cbc","modified":1572253740395},{"_id":"public/tags/vue/index.html","hash":"34049c203be7457f99b5e96e9e12772afb678442","modified":1572253740395},{"_id":"public/tags/css/index.html","hash":"fba6572050767ce9429862e6d5d768595f827c2f","modified":1572253740395},{"_id":"public/tags/go/index.html","hash":"190b6f03270357bdfe18ae051768baa190becb55","modified":1572253740395},{"_id":"public/tags/git/index.html","hash":"3498d05268a709319832cc586d51f71e50d8ff2e","modified":1572253740395},{"_id":"public/tags/jquery/index.html","hash":"8aaa28c78b92b37e65def210e75e6a233e774a1a","modified":1572253740395},{"_id":"public/tags/mybatis/index.html","hash":"75a04678d2503977ccbee80d4f92146a6c9fc724","modified":1572253740395},{"_id":"public/tags/react/index.html","hash":"37e01fa222f69fe300c06745dc744e1e72298630","modified":1572253740395},{"_id":"public/tags/redis/index.html","hash":"fe9210113a494155e72c39058921e57144e49893","modified":1572253740395},{"_id":"public/tags/springboot/index.html","hash":"fda4080cb0c7366de21e14738c3f8451a01c09af","modified":1572253740395},{"_id":"public/tags/mongodb/index.html","hash":"a59538c08e35666d8f5116dfa12563d37423d376","modified":1572253740395},{"_id":"public/tags/spring-cloud/index.html","hash":"f5ee73e0a26437e50db26fccff124b2a6e8bd60e","modified":1572253740395},{"_id":"public/tags/lorawan/index.html","hash":"09c586b5b777439acb6f34aeda13858f38d60352","modified":1572253740395},{"_id":"public/tags/oracle/index.html","hash":"1d9ab300dfeb393582e9d213a8c716e2ef725925","modified":1572253740396},{"_id":"public/tags/odoo/index.html","hash":"958510d49c8ec6524e701e727376f28eee000397","modified":1572253740396},{"_id":"public/2019/07/27/mysql/mysql修改字符集/index.html","hash":"f31523e3e551467afe33c4147e7c61ace37b910e","modified":1572253740396},{"_id":"public/2019/06/18/Odoo 12开发者指南第二章 管理Odoo服务器实例/index.html","hash":"b830a9df750f971ecee6a2825d3c57c419ff10f3","modified":1572253740396},{"_id":"public/2019/06/01/import-在python中的区别/index.html","hash":"060a14ee240e8d38955da49c1d81dcace721ee2d","modified":1572253740396},{"_id":"public/2019/04/11/redis分布式锁/index.html","hash":"34486433e8894c97f0f93fcbeb861554f567c91b","modified":1572253740396},{"_id":"public/2019/04/10/protobuf使用/index.html","hash":"adb699a59d99e67223e2eb1e30fa6288e2c857b1","modified":1572253740396},{"_id":"public/2019/04/10/go基本语法/index.html","hash":"ce6b9313a52d762d18d9b06a7cabebaed2ffb00d","modified":1572253740396},{"_id":"public/2019/04/10/makefile编写/index.html","hash":"fbe44435e92f5296847c012927a2e879a6ac8a52","modified":1572253740396},{"_id":"public/2019/04/10/mybatis-sessions/index.html","hash":"23a76c083ba7a1104c7d4d4ed01204e318c74857","modified":1572253740396},{"_id":"public/2019/04/09/git基本操作/index.html","hash":"70d557ead178a41c02fcaa18538e857bcd78c1ad","modified":1572253740396},{"_id":"public/2019/03/29/mysql/mysql权限管理/index.html","hash":"4c88193c9821cd66c527d8b211d77903f6bfb757","modified":1572253740396},{"_id":"public/2019/03/29/mysql/mysql安装/index.html","hash":"4b3b5b26d852b370725286970a0a8ab1304d6829","modified":1572253740396},{"_id":"public/2019/03/29/ngrok环境搭建/index.html","hash":"1f54c460d82f777ba22ffefb51f71731cc89cc92","modified":1572253740396},{"_id":"public/2019/03/25/Druid初始化/index.html","hash":"9b7c27c5a47ed23a343d37ef8801f8a95291176a","modified":1572253740396},{"_id":"public/2019/02/13/go/sqlx基本使用/index.html","hash":"5097bfb87bee0b0918b58540d52135415a59df73","modified":1572253740396},{"_id":"public/2019/01/12/jquery基本操作/index.html","hash":"a4dbb6f9560807cdd68efb954043108df98c8af8","modified":1572253740396},{"_id":"public/2019/01/06/springcloud-eureka/index.html","hash":"7030f88c7ae916938a6e991429ed301a1e277e59","modified":1572253740396},{"_id":"public/2019/01/04/查找附近的人/index.html","hash":"bb750a971e4d46d33b5eedfd43c35cadf0215662","modified":1572253740396},{"_id":"public/2018/12/29/oracle/Oracle表管理/index.html","hash":"a724984fe823d422631ea4a6deede1151f3a19d9","modified":1572253740396},{"_id":"public/2018/12/29/oracle/Oracle基本管理/index.html","hash":"06ba89bf40854daa469b16c7191b62c9c627b5f9","modified":1572253740396},{"_id":"public/2018/12/17/Vue插件开发/index.html","hash":"2319893ba85150a3e1eb41d991af3f082d715f86","modified":1572253740396},{"_id":"public/2018/12/05/JSqlParser教程/index.html","hash":"61c48d4e33e62137eedb1d10fbd69dd9b40ef605","modified":1572253740396},{"_id":"public/2018/12/05/react入门教程/index.html","hash":"d515c791a334ea27a2c0101959d4c9490aefe4b0","modified":1572253740396},{"_id":"public/2018/12/05/centos7修改网卡/index.html","hash":"56c6c7a791e9955aacf4da832cb8f8904a302dde","modified":1572253740397},{"_id":"public/2018/12/05/nvc-server安装/index.html","hash":"dbb723b8ce9b9fc155d0b9ab926aea5d0eb0d58c","modified":1572253740397},{"_id":"public/2018/12/05/VirtualBox磁盘扩容/index.html","hash":"82931193a8935e10020350e4a97fe60d5de796a0","modified":1572253740397},{"_id":"public/2018/12/05/lorawan协议（中文版）/index.html","hash":"3df3aa57da84189a24167993e9c7198d658fc2d7","modified":1572253740397},{"_id":"public/2018/12/05/lorawan协议/index.html","hash":"cbe2967eeb924d0dca7f87c7f1280cefa475f1f2","modified":1572253740397},{"_id":"public/2018/12/05/let-us-encrypt证书/index.html","hash":"6ab3ba24b1cb1c1c91d12dfae08bfe3c3c4681c1","modified":1572253740397},{"_id":"public/2018/12/04/css动画/index.html","hash":"450a359c23ae4cef46601565c9ed4d82518359a3","modified":1572253740397},{"_id":"public/2018/12/03/清除inline-block之间的间隙/index.html","hash":"7fc7bc122f10ce1c4a2fb11380593dd282c377f2","modified":1572253740397},{"_id":"public/archives/page/2/index.html","hash":"fa477ddb5c3d5c11e776b8e6e73f75161972f522","modified":1572253740397},{"_id":"public/archives/page/3/index.html","hash":"42b563ecf19d59110445e3b67f3a72e453f3852b","modified":1572253740397},{"_id":"public/archives/page/4/index.html","hash":"807fafb5d699cb2a31f5bfc6a225e0667d77b270","modified":1572253740397},{"_id":"public/archives/2018/12/index.html","hash":"3d43fa8380bf3299a42e3faa95625d8e58c2b0c0","modified":1572253740397},{"_id":"public/archives/2019/page/2/index.html","hash":"6d04a705d91c2e5265c3895210634328d1bf3aa1","modified":1572253740397},{"_id":"public/archives/2019/page/3/index.html","hash":"2636b7638f5f44f73e7467474d03731be9eee041","modified":1572253740397},{"_id":"public/index.html","hash":"e45fccac826b6ea86c6e26fa92be80831e9b51f0","modified":1572253740397},{"_id":"public/page/2/index.html","hash":"6e8382872f8110cab23d881b27e564206ecc0780","modified":1572253740397},{"_id":"public/page/3/index.html","hash":"444ead25fd489a03482a1ecac94535fac6349366","modified":1572253740397},{"_id":"public/page/4/index.html","hash":"21a50327e96da0f99778465c0bc85470caaf56a7","modified":1572253740397},{"_id":"public/tags/java/index.html","hash":"5895cb66316e6cab2a0642570d51a858e0eede89","modified":1572253740397},{"_id":"public/tags/js/index.html","hash":"d4bb7f69852353ecf0233eb45b0e71f3bfdc64cd","modified":1572253740397},{"_id":"public/tags/linux/index.html","hash":"928748517a8808610673f9c82e71ac47948f414d","modified":1572253740397},{"_id":"public/tags/python/index.html","hash":"3e18393d75eea1063e36782ce3d3339758f280a1","modified":1572253740397},{"_id":"public/tags/mysql/index.html","hash":"e68a00555e44173d2101ddd794cb15d718e68e61","modified":1572253740397},{"_id":"public/2019/10/18/weboack性能优化笔记/index.html","hash":"0a9f1e09f6e84f729f565d3ea8cc8d1c7845e5d1","modified":1572253740403},{"_id":"public/2019/08/03/java/spring的jms事务/index.html","hash":"0a80f1fd1ae1763eca4c134770d0a0cfff38381a","modified":1572253740403},{"_id":"public/2019/04/15/java/java多线程自问/index.html","hash":"b36fd694ef99b5d200c8a091258dee760a8a1460","modified":1572253740403},{"_id":"public/2019/02/15/java/java多线程/index.html","hash":"42ffda9bf418fdda3747d6f9b427e58119fa62df","modified":1572253740403},{"_id":"public/archives/page/7/index.html","hash":"17c772022f4368d2209424694b66b498554c1afc","modified":1572253740403},{"_id":"public/archives/2019/page/5/index.html","hash":"162250e0f96b8ba8108bfcbc4591aa28e613b90f","modified":1572253740403},{"_id":"public/archives/2019/08/index.html","hash":"036bd22f8517a006fde4f7c362038dcbdd005a18","modified":1572253740403},{"_id":"public/archives/2019/09/index.html","hash":"c9775b838e66d4a51e2514df9c3113327c3723f6","modified":1572253740403},{"_id":"public/archives/2019/10/index.html","hash":"ae874c0935aeb6d4f55564febd7526ad61dd3b95","modified":1572253740403},{"_id":"public/page/7/index.html","hash":"d9f92b97e3e7db83cb481d9c88b6a1ec37bce8b7","modified":1572253740404},{"_id":"public/tags/java/page/2/index.html","hash":"fcba62f0a32e2f2e47c063e6aeb3b7d81a150f64","modified":1572253740404},{"_id":"public/tags/babel/index.html","hash":"4f5b316e7ec971057776705c61e9c48b8f553701","modified":1572253740404},{"_id":"public/tags/spring/index.html","hash":"a31f2c1a87400aa7cd45a72a38a85ecb47150a37","modified":1572253740404},{"_id":"public/tags/nginx/index.html","hash":"137a09539f37b8f104ec4c61526a523d2a06b8b6","modified":1572253740404},{"_id":"public/2019/10/25/java/使用jenv对java多版本管理/index.html","hash":"5e7d3c78a6277b543afa0e7f6cec018e126d5eba","modified":1572253740404},{"_id":"public/2019/10/19/react-tree-walker学习/index.html","hash":"ddb3d0096063d45ffc2f5e23879994e980d70c06","modified":1572253740404},{"_id":"public/2019/10/28/java-线程池/index.html","hash":"1ce021799b7f9d0089be2039118d3af6e3e2968f","modified":1572253740404},{"_id":"public/2019/10/25/python/python中and和or用法/index.html","hash":"9b351cc86c7b503e35a0445681e15aebd8a1625c","modified":1572253740404},{"_id":"public/2019/10/18/lodash按需加载/index.html","hash":"232d45805813f8cd8afa8485bcb592598162c310","modified":1572253740404},{"_id":"public/2019/10/18/babel配置/index.html","hash":"21f979ad09a4c40865d0c1a50fe72620e1fbad40","modified":1572253740404},{"_id":"public/2019/10/14/java/java-线程池/index.html","hash":"cf461c28e9b85afffb52f050e29160eec6e9e826","modified":1572253740404},{"_id":"public/2019/10/14/hello-world/index.html","hash":"30d0a9a3077082309c02f98bfe8fb490d1f9e1dc","modified":1572253740404},{"_id":"public/2019/09/02/php5环境搭建/index.html","hash":"28ac94eb156ebf98e727ac3a0d5b7cc3e73ddb2f","modified":1572253740404},{"_id":"public/2019/09/02/linux压缩/index.html","hash":"2549ebf39da54c214863ef0afb352a8a955f1980","modified":1572253740404},{"_id":"public/2019/09/02/nginx/nginx伪静态/index.html","hash":"78a9560732eaa9c13d86e21ad18a36655250dec4","modified":1572253740404},{"_id":"public/2019/09/01/spring数据库事务/index.html","hash":"d47319ed8070972c8a2ed45f754c6822a8907457","modified":1572253740404},{"_id":"public/2019/09/01/mysql/数据库事务/index.html","hash":"54c7d1bb82b43890b1f5291a79f8e4940415df74","modified":1572253740404},{"_id":"public/2019/08/31/mysql/mysql性能检测/index.html","hash":"59dfd03474ba0cf7ad229083aeeb892b35908102","modified":1572253740404},{"_id":"public/2019/08/10/java/hibernate-@Embedded和-Embeddable/index.html","hash":"50ceae237d8297c751d5815d56a66bddba5ba48a","modified":1572253740404},{"_id":"public/2019/08/07/react/create-react-app脚手架/index.html","hash":"88bd62b7d6088831409570134382e80c343a0ef5","modified":1572253740404},{"_id":"public/2019/08/04/python/python-类/index.html","hash":"d286a7e5e9490021d03806ffd3667a323f099d0a","modified":1572253740405},{"_id":"public/2019/08/03/java/spring事务实现/index.html","hash":"8f417139c0956eb96d2b1b746b0d9b0121e05092","modified":1572253740405},{"_id":"public/2019/07/31/python/python-字符串格式/index.html","hash":"b2e7a0f1e25958d442eece80147721134c48d14f","modified":1572253740405},{"_id":"public/2019/07/31/python/python-装饰器/index.html","hash":"bdb1b96869638e2f0cd0dd280963874c1ad96642","modified":1572253740405},{"_id":"public/2019/07/27/mysql/mysql自带的数据库/index.html","hash":"277198b4bfc6bd6943065a289b21becd67cea749","modified":1572253740405},{"_id":"public/2018/12/05/nginx/nginx配置/index.html","hash":"63b5acb3a20253fd1abe3d3f42176bcc2098971d","modified":1572253740405},{"_id":"public/archives/page/5/index.html","hash":"2651e1a77c8b7ffe8049bb82661d41da0719ea21","modified":1572253740405},{"_id":"public/archives/page/6/index.html","hash":"025657070b19b1bafa622ca3ca5ae4a97432580e","modified":1572253740405},{"_id":"public/archives/2019/page/4/index.html","hash":"970b07b2d5541a983c87167d56eba412023891d5","modified":1572253740405},{"_id":"public/page/5/index.html","hash":"474538ce00b5649e54afc2d6555f22db4aa88751","modified":1572253740405},{"_id":"public/page/6/index.html","hash":"1f8b1753ee753af585b1c4bbc79cdd096e24fe19","modified":1572253740405},{"_id":"public/img/alipay.jpg","hash":"6054d9ed2ca7cd1f645b729e05632134467d4daa","modified":1572253740407},{"_id":"public/img/avatar.jpg","hash":"62a4893b1a32e997dcdb6e467b10559df75221e2","modified":1572253740407},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1572253740407},{"_id":"public/img/avatar.png","hash":"2c14f8e54893a61fdeb47dc1dbcc1074b427738b","modified":1572253740407},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1572253740407},{"_id":"public/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1572253740407},{"_id":"public/img/wechat.jpg","hash":"ef069cc9e80c7553fd60589b0727bbbf8c6de372","modified":1572253740407},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1572253740407},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1572253740407},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1572253740407},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1572253740407},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1572253740408},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1572253740408},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1572253740408},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1572253740408},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1572253740408},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1572253740427},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1572253740427},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1572253740427},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1572253740428},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1572253740428},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1572253740428},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1572253740428},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1572253740428},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1572253740428},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1572253740428},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1572253740428},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1572253740428},{"_id":"public/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1572253740435},{"_id":"public/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1572253740435},{"_id":"public/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1572253740435},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1572253740435},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1572253740435},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1572253740435},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1572253740441},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1572253740441},{"_id":"public/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1572253740446},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1572253740515},{"_id":"public/css/style.css","hash":"27f88e278b738328b5acd28e88b5cb20daa490e6","modified":1572253740659}],"Category":[],"Data":[],"Page":[{"title":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ncomments: false\n---\n","date":"2019-10-14T09:01:08.419Z","updated":"2019-10-14T09:01:08.417Z","path":"categories/index.html","layout":"page","_id":"ck2a7a41x0001ic1yit6kzg27","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ncomments: false\n---\n","date":"2019-10-14T09:01:08.436Z","updated":"2019-10-14T09:01:08.434Z","path":"tags/index.html","layout":"page","_id":"ck2a7a41z0003ic1y1ehe95gh","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JSqlParser教程","date":"2018-12-05T13:58:31.000Z","_content":"\n# 解析\n\n## 获取表名\n\n```java\n//获取所有使用过的表\nStatement statement = CCJSqlParserUtil.parse(\"SELECT * FROM MY_TABLE1\");\n        Select selectStatement = (Select) statement;\n        TablesNamesFinder tablesNamesFinder = new TablesNamesFinder();\n        List<String> tableList = tablesNamesFinder.getTableList(selectStatement);\n```\n\n## 应用别名\n\n```java\n// SELECT a AS A1, b AS A2, c AS A3 FROM test\nSelect select = (Select) CCJSqlParserUtil.parse(\"select a,b,c from test\");\n        final AddAliasesVisitor instance = new AddAliasesVisitor();\n        select.getSelectBody().accept(instance);\n```\n\n## 添加一列或者表达式\n\n```java\n// SELECT a, b FROM mytable\nSelect select = (Select) CCJSqlParserUtil.parse(\"select a from mytable\");\nSelectUtils.addExpression(select, new Column(\"b\"));\n```\n\n## 添加where语句\n\n### 新建where\n\n```java\nSelect select = (Select) CCJSqlParserUtil.parse(\"select name from user\");\n        PlainSelect plainSelect = (PlainSelect) select.getSelectBody();\n        if (plainSelect.getWhere() == null) {\n            EqualsTo equalsTo = new EqualsTo();\n            equalsTo.setLeftExpression(new Column(\"id\"));\n            equalsTo.setRightExpression(new LongValue(1000L));\n            plainSelect.setWhere(equalsTo);\n        }\n```\n\n### 添加where\n\n```java\nSelect select = (Select) CCJSqlParserUtil.parse(\"select name from user where id = 1000\");\n    PlainSelect plainSelect = (PlainSelect) select.getSelectBody();\n\n    // 原where表达式\n    Expression where = plainSelect.getWhere();\n    // 新增的查询条件表达式\n    EqualsTo equalsTo = new EqualsTo();\n    equalsTo.setLeftExpression(new Column(\"name\"));\n    equalsTo.setRightExpression(new StringValue(\"'张三'\"));\n    // 用and链接条件\n    AndExpression and = new AndExpression(where, equalsTo);\n    // 设置新的where条件\n    plainSelect.setWhere(and);\n```\n\n### 添加null\n\n```java\nSelect select = (Select) CCJSqlParserUtil.parse(\"select name from user where id = 1000\");\n   PlainSelect plainSelect = (PlainSelect) select.getSelectBody();\n\n   // 原where表达式\n   Expression where = plainSelect.getWhere();\n   // 新增的null判断条件\n   IsNullExpression isNullExpression = new IsNullExpression();\n   isNullExpression.setLeftExpression(new Column(\"name\"));\n   isNullExpression.setNot(true);\n   // 用and链接条件\n   AndExpression and = new AndExpression(where, isNullExpression);\n   // 设置新的where条件\n   plainSelect.setWhere(and);\n```\n\n# 生成\n\n## 扩展插入\n\n```java\n// INSERT INTO mytable (col1) VALUES (1)\n// INSERT INTO mytable (col1, col2) VALUES (1, 5)\n// INSERT INTO mytable (col1, col2, col3) VALUES (1, 5, 10)\n\nInsert insert = (Insert) CCJSqlParserUtil.parse(\"insert into mytable (col1) values (1)\");\n        System.out.println(insert.toString());\n        insert.getColumns().add(new Column(\"col2\"));\n        insert.getItemsList().accept(new ItemsListVisitor() {\n\n            public void visit(SubSelect subSelect) {\n                throw new UnsupportedOperationException(\"Not supported yet.\");\n            }\n\n            public void visit(ExpressionList expressionList) {\n                expressionList.getExpressions().add(new LongValue(5));\n            }\n\n            public void visit(MultiExpressionList multiExprList) {\n                throw new UnsupportedOperationException(\"Not supported yet.\");\n            }\n        });\n        System.out.println(insert.toString());\n        insert.getColumns().add(new Column(\"col3\"));\n        ((ExpressionList) insert.getItemsList()).getExpressions().add(new LongValue(10));\n```\n\n## 建立select\n\n```java\nSelect select = SelectUtils.buildSelectFromTable(new Table(\"mytable\"));\n\nSelect select = SelectUtils.buildSelectFromTableAndExpressions(new Table(\"mytable\"), new Column(\"a\"), new Column(\"b\"));\n\nSelect select = SelectUtils.buildSelectFromTableAndExpressions(new Table(\"mytable\"), \"a+b\", \"test\");\n```\n\n## 代替字符串的值\n\n```java\nString sql =\"SELECT NAME, ADDRESS, COL1 FROM USER WHERE SSN IN ('11111111111111', '22222222222222');\";\nSelect select = (Select) CCJSqlParserUtil.parse(sql);\n\n//Start of value modification\nStringBuilder buffer = new StringBuilder();\nExpressionDeParser expressionDeParser = new ExpressionDeParser() {\n\n    @Override\n    public void visit(StringValue stringValue) {\n\tthis.getBuffer().append(\"XXXX\");\n    }\n    \n};\nSelectDeParser deparser = new SelectDeParser(expressionDeParser,buffer );\nexpressionDeParser.setSelectVisitor(deparser);\nexpressionDeParser.setBuffer(buffer);\nselect.getSelectBody().accept(deparser);\n//End of value modification\n\n\nSystem.out.println(buffer.toString());\n//Result is: SELECT NAME, ADDRESS, COL1 FROM USER WHERE SSN IN (XXXX, XXXX)\nimport net.sf.jsqlparser.JSQLParserException;\nimport net.sf.jsqlparser.expression.LongValue;\nimport net.sf.jsqlparser.expression.StringValue;\nimport net.sf.jsqlparser.parser.CCJSqlParserUtil;\nimport net.sf.jsqlparser.statement.Statement;\nimport net.sf.jsqlparser.util.deparser.ExpressionDeParser;\nimport net.sf.jsqlparser.util.deparser.SelectDeParser;\nimport net.sf.jsqlparser.util.deparser.StatementDeParser;\n\npublic class ReplaceColumnValues {\n\n    static class ReplaceColumnAndLongValues extends ExpressionDeParser {\n\n        @Override\n        public void visit(StringValue stringValue) {\n            this.getBuffer().append(\"?\");\n        }\n\n        @Override\n        public void visit(LongValue longValue) {\n            this.getBuffer().append(\"?\");\n        }\n    }\n\n    public static String cleanStatement(String sql) throws JSQLParserException {\n        StringBuilder buffer = new StringBuilder();\n        ExpressionDeParser expr = new ReplaceColumnAndLongValues();\n\n        SelectDeParser selectDeparser = new SelectDeParser(expr, buffer);\n        expr.setSelectVisitor(selectDeparser);\n        expr.setBuffer(buffer);\n        StatementDeParser stmtDeparser = new StatementDeParser(expr, selectDeparser, buffer);\n\n        Statement stmt = CCJSqlParserUtil.parse(sql);\n\n        stmt.accept(stmtDeparser);\n        return stmtDeparser.getBuffer().toString();\n    }\n\n    public static void main(String[] args) throws JSQLParserException {\n        System.out.println(cleanStatement(\"SELECT 'abc', 5 FROM mytable WHERE col='test'\"));\n        System.out.println(cleanStatement(\"UPDATE table1 A SET A.columna = 'XXX' WHERE A.cod_table = 'YYY'\"));\n        System.out.println(cleanStatement(\"INSERT INTO example (num, name, address, tel) VALUES (1, 'name', 'test ', '1234-1234')\"));\n        System.out.println(cleanStatement(\"DELETE FROM table1 where col=5 and col2=4\"));\n    }\n}\n\n\n\n/*\nSELECT ?, ? FROM mytable WHERE col = ?\nUPDATE table1 A SET A.columna = ? WHERE A.cod_table = ?\nINSERT INTO example (num, name, address, tel) VALUES (?, ?, ?, ?)\nDELETE FROM table1 WHERE col = ? AND col2 = ?\n*/\n```\n\n# 参考\n\n> https://github.com/JSQLParser/JSqlParser/wiki","source":"_posts/JSqlParser教程.md","raw":"---\ntitle: JSqlParser教程\ndate: 2018-12-05 21:58:31\ntags:\n- java\n---\n\n# 解析\n\n## 获取表名\n\n```java\n//获取所有使用过的表\nStatement statement = CCJSqlParserUtil.parse(\"SELECT * FROM MY_TABLE1\");\n        Select selectStatement = (Select) statement;\n        TablesNamesFinder tablesNamesFinder = new TablesNamesFinder();\n        List<String> tableList = tablesNamesFinder.getTableList(selectStatement);\n```\n\n## 应用别名\n\n```java\n// SELECT a AS A1, b AS A2, c AS A3 FROM test\nSelect select = (Select) CCJSqlParserUtil.parse(\"select a,b,c from test\");\n        final AddAliasesVisitor instance = new AddAliasesVisitor();\n        select.getSelectBody().accept(instance);\n```\n\n## 添加一列或者表达式\n\n```java\n// SELECT a, b FROM mytable\nSelect select = (Select) CCJSqlParserUtil.parse(\"select a from mytable\");\nSelectUtils.addExpression(select, new Column(\"b\"));\n```\n\n## 添加where语句\n\n### 新建where\n\n```java\nSelect select = (Select) CCJSqlParserUtil.parse(\"select name from user\");\n        PlainSelect plainSelect = (PlainSelect) select.getSelectBody();\n        if (plainSelect.getWhere() == null) {\n            EqualsTo equalsTo = new EqualsTo();\n            equalsTo.setLeftExpression(new Column(\"id\"));\n            equalsTo.setRightExpression(new LongValue(1000L));\n            plainSelect.setWhere(equalsTo);\n        }\n```\n\n### 添加where\n\n```java\nSelect select = (Select) CCJSqlParserUtil.parse(\"select name from user where id = 1000\");\n    PlainSelect plainSelect = (PlainSelect) select.getSelectBody();\n\n    // 原where表达式\n    Expression where = plainSelect.getWhere();\n    // 新增的查询条件表达式\n    EqualsTo equalsTo = new EqualsTo();\n    equalsTo.setLeftExpression(new Column(\"name\"));\n    equalsTo.setRightExpression(new StringValue(\"'张三'\"));\n    // 用and链接条件\n    AndExpression and = new AndExpression(where, equalsTo);\n    // 设置新的where条件\n    plainSelect.setWhere(and);\n```\n\n### 添加null\n\n```java\nSelect select = (Select) CCJSqlParserUtil.parse(\"select name from user where id = 1000\");\n   PlainSelect plainSelect = (PlainSelect) select.getSelectBody();\n\n   // 原where表达式\n   Expression where = plainSelect.getWhere();\n   // 新增的null判断条件\n   IsNullExpression isNullExpression = new IsNullExpression();\n   isNullExpression.setLeftExpression(new Column(\"name\"));\n   isNullExpression.setNot(true);\n   // 用and链接条件\n   AndExpression and = new AndExpression(where, isNullExpression);\n   // 设置新的where条件\n   plainSelect.setWhere(and);\n```\n\n# 生成\n\n## 扩展插入\n\n```java\n// INSERT INTO mytable (col1) VALUES (1)\n// INSERT INTO mytable (col1, col2) VALUES (1, 5)\n// INSERT INTO mytable (col1, col2, col3) VALUES (1, 5, 10)\n\nInsert insert = (Insert) CCJSqlParserUtil.parse(\"insert into mytable (col1) values (1)\");\n        System.out.println(insert.toString());\n        insert.getColumns().add(new Column(\"col2\"));\n        insert.getItemsList().accept(new ItemsListVisitor() {\n\n            public void visit(SubSelect subSelect) {\n                throw new UnsupportedOperationException(\"Not supported yet.\");\n            }\n\n            public void visit(ExpressionList expressionList) {\n                expressionList.getExpressions().add(new LongValue(5));\n            }\n\n            public void visit(MultiExpressionList multiExprList) {\n                throw new UnsupportedOperationException(\"Not supported yet.\");\n            }\n        });\n        System.out.println(insert.toString());\n        insert.getColumns().add(new Column(\"col3\"));\n        ((ExpressionList) insert.getItemsList()).getExpressions().add(new LongValue(10));\n```\n\n## 建立select\n\n```java\nSelect select = SelectUtils.buildSelectFromTable(new Table(\"mytable\"));\n\nSelect select = SelectUtils.buildSelectFromTableAndExpressions(new Table(\"mytable\"), new Column(\"a\"), new Column(\"b\"));\n\nSelect select = SelectUtils.buildSelectFromTableAndExpressions(new Table(\"mytable\"), \"a+b\", \"test\");\n```\n\n## 代替字符串的值\n\n```java\nString sql =\"SELECT NAME, ADDRESS, COL1 FROM USER WHERE SSN IN ('11111111111111', '22222222222222');\";\nSelect select = (Select) CCJSqlParserUtil.parse(sql);\n\n//Start of value modification\nStringBuilder buffer = new StringBuilder();\nExpressionDeParser expressionDeParser = new ExpressionDeParser() {\n\n    @Override\n    public void visit(StringValue stringValue) {\n\tthis.getBuffer().append(\"XXXX\");\n    }\n    \n};\nSelectDeParser deparser = new SelectDeParser(expressionDeParser,buffer );\nexpressionDeParser.setSelectVisitor(deparser);\nexpressionDeParser.setBuffer(buffer);\nselect.getSelectBody().accept(deparser);\n//End of value modification\n\n\nSystem.out.println(buffer.toString());\n//Result is: SELECT NAME, ADDRESS, COL1 FROM USER WHERE SSN IN (XXXX, XXXX)\nimport net.sf.jsqlparser.JSQLParserException;\nimport net.sf.jsqlparser.expression.LongValue;\nimport net.sf.jsqlparser.expression.StringValue;\nimport net.sf.jsqlparser.parser.CCJSqlParserUtil;\nimport net.sf.jsqlparser.statement.Statement;\nimport net.sf.jsqlparser.util.deparser.ExpressionDeParser;\nimport net.sf.jsqlparser.util.deparser.SelectDeParser;\nimport net.sf.jsqlparser.util.deparser.StatementDeParser;\n\npublic class ReplaceColumnValues {\n\n    static class ReplaceColumnAndLongValues extends ExpressionDeParser {\n\n        @Override\n        public void visit(StringValue stringValue) {\n            this.getBuffer().append(\"?\");\n        }\n\n        @Override\n        public void visit(LongValue longValue) {\n            this.getBuffer().append(\"?\");\n        }\n    }\n\n    public static String cleanStatement(String sql) throws JSQLParserException {\n        StringBuilder buffer = new StringBuilder();\n        ExpressionDeParser expr = new ReplaceColumnAndLongValues();\n\n        SelectDeParser selectDeparser = new SelectDeParser(expr, buffer);\n        expr.setSelectVisitor(selectDeparser);\n        expr.setBuffer(buffer);\n        StatementDeParser stmtDeparser = new StatementDeParser(expr, selectDeparser, buffer);\n\n        Statement stmt = CCJSqlParserUtil.parse(sql);\n\n        stmt.accept(stmtDeparser);\n        return stmtDeparser.getBuffer().toString();\n    }\n\n    public static void main(String[] args) throws JSQLParserException {\n        System.out.println(cleanStatement(\"SELECT 'abc', 5 FROM mytable WHERE col='test'\"));\n        System.out.println(cleanStatement(\"UPDATE table1 A SET A.columna = 'XXX' WHERE A.cod_table = 'YYY'\"));\n        System.out.println(cleanStatement(\"INSERT INTO example (num, name, address, tel) VALUES (1, 'name', 'test ', '1234-1234')\"));\n        System.out.println(cleanStatement(\"DELETE FROM table1 where col=5 and col2=4\"));\n    }\n}\n\n\n\n/*\nSELECT ?, ? FROM mytable WHERE col = ?\nUPDATE table1 A SET A.columna = ? WHERE A.cod_table = ?\nINSERT INTO example (num, name, address, tel) VALUES (?, ?, ?, ?)\nDELETE FROM table1 WHERE col = ? AND col2 = ?\n*/\n```\n\n# 参考\n\n> https://github.com/JSQLParser/JSqlParser/wiki","slug":"JSqlParser教程","published":1,"updated":"2019-10-14T09:01:07.647Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a41u0000ic1y1h0pz3c5","content":"<h1 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h1><h2 id=\"获取表名\"><a href=\"#获取表名\" class=\"headerlink\" title=\"获取表名\"></a>获取表名</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取所有使用过的表</span></span><br><span class=\"line\">Statement statement = CCJSqlParserUtil.parse(<span class=\"string\">\"SELECT * FROM MY_TABLE1\"</span>);</span><br><span class=\"line\">        Select selectStatement = (Select) statement;</span><br><span class=\"line\">        TablesNamesFinder tablesNamesFinder = <span class=\"keyword\">new</span> TablesNamesFinder();</span><br><span class=\"line\">        List&lt;String&gt; tableList = tablesNamesFinder.getTableList(selectStatement);</span><br></pre></td></tr></table></figure>\n<h2 id=\"应用别名\"><a href=\"#应用别名\" class=\"headerlink\" title=\"应用别名\"></a>应用别名</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SELECT a AS A1, b AS A2, c AS A3 FROM test</span></span><br><span class=\"line\">Select select = (Select) CCJSqlParserUtil.parse(<span class=\"string\">\"select a,b,c from test\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> AddAliasesVisitor instance = <span class=\"keyword\">new</span> AddAliasesVisitor();</span><br><span class=\"line\">        select.getSelectBody().accept(instance);</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加一列或者表达式\"><a href=\"#添加一列或者表达式\" class=\"headerlink\" title=\"添加一列或者表达式\"></a>添加一列或者表达式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SELECT a, b FROM mytable</span></span><br><span class=\"line\">Select select = (Select) CCJSqlParserUtil.parse(<span class=\"string\">\"select a from mytable\"</span>);</span><br><span class=\"line\">SelectUtils.addExpression(select, <span class=\"keyword\">new</span> Column(<span class=\"string\">\"b\"</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加where语句\"><a href=\"#添加where语句\" class=\"headerlink\" title=\"添加where语句\"></a>添加where语句</h2><h3 id=\"新建where\"><a href=\"#新建where\" class=\"headerlink\" title=\"新建where\"></a>新建where</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Select select = (Select) CCJSqlParserUtil.parse(<span class=\"string\">\"select name from user\"</span>);</span><br><span class=\"line\">        PlainSelect plainSelect = (PlainSelect) select.getSelectBody();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (plainSelect.getWhere() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            EqualsTo equalsTo = <span class=\"keyword\">new</span> EqualsTo();</span><br><span class=\"line\">            equalsTo.setLeftExpression(<span class=\"keyword\">new</span> Column(<span class=\"string\">\"id\"</span>));</span><br><span class=\"line\">            equalsTo.setRightExpression(<span class=\"keyword\">new</span> LongValue(<span class=\"number\">1000L</span>));</span><br><span class=\"line\">            plainSelect.setWhere(equalsTo);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加where\"><a href=\"#添加where\" class=\"headerlink\" title=\"添加where\"></a>添加where</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Select select = (Select) CCJSqlParserUtil.parse(<span class=\"string\">\"select name from user where id = 1000\"</span>);</span><br><span class=\"line\">    PlainSelect plainSelect = (PlainSelect) select.getSelectBody();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 原where表达式</span></span><br><span class=\"line\">    Expression where = plainSelect.getWhere();</span><br><span class=\"line\">    <span class=\"comment\">// 新增的查询条件表达式</span></span><br><span class=\"line\">    EqualsTo equalsTo = <span class=\"keyword\">new</span> EqualsTo();</span><br><span class=\"line\">    equalsTo.setLeftExpression(<span class=\"keyword\">new</span> Column(<span class=\"string\">\"name\"</span>));</span><br><span class=\"line\">    equalsTo.setRightExpression(<span class=\"keyword\">new</span> StringValue(<span class=\"string\">\"'张三'\"</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 用and链接条件</span></span><br><span class=\"line\">    AndExpression and = <span class=\"keyword\">new</span> AndExpression(where, equalsTo);</span><br><span class=\"line\">    <span class=\"comment\">// 设置新的where条件</span></span><br><span class=\"line\">    plainSelect.setWhere(and);</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加null\"><a href=\"#添加null\" class=\"headerlink\" title=\"添加null\"></a>添加null</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Select select = (Select) CCJSqlParserUtil.parse(<span class=\"string\">\"select name from user where id = 1000\"</span>);</span><br><span class=\"line\">   PlainSelect plainSelect = (PlainSelect) select.getSelectBody();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 原where表达式</span></span><br><span class=\"line\">   Expression where = plainSelect.getWhere();</span><br><span class=\"line\">   <span class=\"comment\">// 新增的null判断条件</span></span><br><span class=\"line\">   IsNullExpression isNullExpression = <span class=\"keyword\">new</span> IsNullExpression();</span><br><span class=\"line\">   isNullExpression.setLeftExpression(<span class=\"keyword\">new</span> Column(<span class=\"string\">\"name\"</span>));</span><br><span class=\"line\">   isNullExpression.setNot(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">   <span class=\"comment\">// 用and链接条件</span></span><br><span class=\"line\">   AndExpression and = <span class=\"keyword\">new</span> AndExpression(where, isNullExpression);</span><br><span class=\"line\">   <span class=\"comment\">// 设置新的where条件</span></span><br><span class=\"line\">   plainSelect.setWhere(and);</span><br></pre></td></tr></table></figure>\n<h1 id=\"生成\"><a href=\"#生成\" class=\"headerlink\" title=\"生成\"></a>生成</h1><h2 id=\"扩展插入\"><a href=\"#扩展插入\" class=\"headerlink\" title=\"扩展插入\"></a>扩展插入</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// INSERT INTO mytable (col1) VALUES (1)</span></span><br><span class=\"line\"><span class=\"comment\">// INSERT INTO mytable (col1, col2) VALUES (1, 5)</span></span><br><span class=\"line\"><span class=\"comment\">// INSERT INTO mytable (col1, col2, col3) VALUES (1, 5, 10)</span></span><br><span class=\"line\"></span><br><span class=\"line\">Insert insert = (Insert) CCJSqlParserUtil.parse(<span class=\"string\">\"insert into mytable (col1) values (1)\"</span>);</span><br><span class=\"line\">        System.out.println(insert.toString());</span><br><span class=\"line\">        insert.getColumns().add(<span class=\"keyword\">new</span> Column(<span class=\"string\">\"col2\"</span>));</span><br><span class=\"line\">        insert.getItemsList().accept(<span class=\"keyword\">new</span> ItemsListVisitor() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(SubSelect subSelect)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(<span class=\"string\">\"Not supported yet.\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(ExpressionList expressionList)</span> </span>&#123;</span><br><span class=\"line\">                expressionList.getExpressions().add(<span class=\"keyword\">new</span> LongValue(<span class=\"number\">5</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(MultiExpressionList multiExprList)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(<span class=\"string\">\"Not supported yet.\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        System.out.println(insert.toString());</span><br><span class=\"line\">        insert.getColumns().add(<span class=\"keyword\">new</span> Column(<span class=\"string\">\"col3\"</span>));</span><br><span class=\"line\">        ((ExpressionList) insert.getItemsList()).getExpressions().add(<span class=\"keyword\">new</span> LongValue(<span class=\"number\">10</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"建立select\"><a href=\"#建立select\" class=\"headerlink\" title=\"建立select\"></a>建立select</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Select select = SelectUtils.buildSelectFromTable(<span class=\"keyword\">new</span> Table(<span class=\"string\">\"mytable\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">Select select = SelectUtils.buildSelectFromTableAndExpressions(<span class=\"keyword\">new</span> Table(<span class=\"string\">\"mytable\"</span>), <span class=\"keyword\">new</span> Column(<span class=\"string\">\"a\"</span>), <span class=\"keyword\">new</span> Column(<span class=\"string\">\"b\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">Select select = SelectUtils.buildSelectFromTableAndExpressions(<span class=\"keyword\">new</span> Table(<span class=\"string\">\"mytable\"</span>), <span class=\"string\">\"a+b\"</span>, <span class=\"string\">\"test\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"代替字符串的值\"><a href=\"#代替字符串的值\" class=\"headerlink\" title=\"代替字符串的值\"></a>代替字符串的值</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String sql =<span class=\"string\">\"SELECT NAME, ADDRESS, COL1 FROM USER WHERE SSN IN ('11111111111111', '22222222222222');\"</span>;</span><br><span class=\"line\">Select select = (Select) CCJSqlParserUtil.parse(sql);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Start of value modification</span></span><br><span class=\"line\">StringBuilder buffer = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">ExpressionDeParser expressionDeParser = <span class=\"keyword\">new</span> ExpressionDeParser() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(StringValue stringValue)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.getBuffer().append(<span class=\"string\">\"XXXX\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">SelectDeParser deparser = <span class=\"keyword\">new</span> SelectDeParser(expressionDeParser,buffer );</span><br><span class=\"line\">expressionDeParser.setSelectVisitor(deparser);</span><br><span class=\"line\">expressionDeParser.setBuffer(buffer);</span><br><span class=\"line\">select.getSelectBody().accept(deparser);</span><br><span class=\"line\"><span class=\"comment\">//End of value modification</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(buffer.toString());</span><br><span class=\"line\"><span class=\"comment\">//Result is: SELECT NAME, ADDRESS, COL1 FROM USER WHERE SSN IN (XXXX, XXXX)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.JSQLParserException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.expression.LongValue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.expression.StringValue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.parser.CCJSqlParserUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.statement.Statement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.util.deparser.ExpressionDeParser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.util.deparser.SelectDeParser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.util.deparser.StatementDeParser;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReplaceColumnValues</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReplaceColumnAndLongValues</span> <span class=\"keyword\">extends</span> <span class=\"title\">ExpressionDeParser</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(StringValue stringValue)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.getBuffer().append(<span class=\"string\">\"?\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(LongValue longValue)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.getBuffer().append(<span class=\"string\">\"?\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">cleanStatement</span><span class=\"params\">(String sql)</span> <span class=\"keyword\">throws</span> JSQLParserException </span>&#123;</span><br><span class=\"line\">        StringBuilder buffer = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        ExpressionDeParser expr = <span class=\"keyword\">new</span> ReplaceColumnAndLongValues();</span><br><span class=\"line\"></span><br><span class=\"line\">        SelectDeParser selectDeparser = <span class=\"keyword\">new</span> SelectDeParser(expr, buffer);</span><br><span class=\"line\">        expr.setSelectVisitor(selectDeparser);</span><br><span class=\"line\">        expr.setBuffer(buffer);</span><br><span class=\"line\">        StatementDeParser stmtDeparser = <span class=\"keyword\">new</span> StatementDeParser(expr, selectDeparser, buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">        Statement stmt = CCJSqlParserUtil.parse(sql);</span><br><span class=\"line\"></span><br><span class=\"line\">        stmt.accept(stmtDeparser);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stmtDeparser.getBuffer().toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> JSQLParserException </span>&#123;</span><br><span class=\"line\">        System.out.println(cleanStatement(<span class=\"string\">\"SELECT 'abc', 5 FROM mytable WHERE col='test'\"</span>));</span><br><span class=\"line\">        System.out.println(cleanStatement(<span class=\"string\">\"UPDATE table1 A SET A.columna = 'XXX' WHERE A.cod_table = 'YYY'\"</span>));</span><br><span class=\"line\">        System.out.println(cleanStatement(<span class=\"string\">\"INSERT INTO example (num, name, address, tel) VALUES (1, 'name', 'test ', '1234-1234')\"</span>));</span><br><span class=\"line\">        System.out.println(cleanStatement(<span class=\"string\">\"DELETE FROM table1 where col=5 and col2=4\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">SELECT ?, ? FROM mytable WHERE col = ?</span></span><br><span class=\"line\"><span class=\"comment\">UPDATE table1 A SET A.columna = ? WHERE A.cod_table = ?</span></span><br><span class=\"line\"><span class=\"comment\">INSERT INTO example (num, name, address, tel) VALUES (?, ?, ?, ?)</span></span><br><span class=\"line\"><span class=\"comment\">DELETE FROM table1 WHERE col = ? AND col2 = ?</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://github.com/JSQLParser/JSqlParser/wiki\" target=\"_blank\" rel=\"noopener\">https://github.com/JSQLParser/JSqlParser/wiki</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h1><h2 id=\"获取表名\"><a href=\"#获取表名\" class=\"headerlink\" title=\"获取表名\"></a>获取表名</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取所有使用过的表</span></span><br><span class=\"line\">Statement statement = CCJSqlParserUtil.parse(<span class=\"string\">\"SELECT * FROM MY_TABLE1\"</span>);</span><br><span class=\"line\">        Select selectStatement = (Select) statement;</span><br><span class=\"line\">        TablesNamesFinder tablesNamesFinder = <span class=\"keyword\">new</span> TablesNamesFinder();</span><br><span class=\"line\">        List&lt;String&gt; tableList = tablesNamesFinder.getTableList(selectStatement);</span><br></pre></td></tr></table></figure>\n<h2 id=\"应用别名\"><a href=\"#应用别名\" class=\"headerlink\" title=\"应用别名\"></a>应用别名</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SELECT a AS A1, b AS A2, c AS A3 FROM test</span></span><br><span class=\"line\">Select select = (Select) CCJSqlParserUtil.parse(<span class=\"string\">\"select a,b,c from test\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> AddAliasesVisitor instance = <span class=\"keyword\">new</span> AddAliasesVisitor();</span><br><span class=\"line\">        select.getSelectBody().accept(instance);</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加一列或者表达式\"><a href=\"#添加一列或者表达式\" class=\"headerlink\" title=\"添加一列或者表达式\"></a>添加一列或者表达式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SELECT a, b FROM mytable</span></span><br><span class=\"line\">Select select = (Select) CCJSqlParserUtil.parse(<span class=\"string\">\"select a from mytable\"</span>);</span><br><span class=\"line\">SelectUtils.addExpression(select, <span class=\"keyword\">new</span> Column(<span class=\"string\">\"b\"</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加where语句\"><a href=\"#添加where语句\" class=\"headerlink\" title=\"添加where语句\"></a>添加where语句</h2><h3 id=\"新建where\"><a href=\"#新建where\" class=\"headerlink\" title=\"新建where\"></a>新建where</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Select select = (Select) CCJSqlParserUtil.parse(<span class=\"string\">\"select name from user\"</span>);</span><br><span class=\"line\">        PlainSelect plainSelect = (PlainSelect) select.getSelectBody();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (plainSelect.getWhere() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            EqualsTo equalsTo = <span class=\"keyword\">new</span> EqualsTo();</span><br><span class=\"line\">            equalsTo.setLeftExpression(<span class=\"keyword\">new</span> Column(<span class=\"string\">\"id\"</span>));</span><br><span class=\"line\">            equalsTo.setRightExpression(<span class=\"keyword\">new</span> LongValue(<span class=\"number\">1000L</span>));</span><br><span class=\"line\">            plainSelect.setWhere(equalsTo);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加where\"><a href=\"#添加where\" class=\"headerlink\" title=\"添加where\"></a>添加where</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Select select = (Select) CCJSqlParserUtil.parse(<span class=\"string\">\"select name from user where id = 1000\"</span>);</span><br><span class=\"line\">    PlainSelect plainSelect = (PlainSelect) select.getSelectBody();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 原where表达式</span></span><br><span class=\"line\">    Expression where = plainSelect.getWhere();</span><br><span class=\"line\">    <span class=\"comment\">// 新增的查询条件表达式</span></span><br><span class=\"line\">    EqualsTo equalsTo = <span class=\"keyword\">new</span> EqualsTo();</span><br><span class=\"line\">    equalsTo.setLeftExpression(<span class=\"keyword\">new</span> Column(<span class=\"string\">\"name\"</span>));</span><br><span class=\"line\">    equalsTo.setRightExpression(<span class=\"keyword\">new</span> StringValue(<span class=\"string\">\"'张三'\"</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 用and链接条件</span></span><br><span class=\"line\">    AndExpression and = <span class=\"keyword\">new</span> AndExpression(where, equalsTo);</span><br><span class=\"line\">    <span class=\"comment\">// 设置新的where条件</span></span><br><span class=\"line\">    plainSelect.setWhere(and);</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加null\"><a href=\"#添加null\" class=\"headerlink\" title=\"添加null\"></a>添加null</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Select select = (Select) CCJSqlParserUtil.parse(<span class=\"string\">\"select name from user where id = 1000\"</span>);</span><br><span class=\"line\">   PlainSelect plainSelect = (PlainSelect) select.getSelectBody();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 原where表达式</span></span><br><span class=\"line\">   Expression where = plainSelect.getWhere();</span><br><span class=\"line\">   <span class=\"comment\">// 新增的null判断条件</span></span><br><span class=\"line\">   IsNullExpression isNullExpression = <span class=\"keyword\">new</span> IsNullExpression();</span><br><span class=\"line\">   isNullExpression.setLeftExpression(<span class=\"keyword\">new</span> Column(<span class=\"string\">\"name\"</span>));</span><br><span class=\"line\">   isNullExpression.setNot(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">   <span class=\"comment\">// 用and链接条件</span></span><br><span class=\"line\">   AndExpression and = <span class=\"keyword\">new</span> AndExpression(where, isNullExpression);</span><br><span class=\"line\">   <span class=\"comment\">// 设置新的where条件</span></span><br><span class=\"line\">   plainSelect.setWhere(and);</span><br></pre></td></tr></table></figure>\n<h1 id=\"生成\"><a href=\"#生成\" class=\"headerlink\" title=\"生成\"></a>生成</h1><h2 id=\"扩展插入\"><a href=\"#扩展插入\" class=\"headerlink\" title=\"扩展插入\"></a>扩展插入</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// INSERT INTO mytable (col1) VALUES (1)</span></span><br><span class=\"line\"><span class=\"comment\">// INSERT INTO mytable (col1, col2) VALUES (1, 5)</span></span><br><span class=\"line\"><span class=\"comment\">// INSERT INTO mytable (col1, col2, col3) VALUES (1, 5, 10)</span></span><br><span class=\"line\"></span><br><span class=\"line\">Insert insert = (Insert) CCJSqlParserUtil.parse(<span class=\"string\">\"insert into mytable (col1) values (1)\"</span>);</span><br><span class=\"line\">        System.out.println(insert.toString());</span><br><span class=\"line\">        insert.getColumns().add(<span class=\"keyword\">new</span> Column(<span class=\"string\">\"col2\"</span>));</span><br><span class=\"line\">        insert.getItemsList().accept(<span class=\"keyword\">new</span> ItemsListVisitor() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(SubSelect subSelect)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(<span class=\"string\">\"Not supported yet.\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(ExpressionList expressionList)</span> </span>&#123;</span><br><span class=\"line\">                expressionList.getExpressions().add(<span class=\"keyword\">new</span> LongValue(<span class=\"number\">5</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(MultiExpressionList multiExprList)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(<span class=\"string\">\"Not supported yet.\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        System.out.println(insert.toString());</span><br><span class=\"line\">        insert.getColumns().add(<span class=\"keyword\">new</span> Column(<span class=\"string\">\"col3\"</span>));</span><br><span class=\"line\">        ((ExpressionList) insert.getItemsList()).getExpressions().add(<span class=\"keyword\">new</span> LongValue(<span class=\"number\">10</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"建立select\"><a href=\"#建立select\" class=\"headerlink\" title=\"建立select\"></a>建立select</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Select select = SelectUtils.buildSelectFromTable(<span class=\"keyword\">new</span> Table(<span class=\"string\">\"mytable\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">Select select = SelectUtils.buildSelectFromTableAndExpressions(<span class=\"keyword\">new</span> Table(<span class=\"string\">\"mytable\"</span>), <span class=\"keyword\">new</span> Column(<span class=\"string\">\"a\"</span>), <span class=\"keyword\">new</span> Column(<span class=\"string\">\"b\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">Select select = SelectUtils.buildSelectFromTableAndExpressions(<span class=\"keyword\">new</span> Table(<span class=\"string\">\"mytable\"</span>), <span class=\"string\">\"a+b\"</span>, <span class=\"string\">\"test\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"代替字符串的值\"><a href=\"#代替字符串的值\" class=\"headerlink\" title=\"代替字符串的值\"></a>代替字符串的值</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String sql =<span class=\"string\">\"SELECT NAME, ADDRESS, COL1 FROM USER WHERE SSN IN ('11111111111111', '22222222222222');\"</span>;</span><br><span class=\"line\">Select select = (Select) CCJSqlParserUtil.parse(sql);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Start of value modification</span></span><br><span class=\"line\">StringBuilder buffer = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">ExpressionDeParser expressionDeParser = <span class=\"keyword\">new</span> ExpressionDeParser() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(StringValue stringValue)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.getBuffer().append(<span class=\"string\">\"XXXX\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">SelectDeParser deparser = <span class=\"keyword\">new</span> SelectDeParser(expressionDeParser,buffer );</span><br><span class=\"line\">expressionDeParser.setSelectVisitor(deparser);</span><br><span class=\"line\">expressionDeParser.setBuffer(buffer);</span><br><span class=\"line\">select.getSelectBody().accept(deparser);</span><br><span class=\"line\"><span class=\"comment\">//End of value modification</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(buffer.toString());</span><br><span class=\"line\"><span class=\"comment\">//Result is: SELECT NAME, ADDRESS, COL1 FROM USER WHERE SSN IN (XXXX, XXXX)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.JSQLParserException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.expression.LongValue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.expression.StringValue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.parser.CCJSqlParserUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.statement.Statement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.util.deparser.ExpressionDeParser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.util.deparser.SelectDeParser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.util.deparser.StatementDeParser;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReplaceColumnValues</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReplaceColumnAndLongValues</span> <span class=\"keyword\">extends</span> <span class=\"title\">ExpressionDeParser</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(StringValue stringValue)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.getBuffer().append(<span class=\"string\">\"?\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(LongValue longValue)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.getBuffer().append(<span class=\"string\">\"?\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">cleanStatement</span><span class=\"params\">(String sql)</span> <span class=\"keyword\">throws</span> JSQLParserException </span>&#123;</span><br><span class=\"line\">        StringBuilder buffer = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        ExpressionDeParser expr = <span class=\"keyword\">new</span> ReplaceColumnAndLongValues();</span><br><span class=\"line\"></span><br><span class=\"line\">        SelectDeParser selectDeparser = <span class=\"keyword\">new</span> SelectDeParser(expr, buffer);</span><br><span class=\"line\">        expr.setSelectVisitor(selectDeparser);</span><br><span class=\"line\">        expr.setBuffer(buffer);</span><br><span class=\"line\">        StatementDeParser stmtDeparser = <span class=\"keyword\">new</span> StatementDeParser(expr, selectDeparser, buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">        Statement stmt = CCJSqlParserUtil.parse(sql);</span><br><span class=\"line\"></span><br><span class=\"line\">        stmt.accept(stmtDeparser);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stmtDeparser.getBuffer().toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> JSQLParserException </span>&#123;</span><br><span class=\"line\">        System.out.println(cleanStatement(<span class=\"string\">\"SELECT 'abc', 5 FROM mytable WHERE col='test'\"</span>));</span><br><span class=\"line\">        System.out.println(cleanStatement(<span class=\"string\">\"UPDATE table1 A SET A.columna = 'XXX' WHERE A.cod_table = 'YYY'\"</span>));</span><br><span class=\"line\">        System.out.println(cleanStatement(<span class=\"string\">\"INSERT INTO example (num, name, address, tel) VALUES (1, 'name', 'test ', '1234-1234')\"</span>));</span><br><span class=\"line\">        System.out.println(cleanStatement(<span class=\"string\">\"DELETE FROM table1 where col=5 and col2=4\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">SELECT ?, ? FROM mytable WHERE col = ?</span></span><br><span class=\"line\"><span class=\"comment\">UPDATE table1 A SET A.columna = ? WHERE A.cod_table = ?</span></span><br><span class=\"line\"><span class=\"comment\">INSERT INTO example (num, name, address, tel) VALUES (?, ?, ?, ?)</span></span><br><span class=\"line\"><span class=\"comment\">DELETE FROM table1 WHERE col = ? AND col2 = ?</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://github.com/JSQLParser/JSqlParser/wiki\" target=\"_blank\" rel=\"noopener\">https://github.com/JSQLParser/JSqlParser/wiki</a></p>\n</blockquote>\n"},{"title":"VirtualBox磁盘扩容","date":"2018-12-05T13:36:46.000Z","_content":"\n## 扩展磁盘文件\n\n### VDI\n\n```\nVBoxManage modifyhd centos.vdi --resize 16000  # 单位M\n```\n\n### VMDK\n\n```\nVBoxManage clonehd \"centos.vmdk\" \"centos.vdi\" --format vdi     # vmdk是转换前的文件，vdi是转换之后的文件\nVBoxManage modifyhd \"centos.vdi\" --resize 16000                # 这里的单位是M\nVBoxManage clonehd \"centos.vdi\" \"resized.vmdk\" --format vmdk   #可以再转回来\n```\n\n## 使用克隆\n\n本人在使用的时候，前面两种方式不能实现，采用第三种方式\n\n```\nVBoxManage createhd -filename centos7-main-64g -size 65536 -format VDI -variant Standard  # 创建一个新的磁盘，磁盘大小为想要的大小\nVBoxManage clonemedium ../centos7-main\\ Clone/centos7-main\\ Clone.vdi centos7-main-64g.vdi --existing  # 将原有的磁盘复制到新磁盘上\n```\n\n## 磁盘扩容\n\n这里可以使用gparted进行磁盘的扩容\n\n1. 下载gparted-live镜像\n2. 设置iso镜像开机启动\n3. 进行分区的修改\n\n## LVM扩容\n\n如果你没有使用逻辑卷就可以跳过这节。如果使用逻辑卷也可以通过添加新磁盘的形式对文件系统进行扩容，这种方式更加简单方便。\n\n### 创建PE、VG\n\n### 扩展LV\n\n```\nsudo vgextend VolGroup /dev/sda4       # 通过新卷的方式扩展到卷组\nlvresize -l +122 /dev/centos/root      # 直接扩容\n```\n\n### 刷新逻辑分区容量\n\n```\nxfs_growfs /devices/centos/root    # resize2fs是不能成功的\n```","source":"_posts/VirtualBox磁盘扩容.md","raw":"---\ntitle: VirtualBox磁盘扩容\ndate: 2018-12-05 21:36:46\ntags: \n- web\n---\n\n## 扩展磁盘文件\n\n### VDI\n\n```\nVBoxManage modifyhd centos.vdi --resize 16000  # 单位M\n```\n\n### VMDK\n\n```\nVBoxManage clonehd \"centos.vmdk\" \"centos.vdi\" --format vdi     # vmdk是转换前的文件，vdi是转换之后的文件\nVBoxManage modifyhd \"centos.vdi\" --resize 16000                # 这里的单位是M\nVBoxManage clonehd \"centos.vdi\" \"resized.vmdk\" --format vmdk   #可以再转回来\n```\n\n## 使用克隆\n\n本人在使用的时候，前面两种方式不能实现，采用第三种方式\n\n```\nVBoxManage createhd -filename centos7-main-64g -size 65536 -format VDI -variant Standard  # 创建一个新的磁盘，磁盘大小为想要的大小\nVBoxManage clonemedium ../centos7-main\\ Clone/centos7-main\\ Clone.vdi centos7-main-64g.vdi --existing  # 将原有的磁盘复制到新磁盘上\n```\n\n## 磁盘扩容\n\n这里可以使用gparted进行磁盘的扩容\n\n1. 下载gparted-live镜像\n2. 设置iso镜像开机启动\n3. 进行分区的修改\n\n## LVM扩容\n\n如果你没有使用逻辑卷就可以跳过这节。如果使用逻辑卷也可以通过添加新磁盘的形式对文件系统进行扩容，这种方式更加简单方便。\n\n### 创建PE、VG\n\n### 扩展LV\n\n```\nsudo vgextend VolGroup /dev/sda4       # 通过新卷的方式扩展到卷组\nlvresize -l +122 /dev/centos/root      # 直接扩容\n```\n\n### 刷新逻辑分区容量\n\n```\nxfs_growfs /devices/centos/root    # resize2fs是不能成功的\n```","slug":"VirtualBox磁盘扩容","published":1,"updated":"2019-10-14T09:01:08.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a41y0002ic1yc1f9p8af","content":"<h2 id=\"扩展磁盘文件\"><a href=\"#扩展磁盘文件\" class=\"headerlink\" title=\"扩展磁盘文件\"></a>扩展磁盘文件</h2><h3 id=\"VDI\"><a href=\"#VDI\" class=\"headerlink\" title=\"VDI\"></a>VDI</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VBoxManage modifyhd centos.vdi --resize 16000  # 单位M</span><br></pre></td></tr></table></figure>\n<h3 id=\"VMDK\"><a href=\"#VMDK\" class=\"headerlink\" title=\"VMDK\"></a>VMDK</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VBoxManage clonehd &quot;centos.vmdk&quot; &quot;centos.vdi&quot; --format vdi     # vmdk是转换前的文件，vdi是转换之后的文件</span><br><span class=\"line\">VBoxManage modifyhd &quot;centos.vdi&quot; --resize 16000                # 这里的单位是M</span><br><span class=\"line\">VBoxManage clonehd &quot;centos.vdi&quot; &quot;resized.vmdk&quot; --format vmdk   #可以再转回来</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用克隆\"><a href=\"#使用克隆\" class=\"headerlink\" title=\"使用克隆\"></a>使用克隆</h2><p>本人在使用的时候，前面两种方式不能实现，采用第三种方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VBoxManage createhd -filename centos7-main-64g -size 65536 -format VDI -variant Standard  # 创建一个新的磁盘，磁盘大小为想要的大小</span><br><span class=\"line\">VBoxManage clonemedium ../centos7-main\\ Clone/centos7-main\\ Clone.vdi centos7-main-64g.vdi --existing  # 将原有的磁盘复制到新磁盘上</span><br></pre></td></tr></table></figure>\n<h2 id=\"磁盘扩容\"><a href=\"#磁盘扩容\" class=\"headerlink\" title=\"磁盘扩容\"></a>磁盘扩容</h2><p>这里可以使用gparted进行磁盘的扩容</p>\n<ol>\n<li>下载gparted-live镜像</li>\n<li>设置iso镜像开机启动</li>\n<li>进行分区的修改</li>\n</ol>\n<h2 id=\"LVM扩容\"><a href=\"#LVM扩容\" class=\"headerlink\" title=\"LVM扩容\"></a>LVM扩容</h2><p>如果你没有使用逻辑卷就可以跳过这节。如果使用逻辑卷也可以通过添加新磁盘的形式对文件系统进行扩容，这种方式更加简单方便。</p>\n<h3 id=\"创建PE、VG\"><a href=\"#创建PE、VG\" class=\"headerlink\" title=\"创建PE、VG\"></a>创建PE、VG</h3><h3 id=\"扩展LV\"><a href=\"#扩展LV\" class=\"headerlink\" title=\"扩展LV\"></a>扩展LV</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vgextend VolGroup /dev/sda4       # 通过新卷的方式扩展到卷组</span><br><span class=\"line\">lvresize -l +122 /dev/centos/root      # 直接扩容</span><br></pre></td></tr></table></figure>\n<h3 id=\"刷新逻辑分区容量\"><a href=\"#刷新逻辑分区容量\" class=\"headerlink\" title=\"刷新逻辑分区容量\"></a>刷新逻辑分区容量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xfs_growfs /devices/centos/root    # resize2fs是不能成功的</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"扩展磁盘文件\"><a href=\"#扩展磁盘文件\" class=\"headerlink\" title=\"扩展磁盘文件\"></a>扩展磁盘文件</h2><h3 id=\"VDI\"><a href=\"#VDI\" class=\"headerlink\" title=\"VDI\"></a>VDI</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VBoxManage modifyhd centos.vdi --resize 16000  # 单位M</span><br></pre></td></tr></table></figure>\n<h3 id=\"VMDK\"><a href=\"#VMDK\" class=\"headerlink\" title=\"VMDK\"></a>VMDK</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VBoxManage clonehd &quot;centos.vmdk&quot; &quot;centos.vdi&quot; --format vdi     # vmdk是转换前的文件，vdi是转换之后的文件</span><br><span class=\"line\">VBoxManage modifyhd &quot;centos.vdi&quot; --resize 16000                # 这里的单位是M</span><br><span class=\"line\">VBoxManage clonehd &quot;centos.vdi&quot; &quot;resized.vmdk&quot; --format vmdk   #可以再转回来</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用克隆\"><a href=\"#使用克隆\" class=\"headerlink\" title=\"使用克隆\"></a>使用克隆</h2><p>本人在使用的时候，前面两种方式不能实现，采用第三种方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VBoxManage createhd -filename centos7-main-64g -size 65536 -format VDI -variant Standard  # 创建一个新的磁盘，磁盘大小为想要的大小</span><br><span class=\"line\">VBoxManage clonemedium ../centos7-main\\ Clone/centos7-main\\ Clone.vdi centos7-main-64g.vdi --existing  # 将原有的磁盘复制到新磁盘上</span><br></pre></td></tr></table></figure>\n<h2 id=\"磁盘扩容\"><a href=\"#磁盘扩容\" class=\"headerlink\" title=\"磁盘扩容\"></a>磁盘扩容</h2><p>这里可以使用gparted进行磁盘的扩容</p>\n<ol>\n<li>下载gparted-live镜像</li>\n<li>设置iso镜像开机启动</li>\n<li>进行分区的修改</li>\n</ol>\n<h2 id=\"LVM扩容\"><a href=\"#LVM扩容\" class=\"headerlink\" title=\"LVM扩容\"></a>LVM扩容</h2><p>如果你没有使用逻辑卷就可以跳过这节。如果使用逻辑卷也可以通过添加新磁盘的形式对文件系统进行扩容，这种方式更加简单方便。</p>\n<h3 id=\"创建PE、VG\"><a href=\"#创建PE、VG\" class=\"headerlink\" title=\"创建PE、VG\"></a>创建PE、VG</h3><h3 id=\"扩展LV\"><a href=\"#扩展LV\" class=\"headerlink\" title=\"扩展LV\"></a>扩展LV</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vgextend VolGroup /dev/sda4       # 通过新卷的方式扩展到卷组</span><br><span class=\"line\">lvresize -l +122 /dev/centos/root      # 直接扩容</span><br></pre></td></tr></table></figure>\n<h3 id=\"刷新逻辑分区容量\"><a href=\"#刷新逻辑分区容量\" class=\"headerlink\" title=\"刷新逻辑分区容量\"></a>刷新逻辑分区容量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xfs_growfs /devices/centos/root    # resize2fs是不能成功的</span><br></pre></td></tr></table></figure>"},{"title":"Vue插件开发","date":"2018-12-17T12:52:34.000Z","_content":"\n# 基本结构\n\n插件的功能包括全局方法和属性、指令、mixin、实例方法。插件都有一个`install`方法，第一个参数是`Vue`，第二个参数是`options`。\n\n```js\nMyPlugin.install = function (Vue, options) {\n  Vue.myGlobalMethod = function () {  // 1. 添加全局方法或属性，如: vue-custom-element\n    // 逻辑...\n  }\n  Vue.directive('my-directive', {  // 2. 添加全局资源：指令/过滤器/过渡等，如 vue-touch\n    bind (el, binding, vnode, oldVnode) {\n      // 逻辑...\n    }\n    ...\n  })\n  Vue.mixin({\n    created: function () {  // 3. 通过全局 mixin方法添加一些组件选项，如: vuex\n      // 逻辑...\n    }\n    ...\n  })\n  Vue.prototype.$myMethod = function (options) {  // 4. 添加实例方法，通过把它们添加到 Vue.prototype 上实现\n    // 逻辑...\n  }\n}\n```\n\n# `vue-toast`\n\n","source":"_posts/Vue插件开发.md","raw":"---\ntitle: Vue插件开发\ndate: 2018-12-17 20:52:34\ntags:\n- js\n- vue\n---\n\n# 基本结构\n\n插件的功能包括全局方法和属性、指令、mixin、实例方法。插件都有一个`install`方法，第一个参数是`Vue`，第二个参数是`options`。\n\n```js\nMyPlugin.install = function (Vue, options) {\n  Vue.myGlobalMethod = function () {  // 1. 添加全局方法或属性，如: vue-custom-element\n    // 逻辑...\n  }\n  Vue.directive('my-directive', {  // 2. 添加全局资源：指令/过滤器/过渡等，如 vue-touch\n    bind (el, binding, vnode, oldVnode) {\n      // 逻辑...\n    }\n    ...\n  })\n  Vue.mixin({\n    created: function () {  // 3. 通过全局 mixin方法添加一些组件选项，如: vuex\n      // 逻辑...\n    }\n    ...\n  })\n  Vue.prototype.$myMethod = function (options) {  // 4. 添加实例方法，通过把它们添加到 Vue.prototype 上实现\n    // 逻辑...\n  }\n}\n```\n\n# `vue-toast`\n\n","slug":"Vue插件开发","published":1,"updated":"2019-10-14T09:01:08.378Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a4210005ic1y15ss8tqq","content":"<h1 id=\"基本结构\"><a href=\"#基本结构\" class=\"headerlink\" title=\"基本结构\"></a>基本结构</h1><p>插件的功能包括全局方法和属性、指令、mixin、实例方法。插件都有一个<code>install</code>方法，第一个参数是<code>Vue</code>，第二个参数是<code>options</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyPlugin.install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue, options</span>) </span>&#123;</span><br><span class=\"line\">  Vue.myGlobalMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// 1. 添加全局方法或属性，如: vue-custom-element</span></span><br><span class=\"line\">    <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Vue.directive(<span class=\"string\">'my-directive'</span>, &#123;  <span class=\"comment\">// 2. 添加全局资源：指令/过滤器/过渡等，如 vue-touch</span></span><br><span class=\"line\">    bind (el, binding, vnode, oldVnode) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  Vue.mixin(&#123;</span><br><span class=\"line\">    created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// 3. 通过全局 mixin方法添加一些组件选项，如: vuex</span></span><br><span class=\"line\">      <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  Vue.prototype.$myMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;  <span class=\"comment\">// 4. 添加实例方法，通过把它们添加到 Vue.prototype 上实现</span></span><br><span class=\"line\">    <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"vue-toast\"><a href=\"#vue-toast\" class=\"headerlink\" title=\"vue-toast\"></a><code>vue-toast</code></h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基本结构\"><a href=\"#基本结构\" class=\"headerlink\" title=\"基本结构\"></a>基本结构</h1><p>插件的功能包括全局方法和属性、指令、mixin、实例方法。插件都有一个<code>install</code>方法，第一个参数是<code>Vue</code>，第二个参数是<code>options</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyPlugin.install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue, options</span>) </span>&#123;</span><br><span class=\"line\">  Vue.myGlobalMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// 1. 添加全局方法或属性，如: vue-custom-element</span></span><br><span class=\"line\">    <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Vue.directive(<span class=\"string\">'my-directive'</span>, &#123;  <span class=\"comment\">// 2. 添加全局资源：指令/过滤器/过渡等，如 vue-touch</span></span><br><span class=\"line\">    bind (el, binding, vnode, oldVnode) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  Vue.mixin(&#123;</span><br><span class=\"line\">    created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// 3. 通过全局 mixin方法添加一些组件选项，如: vuex</span></span><br><span class=\"line\">      <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  Vue.prototype.$myMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;  <span class=\"comment\">// 4. 添加实例方法，通过把它们添加到 Vue.prototype 上实现</span></span><br><span class=\"line\">    <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"vue-toast\"><a href=\"#vue-toast\" class=\"headerlink\" title=\"vue-toast\"></a><code>vue-toast</code></h1>"},{"title":"Tiemline设计方案","date":"2019-01-04T12:33:08.000Z","_content":"\n\n\n\n\n# 参考\n\n> [朋友圈式的TIMELINE设计方案](https://www.myway5.com/index.php/2017/06/29/timeline-design/)\n>\n> [朋友圈的设计及实现](https://blog.csdn.net/u011035407/article/details/78592787)\n>\n> [几个大型网站的Feeds(Timeline)设计简单对比](https://cloud.tencent.com/developer/article/1350690)\n\n","source":"_posts/Tiemline设计方案.md","raw":"---\ntitle: Tiemline设计方案\ndate: 2019-01-04 20:33:08\ntags:\n- java\n---\n\n\n\n\n\n# 参考\n\n> [朋友圈式的TIMELINE设计方案](https://www.myway5.com/index.php/2017/06/29/timeline-design/)\n>\n> [朋友圈的设计及实现](https://blog.csdn.net/u011035407/article/details/78592787)\n>\n> [几个大型网站的Feeds(Timeline)设计简单对比](https://cloud.tencent.com/developer/article/1350690)\n\n","slug":"Tiemline设计方案","published":1,"updated":"2019-10-14T09:01:08.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a4220006ic1ytap5mbqn","content":"<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://www.myway5.com/index.php/2017/06/29/timeline-design/\" target=\"_blank\" rel=\"noopener\">朋友圈式的TIMELINE设计方案</a></p>\n<p><a href=\"https://blog.csdn.net/u011035407/article/details/78592787\" target=\"_blank\" rel=\"noopener\">朋友圈的设计及实现</a></p>\n<p><a href=\"https://cloud.tencent.com/developer/article/1350690\" target=\"_blank\" rel=\"noopener\">几个大型网站的Feeds(Timeline)设计简单对比</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://www.myway5.com/index.php/2017/06/29/timeline-design/\" target=\"_blank\" rel=\"noopener\">朋友圈式的TIMELINE设计方案</a></p>\n<p><a href=\"https://blog.csdn.net/u011035407/article/details/78592787\" target=\"_blank\" rel=\"noopener\">朋友圈的设计及实现</a></p>\n<p><a href=\"https://cloud.tencent.com/developer/article/1350690\" target=\"_blank\" rel=\"noopener\">几个大型网站的Feeds(Timeline)设计简单对比</a></p>\n</blockquote>\n"},{"title":"centos7修改网卡","date":"2018-12-05T13:40:23.000Z","_content":"\n# 修改mac\n\n使用virtualbox导入一个虚拟机时mac地址是一样的，此时需要修改。 修改mac地址直接在virtualBox的`setting>network`配置中进行修改。\n\n# 修改网卡名称 \n\n## 修改网卡的配置文件\n\n```\nvim /etc/sysconfig/network-scripts/ifcfg-eno16777736 //修改NAME，DEVICE 成希望的（不要加ifcfg）\n\nmv ifcfg-eno16777736 ifcfg-eth0 //修改配置文件的名字\n```\n\n## 禁用可预测命名规则\n\n```\nvim /etc/default/grub\n```\n\n添加内核参数： net.ifnames=0 biosdevname=0\n\n```\n[root@ansheng network-scripts]# vi /etc/default/grub\nGRUB_TIMEOUT=5\nGRUB_DISTRIBUTOR=\"$(sed 's, release .*$,,g' /etc/system-release)\"\nGRUB_DEFAULT=saved\nGRUB_DISABLE_SUBMENU=true\nGRUB_TERMINAL_OUTPUT=\"console\"\nGRUB_CMDLINE_LINUX=\"rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet net.ifnames=0 biosdevname=0\"\nGRUB_DISABLE_RECOVERY=\"true\"\n```\n\n## 用 grub2-mkconfig 命令重新生成GRUB配置并更新内核\n\n```\n[root@ansheng network-scripts]# grub2-mkconfig -o /boot/grub2/grub.cfg\nGenerating grub configuration file ...\nFound linux image: /boot/vmlinuz-3.10.0-327.el7.x86_64\nFound initrd image: /boot/initramfs-3.10.0-327.el7.x86_64.img\nFound linux image: /boot/vmlinuz-0-rescue-4dd6b54f74c94bff9e92c61d669fc195\nFound initrd image: /boot/initramfs-0-rescue-4dd6b54f74c94bff9e92c61d669fc195.img\ndone\n```\n\n重启系统","source":"_posts/centos7修改网卡.md","raw":"---\ntitle: centos7修改网卡\ndate: 2018-12-05 21:40:23\ntags:\n- linux\n---\n\n# 修改mac\n\n使用virtualbox导入一个虚拟机时mac地址是一样的，此时需要修改。 修改mac地址直接在virtualBox的`setting>network`配置中进行修改。\n\n# 修改网卡名称 \n\n## 修改网卡的配置文件\n\n```\nvim /etc/sysconfig/network-scripts/ifcfg-eno16777736 //修改NAME，DEVICE 成希望的（不要加ifcfg）\n\nmv ifcfg-eno16777736 ifcfg-eth0 //修改配置文件的名字\n```\n\n## 禁用可预测命名规则\n\n```\nvim /etc/default/grub\n```\n\n添加内核参数： net.ifnames=0 biosdevname=0\n\n```\n[root@ansheng network-scripts]# vi /etc/default/grub\nGRUB_TIMEOUT=5\nGRUB_DISTRIBUTOR=\"$(sed 's, release .*$,,g' /etc/system-release)\"\nGRUB_DEFAULT=saved\nGRUB_DISABLE_SUBMENU=true\nGRUB_TERMINAL_OUTPUT=\"console\"\nGRUB_CMDLINE_LINUX=\"rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet net.ifnames=0 biosdevname=0\"\nGRUB_DISABLE_RECOVERY=\"true\"\n```\n\n## 用 grub2-mkconfig 命令重新生成GRUB配置并更新内核\n\n```\n[root@ansheng network-scripts]# grub2-mkconfig -o /boot/grub2/grub.cfg\nGenerating grub configuration file ...\nFound linux image: /boot/vmlinuz-3.10.0-327.el7.x86_64\nFound initrd image: /boot/initramfs-3.10.0-327.el7.x86_64.img\nFound linux image: /boot/vmlinuz-0-rescue-4dd6b54f74c94bff9e92c61d669fc195\nFound initrd image: /boot/initramfs-0-rescue-4dd6b54f74c94bff9e92c61d669fc195.img\ndone\n```\n\n重启系统","slug":"centos7修改网卡","published":1,"updated":"2019-10-14T09:01:07.164Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a4230007ic1ygnpiyl0y","content":"<h1 id=\"修改mac\"><a href=\"#修改mac\" class=\"headerlink\" title=\"修改mac\"></a>修改mac</h1><p>使用virtualbox导入一个虚拟机时mac地址是一样的，此时需要修改。 修改mac地址直接在virtualBox的<code>setting&gt;network</code>配置中进行修改。</p>\n<h1 id=\"修改网卡名称\"><a href=\"#修改网卡名称\" class=\"headerlink\" title=\"修改网卡名称\"></a>修改网卡名称</h1><h2 id=\"修改网卡的配置文件\"><a href=\"#修改网卡的配置文件\" class=\"headerlink\" title=\"修改网卡的配置文件\"></a>修改网卡的配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysconfig/network-scripts/ifcfg-eno16777736 //修改NAME，DEVICE 成希望的（不要加ifcfg）</span><br><span class=\"line\"></span><br><span class=\"line\">mv ifcfg-eno16777736 ifcfg-eth0 //修改配置文件的名字</span><br></pre></td></tr></table></figure>\n<h2 id=\"禁用可预测命名规则\"><a href=\"#禁用可预测命名规则\" class=\"headerlink\" title=\"禁用可预测命名规则\"></a>禁用可预测命名规则</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/default/grub</span><br></pre></td></tr></table></figure>\n<p>添加内核参数： net.ifnames=0 biosdevname=0</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ansheng network-scripts]# vi /etc/default/grub</span><br><span class=\"line\">GRUB_TIMEOUT=5</span><br><span class=\"line\">GRUB_DISTRIBUTOR=&quot;$(sed &apos;s, release .*$,,g&apos; /etc/system-release)&quot;</span><br><span class=\"line\">GRUB_DEFAULT=saved</span><br><span class=\"line\">GRUB_DISABLE_SUBMENU=true</span><br><span class=\"line\">GRUB_TERMINAL_OUTPUT=&quot;console&quot;</span><br><span class=\"line\">GRUB_CMDLINE_LINUX=&quot;rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet net.ifnames=0 biosdevname=0&quot;</span><br><span class=\"line\">GRUB_DISABLE_RECOVERY=&quot;true&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"用-grub2-mkconfig-命令重新生成GRUB配置并更新内核\"><a href=\"#用-grub2-mkconfig-命令重新生成GRUB配置并更新内核\" class=\"headerlink\" title=\"用 grub2-mkconfig 命令重新生成GRUB配置并更新内核\"></a>用 grub2-mkconfig 命令重新生成GRUB配置并更新内核</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ansheng network-scripts]# grub2-mkconfig -o /boot/grub2/grub.cfg</span><br><span class=\"line\">Generating grub configuration file ...</span><br><span class=\"line\">Found linux image: /boot/vmlinuz-3.10.0-327.el7.x86_64</span><br><span class=\"line\">Found initrd image: /boot/initramfs-3.10.0-327.el7.x86_64.img</span><br><span class=\"line\">Found linux image: /boot/vmlinuz-0-rescue-4dd6b54f74c94bff9e92c61d669fc195</span><br><span class=\"line\">Found initrd image: /boot/initramfs-0-rescue-4dd6b54f74c94bff9e92c61d669fc195.img</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>重启系统</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"修改mac\"><a href=\"#修改mac\" class=\"headerlink\" title=\"修改mac\"></a>修改mac</h1><p>使用virtualbox导入一个虚拟机时mac地址是一样的，此时需要修改。 修改mac地址直接在virtualBox的<code>setting&gt;network</code>配置中进行修改。</p>\n<h1 id=\"修改网卡名称\"><a href=\"#修改网卡名称\" class=\"headerlink\" title=\"修改网卡名称\"></a>修改网卡名称</h1><h2 id=\"修改网卡的配置文件\"><a href=\"#修改网卡的配置文件\" class=\"headerlink\" title=\"修改网卡的配置文件\"></a>修改网卡的配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysconfig/network-scripts/ifcfg-eno16777736 //修改NAME，DEVICE 成希望的（不要加ifcfg）</span><br><span class=\"line\"></span><br><span class=\"line\">mv ifcfg-eno16777736 ifcfg-eth0 //修改配置文件的名字</span><br></pre></td></tr></table></figure>\n<h2 id=\"禁用可预测命名规则\"><a href=\"#禁用可预测命名规则\" class=\"headerlink\" title=\"禁用可预测命名规则\"></a>禁用可预测命名规则</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/default/grub</span><br></pre></td></tr></table></figure>\n<p>添加内核参数： net.ifnames=0 biosdevname=0</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ansheng network-scripts]# vi /etc/default/grub</span><br><span class=\"line\">GRUB_TIMEOUT=5</span><br><span class=\"line\">GRUB_DISTRIBUTOR=&quot;$(sed &apos;s, release .*$,,g&apos; /etc/system-release)&quot;</span><br><span class=\"line\">GRUB_DEFAULT=saved</span><br><span class=\"line\">GRUB_DISABLE_SUBMENU=true</span><br><span class=\"line\">GRUB_TERMINAL_OUTPUT=&quot;console&quot;</span><br><span class=\"line\">GRUB_CMDLINE_LINUX=&quot;rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet net.ifnames=0 biosdevname=0&quot;</span><br><span class=\"line\">GRUB_DISABLE_RECOVERY=&quot;true&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"用-grub2-mkconfig-命令重新生成GRUB配置并更新内核\"><a href=\"#用-grub2-mkconfig-命令重新生成GRUB配置并更新内核\" class=\"headerlink\" title=\"用 grub2-mkconfig 命令重新生成GRUB配置并更新内核\"></a>用 grub2-mkconfig 命令重新生成GRUB配置并更新内核</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ansheng network-scripts]# grub2-mkconfig -o /boot/grub2/grub.cfg</span><br><span class=\"line\">Generating grub configuration file ...</span><br><span class=\"line\">Found linux image: /boot/vmlinuz-3.10.0-327.el7.x86_64</span><br><span class=\"line\">Found initrd image: /boot/initramfs-3.10.0-327.el7.x86_64.img</span><br><span class=\"line\">Found linux image: /boot/vmlinuz-0-rescue-4dd6b54f74c94bff9e92c61d669fc195</span><br><span class=\"line\">Found initrd image: /boot/initramfs-0-rescue-4dd6b54f74c94bff9e92c61d669fc195.img</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>重启系统</p>\n"},{"title":"css动画","date":"2018-12-04T13:36:49.000Z","_content":"\n# transition\n\n1. transition-duration\n2. transition-property\n3. transition-delay\n4. transition-timing-function\n\n# animation\n\n1. @keyframes\n\n2. animation\n\n   1. animation-name\n   2. animation-duration\n   3. animation-timing-function\n   4. animation-delay\n   5. animation-iteration-count\n   6. animation-fill-mode\n   7. animation-direction\n   8. animation-play-state(这个要写在最下面，不然不会生效)\n\n\n# transform\n\n1. none\n2. translate(x,y)/translate3d(x,y,z)\n3. translateX(x)/translateY(y)/translateZ(z)\n4. materix/materix3d\n5. scale/scale3d\n6. scaleX/scaleY/scaleZ\n7. rotate/rotate3d\n8. rotateX/rotateY/rotateZ\n9. skew/skewX/skewY\n10. perspective","source":"_posts/css动画.md","raw":"---\ntitle: css动画\ndate: 2018-12-04 21:36:49\ntags:\n- css\n---\n\n# transition\n\n1. transition-duration\n2. transition-property\n3. transition-delay\n4. transition-timing-function\n\n# animation\n\n1. @keyframes\n\n2. animation\n\n   1. animation-name\n   2. animation-duration\n   3. animation-timing-function\n   4. animation-delay\n   5. animation-iteration-count\n   6. animation-fill-mode\n   7. animation-direction\n   8. animation-play-state(这个要写在最下面，不然不会生效)\n\n\n# transform\n\n1. none\n2. translate(x,y)/translate3d(x,y,z)\n3. translateX(x)/translateY(y)/translateZ(z)\n4. materix/materix3d\n5. scale/scale3d\n6. scaleX/scaleY/scaleZ\n7. rotate/rotate3d\n8. rotateX/rotateY/rotateZ\n9. skew/skewX/skewY\n10. perspective","slug":"css动画","published":1,"updated":"2019-10-14T09:01:07.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a424000aic1yzc4lcqm3","content":"<h1 id=\"transition\"><a href=\"#transition\" class=\"headerlink\" title=\"transition\"></a>transition</h1><ol>\n<li>transition-duration</li>\n<li>transition-property</li>\n<li>transition-delay</li>\n<li>transition-timing-function</li>\n</ol>\n<h1 id=\"animation\"><a href=\"#animation\" class=\"headerlink\" title=\"animation\"></a>animation</h1><ol>\n<li><p>@keyframes</p>\n</li>\n<li><p>animation</p>\n<ol>\n<li>animation-name</li>\n<li>animation-duration</li>\n<li>animation-timing-function</li>\n<li>animation-delay</li>\n<li>animation-iteration-count</li>\n<li>animation-fill-mode</li>\n<li>animation-direction</li>\n<li>animation-play-state(这个要写在最下面，不然不会生效)</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"transform\"><a href=\"#transform\" class=\"headerlink\" title=\"transform\"></a>transform</h1><ol>\n<li>none</li>\n<li>translate(x,y)/translate3d(x,y,z)</li>\n<li>translateX(x)/translateY(y)/translateZ(z)</li>\n<li>materix/materix3d</li>\n<li>scale/scale3d</li>\n<li>scaleX/scaleY/scaleZ</li>\n<li>rotate/rotate3d</li>\n<li>rotateX/rotateY/rotateZ</li>\n<li>skew/skewX/skewY</li>\n<li>perspective</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"transition\"><a href=\"#transition\" class=\"headerlink\" title=\"transition\"></a>transition</h1><ol>\n<li>transition-duration</li>\n<li>transition-property</li>\n<li>transition-delay</li>\n<li>transition-timing-function</li>\n</ol>\n<h1 id=\"animation\"><a href=\"#animation\" class=\"headerlink\" title=\"animation\"></a>animation</h1><ol>\n<li><p>@keyframes</p>\n</li>\n<li><p>animation</p>\n<ol>\n<li>animation-name</li>\n<li>animation-duration</li>\n<li>animation-timing-function</li>\n<li>animation-delay</li>\n<li>animation-iteration-count</li>\n<li>animation-fill-mode</li>\n<li>animation-direction</li>\n<li>animation-play-state(这个要写在最下面，不然不会生效)</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"transform\"><a href=\"#transform\" class=\"headerlink\" title=\"transform\"></a>transform</h1><ol>\n<li>none</li>\n<li>translate(x,y)/translate3d(x,y,z)</li>\n<li>translateX(x)/translateY(y)/translateZ(z)</li>\n<li>materix/materix3d</li>\n<li>scale/scale3d</li>\n<li>scaleX/scaleY/scaleZ</li>\n<li>rotate/rotate3d</li>\n<li>rotateX/rotateY/rotateZ</li>\n<li>skew/skewX/skewY</li>\n<li>perspective</li>\n</ol>\n"},{"title":"cordova打包vue","date":"2019-01-02T09:12:09.000Z","_content":"\n\n\n\n\n> https://segmentfault.com/a/1190000013159076\n\n","source":"_posts/cordova打包vue.md","raw":"---\ntitle: cordova打包vue\ndate: 2019-01-02 17:12:09\ntags:\n- vue\n---\n\n\n\n\n\n> https://segmentfault.com/a/1190000013159076\n\n","slug":"cordova打包vue","published":1,"updated":"2019-10-14T09:01:07.182Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a425000cic1yvp6eid0i","content":"<blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000013159076\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000013159076</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000013159076\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000013159076</a></p>\n</blockquote>\n"},{"title":"go基本语法","date":"2019-04-10T02:29:55.000Z","_content":"\n# 接口\n\n1. duck typing了解\n\n在[程序设计](https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1)中，**鸭子类型**（英语：**duck typing**）是[动态类型](https://zh.wikipedia.org/wiki/%E9%A1%9E%E5%9E%8B%E7%B3%BB%E7%B5%B1)的一种风格。在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由“当前[方法](https://zh.wikipedia.org/wiki/%E6%96%B9%E6%B3%95_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8))和属性的集合”决定。\n\n# flag\n\n# Sync\n\n### 1. `WaitGroup`\n\n```\nAdd()\nDone()\nWait()\n```\n\n### 2. Context\n\n```\n\n```\n\n## `Regexp`\n\n> https://www.cnblogs.com/golove/p/3269099.html\n\n```\n// MatchString\nmatched, err := regexp.MatchString(\"foo.*\", \"seafood\")\nfmt.Println(matched, err)\nmatched, err = regexp.MatchString(\"bar.*\", \"seafood\")\nfmt.Println(matched, err)\n// false error parsing regexp: missing closing ): `a(b`\nmatched, err = regexp.MatchString(\"a(b\", \"seafood\")\nfmt.Println(matched, err)\n// true <nil>\nmatched, err = regexp.MatchString(`a\\(b`, \"a(b\")\nfmt.Println(matched, err)\n// false error parsing regexp: missing closing ): `a(b`\nmatched, err = regexp.MatchString(`a(b`, \"a(b\")\nfmt.Println(matched, err)\n// true <nil>\nmatched, err = regexp.MatchString(\"a\\\\(b\", \"a(b\")\nfmt.Println(matched, err)\n\n\n// 将所有特殊字符进行转义\nfmt.Println(regexp.QuoteMeta(\"Escaping symbols like: .+*?()|[]{}^$\"))\n\n\n// ExpandString\ncontent := `\n\t# comment line\n\toption1: value1\n\toption2: value2\n\n\t# another comment line\n\toption3: value3\n`\n\n// Regex pattern captures \"key: value\" pair from the content.\npattern := regexp.MustCompile(`(?m)(?P<key>\\w+):\\s+(?P<value>\\w+)$`)\n\n// Template to convert \"key: value\" to \"key=value\" by\n// referencing the values captured by the regex pattern.\ntemplate := \"$key=$value\\n\"\n\nresult := []byte{}\n\n\t// For each match of the regex in the content.\nfor _, submatches := range pattern.FindAllStringSubmatchIndex(content, -1) {\n    // Apply the captured submatches to the template and append the output\n    // to the result.\n    result = pattern.ExpandString(result, template, content, submatches)\n}\nfmt.Println(string(result))\n\n\n// findAllString\nre := regexp.MustCompile(\"a.\")\nfmt.Println(re.FindAllString(\"paranormal\", -1))\nfmt.Println(re.FindAllString(\"paranormal\", 2))\nfmt.Println(re.FindAllString(\"graal\", -1))\nfmt.Println(re.FindAllString(\"none\", -1))\n\n\n// FindAllStringSubmatch\nre := regexp.MustCompile(\"a(x*)b\")\nfmt.Printf(\"%q\\n\", re.FindAllStringSubmatch(\"-ab-\", -1))\nfmt.Printf(\"%q\\n\", re.FindAllStringSubmatch(\"-axxb-\", -1))\nfmt.Printf(\"%q\\n\", re.FindAllStringSubmatch(\"-ab-axb-\", -1))\nfmt.Printf(\"%q\\n\", re.FindAllStringSubmatch(\"-axxb-ab-\", -1))\n\n// findStringSubmatch，只查找第一个\nre := regexp.MustCompile(\"a(x*)b(y|z)c\")\nfmt.Printf(\"%q\\n\", re.FindStringSubmatch(\"-axxxbyc-\"))\nfmt.Printf(\"%q\\n\", re.FindStringSubmatch(\"-abzc-\"))\n```","source":"_posts/go基本语法.md","raw":"---\ntitle: go基本语法\ndate: 2019-04-10 10:29:55\ntags:\n- go\n---\n\n# 接口\n\n1. duck typing了解\n\n在[程序设计](https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1)中，**鸭子类型**（英语：**duck typing**）是[动态类型](https://zh.wikipedia.org/wiki/%E9%A1%9E%E5%9E%8B%E7%B3%BB%E7%B5%B1)的一种风格。在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由“当前[方法](https://zh.wikipedia.org/wiki/%E6%96%B9%E6%B3%95_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8))和属性的集合”决定。\n\n# flag\n\n# Sync\n\n### 1. `WaitGroup`\n\n```\nAdd()\nDone()\nWait()\n```\n\n### 2. Context\n\n```\n\n```\n\n## `Regexp`\n\n> https://www.cnblogs.com/golove/p/3269099.html\n\n```\n// MatchString\nmatched, err := regexp.MatchString(\"foo.*\", \"seafood\")\nfmt.Println(matched, err)\nmatched, err = regexp.MatchString(\"bar.*\", \"seafood\")\nfmt.Println(matched, err)\n// false error parsing regexp: missing closing ): `a(b`\nmatched, err = regexp.MatchString(\"a(b\", \"seafood\")\nfmt.Println(matched, err)\n// true <nil>\nmatched, err = regexp.MatchString(`a\\(b`, \"a(b\")\nfmt.Println(matched, err)\n// false error parsing regexp: missing closing ): `a(b`\nmatched, err = regexp.MatchString(`a(b`, \"a(b\")\nfmt.Println(matched, err)\n// true <nil>\nmatched, err = regexp.MatchString(\"a\\\\(b\", \"a(b\")\nfmt.Println(matched, err)\n\n\n// 将所有特殊字符进行转义\nfmt.Println(regexp.QuoteMeta(\"Escaping symbols like: .+*?()|[]{}^$\"))\n\n\n// ExpandString\ncontent := `\n\t# comment line\n\toption1: value1\n\toption2: value2\n\n\t# another comment line\n\toption3: value3\n`\n\n// Regex pattern captures \"key: value\" pair from the content.\npattern := regexp.MustCompile(`(?m)(?P<key>\\w+):\\s+(?P<value>\\w+)$`)\n\n// Template to convert \"key: value\" to \"key=value\" by\n// referencing the values captured by the regex pattern.\ntemplate := \"$key=$value\\n\"\n\nresult := []byte{}\n\n\t// For each match of the regex in the content.\nfor _, submatches := range pattern.FindAllStringSubmatchIndex(content, -1) {\n    // Apply the captured submatches to the template and append the output\n    // to the result.\n    result = pattern.ExpandString(result, template, content, submatches)\n}\nfmt.Println(string(result))\n\n\n// findAllString\nre := regexp.MustCompile(\"a.\")\nfmt.Println(re.FindAllString(\"paranormal\", -1))\nfmt.Println(re.FindAllString(\"paranormal\", 2))\nfmt.Println(re.FindAllString(\"graal\", -1))\nfmt.Println(re.FindAllString(\"none\", -1))\n\n\n// FindAllStringSubmatch\nre := regexp.MustCompile(\"a(x*)b\")\nfmt.Printf(\"%q\\n\", re.FindAllStringSubmatch(\"-ab-\", -1))\nfmt.Printf(\"%q\\n\", re.FindAllStringSubmatch(\"-axxb-\", -1))\nfmt.Printf(\"%q\\n\", re.FindAllStringSubmatch(\"-ab-axb-\", -1))\nfmt.Printf(\"%q\\n\", re.FindAllStringSubmatch(\"-axxb-ab-\", -1))\n\n// findStringSubmatch，只查找第一个\nre := regexp.MustCompile(\"a(x*)b(y|z)c\")\nfmt.Printf(\"%q\\n\", re.FindStringSubmatch(\"-axxxbyc-\"))\nfmt.Printf(\"%q\\n\", re.FindStringSubmatch(\"-abzc-\"))\n```","slug":"go基本语法","published":1,"updated":"2019-10-14T09:01:07.429Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a426000eic1ywucnlqe3","content":"<h1 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h1><ol>\n<li>duck typing了解</li>\n</ol>\n<p>在<a href=\"https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\" target=\"_blank\" rel=\"noopener\">程序设计</a>中，<strong>鸭子类型</strong>（英语：<strong>duck typing</strong>）是<a href=\"https://zh.wikipedia.org/wiki/%E9%A1%9E%E5%9E%8B%E7%B3%BB%E7%B5%B1\" target=\"_blank\" rel=\"noopener\">动态类型</a>的一种风格。在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由“当前<a href=\"https://zh.wikipedia.org/wiki/%E6%96%B9%E6%B3%95_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8\" target=\"_blank\" rel=\"noopener\">方法</a>)和属性的集合”决定。</p>\n<h1 id=\"flag\"><a href=\"#flag\" class=\"headerlink\" title=\"flag\"></a>flag</h1><h1 id=\"Sync\"><a href=\"#Sync\" class=\"headerlink\" title=\"Sync\"></a>Sync</h1><h3 id=\"1-WaitGroup\"><a href=\"#1-WaitGroup\" class=\"headerlink\" title=\"1. WaitGroup\"></a>1. <code>WaitGroup</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Add()</span><br><span class=\"line\">Done()</span><br><span class=\"line\">Wait()</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-Context\"><a href=\"#2-Context\" class=\"headerlink\" title=\"2. Context\"></a>2. Context</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"Regexp\"><a href=\"#Regexp\" class=\"headerlink\" title=\"Regexp\"></a><code>Regexp</code></h2><blockquote>\n<p><a href=\"https://www.cnblogs.com/golove/p/3269099.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/golove/p/3269099.html</a></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// MatchString</span><br><span class=\"line\">matched, err := regexp.MatchString(&quot;foo.*&quot;, &quot;seafood&quot;)</span><br><span class=\"line\">fmt.Println(matched, err)</span><br><span class=\"line\">matched, err = regexp.MatchString(&quot;bar.*&quot;, &quot;seafood&quot;)</span><br><span class=\"line\">fmt.Println(matched, err)</span><br><span class=\"line\">// false error parsing regexp: missing closing ): `a(b`</span><br><span class=\"line\">matched, err = regexp.MatchString(&quot;a(b&quot;, &quot;seafood&quot;)</span><br><span class=\"line\">fmt.Println(matched, err)</span><br><span class=\"line\">// true &lt;nil&gt;</span><br><span class=\"line\">matched, err = regexp.MatchString(`a\\(b`, &quot;a(b&quot;)</span><br><span class=\"line\">fmt.Println(matched, err)</span><br><span class=\"line\">// false error parsing regexp: missing closing ): `a(b`</span><br><span class=\"line\">matched, err = regexp.MatchString(`a(b`, &quot;a(b&quot;)</span><br><span class=\"line\">fmt.Println(matched, err)</span><br><span class=\"line\">// true &lt;nil&gt;</span><br><span class=\"line\">matched, err = regexp.MatchString(&quot;a\\\\(b&quot;, &quot;a(b&quot;)</span><br><span class=\"line\">fmt.Println(matched, err)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 将所有特殊字符进行转义</span><br><span class=\"line\">fmt.Println(regexp.QuoteMeta(&quot;Escaping symbols like: .+*?()|[]&#123;&#125;^$&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// ExpandString</span><br><span class=\"line\">content := `</span><br><span class=\"line\">\t# comment line</span><br><span class=\"line\">\toption1: value1</span><br><span class=\"line\">\toption2: value2</span><br><span class=\"line\"></span><br><span class=\"line\">\t# another comment line</span><br><span class=\"line\">\toption3: value3</span><br><span class=\"line\">`</span><br><span class=\"line\"></span><br><span class=\"line\">// Regex pattern captures &quot;key: value&quot; pair from the content.</span><br><span class=\"line\">pattern := regexp.MustCompile(`(?m)(?P&lt;key&gt;\\w+):\\s+(?P&lt;value&gt;\\w+)$`)</span><br><span class=\"line\"></span><br><span class=\"line\">// Template to convert &quot;key: value&quot; to &quot;key=value&quot; by</span><br><span class=\"line\">// referencing the values captured by the regex pattern.</span><br><span class=\"line\">template := &quot;$key=$value\\n&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">result := []byte&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// For each match of the regex in the content.</span><br><span class=\"line\">for _, submatches := range pattern.FindAllStringSubmatchIndex(content, -1) &#123;</span><br><span class=\"line\">    // Apply the captured submatches to the template and append the output</span><br><span class=\"line\">    // to the result.</span><br><span class=\"line\">    result = pattern.ExpandString(result, template, content, submatches)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(string(result))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// findAllString</span><br><span class=\"line\">re := regexp.MustCompile(&quot;a.&quot;)</span><br><span class=\"line\">fmt.Println(re.FindAllString(&quot;paranormal&quot;, -1))</span><br><span class=\"line\">fmt.Println(re.FindAllString(&quot;paranormal&quot;, 2))</span><br><span class=\"line\">fmt.Println(re.FindAllString(&quot;graal&quot;, -1))</span><br><span class=\"line\">fmt.Println(re.FindAllString(&quot;none&quot;, -1))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// FindAllStringSubmatch</span><br><span class=\"line\">re := regexp.MustCompile(&quot;a(x*)b&quot;)</span><br><span class=\"line\">fmt.Printf(&quot;%q\\n&quot;, re.FindAllStringSubmatch(&quot;-ab-&quot;, -1))</span><br><span class=\"line\">fmt.Printf(&quot;%q\\n&quot;, re.FindAllStringSubmatch(&quot;-axxb-&quot;, -1))</span><br><span class=\"line\">fmt.Printf(&quot;%q\\n&quot;, re.FindAllStringSubmatch(&quot;-ab-axb-&quot;, -1))</span><br><span class=\"line\">fmt.Printf(&quot;%q\\n&quot;, re.FindAllStringSubmatch(&quot;-axxb-ab-&quot;, -1))</span><br><span class=\"line\"></span><br><span class=\"line\">// findStringSubmatch，只查找第一个</span><br><span class=\"line\">re := regexp.MustCompile(&quot;a(x*)b(y|z)c&quot;)</span><br><span class=\"line\">fmt.Printf(&quot;%q\\n&quot;, re.FindStringSubmatch(&quot;-axxxbyc-&quot;))</span><br><span class=\"line\">fmt.Printf(&quot;%q\\n&quot;, re.FindStringSubmatch(&quot;-abzc-&quot;))</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h1><ol>\n<li>duck typing了解</li>\n</ol>\n<p>在<a href=\"https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\" target=\"_blank\" rel=\"noopener\">程序设计</a>中，<strong>鸭子类型</strong>（英语：<strong>duck typing</strong>）是<a href=\"https://zh.wikipedia.org/wiki/%E9%A1%9E%E5%9E%8B%E7%B3%BB%E7%B5%B1\" target=\"_blank\" rel=\"noopener\">动态类型</a>的一种风格。在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由“当前<a href=\"https://zh.wikipedia.org/wiki/%E6%96%B9%E6%B3%95_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8\" target=\"_blank\" rel=\"noopener\">方法</a>)和属性的集合”决定。</p>\n<h1 id=\"flag\"><a href=\"#flag\" class=\"headerlink\" title=\"flag\"></a>flag</h1><h1 id=\"Sync\"><a href=\"#Sync\" class=\"headerlink\" title=\"Sync\"></a>Sync</h1><h3 id=\"1-WaitGroup\"><a href=\"#1-WaitGroup\" class=\"headerlink\" title=\"1. WaitGroup\"></a>1. <code>WaitGroup</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Add()</span><br><span class=\"line\">Done()</span><br><span class=\"line\">Wait()</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-Context\"><a href=\"#2-Context\" class=\"headerlink\" title=\"2. Context\"></a>2. Context</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"Regexp\"><a href=\"#Regexp\" class=\"headerlink\" title=\"Regexp\"></a><code>Regexp</code></h2><blockquote>\n<p><a href=\"https://www.cnblogs.com/golove/p/3269099.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/golove/p/3269099.html</a></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// MatchString</span><br><span class=\"line\">matched, err := regexp.MatchString(&quot;foo.*&quot;, &quot;seafood&quot;)</span><br><span class=\"line\">fmt.Println(matched, err)</span><br><span class=\"line\">matched, err = regexp.MatchString(&quot;bar.*&quot;, &quot;seafood&quot;)</span><br><span class=\"line\">fmt.Println(matched, err)</span><br><span class=\"line\">// false error parsing regexp: missing closing ): `a(b`</span><br><span class=\"line\">matched, err = regexp.MatchString(&quot;a(b&quot;, &quot;seafood&quot;)</span><br><span class=\"line\">fmt.Println(matched, err)</span><br><span class=\"line\">// true &lt;nil&gt;</span><br><span class=\"line\">matched, err = regexp.MatchString(`a\\(b`, &quot;a(b&quot;)</span><br><span class=\"line\">fmt.Println(matched, err)</span><br><span class=\"line\">// false error parsing regexp: missing closing ): `a(b`</span><br><span class=\"line\">matched, err = regexp.MatchString(`a(b`, &quot;a(b&quot;)</span><br><span class=\"line\">fmt.Println(matched, err)</span><br><span class=\"line\">// true &lt;nil&gt;</span><br><span class=\"line\">matched, err = regexp.MatchString(&quot;a\\\\(b&quot;, &quot;a(b&quot;)</span><br><span class=\"line\">fmt.Println(matched, err)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 将所有特殊字符进行转义</span><br><span class=\"line\">fmt.Println(regexp.QuoteMeta(&quot;Escaping symbols like: .+*?()|[]&#123;&#125;^$&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// ExpandString</span><br><span class=\"line\">content := `</span><br><span class=\"line\">\t# comment line</span><br><span class=\"line\">\toption1: value1</span><br><span class=\"line\">\toption2: value2</span><br><span class=\"line\"></span><br><span class=\"line\">\t# another comment line</span><br><span class=\"line\">\toption3: value3</span><br><span class=\"line\">`</span><br><span class=\"line\"></span><br><span class=\"line\">// Regex pattern captures &quot;key: value&quot; pair from the content.</span><br><span class=\"line\">pattern := regexp.MustCompile(`(?m)(?P&lt;key&gt;\\w+):\\s+(?P&lt;value&gt;\\w+)$`)</span><br><span class=\"line\"></span><br><span class=\"line\">// Template to convert &quot;key: value&quot; to &quot;key=value&quot; by</span><br><span class=\"line\">// referencing the values captured by the regex pattern.</span><br><span class=\"line\">template := &quot;$key=$value\\n&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">result := []byte&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// For each match of the regex in the content.</span><br><span class=\"line\">for _, submatches := range pattern.FindAllStringSubmatchIndex(content, -1) &#123;</span><br><span class=\"line\">    // Apply the captured submatches to the template and append the output</span><br><span class=\"line\">    // to the result.</span><br><span class=\"line\">    result = pattern.ExpandString(result, template, content, submatches)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(string(result))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// findAllString</span><br><span class=\"line\">re := regexp.MustCompile(&quot;a.&quot;)</span><br><span class=\"line\">fmt.Println(re.FindAllString(&quot;paranormal&quot;, -1))</span><br><span class=\"line\">fmt.Println(re.FindAllString(&quot;paranormal&quot;, 2))</span><br><span class=\"line\">fmt.Println(re.FindAllString(&quot;graal&quot;, -1))</span><br><span class=\"line\">fmt.Println(re.FindAllString(&quot;none&quot;, -1))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// FindAllStringSubmatch</span><br><span class=\"line\">re := regexp.MustCompile(&quot;a(x*)b&quot;)</span><br><span class=\"line\">fmt.Printf(&quot;%q\\n&quot;, re.FindAllStringSubmatch(&quot;-ab-&quot;, -1))</span><br><span class=\"line\">fmt.Printf(&quot;%q\\n&quot;, re.FindAllStringSubmatch(&quot;-axxb-&quot;, -1))</span><br><span class=\"line\">fmt.Printf(&quot;%q\\n&quot;, re.FindAllStringSubmatch(&quot;-ab-axb-&quot;, -1))</span><br><span class=\"line\">fmt.Printf(&quot;%q\\n&quot;, re.FindAllStringSubmatch(&quot;-axxb-ab-&quot;, -1))</span><br><span class=\"line\"></span><br><span class=\"line\">// findStringSubmatch，只查找第一个</span><br><span class=\"line\">re := regexp.MustCompile(&quot;a(x*)b(y|z)c&quot;)</span><br><span class=\"line\">fmt.Printf(&quot;%q\\n&quot;, re.FindStringSubmatch(&quot;-axxxbyc-&quot;))</span><br><span class=\"line\">fmt.Printf(&quot;%q\\n&quot;, re.FindStringSubmatch(&quot;-abzc-&quot;))</span><br></pre></td></tr></table></figure>"},{"title":"git基本操作","date":"2019-04-09T05:59:25.000Z","_content":"\n# 简介\n\n在实际开发中，会使用git作为版本控制工具来完成团队协作。因此，对基本的git操作指令进行总结是十分有必要的，本文对一些术语或者理论基础，不重新码字，可以[参考廖雪峰老师的博文](https://link.juejin.im?target=https%3A%2F%2Fwww.liaoxuefeng.com%2Fwiki%2F0013739516305929606dd18361248578c67b8067c8c017b000)，本文只对命令做归纳总结。\n\ngit的通用操作流程如下图（来源于网络）\n\n\n\n![git操作通用流程](https://user-gold-cdn.xitu.io/2018/4/25/162fcc0987bf1c0a)\n\n\n\n主要涉及到四个关键点：\n\n1. 工作区：本地电脑存放项目文件的地方，比如learnGitProject文件夹；\n2. 暂存区（Index/Stage）：在使用git管理项目文件的时候，其本地的项目文件会多出一个.git的文件夹，将这个.git文件夹称之为版本库。其中.git文件夹中包含了两个部分，一个是暂存区（Index或者Stage）,顾名思义就是暂时存放文件的地方，通常使用add命令将工作区的文件添加到暂存区里；\n3. 本地仓库：.git文件夹里还包括git自动创建的master分支，并且将HEAD指针指向master分支。使用commit命令可以将暂存区中的文件添加到本地仓库中；\n4. 远程仓库：不是在本地仓库中，项目代码在远程git服务器上，比如项目放在github上，就是一个远程仓库，通常使用clone命令将远程仓库拷贝到本地仓库中，开发后推送到远程仓库中即可；\n\n更细节的来看：\n\n\n\n![](http://wumu.sciento.cn/img/162fcc0e7e711dc7.png)\n\n\n\n日常开发时代码实际上放置在工作区中，也就是本地的XXX.java这些文件，通过add等这些命令将代码文教提交给暂存区（Index/Stage），也就意味着代码全权交给了git进行管理，之后通过commit等命令将暂存区提交给master分支上，也就是意味打了一个版本，也可以说代码提交到了本地仓库中。另外，团队协作过程中自然而然还涉及到与远程仓库的交互。\n\n因此，经过这样的分析，git命令可以分为这样的逻辑进行理解和记忆：\n\n1. git管理配置的命令；\n\n   **几个核心存储区的交互命令：**\n\n2. 工作区与暂存区的交互；\n\n3. 暂存区与本地仓库（分支）上的交互；\n\n4. 本地仓库与远程仓库的交互。\n\n# 安装\n\n[git安装](https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git)\n\nhttps://git-scm.com/\n\n# 配置\n\n```bash\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"email@example.com\"\n\n$ git config --global core.editor emacs\n$ git config --list\n$ git config user.name\n```\n\n# 快速开始\n\n```bash\n$ git init  # 初始化工程\n$ git add * # 将文件添加到暂存区\n$ git commit -m  # 提交\n$ git clone https://github.com/libgit2/libgit2\n```\n\n# 常用命令\n\n## add\n\n1. git add -A   保存所有的修改\n\n2. git add .     保存新的添加和修改，但是不包括删除\n\n3. git add -u   保存修改和删除，但是不包括新建文件。\n\n## commit\n\n1. git commit -m\n2. git commit -ma   // -a是添加全部修改\n3. git commit --amend\n\n## checkout\n\n1. git checkout — //使用暂缓区替换工作区\n2. git checkout  切换分支\n3. git checkout head — //直接使用本地参考的文件覆盖工作区文件\n\n## rm\n\n1. git rm  // 删除工作区，并且提交\n2. git rm —cached  // 只删除暂存区\n3. git rm -f   // 暂存区和工作区都删除\n\n# reset\n\n**谨慎使用！！！！！**\n\n- --soft – 缓存区和工作目录都不会被改变\n- --mixed – 默认选项。缓存区和你指定的提交同步，但工作目录不受影响\n- --hard – 缓存区和工作目录都同步到你指定的提交\n\n## revert\n\n前提是已经提交，缺点：一次回滚过个记录会出现冲突。","source":"_posts/git基本操作.md","raw":"---\ntitle: git基本操作\ndate: 2019-04-09 13:59:25\ntags:\n- git\n---\n\n# 简介\n\n在实际开发中，会使用git作为版本控制工具来完成团队协作。因此，对基本的git操作指令进行总结是十分有必要的，本文对一些术语或者理论基础，不重新码字，可以[参考廖雪峰老师的博文](https://link.juejin.im?target=https%3A%2F%2Fwww.liaoxuefeng.com%2Fwiki%2F0013739516305929606dd18361248578c67b8067c8c017b000)，本文只对命令做归纳总结。\n\ngit的通用操作流程如下图（来源于网络）\n\n\n\n![git操作通用流程](https://user-gold-cdn.xitu.io/2018/4/25/162fcc0987bf1c0a)\n\n\n\n主要涉及到四个关键点：\n\n1. 工作区：本地电脑存放项目文件的地方，比如learnGitProject文件夹；\n2. 暂存区（Index/Stage）：在使用git管理项目文件的时候，其本地的项目文件会多出一个.git的文件夹，将这个.git文件夹称之为版本库。其中.git文件夹中包含了两个部分，一个是暂存区（Index或者Stage）,顾名思义就是暂时存放文件的地方，通常使用add命令将工作区的文件添加到暂存区里；\n3. 本地仓库：.git文件夹里还包括git自动创建的master分支，并且将HEAD指针指向master分支。使用commit命令可以将暂存区中的文件添加到本地仓库中；\n4. 远程仓库：不是在本地仓库中，项目代码在远程git服务器上，比如项目放在github上，就是一个远程仓库，通常使用clone命令将远程仓库拷贝到本地仓库中，开发后推送到远程仓库中即可；\n\n更细节的来看：\n\n\n\n![](http://wumu.sciento.cn/img/162fcc0e7e711dc7.png)\n\n\n\n日常开发时代码实际上放置在工作区中，也就是本地的XXX.java这些文件，通过add等这些命令将代码文教提交给暂存区（Index/Stage），也就意味着代码全权交给了git进行管理，之后通过commit等命令将暂存区提交给master分支上，也就是意味打了一个版本，也可以说代码提交到了本地仓库中。另外，团队协作过程中自然而然还涉及到与远程仓库的交互。\n\n因此，经过这样的分析，git命令可以分为这样的逻辑进行理解和记忆：\n\n1. git管理配置的命令；\n\n   **几个核心存储区的交互命令：**\n\n2. 工作区与暂存区的交互；\n\n3. 暂存区与本地仓库（分支）上的交互；\n\n4. 本地仓库与远程仓库的交互。\n\n# 安装\n\n[git安装](https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git)\n\nhttps://git-scm.com/\n\n# 配置\n\n```bash\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"email@example.com\"\n\n$ git config --global core.editor emacs\n$ git config --list\n$ git config user.name\n```\n\n# 快速开始\n\n```bash\n$ git init  # 初始化工程\n$ git add * # 将文件添加到暂存区\n$ git commit -m  # 提交\n$ git clone https://github.com/libgit2/libgit2\n```\n\n# 常用命令\n\n## add\n\n1. git add -A   保存所有的修改\n\n2. git add .     保存新的添加和修改，但是不包括删除\n\n3. git add -u   保存修改和删除，但是不包括新建文件。\n\n## commit\n\n1. git commit -m\n2. git commit -ma   // -a是添加全部修改\n3. git commit --amend\n\n## checkout\n\n1. git checkout — //使用暂缓区替换工作区\n2. git checkout  切换分支\n3. git checkout head — //直接使用本地参考的文件覆盖工作区文件\n\n## rm\n\n1. git rm  // 删除工作区，并且提交\n2. git rm —cached  // 只删除暂存区\n3. git rm -f   // 暂存区和工作区都删除\n\n# reset\n\n**谨慎使用！！！！！**\n\n- --soft – 缓存区和工作目录都不会被改变\n- --mixed – 默认选项。缓存区和你指定的提交同步，但工作目录不受影响\n- --hard – 缓存区和工作目录都同步到你指定的提交\n\n## revert\n\n前提是已经提交，缺点：一次回滚过个记录会出现冲突。","slug":"git基本操作","published":1,"updated":"2019-10-14T09:01:07.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a427000gic1yb48dhs6g","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>在实际开发中，会使用git作为版本控制工具来完成团队协作。因此，对基本的git操作指令进行总结是十分有必要的，本文对一些术语或者理论基础，不重新码字，可以<a href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.liaoxuefeng.com%2Fwiki%2F0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">参考廖雪峰老师的博文</a>，本文只对命令做归纳总结。</p>\n<p>git的通用操作流程如下图（来源于网络）</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/25/162fcc0987bf1c0a\" alt=\"git操作通用流程\"></p>\n<p>主要涉及到四个关键点：</p>\n<ol>\n<li>工作区：本地电脑存放项目文件的地方，比如learnGitProject文件夹；</li>\n<li>暂存区（Index/Stage）：在使用git管理项目文件的时候，其本地的项目文件会多出一个.git的文件夹，将这个.git文件夹称之为版本库。其中.git文件夹中包含了两个部分，一个是暂存区（Index或者Stage）,顾名思义就是暂时存放文件的地方，通常使用add命令将工作区的文件添加到暂存区里；</li>\n<li>本地仓库：.git文件夹里还包括git自动创建的master分支，并且将HEAD指针指向master分支。使用commit命令可以将暂存区中的文件添加到本地仓库中；</li>\n<li>远程仓库：不是在本地仓库中，项目代码在远程git服务器上，比如项目放在github上，就是一个远程仓库，通常使用clone命令将远程仓库拷贝到本地仓库中，开发后推送到远程仓库中即可；</li>\n</ol>\n<p>更细节的来看：</p>\n<p><img src=\"http://wumu.sciento.cn/img/162fcc0e7e711dc7.png\" alt=\"\"></p>\n<p>日常开发时代码实际上放置在工作区中，也就是本地的XXX.java这些文件，通过add等这些命令将代码文教提交给暂存区（Index/Stage），也就意味着代码全权交给了git进行管理，之后通过commit等命令将暂存区提交给master分支上，也就是意味打了一个版本，也可以说代码提交到了本地仓库中。另外，团队协作过程中自然而然还涉及到与远程仓库的交互。</p>\n<p>因此，经过这样的分析，git命令可以分为这样的逻辑进行理解和记忆：</p>\n<ol>\n<li><p>git管理配置的命令；</p>\n<p><strong>几个核心存储区的交互命令：</strong></p>\n</li>\n<li><p>工作区与暂存区的交互；</p>\n</li>\n<li><p>暂存区与本地仓库（分支）上的交互；</p>\n</li>\n<li><p>本地仓库与远程仓库的交互。</p>\n</li>\n</ol>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p><a href=\"https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git\" target=\"_blank\" rel=\"noopener\">git安装</a></p>\n<p><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/</a></p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"Your Name\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"email@example.com\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ git config --global core.editor emacs</span><br><span class=\"line\">$ git config --list</span><br><span class=\"line\">$ git config user.name</span><br></pre></td></tr></table></figure>\n<h1 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init  <span class=\"comment\"># 初始化工程</span></span><br><span class=\"line\">$ git add * <span class=\"comment\"># 将文件添加到暂存区</span></span><br><span class=\"line\">$ git commit -m  <span class=\"comment\"># 提交</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/libgit2/libgit2</span><br></pre></td></tr></table></figure>\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><h2 id=\"add\"><a href=\"#add\" class=\"headerlink\" title=\"add\"></a>add</h2><ol>\n<li><p>git add -A   保存所有的修改</p>\n</li>\n<li><p>git add .     保存新的添加和修改，但是不包括删除</p>\n</li>\n<li><p>git add -u   保存修改和删除，但是不包括新建文件。</p>\n</li>\n</ol>\n<h2 id=\"commit\"><a href=\"#commit\" class=\"headerlink\" title=\"commit\"></a>commit</h2><ol>\n<li>git commit -m</li>\n<li>git commit -ma   // -a是添加全部修改</li>\n<li>git commit –amend</li>\n</ol>\n<h2 id=\"checkout\"><a href=\"#checkout\" class=\"headerlink\" title=\"checkout\"></a>checkout</h2><ol>\n<li>git checkout — //使用暂缓区替换工作区</li>\n<li>git checkout  切换分支</li>\n<li>git checkout head — //直接使用本地参考的文件覆盖工作区文件</li>\n</ol>\n<h2 id=\"rm\"><a href=\"#rm\" class=\"headerlink\" title=\"rm\"></a>rm</h2><ol>\n<li>git rm  // 删除工作区，并且提交</li>\n<li>git rm —cached  // 只删除暂存区</li>\n<li>git rm -f   // 暂存区和工作区都删除</li>\n</ol>\n<h1 id=\"reset\"><a href=\"#reset\" class=\"headerlink\" title=\"reset\"></a>reset</h1><p><strong>谨慎使用！！！！！</strong></p>\n<ul>\n<li>–soft – 缓存区和工作目录都不会被改变</li>\n<li>–mixed – 默认选项。缓存区和你指定的提交同步，但工作目录不受影响</li>\n<li>–hard – 缓存区和工作目录都同步到你指定的提交</li>\n</ul>\n<h2 id=\"revert\"><a href=\"#revert\" class=\"headerlink\" title=\"revert\"></a>revert</h2><p>前提是已经提交，缺点：一次回滚过个记录会出现冲突。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>在实际开发中，会使用git作为版本控制工具来完成团队协作。因此，对基本的git操作指令进行总结是十分有必要的，本文对一些术语或者理论基础，不重新码字，可以<a href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.liaoxuefeng.com%2Fwiki%2F0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">参考廖雪峰老师的博文</a>，本文只对命令做归纳总结。</p>\n<p>git的通用操作流程如下图（来源于网络）</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/25/162fcc0987bf1c0a\" alt=\"git操作通用流程\"></p>\n<p>主要涉及到四个关键点：</p>\n<ol>\n<li>工作区：本地电脑存放项目文件的地方，比如learnGitProject文件夹；</li>\n<li>暂存区（Index/Stage）：在使用git管理项目文件的时候，其本地的项目文件会多出一个.git的文件夹，将这个.git文件夹称之为版本库。其中.git文件夹中包含了两个部分，一个是暂存区（Index或者Stage）,顾名思义就是暂时存放文件的地方，通常使用add命令将工作区的文件添加到暂存区里；</li>\n<li>本地仓库：.git文件夹里还包括git自动创建的master分支，并且将HEAD指针指向master分支。使用commit命令可以将暂存区中的文件添加到本地仓库中；</li>\n<li>远程仓库：不是在本地仓库中，项目代码在远程git服务器上，比如项目放在github上，就是一个远程仓库，通常使用clone命令将远程仓库拷贝到本地仓库中，开发后推送到远程仓库中即可；</li>\n</ol>\n<p>更细节的来看：</p>\n<p><img src=\"http://wumu.sciento.cn/img/162fcc0e7e711dc7.png\" alt=\"\"></p>\n<p>日常开发时代码实际上放置在工作区中，也就是本地的XXX.java这些文件，通过add等这些命令将代码文教提交给暂存区（Index/Stage），也就意味着代码全权交给了git进行管理，之后通过commit等命令将暂存区提交给master分支上，也就是意味打了一个版本，也可以说代码提交到了本地仓库中。另外，团队协作过程中自然而然还涉及到与远程仓库的交互。</p>\n<p>因此，经过这样的分析，git命令可以分为这样的逻辑进行理解和记忆：</p>\n<ol>\n<li><p>git管理配置的命令；</p>\n<p><strong>几个核心存储区的交互命令：</strong></p>\n</li>\n<li><p>工作区与暂存区的交互；</p>\n</li>\n<li><p>暂存区与本地仓库（分支）上的交互；</p>\n</li>\n<li><p>本地仓库与远程仓库的交互。</p>\n</li>\n</ol>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p><a href=\"https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git\" target=\"_blank\" rel=\"noopener\">git安装</a></p>\n<p><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/</a></p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"Your Name\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"email@example.com\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ git config --global core.editor emacs</span><br><span class=\"line\">$ git config --list</span><br><span class=\"line\">$ git config user.name</span><br></pre></td></tr></table></figure>\n<h1 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init  <span class=\"comment\"># 初始化工程</span></span><br><span class=\"line\">$ git add * <span class=\"comment\"># 将文件添加到暂存区</span></span><br><span class=\"line\">$ git commit -m  <span class=\"comment\"># 提交</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/libgit2/libgit2</span><br></pre></td></tr></table></figure>\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><h2 id=\"add\"><a href=\"#add\" class=\"headerlink\" title=\"add\"></a>add</h2><ol>\n<li><p>git add -A   保存所有的修改</p>\n</li>\n<li><p>git add .     保存新的添加和修改，但是不包括删除</p>\n</li>\n<li><p>git add -u   保存修改和删除，但是不包括新建文件。</p>\n</li>\n</ol>\n<h2 id=\"commit\"><a href=\"#commit\" class=\"headerlink\" title=\"commit\"></a>commit</h2><ol>\n<li>git commit -m</li>\n<li>git commit -ma   // -a是添加全部修改</li>\n<li>git commit –amend</li>\n</ol>\n<h2 id=\"checkout\"><a href=\"#checkout\" class=\"headerlink\" title=\"checkout\"></a>checkout</h2><ol>\n<li>git checkout — //使用暂缓区替换工作区</li>\n<li>git checkout  切换分支</li>\n<li>git checkout head — //直接使用本地参考的文件覆盖工作区文件</li>\n</ol>\n<h2 id=\"rm\"><a href=\"#rm\" class=\"headerlink\" title=\"rm\"></a>rm</h2><ol>\n<li>git rm  // 删除工作区，并且提交</li>\n<li>git rm —cached  // 只删除暂存区</li>\n<li>git rm -f   // 暂存区和工作区都删除</li>\n</ol>\n<h1 id=\"reset\"><a href=\"#reset\" class=\"headerlink\" title=\"reset\"></a>reset</h1><p><strong>谨慎使用！！！！！</strong></p>\n<ul>\n<li>–soft – 缓存区和工作目录都不会被改变</li>\n<li>–mixed – 默认选项。缓存区和你指定的提交同步，但工作目录不受影响</li>\n<li>–hard – 缓存区和工作目录都同步到你指定的提交</li>\n</ul>\n<h2 id=\"revert\"><a href=\"#revert\" class=\"headerlink\" title=\"revert\"></a>revert</h2><p>前提是已经提交，缺点：一次回滚过个记录会出现冲突。</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-10-14T09:01:07.430Z","updated":"2019-10-14T09:01:07.433Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a428000iic1y3ujabxro","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"babel配置","date":"2019-10-18T03:21:01.000Z","_content":"\n# Babel6\n\nBabel6 现在使用的越来越少了，但是还是做一个笔记，现在基本都使用`babel-preset-env`，不需要写`babel-preset-esxxxx`了，但是`babel-preset-stage-x`还是要自己去加的。\n\n## 安装\n\n```bash\nnpm install -D babel-cli babel-preset-env\n```\n\n## 配置文件\n\nBabel6的配置文件是`.babelrc`\n\n```json\n{\n    //https://juejin.im/post/5a79adeef265da4e93116430\n}\n```\n\n# Babel7\n\nBabel7 相对于babel6有很大的变化，相关的模块的名字有很大的变化，官方舍弃了`babel-preset-esxxxx`和`babel-preset-stage-x`，后者的原因是提案一直在变化。\n\n## 安装\n\n```bash\nnpm install -D @babel/cli @babel/react @babel/plugin-transform-runtime @babel/env\n```\n\n## 配置文件\n\nBabel7有两种配置文件，一个是`.babelrc`，是局部的，另外一个是`babel.config.js`是全局的，具体的可以看下官网。7版本的配置文件解析也变得更加严格。\n\n### ","source":"_posts/babel配置.md","raw":"---\ntitle: babel配置\ndate: 2019-10-18 11:21:01\ntags:\n- babel\n- js\n---\n\n# Babel6\n\nBabel6 现在使用的越来越少了，但是还是做一个笔记，现在基本都使用`babel-preset-env`，不需要写`babel-preset-esxxxx`了，但是`babel-preset-stage-x`还是要自己去加的。\n\n## 安装\n\n```bash\nnpm install -D babel-cli babel-preset-env\n```\n\n## 配置文件\n\nBabel6的配置文件是`.babelrc`\n\n```json\n{\n    //https://juejin.im/post/5a79adeef265da4e93116430\n}\n```\n\n# Babel7\n\nBabel7 相对于babel6有很大的变化，相关的模块的名字有很大的变化，官方舍弃了`babel-preset-esxxxx`和`babel-preset-stage-x`，后者的原因是提案一直在变化。\n\n## 安装\n\n```bash\nnpm install -D @babel/cli @babel/react @babel/plugin-transform-runtime @babel/env\n```\n\n## 配置文件\n\nBabel7有两种配置文件，一个是`.babelrc`，是局部的，另外一个是`babel.config.js`是全局的，具体的可以看下官网。7版本的配置文件解析也变得更加严格。\n\n### ","slug":"babel配置","published":1,"updated":"2019-10-25T02:19:31.483Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a429000jic1yp62py3ui","content":"<h1 id=\"Babel6\"><a href=\"#Babel6\" class=\"headerlink\" title=\"Babel6\"></a>Babel6</h1><p>Babel6 现在使用的越来越少了，但是还是做一个笔记，现在基本都使用<code>babel-preset-env</code>，不需要写<code>babel-preset-esxxxx</code>了，但是<code>babel-preset-stage-x</code>还是要自己去加的。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D babel-cli babel-preset-env</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>Babel6的配置文件是<code>.babelrc</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    //https://juejin.im/post/5a79adeef265da4e93116430</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Babel7\"><a href=\"#Babel7\" class=\"headerlink\" title=\"Babel7\"></a>Babel7</h1><p>Babel7 相对于babel6有很大的变化，相关的模块的名字有很大的变化，官方舍弃了<code>babel-preset-esxxxx</code>和<code>babel-preset-stage-x</code>，后者的原因是提案一直在变化。</p>\n<h2 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D @babel/cli @babel/react @babel/plugin-transform-runtime @babel/env</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置文件-1\"><a href=\"#配置文件-1\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>Babel7有两种配置文件，一个是<code>.babelrc</code>，是局部的，另外一个是<code>babel.config.js</code>是全局的，具体的可以看下官网。7版本的配置文件解析也变得更加严格。</p>\n<p>### </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Babel6\"><a href=\"#Babel6\" class=\"headerlink\" title=\"Babel6\"></a>Babel6</h1><p>Babel6 现在使用的越来越少了，但是还是做一个笔记，现在基本都使用<code>babel-preset-env</code>，不需要写<code>babel-preset-esxxxx</code>了，但是<code>babel-preset-stage-x</code>还是要自己去加的。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D babel-cli babel-preset-env</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>Babel6的配置文件是<code>.babelrc</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    //https://juejin.im/post/5a79adeef265da4e93116430</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Babel7\"><a href=\"#Babel7\" class=\"headerlink\" title=\"Babel7\"></a>Babel7</h1><p>Babel7 相对于babel6有很大的变化，相关的模块的名字有很大的变化，官方舍弃了<code>babel-preset-esxxxx</code>和<code>babel-preset-stage-x</code>，后者的原因是提案一直在变化。</p>\n<h2 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D @babel/cli @babel/react @babel/plugin-transform-runtime @babel/env</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置文件-1\"><a href=\"#配置文件-1\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>Babel7有两种配置文件，一个是<code>.babelrc</code>，是局部的，另外一个是<code>babel.config.js</code>是全局的，具体的可以看下官网。7版本的配置文件解析也变得更加严格。</p>\n<p>### </p>\n"},{"layout":"python-import、reload","title":"__import__在python中的区别","date":"2019-06-01T07:49:16.000Z","_content":"\n### import \n\n作用：导入/引入一个python标准模块，其中包括.py文件、带有__init__.py文件的目录(自定义模块)。\n\nimport module_name[,module1,...]  \n\nfrom module import *|child[,child1,...]  \n\n注意：多次重复使用import语句时，不会重新加载被指定的模块，只是把对该模块的内存地址给引用到本地变量环境。\n\n实例：\n\npythontab.py  \n\n```python\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `os  ``print` `'in pythontab'``,``id``(os)`\n```\n\ntest.py  \n\n```\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `pythontab   ``#第一次会打印pythontab里面的语句  ``import` `os  ``#再次导入os后，其内存地址和pythontab里面的是一样的，因此这里只是对os的本地引用  ``print` `'in c'``,``id``(os)  ``import` `pythontab  ``#第二次不会打印pythontab里面的语句，因为没有重新加载`\n```\n\n### reload\n\n作用：对已经加载的模块进行重新加载，一般用于原模块有变化等特殊情况，reload前该模块必须已经import过。\n\nimport os\n\nreload(os)\n\n\n\n说明：\n\nreload会重新加载已加载的模块，但原来已经使用的实例还是会使用旧的模块，而新生产的实例会使用新的模块；reload后还是用原来的内存地址；不能支持from。。import。。格式的模块进行重新加载。\n\n实例：\n\npythontab.py  \n\n```python\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `os  ``print` `'in pythontab'``,``id``(os)`\n```\n\n\n\ntest.py  \n\n```python\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `pythontab   ``#第一次import会打印pythontab里面的语句  ``print` `id``(pythontab) ``#原来pythontab的内存地址  ``reload``(pythontab)  ``#第二次reload还会打印pythontab里面的语句，因为有重新加载  ``print` `id``(pythontab) ``#reload后pythontab的内存地址，和原来一样`\n```\n\n扩展：\n\n上面说了，在特殊情况的下才会使用reload函数；除了原来模块文件有修改外，还有哪些情况需要使用reload函数呢，这里举个例子。\n\n```python\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys   ``#引用sys模块进来，并不是进行sys的第一次加载  ``reload``(sys)  ``#重新加载sys  ``sys.setdefaultencoding(``'utf8'``)  ``##调用setdefaultencoding函数`\n```\n\n上面的代码是正确的，再测试下面的代码\n\n```python\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys     ``sys.setdefaultencoding(``'utf8'``)`\n```\n\n上面的测试会失败，那么为什么要在调用setdefaultencoding时必须要先reload一次sys模块呢？因为这里的import语句其实并不是sys的第一次导入语句，也就是说这里其实可能是第二、三次进行sys模块的import，这里只是一个对sys的引用，只能reload才能进行重新加载；那么为什么要重新加载，而直接引用过来则不能调用该函数呢？因为setdefaultencoding函数在被系统调用后被删除了，所以通过import引用进来时其实已经没有了，所以必须reload一次sys模块，这样setdefaultencoding才会为可用，才能在代码里修改解释器当前的字符编码。试试下面的代码，同样会报错：\n\n```python\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys    ``reload``(sys)   ``sys.setdefaultencoding(``'utf8'``)    ``del` `sys.setdefaultencoding   ``##删除原来的setdefaultencoding函数     ``sys.setdefaultencoding(``'gb2312'``)`\n```\n\n那么到底是谁在之前就导入sys并且调用了setdefaultencoding函数呢？答案就在python安装目录的Lib文件夹下，有一个叫site.py的文件【python2.6】，在里面可以找到main() --> setencoding()-->sys.setdefaultencoding(encoding),因为这个site.py每次启动python解释器时会自动加载，所以main函数每次都会被执行，setdefaultencoding函数一出来就已经被删除了。\n\n### __import__\n\n作用：\n\n同import语句同样的功能，但__import__是一个函数，并且只接收字符串作为参数，所以它的作用就可想而知了。其实import语句就是调用这个函数进行导入工作的，import sys <==>sys = __import__('sys')\n\n使用：\n\n__import__(module_name[, globals[, locals[, fromlist]]]) #可选参数默认为globals(),locals(),[]\n\n__import__('os')    \n\n__import__('os',globals(),locals(),['path','pip'])  #等价于from os import path, pip\n\n说明：\n\n通常在动态加载时可以使用到这个函数，比如你希望加载某个文件夹下的所用模块，但是其下的模块名称又会经常变化时，就可以使用这个函数动态加载所有模块了，最常见的场景就是插件功能的支持。\n\n扩展：\n\n既然可以通过字符串来动态导入模块，那么是否可以通过字符串动态重新加载模块吗？试试reload('os')直接报错，是不是没有其他方式呢?虽然不能直接reload但是可以先unimport一个模块，然后再__import__来重新加载模块。现在看看unimport操作如何实现，在Python解释里可以通过globals(),locals(),vars(),dir()等函数查看到当前环境下加载的模块及其位置，但是这些都只能看不能删除，所以无法unimport；不过除此之外还有一个地方是专门存放模块的，这就是sys.modules，通过sys.modules可以查看所有的已加载并且成功的模块，而且比globals要多，说明默认会加载一些额外的模块，接下来就是unimport了。\n\n```python\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys  ``__import__``(``'a'``)      ``#第一次导入会打印消息  ``del` `sys.modules[``'a'``]   ``#unimport  ``__import__``(``'a'``)    ``#再次导入还是会打印消息，因为已经unimport一次了  ``__import__``(``'a'``)    ``#这次就不会打印消息了`\n```","source":"_posts/import-在python中的区别.md","raw":"---\nlayout: python-import、reload\ntitle: __import__在python中的区别\ndate: 2019-06-01 15:49:16\ntags:\n- python\n---\n\n### import \n\n作用：导入/引入一个python标准模块，其中包括.py文件、带有__init__.py文件的目录(自定义模块)。\n\nimport module_name[,module1,...]  \n\nfrom module import *|child[,child1,...]  \n\n注意：多次重复使用import语句时，不会重新加载被指定的模块，只是把对该模块的内存地址给引用到本地变量环境。\n\n实例：\n\npythontab.py  \n\n```python\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `os  ``print` `'in pythontab'``,``id``(os)`\n```\n\ntest.py  \n\n```\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `pythontab   ``#第一次会打印pythontab里面的语句  ``import` `os  ``#再次导入os后，其内存地址和pythontab里面的是一样的，因此这里只是对os的本地引用  ``print` `'in c'``,``id``(os)  ``import` `pythontab  ``#第二次不会打印pythontab里面的语句，因为没有重新加载`\n```\n\n### reload\n\n作用：对已经加载的模块进行重新加载，一般用于原模块有变化等特殊情况，reload前该模块必须已经import过。\n\nimport os\n\nreload(os)\n\n\n\n说明：\n\nreload会重新加载已加载的模块，但原来已经使用的实例还是会使用旧的模块，而新生产的实例会使用新的模块；reload后还是用原来的内存地址；不能支持from。。import。。格式的模块进行重新加载。\n\n实例：\n\npythontab.py  \n\n```python\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `os  ``print` `'in pythontab'``,``id``(os)`\n```\n\n\n\ntest.py  \n\n```python\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `pythontab   ``#第一次import会打印pythontab里面的语句  ``print` `id``(pythontab) ``#原来pythontab的内存地址  ``reload``(pythontab)  ``#第二次reload还会打印pythontab里面的语句，因为有重新加载  ``print` `id``(pythontab) ``#reload后pythontab的内存地址，和原来一样`\n```\n\n扩展：\n\n上面说了，在特殊情况的下才会使用reload函数；除了原来模块文件有修改外，还有哪些情况需要使用reload函数呢，这里举个例子。\n\n```python\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys   ``#引用sys模块进来，并不是进行sys的第一次加载  ``reload``(sys)  ``#重新加载sys  ``sys.setdefaultencoding(``'utf8'``)  ``##调用setdefaultencoding函数`\n```\n\n上面的代码是正确的，再测试下面的代码\n\n```python\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys     ``sys.setdefaultencoding(``'utf8'``)`\n```\n\n上面的测试会失败，那么为什么要在调用setdefaultencoding时必须要先reload一次sys模块呢？因为这里的import语句其实并不是sys的第一次导入语句，也就是说这里其实可能是第二、三次进行sys模块的import，这里只是一个对sys的引用，只能reload才能进行重新加载；那么为什么要重新加载，而直接引用过来则不能调用该函数呢？因为setdefaultencoding函数在被系统调用后被删除了，所以通过import引用进来时其实已经没有了，所以必须reload一次sys模块，这样setdefaultencoding才会为可用，才能在代码里修改解释器当前的字符编码。试试下面的代码，同样会报错：\n\n```python\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys    ``reload``(sys)   ``sys.setdefaultencoding(``'utf8'``)    ``del` `sys.setdefaultencoding   ``##删除原来的setdefaultencoding函数     ``sys.setdefaultencoding(``'gb2312'``)`\n```\n\n那么到底是谁在之前就导入sys并且调用了setdefaultencoding函数呢？答案就在python安装目录的Lib文件夹下，有一个叫site.py的文件【python2.6】，在里面可以找到main() --> setencoding()-->sys.setdefaultencoding(encoding),因为这个site.py每次启动python解释器时会自动加载，所以main函数每次都会被执行，setdefaultencoding函数一出来就已经被删除了。\n\n### __import__\n\n作用：\n\n同import语句同样的功能，但__import__是一个函数，并且只接收字符串作为参数，所以它的作用就可想而知了。其实import语句就是调用这个函数进行导入工作的，import sys <==>sys = __import__('sys')\n\n使用：\n\n__import__(module_name[, globals[, locals[, fromlist]]]) #可选参数默认为globals(),locals(),[]\n\n__import__('os')    \n\n__import__('os',globals(),locals(),['path','pip'])  #等价于from os import path, pip\n\n说明：\n\n通常在动态加载时可以使用到这个函数，比如你希望加载某个文件夹下的所用模块，但是其下的模块名称又会经常变化时，就可以使用这个函数动态加载所有模块了，最常见的场景就是插件功能的支持。\n\n扩展：\n\n既然可以通过字符串来动态导入模块，那么是否可以通过字符串动态重新加载模块吗？试试reload('os')直接报错，是不是没有其他方式呢?虽然不能直接reload但是可以先unimport一个模块，然后再__import__来重新加载模块。现在看看unimport操作如何实现，在Python解释里可以通过globals(),locals(),vars(),dir()等函数查看到当前环境下加载的模块及其位置，但是这些都只能看不能删除，所以无法unimport；不过除此之外还有一个地方是专门存放模块的，这就是sys.modules，通过sys.modules可以查看所有的已加载并且成功的模块，而且比globals要多，说明默认会加载一些额外的模块，接下来就是unimport了。\n\n```python\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys  ``__import__``(``'a'``)      ``#第一次导入会打印消息  ``del` `sys.modules[``'a'``]   ``#unimport  ``__import__``(``'a'``)    ``#再次导入还是会打印消息，因为已经unimport一次了  ``__import__``(``'a'``)    ``#这次就不会打印消息了`\n```","slug":"import-在python中的区别","published":1,"updated":"2019-10-14T09:01:07.495Z","comments":1,"photos":[],"link":"","_id":"ck2a7a42a000lic1yzcwf3ab1","content":"<h3 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h3><p>作用：导入/引入一个python标准模块，其中包括.py文件、带有<strong>init</strong>.py文件的目录(自定义模块)。</p>\n<p>import module_name[,module1,…]  </p>\n<p>from module import *|child[,child1,…]  </p>\n<p>注意：多次重复使用import语句时，不会重新加载被指定的模块，只是把对该模块的内存地址给引用到本地变量环境。</p>\n<p>实例：</p>\n<p>pythontab.py  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"comment\">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `os  ``print` `'in pythontab'``,``id``(os)`</span></span><br></pre></td></tr></table></figure>\n<p>test.py  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `pythontab   ``#第一次会打印pythontab里面的语句  ``import` `os  ``#再次导入os后，其内存地址和pythontab里面的是一样的，因此这里只是对os的本地引用  ``print` `&apos;in c&apos;``,``id``(os)  ``import` `pythontab  ``#第二次不会打印pythontab里面的语句，因为没有重新加载`</span><br></pre></td></tr></table></figure>\n<h3 id=\"reload\"><a href=\"#reload\" class=\"headerlink\" title=\"reload\"></a>reload</h3><p>作用：对已经加载的模块进行重新加载，一般用于原模块有变化等特殊情况，reload前该模块必须已经import过。</p>\n<p>import os</p>\n<p>reload(os)</p>\n<p>说明：</p>\n<p>reload会重新加载已加载的模块，但原来已经使用的实例还是会使用旧的模块，而新生产的实例会使用新的模块；reload后还是用原来的内存地址；不能支持from。。import。。格式的模块进行重新加载。</p>\n<p>实例：</p>\n<p>pythontab.py  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"comment\">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `os  ``print` `'in pythontab'``,``id``(os)`</span></span><br></pre></td></tr></table></figure>\n<p>test.py  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"comment\">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `pythontab   ``#第一次import会打印pythontab里面的语句  ``print` `id``(pythontab) ``#原来pythontab的内存地址  ``reload``(pythontab)  ``#第二次reload还会打印pythontab里面的语句，因为有重新加载  ``print` `id``(pythontab) ``#reload后pythontab的内存地址，和原来一样`</span></span><br></pre></td></tr></table></figure>\n<p>扩展：</p>\n<p>上面说了，在特殊情况的下才会使用reload函数；除了原来模块文件有修改外，还有哪些情况需要使用reload函数呢，这里举个例子。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"comment\">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys   ``#引用sys模块进来，并不是进行sys的第一次加载  ``reload``(sys)  ``#重新加载sys  ``sys.setdefaultencoding(``'utf8'``)  ``##调用setdefaultencoding函数`</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码是正确的，再测试下面的代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"comment\">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys     ``sys.setdefaultencoding(``'utf8'``)`</span></span><br></pre></td></tr></table></figure>\n<p>上面的测试会失败，那么为什么要在调用setdefaultencoding时必须要先reload一次sys模块呢？因为这里的import语句其实并不是sys的第一次导入语句，也就是说这里其实可能是第二、三次进行sys模块的import，这里只是一个对sys的引用，只能reload才能进行重新加载；那么为什么要重新加载，而直接引用过来则不能调用该函数呢？因为setdefaultencoding函数在被系统调用后被删除了，所以通过import引用进来时其实已经没有了，所以必须reload一次sys模块，这样setdefaultencoding才会为可用，才能在代码里修改解释器当前的字符编码。试试下面的代码，同样会报错：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"comment\">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys    ``reload``(sys)   ``sys.setdefaultencoding(``'utf8'``)    ``del` `sys.setdefaultencoding   ``##删除原来的setdefaultencoding函数     ``sys.setdefaultencoding(``'gb2312'``)`</span></span><br></pre></td></tr></table></figure>\n<p>那么到底是谁在之前就导入sys并且调用了setdefaultencoding函数呢？答案就在python安装目录的Lib文件夹下，有一个叫site.py的文件【python2.6】，在里面可以找到main() –&gt; setencoding()–&gt;sys.setdefaultencoding(encoding),因为这个site.py每次启动python解释器时会自动加载，所以main函数每次都会被执行，setdefaultencoding函数一出来就已经被删除了。</p>\n<h3 id=\"import-1\"><a href=\"#import-1\" class=\"headerlink\" title=\"import\"></a><strong>import</strong></h3><p>作用：</p>\n<p>同import语句同样的功能，但<strong>import</strong>是一个函数，并且只接收字符串作为参数，所以它的作用就可想而知了。其实import语句就是调用这个函数进行导入工作的，import sys &lt;==&gt;sys = <strong>import</strong>(‘sys’)</p>\n<p>使用：</p>\n<p><strong>import</strong>(module_name[, globals[, locals[, fromlist]]]) #可选参数默认为globals(),locals(),[]</p>\n<p><strong>import</strong>(‘os’)    </p>\n<p><strong>import</strong>(‘os’,globals(),locals(),[‘path’,’pip’])  #等价于from os import path, pip</p>\n<p>说明：</p>\n<p>通常在动态加载时可以使用到这个函数，比如你希望加载某个文件夹下的所用模块，但是其下的模块名称又会经常变化时，就可以使用这个函数动态加载所有模块了，最常见的场景就是插件功能的支持。</p>\n<p>扩展：</p>\n<p>既然可以通过字符串来动态导入模块，那么是否可以通过字符串动态重新加载模块吗？试试reload(‘os’)直接报错，是不是没有其他方式呢?虽然不能直接reload但是可以先unimport一个模块，然后再<strong>import</strong>来重新加载模块。现在看看unimport操作如何实现，在Python解释里可以通过globals(),locals(),vars(),dir()等函数查看到当前环境下加载的模块及其位置，但是这些都只能看不能删除，所以无法unimport；不过除此之外还有一个地方是专门存放模块的，这就是sys.modules，通过sys.modules可以查看所有的已加载并且成功的模块，而且比globals要多，说明默认会加载一些额外的模块，接下来就是unimport了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"comment\">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys  ``__import__``(``'a'``)      ``#第一次导入会打印消息  ``del` `sys.modules[``'a'``]   ``#unimport  ``__import__``(``'a'``)    ``#再次导入还是会打印消息，因为已经unimport一次了  ``__import__``(``'a'``)    ``#这次就不会打印消息了`</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h3><p>作用：导入/引入一个python标准模块，其中包括.py文件、带有<strong>init</strong>.py文件的目录(自定义模块)。</p>\n<p>import module_name[,module1,…]  </p>\n<p>from module import *|child[,child1,…]  </p>\n<p>注意：多次重复使用import语句时，不会重新加载被指定的模块，只是把对该模块的内存地址给引用到本地变量环境。</p>\n<p>实例：</p>\n<p>pythontab.py  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"comment\">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `os  ``print` `'in pythontab'``,``id``(os)`</span></span><br></pre></td></tr></table></figure>\n<p>test.py  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `pythontab   ``#第一次会打印pythontab里面的语句  ``import` `os  ``#再次导入os后，其内存地址和pythontab里面的是一样的，因此这里只是对os的本地引用  ``print` `&apos;in c&apos;``,``id``(os)  ``import` `pythontab  ``#第二次不会打印pythontab里面的语句，因为没有重新加载`</span><br></pre></td></tr></table></figure>\n<h3 id=\"reload\"><a href=\"#reload\" class=\"headerlink\" title=\"reload\"></a>reload</h3><p>作用：对已经加载的模块进行重新加载，一般用于原模块有变化等特殊情况，reload前该模块必须已经import过。</p>\n<p>import os</p>\n<p>reload(os)</p>\n<p>说明：</p>\n<p>reload会重新加载已加载的模块，但原来已经使用的实例还是会使用旧的模块，而新生产的实例会使用新的模块；reload后还是用原来的内存地址；不能支持from。。import。。格式的模块进行重新加载。</p>\n<p>实例：</p>\n<p>pythontab.py  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"comment\">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `os  ``print` `'in pythontab'``,``id``(os)`</span></span><br></pre></td></tr></table></figure>\n<p>test.py  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"comment\">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `pythontab   ``#第一次import会打印pythontab里面的语句  ``print` `id``(pythontab) ``#原来pythontab的内存地址  ``reload``(pythontab)  ``#第二次reload还会打印pythontab里面的语句，因为有重新加载  ``print` `id``(pythontab) ``#reload后pythontab的内存地址，和原来一样`</span></span><br></pre></td></tr></table></figure>\n<p>扩展：</p>\n<p>上面说了，在特殊情况的下才会使用reload函数；除了原来模块文件有修改外，还有哪些情况需要使用reload函数呢，这里举个例子。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"comment\">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys   ``#引用sys模块进来，并不是进行sys的第一次加载  ``reload``(sys)  ``#重新加载sys  ``sys.setdefaultencoding(``'utf8'``)  ``##调用setdefaultencoding函数`</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码是正确的，再测试下面的代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"comment\">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys     ``sys.setdefaultencoding(``'utf8'``)`</span></span><br></pre></td></tr></table></figure>\n<p>上面的测试会失败，那么为什么要在调用setdefaultencoding时必须要先reload一次sys模块呢？因为这里的import语句其实并不是sys的第一次导入语句，也就是说这里其实可能是第二、三次进行sys模块的import，这里只是一个对sys的引用，只能reload才能进行重新加载；那么为什么要重新加载，而直接引用过来则不能调用该函数呢？因为setdefaultencoding函数在被系统调用后被删除了，所以通过import引用进来时其实已经没有了，所以必须reload一次sys模块，这样setdefaultencoding才会为可用，才能在代码里修改解释器当前的字符编码。试试下面的代码，同样会报错：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"comment\">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys    ``reload``(sys)   ``sys.setdefaultencoding(``'utf8'``)    ``del` `sys.setdefaultencoding   ``##删除原来的setdefaultencoding函数     ``sys.setdefaultencoding(``'gb2312'``)`</span></span><br></pre></td></tr></table></figure>\n<p>那么到底是谁在之前就导入sys并且调用了setdefaultencoding函数呢？答案就在python安装目录的Lib文件夹下，有一个叫site.py的文件【python2.6】，在里面可以找到main() –&gt; setencoding()–&gt;sys.setdefaultencoding(encoding),因为这个site.py每次启动python解释器时会自动加载，所以main函数每次都会被执行，setdefaultencoding函数一出来就已经被删除了。</p>\n<h3 id=\"import-1\"><a href=\"#import-1\" class=\"headerlink\" title=\"import\"></a><strong>import</strong></h3><p>作用：</p>\n<p>同import语句同样的功能，但<strong>import</strong>是一个函数，并且只接收字符串作为参数，所以它的作用就可想而知了。其实import语句就是调用这个函数进行导入工作的，import sys &lt;==&gt;sys = <strong>import</strong>(‘sys’)</p>\n<p>使用：</p>\n<p><strong>import</strong>(module_name[, globals[, locals[, fromlist]]]) #可选参数默认为globals(),locals(),[]</p>\n<p><strong>import</strong>(‘os’)    </p>\n<p><strong>import</strong>(‘os’,globals(),locals(),[‘path’,’pip’])  #等价于from os import path, pip</p>\n<p>说明：</p>\n<p>通常在动态加载时可以使用到这个函数，比如你希望加载某个文件夹下的所用模块，但是其下的模块名称又会经常变化时，就可以使用这个函数动态加载所有模块了，最常见的场景就是插件功能的支持。</p>\n<p>扩展：</p>\n<p>既然可以通过字符串来动态导入模块，那么是否可以通过字符串动态重新加载模块吗？试试reload(‘os’)直接报错，是不是没有其他方式呢?虽然不能直接reload但是可以先unimport一个模块，然后再<strong>import</strong>来重新加载模块。现在看看unimport操作如何实现，在Python解释里可以通过globals(),locals(),vars(),dir()等函数查看到当前环境下加载的模块及其位置，但是这些都只能看不能删除，所以无法unimport；不过除此之外还有一个地方是专门存放模块的，这就是sys.modules，通过sys.modules可以查看所有的已加载并且成功的模块，而且比globals要多，说明默认会加载一些额外的模块，接下来就是unimport了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"comment\">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys  ``__import__``(``'a'``)      ``#第一次导入会打印消息  ``del` `sys.modules[``'a'``]   ``#unimport  ``__import__``(``'a'``)    ``#再次导入还是会打印消息，因为已经unimport一次了  ``__import__``(``'a'``)    ``#这次就不会打印消息了`</span></span><br></pre></td></tr></table></figure>"},{"title":"java多线程","date":"2019-02-15T08:37:30.000Z","_content":"\n# 相关的类\n\n1. Runnable\n2. Thread\n3. Callable:比Runnable有个返回值\n4. Future\n5. FutureTask\n\n","source":"_posts/java多线程.md","raw":"---\ntitle: java多线程\ndate: 2019-02-15 16:37:30\ntags:\n- java\n---\n\n# 相关的类\n\n1. Runnable\n2. Thread\n3. Callable:比Runnable有个返回值\n4. Future\n5. FutureTask\n\n","slug":"java多线程","published":1,"updated":"2019-10-28T08:41:15.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a42b000nic1y53agx9qp","content":"<h1 id=\"相关的类\"><a href=\"#相关的类\" class=\"headerlink\" title=\"相关的类\"></a>相关的类</h1><ol>\n<li>Runnable</li>\n<li>Thread</li>\n<li>Callable:比Runnable有个返回值</li>\n<li>Future</li>\n<li>FutureTask</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"相关的类\"><a href=\"#相关的类\" class=\"headerlink\" title=\"相关的类\"></a>相关的类</h1><ol>\n<li>Runnable</li>\n<li>Thread</li>\n<li>Callable:比Runnable有个返回值</li>\n<li>Future</li>\n<li>FutureTask</li>\n</ol>\n"},{"title":"java多线程自问","date":"2019-04-15T02:31:35.000Z","_content":"\n1. java创建线程的方式\n2. java的线程的类型\n3. Timer与TimerTask的区别\n4. 怎么启动、停止、加入、礼让线程\n5. 线程的生命周期以及其切换\n6. CountDownLatch、CyclicBarrier和Semaphore\n7. 什么是线程安全？Vector是一个线程安全类吗？ \n8. ","source":"_posts/java多线程自问.md","raw":"---\ntitle: java多线程自问\ndate: 2019-04-15 10:31:35\ntags:\n- java\n---\n\n1. java创建线程的方式\n2. java的线程的类型\n3. Timer与TimerTask的区别\n4. 怎么启动、停止、加入、礼让线程\n5. 线程的生命周期以及其切换\n6. CountDownLatch、CyclicBarrier和Semaphore\n7. 什么是线程安全？Vector是一个线程安全类吗？ \n8. ","slug":"java多线程自问","published":1,"updated":"2019-10-28T08:41:15.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a42c000pic1yj3qzg497","content":"<ol>\n<li>java创建线程的方式</li>\n<li>java的线程的类型</li>\n<li>Timer与TimerTask的区别</li>\n<li>怎么启动、停止、加入、礼让线程</li>\n<li>线程的生命周期以及其切换</li>\n<li>CountDownLatch、CyclicBarrier和Semaphore</li>\n<li>什么是线程安全？Vector是一个线程安全类吗？ </li>\n<li></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>java创建线程的方式</li>\n<li>java的线程的类型</li>\n<li>Timer与TimerTask的区别</li>\n<li>怎么启动、停止、加入、礼让线程</li>\n<li>线程的生命周期以及其切换</li>\n<li>CountDownLatch、CyclicBarrier和Semaphore</li>\n<li>什么是线程安全？Vector是一个线程安全类吗？ </li>\n<li></li>\n</ol>\n"},{"title":"jquery基本操作","date":"2019-01-12T08:20:45.000Z","_content":"\n# 选择器\n\n```js\n// 基本选择器\n$('#id')\n$('.class')\n$('element')\n$('*')\n$('select1 ,select2')//可以使用css选择器\n\n// 层次选择器\n$('ancestor descendant')\n$('parent >child')\n$('prev+next')\n$('prev~siblings')//获取所有同辈元素\n\n\n\n```\n\n# DOM操作\n\n## 基本操作\n\n```js\n// attr\n$('div').attr(\"background\")//获取属性\n$('div').attr(\"background\",\"white\")\n$('div').attr({\"background\":\"white\",\"height\":\"200px\"})\n\n// css\n$(\"div\").css('background')\n$('div').css(\"background\",\"white\")\n$('div').css({'background':'blue',\"height\":'200px'})\n\n// width height\nwidth()\nheight()\n\n// addClass\n$('div').addClass('className');\n\n// removeAttr\n$('div').removeAttr('background')\n\n// removeClass 没参数删除所有\n\n// hasClass\n\n// 创建节点\nvar p $('<p>hello</p>')\n\n// append() 添加内容\n\n// appendTo()\n\n// prepend() 向元素内部前面添加内容\n// prependTo()\n​``` html\n<p>hello</p>\n​```\n$('<i>hi!</i>').prependTo(\"p\")\n​``` html\n<p><i>hi!</i>hello</p>\n​```\n    \n// 在相应位置添加元素，是在元素的外面\n// after\n// insertAfter\n// before\n//insertBefore\n\n// remove()\n// detach()：和remove()几乎一样，不同的是detach方法不会删除节点所绑定的事件和附加的数据\n// empty() 清空内容\n\n// clone()复制节点，可以有参数true，当有true参数时，将同时复制节点所绑定的事件\n// replaceWith 将匹配的节点替换成指定的节点\n// replaceAll() 只是用一个\n\n// wrap 包裹节点\n// wrapAll\n// wrapInner 将匹配的节点内部的节点或者文本内容用指定的节点包裹起来\n​```\n<p>我是内容</p>\n​```\n$(\"p\").wrapInner(\"<span></span>\");\n​```\n<p><span>我是内容</span></p>\n​```\n// html()\n// text()\n// val()\n\n// children()\n// next()\n// prev()\n// siblings()\n// closest() 获取最近的符合匹配的一个父元素\n​```\n<div>\n<div class=\"div2\">\n<p>我是内容</p>\n</div>\n</div>\n​```\nvar $div=$(\"p\").closest();//返回class为div2的div元素\n\n// parent()\n// parents()\n\n\n// offset()\n// position()\n\n// scrollTop()\n// scrollLeft()\n\n\n\n```\n\n# 事件与动画\n\n```js\n$().ready()\n$('').bind(type,func)\n$('').click()\n$('').mouseover\n\n// 合成事件\nhover(enter,leave)\ntoggle(fn1,fn2)\n       \n// 阻止事件\nevent.stopPropagation();\nevent.preventDefault();\n\n// unbind 移除事件\n// trigger 触发事件\n\n// 动画\nhide();\nshow(time);\nfadeLn();\nfadeOut();\nslideUp();\nslideDown();\nslideToggle();\nfadeTo();\nfadeToggle();\nanimate();\ndelay();\n       \n```\n\n# 参考\n\n> [jQuery简明参考手册——30分钟快速入门jQuery]( https://www.jianshu.com/p/3e2768c8dad4)","source":"_posts/jquery基本操作.md","raw":"---\ntitle: jquery基本操作\ndate: 2019-01-12 16:20:45\ntags:\n- js\n- jquery\n\n---\n\n# 选择器\n\n```js\n// 基本选择器\n$('#id')\n$('.class')\n$('element')\n$('*')\n$('select1 ,select2')//可以使用css选择器\n\n// 层次选择器\n$('ancestor descendant')\n$('parent >child')\n$('prev+next')\n$('prev~siblings')//获取所有同辈元素\n\n\n\n```\n\n# DOM操作\n\n## 基本操作\n\n```js\n// attr\n$('div').attr(\"background\")//获取属性\n$('div').attr(\"background\",\"white\")\n$('div').attr({\"background\":\"white\",\"height\":\"200px\"})\n\n// css\n$(\"div\").css('background')\n$('div').css(\"background\",\"white\")\n$('div').css({'background':'blue',\"height\":'200px'})\n\n// width height\nwidth()\nheight()\n\n// addClass\n$('div').addClass('className');\n\n// removeAttr\n$('div').removeAttr('background')\n\n// removeClass 没参数删除所有\n\n// hasClass\n\n// 创建节点\nvar p $('<p>hello</p>')\n\n// append() 添加内容\n\n// appendTo()\n\n// prepend() 向元素内部前面添加内容\n// prependTo()\n​``` html\n<p>hello</p>\n​```\n$('<i>hi!</i>').prependTo(\"p\")\n​``` html\n<p><i>hi!</i>hello</p>\n​```\n    \n// 在相应位置添加元素，是在元素的外面\n// after\n// insertAfter\n// before\n//insertBefore\n\n// remove()\n// detach()：和remove()几乎一样，不同的是detach方法不会删除节点所绑定的事件和附加的数据\n// empty() 清空内容\n\n// clone()复制节点，可以有参数true，当有true参数时，将同时复制节点所绑定的事件\n// replaceWith 将匹配的节点替换成指定的节点\n// replaceAll() 只是用一个\n\n// wrap 包裹节点\n// wrapAll\n// wrapInner 将匹配的节点内部的节点或者文本内容用指定的节点包裹起来\n​```\n<p>我是内容</p>\n​```\n$(\"p\").wrapInner(\"<span></span>\");\n​```\n<p><span>我是内容</span></p>\n​```\n// html()\n// text()\n// val()\n\n// children()\n// next()\n// prev()\n// siblings()\n// closest() 获取最近的符合匹配的一个父元素\n​```\n<div>\n<div class=\"div2\">\n<p>我是内容</p>\n</div>\n</div>\n​```\nvar $div=$(\"p\").closest();//返回class为div2的div元素\n\n// parent()\n// parents()\n\n\n// offset()\n// position()\n\n// scrollTop()\n// scrollLeft()\n\n\n\n```\n\n# 事件与动画\n\n```js\n$().ready()\n$('').bind(type,func)\n$('').click()\n$('').mouseover\n\n// 合成事件\nhover(enter,leave)\ntoggle(fn1,fn2)\n       \n// 阻止事件\nevent.stopPropagation();\nevent.preventDefault();\n\n// unbind 移除事件\n// trigger 触发事件\n\n// 动画\nhide();\nshow(time);\nfadeLn();\nfadeOut();\nslideUp();\nslideDown();\nslideToggle();\nfadeTo();\nfadeToggle();\nanimate();\ndelay();\n       \n```\n\n# 参考\n\n> [jQuery简明参考手册——30分钟快速入门jQuery]( https://www.jianshu.com/p/3e2768c8dad4)","slug":"jquery基本操作","published":1,"updated":"2019-10-14T09:01:07.643Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a42c000sic1y5cjmbp5f","content":"<h1 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基本选择器</span></span><br><span class=\"line\">$(<span class=\"string\">'#id'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'.class'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'element'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'*'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'select1 ,select2'</span>)<span class=\"comment\">//可以使用css选择器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 层次选择器</span></span><br><span class=\"line\">$(<span class=\"string\">'ancestor descendant'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'parent &gt;child'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'prev+next'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'prev~siblings'</span>)<span class=\"comment\">//获取所有同辈元素</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"DOM操作\"><a href=\"#DOM操作\" class=\"headerlink\" title=\"DOM操作\"></a>DOM操作</h1><h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// attr</span></span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).attr(<span class=\"string\">\"background\"</span>)<span class=\"comment\">//获取属性</span></span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).attr(<span class=\"string\">\"background\"</span>,<span class=\"string\">\"white\"</span>)</span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).attr(&#123;<span class=\"string\">\"background\"</span>:<span class=\"string\">\"white\"</span>,<span class=\"string\">\"height\"</span>:<span class=\"string\">\"200px\"</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// css</span></span><br><span class=\"line\">$(<span class=\"string\">\"div\"</span>).css(<span class=\"string\">'background'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).css(<span class=\"string\">\"background\"</span>,<span class=\"string\">\"white\"</span>)</span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).css(&#123;<span class=\"string\">'background'</span>:<span class=\"string\">'blue'</span>,<span class=\"string\">\"height\"</span>:<span class=\"string\">'200px'</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// width height</span></span><br><span class=\"line\">width()</span><br><span class=\"line\">height()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// addClass</span></span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).addClass(<span class=\"string\">'className'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// removeAttr</span></span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).removeAttr(<span class=\"string\">'background'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// removeClass 没参数删除所有</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// hasClass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建节点</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p $(<span class=\"string\">'&lt;p&gt;hello&lt;/p&gt;'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// append() 添加内容</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// appendTo()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// prepend() 向元素内部前面添加内容</span></span><br><span class=\"line\"><span class=\"comment\">// prependTo()</span></span><br><span class=\"line\">​<span class=\"string\">``</span><span class=\"string\">` html</span></span><br><span class=\"line\"><span class=\"string\">&lt;p&gt;hello&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">​</span></span><br></pre></td></tr></table></figure>\n<p>$(‘<i>hi!</i>‘).prependTo(“p”)<br>​<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>hi!<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>// 在相应位置添加元素，是在元素的外面<br>// after<br>// insertAfter<br>// before<br>//insertBefore</p>\n<p>// remove()<br>// detach()：和remove()几乎一样，不同的是detach方法不会删除节点所绑定的事件和附加的数据<br>// empty() 清空内容</p>\n<p>// clone()复制节点，可以有参数true，当有true参数时，将同时复制节点所绑定的事件<br>// replaceWith 将匹配的节点替换成指定的节点<br>// replaceAll() 只是用一个</p>\n<p>// wrap 包裹节点<br>// wrapAll<br>// wrapInner 将匹配的节点内部的节点或者文本内容用指定的节点包裹起来<br>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>$(“p”).wrapInner(“<span></span>“);<br>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;&lt;span&gt;我是内容&lt;/span&gt;&lt;/p&gt;</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>// html()<br>// text()<br>// val()</p>\n<p>// children()<br>// next()<br>// prev()<br>// siblings()<br>// closest() 获取最近的符合匹配的一个父元素<br>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">&lt;div class=&quot;div2&quot;&gt;</span><br><span class=\"line\">&lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>var $div=$(“p”).closest();//返回class为div2的div元素</p>\n<p>// parent()<br>// parents()</p>\n<p>// offset()<br>// position()</p>\n<p>// scrollTop()<br>// scrollLeft()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 事件与动画</span><br><span class=\"line\"></span><br><span class=\"line\">```js</span><br><span class=\"line\">$().ready()</span><br><span class=\"line\">$(&apos;&apos;).bind(type,func)</span><br><span class=\"line\">$(&apos;&apos;).click()</span><br><span class=\"line\">$(&apos;&apos;).mouseover</span><br><span class=\"line\"></span><br><span class=\"line\">// 合成事件</span><br><span class=\"line\">hover(enter,leave)</span><br><span class=\"line\">toggle(fn1,fn2)</span><br><span class=\"line\">       </span><br><span class=\"line\">// 阻止事件</span><br><span class=\"line\">event.stopPropagation();</span><br><span class=\"line\">event.preventDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">// unbind 移除事件</span><br><span class=\"line\">// trigger 触发事件</span><br><span class=\"line\"></span><br><span class=\"line\">// 动画</span><br><span class=\"line\">hide();</span><br><span class=\"line\">show(time);</span><br><span class=\"line\">fadeLn();</span><br><span class=\"line\">fadeOut();</span><br><span class=\"line\">slideUp();</span><br><span class=\"line\">slideDown();</span><br><span class=\"line\">slideToggle();</span><br><span class=\"line\">fadeTo();</span><br><span class=\"line\">fadeToggle();</span><br><span class=\"line\">animate();</span><br><span class=\"line\">delay();</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://www.jianshu.com/p/3e2768c8dad4\" target=\"_blank\" rel=\"noopener\">jQuery简明参考手册——30分钟快速入门jQuery</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基本选择器</span></span><br><span class=\"line\">$(<span class=\"string\">'#id'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'.class'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'element'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'*'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'select1 ,select2'</span>)<span class=\"comment\">//可以使用css选择器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 层次选择器</span></span><br><span class=\"line\">$(<span class=\"string\">'ancestor descendant'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'parent &gt;child'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'prev+next'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'prev~siblings'</span>)<span class=\"comment\">//获取所有同辈元素</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"DOM操作\"><a href=\"#DOM操作\" class=\"headerlink\" title=\"DOM操作\"></a>DOM操作</h1><h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// attr</span></span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).attr(<span class=\"string\">\"background\"</span>)<span class=\"comment\">//获取属性</span></span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).attr(<span class=\"string\">\"background\"</span>,<span class=\"string\">\"white\"</span>)</span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).attr(&#123;<span class=\"string\">\"background\"</span>:<span class=\"string\">\"white\"</span>,<span class=\"string\">\"height\"</span>:<span class=\"string\">\"200px\"</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// css</span></span><br><span class=\"line\">$(<span class=\"string\">\"div\"</span>).css(<span class=\"string\">'background'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).css(<span class=\"string\">\"background\"</span>,<span class=\"string\">\"white\"</span>)</span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).css(&#123;<span class=\"string\">'background'</span>:<span class=\"string\">'blue'</span>,<span class=\"string\">\"height\"</span>:<span class=\"string\">'200px'</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// width height</span></span><br><span class=\"line\">width()</span><br><span class=\"line\">height()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// addClass</span></span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).addClass(<span class=\"string\">'className'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// removeAttr</span></span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).removeAttr(<span class=\"string\">'background'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// removeClass 没参数删除所有</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// hasClass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建节点</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p $(<span class=\"string\">'&lt;p&gt;hello&lt;/p&gt;'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// append() 添加内容</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// appendTo()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// prepend() 向元素内部前面添加内容</span></span><br><span class=\"line\"><span class=\"comment\">// prependTo()</span></span><br><span class=\"line\">​<span class=\"string\">``</span><span class=\"string\">` html</span></span><br><span class=\"line\"><span class=\"string\">&lt;p&gt;hello&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">​</span></span><br></pre></td></tr></table></figure>\n<p>$(‘<i>hi!</i>‘).prependTo(“p”)<br>​<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>hi!<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>// 在相应位置添加元素，是在元素的外面<br>// after<br>// insertAfter<br>// before<br>//insertBefore</p>\n<p>// remove()<br>// detach()：和remove()几乎一样，不同的是detach方法不会删除节点所绑定的事件和附加的数据<br>// empty() 清空内容</p>\n<p>// clone()复制节点，可以有参数true，当有true参数时，将同时复制节点所绑定的事件<br>// replaceWith 将匹配的节点替换成指定的节点<br>// replaceAll() 只是用一个</p>\n<p>// wrap 包裹节点<br>// wrapAll<br>// wrapInner 将匹配的节点内部的节点或者文本内容用指定的节点包裹起来<br>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>$(“p”).wrapInner(“<span></span>“);<br>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;&lt;span&gt;我是内容&lt;/span&gt;&lt;/p&gt;</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>// html()<br>// text()<br>// val()</p>\n<p>// children()<br>// next()<br>// prev()<br>// siblings()<br>// closest() 获取最近的符合匹配的一个父元素<br>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">&lt;div class=&quot;div2&quot;&gt;</span><br><span class=\"line\">&lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>var $div=$(“p”).closest();//返回class为div2的div元素</p>\n<p>// parent()<br>// parents()</p>\n<p>// offset()<br>// position()</p>\n<p>// scrollTop()<br>// scrollLeft()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 事件与动画</span><br><span class=\"line\"></span><br><span class=\"line\">```js</span><br><span class=\"line\">$().ready()</span><br><span class=\"line\">$(&apos;&apos;).bind(type,func)</span><br><span class=\"line\">$(&apos;&apos;).click()</span><br><span class=\"line\">$(&apos;&apos;).mouseover</span><br><span class=\"line\"></span><br><span class=\"line\">// 合成事件</span><br><span class=\"line\">hover(enter,leave)</span><br><span class=\"line\">toggle(fn1,fn2)</span><br><span class=\"line\">       </span><br><span class=\"line\">// 阻止事件</span><br><span class=\"line\">event.stopPropagation();</span><br><span class=\"line\">event.preventDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">// unbind 移除事件</span><br><span class=\"line\">// trigger 触发事件</span><br><span class=\"line\"></span><br><span class=\"line\">// 动画</span><br><span class=\"line\">hide();</span><br><span class=\"line\">show(time);</span><br><span class=\"line\">fadeLn();</span><br><span class=\"line\">fadeOut();</span><br><span class=\"line\">slideUp();</span><br><span class=\"line\">slideDown();</span><br><span class=\"line\">slideToggle();</span><br><span class=\"line\">fadeTo();</span><br><span class=\"line\">fadeToggle();</span><br><span class=\"line\">animate();</span><br><span class=\"line\">delay();</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://www.jianshu.com/p/3e2768c8dad4\" target=\"_blank\" rel=\"noopener\">jQuery简明参考手册——30分钟快速入门jQuery</a></p>\n</blockquote>\n"},{"title":"linux压缩","date":"2019-09-02T14:46:45.000Z","_content":"\n# tar\n\n```bash\n# 打包\ntar -cvf xx.tar dirName\n# 解包\ntar -xvf  xx.tar\n\n# .gz\n# 解压\ngunzip fileName.gz\ngzip -d fileName.gz\n# 压缩\ngzip fileName\n\n# .tar.gz 和.tgz\n# 解压\ntar zxvf fileName.tar.gz\n# 压缩\ntar zcvf filename.tar.gz dirName\n\n# bz2\n# 解压\nbzip2 -d fileName.bz\nbunzip2 fileName.bz\n\n# .tar.bz\n# 解压\ntar jxvf fileName.tar.bz\n# 压缩\ntar jcvf fileName.tar.bz dirName\n\n```\n\n# zip\n\n```bash\n# 安装\nyum install zip unzip\n\n# 解压\nunzip mydata.zip -d mydatabak\n\n# 压缩\nzip -r abc123.zip abc 123.txt\n```\n\n# rar\n\n```bash\n# 安装\nwget http://www.rarlab.com/rar/rarlinux-x64-5.3.0.tar.gz\ntar -zxvf rarlinux-x64-5.3.0.tar.gz // 对应64位下载的\ncd rar\nmake\n\n# 解压\nrar x fileName.rar\n\n# 压缩\nrar fileName.rar dirName\n```\n\n# 7z\n\n```bash\n# 安装\nyum install p7zip p7zip-plugins\n\n# 压缩\n7za a 压缩包.7z 被压缩文件或目录\n\n# 解压\n#将压缩包解压到指定目录，注意：指定目录参数-o后面不要有空格\n7za x 压缩包.7z -o解压目录\n#将压缩包解压到当前目录\n7za x 压缩包.7z\n```\n\n","source":"_posts/linux压缩.md","raw":"---\ntitle: linux压缩\ndate: 2019-09-02 22:46:45\ntags: linux\n---\n\n# tar\n\n```bash\n# 打包\ntar -cvf xx.tar dirName\n# 解包\ntar -xvf  xx.tar\n\n# .gz\n# 解压\ngunzip fileName.gz\ngzip -d fileName.gz\n# 压缩\ngzip fileName\n\n# .tar.gz 和.tgz\n# 解压\ntar zxvf fileName.tar.gz\n# 压缩\ntar zcvf filename.tar.gz dirName\n\n# bz2\n# 解压\nbzip2 -d fileName.bz\nbunzip2 fileName.bz\n\n# .tar.bz\n# 解压\ntar jxvf fileName.tar.bz\n# 压缩\ntar jcvf fileName.tar.bz dirName\n\n```\n\n# zip\n\n```bash\n# 安装\nyum install zip unzip\n\n# 解压\nunzip mydata.zip -d mydatabak\n\n# 压缩\nzip -r abc123.zip abc 123.txt\n```\n\n# rar\n\n```bash\n# 安装\nwget http://www.rarlab.com/rar/rarlinux-x64-5.3.0.tar.gz\ntar -zxvf rarlinux-x64-5.3.0.tar.gz // 对应64位下载的\ncd rar\nmake\n\n# 解压\nrar x fileName.rar\n\n# 压缩\nrar fileName.rar dirName\n```\n\n# 7z\n\n```bash\n# 安装\nyum install p7zip p7zip-plugins\n\n# 压缩\n7za a 压缩包.7z 被压缩文件或目录\n\n# 解压\n#将压缩包解压到指定目录，注意：指定目录参数-o后面不要有空格\n7za x 压缩包.7z -o解压目录\n#将压缩包解压到当前目录\n7za x 压缩包.7z\n```\n\n","slug":"linux压缩","published":1,"updated":"2019-10-14T09:01:07.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a42d000uic1yrp0vwji6","content":"<h1 id=\"tar\"><a href=\"#tar\" class=\"headerlink\" title=\"tar\"></a>tar</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打包</span></span><br><span class=\"line\">tar -cvf xx.tar dirName</span><br><span class=\"line\"><span class=\"comment\"># 解包</span></span><br><span class=\"line\">tar -xvf  xx.tar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># .gz</span></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">gunzip fileName.gz</span><br><span class=\"line\">gzip -d fileName.gz</span><br><span class=\"line\"><span class=\"comment\"># 压缩</span></span><br><span class=\"line\">gzip fileName</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># .tar.gz 和.tgz</span></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar zxvf fileName.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 压缩</span></span><br><span class=\"line\">tar zcvf filename.tar.gz dirName</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># bz2</span></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">bzip2 -d fileName.bz</span><br><span class=\"line\">bunzip2 fileName.bz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># .tar.bz</span></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar jxvf fileName.tar.bz</span><br><span class=\"line\"><span class=\"comment\"># 压缩</span></span><br><span class=\"line\">tar jcvf fileName.tar.bz dirName</span><br></pre></td></tr></table></figure>\n<h1 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip\"></a>zip</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">yum install zip unzip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">unzip mydata.zip -d mydatabak</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 压缩</span></span><br><span class=\"line\">zip -r abc123.zip abc 123.txt</span><br></pre></td></tr></table></figure>\n<h1 id=\"rar\"><a href=\"#rar\" class=\"headerlink\" title=\"rar\"></a>rar</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">wget http://www.rarlab.com/rar/rarlinux-x64-5.3.0.tar.gz</span><br><span class=\"line\">tar -zxvf rarlinux-x64-5.3.0.tar.gz // 对应64位下载的</span><br><span class=\"line\"><span class=\"built_in\">cd</span> rar</span><br><span class=\"line\">make</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">rar x fileName.rar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 压缩</span></span><br><span class=\"line\">rar fileName.rar dirName</span><br></pre></td></tr></table></figure>\n<h1 id=\"7z\"><a href=\"#7z\" class=\"headerlink\" title=\"7z\"></a>7z</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">yum install p7zip p7zip-plugins</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 压缩</span></span><br><span class=\"line\">7za a 压缩包.7z 被压缩文件或目录</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\"><span class=\"comment\">#将压缩包解压到指定目录，注意：指定目录参数-o后面不要有空格</span></span><br><span class=\"line\">7za x 压缩包.7z -o解压目录</span><br><span class=\"line\"><span class=\"comment\">#将压缩包解压到当前目录</span></span><br><span class=\"line\">7za x 压缩包.7z</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"tar\"><a href=\"#tar\" class=\"headerlink\" title=\"tar\"></a>tar</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打包</span></span><br><span class=\"line\">tar -cvf xx.tar dirName</span><br><span class=\"line\"><span class=\"comment\"># 解包</span></span><br><span class=\"line\">tar -xvf  xx.tar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># .gz</span></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">gunzip fileName.gz</span><br><span class=\"line\">gzip -d fileName.gz</span><br><span class=\"line\"><span class=\"comment\"># 压缩</span></span><br><span class=\"line\">gzip fileName</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># .tar.gz 和.tgz</span></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar zxvf fileName.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 压缩</span></span><br><span class=\"line\">tar zcvf filename.tar.gz dirName</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># bz2</span></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">bzip2 -d fileName.bz</span><br><span class=\"line\">bunzip2 fileName.bz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># .tar.bz</span></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar jxvf fileName.tar.bz</span><br><span class=\"line\"><span class=\"comment\"># 压缩</span></span><br><span class=\"line\">tar jcvf fileName.tar.bz dirName</span><br></pre></td></tr></table></figure>\n<h1 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip\"></a>zip</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">yum install zip unzip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">unzip mydata.zip -d mydatabak</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 压缩</span></span><br><span class=\"line\">zip -r abc123.zip abc 123.txt</span><br></pre></td></tr></table></figure>\n<h1 id=\"rar\"><a href=\"#rar\" class=\"headerlink\" title=\"rar\"></a>rar</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">wget http://www.rarlab.com/rar/rarlinux-x64-5.3.0.tar.gz</span><br><span class=\"line\">tar -zxvf rarlinux-x64-5.3.0.tar.gz // 对应64位下载的</span><br><span class=\"line\"><span class=\"built_in\">cd</span> rar</span><br><span class=\"line\">make</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">rar x fileName.rar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 压缩</span></span><br><span class=\"line\">rar fileName.rar dirName</span><br></pre></td></tr></table></figure>\n<h1 id=\"7z\"><a href=\"#7z\" class=\"headerlink\" title=\"7z\"></a>7z</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">yum install p7zip p7zip-plugins</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 压缩</span></span><br><span class=\"line\">7za a 压缩包.7z 被压缩文件或目录</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\"><span class=\"comment\">#将压缩包解压到指定目录，注意：指定目录参数-o后面不要有空格</span></span><br><span class=\"line\">7za x 压缩包.7z -o解压目录</span><br><span class=\"line\"><span class=\"comment\">#将压缩包解压到当前目录</span></span><br><span class=\"line\">7za x 压缩包.7z</span><br></pre></td></tr></table></figure>\n"},{"title":"mybatis-sessions","date":"2019-04-10T02:25:51.000Z","_content":"\n\n\n# SqlSessionFactory\n\n`sqlSessionFactory`是工厂类的接口，默认实现是`DefaultSqlSessionFactory`，通过`sqlSessionFactoryBuilder`创建，我们不具体讨论配置文件的具体解析，主要分析mybatis的运行流程。\n\n`SqlSessionFactory`主要是用来创建`SqlSession`，`SqlSession`是线程不安全的，因此每次操作都要重新创建。\n\n```\n// 通过数据源创建SqlSession，是我们比较常用的一种方式\nprivate SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {\n    Transaction tx = null;\n    try {\n      final Environment environment = configuration.getEnvironment();\n      final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);\n      //通过事务工厂来产生一个事务\n      tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);\n      //生成一个执行器(事务包含在执行器里)\n      final Executor executor = configuration.newExecutor(tx, execType);\n      //然后产生一个DefaultSqlSession\n      return new DefaultSqlSession(configuration, executor, autoCommit);\n    } catch (Exception e) {\n      //如果打开事务出错，则关闭它\n      closeTransaction(tx); // may have fetched a connection so lets call close()\n      throw ExceptionFactory.wrapException(\"Error opening session.  Cause: \" + e, e);\n    } finally {\n      //最后清空错误上下文\n      ErrorContext.instance().reset();\n    }\n  }\nSqlSession\n```\n\n`SqlSession`有两方式调用方法，第一种方式是通过命名空间调用，第二种方式是`JavaBean`调用，也就是通过我们常用的Mapper接口进行调用。现在`Myabtis3`我们基本使用第二种方式。\n\n通过Mapper接口进行调用，核心是 获取Mapper接口，并通过动态代理，进行方法拦截。\n\n`SqlSession`通过`getMapper`获取相应的Mapper接口。`SqlSession`的的数据库操作是调用Executor的相关方法。\n\n在`getMapper`调用的时候，有几个核心的类\n\n1. `MapperProxyFactory`:用于创建`MapperProxyd`的工厂方法\n2. `MapperProxy`:动态代理的`InvocationHandler`的实现，实际中就是执行sql语句\n3. `MapperRegistry`\n4. `MapperMethood`:调用`SqlSession`的方法","source":"_posts/mybatis-sessions.md","raw":"---\ntitle: mybatis-sessions\ndate: 2019-04-10 10:25:51\ntags:\n- mybatis\n- java\n---\n\n\n\n# SqlSessionFactory\n\n`sqlSessionFactory`是工厂类的接口，默认实现是`DefaultSqlSessionFactory`，通过`sqlSessionFactoryBuilder`创建，我们不具体讨论配置文件的具体解析，主要分析mybatis的运行流程。\n\n`SqlSessionFactory`主要是用来创建`SqlSession`，`SqlSession`是线程不安全的，因此每次操作都要重新创建。\n\n```\n// 通过数据源创建SqlSession，是我们比较常用的一种方式\nprivate SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {\n    Transaction tx = null;\n    try {\n      final Environment environment = configuration.getEnvironment();\n      final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);\n      //通过事务工厂来产生一个事务\n      tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);\n      //生成一个执行器(事务包含在执行器里)\n      final Executor executor = configuration.newExecutor(tx, execType);\n      //然后产生一个DefaultSqlSession\n      return new DefaultSqlSession(configuration, executor, autoCommit);\n    } catch (Exception e) {\n      //如果打开事务出错，则关闭它\n      closeTransaction(tx); // may have fetched a connection so lets call close()\n      throw ExceptionFactory.wrapException(\"Error opening session.  Cause: \" + e, e);\n    } finally {\n      //最后清空错误上下文\n      ErrorContext.instance().reset();\n    }\n  }\nSqlSession\n```\n\n`SqlSession`有两方式调用方法，第一种方式是通过命名空间调用，第二种方式是`JavaBean`调用，也就是通过我们常用的Mapper接口进行调用。现在`Myabtis3`我们基本使用第二种方式。\n\n通过Mapper接口进行调用，核心是 获取Mapper接口，并通过动态代理，进行方法拦截。\n\n`SqlSession`通过`getMapper`获取相应的Mapper接口。`SqlSession`的的数据库操作是调用Executor的相关方法。\n\n在`getMapper`调用的时候，有几个核心的类\n\n1. `MapperProxyFactory`:用于创建`MapperProxyd`的工厂方法\n2. `MapperProxy`:动态代理的`InvocationHandler`的实现，实际中就是执行sql语句\n3. `MapperRegistry`\n4. `MapperMethood`:调用`SqlSession`的方法","slug":"mybatis-sessions","published":1,"updated":"2019-10-14T09:01:07.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a42f000xic1y8jfixzvw","content":"<h1 id=\"SqlSessionFactory\"><a href=\"#SqlSessionFactory\" class=\"headerlink\" title=\"SqlSessionFactory\"></a>SqlSessionFactory</h1><p><code>sqlSessionFactory</code>是工厂类的接口，默认实现是<code>DefaultSqlSessionFactory</code>，通过<code>sqlSessionFactoryBuilder</code>创建，我们不具体讨论配置文件的具体解析，主要分析mybatis的运行流程。</p>\n<p><code>SqlSessionFactory</code>主要是用来创建<code>SqlSession</code>，<code>SqlSession</code>是线程不安全的，因此每次操作都要重新创建。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 通过数据源创建SqlSession，是我们比较常用的一种方式</span><br><span class=\"line\">private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) &#123;</span><br><span class=\"line\">    Transaction tx = null;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      final Environment environment = configuration.getEnvironment();</span><br><span class=\"line\">      final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);</span><br><span class=\"line\">      //通过事务工厂来产生一个事务</span><br><span class=\"line\">      tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);</span><br><span class=\"line\">      //生成一个执行器(事务包含在执行器里)</span><br><span class=\"line\">      final Executor executor = configuration.newExecutor(tx, execType);</span><br><span class=\"line\">      //然后产生一个DefaultSqlSession</span><br><span class=\"line\">      return new DefaultSqlSession(configuration, executor, autoCommit);</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">      //如果打开事务出错，则关闭它</span><br><span class=\"line\">      closeTransaction(tx); // may have fetched a connection so lets call close()</span><br><span class=\"line\">      throw ExceptionFactory.wrapException(&quot;Error opening session.  Cause: &quot; + e, e);</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">      //最后清空错误上下文</span><br><span class=\"line\">      ErrorContext.instance().reset();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">SqlSession</span><br></pre></td></tr></table></figure>\n<p><code>SqlSession</code>有两方式调用方法，第一种方式是通过命名空间调用，第二种方式是<code>JavaBean</code>调用，也就是通过我们常用的Mapper接口进行调用。现在<code>Myabtis3</code>我们基本使用第二种方式。</p>\n<p>通过Mapper接口进行调用，核心是 获取Mapper接口，并通过动态代理，进行方法拦截。</p>\n<p><code>SqlSession</code>通过<code>getMapper</code>获取相应的Mapper接口。<code>SqlSession</code>的的数据库操作是调用Executor的相关方法。</p>\n<p>在<code>getMapper</code>调用的时候，有几个核心的类</p>\n<ol>\n<li><code>MapperProxyFactory</code>:用于创建<code>MapperProxyd</code>的工厂方法</li>\n<li><code>MapperProxy</code>:动态代理的<code>InvocationHandler</code>的实现，实际中就是执行sql语句</li>\n<li><code>MapperRegistry</code></li>\n<li><code>MapperMethood</code>:调用<code>SqlSession</code>的方法</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SqlSessionFactory\"><a href=\"#SqlSessionFactory\" class=\"headerlink\" title=\"SqlSessionFactory\"></a>SqlSessionFactory</h1><p><code>sqlSessionFactory</code>是工厂类的接口，默认实现是<code>DefaultSqlSessionFactory</code>，通过<code>sqlSessionFactoryBuilder</code>创建，我们不具体讨论配置文件的具体解析，主要分析mybatis的运行流程。</p>\n<p><code>SqlSessionFactory</code>主要是用来创建<code>SqlSession</code>，<code>SqlSession</code>是线程不安全的，因此每次操作都要重新创建。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 通过数据源创建SqlSession，是我们比较常用的一种方式</span><br><span class=\"line\">private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) &#123;</span><br><span class=\"line\">    Transaction tx = null;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      final Environment environment = configuration.getEnvironment();</span><br><span class=\"line\">      final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);</span><br><span class=\"line\">      //通过事务工厂来产生一个事务</span><br><span class=\"line\">      tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);</span><br><span class=\"line\">      //生成一个执行器(事务包含在执行器里)</span><br><span class=\"line\">      final Executor executor = configuration.newExecutor(tx, execType);</span><br><span class=\"line\">      //然后产生一个DefaultSqlSession</span><br><span class=\"line\">      return new DefaultSqlSession(configuration, executor, autoCommit);</span><br><span class=\"line\">    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">      //如果打开事务出错，则关闭它</span><br><span class=\"line\">      closeTransaction(tx); // may have fetched a connection so lets call close()</span><br><span class=\"line\">      throw ExceptionFactory.wrapException(&quot;Error opening session.  Cause: &quot; + e, e);</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">      //最后清空错误上下文</span><br><span class=\"line\">      ErrorContext.instance().reset();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">SqlSession</span><br></pre></td></tr></table></figure>\n<p><code>SqlSession</code>有两方式调用方法，第一种方式是通过命名空间调用，第二种方式是<code>JavaBean</code>调用，也就是通过我们常用的Mapper接口进行调用。现在<code>Myabtis3</code>我们基本使用第二种方式。</p>\n<p>通过Mapper接口进行调用，核心是 获取Mapper接口，并通过动态代理，进行方法拦截。</p>\n<p><code>SqlSession</code>通过<code>getMapper</code>获取相应的Mapper接口。<code>SqlSession</code>的的数据库操作是调用Executor的相关方法。</p>\n<p>在<code>getMapper</code>调用的时候，有几个核心的类</p>\n<ol>\n<li><code>MapperProxyFactory</code>:用于创建<code>MapperProxyd</code>的工厂方法</li>\n<li><code>MapperProxy</code>:动态代理的<code>InvocationHandler</code>的实现，实际中就是执行sql语句</li>\n<li><code>MapperRegistry</code></li>\n<li><code>MapperMethood</code>:调用<code>SqlSession</code>的方法</li>\n</ol>\n"},{"title":"lodash按需加载","date":"2019-10-18T03:48:59.000Z","_content":"\nlodash提供了很多可用的方法供我们使用，绝对是一个很好用且用起来得心应手的工具库。但是同时，lodash的体积也不小，我们项目中使用的大概522K，可能只是使用了几个方法，但是却把整个lodash库引入了。为了吃几条鱼，就承包了整个鱼塘，代价有点大呀！\n\n对于这个问题，有几种方案可供选择。\n\n**一.引入单个函数**\n\n　lodash整个安装完之后，引用方式： lodash/function 格式，单独引入某个函数，如\n\nlet _trim= require('lodash/trim') 或者 import trim from 'lodash/trim' \n\n　或者 lodash 中的每个函数在 NPM 都有一个单独的发布模块，单独安装并引用部分模块，然后按以下方式引用\n\nlet _trim= require('lodash.trim') 或者 import trim from 'lodash.trim' \n\ntrim(' 123123 ')\n\n**二.借助 lodash-webpack-plugin，babel-plugin-lodash插件优化**\n\n　　使用上述两种方式，在使用较多个lodash中方法的情况下，不太美观，且并不方便。那么我们可以借助于lodash-webpack-plugin，去除未引入的模块，需要和babel-plugin-lodash插件配合使用。类似于webpack的tree-shaking。\n\n　　1）安装插件：npm i -S lodash-webpack-plugin babel-plugin-lodash\n\n　　2）webpack.conf.js中\n\n　　var LodashModuleReplacementPlugin = require('lodash-webpack-plugin')\n\n　　plugins: [ new LodashModuleReplacementPlugin()]\n\n3）.babelrc中配置 \"plugins\": [\"transform-runtime\",\"transform-vue-jsx\",\"lodash\"]\n\n　　或者在webpack.conf.js的rules配置\n\n```\n{\n  test: /\\.(js|jsx)$/,\n  loader: 'babel-loader',\n  exclude: /node_modules/,\n  include: [resolve('src'), resolve('test')]\n  options: {plugins: ['lodash']}\n}\n```\n\n**三.lodash-es结合tree-shaking**\n\nlodash-es 是着具备 ES6 模块化的版本，只需要直接引入就可以。\n\nimport {isEmpty,forIn, cloneDeep} from 'lodash-es'\n\ntree-shaking的作用，即移除上下文中未引用的代码（dead code）\n\n只有当函数给定输入后，产生相应的输出，且不修改任何外部的东西，才可以安全做shaking的操作\n\n如何使用tree-shaking？\n\n1）.确保代码是es6格式,即 export，import\n\n2）.package.json中，设置sideEffects\n\n3）.确保tree-shaking的函数没有副作用\n\n4）.babelrc中设置presets [[\"env\", { \"modules\": false }]] 禁止转换模块，交由webpack进行模块化处理\n\n5）.结合uglifyjs-webpack-plugin","source":"_posts/lodash按需加载.md","raw":"---\ntitle: lodash按需加载\ndate: 2019-10-18 11:48:59\ntags:\n- js\n---\n\nlodash提供了很多可用的方法供我们使用，绝对是一个很好用且用起来得心应手的工具库。但是同时，lodash的体积也不小，我们项目中使用的大概522K，可能只是使用了几个方法，但是却把整个lodash库引入了。为了吃几条鱼，就承包了整个鱼塘，代价有点大呀！\n\n对于这个问题，有几种方案可供选择。\n\n**一.引入单个函数**\n\n　lodash整个安装完之后，引用方式： lodash/function 格式，单独引入某个函数，如\n\nlet _trim= require('lodash/trim') 或者 import trim from 'lodash/trim' \n\n　或者 lodash 中的每个函数在 NPM 都有一个单独的发布模块，单独安装并引用部分模块，然后按以下方式引用\n\nlet _trim= require('lodash.trim') 或者 import trim from 'lodash.trim' \n\ntrim(' 123123 ')\n\n**二.借助 lodash-webpack-plugin，babel-plugin-lodash插件优化**\n\n　　使用上述两种方式，在使用较多个lodash中方法的情况下，不太美观，且并不方便。那么我们可以借助于lodash-webpack-plugin，去除未引入的模块，需要和babel-plugin-lodash插件配合使用。类似于webpack的tree-shaking。\n\n　　1）安装插件：npm i -S lodash-webpack-plugin babel-plugin-lodash\n\n　　2）webpack.conf.js中\n\n　　var LodashModuleReplacementPlugin = require('lodash-webpack-plugin')\n\n　　plugins: [ new LodashModuleReplacementPlugin()]\n\n3）.babelrc中配置 \"plugins\": [\"transform-runtime\",\"transform-vue-jsx\",\"lodash\"]\n\n　　或者在webpack.conf.js的rules配置\n\n```\n{\n  test: /\\.(js|jsx)$/,\n  loader: 'babel-loader',\n  exclude: /node_modules/,\n  include: [resolve('src'), resolve('test')]\n  options: {plugins: ['lodash']}\n}\n```\n\n**三.lodash-es结合tree-shaking**\n\nlodash-es 是着具备 ES6 模块化的版本，只需要直接引入就可以。\n\nimport {isEmpty,forIn, cloneDeep} from 'lodash-es'\n\ntree-shaking的作用，即移除上下文中未引用的代码（dead code）\n\n只有当函数给定输入后，产生相应的输出，且不修改任何外部的东西，才可以安全做shaking的操作\n\n如何使用tree-shaking？\n\n1）.确保代码是es6格式,即 export，import\n\n2）.package.json中，设置sideEffects\n\n3）.确保tree-shaking的函数没有副作用\n\n4）.babelrc中设置presets [[\"env\", { \"modules\": false }]] 禁止转换模块，交由webpack进行模块化处理\n\n5）.结合uglifyjs-webpack-plugin","slug":"lodash按需加载","published":1,"updated":"2019-10-25T02:20:23.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a42g000zic1ybwv20k0r","content":"<p>lodash提供了很多可用的方法供我们使用，绝对是一个很好用且用起来得心应手的工具库。但是同时，lodash的体积也不小，我们项目中使用的大概522K，可能只是使用了几个方法，但是却把整个lodash库引入了。为了吃几条鱼，就承包了整个鱼塘，代价有点大呀！</p>\n<p>对于这个问题，有几种方案可供选择。</p>\n<p><strong>一.引入单个函数</strong></p>\n<p>　lodash整个安装完之后，引用方式： lodash/function 格式，单独引入某个函数，如</p>\n<p>let _trim= require(‘lodash/trim’) 或者 import trim from ‘lodash/trim’ </p>\n<p>　或者 lodash 中的每个函数在 NPM 都有一个单独的发布模块，单独安装并引用部分模块，然后按以下方式引用</p>\n<p>let _trim= require(‘lodash.trim’) 或者 import trim from ‘lodash.trim’ </p>\n<p>trim(‘ 123123 ‘)</p>\n<p><strong>二.借助 lodash-webpack-plugin，babel-plugin-lodash插件优化</strong></p>\n<p>　　使用上述两种方式，在使用较多个lodash中方法的情况下，不太美观，且并不方便。那么我们可以借助于lodash-webpack-plugin，去除未引入的模块，需要和babel-plugin-lodash插件配合使用。类似于webpack的tree-shaking。</p>\n<p>　　1）安装插件：npm i -S lodash-webpack-plugin babel-plugin-lodash</p>\n<p>　　2）webpack.conf.js中</p>\n<p>　　var LodashModuleReplacementPlugin = require(‘lodash-webpack-plugin’)</p>\n<p>　　plugins: [ new LodashModuleReplacementPlugin()]</p>\n<p>3）.babelrc中配置 “plugins”: [“transform-runtime”,”transform-vue-jsx”,”lodash”]</p>\n<p>　　或者在webpack.conf.js的rules配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: /\\.(js|jsx)$/,</span><br><span class=\"line\">  loader: &apos;babel-loader&apos;,</span><br><span class=\"line\">  exclude: /node_modules/,</span><br><span class=\"line\">  include: [resolve(&apos;src&apos;), resolve(&apos;test&apos;)]</span><br><span class=\"line\">  options: &#123;plugins: [&apos;lodash&apos;]&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>三.lodash-es结合tree-shaking</strong></p>\n<p>lodash-es 是着具备 ES6 模块化的版本，只需要直接引入就可以。</p>\n<p>import {isEmpty,forIn, cloneDeep} from ‘lodash-es’</p>\n<p>tree-shaking的作用，即移除上下文中未引用的代码（dead code）</p>\n<p>只有当函数给定输入后，产生相应的输出，且不修改任何外部的东西，才可以安全做shaking的操作</p>\n<p>如何使用tree-shaking？</p>\n<p>1）.确保代码是es6格式,即 export，import</p>\n<p>2）.package.json中，设置sideEffects</p>\n<p>3）.确保tree-shaking的函数没有副作用</p>\n<p>4）.babelrc中设置presets [[“env”, { “modules”: false }]] 禁止转换模块，交由webpack进行模块化处理</p>\n<p>5）.结合uglifyjs-webpack-plugin</p>\n","site":{"data":{}},"excerpt":"","more":"<p>lodash提供了很多可用的方法供我们使用，绝对是一个很好用且用起来得心应手的工具库。但是同时，lodash的体积也不小，我们项目中使用的大概522K，可能只是使用了几个方法，但是却把整个lodash库引入了。为了吃几条鱼，就承包了整个鱼塘，代价有点大呀！</p>\n<p>对于这个问题，有几种方案可供选择。</p>\n<p><strong>一.引入单个函数</strong></p>\n<p>　lodash整个安装完之后，引用方式： lodash/function 格式，单独引入某个函数，如</p>\n<p>let _trim= require(‘lodash/trim’) 或者 import trim from ‘lodash/trim’ </p>\n<p>　或者 lodash 中的每个函数在 NPM 都有一个单独的发布模块，单独安装并引用部分模块，然后按以下方式引用</p>\n<p>let _trim= require(‘lodash.trim’) 或者 import trim from ‘lodash.trim’ </p>\n<p>trim(‘ 123123 ‘)</p>\n<p><strong>二.借助 lodash-webpack-plugin，babel-plugin-lodash插件优化</strong></p>\n<p>　　使用上述两种方式，在使用较多个lodash中方法的情况下，不太美观，且并不方便。那么我们可以借助于lodash-webpack-plugin，去除未引入的模块，需要和babel-plugin-lodash插件配合使用。类似于webpack的tree-shaking。</p>\n<p>　　1）安装插件：npm i -S lodash-webpack-plugin babel-plugin-lodash</p>\n<p>　　2）webpack.conf.js中</p>\n<p>　　var LodashModuleReplacementPlugin = require(‘lodash-webpack-plugin’)</p>\n<p>　　plugins: [ new LodashModuleReplacementPlugin()]</p>\n<p>3）.babelrc中配置 “plugins”: [“transform-runtime”,”transform-vue-jsx”,”lodash”]</p>\n<p>　　或者在webpack.conf.js的rules配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: /\\.(js|jsx)$/,</span><br><span class=\"line\">  loader: &apos;babel-loader&apos;,</span><br><span class=\"line\">  exclude: /node_modules/,</span><br><span class=\"line\">  include: [resolve(&apos;src&apos;), resolve(&apos;test&apos;)]</span><br><span class=\"line\">  options: &#123;plugins: [&apos;lodash&apos;]&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>三.lodash-es结合tree-shaking</strong></p>\n<p>lodash-es 是着具备 ES6 模块化的版本，只需要直接引入就可以。</p>\n<p>import {isEmpty,forIn, cloneDeep} from ‘lodash-es’</p>\n<p>tree-shaking的作用，即移除上下文中未引用的代码（dead code）</p>\n<p>只有当函数给定输入后，产生相应的输出，且不修改任何外部的东西，才可以安全做shaking的操作</p>\n<p>如何使用tree-shaking？</p>\n<p>1）.确保代码是es6格式,即 export，import</p>\n<p>2）.package.json中，设置sideEffects</p>\n<p>3）.确保tree-shaking的函数没有副作用</p>\n<p>4）.babelrc中设置presets [[“env”, { “modules”: false }]] 禁止转换模块，交由webpack进行模块化处理</p>\n<p>5）.结合uglifyjs-webpack-plugin</p>\n"},{"title":"ngrok环境搭建","date":"2019-03-29T01:28:43.000Z","_content":"\n# 下载安装\n\n1. 配置golang环境\n\n   1. 安装go\n\n      ```bash\n      yum install golang\n      ```\n\n   2. 配置`GOPATH`\n\n2. 安装git2\n\n   ```ba&#39;sh\n   sudo yum remove git\n   sudo yum install epel-release\n   sudo yum install https://centos7.iuscommunity.org/ius-release.rpm\n   sudo yum install git2u\n   ```\n\n3. 下载ngrok\n\n   ```bash\n   go get github.com/inconshreveable/ngrok\n   ```\n\n# 生成证书\n\n   1. 使用let’s encrypt证书\n\n      1. 申请证书（具体看申请证书，主要通配符证书和三级域名）\n\n      2. 修改证书\n\n         客户端证书\n\n         ```bash\n         cd ngrok\n         cp /etc/letsencrypt/live/xncoding.com/chain.pem assets/client/tls/ngrokroot.crt\n         ```\n\n         服务端证书\n\n         ```bash\n         cp /etc/letsencrypt/live/xncoding.com/cert.pem assets/server/tls/snakeoil.crt\n         cp /etc/letsencrypt/live/xncoding.com/privkey.pem assets/server/tls/snakeoil.key\n         ```\n\n# 编译\n\n1. 编译服务端\n\n   ```bash\n   make release-server\n   ```\n\n2. 编译客户端\n\n   不同平台的客户端需要分开编译。不同平台使用不同的 GOOS 和 GOARCH，GOOS为go编译出来的操作系统 (windows,linux,darwin)，GOARCH, 对应的构架 (386,amd64,arm)\n\n   ```bash\n   GOOS=linux GOARCH=amd64 make release-client\n   GOOS=windows GOARCH=amd64 make release-client\n   GOOS=linux GOARCH=arm make release-client\n   ```\n\n# 启动服务器\n\n在开启之前，请主要端口是否开放\n\n```bash\n./ngrokd -domain=ngrok.sciento.top -httpAddr=:9580 -httpsAddr=:9443 -tunnelAddr=\":9444\"\n```\n\n# 启动客户端\n\n1. 配置文件,具体看官方文档\n\n   ```\n   server_addr: \"ngrok.sciento.top:9444\"\n   trust_host_root_certs: false\n   tunnels:\n     http:\n       subdomain: \"demo\"\n       proto:\n         http: \"9000\"\n         \n     https:\n       subdomain: \"demo\"\n       proto:\n         https: \"9000\"\n   \n   ```\n\n2. 启动\n\n   ```bash\n   ./ngrok -config=ngrok.cfg start http https\n   ```\n\n# nginx配置\n\n1. 安装nginx\n\n2. 配置\n\n   ```nginx\n   server {\n       listen       80;\n       server_name  demo.ngrok.xncoding.com;\n       return       301 https://demo.ngrok.xncoding.com$request_uri;\n   }\n   \n   server {\n       listen       443 ssl http2;\n       server_name  demo.ngrok.xncoding.com;\n   \n       charset utf-8;\n   \n       ssl_certificate /etc/letsencrypt/live/demo.ngrok.xncoding.com/fullchain.pem;\n       ssl_certificate_key /etc/letsencrypt/live/demo.ngrok.xncoding.com/privkey.pem;\n       ssl_trusted_certificate /etc/letsencrypt/live/demo.ngrok.xncoding.com/chain.pem;\n   \n       access_log /var/log/nginx/ngrok.log main;\n       error_log /var/log/nginx/ngrok_error.log error;\n   \n       location / {\n           proxy_pass http://127.0.0.1:5442;\n           proxy_redirect off;\n           proxy_set_header Host       $http_host:5442;\n           proxy_set_header X-Real-IP  $remote_addr;\n           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n       }\n   }\n   ```\n\n\n# 参考\n\nhttps://www.xncoding.com/2017/12/29/web/ngrok.html\n\nhttps://www.coldawn.com/how-to-issue-acmev2-wildcard-certificates-with-certbot-on-centos-7/\n\nhttps://www.jianshu.com/p/c5c9d071e395\n\nhttp://ngrok.cn/docs.html#tcp","source":"_posts/ngrok环境搭建.md","raw":"---\ntitle: ngrok环境搭建\ndate: 2019-03-29 09:28:43\ntags:\n- linux\n---\n\n# 下载安装\n\n1. 配置golang环境\n\n   1. 安装go\n\n      ```bash\n      yum install golang\n      ```\n\n   2. 配置`GOPATH`\n\n2. 安装git2\n\n   ```ba&#39;sh\n   sudo yum remove git\n   sudo yum install epel-release\n   sudo yum install https://centos7.iuscommunity.org/ius-release.rpm\n   sudo yum install git2u\n   ```\n\n3. 下载ngrok\n\n   ```bash\n   go get github.com/inconshreveable/ngrok\n   ```\n\n# 生成证书\n\n   1. 使用let’s encrypt证书\n\n      1. 申请证书（具体看申请证书，主要通配符证书和三级域名）\n\n      2. 修改证书\n\n         客户端证书\n\n         ```bash\n         cd ngrok\n         cp /etc/letsencrypt/live/xncoding.com/chain.pem assets/client/tls/ngrokroot.crt\n         ```\n\n         服务端证书\n\n         ```bash\n         cp /etc/letsencrypt/live/xncoding.com/cert.pem assets/server/tls/snakeoil.crt\n         cp /etc/letsencrypt/live/xncoding.com/privkey.pem assets/server/tls/snakeoil.key\n         ```\n\n# 编译\n\n1. 编译服务端\n\n   ```bash\n   make release-server\n   ```\n\n2. 编译客户端\n\n   不同平台的客户端需要分开编译。不同平台使用不同的 GOOS 和 GOARCH，GOOS为go编译出来的操作系统 (windows,linux,darwin)，GOARCH, 对应的构架 (386,amd64,arm)\n\n   ```bash\n   GOOS=linux GOARCH=amd64 make release-client\n   GOOS=windows GOARCH=amd64 make release-client\n   GOOS=linux GOARCH=arm make release-client\n   ```\n\n# 启动服务器\n\n在开启之前，请主要端口是否开放\n\n```bash\n./ngrokd -domain=ngrok.sciento.top -httpAddr=:9580 -httpsAddr=:9443 -tunnelAddr=\":9444\"\n```\n\n# 启动客户端\n\n1. 配置文件,具体看官方文档\n\n   ```\n   server_addr: \"ngrok.sciento.top:9444\"\n   trust_host_root_certs: false\n   tunnels:\n     http:\n       subdomain: \"demo\"\n       proto:\n         http: \"9000\"\n         \n     https:\n       subdomain: \"demo\"\n       proto:\n         https: \"9000\"\n   \n   ```\n\n2. 启动\n\n   ```bash\n   ./ngrok -config=ngrok.cfg start http https\n   ```\n\n# nginx配置\n\n1. 安装nginx\n\n2. 配置\n\n   ```nginx\n   server {\n       listen       80;\n       server_name  demo.ngrok.xncoding.com;\n       return       301 https://demo.ngrok.xncoding.com$request_uri;\n   }\n   \n   server {\n       listen       443 ssl http2;\n       server_name  demo.ngrok.xncoding.com;\n   \n       charset utf-8;\n   \n       ssl_certificate /etc/letsencrypt/live/demo.ngrok.xncoding.com/fullchain.pem;\n       ssl_certificate_key /etc/letsencrypt/live/demo.ngrok.xncoding.com/privkey.pem;\n       ssl_trusted_certificate /etc/letsencrypt/live/demo.ngrok.xncoding.com/chain.pem;\n   \n       access_log /var/log/nginx/ngrok.log main;\n       error_log /var/log/nginx/ngrok_error.log error;\n   \n       location / {\n           proxy_pass http://127.0.0.1:5442;\n           proxy_redirect off;\n           proxy_set_header Host       $http_host:5442;\n           proxy_set_header X-Real-IP  $remote_addr;\n           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n       }\n   }\n   ```\n\n\n# 参考\n\nhttps://www.xncoding.com/2017/12/29/web/ngrok.html\n\nhttps://www.coldawn.com/how-to-issue-acmev2-wildcard-certificates-with-certbot-on-centos-7/\n\nhttps://www.jianshu.com/p/c5c9d071e395\n\nhttp://ngrok.cn/docs.html#tcp","slug":"ngrok环境搭建","published":1,"updated":"2019-10-14T09:01:07.824Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a42g0012ic1yctdzs838","content":"<h1 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h1><ol>\n<li><p>配置golang环境</p>\n<ol>\n<li><p>安装go</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install golang</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置<code>GOPATH</code></p>\n</li>\n</ol>\n</li>\n<li><p>安装git2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum remove git</span><br><span class=\"line\">sudo yum install epel-release</span><br><span class=\"line\">sudo yum install https://centos7.iuscommunity.org/ius-release.rpm</span><br><span class=\"line\">sudo yum install git2u</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载ngrok</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/inconshreveable/ngrok</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"生成证书\"><a href=\"#生成证书\" class=\"headerlink\" title=\"生成证书\"></a>生成证书</h1><ol>\n<li><p>使用let’s encrypt证书</p>\n<ol>\n<li><p>申请证书（具体看申请证书，主要通配符证书和三级域名）</p>\n</li>\n<li><p>修改证书</p>\n<p>客户端证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ngrok</span><br><span class=\"line\">cp /etc/letsencrypt/live/xncoding.com/chain.pem assets/client/tls/ngrokroot.crt</span><br></pre></td></tr></table></figure>\n<p>服务端证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /etc/letsencrypt/live/xncoding.com/cert.pem assets/server/tls/snakeoil.crt</span><br><span class=\"line\">cp /etc/letsencrypt/live/xncoding.com/privkey.pem assets/server/tls/snakeoil.key</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><ol>\n<li><p>编译服务端</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make release-server</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编译客户端</p>\n<p>不同平台的客户端需要分开编译。不同平台使用不同的 GOOS 和 GOARCH，GOOS为go编译出来的操作系统 (windows,linux,darwin)，GOARCH, 对应的构架 (386,amd64,arm)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GOOS=linux GOARCH=amd64 make release-client</span><br><span class=\"line\">GOOS=windows GOARCH=amd64 make release-client</span><br><span class=\"line\">GOOS=linux GOARCH=arm make release-client</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"启动服务器\"><a href=\"#启动服务器\" class=\"headerlink\" title=\"启动服务器\"></a>启动服务器</h1><p>在开启之前，请主要端口是否开放</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ngrokd -domain=ngrok.sciento.top -httpAddr=:9580 -httpsAddr=:9443 -tunnelAddr=<span class=\"string\">\":9444\"</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"启动客户端\"><a href=\"#启动客户端\" class=\"headerlink\" title=\"启动客户端\"></a>启动客户端</h1><ol>\n<li><p>配置文件,具体看官方文档</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server_addr: &quot;ngrok.sciento.top:9444&quot;</span><br><span class=\"line\">trust_host_root_certs: false</span><br><span class=\"line\">tunnels:</span><br><span class=\"line\">  http:</span><br><span class=\"line\">    subdomain: &quot;demo&quot;</span><br><span class=\"line\">    proto:</span><br><span class=\"line\">      http: &quot;9000&quot;</span><br><span class=\"line\">      </span><br><span class=\"line\">  https:</span><br><span class=\"line\">    subdomain: &quot;demo&quot;</span><br><span class=\"line\">    proto:</span><br><span class=\"line\">      https: &quot;9000&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ngrok -config=ngrok.cfg start http https</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h1><ol>\n<li><p>安装nginx</p>\n</li>\n<li><p>配置</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  demo.ngrok.xncoding.com;</span><br><span class=\"line\">    <span class=\"attribute\">return</span>       <span class=\"number\">301</span> https://demo.ngrok.xncoding.com<span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">443</span> ssl http2;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  demo.ngrok.xncoding.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">charset</span> utf-<span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/letsencrypt/live/demo.ngrok.xncoding.com/fullchain.pem;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/letsencrypt/live/demo.ngrok.xncoding.com/privkey.pem;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_trusted_certificate</span> /etc/letsencrypt/live/demo.ngrok.xncoding.com/chain.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/ngrok.log main;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/ngrok_error.log <span class=\"literal\">error</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://127.0.0.1:5442;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_redirect</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Host       <span class=\"variable\">$http_host</span>:<span class=\"number\">5442</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Real-IP  <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.xncoding.com/2017/12/29/web/ngrok.html\" target=\"_blank\" rel=\"noopener\">https://www.xncoding.com/2017/12/29/web/ngrok.html</a></p>\n<p><a href=\"https://www.coldawn.com/how-to-issue-acmev2-wildcard-certificates-with-certbot-on-centos-7/\" target=\"_blank\" rel=\"noopener\">https://www.coldawn.com/how-to-issue-acmev2-wildcard-certificates-with-certbot-on-centos-7/</a></p>\n<p><a href=\"https://www.jianshu.com/p/c5c9d071e395\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/c5c9d071e395</a></p>\n<p><a href=\"http://ngrok.cn/docs.html#tcp\" target=\"_blank\" rel=\"noopener\">http://ngrok.cn/docs.html#tcp</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h1><ol>\n<li><p>配置golang环境</p>\n<ol>\n<li><p>安装go</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install golang</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置<code>GOPATH</code></p>\n</li>\n</ol>\n</li>\n<li><p>安装git2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum remove git</span><br><span class=\"line\">sudo yum install epel-release</span><br><span class=\"line\">sudo yum install https://centos7.iuscommunity.org/ius-release.rpm</span><br><span class=\"line\">sudo yum install git2u</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载ngrok</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/inconshreveable/ngrok</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"生成证书\"><a href=\"#生成证书\" class=\"headerlink\" title=\"生成证书\"></a>生成证书</h1><ol>\n<li><p>使用let’s encrypt证书</p>\n<ol>\n<li><p>申请证书（具体看申请证书，主要通配符证书和三级域名）</p>\n</li>\n<li><p>修改证书</p>\n<p>客户端证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ngrok</span><br><span class=\"line\">cp /etc/letsencrypt/live/xncoding.com/chain.pem assets/client/tls/ngrokroot.crt</span><br></pre></td></tr></table></figure>\n<p>服务端证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /etc/letsencrypt/live/xncoding.com/cert.pem assets/server/tls/snakeoil.crt</span><br><span class=\"line\">cp /etc/letsencrypt/live/xncoding.com/privkey.pem assets/server/tls/snakeoil.key</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><ol>\n<li><p>编译服务端</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make release-server</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编译客户端</p>\n<p>不同平台的客户端需要分开编译。不同平台使用不同的 GOOS 和 GOARCH，GOOS为go编译出来的操作系统 (windows,linux,darwin)，GOARCH, 对应的构架 (386,amd64,arm)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GOOS=linux GOARCH=amd64 make release-client</span><br><span class=\"line\">GOOS=windows GOARCH=amd64 make release-client</span><br><span class=\"line\">GOOS=linux GOARCH=arm make release-client</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"启动服务器\"><a href=\"#启动服务器\" class=\"headerlink\" title=\"启动服务器\"></a>启动服务器</h1><p>在开启之前，请主要端口是否开放</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ngrokd -domain=ngrok.sciento.top -httpAddr=:9580 -httpsAddr=:9443 -tunnelAddr=<span class=\"string\">\":9444\"</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"启动客户端\"><a href=\"#启动客户端\" class=\"headerlink\" title=\"启动客户端\"></a>启动客户端</h1><ol>\n<li><p>配置文件,具体看官方文档</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server_addr: &quot;ngrok.sciento.top:9444&quot;</span><br><span class=\"line\">trust_host_root_certs: false</span><br><span class=\"line\">tunnels:</span><br><span class=\"line\">  http:</span><br><span class=\"line\">    subdomain: &quot;demo&quot;</span><br><span class=\"line\">    proto:</span><br><span class=\"line\">      http: &quot;9000&quot;</span><br><span class=\"line\">      </span><br><span class=\"line\">  https:</span><br><span class=\"line\">    subdomain: &quot;demo&quot;</span><br><span class=\"line\">    proto:</span><br><span class=\"line\">      https: &quot;9000&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ngrok -config=ngrok.cfg start http https</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h1><ol>\n<li><p>安装nginx</p>\n</li>\n<li><p>配置</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  demo.ngrok.xncoding.com;</span><br><span class=\"line\">    <span class=\"attribute\">return</span>       <span class=\"number\">301</span> https://demo.ngrok.xncoding.com<span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">443</span> ssl http2;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  demo.ngrok.xncoding.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">charset</span> utf-<span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/letsencrypt/live/demo.ngrok.xncoding.com/fullchain.pem;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/letsencrypt/live/demo.ngrok.xncoding.com/privkey.pem;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_trusted_certificate</span> /etc/letsencrypt/live/demo.ngrok.xncoding.com/chain.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/ngrok.log main;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/ngrok_error.log <span class=\"literal\">error</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://127.0.0.1:5442;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_redirect</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Host       <span class=\"variable\">$http_host</span>:<span class=\"number\">5442</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Real-IP  <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.xncoding.com/2017/12/29/web/ngrok.html\" target=\"_blank\" rel=\"noopener\">https://www.xncoding.com/2017/12/29/web/ngrok.html</a></p>\n<p><a href=\"https://www.coldawn.com/how-to-issue-acmev2-wildcard-certificates-with-certbot-on-centos-7/\" target=\"_blank\" rel=\"noopener\">https://www.coldawn.com/how-to-issue-acmev2-wildcard-certificates-with-certbot-on-centos-7/</a></p>\n<p><a href=\"https://www.jianshu.com/p/c5c9d071e395\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/c5c9d071e395</a></p>\n<p><a href=\"http://ngrok.cn/docs.html#tcp\" target=\"_blank\" rel=\"noopener\">http://ngrok.cn/docs.html#tcp</a></p>\n"},{"title":"makefile编写","date":"2019-04-10T02:27:53.000Z","_content":"\n# 例子\n\n```\n.PHONY: build clean test package package-deb ui api statics requirements ui-requirements serve update-vendor internal/statics internal/migrations static/swagger/api.swagger.json\nPKGS := $(shell go list ./... | grep -v /vendor |grep -v lora-app-server/api | grep -v /migrations | grep -v /static | grep -v /ui)\nVERSION := $(shell git describe --always |sed -e \"s/^v//\")\n\nbuild: ui/build internal/statics internal/migrations\n\tmkdir -p build\n\tgo build $(GO_EXTRA_BUILD_ARGS) -ldflags \"-s -w -X main.version=$(VERSION)\" -o build/lora-app-server cmd/lora-app-server/main.go\n\nclean:\n\t@echo \"Cleaning up workspace\"\n\t@rm -rf build dist internal/migrations internal/static ui/build static/static\n\t@rm -f static/index.html static/icon.png static/manifest.json static/asset-manifest.json static/service-worker.js\n\t@rm -rf static/logo\n\t@rm -rf docs/public\n\t@rm -rf dist\n\ntest: internal/statics internal/migrations\n\t@echo \"Running tests\"\n\t@for pkg in $(PKGS) ; do \\\n\t\tgolint $$pkg ; \\\n\tdone\n\t@go vet $(PKGS)\n\t@go test -p 1 -v $(PKGS)\n\ndocumentation:\n\t@echo \"Building documentation\"\n\t@mkdir -p dist/docs\n\t@cd docs && hugo\n\t@cd docs/public/ && tar -pczf ../../dist/lora-app-server-documentation.tar.gz .\n\ndist: ui/build internal/statics internal/migrations\n\t@goreleaser\n\nbuild-snapshot: ui/build internal/statics internal/migrations\n\t@goreleaser --snapshot\n\npackage-deb: package\n\t@echo \"Building deb package\"\n\t@cd packaging && TARGET=deb ./package.sh\n\nui/build:\n\t@echo \"Building ui\"\n\t@cd ui && npm run build\n\t@mv ui/build/* static\n\napi:\n\t@echo \"Generating API code from .proto files\"\n\t@go generate api/api.go\n\ninternal/statics internal/migrations: static/swagger/api.swagger.json\n\t@echo \"Generating static files\"\n\t@go generate cmd/lora-app-server/main.go\n\n\nstatic/swagger/api.swagger.json:\n\t@echo \"Generating combined Swagger JSON\"\n\t@GOOS=\"\" GOARCH=\"\" go run api/swagger/main.go api/swagger > static/swagger/api.swagger.json\n\t@cp api/swagger/*.json static/swagger\n\n\n# shortcuts for development\n\nrequirements:\n\techo \"Installing development tools\"\n\tgo get -u github.com/golang/lint/golint\n\tgo get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway\n\tgo get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger\n\tgo get -u github.com/golang/protobuf/protoc-gen-go\n\tgo get -u github.com/elazarl/go-bindata-assetfs/...\n\tgo get -u github.com/jteeuwen/go-bindata/...\n\tgo get -u github.com/kisielk/errcheck\n\tgo get -u github.com/smartystreets/goconvey\n\tgo get -u golang.org/x/tools/cmd/stringer\n\tgo get -u github.com/golang/dep/cmd/dep\n\tgo get -u github.com/goreleaser/goreleaser\n\tdep ensure -v\n\nui-requirements:\n\t@echo \"Installing UI requirements\"\n\t@cd ui && npm install\n\nserve: build\n\t@echo \"Starting Lora App Server\"\n\t./build/lora-app-server\n\nupdate-vendor:\n\t@echo \"Updating vendored packages\"\n\t@govendor update +external\n\nrun-compose-test:\n\tdocker-compose run --rm appserver make test\n```\n\n# 文件格式\n\n```\n<target> : <prerequisites> \n[tab]  <commands>\n```\n\n- target：执行的命令或者文件名。如果只是执行的命令这是`伪指令`，在大部分时候使用`.PHONY`声明伪指令，这样不仅仅提供效率，同时也避免和文件名冲突。\n- prerequisites：前置条件。\n- commands：需要执行的命令，\n  - 前面需要添加`[tab]`，如果想要换成其他的，使用`.RECIPEPREFIX = ？`换成你喜欢的。\n  - 执行命令的时候会打印出相关的命令内容，这个叫做`回显`，如果不想显示出来可以在命令前面添加`@`。\n  - 命令执行的时候，每行命令在不同一个shell中执行，如果想在同一个shell中执行，有下面几个办法。\n  - 将命令写在同一行\n  - 在命令后面添加`\\`，实现命令多行\n  - 使用`.ONESHELL:`\n\n# 内置变量\n\nmakefile可以通过`=、:=、?=、+=`给变量赋值，同时Make命令提供一系列内置变量，比如，\\((CC)指向当前使用的编译器，\\)(MAKE) 指向当前使用的Make工具。这主要是为了跨平台的兼容性，详细的内置变量清单见[手册](https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html)。\n\n# 参考\n\nhttps://blog.csdn.net/u010230971/article/details/80335613\n\nhttps://www.cnblogs.com/wang_yb/p/3990952.html\n\nhttp://www.ruanyifeng.com/blog/2015/02/make.html\n\n","source":"_posts/makefile编写.md","raw":"---\ntitle: makefile编写\ndate: 2019-04-10 10:27:53\ntags:\n- go\n---\n\n# 例子\n\n```\n.PHONY: build clean test package package-deb ui api statics requirements ui-requirements serve update-vendor internal/statics internal/migrations static/swagger/api.swagger.json\nPKGS := $(shell go list ./... | grep -v /vendor |grep -v lora-app-server/api | grep -v /migrations | grep -v /static | grep -v /ui)\nVERSION := $(shell git describe --always |sed -e \"s/^v//\")\n\nbuild: ui/build internal/statics internal/migrations\n\tmkdir -p build\n\tgo build $(GO_EXTRA_BUILD_ARGS) -ldflags \"-s -w -X main.version=$(VERSION)\" -o build/lora-app-server cmd/lora-app-server/main.go\n\nclean:\n\t@echo \"Cleaning up workspace\"\n\t@rm -rf build dist internal/migrations internal/static ui/build static/static\n\t@rm -f static/index.html static/icon.png static/manifest.json static/asset-manifest.json static/service-worker.js\n\t@rm -rf static/logo\n\t@rm -rf docs/public\n\t@rm -rf dist\n\ntest: internal/statics internal/migrations\n\t@echo \"Running tests\"\n\t@for pkg in $(PKGS) ; do \\\n\t\tgolint $$pkg ; \\\n\tdone\n\t@go vet $(PKGS)\n\t@go test -p 1 -v $(PKGS)\n\ndocumentation:\n\t@echo \"Building documentation\"\n\t@mkdir -p dist/docs\n\t@cd docs && hugo\n\t@cd docs/public/ && tar -pczf ../../dist/lora-app-server-documentation.tar.gz .\n\ndist: ui/build internal/statics internal/migrations\n\t@goreleaser\n\nbuild-snapshot: ui/build internal/statics internal/migrations\n\t@goreleaser --snapshot\n\npackage-deb: package\n\t@echo \"Building deb package\"\n\t@cd packaging && TARGET=deb ./package.sh\n\nui/build:\n\t@echo \"Building ui\"\n\t@cd ui && npm run build\n\t@mv ui/build/* static\n\napi:\n\t@echo \"Generating API code from .proto files\"\n\t@go generate api/api.go\n\ninternal/statics internal/migrations: static/swagger/api.swagger.json\n\t@echo \"Generating static files\"\n\t@go generate cmd/lora-app-server/main.go\n\n\nstatic/swagger/api.swagger.json:\n\t@echo \"Generating combined Swagger JSON\"\n\t@GOOS=\"\" GOARCH=\"\" go run api/swagger/main.go api/swagger > static/swagger/api.swagger.json\n\t@cp api/swagger/*.json static/swagger\n\n\n# shortcuts for development\n\nrequirements:\n\techo \"Installing development tools\"\n\tgo get -u github.com/golang/lint/golint\n\tgo get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway\n\tgo get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger\n\tgo get -u github.com/golang/protobuf/protoc-gen-go\n\tgo get -u github.com/elazarl/go-bindata-assetfs/...\n\tgo get -u github.com/jteeuwen/go-bindata/...\n\tgo get -u github.com/kisielk/errcheck\n\tgo get -u github.com/smartystreets/goconvey\n\tgo get -u golang.org/x/tools/cmd/stringer\n\tgo get -u github.com/golang/dep/cmd/dep\n\tgo get -u github.com/goreleaser/goreleaser\n\tdep ensure -v\n\nui-requirements:\n\t@echo \"Installing UI requirements\"\n\t@cd ui && npm install\n\nserve: build\n\t@echo \"Starting Lora App Server\"\n\t./build/lora-app-server\n\nupdate-vendor:\n\t@echo \"Updating vendored packages\"\n\t@govendor update +external\n\nrun-compose-test:\n\tdocker-compose run --rm appserver make test\n```\n\n# 文件格式\n\n```\n<target> : <prerequisites> \n[tab]  <commands>\n```\n\n- target：执行的命令或者文件名。如果只是执行的命令这是`伪指令`，在大部分时候使用`.PHONY`声明伪指令，这样不仅仅提供效率，同时也避免和文件名冲突。\n- prerequisites：前置条件。\n- commands：需要执行的命令，\n  - 前面需要添加`[tab]`，如果想要换成其他的，使用`.RECIPEPREFIX = ？`换成你喜欢的。\n  - 执行命令的时候会打印出相关的命令内容，这个叫做`回显`，如果不想显示出来可以在命令前面添加`@`。\n  - 命令执行的时候，每行命令在不同一个shell中执行，如果想在同一个shell中执行，有下面几个办法。\n  - 将命令写在同一行\n  - 在命令后面添加`\\`，实现命令多行\n  - 使用`.ONESHELL:`\n\n# 内置变量\n\nmakefile可以通过`=、:=、?=、+=`给变量赋值，同时Make命令提供一系列内置变量，比如，\\((CC)指向当前使用的编译器，\\)(MAKE) 指向当前使用的Make工具。这主要是为了跨平台的兼容性，详细的内置变量清单见[手册](https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html)。\n\n# 参考\n\nhttps://blog.csdn.net/u010230971/article/details/80335613\n\nhttps://www.cnblogs.com/wang_yb/p/3990952.html\n\nhttp://www.ruanyifeng.com/blog/2015/02/make.html\n\n","slug":"makefile编写","published":1,"updated":"2019-10-14T09:01:07.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a42h0014ic1y65iagn8f","content":"<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.PHONY: build clean test package package-deb ui api statics requirements ui-requirements serve update-vendor internal/statics internal/migrations static/swagger/api.swagger.json</span><br><span class=\"line\">PKGS := $(shell go list ./... | grep -v /vendor |grep -v lora-app-server/api | grep -v /migrations | grep -v /static | grep -v /ui)</span><br><span class=\"line\">VERSION := $(shell git describe --always |sed -e &quot;s/^v//&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">build: ui/build internal/statics internal/migrations</span><br><span class=\"line\">\tmkdir -p build</span><br><span class=\"line\">\tgo build $(GO_EXTRA_BUILD_ARGS) -ldflags &quot;-s -w -X main.version=$(VERSION)&quot; -o build/lora-app-server cmd/lora-app-server/main.go</span><br><span class=\"line\"></span><br><span class=\"line\">clean:</span><br><span class=\"line\">\t@echo &quot;Cleaning up workspace&quot;</span><br><span class=\"line\">\t@rm -rf build dist internal/migrations internal/static ui/build static/static</span><br><span class=\"line\">\t@rm -f static/index.html static/icon.png static/manifest.json static/asset-manifest.json static/service-worker.js</span><br><span class=\"line\">\t@rm -rf static/logo</span><br><span class=\"line\">\t@rm -rf docs/public</span><br><span class=\"line\">\t@rm -rf dist</span><br><span class=\"line\"></span><br><span class=\"line\">test: internal/statics internal/migrations</span><br><span class=\"line\">\t@echo &quot;Running tests&quot;</span><br><span class=\"line\">\t@for pkg in $(PKGS) ; do \\</span><br><span class=\"line\">\t\tgolint $$pkg ; \\</span><br><span class=\"line\">\tdone</span><br><span class=\"line\">\t@go vet $(PKGS)</span><br><span class=\"line\">\t@go test -p 1 -v $(PKGS)</span><br><span class=\"line\"></span><br><span class=\"line\">documentation:</span><br><span class=\"line\">\t@echo &quot;Building documentation&quot;</span><br><span class=\"line\">\t@mkdir -p dist/docs</span><br><span class=\"line\">\t@cd docs &amp;&amp; hugo</span><br><span class=\"line\">\t@cd docs/public/ &amp;&amp; tar -pczf ../../dist/lora-app-server-documentation.tar.gz .</span><br><span class=\"line\"></span><br><span class=\"line\">dist: ui/build internal/statics internal/migrations</span><br><span class=\"line\">\t@goreleaser</span><br><span class=\"line\"></span><br><span class=\"line\">build-snapshot: ui/build internal/statics internal/migrations</span><br><span class=\"line\">\t@goreleaser --snapshot</span><br><span class=\"line\"></span><br><span class=\"line\">package-deb: package</span><br><span class=\"line\">\t@echo &quot;Building deb package&quot;</span><br><span class=\"line\">\t@cd packaging &amp;&amp; TARGET=deb ./package.sh</span><br><span class=\"line\"></span><br><span class=\"line\">ui/build:</span><br><span class=\"line\">\t@echo &quot;Building ui&quot;</span><br><span class=\"line\">\t@cd ui &amp;&amp; npm run build</span><br><span class=\"line\">\t@mv ui/build/* static</span><br><span class=\"line\"></span><br><span class=\"line\">api:</span><br><span class=\"line\">\t@echo &quot;Generating API code from .proto files&quot;</span><br><span class=\"line\">\t@go generate api/api.go</span><br><span class=\"line\"></span><br><span class=\"line\">internal/statics internal/migrations: static/swagger/api.swagger.json</span><br><span class=\"line\">\t@echo &quot;Generating static files&quot;</span><br><span class=\"line\">\t@go generate cmd/lora-app-server/main.go</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">static/swagger/api.swagger.json:</span><br><span class=\"line\">\t@echo &quot;Generating combined Swagger JSON&quot;</span><br><span class=\"line\">\t@GOOS=&quot;&quot; GOARCH=&quot;&quot; go run api/swagger/main.go api/swagger &gt; static/swagger/api.swagger.json</span><br><span class=\"line\">\t@cp api/swagger/*.json static/swagger</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># shortcuts for development</span><br><span class=\"line\"></span><br><span class=\"line\">requirements:</span><br><span class=\"line\">\techo &quot;Installing development tools&quot;</span><br><span class=\"line\">\tgo get -u github.com/golang/lint/golint</span><br><span class=\"line\">\tgo get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway</span><br><span class=\"line\">\tgo get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger</span><br><span class=\"line\">\tgo get -u github.com/golang/protobuf/protoc-gen-go</span><br><span class=\"line\">\tgo get -u github.com/elazarl/go-bindata-assetfs/...</span><br><span class=\"line\">\tgo get -u github.com/jteeuwen/go-bindata/...</span><br><span class=\"line\">\tgo get -u github.com/kisielk/errcheck</span><br><span class=\"line\">\tgo get -u github.com/smartystreets/goconvey</span><br><span class=\"line\">\tgo get -u golang.org/x/tools/cmd/stringer</span><br><span class=\"line\">\tgo get -u github.com/golang/dep/cmd/dep</span><br><span class=\"line\">\tgo get -u github.com/goreleaser/goreleaser</span><br><span class=\"line\">\tdep ensure -v</span><br><span class=\"line\"></span><br><span class=\"line\">ui-requirements:</span><br><span class=\"line\">\t@echo &quot;Installing UI requirements&quot;</span><br><span class=\"line\">\t@cd ui &amp;&amp; npm install</span><br><span class=\"line\"></span><br><span class=\"line\">serve: build</span><br><span class=\"line\">\t@echo &quot;Starting Lora App Server&quot;</span><br><span class=\"line\">\t./build/lora-app-server</span><br><span class=\"line\"></span><br><span class=\"line\">update-vendor:</span><br><span class=\"line\">\t@echo &quot;Updating vendored packages&quot;</span><br><span class=\"line\">\t@govendor update +external</span><br><span class=\"line\"></span><br><span class=\"line\">run-compose-test:</span><br><span class=\"line\">\tdocker-compose run --rm appserver make test</span><br></pre></td></tr></table></figure>\n<h1 id=\"文件格式\"><a href=\"#文件格式\" class=\"headerlink\" title=\"文件格式\"></a>文件格式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;target&gt; : &lt;prerequisites&gt; </span><br><span class=\"line\">[tab]  &lt;commands&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>target：执行的命令或者文件名。如果只是执行的命令这是<code>伪指令</code>，在大部分时候使用<code>.PHONY</code>声明伪指令，这样不仅仅提供效率，同时也避免和文件名冲突。</li>\n<li>prerequisites：前置条件。</li>\n<li>commands：需要执行的命令，<ul>\n<li>前面需要添加<code>[tab]</code>，如果想要换成其他的，使用<code>.RECIPEPREFIX = ？</code>换成你喜欢的。</li>\n<li>执行命令的时候会打印出相关的命令内容，这个叫做<code>回显</code>，如果不想显示出来可以在命令前面添加<code>@</code>。</li>\n<li>命令执行的时候，每行命令在不同一个shell中执行，如果想在同一个shell中执行，有下面几个办法。</li>\n<li>将命令写在同一行</li>\n<li>在命令后面添加<code>\\</code>，实现命令多行</li>\n<li>使用<code>.ONESHELL:</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"内置变量\"><a href=\"#内置变量\" class=\"headerlink\" title=\"内置变量\"></a>内置变量</h1><p>makefile可以通过<code>=、:=、?=、+=</code>给变量赋值，同时Make命令提供一系列内置变量，比如，((CC)指向当前使用的编译器，)(MAKE) 指向当前使用的Make工具。这主要是为了跨平台的兼容性，详细的内置变量清单见<a href=\"https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html\" target=\"_blank\" rel=\"noopener\">手册</a>。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/u010230971/article/details/80335613\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010230971/article/details/80335613</a></p>\n<p><a href=\"https://www.cnblogs.com/wang_yb/p/3990952.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/wang_yb/p/3990952.html</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2015/02/make.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/02/make.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.PHONY: build clean test package package-deb ui api statics requirements ui-requirements serve update-vendor internal/statics internal/migrations static/swagger/api.swagger.json</span><br><span class=\"line\">PKGS := $(shell go list ./... | grep -v /vendor |grep -v lora-app-server/api | grep -v /migrations | grep -v /static | grep -v /ui)</span><br><span class=\"line\">VERSION := $(shell git describe --always |sed -e &quot;s/^v//&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">build: ui/build internal/statics internal/migrations</span><br><span class=\"line\">\tmkdir -p build</span><br><span class=\"line\">\tgo build $(GO_EXTRA_BUILD_ARGS) -ldflags &quot;-s -w -X main.version=$(VERSION)&quot; -o build/lora-app-server cmd/lora-app-server/main.go</span><br><span class=\"line\"></span><br><span class=\"line\">clean:</span><br><span class=\"line\">\t@echo &quot;Cleaning up workspace&quot;</span><br><span class=\"line\">\t@rm -rf build dist internal/migrations internal/static ui/build static/static</span><br><span class=\"line\">\t@rm -f static/index.html static/icon.png static/manifest.json static/asset-manifest.json static/service-worker.js</span><br><span class=\"line\">\t@rm -rf static/logo</span><br><span class=\"line\">\t@rm -rf docs/public</span><br><span class=\"line\">\t@rm -rf dist</span><br><span class=\"line\"></span><br><span class=\"line\">test: internal/statics internal/migrations</span><br><span class=\"line\">\t@echo &quot;Running tests&quot;</span><br><span class=\"line\">\t@for pkg in $(PKGS) ; do \\</span><br><span class=\"line\">\t\tgolint $$pkg ; \\</span><br><span class=\"line\">\tdone</span><br><span class=\"line\">\t@go vet $(PKGS)</span><br><span class=\"line\">\t@go test -p 1 -v $(PKGS)</span><br><span class=\"line\"></span><br><span class=\"line\">documentation:</span><br><span class=\"line\">\t@echo &quot;Building documentation&quot;</span><br><span class=\"line\">\t@mkdir -p dist/docs</span><br><span class=\"line\">\t@cd docs &amp;&amp; hugo</span><br><span class=\"line\">\t@cd docs/public/ &amp;&amp; tar -pczf ../../dist/lora-app-server-documentation.tar.gz .</span><br><span class=\"line\"></span><br><span class=\"line\">dist: ui/build internal/statics internal/migrations</span><br><span class=\"line\">\t@goreleaser</span><br><span class=\"line\"></span><br><span class=\"line\">build-snapshot: ui/build internal/statics internal/migrations</span><br><span class=\"line\">\t@goreleaser --snapshot</span><br><span class=\"line\"></span><br><span class=\"line\">package-deb: package</span><br><span class=\"line\">\t@echo &quot;Building deb package&quot;</span><br><span class=\"line\">\t@cd packaging &amp;&amp; TARGET=deb ./package.sh</span><br><span class=\"line\"></span><br><span class=\"line\">ui/build:</span><br><span class=\"line\">\t@echo &quot;Building ui&quot;</span><br><span class=\"line\">\t@cd ui &amp;&amp; npm run build</span><br><span class=\"line\">\t@mv ui/build/* static</span><br><span class=\"line\"></span><br><span class=\"line\">api:</span><br><span class=\"line\">\t@echo &quot;Generating API code from .proto files&quot;</span><br><span class=\"line\">\t@go generate api/api.go</span><br><span class=\"line\"></span><br><span class=\"line\">internal/statics internal/migrations: static/swagger/api.swagger.json</span><br><span class=\"line\">\t@echo &quot;Generating static files&quot;</span><br><span class=\"line\">\t@go generate cmd/lora-app-server/main.go</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">static/swagger/api.swagger.json:</span><br><span class=\"line\">\t@echo &quot;Generating combined Swagger JSON&quot;</span><br><span class=\"line\">\t@GOOS=&quot;&quot; GOARCH=&quot;&quot; go run api/swagger/main.go api/swagger &gt; static/swagger/api.swagger.json</span><br><span class=\"line\">\t@cp api/swagger/*.json static/swagger</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># shortcuts for development</span><br><span class=\"line\"></span><br><span class=\"line\">requirements:</span><br><span class=\"line\">\techo &quot;Installing development tools&quot;</span><br><span class=\"line\">\tgo get -u github.com/golang/lint/golint</span><br><span class=\"line\">\tgo get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway</span><br><span class=\"line\">\tgo get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger</span><br><span class=\"line\">\tgo get -u github.com/golang/protobuf/protoc-gen-go</span><br><span class=\"line\">\tgo get -u github.com/elazarl/go-bindata-assetfs/...</span><br><span class=\"line\">\tgo get -u github.com/jteeuwen/go-bindata/...</span><br><span class=\"line\">\tgo get -u github.com/kisielk/errcheck</span><br><span class=\"line\">\tgo get -u github.com/smartystreets/goconvey</span><br><span class=\"line\">\tgo get -u golang.org/x/tools/cmd/stringer</span><br><span class=\"line\">\tgo get -u github.com/golang/dep/cmd/dep</span><br><span class=\"line\">\tgo get -u github.com/goreleaser/goreleaser</span><br><span class=\"line\">\tdep ensure -v</span><br><span class=\"line\"></span><br><span class=\"line\">ui-requirements:</span><br><span class=\"line\">\t@echo &quot;Installing UI requirements&quot;</span><br><span class=\"line\">\t@cd ui &amp;&amp; npm install</span><br><span class=\"line\"></span><br><span class=\"line\">serve: build</span><br><span class=\"line\">\t@echo &quot;Starting Lora App Server&quot;</span><br><span class=\"line\">\t./build/lora-app-server</span><br><span class=\"line\"></span><br><span class=\"line\">update-vendor:</span><br><span class=\"line\">\t@echo &quot;Updating vendored packages&quot;</span><br><span class=\"line\">\t@govendor update +external</span><br><span class=\"line\"></span><br><span class=\"line\">run-compose-test:</span><br><span class=\"line\">\tdocker-compose run --rm appserver make test</span><br></pre></td></tr></table></figure>\n<h1 id=\"文件格式\"><a href=\"#文件格式\" class=\"headerlink\" title=\"文件格式\"></a>文件格式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;target&gt; : &lt;prerequisites&gt; </span><br><span class=\"line\">[tab]  &lt;commands&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>target：执行的命令或者文件名。如果只是执行的命令这是<code>伪指令</code>，在大部分时候使用<code>.PHONY</code>声明伪指令，这样不仅仅提供效率，同时也避免和文件名冲突。</li>\n<li>prerequisites：前置条件。</li>\n<li>commands：需要执行的命令，<ul>\n<li>前面需要添加<code>[tab]</code>，如果想要换成其他的，使用<code>.RECIPEPREFIX = ？</code>换成你喜欢的。</li>\n<li>执行命令的时候会打印出相关的命令内容，这个叫做<code>回显</code>，如果不想显示出来可以在命令前面添加<code>@</code>。</li>\n<li>命令执行的时候，每行命令在不同一个shell中执行，如果想在同一个shell中执行，有下面几个办法。</li>\n<li>将命令写在同一行</li>\n<li>在命令后面添加<code>\\</code>，实现命令多行</li>\n<li>使用<code>.ONESHELL:</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"内置变量\"><a href=\"#内置变量\" class=\"headerlink\" title=\"内置变量\"></a>内置变量</h1><p>makefile可以通过<code>=、:=、?=、+=</code>给变量赋值，同时Make命令提供一系列内置变量，比如，((CC)指向当前使用的编译器，)(MAKE) 指向当前使用的Make工具。这主要是为了跨平台的兼容性，详细的内置变量清单见<a href=\"https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html\" target=\"_blank\" rel=\"noopener\">手册</a>。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/u010230971/article/details/80335613\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010230971/article/details/80335613</a></p>\n<p><a href=\"https://www.cnblogs.com/wang_yb/p/3990952.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/wang_yb/p/3990952.html</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2015/02/make.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/02/make.html</a></p>\n"},{"title":"let-us-encrypt证书","date":"2018-12-05T12:59:59.000Z","_content":"\n# 基本知识\n\n为了实现通配符证书，Let’s Encrypt 对 ACME 协议的实现进行了升级，只有 v2 协议才能支持通配符证书。\n\n1. 客户在申请 Let’s Encrypt 证书的时候，需要校验域名的所有权，证明操作者有权利为该域名申请证书，目前支持三种验证方式：\n\n- dns-01：给域名添加一个 DNS TXT 记录。\n\n- http-01：在域名对应的 Web 服务器下放置一个 HTTP well-known URL 资源文件。\n\n- tls-sni-01：在域名对应的 Web 服务器下放置一个 HTTPS well-known URL 资源文件。\n\n  而申请通配符证书，只能使用 dns-01 的方式\n\n2. ACME v2 和 v1 协议是互相不兼容的，为了使用 v2 版本，客户端需要创建另外一个账户（代表客户端操作者），以 Certbot 客户端为例，大家可以查看：\n3. Enumerable Orders 和限制\n\n# 安装\n\n```bash\nwget https://dl.eff.org/certbot-auto\nchmod a+x ./certbot-auto\n```\n\n# 申请\n\n```bash\n./certbot-auto certonly  -d *.newyingyong.cn --manual --preferred-challenges dns --server https://acme-v02.api.letsencrypt.org/directory\n```\n\n- certonly，表示安装模式，Certbot 有安装模式和验证模式两种类型的插件。\n- –manual 表示手动安装插件，Certbot 有很多插件，不同的插件都可以申请证书，用户可以根据需要自行选择\n- -d 为那些主机申请证书，如果是通配符，输入 *.newyingyong.cn（可以替换为你自己的域名）\n- -preferred-challenges dns，使用 DNS 方式校验域名所有权\n- –server，Let’s Encrypt ACME v2 版本使用的服务器不同于 v1 版本，需要显示指定。\n\n# 添加记录\n\n根据命令行提示，填写相关的内容，注意在添加记录的时候，要等到记录生效才确定。\n\n```\n-------------------------------------------------------------------------------\nPlease deploy a DNS TXT record under the name\n_acme-challenge.newyingyong.cn with the following value:\n2_8KBE_jXH8nYZ2unEViIbW52LhIqxkg6i9mcwsRvhQ\nBefore continuing, verify the record is deployed.\n-------------------------------------------------------------------------------\nPress Enter to Continue\nWaiting for verification...\nCleaning up challenges\n```\n\n```\n## 检测记录生效\n$ dig  -t txt  _acme-challenge.newyingyong.cn @8.8.8.8\n```\n\n# 更新\n\n查看当前服务器所配置的证书\n\n```bash\ncertbot-auto certificates\n```\n\n1. 使用申请的普通证书，使用`certbot-auto renew`\n\n2. 使用通配符证书。\n\n   1. 添加DNS记录\n\n   ```bash\n   git clone https://github.com/ywdblog/certbot-letencrypt-wildcardcertificates-alydns-au.git\n   ```\n\n   ```bash\n   ./certbot-auto renew --cert-name simplehttps.com  --manual-auth-hook /脚本目录/au.sh \n   ```\n\n3. 自动更新\n\n```\n1 1 */1 * * root certbot-auto renew --manual --preferred-challenges dns  --manual-auth-hook /脚本目录/sslupdate.sh \n```\n\n# 参考\n\n> https://www.jianshu.com/p/c5c9d071e395\n>\n> https://www.jianshu.com/p/074e147b68b0\n>\n> [certbot工具](https://github.com/ywdblog/certbot-letencrypt-wildcardcertificates-alydns-au)\n> https://segmentfault.com/a/1190000015354547\n","source":"_posts/let-us-encrypt证书.md","raw":"---\ntitle: let-us-encrypt证书\ndate: 2018-12-05 20:59:59\ntags:\n- web\n---\n\n# 基本知识\n\n为了实现通配符证书，Let’s Encrypt 对 ACME 协议的实现进行了升级，只有 v2 协议才能支持通配符证书。\n\n1. 客户在申请 Let’s Encrypt 证书的时候，需要校验域名的所有权，证明操作者有权利为该域名申请证书，目前支持三种验证方式：\n\n- dns-01：给域名添加一个 DNS TXT 记录。\n\n- http-01：在域名对应的 Web 服务器下放置一个 HTTP well-known URL 资源文件。\n\n- tls-sni-01：在域名对应的 Web 服务器下放置一个 HTTPS well-known URL 资源文件。\n\n  而申请通配符证书，只能使用 dns-01 的方式\n\n2. ACME v2 和 v1 协议是互相不兼容的，为了使用 v2 版本，客户端需要创建另外一个账户（代表客户端操作者），以 Certbot 客户端为例，大家可以查看：\n3. Enumerable Orders 和限制\n\n# 安装\n\n```bash\nwget https://dl.eff.org/certbot-auto\nchmod a+x ./certbot-auto\n```\n\n# 申请\n\n```bash\n./certbot-auto certonly  -d *.newyingyong.cn --manual --preferred-challenges dns --server https://acme-v02.api.letsencrypt.org/directory\n```\n\n- certonly，表示安装模式，Certbot 有安装模式和验证模式两种类型的插件。\n- –manual 表示手动安装插件，Certbot 有很多插件，不同的插件都可以申请证书，用户可以根据需要自行选择\n- -d 为那些主机申请证书，如果是通配符，输入 *.newyingyong.cn（可以替换为你自己的域名）\n- -preferred-challenges dns，使用 DNS 方式校验域名所有权\n- –server，Let’s Encrypt ACME v2 版本使用的服务器不同于 v1 版本，需要显示指定。\n\n# 添加记录\n\n根据命令行提示，填写相关的内容，注意在添加记录的时候，要等到记录生效才确定。\n\n```\n-------------------------------------------------------------------------------\nPlease deploy a DNS TXT record under the name\n_acme-challenge.newyingyong.cn with the following value:\n2_8KBE_jXH8nYZ2unEViIbW52LhIqxkg6i9mcwsRvhQ\nBefore continuing, verify the record is deployed.\n-------------------------------------------------------------------------------\nPress Enter to Continue\nWaiting for verification...\nCleaning up challenges\n```\n\n```\n## 检测记录生效\n$ dig  -t txt  _acme-challenge.newyingyong.cn @8.8.8.8\n```\n\n# 更新\n\n查看当前服务器所配置的证书\n\n```bash\ncertbot-auto certificates\n```\n\n1. 使用申请的普通证书，使用`certbot-auto renew`\n\n2. 使用通配符证书。\n\n   1. 添加DNS记录\n\n   ```bash\n   git clone https://github.com/ywdblog/certbot-letencrypt-wildcardcertificates-alydns-au.git\n   ```\n\n   ```bash\n   ./certbot-auto renew --cert-name simplehttps.com  --manual-auth-hook /脚本目录/au.sh \n   ```\n\n3. 自动更新\n\n```\n1 1 */1 * * root certbot-auto renew --manual --preferred-challenges dns  --manual-auth-hook /脚本目录/sslupdate.sh \n```\n\n# 参考\n\n> https://www.jianshu.com/p/c5c9d071e395\n>\n> https://www.jianshu.com/p/074e147b68b0\n>\n> [certbot工具](https://github.com/ywdblog/certbot-letencrypt-wildcardcertificates-alydns-au)\n> https://segmentfault.com/a/1190000015354547\n","slug":"let-us-encrypt证书","published":1,"updated":"2019-10-14T09:01:07.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a42j0017ic1ye3vbmiqj","content":"<h1 id=\"基本知识\"><a href=\"#基本知识\" class=\"headerlink\" title=\"基本知识\"></a>基本知识</h1><p>为了实现通配符证书，Let’s Encrypt 对 ACME 协议的实现进行了升级，只有 v2 协议才能支持通配符证书。</p>\n<ol>\n<li>客户在申请 Let’s Encrypt 证书的时候，需要校验域名的所有权，证明操作者有权利为该域名申请证书，目前支持三种验证方式：</li>\n</ol>\n<ul>\n<li><p>dns-01：给域名添加一个 DNS TXT 记录。</p>\n</li>\n<li><p>http-01：在域名对应的 Web 服务器下放置一个 HTTP well-known URL 资源文件。</p>\n</li>\n<li><p>tls-sni-01：在域名对应的 Web 服务器下放置一个 HTTPS well-known URL 资源文件。</p>\n<p>而申请通配符证书，只能使用 dns-01 的方式</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>ACME v2 和 v1 协议是互相不兼容的，为了使用 v2 版本，客户端需要创建另外一个账户（代表客户端操作者），以 Certbot 客户端为例，大家可以查看：</li>\n<li>Enumerable Orders 和限制</li>\n</ol>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dl.eff.org/certbot-auto</span><br><span class=\"line\">chmod a+x ./certbot-auto</span><br></pre></td></tr></table></figure>\n<h1 id=\"申请\"><a href=\"#申请\" class=\"headerlink\" title=\"申请\"></a>申请</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./certbot-auto certonly  -d *.newyingyong.cn --manual --preferred-challenges dns --server https://acme-v02.api.letsencrypt.org/directory</span><br></pre></td></tr></table></figure>\n<ul>\n<li>certonly，表示安装模式，Certbot 有安装模式和验证模式两种类型的插件。</li>\n<li>–manual 表示手动安装插件，Certbot 有很多插件，不同的插件都可以申请证书，用户可以根据需要自行选择</li>\n<li>-d 为那些主机申请证书，如果是通配符，输入 *.newyingyong.cn（可以替换为你自己的域名）</li>\n<li>-preferred-challenges dns，使用 DNS 方式校验域名所有权</li>\n<li>–server，Let’s Encrypt ACME v2 版本使用的服务器不同于 v1 版本，需要显示指定。</li>\n</ul>\n<h1 id=\"添加记录\"><a href=\"#添加记录\" class=\"headerlink\" title=\"添加记录\"></a>添加记录</h1><p>根据命令行提示，填写相关的内容，注意在添加记录的时候，要等到记录生效才确定。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">Please deploy a DNS TXT record under the name</span><br><span class=\"line\">_acme-challenge.newyingyong.cn with the following value:</span><br><span class=\"line\">2_8KBE_jXH8nYZ2unEViIbW52LhIqxkg6i9mcwsRvhQ</span><br><span class=\"line\">Before continuing, verify the record is deployed.</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">Press Enter to Continue</span><br><span class=\"line\">Waiting for verification...</span><br><span class=\"line\">Cleaning up challenges</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 检测记录生效</span><br><span class=\"line\">$ dig  -t txt  _acme-challenge.newyingyong.cn @8.8.8.8</span><br></pre></td></tr></table></figure>\n<h1 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h1><p>查看当前服务器所配置的证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">certbot-auto certificates</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>使用申请的普通证书，使用<code>certbot-auto renew</code></p>\n</li>\n<li><p>使用通配符证书。</p>\n<ol>\n<li>添加DNS记录</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/ywdblog/certbot-letencrypt-wildcardcertificates-alydns-au.git</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./certbot-auto renew --cert-name simplehttps.com  --manual-auth-hook /脚本目录/au.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自动更新</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 1 */1 * * root certbot-auto renew --manual --preferred-challenges dns  --manual-auth-hook /脚本目录/sslupdate.sh</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://www.jianshu.com/p/c5c9d071e395\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/c5c9d071e395</a></p>\n<p><a href=\"https://www.jianshu.com/p/074e147b68b0\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/074e147b68b0</a></p>\n<p><a href=\"https://github.com/ywdblog/certbot-letencrypt-wildcardcertificates-alydns-au\" target=\"_blank\" rel=\"noopener\">certbot工具</a><br><a href=\"https://segmentfault.com/a/1190000015354547\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000015354547</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基本知识\"><a href=\"#基本知识\" class=\"headerlink\" title=\"基本知识\"></a>基本知识</h1><p>为了实现通配符证书，Let’s Encrypt 对 ACME 协议的实现进行了升级，只有 v2 协议才能支持通配符证书。</p>\n<ol>\n<li>客户在申请 Let’s Encrypt 证书的时候，需要校验域名的所有权，证明操作者有权利为该域名申请证书，目前支持三种验证方式：</li>\n</ol>\n<ul>\n<li><p>dns-01：给域名添加一个 DNS TXT 记录。</p>\n</li>\n<li><p>http-01：在域名对应的 Web 服务器下放置一个 HTTP well-known URL 资源文件。</p>\n</li>\n<li><p>tls-sni-01：在域名对应的 Web 服务器下放置一个 HTTPS well-known URL 资源文件。</p>\n<p>而申请通配符证书，只能使用 dns-01 的方式</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>ACME v2 和 v1 协议是互相不兼容的，为了使用 v2 版本，客户端需要创建另外一个账户（代表客户端操作者），以 Certbot 客户端为例，大家可以查看：</li>\n<li>Enumerable Orders 和限制</li>\n</ol>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dl.eff.org/certbot-auto</span><br><span class=\"line\">chmod a+x ./certbot-auto</span><br></pre></td></tr></table></figure>\n<h1 id=\"申请\"><a href=\"#申请\" class=\"headerlink\" title=\"申请\"></a>申请</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./certbot-auto certonly  -d *.newyingyong.cn --manual --preferred-challenges dns --server https://acme-v02.api.letsencrypt.org/directory</span><br></pre></td></tr></table></figure>\n<ul>\n<li>certonly，表示安装模式，Certbot 有安装模式和验证模式两种类型的插件。</li>\n<li>–manual 表示手动安装插件，Certbot 有很多插件，不同的插件都可以申请证书，用户可以根据需要自行选择</li>\n<li>-d 为那些主机申请证书，如果是通配符，输入 *.newyingyong.cn（可以替换为你自己的域名）</li>\n<li>-preferred-challenges dns，使用 DNS 方式校验域名所有权</li>\n<li>–server，Let’s Encrypt ACME v2 版本使用的服务器不同于 v1 版本，需要显示指定。</li>\n</ul>\n<h1 id=\"添加记录\"><a href=\"#添加记录\" class=\"headerlink\" title=\"添加记录\"></a>添加记录</h1><p>根据命令行提示，填写相关的内容，注意在添加记录的时候，要等到记录生效才确定。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">Please deploy a DNS TXT record under the name</span><br><span class=\"line\">_acme-challenge.newyingyong.cn with the following value:</span><br><span class=\"line\">2_8KBE_jXH8nYZ2unEViIbW52LhIqxkg6i9mcwsRvhQ</span><br><span class=\"line\">Before continuing, verify the record is deployed.</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">Press Enter to Continue</span><br><span class=\"line\">Waiting for verification...</span><br><span class=\"line\">Cleaning up challenges</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 检测记录生效</span><br><span class=\"line\">$ dig  -t txt  _acme-challenge.newyingyong.cn @8.8.8.8</span><br></pre></td></tr></table></figure>\n<h1 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h1><p>查看当前服务器所配置的证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">certbot-auto certificates</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>使用申请的普通证书，使用<code>certbot-auto renew</code></p>\n</li>\n<li><p>使用通配符证书。</p>\n<ol>\n<li>添加DNS记录</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/ywdblog/certbot-letencrypt-wildcardcertificates-alydns-au.git</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./certbot-auto renew --cert-name simplehttps.com  --manual-auth-hook /脚本目录/au.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自动更新</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 1 */1 * * root certbot-auto renew --manual --preferred-challenges dns  --manual-auth-hook /脚本目录/sslupdate.sh</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://www.jianshu.com/p/c5c9d071e395\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/c5c9d071e395</a></p>\n<p><a href=\"https://www.jianshu.com/p/074e147b68b0\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/074e147b68b0</a></p>\n<p><a href=\"https://github.com/ywdblog/certbot-letencrypt-wildcardcertificates-alydns-au\" target=\"_blank\" rel=\"noopener\">certbot工具</a><br><a href=\"https://segmentfault.com/a/1190000015354547\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000015354547</a></p>\n</blockquote>\n"},{"title":"react入门教程","date":"2018-12-05T13:56:22.000Z","_content":"\n# webpack4初始化\n\n```\ncnpm i -D webpack\ncnpm i -D webpack-cli  //相关的命令\n```\n\n# 相应包的安装\n\n1. react 专门用于创建组件和虚拟DOM，同事组件的生命周期在这个包中。\n2. react-dom 专门进行dom操作的，最主要的应用场景，就是ReactDom.render()\n\n# babel\n\n1. babel-node 一个命令行工具\n2. babel-register 可以实现动态转换\n3. babel-core 核心包\n4. babel-preset-env 一个套餐\n\n#  jsx使用\n\n## 安装babel插件\n\n```\ncnpm i babel-core babel-loader babel-plugin-transform-runtime -D\ncnpm i babel-preset-env babel-preset-stage-0 -D\ncnpm i babel-preset-react -D\n```\n\n## 添加.babelrc配置文件\n\n```\n{\n    \"presets\":[\"env\",\"stage-0\",\"react\"],\n    \"plugins\":[\"transform-runtime\"]\n}\n```\n\n##添加babel-loader配置项\n\n```\nmodule：{\n    rules:[\n        {test:/\\.js|jsx/,use:'babel-loader',exclude:/node_modules/}\n    ]\n}\n```","source":"_posts/react入门教程.md","raw":"---\ntitle: react入门教程\ndate: 2018-12-05 21:56:22\ntags:\n- react\n---\n\n# webpack4初始化\n\n```\ncnpm i -D webpack\ncnpm i -D webpack-cli  //相关的命令\n```\n\n# 相应包的安装\n\n1. react 专门用于创建组件和虚拟DOM，同事组件的生命周期在这个包中。\n2. react-dom 专门进行dom操作的，最主要的应用场景，就是ReactDom.render()\n\n# babel\n\n1. babel-node 一个命令行工具\n2. babel-register 可以实现动态转换\n3. babel-core 核心包\n4. babel-preset-env 一个套餐\n\n#  jsx使用\n\n## 安装babel插件\n\n```\ncnpm i babel-core babel-loader babel-plugin-transform-runtime -D\ncnpm i babel-preset-env babel-preset-stage-0 -D\ncnpm i babel-preset-react -D\n```\n\n## 添加.babelrc配置文件\n\n```\n{\n    \"presets\":[\"env\",\"stage-0\",\"react\"],\n    \"plugins\":[\"transform-runtime\"]\n}\n```\n\n##添加babel-loader配置项\n\n```\nmodule：{\n    rules:[\n        {test:/\\.js|jsx/,use:'babel-loader',exclude:/node_modules/}\n    ]\n}\n```","slug":"react入门教程","published":1,"updated":"2019-10-14T09:01:08.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a42j0019ic1y1wisrg49","content":"<h1 id=\"webpack4初始化\"><a href=\"#webpack4初始化\" class=\"headerlink\" title=\"webpack4初始化\"></a>webpack4初始化</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i -D webpack</span><br><span class=\"line\">cnpm i -D webpack-cli  //相关的命令</span><br></pre></td></tr></table></figure>\n<h1 id=\"相应包的安装\"><a href=\"#相应包的安装\" class=\"headerlink\" title=\"相应包的安装\"></a>相应包的安装</h1><ol>\n<li>react 专门用于创建组件和虚拟DOM，同事组件的生命周期在这个包中。</li>\n<li>react-dom 专门进行dom操作的，最主要的应用场景，就是ReactDom.render()</li>\n</ol>\n<h1 id=\"babel\"><a href=\"#babel\" class=\"headerlink\" title=\"babel\"></a>babel</h1><ol>\n<li>babel-node 一个命令行工具</li>\n<li>babel-register 可以实现动态转换</li>\n<li>babel-core 核心包</li>\n<li>babel-preset-env 一个套餐</li>\n</ol>\n<h1 id=\"jsx使用\"><a href=\"#jsx使用\" class=\"headerlink\" title=\"jsx使用\"></a>jsx使用</h1><h2 id=\"安装babel插件\"><a href=\"#安装babel插件\" class=\"headerlink\" title=\"安装babel插件\"></a>安装babel插件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i babel-core babel-loader babel-plugin-transform-runtime -D</span><br><span class=\"line\">cnpm i babel-preset-env babel-preset-stage-0 -D</span><br><span class=\"line\">cnpm i babel-preset-react -D</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加-babelrc配置文件\"><a href=\"#添加-babelrc配置文件\" class=\"headerlink\" title=\"添加.babelrc配置文件\"></a>添加.babelrc配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;presets&quot;:[&quot;env&quot;,&quot;stage-0&quot;,&quot;react&quot;],</span><br><span class=\"line\">    &quot;plugins&quot;:[&quot;transform-runtime&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>##添加babel-loader配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module：&#123;</span><br><span class=\"line\">    rules:[</span><br><span class=\"line\">        &#123;test:/\\.js|jsx/,use:&apos;babel-loader&apos;,exclude:/node_modules/&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"webpack4初始化\"><a href=\"#webpack4初始化\" class=\"headerlink\" title=\"webpack4初始化\"></a>webpack4初始化</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i -D webpack</span><br><span class=\"line\">cnpm i -D webpack-cli  //相关的命令</span><br></pre></td></tr></table></figure>\n<h1 id=\"相应包的安装\"><a href=\"#相应包的安装\" class=\"headerlink\" title=\"相应包的安装\"></a>相应包的安装</h1><ol>\n<li>react 专门用于创建组件和虚拟DOM，同事组件的生命周期在这个包中。</li>\n<li>react-dom 专门进行dom操作的，最主要的应用场景，就是ReactDom.render()</li>\n</ol>\n<h1 id=\"babel\"><a href=\"#babel\" class=\"headerlink\" title=\"babel\"></a>babel</h1><ol>\n<li>babel-node 一个命令行工具</li>\n<li>babel-register 可以实现动态转换</li>\n<li>babel-core 核心包</li>\n<li>babel-preset-env 一个套餐</li>\n</ol>\n<h1 id=\"jsx使用\"><a href=\"#jsx使用\" class=\"headerlink\" title=\"jsx使用\"></a>jsx使用</h1><h2 id=\"安装babel插件\"><a href=\"#安装babel插件\" class=\"headerlink\" title=\"安装babel插件\"></a>安装babel插件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i babel-core babel-loader babel-plugin-transform-runtime -D</span><br><span class=\"line\">cnpm i babel-preset-env babel-preset-stage-0 -D</span><br><span class=\"line\">cnpm i babel-preset-react -D</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加-babelrc配置文件\"><a href=\"#添加-babelrc配置文件\" class=\"headerlink\" title=\"添加.babelrc配置文件\"></a>添加.babelrc配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;presets&quot;:[&quot;env&quot;,&quot;stage-0&quot;,&quot;react&quot;],</span><br><span class=\"line\">    &quot;plugins&quot;:[&quot;transform-runtime&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>##添加babel-loader配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module：&#123;</span><br><span class=\"line\">    rules:[</span><br><span class=\"line\">        &#123;test:/\\.js|jsx/,use:&apos;babel-loader&apos;,exclude:/node_modules/&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"php5环境搭建","date":"2019-09-02T15:14:11.000Z","_content":"\n# 安装nginx\n\n```bash\nyum install epel-release\nyum install nginx\n\n```\n\n# 安装php\n\nremi源可以获取更高的版本，php-fpm是要启动的\n\n```bash\nrpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm\nyum install --enablerepo=remi --enablerepo=remi-php56 php php-fpm\nyum install --enablerepo=remi --enablerepo=remi-php56 php-opcache php-mbstring php-mysql* php-gd php-redis php-mcrypt php-xml php-redis\n```\n\n# nginx配置\n\n```nginx\nserver {\n    listen       80;\n    server_name  www.test.com test.com;\n    root     /data/www/Public;\n    index  index.php index.html;\n\n    location / {\n            try_files $uri $uri/ /index.php?$args;\n    }\n    location ~ index.php {\n        fastcgi_connect_timeout 20s;     # default of 60s is just too long\n        fastcgi_read_timeout 20s;       # default of 60s is just too long\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_pass 127.0.0.1:9000;    # assumes you are running php-fpm locally on port 9000\n        fastcgi_param  PHP_VALUE  \"open_basedir=/data/www/:/data/www/Data:/tmp/\";\n    }\n}\n```\n\n# 开启php的日志\n\n1. 修改 php-fpm.conf 文件，添加（或修改）如下配置：\n\n   ```nginx\n   [global]\n     error_log = log/error_log\n   \n     [www]\n     catch_workers_output = yes\n   ```\n\n2. 修改 php.ini 文件，添加（或修改）如下配置：\n\n   ```\n     log_errors = On\n     error_log = \"/usr/local/lnmp/php/var/log/error_log\"\n     error_reporting=E_ALL&~E_NOTICE\n   ```\n\n3. 重启 php-fpm ","source":"_posts/php5环境搭建.md","raw":"---\ntitle: php5环境搭建\ndate: 2019-09-02 23:14:11\ntags:\n---\n\n# 安装nginx\n\n```bash\nyum install epel-release\nyum install nginx\n\n```\n\n# 安装php\n\nremi源可以获取更高的版本，php-fpm是要启动的\n\n```bash\nrpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm\nyum install --enablerepo=remi --enablerepo=remi-php56 php php-fpm\nyum install --enablerepo=remi --enablerepo=remi-php56 php-opcache php-mbstring php-mysql* php-gd php-redis php-mcrypt php-xml php-redis\n```\n\n# nginx配置\n\n```nginx\nserver {\n    listen       80;\n    server_name  www.test.com test.com;\n    root     /data/www/Public;\n    index  index.php index.html;\n\n    location / {\n            try_files $uri $uri/ /index.php?$args;\n    }\n    location ~ index.php {\n        fastcgi_connect_timeout 20s;     # default of 60s is just too long\n        fastcgi_read_timeout 20s;       # default of 60s is just too long\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_pass 127.0.0.1:9000;    # assumes you are running php-fpm locally on port 9000\n        fastcgi_param  PHP_VALUE  \"open_basedir=/data/www/:/data/www/Data:/tmp/\";\n    }\n}\n```\n\n# 开启php的日志\n\n1. 修改 php-fpm.conf 文件，添加（或修改）如下配置：\n\n   ```nginx\n   [global]\n     error_log = log/error_log\n   \n     [www]\n     catch_workers_output = yes\n   ```\n\n2. 修改 php.ini 文件，添加（或修改）如下配置：\n\n   ```\n     log_errors = On\n     error_log = \"/usr/local/lnmp/php/var/log/error_log\"\n     error_reporting=E_ALL&~E_NOTICE\n   ```\n\n3. 重启 php-fpm ","slug":"php5环境搭建","published":1,"updated":"2019-10-14T09:01:08.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a42k001cic1ydb4oqzj4","content":"<h1 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install epel-release</span><br><span class=\"line\">yum install nginx</span><br></pre></td></tr></table></figure>\n<h1 id=\"安装php\"><a href=\"#安装php\" class=\"headerlink\" title=\"安装php\"></a>安装php</h1><p>remi源可以获取更高的版本，php-fpm是要启动的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm</span><br><span class=\"line\">yum install --enablerepo=remi --enablerepo=remi-php56 php php-fpm</span><br><span class=\"line\">yum install --enablerepo=remi --enablerepo=remi-php56 php-opcache php-mbstring php-mysql* php-gd php-redis php-mcrypt php-xml php-redis</span><br></pre></td></tr></table></figure>\n<h1 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h1><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  www.test.com test.com;</span><br><span class=\"line\">    <span class=\"attribute\">root</span>     /data/www/Public;</span><br><span class=\"line\">    <span class=\"attribute\">index</span>  index.php index.html;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">            <span class=\"attribute\">try_files</span> <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ /index.php?<span class=\"variable\">$args</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> <span class=\"regexp\">~ index.php</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_connect_timeout</span> <span class=\"number\">20s</span>;     <span class=\"comment\"># default of 60s is just too long</span></span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_read_timeout</span> <span class=\"number\">20s</span>;       <span class=\"comment\"># default of 60s is just too long</span></span><br><span class=\"line\">        <span class=\"attribute\">include</span> fastcgi_params;</span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_param</span> SCRIPT_FILENAME <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_pass</span> <span class=\"number\">127.0.0.1:9000</span>;    <span class=\"comment\"># assumes you are running php-fpm locally on port 9000</span></span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_param</span>  PHP_VALUE  <span class=\"string\">\"open_basedir=/data/www/:/data/www/Data:/tmp/\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"开启php的日志\"><a href=\"#开启php的日志\" class=\"headerlink\" title=\"开启php的日志\"></a>开启php的日志</h1><ol>\n<li><p>修改 php-fpm.conf 文件，添加（或修改）如下配置：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">  <span class=\"attribute\">error_log</span> = log/error_log</span><br><span class=\"line\"></span><br><span class=\"line\">  [www]</span><br><span class=\"line\">  catch_workers_output = <span class=\"literal\">yes</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改 php.ini 文件，添加（或修改）如下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_errors = On</span><br><span class=\"line\">error_log = &quot;/usr/local/lnmp/php/var/log/error_log&quot;</span><br><span class=\"line\">error_reporting=E_ALL&amp;~E_NOTICE</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启 php-fpm </p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install epel-release</span><br><span class=\"line\">yum install nginx</span><br></pre></td></tr></table></figure>\n<h1 id=\"安装php\"><a href=\"#安装php\" class=\"headerlink\" title=\"安装php\"></a>安装php</h1><p>remi源可以获取更高的版本，php-fpm是要启动的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm</span><br><span class=\"line\">yum install --enablerepo=remi --enablerepo=remi-php56 php php-fpm</span><br><span class=\"line\">yum install --enablerepo=remi --enablerepo=remi-php56 php-opcache php-mbstring php-mysql* php-gd php-redis php-mcrypt php-xml php-redis</span><br></pre></td></tr></table></figure>\n<h1 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h1><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  www.test.com test.com;</span><br><span class=\"line\">    <span class=\"attribute\">root</span>     /data/www/Public;</span><br><span class=\"line\">    <span class=\"attribute\">index</span>  index.php index.html;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">            <span class=\"attribute\">try_files</span> <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ /index.php?<span class=\"variable\">$args</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> <span class=\"regexp\">~ index.php</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_connect_timeout</span> <span class=\"number\">20s</span>;     <span class=\"comment\"># default of 60s is just too long</span></span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_read_timeout</span> <span class=\"number\">20s</span>;       <span class=\"comment\"># default of 60s is just too long</span></span><br><span class=\"line\">        <span class=\"attribute\">include</span> fastcgi_params;</span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_param</span> SCRIPT_FILENAME <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_pass</span> <span class=\"number\">127.0.0.1:9000</span>;    <span class=\"comment\"># assumes you are running php-fpm locally on port 9000</span></span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_param</span>  PHP_VALUE  <span class=\"string\">\"open_basedir=/data/www/:/data/www/Data:/tmp/\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"开启php的日志\"><a href=\"#开启php的日志\" class=\"headerlink\" title=\"开启php的日志\"></a>开启php的日志</h1><ol>\n<li><p>修改 php-fpm.conf 文件，添加（或修改）如下配置：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">  <span class=\"attribute\">error_log</span> = log/error_log</span><br><span class=\"line\"></span><br><span class=\"line\">  [www]</span><br><span class=\"line\">  catch_workers_output = <span class=\"literal\">yes</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改 php.ini 文件，添加（或修改）如下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_errors = On</span><br><span class=\"line\">error_log = &quot;/usr/local/lnmp/php/var/log/error_log&quot;</span><br><span class=\"line\">error_reporting=E_ALL&amp;~E_NOTICE</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启 php-fpm </p>\n</li>\n</ol>\n"},{"title":"react-tree-walker学习","date":"2019-10-19T09:02:13.000Z","_content":"\n# `react-tree-walker`\n\n这个主要用于遍历react的dom树，用于在react服务端渲染数据请求的时候。\n\n```js\nimport reactTreeWalker from 'react-tree-walker'\n\nclass DataFetcher extends React.Component {\n  constructor(props) {\n    super(props)\n    this.getData = this.getData.bind(this)\n  }\n\n  getData() {\n    // Supports promises! You could call an API for example to fetch some\n    // data, or do whatever \"bootstrapping\" you desire.\n    return Promise.resolve(this.props.id)\n  }\n\n  render() {\n    return <div>{this.props.children}</div>\n  }\n}\n\nconst app = (\n  <div>\n    <h1>Hello World!</h1>\n    <DataFetcher id={1} />\n    <DataFetcher id={2}>\n      <DataFetcher id={3}>\n        <DataFetcher id={4} />\n      </DataFetcher>\n    </DataFetcher>\n    <DataFetcher id={5} />\n  </div>\n)\n\nconst values = []\n\n// You provide this! See the API docs below for full details.\nfunction visitor(element, instance) {\n  if (instance && typeof instance.getData) {\n    return instance.getData().then(value => {\n      values.push(value)\n      // Return \"false\" to indicate that we do not want to visit \"3\"'s children,\n      // therefore we do not expect \"4\" to make it into our values array.\n      return value !== 3\n    })\n  }\n}\n\nreactTreeWalker(app, visitor)\n  .then(() => {\n    console.log(values) // [1, 2, 3, 5];\n    // Now is a good time to call React's renderToString whilst exposing\n    // whatever values you built up to your app.\n  })\n  // since v3.0.0 you need to do your own error handling!\n  .catch(err => console.error(err))\n```\n\n# `react-ssr-prepass`\n\n这个项目还在维护，是一个不错的选择\n\n## 安装\n\n```bash\nyarn add react-ssr-prepass\n# or\nnpm install --save react-ssr-prepass\n```\n\n## 使用\n\n```js\nimport { createElement } from 'react'\nimport { renderToString } from 'react-dom/server'\n\nimport ssrPrepass from 'react-ssr-prepass'\n\nconst renderApp = async App => {\n  const element = createElement(App)\n  await ssrPrepass(element)\n\n  return renderToString(element)\n}\n\nssrPrepass(<App />, (element, instance) => {\n  if (element.type === SomeData) {\n    return fetchData()\n  } else if (instance && instance.fetchData) {\n    return instance.fetchData()\n  }\n})\n\n```\n\n","source":"_posts/react-tree-walker学习.md","raw":"---\ntitle: react-tree-walker学习\ndate: 2019-10-19 17:02:13\ntags:\n- react\n---\n\n# `react-tree-walker`\n\n这个主要用于遍历react的dom树，用于在react服务端渲染数据请求的时候。\n\n```js\nimport reactTreeWalker from 'react-tree-walker'\n\nclass DataFetcher extends React.Component {\n  constructor(props) {\n    super(props)\n    this.getData = this.getData.bind(this)\n  }\n\n  getData() {\n    // Supports promises! You could call an API for example to fetch some\n    // data, or do whatever \"bootstrapping\" you desire.\n    return Promise.resolve(this.props.id)\n  }\n\n  render() {\n    return <div>{this.props.children}</div>\n  }\n}\n\nconst app = (\n  <div>\n    <h1>Hello World!</h1>\n    <DataFetcher id={1} />\n    <DataFetcher id={2}>\n      <DataFetcher id={3}>\n        <DataFetcher id={4} />\n      </DataFetcher>\n    </DataFetcher>\n    <DataFetcher id={5} />\n  </div>\n)\n\nconst values = []\n\n// You provide this! See the API docs below for full details.\nfunction visitor(element, instance) {\n  if (instance && typeof instance.getData) {\n    return instance.getData().then(value => {\n      values.push(value)\n      // Return \"false\" to indicate that we do not want to visit \"3\"'s children,\n      // therefore we do not expect \"4\" to make it into our values array.\n      return value !== 3\n    })\n  }\n}\n\nreactTreeWalker(app, visitor)\n  .then(() => {\n    console.log(values) // [1, 2, 3, 5];\n    // Now is a good time to call React's renderToString whilst exposing\n    // whatever values you built up to your app.\n  })\n  // since v3.0.0 you need to do your own error handling!\n  .catch(err => console.error(err))\n```\n\n# `react-ssr-prepass`\n\n这个项目还在维护，是一个不错的选择\n\n## 安装\n\n```bash\nyarn add react-ssr-prepass\n# or\nnpm install --save react-ssr-prepass\n```\n\n## 使用\n\n```js\nimport { createElement } from 'react'\nimport { renderToString } from 'react-dom/server'\n\nimport ssrPrepass from 'react-ssr-prepass'\n\nconst renderApp = async App => {\n  const element = createElement(App)\n  await ssrPrepass(element)\n\n  return renderToString(element)\n}\n\nssrPrepass(<App />, (element, instance) => {\n  if (element.type === SomeData) {\n    return fetchData()\n  } else if (instance && instance.fetchData) {\n    return instance.fetchData()\n  }\n})\n\n```\n\n","slug":"react-tree-walker学习","published":1,"updated":"2019-10-25T02:20:42.842Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a42l001eic1yyya4vdxz","content":"<h1 id=\"react-tree-walker\"><a href=\"#react-tree-walker\" class=\"headerlink\" title=\"react-tree-walker\"></a><code>react-tree-walker</code></h1><p>这个主要用于遍历react的dom树，用于在react服务端渲染数据请求的时候。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> reactTreeWalker <span class=\"keyword\">from</span> <span class=\"string\">'react-tree-walker'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataFetcher</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getData = <span class=\"keyword\">this</span>.getData.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getData() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Supports promises! You could call an API for example to fetch some</span></span><br><span class=\"line\">    <span class=\"comment\">// data, or do whatever \"bootstrapping\" you desire.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"keyword\">this</span>.props.id)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;this.props.children&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = (</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;Hello World!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">    &lt;DataFetcher id=&#123;<span class=\"number\">1</span>&#125; /&gt;</span><br><span class=\"line\">    &lt;DataFetcher id=&#123;<span class=\"number\">2</span>&#125;&gt;</span><br><span class=\"line\">      &lt;DataFetcher id=&#123;<span class=\"number\">3</span>&#125;&gt;</span><br><span class=\"line\">        &lt;DataFetcher id=&#123;<span class=\"number\">4</span>&#125; /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/DataFetcher&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>DataFetcher&gt;</span><br><span class=\"line\">    &lt;DataFetcher id=&#123;<span class=\"number\">5</span>&#125; /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">)</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const values = []</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ You provide this! See the API docs below for full details.</span></span><br><span class=\"line\"><span class=\"regexp\">function visitor(element, instance) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  if (instance &amp;&amp; typeof instance.getData) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return instance.getData().then(value =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      values.push(value)</span></span><br><span class=\"line\"><span class=\"regexp\">      /</span><span class=\"regexp\">/ Return \"false\" to indicate that we do not want to visit \"3\"'s children,</span></span><br><span class=\"line\"><span class=\"regexp\">      /</span><span class=\"regexp\">/ therefore we do not expect \"4\" to make it into our values array.</span></span><br><span class=\"line\"><span class=\"regexp\">      return value !== 3</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">reactTreeWalker(app, visitor)</span></span><br><span class=\"line\"><span class=\"regexp\">  .then(() =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    console.log(values) /</span><span class=\"regexp\">/ [1, 2, 3, 5];</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ Now is a good time to call React's renderToString whilst exposing</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ whatever values you built up to your app.</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">  /</span><span class=\"regexp\">/ since v3.0.0 you need to do your own error handling!</span></span><br><span class=\"line\"><span class=\"regexp\">  .catch(err =&gt; console.error(err))</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"react-ssr-prepass\"><a href=\"#react-ssr-prepass\" class=\"headerlink\" title=\"react-ssr-prepass\"></a><code>react-ssr-prepass</code></h1><p>这个项目还在维护，是一个不错的选择</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add react-ssr-prepass</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">npm install --save react-ssr-prepass</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createElement &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; renderToString &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom/server'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ssrPrepass <span class=\"keyword\">from</span> <span class=\"string\">'react-ssr-prepass'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> renderApp = <span class=\"keyword\">async</span> App =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> element = createElement(App)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> ssrPrepass(element)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> renderToString(element)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ssrPrepass(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span>, (element, instance) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"xml\">  if (element.type === SomeData) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    return fetchData()</span></span><br><span class=\"line\"><span class=\"xml\">  &#125; else if (instance &amp;&amp; instance.fetchData) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    return instance.fetchData()</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;)</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"react-tree-walker\"><a href=\"#react-tree-walker\" class=\"headerlink\" title=\"react-tree-walker\"></a><code>react-tree-walker</code></h1><p>这个主要用于遍历react的dom树，用于在react服务端渲染数据请求的时候。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> reactTreeWalker <span class=\"keyword\">from</span> <span class=\"string\">'react-tree-walker'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataFetcher</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getData = <span class=\"keyword\">this</span>.getData.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getData() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Supports promises! You could call an API for example to fetch some</span></span><br><span class=\"line\">    <span class=\"comment\">// data, or do whatever \"bootstrapping\" you desire.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"keyword\">this</span>.props.id)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;this.props.children&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = (</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;Hello World!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">    &lt;DataFetcher id=&#123;<span class=\"number\">1</span>&#125; /&gt;</span><br><span class=\"line\">    &lt;DataFetcher id=&#123;<span class=\"number\">2</span>&#125;&gt;</span><br><span class=\"line\">      &lt;DataFetcher id=&#123;<span class=\"number\">3</span>&#125;&gt;</span><br><span class=\"line\">        &lt;DataFetcher id=&#123;<span class=\"number\">4</span>&#125; /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/DataFetcher&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>DataFetcher&gt;</span><br><span class=\"line\">    &lt;DataFetcher id=&#123;<span class=\"number\">5</span>&#125; /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">)</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const values = []</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ You provide this! See the API docs below for full details.</span></span><br><span class=\"line\"><span class=\"regexp\">function visitor(element, instance) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  if (instance &amp;&amp; typeof instance.getData) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return instance.getData().then(value =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      values.push(value)</span></span><br><span class=\"line\"><span class=\"regexp\">      /</span><span class=\"regexp\">/ Return \"false\" to indicate that we do not want to visit \"3\"'s children,</span></span><br><span class=\"line\"><span class=\"regexp\">      /</span><span class=\"regexp\">/ therefore we do not expect \"4\" to make it into our values array.</span></span><br><span class=\"line\"><span class=\"regexp\">      return value !== 3</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">reactTreeWalker(app, visitor)</span></span><br><span class=\"line\"><span class=\"regexp\">  .then(() =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    console.log(values) /</span><span class=\"regexp\">/ [1, 2, 3, 5];</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ Now is a good time to call React's renderToString whilst exposing</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ whatever values you built up to your app.</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">  /</span><span class=\"regexp\">/ since v3.0.0 you need to do your own error handling!</span></span><br><span class=\"line\"><span class=\"regexp\">  .catch(err =&gt; console.error(err))</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"react-ssr-prepass\"><a href=\"#react-ssr-prepass\" class=\"headerlink\" title=\"react-ssr-prepass\"></a><code>react-ssr-prepass</code></h1><p>这个项目还在维护，是一个不错的选择</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add react-ssr-prepass</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">npm install --save react-ssr-prepass</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createElement &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; renderToString &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom/server'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ssrPrepass <span class=\"keyword\">from</span> <span class=\"string\">'react-ssr-prepass'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> renderApp = <span class=\"keyword\">async</span> App =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> element = createElement(App)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> ssrPrepass(element)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> renderToString(element)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ssrPrepass(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span>, (element, instance) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"xml\">  if (element.type === SomeData) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    return fetchData()</span></span><br><span class=\"line\"><span class=\"xml\">  &#125; else if (instance &amp;&amp; instance.fetchData) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    return instance.fetchData()</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;)</span></span><br></pre></td></tr></table></figure>\n"},{"title":"nvc-server安装","date":"2018-12-05T13:39:00.000Z","_content":"\n## centos 安装 vnc server\n\n**没有实现多用户配置**\n\n```\nyum install tigervnc-server -y\ncp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service\n\n## 然后打开这个配置文件/etc/systemd/system/vncserver@:1.service替换掉默认用户名 \n## ExecStart=/sbin/runuser -l <USER> -c \"/usr/bin/vncserver %i\"\n## PIDFile=/home/<USER>/.vnc/%H%i.pid\n## 这里我直接用root 用户登录，所以我替换成\nExecStart=/sbin/runuser -l root -c \"/usr/bin/vncserver %i\"\nPIDFile=/root/.vnc/%H%i.pid\n\n## 如果是其他用户的话比如linoxide替换如下\nExecStart=/sbin/runuser -l linoxide -c \"/usr/bin/vncserver %i\"\nPIDFile=/home/linoxide/.vnc/%H%i.pid\n\nsystemctl daemon-reload\nvncpasswd\n## 开放端口\n## 重启服务\nsystemctl enable vncserver@:1.service\nsystemctl start vncserver@:1.service\n```\n\n## ubuntu 安装 vnc viewer\n\n```\nsudo dpkg -i VNC-Viewer-6.17.1113-Linux-x64.deb\n```\n\n# 参考\n\n> https://my.oschina.net/huhaoren/blog/497394","source":"_posts/nvc-server安装.md","raw":"---\ntitle: nvc-server安装\ndate: 2018-12-05 21:39:00\ntags:\n- web\n---\n\n## centos 安装 vnc server\n\n**没有实现多用户配置**\n\n```\nyum install tigervnc-server -y\ncp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service\n\n## 然后打开这个配置文件/etc/systemd/system/vncserver@:1.service替换掉默认用户名 \n## ExecStart=/sbin/runuser -l <USER> -c \"/usr/bin/vncserver %i\"\n## PIDFile=/home/<USER>/.vnc/%H%i.pid\n## 这里我直接用root 用户登录，所以我替换成\nExecStart=/sbin/runuser -l root -c \"/usr/bin/vncserver %i\"\nPIDFile=/root/.vnc/%H%i.pid\n\n## 如果是其他用户的话比如linoxide替换如下\nExecStart=/sbin/runuser -l linoxide -c \"/usr/bin/vncserver %i\"\nPIDFile=/home/linoxide/.vnc/%H%i.pid\n\nsystemctl daemon-reload\nvncpasswd\n## 开放端口\n## 重启服务\nsystemctl enable vncserver@:1.service\nsystemctl start vncserver@:1.service\n```\n\n## ubuntu 安装 vnc viewer\n\n```\nsudo dpkg -i VNC-Viewer-6.17.1113-Linux-x64.deb\n```\n\n# 参考\n\n> https://my.oschina.net/huhaoren/blog/497394","slug":"nvc-server安装","published":1,"updated":"2019-10-14T09:01:07.833Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a42m001gic1yoefdk7q2","content":"<h2 id=\"centos-安装-vnc-server\"><a href=\"#centos-安装-vnc-server\" class=\"headerlink\" title=\"centos 安装 vnc server\"></a>centos 安装 vnc server</h2><p><strong>没有实现多用户配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install tigervnc-server -y</span><br><span class=\"line\">cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service</span><br><span class=\"line\"></span><br><span class=\"line\">## 然后打开这个配置文件/etc/systemd/system/vncserver@:1.service替换掉默认用户名 </span><br><span class=\"line\">## ExecStart=/sbin/runuser -l &lt;USER&gt; -c &quot;/usr/bin/vncserver %i&quot;</span><br><span class=\"line\">## PIDFile=/home/&lt;USER&gt;/.vnc/%H%i.pid</span><br><span class=\"line\">## 这里我直接用root 用户登录，所以我替换成</span><br><span class=\"line\">ExecStart=/sbin/runuser -l root -c &quot;/usr/bin/vncserver %i&quot;</span><br><span class=\"line\">PIDFile=/root/.vnc/%H%i.pid</span><br><span class=\"line\"></span><br><span class=\"line\">## 如果是其他用户的话比如linoxide替换如下</span><br><span class=\"line\">ExecStart=/sbin/runuser -l linoxide -c &quot;/usr/bin/vncserver %i&quot;</span><br><span class=\"line\">PIDFile=/home/linoxide/.vnc/%H%i.pid</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">vncpasswd</span><br><span class=\"line\">## 开放端口</span><br><span class=\"line\">## 重启服务</span><br><span class=\"line\">systemctl enable vncserver@:1.service</span><br><span class=\"line\">systemctl start vncserver@:1.service</span><br></pre></td></tr></table></figure>\n<h2 id=\"ubuntu-安装-vnc-viewer\"><a href=\"#ubuntu-安装-vnc-viewer\" class=\"headerlink\" title=\"ubuntu 安装 vnc viewer\"></a>ubuntu 安装 vnc viewer</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i VNC-Viewer-6.17.1113-Linux-x64.deb</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://my.oschina.net/huhaoren/blog/497394\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/huhaoren/blog/497394</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"centos-安装-vnc-server\"><a href=\"#centos-安装-vnc-server\" class=\"headerlink\" title=\"centos 安装 vnc server\"></a>centos 安装 vnc server</h2><p><strong>没有实现多用户配置</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install tigervnc-server -y</span><br><span class=\"line\">cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service</span><br><span class=\"line\"></span><br><span class=\"line\">## 然后打开这个配置文件/etc/systemd/system/vncserver@:1.service替换掉默认用户名 </span><br><span class=\"line\">## ExecStart=/sbin/runuser -l &lt;USER&gt; -c &quot;/usr/bin/vncserver %i&quot;</span><br><span class=\"line\">## PIDFile=/home/&lt;USER&gt;/.vnc/%H%i.pid</span><br><span class=\"line\">## 这里我直接用root 用户登录，所以我替换成</span><br><span class=\"line\">ExecStart=/sbin/runuser -l root -c &quot;/usr/bin/vncserver %i&quot;</span><br><span class=\"line\">PIDFile=/root/.vnc/%H%i.pid</span><br><span class=\"line\"></span><br><span class=\"line\">## 如果是其他用户的话比如linoxide替换如下</span><br><span class=\"line\">ExecStart=/sbin/runuser -l linoxide -c &quot;/usr/bin/vncserver %i&quot;</span><br><span class=\"line\">PIDFile=/home/linoxide/.vnc/%H%i.pid</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">vncpasswd</span><br><span class=\"line\">## 开放端口</span><br><span class=\"line\">## 重启服务</span><br><span class=\"line\">systemctl enable vncserver@:1.service</span><br><span class=\"line\">systemctl start vncserver@:1.service</span><br></pre></td></tr></table></figure>\n<h2 id=\"ubuntu-安装-vnc-viewer\"><a href=\"#ubuntu-安装-vnc-viewer\" class=\"headerlink\" title=\"ubuntu 安装 vnc viewer\"></a>ubuntu 安装 vnc viewer</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i VNC-Viewer-6.17.1113-Linux-x64.deb</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://my.oschina.net/huhaoren/blog/497394\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/huhaoren/blog/497394</a></p>\n</blockquote>\n"},{"title":"redis分布式锁","date":"2019-04-11T09:55:56.000Z","_content":"\n# 单机Redis实现分布式锁\n\n## 获取锁\n\n获取锁的过程很简单，客户端向Redis发送命令：\n\n```\nSET resource_name my_random_value NX PX 30000\n复制代码\n```\n\n`my_random_value`是由客户端生成的一个随机字符串，它要保证在足够长的一段时间内在所有客户端的所有获取锁的请求中都是唯一的。 NX表示只有当`resource_name`对应的key值不存在的时候才能SET成功。这保证了只有第一个请求的客户端才能获得锁，而其它客户端在锁被释放之前都无法获得锁。 PX 30000表示这个锁有一个30秒的自动过期时间。\n\n## 释放锁\n\n```\nif redis.call(\"get\",KEYS[1]) == ARGV[1] then\n    return redis.call(\"del\",KEYS[1])\nelse\n    return 0\nend\n复制代码\n```\n\n之前获取锁的时候生成的`my_random_value` 作为参数传到Lua脚本里面，作为：`ARGV[1]`,而 `resource_name`作为`KEYS[1]`。Lua脚本可以保证操作的原子性。\n\n## 关于单点Redis实现分布式锁的讨论\n\n网络上有文章说用如下命令获取锁:\n\n```\nSETNX resource_name my_random_value\nEXPIRE resource_name 30\n复制代码\n```\n\n由于这两个命令不是原子的。如果客户端在执行完`SETNX`后`crash`了，那么就没有机会执行`EXPIRE`了，导致它一直持有这个锁，其他的客户端就永远获取不到这个锁了。\n\n- 为什么`my_random_value` 要设置成随机值? 保证了一个客户端释放的锁是自己持有的那个锁。如若不然，可能出现锁不安全的情况。\n\n```\n客户端1获取锁成功。\n客户端1在某个操作上阻塞了很长时间。\n过期时间到了，锁自动释放了。\n客户端2获取到了对应同一个资源的锁。\n客户端1从阻塞中恢复过来，释放掉了客户端2持有的锁。\n复制代码\n```\n\n- 用 SETNX获取锁 网上大量文章说用如下命令获取锁：\n\n```\nSETNX lock.foo <current Unix time + lock timeout + 1>\n复制代码\n```\n\n原文在Redis对SETNX的官网说明，Redis官网文档建议用Set命令来代替，主要原因是SETNX不支持超时时间的设置。\n\n[redis.io/commands/se…](https://link.juejin.im?target=https%3A%2F%2Fredis.io%2Fcommands%2Fsetnx)\n\n# Redis集群实现分布式锁\n\n上面的讨论中我们有一个非常重要的假设：Redis是单点的。如果Redis是集群模式，我们考虑如下场景:\n\n```\n客户端1从Master获取了锁。\nMaster宕机了，存储锁的key还没有来得及同步到Slave上。\nSlave升级为Master。\n客户端2从新的Master获取到了对应同一个资源的锁。\n客户端1和客户端2同时持有了同一个资源的锁，锁不再具有安全性。\n复制代码\n```\n\n就此问题，Redis作者antirez写了RedLock算法来解决这种问题。\n\n## RedLock获取锁\n\n- 获取当前时间。\n- 按顺序依次向N个Redis节点执行获取锁的操作。这个获取操作跟前面基于单Redis节点的获取锁的过程相同，包含随机字符串my_random_value，也包含过期时间(比如PX 30000，即锁的有效时间)。为了保证在某个Redis节点不可用的时候算法能够继续运行，这个获取锁的操作还有一个超时时间(time out)，它要远小于锁的有效时间（几十毫秒量级）。客户端在向某个Redis节点获取锁失败以后，应该立即尝试下一个Redis节点。\n- 计算整个获取锁的过程总共消耗了多长时间，计算方法是用当前时间减去第1步记录的时间。如果客户端从大多数Redis节点（>= N/2+1）成功获取到了锁，并且获取锁总共消耗的时间没有超过锁的有效时间(lock validity time)，那么这时客户端才认为最终获取锁成功；否则，认为最终获取锁失败。\n- 如果最终获取锁成功了，那么这个锁的有效时间应该重新计算，它等于最初的锁的有效时间减去第3步计算出来的获取锁消耗的时间。\n- 如果最终获取锁失败了（可能由于获取到锁的Redis节点个数少于N/2+1，或者整个获取锁的过程消耗的时间超过了锁的最初有效时间），那么客户端应该立即向所有Redis节点发起释放锁的操作（即前面介绍的单机Redis Lua脚本释放锁的方法）。\n\n## RedLock释放锁\n\n客户端向所有Redis节点发起释放锁的操作，不管这些节点当时在获取锁的时候成功与否。\n\n## 关于RedLock的问题讨论\n\n- 如果有节点发生崩溃重启 假设一共有5个Redis节点：A, B, C, D, E。设想发生了如下的事件序列：\n\n```\n客户端1成功锁住了A, B, C，获取锁成功（但D和E没有锁住）。\n节点C崩溃重启了，但客户端1在C上加的锁没有持久化下来，丢失了。\n节点C重启后，客户端2锁住了C, D, E，获取锁成功。\n客户端1和客户端2同时获得了锁。\n复制代码\n```\n\n为了应对这一问题，antirez又提出了延迟重启(delayed restarts)的概念。也就是说，一个节点崩溃后，先不立即重启它，而是等待一段时间再重启，这段时间应该大于锁的有效时间(lock validity time)。这样的话，这个节点在重启前所参与的锁都会过期，它在重启后就不会对现有的锁造成影响。\n\n- 如果客户端长期阻塞导致锁过期\n\n  ![](http://wumu.sciento.cn/img/16a07877f982bd5c.png)\n\n解释一下这个时序图，客户端1在获得锁之后发生了很长时间的GC pause，在此期间，它获得的锁过期了，而客户端2获得了锁。当客户端1从GC pause中恢复过来的时候，它不知道自己持有的锁已经过期了，它依然向共享资源（上图中是一个存储服务）发起了写数据请求，而这时锁实际上被客户端2持有，因此两个客户端的写请求就有可能冲突（锁的互斥作用失效了）。\n\n如何解决这个问题呢?引入了fencing token的概念：\n\n![](http://wumu.sciento.cn/img/16a07879db4e469e.png)\n\n客户端1先获取到的锁，因此有一个较小的fencing token，等于33，而客户端2后获取到的锁，有一个较大的fencing token，等于34。客户端1从GC pause中恢复过来之后，依然是向存储服务发送访问请求，但是带了fencing token = 33。存储服务发现它之前已经处理过34的请求，所以会拒绝掉这次33的请求。这样就避免了冲突。\n\n但是其实这已经超出了Redis实现分布式锁的范围，单纯用Redis没有命令来实现生成Token。\n\n- 时钟跳跃问题 假设有5个Redis节点A, B, C, D, E。\n\n```\n客户端1从Redis节点A, B, C成功获取了锁（多数节点）。由于网络问题，与D和E通信失败。\n节点C上的时钟发生了向前跳跃，导致它上面维护的锁快速过期。\n客户端2从Redis节点C, D, E成功获取了同一个资源的锁（多数节点）。\n客户端1和客户端2现在都认为自己持有了锁。\n这个问题用Redis实现分布式锁暂时无解。而生产环境这种情况是存在的。\n复制代码\n```\n\n结论 Redis并不能实现严格意义上的分布式锁。但是这并不意味着上面讨论的方案一无是处。如果你的应用场景为了效率(efficiency)，协调各个客户端避免做重复的工作，即使锁失效了，只是可能把某些操作多做一遍而已，不会产生其它的不良后果。但是如果你的应用场景是为了正确性(correctness)，那么用Redis实现分布式锁并不合适，会存在各种各样的问题，且解决起来就很复杂，为了正确性，需要使用zab、raft共识算法，或者使用带有事务的数据库来实现严格意义上的分布式锁。\n\n参考资料 Distributed locks with Redis 基于Redis的分布式锁到底安全吗（上）？ - 铁蕾的个人博客 [martin.kleppmann.com/2016/02/08/…](https://link.juejin.im?target=https%3A%2F%2Fmartin.kleppmann.com%2F2016%2F02%2F08%2Fhow-to-do-distributed-locking.html)\n\n","source":"_posts/redis分布式锁.md","raw":"---\n\ntitle: redis分布式锁\ndate: 2019-04-11 17:55:56\ntags:\n- redis\n---\n\n# 单机Redis实现分布式锁\n\n## 获取锁\n\n获取锁的过程很简单，客户端向Redis发送命令：\n\n```\nSET resource_name my_random_value NX PX 30000\n复制代码\n```\n\n`my_random_value`是由客户端生成的一个随机字符串，它要保证在足够长的一段时间内在所有客户端的所有获取锁的请求中都是唯一的。 NX表示只有当`resource_name`对应的key值不存在的时候才能SET成功。这保证了只有第一个请求的客户端才能获得锁，而其它客户端在锁被释放之前都无法获得锁。 PX 30000表示这个锁有一个30秒的自动过期时间。\n\n## 释放锁\n\n```\nif redis.call(\"get\",KEYS[1]) == ARGV[1] then\n    return redis.call(\"del\",KEYS[1])\nelse\n    return 0\nend\n复制代码\n```\n\n之前获取锁的时候生成的`my_random_value` 作为参数传到Lua脚本里面，作为：`ARGV[1]`,而 `resource_name`作为`KEYS[1]`。Lua脚本可以保证操作的原子性。\n\n## 关于单点Redis实现分布式锁的讨论\n\n网络上有文章说用如下命令获取锁:\n\n```\nSETNX resource_name my_random_value\nEXPIRE resource_name 30\n复制代码\n```\n\n由于这两个命令不是原子的。如果客户端在执行完`SETNX`后`crash`了，那么就没有机会执行`EXPIRE`了，导致它一直持有这个锁，其他的客户端就永远获取不到这个锁了。\n\n- 为什么`my_random_value` 要设置成随机值? 保证了一个客户端释放的锁是自己持有的那个锁。如若不然，可能出现锁不安全的情况。\n\n```\n客户端1获取锁成功。\n客户端1在某个操作上阻塞了很长时间。\n过期时间到了，锁自动释放了。\n客户端2获取到了对应同一个资源的锁。\n客户端1从阻塞中恢复过来，释放掉了客户端2持有的锁。\n复制代码\n```\n\n- 用 SETNX获取锁 网上大量文章说用如下命令获取锁：\n\n```\nSETNX lock.foo <current Unix time + lock timeout + 1>\n复制代码\n```\n\n原文在Redis对SETNX的官网说明，Redis官网文档建议用Set命令来代替，主要原因是SETNX不支持超时时间的设置。\n\n[redis.io/commands/se…](https://link.juejin.im?target=https%3A%2F%2Fredis.io%2Fcommands%2Fsetnx)\n\n# Redis集群实现分布式锁\n\n上面的讨论中我们有一个非常重要的假设：Redis是单点的。如果Redis是集群模式，我们考虑如下场景:\n\n```\n客户端1从Master获取了锁。\nMaster宕机了，存储锁的key还没有来得及同步到Slave上。\nSlave升级为Master。\n客户端2从新的Master获取到了对应同一个资源的锁。\n客户端1和客户端2同时持有了同一个资源的锁，锁不再具有安全性。\n复制代码\n```\n\n就此问题，Redis作者antirez写了RedLock算法来解决这种问题。\n\n## RedLock获取锁\n\n- 获取当前时间。\n- 按顺序依次向N个Redis节点执行获取锁的操作。这个获取操作跟前面基于单Redis节点的获取锁的过程相同，包含随机字符串my_random_value，也包含过期时间(比如PX 30000，即锁的有效时间)。为了保证在某个Redis节点不可用的时候算法能够继续运行，这个获取锁的操作还有一个超时时间(time out)，它要远小于锁的有效时间（几十毫秒量级）。客户端在向某个Redis节点获取锁失败以后，应该立即尝试下一个Redis节点。\n- 计算整个获取锁的过程总共消耗了多长时间，计算方法是用当前时间减去第1步记录的时间。如果客户端从大多数Redis节点（>= N/2+1）成功获取到了锁，并且获取锁总共消耗的时间没有超过锁的有效时间(lock validity time)，那么这时客户端才认为最终获取锁成功；否则，认为最终获取锁失败。\n- 如果最终获取锁成功了，那么这个锁的有效时间应该重新计算，它等于最初的锁的有效时间减去第3步计算出来的获取锁消耗的时间。\n- 如果最终获取锁失败了（可能由于获取到锁的Redis节点个数少于N/2+1，或者整个获取锁的过程消耗的时间超过了锁的最初有效时间），那么客户端应该立即向所有Redis节点发起释放锁的操作（即前面介绍的单机Redis Lua脚本释放锁的方法）。\n\n## RedLock释放锁\n\n客户端向所有Redis节点发起释放锁的操作，不管这些节点当时在获取锁的时候成功与否。\n\n## 关于RedLock的问题讨论\n\n- 如果有节点发生崩溃重启 假设一共有5个Redis节点：A, B, C, D, E。设想发生了如下的事件序列：\n\n```\n客户端1成功锁住了A, B, C，获取锁成功（但D和E没有锁住）。\n节点C崩溃重启了，但客户端1在C上加的锁没有持久化下来，丢失了。\n节点C重启后，客户端2锁住了C, D, E，获取锁成功。\n客户端1和客户端2同时获得了锁。\n复制代码\n```\n\n为了应对这一问题，antirez又提出了延迟重启(delayed restarts)的概念。也就是说，一个节点崩溃后，先不立即重启它，而是等待一段时间再重启，这段时间应该大于锁的有效时间(lock validity time)。这样的话，这个节点在重启前所参与的锁都会过期，它在重启后就不会对现有的锁造成影响。\n\n- 如果客户端长期阻塞导致锁过期\n\n  ![](http://wumu.sciento.cn/img/16a07877f982bd5c.png)\n\n解释一下这个时序图，客户端1在获得锁之后发生了很长时间的GC pause，在此期间，它获得的锁过期了，而客户端2获得了锁。当客户端1从GC pause中恢复过来的时候，它不知道自己持有的锁已经过期了，它依然向共享资源（上图中是一个存储服务）发起了写数据请求，而这时锁实际上被客户端2持有，因此两个客户端的写请求就有可能冲突（锁的互斥作用失效了）。\n\n如何解决这个问题呢?引入了fencing token的概念：\n\n![](http://wumu.sciento.cn/img/16a07879db4e469e.png)\n\n客户端1先获取到的锁，因此有一个较小的fencing token，等于33，而客户端2后获取到的锁，有一个较大的fencing token，等于34。客户端1从GC pause中恢复过来之后，依然是向存储服务发送访问请求，但是带了fencing token = 33。存储服务发现它之前已经处理过34的请求，所以会拒绝掉这次33的请求。这样就避免了冲突。\n\n但是其实这已经超出了Redis实现分布式锁的范围，单纯用Redis没有命令来实现生成Token。\n\n- 时钟跳跃问题 假设有5个Redis节点A, B, C, D, E。\n\n```\n客户端1从Redis节点A, B, C成功获取了锁（多数节点）。由于网络问题，与D和E通信失败。\n节点C上的时钟发生了向前跳跃，导致它上面维护的锁快速过期。\n客户端2从Redis节点C, D, E成功获取了同一个资源的锁（多数节点）。\n客户端1和客户端2现在都认为自己持有了锁。\n这个问题用Redis实现分布式锁暂时无解。而生产环境这种情况是存在的。\n复制代码\n```\n\n结论 Redis并不能实现严格意义上的分布式锁。但是这并不意味着上面讨论的方案一无是处。如果你的应用场景为了效率(efficiency)，协调各个客户端避免做重复的工作，即使锁失效了，只是可能把某些操作多做一遍而已，不会产生其它的不良后果。但是如果你的应用场景是为了正确性(correctness)，那么用Redis实现分布式锁并不合适，会存在各种各样的问题，且解决起来就很复杂，为了正确性，需要使用zab、raft共识算法，或者使用带有事务的数据库来实现严格意义上的分布式锁。\n\n参考资料 Distributed locks with Redis 基于Redis的分布式锁到底安全吗（上）？ - 铁蕾的个人博客 [martin.kleppmann.com/2016/02/08/…](https://link.juejin.im?target=https%3A%2F%2Fmartin.kleppmann.com%2F2016%2F02%2F08%2Fhow-to-do-distributed-locking.html)\n\n","slug":"redis分布式锁","published":1,"updated":"2019-10-14T09:01:08.227Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a42n001jic1ym2rlwc6h","content":"<h1 id=\"单机Redis实现分布式锁\"><a href=\"#单机Redis实现分布式锁\" class=\"headerlink\" title=\"单机Redis实现分布式锁\"></a>单机Redis实现分布式锁</h1><h2 id=\"获取锁\"><a href=\"#获取锁\" class=\"headerlink\" title=\"获取锁\"></a>获取锁</h2><p>获取锁的过程很简单，客户端向Redis发送命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET resource_name my_random_value NX PX 30000</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p><code>my_random_value</code>是由客户端生成的一个随机字符串，它要保证在足够长的一段时间内在所有客户端的所有获取锁的请求中都是唯一的。 NX表示只有当<code>resource_name</code>对应的key值不存在的时候才能SET成功。这保证了只有第一个请求的客户端才能获得锁，而其它客户端在锁被释放之前都无法获得锁。 PX 30000表示这个锁有一个30秒的自动过期时间。</p>\n<h2 id=\"释放锁\"><a href=\"#释放锁\" class=\"headerlink\" title=\"释放锁\"></a>释放锁</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if redis.call(&quot;get&quot;,KEYS[1]) == ARGV[1] then</span><br><span class=\"line\">    return redis.call(&quot;del&quot;,KEYS[1])</span><br><span class=\"line\">else</span><br><span class=\"line\">    return 0</span><br><span class=\"line\">end</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>之前获取锁的时候生成的<code>my_random_value</code> 作为参数传到Lua脚本里面，作为：<code>ARGV[1]</code>,而 <code>resource_name</code>作为<code>KEYS[1]</code>。Lua脚本可以保证操作的原子性。</p>\n<h2 id=\"关于单点Redis实现分布式锁的讨论\"><a href=\"#关于单点Redis实现分布式锁的讨论\" class=\"headerlink\" title=\"关于单点Redis实现分布式锁的讨论\"></a>关于单点Redis实现分布式锁的讨论</h2><p>网络上有文章说用如下命令获取锁:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SETNX resource_name my_random_value</span><br><span class=\"line\">EXPIRE resource_name 30</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>由于这两个命令不是原子的。如果客户端在执行完<code>SETNX</code>后<code>crash</code>了，那么就没有机会执行<code>EXPIRE</code>了，导致它一直持有这个锁，其他的客户端就永远获取不到这个锁了。</p>\n<ul>\n<li>为什么<code>my_random_value</code> 要设置成随机值? 保证了一个客户端释放的锁是自己持有的那个锁。如若不然，可能出现锁不安全的情况。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端1获取锁成功。</span><br><span class=\"line\">客户端1在某个操作上阻塞了很长时间。</span><br><span class=\"line\">过期时间到了，锁自动释放了。</span><br><span class=\"line\">客户端2获取到了对应同一个资源的锁。</span><br><span class=\"line\">客户端1从阻塞中恢复过来，释放掉了客户端2持有的锁。</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<ul>\n<li>用 SETNX获取锁 网上大量文章说用如下命令获取锁：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SETNX lock.foo &lt;current Unix time + lock timeout + 1&gt;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>原文在Redis对SETNX的官网说明，Redis官网文档建议用Set命令来代替，主要原因是SETNX不支持超时时间的设置。</p>\n<p><a href=\"https://link.juejin.im?target=https%3A%2F%2Fredis.io%2Fcommands%2Fsetnx\" target=\"_blank\" rel=\"noopener\">redis.io/commands/se…</a></p>\n<h1 id=\"Redis集群实现分布式锁\"><a href=\"#Redis集群实现分布式锁\" class=\"headerlink\" title=\"Redis集群实现分布式锁\"></a>Redis集群实现分布式锁</h1><p>上面的讨论中我们有一个非常重要的假设：Redis是单点的。如果Redis是集群模式，我们考虑如下场景:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端1从Master获取了锁。</span><br><span class=\"line\">Master宕机了，存储锁的key还没有来得及同步到Slave上。</span><br><span class=\"line\">Slave升级为Master。</span><br><span class=\"line\">客户端2从新的Master获取到了对应同一个资源的锁。</span><br><span class=\"line\">客户端1和客户端2同时持有了同一个资源的锁，锁不再具有安全性。</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>就此问题，Redis作者antirez写了RedLock算法来解决这种问题。</p>\n<h2 id=\"RedLock获取锁\"><a href=\"#RedLock获取锁\" class=\"headerlink\" title=\"RedLock获取锁\"></a>RedLock获取锁</h2><ul>\n<li>获取当前时间。</li>\n<li>按顺序依次向N个Redis节点执行获取锁的操作。这个获取操作跟前面基于单Redis节点的获取锁的过程相同，包含随机字符串my_random_value，也包含过期时间(比如PX 30000，即锁的有效时间)。为了保证在某个Redis节点不可用的时候算法能够继续运行，这个获取锁的操作还有一个超时时间(time out)，它要远小于锁的有效时间（几十毫秒量级）。客户端在向某个Redis节点获取锁失败以后，应该立即尝试下一个Redis节点。</li>\n<li>计算整个获取锁的过程总共消耗了多长时间，计算方法是用当前时间减去第1步记录的时间。如果客户端从大多数Redis节点（&gt;= N/2+1）成功获取到了锁，并且获取锁总共消耗的时间没有超过锁的有效时间(lock validity time)，那么这时客户端才认为最终获取锁成功；否则，认为最终获取锁失败。</li>\n<li>如果最终获取锁成功了，那么这个锁的有效时间应该重新计算，它等于最初的锁的有效时间减去第3步计算出来的获取锁消耗的时间。</li>\n<li>如果最终获取锁失败了（可能由于获取到锁的Redis节点个数少于N/2+1，或者整个获取锁的过程消耗的时间超过了锁的最初有效时间），那么客户端应该立即向所有Redis节点发起释放锁的操作（即前面介绍的单机Redis Lua脚本释放锁的方法）。</li>\n</ul>\n<h2 id=\"RedLock释放锁\"><a href=\"#RedLock释放锁\" class=\"headerlink\" title=\"RedLock释放锁\"></a>RedLock释放锁</h2><p>客户端向所有Redis节点发起释放锁的操作，不管这些节点当时在获取锁的时候成功与否。</p>\n<h2 id=\"关于RedLock的问题讨论\"><a href=\"#关于RedLock的问题讨论\" class=\"headerlink\" title=\"关于RedLock的问题讨论\"></a>关于RedLock的问题讨论</h2><ul>\n<li>如果有节点发生崩溃重启 假设一共有5个Redis节点：A, B, C, D, E。设想发生了如下的事件序列：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端1成功锁住了A, B, C，获取锁成功（但D和E没有锁住）。</span><br><span class=\"line\">节点C崩溃重启了，但客户端1在C上加的锁没有持久化下来，丢失了。</span><br><span class=\"line\">节点C重启后，客户端2锁住了C, D, E，获取锁成功。</span><br><span class=\"line\">客户端1和客户端2同时获得了锁。</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>为了应对这一问题，antirez又提出了延迟重启(delayed restarts)的概念。也就是说，一个节点崩溃后，先不立即重启它，而是等待一段时间再重启，这段时间应该大于锁的有效时间(lock validity time)。这样的话，这个节点在重启前所参与的锁都会过期，它在重启后就不会对现有的锁造成影响。</p>\n<ul>\n<li><p>如果客户端长期阻塞导致锁过期</p>\n<p><img src=\"http://wumu.sciento.cn/img/16a07877f982bd5c.png\" alt=\"\"></p>\n</li>\n</ul>\n<p>解释一下这个时序图，客户端1在获得锁之后发生了很长时间的GC pause，在此期间，它获得的锁过期了，而客户端2获得了锁。当客户端1从GC pause中恢复过来的时候，它不知道自己持有的锁已经过期了，它依然向共享资源（上图中是一个存储服务）发起了写数据请求，而这时锁实际上被客户端2持有，因此两个客户端的写请求就有可能冲突（锁的互斥作用失效了）。</p>\n<p>如何解决这个问题呢?引入了fencing token的概念：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://wumu.sciento.cn/img/16a07879db4e469e.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>客户端1先获取到的锁，因此有一个较小的fencing token，等于33，而客户端2后获取到的锁，有一个较大的fencing token，等于34。客户端1从GC pause中恢复过来之后，依然是向存储服务发送访问请求，但是带了fencing token = 33。存储服务发现它之前已经处理过34的请求，所以会拒绝掉这次33的请求。这样就避免了冲突。</p>\n<p>但是其实这已经超出了Redis实现分布式锁的范围，单纯用Redis没有命令来实现生成Token。</p>\n<ul>\n<li>时钟跳跃问题 假设有5个Redis节点A, B, C, D, E。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端1从Redis节点A, B, C成功获取了锁（多数节点）。由于网络问题，与D和E通信失败。</span><br><span class=\"line\">节点C上的时钟发生了向前跳跃，导致它上面维护的锁快速过期。</span><br><span class=\"line\">客户端2从Redis节点C, D, E成功获取了同一个资源的锁（多数节点）。</span><br><span class=\"line\">客户端1和客户端2现在都认为自己持有了锁。</span><br><span class=\"line\">这个问题用Redis实现分布式锁暂时无解。而生产环境这种情况是存在的。</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>结论 Redis并不能实现严格意义上的分布式锁。但是这并不意味着上面讨论的方案一无是处。如果你的应用场景为了效率(efficiency)，协调各个客户端避免做重复的工作，即使锁失效了，只是可能把某些操作多做一遍而已，不会产生其它的不良后果。但是如果你的应用场景是为了正确性(correctness)，那么用Redis实现分布式锁并不合适，会存在各种各样的问题，且解决起来就很复杂，为了正确性，需要使用zab、raft共识算法，或者使用带有事务的数据库来实现严格意义上的分布式锁。</p>\n<p>参考资料 Distributed locks with Redis 基于Redis的分布式锁到底安全吗（上）？ - 铁蕾的个人博客 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fmartin.kleppmann.com%2F2016%2F02%2F08%2Fhow-to-do-distributed-locking.html\" target=\"_blank\" rel=\"noopener\">martin.kleppmann.com/2016/02/08/…</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"单机Redis实现分布式锁\"><a href=\"#单机Redis实现分布式锁\" class=\"headerlink\" title=\"单机Redis实现分布式锁\"></a>单机Redis实现分布式锁</h1><h2 id=\"获取锁\"><a href=\"#获取锁\" class=\"headerlink\" title=\"获取锁\"></a>获取锁</h2><p>获取锁的过程很简单，客户端向Redis发送命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET resource_name my_random_value NX PX 30000</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p><code>my_random_value</code>是由客户端生成的一个随机字符串，它要保证在足够长的一段时间内在所有客户端的所有获取锁的请求中都是唯一的。 NX表示只有当<code>resource_name</code>对应的key值不存在的时候才能SET成功。这保证了只有第一个请求的客户端才能获得锁，而其它客户端在锁被释放之前都无法获得锁。 PX 30000表示这个锁有一个30秒的自动过期时间。</p>\n<h2 id=\"释放锁\"><a href=\"#释放锁\" class=\"headerlink\" title=\"释放锁\"></a>释放锁</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if redis.call(&quot;get&quot;,KEYS[1]) == ARGV[1] then</span><br><span class=\"line\">    return redis.call(&quot;del&quot;,KEYS[1])</span><br><span class=\"line\">else</span><br><span class=\"line\">    return 0</span><br><span class=\"line\">end</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>之前获取锁的时候生成的<code>my_random_value</code> 作为参数传到Lua脚本里面，作为：<code>ARGV[1]</code>,而 <code>resource_name</code>作为<code>KEYS[1]</code>。Lua脚本可以保证操作的原子性。</p>\n<h2 id=\"关于单点Redis实现分布式锁的讨论\"><a href=\"#关于单点Redis实现分布式锁的讨论\" class=\"headerlink\" title=\"关于单点Redis实现分布式锁的讨论\"></a>关于单点Redis实现分布式锁的讨论</h2><p>网络上有文章说用如下命令获取锁:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SETNX resource_name my_random_value</span><br><span class=\"line\">EXPIRE resource_name 30</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>由于这两个命令不是原子的。如果客户端在执行完<code>SETNX</code>后<code>crash</code>了，那么就没有机会执行<code>EXPIRE</code>了，导致它一直持有这个锁，其他的客户端就永远获取不到这个锁了。</p>\n<ul>\n<li>为什么<code>my_random_value</code> 要设置成随机值? 保证了一个客户端释放的锁是自己持有的那个锁。如若不然，可能出现锁不安全的情况。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端1获取锁成功。</span><br><span class=\"line\">客户端1在某个操作上阻塞了很长时间。</span><br><span class=\"line\">过期时间到了，锁自动释放了。</span><br><span class=\"line\">客户端2获取到了对应同一个资源的锁。</span><br><span class=\"line\">客户端1从阻塞中恢复过来，释放掉了客户端2持有的锁。</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<ul>\n<li>用 SETNX获取锁 网上大量文章说用如下命令获取锁：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SETNX lock.foo &lt;current Unix time + lock timeout + 1&gt;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>原文在Redis对SETNX的官网说明，Redis官网文档建议用Set命令来代替，主要原因是SETNX不支持超时时间的设置。</p>\n<p><a href=\"https://link.juejin.im?target=https%3A%2F%2Fredis.io%2Fcommands%2Fsetnx\" target=\"_blank\" rel=\"noopener\">redis.io/commands/se…</a></p>\n<h1 id=\"Redis集群实现分布式锁\"><a href=\"#Redis集群实现分布式锁\" class=\"headerlink\" title=\"Redis集群实现分布式锁\"></a>Redis集群实现分布式锁</h1><p>上面的讨论中我们有一个非常重要的假设：Redis是单点的。如果Redis是集群模式，我们考虑如下场景:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端1从Master获取了锁。</span><br><span class=\"line\">Master宕机了，存储锁的key还没有来得及同步到Slave上。</span><br><span class=\"line\">Slave升级为Master。</span><br><span class=\"line\">客户端2从新的Master获取到了对应同一个资源的锁。</span><br><span class=\"line\">客户端1和客户端2同时持有了同一个资源的锁，锁不再具有安全性。</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>就此问题，Redis作者antirez写了RedLock算法来解决这种问题。</p>\n<h2 id=\"RedLock获取锁\"><a href=\"#RedLock获取锁\" class=\"headerlink\" title=\"RedLock获取锁\"></a>RedLock获取锁</h2><ul>\n<li>获取当前时间。</li>\n<li>按顺序依次向N个Redis节点执行获取锁的操作。这个获取操作跟前面基于单Redis节点的获取锁的过程相同，包含随机字符串my_random_value，也包含过期时间(比如PX 30000，即锁的有效时间)。为了保证在某个Redis节点不可用的时候算法能够继续运行，这个获取锁的操作还有一个超时时间(time out)，它要远小于锁的有效时间（几十毫秒量级）。客户端在向某个Redis节点获取锁失败以后，应该立即尝试下一个Redis节点。</li>\n<li>计算整个获取锁的过程总共消耗了多长时间，计算方法是用当前时间减去第1步记录的时间。如果客户端从大多数Redis节点（&gt;= N/2+1）成功获取到了锁，并且获取锁总共消耗的时间没有超过锁的有效时间(lock validity time)，那么这时客户端才认为最终获取锁成功；否则，认为最终获取锁失败。</li>\n<li>如果最终获取锁成功了，那么这个锁的有效时间应该重新计算，它等于最初的锁的有效时间减去第3步计算出来的获取锁消耗的时间。</li>\n<li>如果最终获取锁失败了（可能由于获取到锁的Redis节点个数少于N/2+1，或者整个获取锁的过程消耗的时间超过了锁的最初有效时间），那么客户端应该立即向所有Redis节点发起释放锁的操作（即前面介绍的单机Redis Lua脚本释放锁的方法）。</li>\n</ul>\n<h2 id=\"RedLock释放锁\"><a href=\"#RedLock释放锁\" class=\"headerlink\" title=\"RedLock释放锁\"></a>RedLock释放锁</h2><p>客户端向所有Redis节点发起释放锁的操作，不管这些节点当时在获取锁的时候成功与否。</p>\n<h2 id=\"关于RedLock的问题讨论\"><a href=\"#关于RedLock的问题讨论\" class=\"headerlink\" title=\"关于RedLock的问题讨论\"></a>关于RedLock的问题讨论</h2><ul>\n<li>如果有节点发生崩溃重启 假设一共有5个Redis节点：A, B, C, D, E。设想发生了如下的事件序列：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端1成功锁住了A, B, C，获取锁成功（但D和E没有锁住）。</span><br><span class=\"line\">节点C崩溃重启了，但客户端1在C上加的锁没有持久化下来，丢失了。</span><br><span class=\"line\">节点C重启后，客户端2锁住了C, D, E，获取锁成功。</span><br><span class=\"line\">客户端1和客户端2同时获得了锁。</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>为了应对这一问题，antirez又提出了延迟重启(delayed restarts)的概念。也就是说，一个节点崩溃后，先不立即重启它，而是等待一段时间再重启，这段时间应该大于锁的有效时间(lock validity time)。这样的话，这个节点在重启前所参与的锁都会过期，它在重启后就不会对现有的锁造成影响。</p>\n<ul>\n<li><p>如果客户端长期阻塞导致锁过期</p>\n<p><img src=\"http://wumu.sciento.cn/img/16a07877f982bd5c.png\" alt=\"\"></p>\n</li>\n</ul>\n<p>解释一下这个时序图，客户端1在获得锁之后发生了很长时间的GC pause，在此期间，它获得的锁过期了，而客户端2获得了锁。当客户端1从GC pause中恢复过来的时候，它不知道自己持有的锁已经过期了，它依然向共享资源（上图中是一个存储服务）发起了写数据请求，而这时锁实际上被客户端2持有，因此两个客户端的写请求就有可能冲突（锁的互斥作用失效了）。</p>\n<p>如何解决这个问题呢?引入了fencing token的概念：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://wumu.sciento.cn/img/16a07879db4e469e.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>客户端1先获取到的锁，因此有一个较小的fencing token，等于33，而客户端2后获取到的锁，有一个较大的fencing token，等于34。客户端1从GC pause中恢复过来之后，依然是向存储服务发送访问请求，但是带了fencing token = 33。存储服务发现它之前已经处理过34的请求，所以会拒绝掉这次33的请求。这样就避免了冲突。</p>\n<p>但是其实这已经超出了Redis实现分布式锁的范围，单纯用Redis没有命令来实现生成Token。</p>\n<ul>\n<li>时钟跳跃问题 假设有5个Redis节点A, B, C, D, E。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端1从Redis节点A, B, C成功获取了锁（多数节点）。由于网络问题，与D和E通信失败。</span><br><span class=\"line\">节点C上的时钟发生了向前跳跃，导致它上面维护的锁快速过期。</span><br><span class=\"line\">客户端2从Redis节点C, D, E成功获取了同一个资源的锁（多数节点）。</span><br><span class=\"line\">客户端1和客户端2现在都认为自己持有了锁。</span><br><span class=\"line\">这个问题用Redis实现分布式锁暂时无解。而生产环境这种情况是存在的。</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>结论 Redis并不能实现严格意义上的分布式锁。但是这并不意味着上面讨论的方案一无是处。如果你的应用场景为了效率(efficiency)，协调各个客户端避免做重复的工作，即使锁失效了，只是可能把某些操作多做一遍而已，不会产生其它的不良后果。但是如果你的应用场景是为了正确性(correctness)，那么用Redis实现分布式锁并不合适，会存在各种各样的问题，且解决起来就很复杂，为了正确性，需要使用zab、raft共识算法，或者使用带有事务的数据库来实现严格意义上的分布式锁。</p>\n<p>参考资料 Distributed locks with Redis 基于Redis的分布式锁到底安全吗（上）？ - 铁蕾的个人博客 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fmartin.kleppmann.com%2F2016%2F02%2F08%2Fhow-to-do-distributed-locking.html\" target=\"_blank\" rel=\"noopener\">martin.kleppmann.com/2016/02/08/…</a></p>\n"},{"title":"springboot-mongodb使用","date":"2019-01-04T01:43:06.000Z","_content":"\n# 基本注解\n\n1. `@id`\n2. `@Document`\n3. `@DBRef`\n4. `$Indexed`\n5. `@CompoundIndex`\n6. `@GenSpatialIndexed`\n7. `@Transient`\n8. `@PersistenceConstructor`\n\n","source":"_posts/springboot-mongodb使用.md","raw":"---\ntitle: springboot-mongodb使用\ndate: 2019-01-04 09:43:06\ntags:\n- springboot\n- mongodb\n---\n\n# 基本注解\n\n1. `@id`\n2. `@Document`\n3. `@DBRef`\n4. `$Indexed`\n5. `@CompoundIndex`\n6. `@GenSpatialIndexed`\n7. `@Transient`\n8. `@PersistenceConstructor`\n\n","slug":"springboot-mongodb使用","published":1,"updated":"2019-10-14T09:01:08.263Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a42o001lic1yihv5q0n5","content":"<h1 id=\"基本注解\"><a href=\"#基本注解\" class=\"headerlink\" title=\"基本注解\"></a>基本注解</h1><ol>\n<li><code>@id</code></li>\n<li><code>@Document</code></li>\n<li><code>@DBRef</code></li>\n<li><code>$Indexed</code></li>\n<li><code>@CompoundIndex</code></li>\n<li><code>@GenSpatialIndexed</code></li>\n<li><code>@Transient</code></li>\n<li><code>@PersistenceConstructor</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基本注解\"><a href=\"#基本注解\" class=\"headerlink\" title=\"基本注解\"></a>基本注解</h1><ol>\n<li><code>@id</code></li>\n<li><code>@Document</code></li>\n<li><code>@DBRef</code></li>\n<li><code>$Indexed</code></li>\n<li><code>@CompoundIndex</code></li>\n<li><code>@GenSpatialIndexed</code></li>\n<li><code>@Transient</code></li>\n<li><code>@PersistenceConstructor</code></li>\n</ol>\n"},{"title":"protobuf使用","date":"2019-04-10T02:31:04.000Z","_content":"\n# 安装\n\n```\nwget https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protobuf-all-3.6.1.zip\nunzop protobuf-all-3.6.1.zip\ncd protobuf-all-3.6.1\n./configure && make && make install\n```\n\n# 语法规则\n\n```\n// 声明版本，默认是proto2\nsyntax = \"proto3\";\n\n// 声明包名\npackage tutorial\noption java_package = \"com.example.tutorial\";\n// java类名\noption java_outer_classname = \"AddressBookProtos\";\n\nmessage Person {\n    required string name =1;\n    required int32 id = 2;\n    optional string email = 3;\n    \n    enum PhoneType {\n        MOBILE = 0;\n        HOME = 1;\n        WORK = 2;\n    }\n    \n    message PhoneNumber {\n        required string number = 1;\n        optional PhoneType type = 2[default = HOME]; \n    }\n    repeated PhoneNumber phones = 4;\n}\n\nmessage AddressBook {\n    repreated Person people = 1;\n}\n\n// 保留字段，编程过程中某些功能没有想好，可以先把该tag 进行保留，以备以后使用。\nmessage Foo {\n  reserved 2, 15, 9 to 11;\n  reserved \"foo\", \"bar\";\n}\n```\n\n# 编码\n\n> https://blog.csdn.net/zxhoo/article/details/53228303\n\n# 方法\n\n1. Standard Message Methods\n\n- `isInitialized()`: checks if all the required fields have been set.\n- `toString()`: returns a human-readable representation of the message, particularly useful for debugging.\n- `mergeFrom(Message other)`: (builder only) merges the contents of `other` into this message, overwriting singular scalar fields, merging composite fields, and concatenating repeated fields.\n- `clear()`: (builder only) clears all the fields back to the empty state.\n\n1. Parsing and Serialization\n\n- `byte[] toByteArray();`: serializes the message and returns a byte array containing its raw bytes.\n- `static Person parseFrom(byte[] data);`: parses a message from the given byte array.\n- `void writeTo(OutputStream output);`: serializes the message and writes it to an `OutputStream`.\n- `static Person parseFrom(InputStream input);`: reads and parses a message from an `InputStream`.\n\n# 编译\n\n# 注意\n\n1. 升级协议\n\n- you *must not* change the tag numbers of any existing fields.\n- you *must not* add or delete any required fields.\n- you *may* delete optional or repeated fields.\n- you *may* add new optional or repeated fields but you must use fresh tag numbers (i.e. tag numbers that were never used in this protocol buffer, not even by deleted fields).\n\n1. protobuf对repeated压缩不够好，所以尽量在后面加上[packed = true]。\n2. 不要让protobuf对象成为全局变量或者类成员，因为其clear方法只会把占用的内存空间清零，而不会释放，使得进程空间越来越大，可参考[《Protobuf使用不当导致的程序内存上涨问题》](http://www.kuqin.com/shuoit/20141117/343247.html)。\n\n> https://www.jianshu.com/p/27fdf44dd63b","source":"_posts/protobuf使用.md","raw":"---\ntitle: protobuf使用\ndate: 2019-04-10 10:31:04\ntags:\n- go\n---\n\n# 安装\n\n```\nwget https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protobuf-all-3.6.1.zip\nunzop protobuf-all-3.6.1.zip\ncd protobuf-all-3.6.1\n./configure && make && make install\n```\n\n# 语法规则\n\n```\n// 声明版本，默认是proto2\nsyntax = \"proto3\";\n\n// 声明包名\npackage tutorial\noption java_package = \"com.example.tutorial\";\n// java类名\noption java_outer_classname = \"AddressBookProtos\";\n\nmessage Person {\n    required string name =1;\n    required int32 id = 2;\n    optional string email = 3;\n    \n    enum PhoneType {\n        MOBILE = 0;\n        HOME = 1;\n        WORK = 2;\n    }\n    \n    message PhoneNumber {\n        required string number = 1;\n        optional PhoneType type = 2[default = HOME]; \n    }\n    repeated PhoneNumber phones = 4;\n}\n\nmessage AddressBook {\n    repreated Person people = 1;\n}\n\n// 保留字段，编程过程中某些功能没有想好，可以先把该tag 进行保留，以备以后使用。\nmessage Foo {\n  reserved 2, 15, 9 to 11;\n  reserved \"foo\", \"bar\";\n}\n```\n\n# 编码\n\n> https://blog.csdn.net/zxhoo/article/details/53228303\n\n# 方法\n\n1. Standard Message Methods\n\n- `isInitialized()`: checks if all the required fields have been set.\n- `toString()`: returns a human-readable representation of the message, particularly useful for debugging.\n- `mergeFrom(Message other)`: (builder only) merges the contents of `other` into this message, overwriting singular scalar fields, merging composite fields, and concatenating repeated fields.\n- `clear()`: (builder only) clears all the fields back to the empty state.\n\n1. Parsing and Serialization\n\n- `byte[] toByteArray();`: serializes the message and returns a byte array containing its raw bytes.\n- `static Person parseFrom(byte[] data);`: parses a message from the given byte array.\n- `void writeTo(OutputStream output);`: serializes the message and writes it to an `OutputStream`.\n- `static Person parseFrom(InputStream input);`: reads and parses a message from an `InputStream`.\n\n# 编译\n\n# 注意\n\n1. 升级协议\n\n- you *must not* change the tag numbers of any existing fields.\n- you *must not* add or delete any required fields.\n- you *may* delete optional or repeated fields.\n- you *may* add new optional or repeated fields but you must use fresh tag numbers (i.e. tag numbers that were never used in this protocol buffer, not even by deleted fields).\n\n1. protobuf对repeated压缩不够好，所以尽量在后面加上[packed = true]。\n2. 不要让protobuf对象成为全局变量或者类成员，因为其clear方法只会把占用的内存空间清零，而不会释放，使得进程空间越来越大，可参考[《Protobuf使用不当导致的程序内存上涨问题》](http://www.kuqin.com/shuoit/20141117/343247.html)。\n\n> https://www.jianshu.com/p/27fdf44dd63b","slug":"protobuf使用","published":1,"updated":"2019-10-14T09:01:08.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a42p001oic1yvu4ud066","content":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protobuf-all-3.6.1.zip</span><br><span class=\"line\">unzop protobuf-all-3.6.1.zip</span><br><span class=\"line\">cd protobuf-all-3.6.1</span><br><span class=\"line\">./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<h1 id=\"语法规则\"><a href=\"#语法规则\" class=\"headerlink\" title=\"语法规则\"></a>语法规则</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 声明版本，默认是proto2</span><br><span class=\"line\">syntax = &quot;proto3&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 声明包名</span><br><span class=\"line\">package tutorial</span><br><span class=\"line\">option java_package = &quot;com.example.tutorial&quot;;</span><br><span class=\"line\">// java类名</span><br><span class=\"line\">option java_outer_classname = &quot;AddressBookProtos&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">message Person &#123;</span><br><span class=\"line\">    required string name =1;</span><br><span class=\"line\">    required int32 id = 2;</span><br><span class=\"line\">    optional string email = 3;</span><br><span class=\"line\">    </span><br><span class=\"line\">    enum PhoneType &#123;</span><br><span class=\"line\">        MOBILE = 0;</span><br><span class=\"line\">        HOME = 1;</span><br><span class=\"line\">        WORK = 2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    message PhoneNumber &#123;</span><br><span class=\"line\">        required string number = 1;</span><br><span class=\"line\">        optional PhoneType type = 2[default = HOME]; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    repeated PhoneNumber phones = 4;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">message AddressBook &#123;</span><br><span class=\"line\">    repreated Person people = 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 保留字段，编程过程中某些功能没有想好，可以先把该tag 进行保留，以备以后使用。</span><br><span class=\"line\">message Foo &#123;</span><br><span class=\"line\">  reserved 2, 15, 9 to 11;</span><br><span class=\"line\">  reserved &quot;foo&quot;, &quot;bar&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h1><blockquote>\n<p><a href=\"https://blog.csdn.net/zxhoo/article/details/53228303\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zxhoo/article/details/53228303</a></p>\n</blockquote>\n<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h1><ol>\n<li>Standard Message Methods</li>\n</ol>\n<ul>\n<li><code>isInitialized()</code>: checks if all the required fields have been set.</li>\n<li><code>toString()</code>: returns a human-readable representation of the message, particularly useful for debugging.</li>\n<li><code>mergeFrom(Message other)</code>: (builder only) merges the contents of <code>other</code> into this message, overwriting singular scalar fields, merging composite fields, and concatenating repeated fields.</li>\n<li><code>clear()</code>: (builder only) clears all the fields back to the empty state.</li>\n</ul>\n<ol>\n<li>Parsing and Serialization</li>\n</ol>\n<ul>\n<li><code>byte[] toByteArray();</code>: serializes the message and returns a byte array containing its raw bytes.</li>\n<li><code>static Person parseFrom(byte[] data);</code>: parses a message from the given byte array.</li>\n<li><code>void writeTo(OutputStream output);</code>: serializes the message and writes it to an <code>OutputStream</code>.</li>\n<li><code>static Person parseFrom(InputStream input);</code>: reads and parses a message from an <code>InputStream</code>.</li>\n</ul>\n<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><h1 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h1><ol>\n<li>升级协议</li>\n</ol>\n<ul>\n<li>you <em>must not</em> change the tag numbers of any existing fields.</li>\n<li>you <em>must not</em> add or delete any required fields.</li>\n<li>you <em>may</em> delete optional or repeated fields.</li>\n<li>you <em>may</em> add new optional or repeated fields but you must use fresh tag numbers (i.e. tag numbers that were never used in this protocol buffer, not even by deleted fields).</li>\n</ul>\n<ol>\n<li>protobuf对repeated压缩不够好，所以尽量在后面加上[packed = true]。</li>\n<li>不要让protobuf对象成为全局变量或者类成员，因为其clear方法只会把占用的内存空间清零，而不会释放，使得进程空间越来越大，可参考<a href=\"http://www.kuqin.com/shuoit/20141117/343247.html\" target=\"_blank\" rel=\"noopener\">《Protobuf使用不当导致的程序内存上涨问题》</a>。</li>\n</ol>\n<blockquote>\n<p><a href=\"https://www.jianshu.com/p/27fdf44dd63b\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/27fdf44dd63b</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protobuf-all-3.6.1.zip</span><br><span class=\"line\">unzop protobuf-all-3.6.1.zip</span><br><span class=\"line\">cd protobuf-all-3.6.1</span><br><span class=\"line\">./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<h1 id=\"语法规则\"><a href=\"#语法规则\" class=\"headerlink\" title=\"语法规则\"></a>语法规则</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 声明版本，默认是proto2</span><br><span class=\"line\">syntax = &quot;proto3&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 声明包名</span><br><span class=\"line\">package tutorial</span><br><span class=\"line\">option java_package = &quot;com.example.tutorial&quot;;</span><br><span class=\"line\">// java类名</span><br><span class=\"line\">option java_outer_classname = &quot;AddressBookProtos&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">message Person &#123;</span><br><span class=\"line\">    required string name =1;</span><br><span class=\"line\">    required int32 id = 2;</span><br><span class=\"line\">    optional string email = 3;</span><br><span class=\"line\">    </span><br><span class=\"line\">    enum PhoneType &#123;</span><br><span class=\"line\">        MOBILE = 0;</span><br><span class=\"line\">        HOME = 1;</span><br><span class=\"line\">        WORK = 2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    message PhoneNumber &#123;</span><br><span class=\"line\">        required string number = 1;</span><br><span class=\"line\">        optional PhoneType type = 2[default = HOME]; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    repeated PhoneNumber phones = 4;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">message AddressBook &#123;</span><br><span class=\"line\">    repreated Person people = 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 保留字段，编程过程中某些功能没有想好，可以先把该tag 进行保留，以备以后使用。</span><br><span class=\"line\">message Foo &#123;</span><br><span class=\"line\">  reserved 2, 15, 9 to 11;</span><br><span class=\"line\">  reserved &quot;foo&quot;, &quot;bar&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h1><blockquote>\n<p><a href=\"https://blog.csdn.net/zxhoo/article/details/53228303\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zxhoo/article/details/53228303</a></p>\n</blockquote>\n<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h1><ol>\n<li>Standard Message Methods</li>\n</ol>\n<ul>\n<li><code>isInitialized()</code>: checks if all the required fields have been set.</li>\n<li><code>toString()</code>: returns a human-readable representation of the message, particularly useful for debugging.</li>\n<li><code>mergeFrom(Message other)</code>: (builder only) merges the contents of <code>other</code> into this message, overwriting singular scalar fields, merging composite fields, and concatenating repeated fields.</li>\n<li><code>clear()</code>: (builder only) clears all the fields back to the empty state.</li>\n</ul>\n<ol>\n<li>Parsing and Serialization</li>\n</ol>\n<ul>\n<li><code>byte[] toByteArray();</code>: serializes the message and returns a byte array containing its raw bytes.</li>\n<li><code>static Person parseFrom(byte[] data);</code>: parses a message from the given byte array.</li>\n<li><code>void writeTo(OutputStream output);</code>: serializes the message and writes it to an <code>OutputStream</code>.</li>\n<li><code>static Person parseFrom(InputStream input);</code>: reads and parses a message from an <code>InputStream</code>.</li>\n</ul>\n<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><h1 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h1><ol>\n<li>升级协议</li>\n</ol>\n<ul>\n<li>you <em>must not</em> change the tag numbers of any existing fields.</li>\n<li>you <em>must not</em> add or delete any required fields.</li>\n<li>you <em>may</em> delete optional or repeated fields.</li>\n<li>you <em>may</em> add new optional or repeated fields but you must use fresh tag numbers (i.e. tag numbers that were never used in this protocol buffer, not even by deleted fields).</li>\n</ul>\n<ol>\n<li>protobuf对repeated压缩不够好，所以尽量在后面加上[packed = true]。</li>\n<li>不要让protobuf对象成为全局变量或者类成员，因为其clear方法只会把占用的内存空间清零，而不会释放，使得进程空间越来越大，可参考<a href=\"http://www.kuqin.com/shuoit/20141117/343247.html\" target=\"_blank\" rel=\"noopener\">《Protobuf使用不当导致的程序内存上涨问题》</a>。</li>\n</ol>\n<blockquote>\n<p><a href=\"https://www.jianshu.com/p/27fdf44dd63b\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/27fdf44dd63b</a></p>\n</blockquote>\n"},{"title":"springcloud-eureka","date":"2019-01-06T10:27:25.000Z","_content":"\n# 建立工程\n\n1. 添加依赖\n\n   ```xml\n   <dependency>\n           <groupId>org.springframework.cloud</groupId>\n           <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n           <version>${spring-cloud.version}</version>\n   </dependency>\n   ```\n\n2. 添加`Application`\n\n   ```java\n   @SpringBootApplication\n   @EnableEurekaServer\n   public class EurekaApplication {\n       public static void main(String[] arg){\n           SpringApplication.run(EurekaApplication.class,arg);\n       }\n   }\n   \n   ```\n\n3. 添加配置文件\n\n   ```yaml\n   server:\n     port: 8761\n   \n   eureka:\n     instance:\n       hostname: localhost\n     client:\n       registerWithEureka: false ## 是否注册到eureka server\n       fetchRegistry: false  ## 是否获取Eureka server 注册信息，单机可以设置为false\n       serviceUrl:\n         defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/\n   \t\t## 默认http://localhost:8761/eureka\n   spring:\n     application:\n       name: eurka-server\n   ```\n\n4. 运行工程，访问`127.0.0.1:9761`可以看到web界面。\n\n# 安全\n\n1. 添加依赖\n\n   ```\n    <dependency>\n               <groupId>org.springframework.boot</groupId>\n               <artifactId>spring-boot-starter-security</artifactId>\n           </dependency>\n   ```\n\n2. 添加配置\n\n   - 老版本\n\n   ```yaml\n   security:\n   \tbasic:\n   \t\ttrue\n       user:\n         name: wumu\n         password: wumu \n   ```\n\n   - 新版本\n\n   ```yaml\n   security:\n       user:\n         name: wumu\n         password: wumu\n   ```\n\n\n# 问题\n\n1. 在依赖包中同时添加的`spring-cloud-starter-netflix-eureka-server`与`springb-boot-starter-web`两个依赖会导致tomcat的依赖问题，应用不能启动。\n\n","source":"_posts/springcloud-eureka.md","raw":"---\ntitle: springcloud-eureka\ndate: 2019-01-06 18:27:25\ntags:\n- spring-cloud\n---\n\n# 建立工程\n\n1. 添加依赖\n\n   ```xml\n   <dependency>\n           <groupId>org.springframework.cloud</groupId>\n           <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n           <version>${spring-cloud.version}</version>\n   </dependency>\n   ```\n\n2. 添加`Application`\n\n   ```java\n   @SpringBootApplication\n   @EnableEurekaServer\n   public class EurekaApplication {\n       public static void main(String[] arg){\n           SpringApplication.run(EurekaApplication.class,arg);\n       }\n   }\n   \n   ```\n\n3. 添加配置文件\n\n   ```yaml\n   server:\n     port: 8761\n   \n   eureka:\n     instance:\n       hostname: localhost\n     client:\n       registerWithEureka: false ## 是否注册到eureka server\n       fetchRegistry: false  ## 是否获取Eureka server 注册信息，单机可以设置为false\n       serviceUrl:\n         defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/\n   \t\t## 默认http://localhost:8761/eureka\n   spring:\n     application:\n       name: eurka-server\n   ```\n\n4. 运行工程，访问`127.0.0.1:9761`可以看到web界面。\n\n# 安全\n\n1. 添加依赖\n\n   ```\n    <dependency>\n               <groupId>org.springframework.boot</groupId>\n               <artifactId>spring-boot-starter-security</artifactId>\n           </dependency>\n   ```\n\n2. 添加配置\n\n   - 老版本\n\n   ```yaml\n   security:\n   \tbasic:\n   \t\ttrue\n       user:\n         name: wumu\n         password: wumu \n   ```\n\n   - 新版本\n\n   ```yaml\n   security:\n       user:\n         name: wumu\n         password: wumu\n   ```\n\n\n# 问题\n\n1. 在依赖包中同时添加的`spring-cloud-starter-netflix-eureka-server`与`springb-boot-starter-web`两个依赖会导致tomcat的依赖问题，应用不能启动。\n\n","slug":"springcloud-eureka","published":1,"updated":"2019-10-14T09:01:08.276Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a42q001qic1yg45qr9s5","content":"<h1 id=\"建立工程\"><a href=\"#建立工程\" class=\"headerlink\" title=\"建立工程\"></a>建立工程</h1><ol>\n<li><p>添加依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加<code>Application</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaServer</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EurekaApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] arg)</span></span>&#123;</span><br><span class=\"line\">        SpringApplication.run(EurekaApplication.class,arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8761</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  instance:</span></span><br><span class=\"line\"><span class=\"attr\">    hostname:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    registerWithEureka:</span> <span class=\"literal\">false</span> <span class=\"comment\">## 是否注册到eureka server</span></span><br><span class=\"line\"><span class=\"attr\">    fetchRegistry:</span> <span class=\"literal\">false</span>  <span class=\"comment\">## 是否获取Eureka server 注册信息，单机可以设置为false</span></span><br><span class=\"line\"><span class=\"attr\">    serviceUrl:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class=\"line\">\t\t<span class=\"comment\">## 默认http://localhost:8761/eureka</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  application:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">eurka-server</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行工程，访问<code>127.0.0.1:9761</code>可以看到web界面。</p>\n</li>\n</ol>\n<h1 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h1><ol>\n<li><p>添加依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">           &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class=\"line\">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加配置</p>\n<ul>\n<li>老版本</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">security:</span></span><br><span class=\"line\">\t<span class=\"attr\">basic:</span></span><br><span class=\"line\">\t\t<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    user:</span></span><br><span class=\"line\"><span class=\"attr\">      name:</span> <span class=\"string\">wumu</span></span><br><span class=\"line\"><span class=\"attr\">      password:</span> <span class=\"string\">wumu</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>新版本</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">security:</span></span><br><span class=\"line\"><span class=\"attr\">    user:</span></span><br><span class=\"line\"><span class=\"attr\">      name:</span> <span class=\"string\">wumu</span></span><br><span class=\"line\"><span class=\"attr\">      password:</span> <span class=\"string\">wumu</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><ol>\n<li>在依赖包中同时添加的<code>spring-cloud-starter-netflix-eureka-server</code>与<code>springb-boot-starter-web</code>两个依赖会导致tomcat的依赖问题，应用不能启动。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"建立工程\"><a href=\"#建立工程\" class=\"headerlink\" title=\"建立工程\"></a>建立工程</h1><ol>\n<li><p>添加依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加<code>Application</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaServer</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EurekaApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] arg)</span></span>&#123;</span><br><span class=\"line\">        SpringApplication.run(EurekaApplication.class,arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8761</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  instance:</span></span><br><span class=\"line\"><span class=\"attr\">    hostname:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    registerWithEureka:</span> <span class=\"literal\">false</span> <span class=\"comment\">## 是否注册到eureka server</span></span><br><span class=\"line\"><span class=\"attr\">    fetchRegistry:</span> <span class=\"literal\">false</span>  <span class=\"comment\">## 是否获取Eureka server 注册信息，单机可以设置为false</span></span><br><span class=\"line\"><span class=\"attr\">    serviceUrl:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class=\"line\">\t\t<span class=\"comment\">## 默认http://localhost:8761/eureka</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  application:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">eurka-server</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行工程，访问<code>127.0.0.1:9761</code>可以看到web界面。</p>\n</li>\n</ol>\n<h1 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h1><ol>\n<li><p>添加依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">           &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class=\"line\">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加配置</p>\n<ul>\n<li>老版本</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">security:</span></span><br><span class=\"line\">\t<span class=\"attr\">basic:</span></span><br><span class=\"line\">\t\t<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    user:</span></span><br><span class=\"line\"><span class=\"attr\">      name:</span> <span class=\"string\">wumu</span></span><br><span class=\"line\"><span class=\"attr\">      password:</span> <span class=\"string\">wumu</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>新版本</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">security:</span></span><br><span class=\"line\"><span class=\"attr\">    user:</span></span><br><span class=\"line\"><span class=\"attr\">      name:</span> <span class=\"string\">wumu</span></span><br><span class=\"line\"><span class=\"attr\">      password:</span> <span class=\"string\">wumu</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><ol>\n<li>在依赖包中同时添加的<code>spring-cloud-starter-netflix-eureka-server</code>与<code>springb-boot-starter-web</code>两个依赖会导致tomcat的依赖问题，应用不能启动。</li>\n</ol>\n"},{"title":"weboack性能优化笔记","date":"2019-10-18T03:52:51.000Z","_content":"\n<https://juejin.im/post/5b652b036fb9a04fa01d616b>\n\n","source":"_posts/weboack性能优化笔记.md","raw":"---\ntitle: weboack性能优化笔记\ndate: 2019-10-18 11:52:51\ntags:\n - js\n---\n\n<https://juejin.im/post/5b652b036fb9a04fa01d616b>\n\n","slug":"weboack性能优化笔记","published":1,"updated":"2019-10-25T02:20:54.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a42r001tic1ytv3voznk","content":"<p><a href=\"https://juejin.im/post/5b652b036fb9a04fa01d616b\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5b652b036fb9a04fa01d616b</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://juejin.im/post/5b652b036fb9a04fa01d616b\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5b652b036fb9a04fa01d616b</a></p>\n"},{"title":"清除inline-block之间的间隙","date":"2018-12-03T11:54:08.000Z","_content":"\n# 原因\n\n两个`inline-block`之间存在间隙，这是因为`html`元素换行导致的（换行和元素之间的空格、tabs、多个空格，结果一样，最后都是一个空格）\n\n# 移除空格\n\n如果我们使用html minimize工具，会清除html之间的空格。如果没有使用就需要我们手动去除。该方法简单但是不推荐使用，阅读不方便。\n\n```html\n<!-- 方法一 -->\n<div>\none</div><div>\ntwo</div><div>\nthree</div>\n\n<!-- 方法二 -->\n<div>one</div\n><div>two</div\n><div>three</div>\n\n<!-- 方法三 -->\n<div>one</div><!--\n--><div>two</div><!--\n--><div>three</div>\n```\n\n# 负值margin\n\n不推荐使用，每个浏览器之间的间隙不同。\n\n```css\nnav a {\n  display: inline-block;\n  margin-right: -4px;\n}\n```\n\n# 父元素font-size设置为0\n\n```css\n.space {\n    font-size: 0;\n}\n.space a {\n    font-size: 12px;\n}\n```\n\n这种方法是推荐使用的，但是在ie和Chrome浏览器(新的浏览器没有问题)上可能出现问题，因为在chrome上有最小字体限制。改进方法如下。\n\n```css\n.space {\n    font-size: 0;\n    -webkit-text-size-adjust:none;\n}\n```\n\n# 使用letter-spacing\n\n`letter-spacing`用于修改字符间的间隙。\n\n```css\n.space {\n    letter-spacing: -3px;\n}\n.space a {\n    letter-spacing: 0;\n}\n```\n\n# 使用word-spacing\n\n`word-spacing`修改单词之间的间隙\n\n```css\n.space {\n    word-spacing: -6px;\n}\n.space a {\n    word-spacing: 0;\n}\n```\n\n# 使用浮动\n\n```css\na{\n    float:left;\n}\n```\n\n# 参考\n\n> https://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/\n\n# 代码\n\n>  https://codepen.io/wumuwumu/pen/WYmKYX","source":"_posts/清除inline-block之间的间隙.md","raw":"---\ntitle: 清除inline-block之间的间隙\ndate: 2018-12-03 19:54:08\ntags:\n- js\n---\n\n# 原因\n\n两个`inline-block`之间存在间隙，这是因为`html`元素换行导致的（换行和元素之间的空格、tabs、多个空格，结果一样，最后都是一个空格）\n\n# 移除空格\n\n如果我们使用html minimize工具，会清除html之间的空格。如果没有使用就需要我们手动去除。该方法简单但是不推荐使用，阅读不方便。\n\n```html\n<!-- 方法一 -->\n<div>\none</div><div>\ntwo</div><div>\nthree</div>\n\n<!-- 方法二 -->\n<div>one</div\n><div>two</div\n><div>three</div>\n\n<!-- 方法三 -->\n<div>one</div><!--\n--><div>two</div><!--\n--><div>three</div>\n```\n\n# 负值margin\n\n不推荐使用，每个浏览器之间的间隙不同。\n\n```css\nnav a {\n  display: inline-block;\n  margin-right: -4px;\n}\n```\n\n# 父元素font-size设置为0\n\n```css\n.space {\n    font-size: 0;\n}\n.space a {\n    font-size: 12px;\n}\n```\n\n这种方法是推荐使用的，但是在ie和Chrome浏览器(新的浏览器没有问题)上可能出现问题，因为在chrome上有最小字体限制。改进方法如下。\n\n```css\n.space {\n    font-size: 0;\n    -webkit-text-size-adjust:none;\n}\n```\n\n# 使用letter-spacing\n\n`letter-spacing`用于修改字符间的间隙。\n\n```css\n.space {\n    letter-spacing: -3px;\n}\n.space a {\n    letter-spacing: 0;\n}\n```\n\n# 使用word-spacing\n\n`word-spacing`修改单词之间的间隙\n\n```css\n.space {\n    word-spacing: -6px;\n}\n.space a {\n    word-spacing: 0;\n}\n```\n\n# 使用浮动\n\n```css\na{\n    float:left;\n}\n```\n\n# 参考\n\n> https://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/\n\n# 代码\n\n>  https://codepen.io/wumuwumu/pen/WYmKYX","slug":"清除inline-block之间的间隙","published":1,"updated":"2019-10-14T09:01:08.413Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a42s001vic1ymm9w1ls0","content":"<h1 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h1><p>两个<code>inline-block</code>之间存在间隙，这是因为<code>html</code>元素换行导致的（换行和元素之间的空格、tabs、多个空格，结果一样，最后都是一个空格）</p>\n<h1 id=\"移除空格\"><a href=\"#移除空格\" class=\"headerlink\" title=\"移除空格\"></a>移除空格</h1><p>如果我们使用html minimize工具，会清除html之间的空格。如果没有使用就需要我们手动去除。该方法简单但是不推荐使用，阅读不方便。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 方法一 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">one<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">two<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">three<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 方法二 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>one<span class=\"tag\">&lt;/<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>two<span class=\"tag\">&lt;/<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>three<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 方法三 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>one<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>two<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>three<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"负值margin\"><a href=\"#负值margin\" class=\"headerlink\" title=\"负值margin\"></a>负值margin</h1><p>不推荐使用，每个浏览器之间的间隙不同。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: -<span class=\"number\">4px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"父元素font-size设置为0\"><a href=\"#父元素font-size设置为0\" class=\"headerlink\" title=\"父元素font-size设置为0\"></a>父元素font-size设置为0</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.space</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.space</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方法是推荐使用的，但是在ie和Chrome浏览器(新的浏览器没有问题)上可能出现问题，因为在chrome上有最小字体限制。改进方法如下。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.space</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-text-size-adjust</span>:none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用letter-spacing\"><a href=\"#使用letter-spacing\" class=\"headerlink\" title=\"使用letter-spacing\"></a>使用letter-spacing</h1><p><code>letter-spacing</code>用于修改字符间的间隙。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.space</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">letter-spacing</span>: -<span class=\"number\">3px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.space</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">letter-spacing</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用word-spacing\"><a href=\"#使用word-spacing\" class=\"headerlink\" title=\"使用word-spacing\"></a>使用word-spacing</h1><p><code>word-spacing</code>修改单词之间的间隙</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.space</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">word-spacing</span>: -<span class=\"number\">6px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.space</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">word-spacing</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用浮动\"><a href=\"#使用浮动\" class=\"headerlink\" title=\"使用浮动\"></a>使用浮动</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/\" target=\"_blank\" rel=\"noopener\">https://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/</a></p>\n</blockquote>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><blockquote>\n<p> <a href=\"https://codepen.io/wumuwumu/pen/WYmKYX\" target=\"_blank\" rel=\"noopener\">https://codepen.io/wumuwumu/pen/WYmKYX</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h1><p>两个<code>inline-block</code>之间存在间隙，这是因为<code>html</code>元素换行导致的（换行和元素之间的空格、tabs、多个空格，结果一样，最后都是一个空格）</p>\n<h1 id=\"移除空格\"><a href=\"#移除空格\" class=\"headerlink\" title=\"移除空格\"></a>移除空格</h1><p>如果我们使用html minimize工具，会清除html之间的空格。如果没有使用就需要我们手动去除。该方法简单但是不推荐使用，阅读不方便。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 方法一 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">one<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">two<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">three<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 方法二 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>one<span class=\"tag\">&lt;/<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>two<span class=\"tag\">&lt;/<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>three<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 方法三 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>one<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>two<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>three<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"负值margin\"><a href=\"#负值margin\" class=\"headerlink\" title=\"负值margin\"></a>负值margin</h1><p>不推荐使用，每个浏览器之间的间隙不同。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: -<span class=\"number\">4px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"父元素font-size设置为0\"><a href=\"#父元素font-size设置为0\" class=\"headerlink\" title=\"父元素font-size设置为0\"></a>父元素font-size设置为0</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.space</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.space</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方法是推荐使用的，但是在ie和Chrome浏览器(新的浏览器没有问题)上可能出现问题，因为在chrome上有最小字体限制。改进方法如下。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.space</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-text-size-adjust</span>:none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用letter-spacing\"><a href=\"#使用letter-spacing\" class=\"headerlink\" title=\"使用letter-spacing\"></a>使用letter-spacing</h1><p><code>letter-spacing</code>用于修改字符间的间隙。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.space</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">letter-spacing</span>: -<span class=\"number\">3px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.space</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">letter-spacing</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用word-spacing\"><a href=\"#使用word-spacing\" class=\"headerlink\" title=\"使用word-spacing\"></a>使用word-spacing</h1><p><code>word-spacing</code>修改单词之间的间隙</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.space</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">word-spacing</span>: -<span class=\"number\">6px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.space</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">word-spacing</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用浮动\"><a href=\"#使用浮动\" class=\"headerlink\" title=\"使用浮动\"></a>使用浮动</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/\" target=\"_blank\" rel=\"noopener\">https://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/</a></p>\n</blockquote>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><blockquote>\n<p> <a href=\"https://codepen.io/wumuwumu/pen/WYmKYX\" target=\"_blank\" rel=\"noopener\">https://codepen.io/wumuwumu/pen/WYmKYX</a></p>\n</blockquote>\n"},{"title":"查找附近的人","date":"2019-01-04T11:46:12.000Z","_content":"\n# GeoHash\n\n比较原始的方法，简单方便\n\n# Mysql\n\n计算公式\n\n```\nC = sin(MLatA)*sin(MLatB)*cos(MLonA-MLonB) + cos(MLatA)*cos(MLatB)\nDistance = R*Arccos(C)*Pi/180\n```\n\n在经纬度小节中我们了解了两个公式用来计算两个位置之间的距离, 该小节我们以测试数据说明如何实现.\n测试需要的表结构和数据:\n\n```\n表结构:\nCREATE TABLE `geotest` (\n  `userid` int(10) NOT NULL,\n  `longitude` decimal(9,6) NOT NULL,\n  `latitude` decimal(9,6) NOT NULL,\n  `create_time` datetime DEFAULT NULL,\n  UNIQUE KEY `unq_uid` (`userid`),\n  KEY `idx_lat_lng` (`longitude`,`latitude`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n\n测试数据:\ninsert geotest values(10000, 116.417480, 40.003033, now());\ninsert geotest values(10001, 116.437480, 40.004033, now());\ninsert geotest values(10002, 116.457480, 40.005033, now());\ninsert geotest values(10003, 116.477480, 40.006033, now());\n......\n......\n```\n\n第一种公式中, google 为我们介绍了如何使用 [sql](https://developers.google.com/maps/articles/phpsqlsearch_v3#findnearsql) 来获取附近的点, 如下所示, 我们选用 6371km 作为地球的半径,根据上述小节的计算公式推断:\n\n```\nC = sin(MLatA)*sin(MLatB)*cos(MLonA-MLonB) + cos(MLatA)*cos(MLatB)\nDistance = R*Arccos(C)*Pi/180\n```\n\ngoogle 地图的计算公式可以参考 [geo_search](http://www.arubin.org/files/geo_search.pdf)\n\n两个位置之间的距离则可以换算成以下公式:\n\n```\nR*arccos( cos( radians(latA)*cos( radians(latB) ) * cos( radians(lonA - lonB) )) + sin( radians(latA)*cos(latB) ))\n```\n\nradians 函数计算出相应的弧度信息, 得到下面的 sql:\n\n```\nSELECT\n  user_id, (\n    6371 * acos (\n      cos ( radians(40.003033) )\n      * cos( radians( latitude ) )\n      * cos( radians( longitude ) - radians(116.417481) )\n      + sin ( radians(40.003033) )\n      * sin( radians( latitude ) )\n    )\n  ) AS distance\nFROM geotest\nHAVING distance < 1\nORDER BY distance\nLIMIT 0 , 20;\n```\n\n上面的 sql 从 geotest 中从 geotest 表中获取到经度(116.417481) 和纬度(40.003033) 位置附近 1km 所有的user_id 信息.\n观察这个 sql, 可以预见到在表数据较大的时候仅建立复合索引 `idx_lat_lng` 肯定会遇到性能瓶颈, 因为每行记录都需要做相关的运算, 才能跑出最后的结果.\n\n所以要提高该 sql 的性能就需要尽量过滤不需要的 longitude 和 latitude 两列的值. 参考 [geo_search](http://www.arubin.org/files/geo_search.pdf) 和 [fastest-way-to-find-distance](http://stackoverflow.com/questions/1006654/fastest-way-to-find-distance-between-two-lat-long-points), 在近距离的情况下我们可以认为当前区域内的所有位置都在一个平面内, 虽然有点误差, 但是比起地球这么大的椭球, 我们完全可以忽略其中的误差. 以经纬度来讲, 1 纬度约等于 69 英里, 大约 111044.736 米, 其中的换算公式为:\n\n```\n1°latitude  ~= 69 miles\n1°longitude ~= cos(latitude)*69 miles\n```\n\n所以对于位置信息(lng, lat), 我们可以计算出以其为中心周边指定距离的四个点, 如下图所示:\n\n```\n  +-------------+\n  |             |\n  |             |\n  |      +      |\n  |             |\n  |             |\n  +-------------+\n```\n\n计算公式如下:\n\n```\nlng1 = lon - dist/abs(cos(radians(lat))*69)\nlng2 = lon + dist/abs(cos(radians(lat))*69)\nlat1 = lat - (dist/69);\nlat2 = lat + (dist/69);\n```\n\n四个点的坐标就分别为 (lng1, lat1), (lng1, lat2), (lng2, lat1), (lng2, lat2), 所以存在于该四个点组成的平面之间的点即可以被认为在(lng, lat) 的 dist 距离内.\n\n基于上述的规则, 修改 sql 为以下:\n\n```\nSELECT\n  user_id, (\n    6371 * acos (\n      cos ( radians(40.003033) )\n      * cos( radians( latitude ) )\n      * cos( radians( longitude ) - radians(116.417481) )\n      + sin ( radians(40.003033) )\n      * sin( radians( latitude ) )\n    )\n  ) AS distance\nFROM geotest\nWHERE longitude BETWEEN lng1 AND lng2\nAND latitude BETWEEN lat1 AND lat2\nHAVING distance < 1\nORDER BY distance\nLIMIT 0 , 20;\n```\n\n这样就能很好的使用索引, 如果还想增加超时设置, 可以在 sql 里加上 create_time 条件进行过滤, 比如只查找最近一天的附近的用户. 另外开发者也可以结合使用 sphinx 或 elasticsearch 得到更好的性能.\n\n下面为根据上面介绍的规则整理成存储过程, 方便开发者调用访问. 这里我们将地球半径的公里数转换为米即为 6371392.89m, 69英里则转为 111044.736m, 如下存储过程返回 user_id 和 距离(米):\n\n```\nDELIMITER $$\ndrop procedure if exists geo_dist$$\ncreate procedure geo_dist(IN lng decimal(9, 6), IN lat decimal(9, 6), IN dist int)\nbegin\n   declare lng1 decimal(9, 6); declare lng2 decimal(16, 13);\n   declare lat1 decimal(9, 6); declare lat1 decimal(16, 13);\n\n   -- calculate lng and lat for the rectangle, in meters unit\n   set lng1 = lng - dist/abs(cos(radians(lat))*111044.736);\n   set lng2 = lng + dist/abs(cos(radians(lat))*111044.736);\n   set lat1 = lat - (dist/111044.736);\n   set lat2 = lat + (dist/111044.736);\n\n   -- run the query\n     select user_id, round((\n        6371392.89 * acos (\n         cos ( radians(lat) )\n         * cos( radians( latitude ) )\n         * cos( radians( longitude ) - radians(lng) )\n         + sin ( radians(lat) )\n         * sin( radians( latitude ) )\n       )\n     ), 0) AS distance\n     from user_position\n     where lng between lng1 and lng2\n     and lat between lat1 and lat2\n     having distance < dist\n     ORDER BY distance\n     LIMIT 0 , 20;\nEND$$\nDELIMITER ;\n```\n\n运行存储过程, 取出该经纬度下附近 5km 的用户和距离(m):\n\n```\nmysql > call geo_dist(116.4174800000000, 40.0030330000000, 5000);\n+---------+----------+\n| user_id | distance |\n+---------+----------+\n|   10000 |        0 |\n|   10001 |     1707 |\n|   10002 |     3414 |\n+---------+----------+\n3 rows in set (0.00 sec)\n\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n10001 用户和指定的经纬度距离为1707米, 我们在 redis 3.2 版本中进行简单测试, 可以看到结果都很相近:\n\n```\n127.0.0.1:6380> geoadd tttt 116.417480 40.003033 t1\n(integer) 0\n127.0.0.1:6380> geoadd tttt 116.437481 40.004034 t2\n(integer) 0\n127.0.0.1:6380> GEODIST tttt t1 t2\n\"1707.5093\"\n```\n\n# mongodb\n\n创建位置索引\n\n\n\n\n\n# 参考\n\n> [使用 MySQL 实现搜索附近的人](https://arstercz.com/%E4%BD%BF%E7%94%A8-mysql-%E5%AE%9E%E7%8E%B0%E6%90%9C%E7%B4%A2%E9%99%84%E8%BF%91%E7%9A%84%E4%BA%BA/)\n>\n> [GeoHash算法学习讲解、解析及原理分析](https://zhuanlan.zhihu.com/p/35940647)","source":"_posts/查找附近的人.md","raw":"---\ntitle: 查找附近的人\ndate: 2019-01-04 19:46:12\ntags:\n- mysql\n- mongodb\n- java\n---\n\n# GeoHash\n\n比较原始的方法，简单方便\n\n# Mysql\n\n计算公式\n\n```\nC = sin(MLatA)*sin(MLatB)*cos(MLonA-MLonB) + cos(MLatA)*cos(MLatB)\nDistance = R*Arccos(C)*Pi/180\n```\n\n在经纬度小节中我们了解了两个公式用来计算两个位置之间的距离, 该小节我们以测试数据说明如何实现.\n测试需要的表结构和数据:\n\n```\n表结构:\nCREATE TABLE `geotest` (\n  `userid` int(10) NOT NULL,\n  `longitude` decimal(9,6) NOT NULL,\n  `latitude` decimal(9,6) NOT NULL,\n  `create_time` datetime DEFAULT NULL,\n  UNIQUE KEY `unq_uid` (`userid`),\n  KEY `idx_lat_lng` (`longitude`,`latitude`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n\n测试数据:\ninsert geotest values(10000, 116.417480, 40.003033, now());\ninsert geotest values(10001, 116.437480, 40.004033, now());\ninsert geotest values(10002, 116.457480, 40.005033, now());\ninsert geotest values(10003, 116.477480, 40.006033, now());\n......\n......\n```\n\n第一种公式中, google 为我们介绍了如何使用 [sql](https://developers.google.com/maps/articles/phpsqlsearch_v3#findnearsql) 来获取附近的点, 如下所示, 我们选用 6371km 作为地球的半径,根据上述小节的计算公式推断:\n\n```\nC = sin(MLatA)*sin(MLatB)*cos(MLonA-MLonB) + cos(MLatA)*cos(MLatB)\nDistance = R*Arccos(C)*Pi/180\n```\n\ngoogle 地图的计算公式可以参考 [geo_search](http://www.arubin.org/files/geo_search.pdf)\n\n两个位置之间的距离则可以换算成以下公式:\n\n```\nR*arccos( cos( radians(latA)*cos( radians(latB) ) * cos( radians(lonA - lonB) )) + sin( radians(latA)*cos(latB) ))\n```\n\nradians 函数计算出相应的弧度信息, 得到下面的 sql:\n\n```\nSELECT\n  user_id, (\n    6371 * acos (\n      cos ( radians(40.003033) )\n      * cos( radians( latitude ) )\n      * cos( radians( longitude ) - radians(116.417481) )\n      + sin ( radians(40.003033) )\n      * sin( radians( latitude ) )\n    )\n  ) AS distance\nFROM geotest\nHAVING distance < 1\nORDER BY distance\nLIMIT 0 , 20;\n```\n\n上面的 sql 从 geotest 中从 geotest 表中获取到经度(116.417481) 和纬度(40.003033) 位置附近 1km 所有的user_id 信息.\n观察这个 sql, 可以预见到在表数据较大的时候仅建立复合索引 `idx_lat_lng` 肯定会遇到性能瓶颈, 因为每行记录都需要做相关的运算, 才能跑出最后的结果.\n\n所以要提高该 sql 的性能就需要尽量过滤不需要的 longitude 和 latitude 两列的值. 参考 [geo_search](http://www.arubin.org/files/geo_search.pdf) 和 [fastest-way-to-find-distance](http://stackoverflow.com/questions/1006654/fastest-way-to-find-distance-between-two-lat-long-points), 在近距离的情况下我们可以认为当前区域内的所有位置都在一个平面内, 虽然有点误差, 但是比起地球这么大的椭球, 我们完全可以忽略其中的误差. 以经纬度来讲, 1 纬度约等于 69 英里, 大约 111044.736 米, 其中的换算公式为:\n\n```\n1°latitude  ~= 69 miles\n1°longitude ~= cos(latitude)*69 miles\n```\n\n所以对于位置信息(lng, lat), 我们可以计算出以其为中心周边指定距离的四个点, 如下图所示:\n\n```\n  +-------------+\n  |             |\n  |             |\n  |      +      |\n  |             |\n  |             |\n  +-------------+\n```\n\n计算公式如下:\n\n```\nlng1 = lon - dist/abs(cos(radians(lat))*69)\nlng2 = lon + dist/abs(cos(radians(lat))*69)\nlat1 = lat - (dist/69);\nlat2 = lat + (dist/69);\n```\n\n四个点的坐标就分别为 (lng1, lat1), (lng1, lat2), (lng2, lat1), (lng2, lat2), 所以存在于该四个点组成的平面之间的点即可以被认为在(lng, lat) 的 dist 距离内.\n\n基于上述的规则, 修改 sql 为以下:\n\n```\nSELECT\n  user_id, (\n    6371 * acos (\n      cos ( radians(40.003033) )\n      * cos( radians( latitude ) )\n      * cos( radians( longitude ) - radians(116.417481) )\n      + sin ( radians(40.003033) )\n      * sin( radians( latitude ) )\n    )\n  ) AS distance\nFROM geotest\nWHERE longitude BETWEEN lng1 AND lng2\nAND latitude BETWEEN lat1 AND lat2\nHAVING distance < 1\nORDER BY distance\nLIMIT 0 , 20;\n```\n\n这样就能很好的使用索引, 如果还想增加超时设置, 可以在 sql 里加上 create_time 条件进行过滤, 比如只查找最近一天的附近的用户. 另外开发者也可以结合使用 sphinx 或 elasticsearch 得到更好的性能.\n\n下面为根据上面介绍的规则整理成存储过程, 方便开发者调用访问. 这里我们将地球半径的公里数转换为米即为 6371392.89m, 69英里则转为 111044.736m, 如下存储过程返回 user_id 和 距离(米):\n\n```\nDELIMITER $$\ndrop procedure if exists geo_dist$$\ncreate procedure geo_dist(IN lng decimal(9, 6), IN lat decimal(9, 6), IN dist int)\nbegin\n   declare lng1 decimal(9, 6); declare lng2 decimal(16, 13);\n   declare lat1 decimal(9, 6); declare lat1 decimal(16, 13);\n\n   -- calculate lng and lat for the rectangle, in meters unit\n   set lng1 = lng - dist/abs(cos(radians(lat))*111044.736);\n   set lng2 = lng + dist/abs(cos(radians(lat))*111044.736);\n   set lat1 = lat - (dist/111044.736);\n   set lat2 = lat + (dist/111044.736);\n\n   -- run the query\n     select user_id, round((\n        6371392.89 * acos (\n         cos ( radians(lat) )\n         * cos( radians( latitude ) )\n         * cos( radians( longitude ) - radians(lng) )\n         + sin ( radians(lat) )\n         * sin( radians( latitude ) )\n       )\n     ), 0) AS distance\n     from user_position\n     where lng between lng1 and lng2\n     and lat between lat1 and lat2\n     having distance < dist\n     ORDER BY distance\n     LIMIT 0 , 20;\nEND$$\nDELIMITER ;\n```\n\n运行存储过程, 取出该经纬度下附近 5km 的用户和距离(m):\n\n```\nmysql > call geo_dist(116.4174800000000, 40.0030330000000, 5000);\n+---------+----------+\n| user_id | distance |\n+---------+----------+\n|   10000 |        0 |\n|   10001 |     1707 |\n|   10002 |     3414 |\n+---------+----------+\n3 rows in set (0.00 sec)\n\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n10001 用户和指定的经纬度距离为1707米, 我们在 redis 3.2 版本中进行简单测试, 可以看到结果都很相近:\n\n```\n127.0.0.1:6380> geoadd tttt 116.417480 40.003033 t1\n(integer) 0\n127.0.0.1:6380> geoadd tttt 116.437481 40.004034 t2\n(integer) 0\n127.0.0.1:6380> GEODIST tttt t1 t2\n\"1707.5093\"\n```\n\n# mongodb\n\n创建位置索引\n\n\n\n\n\n# 参考\n\n> [使用 MySQL 实现搜索附近的人](https://arstercz.com/%E4%BD%BF%E7%94%A8-mysql-%E5%AE%9E%E7%8E%B0%E6%90%9C%E7%B4%A2%E9%99%84%E8%BF%91%E7%9A%84%E4%BA%BA/)\n>\n> [GeoHash算法学习讲解、解析及原理分析](https://zhuanlan.zhihu.com/p/35940647)","slug":"查找附近的人","published":1,"updated":"2019-10-14T09:01:08.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a42t001yic1yuz75tp8o","content":"<h1 id=\"GeoHash\"><a href=\"#GeoHash\" class=\"headerlink\" title=\"GeoHash\"></a>GeoHash</h1><p>比较原始的方法，简单方便</p>\n<h1 id=\"Mysql\"><a href=\"#Mysql\" class=\"headerlink\" title=\"Mysql\"></a>Mysql</h1><p>计算公式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C = sin(MLatA)*sin(MLatB)*cos(MLonA-MLonB) + cos(MLatA)*cos(MLatB)</span><br><span class=\"line\">Distance = R*Arccos(C)*Pi/180</span><br></pre></td></tr></table></figure>\n<p>在经纬度小节中我们了解了两个公式用来计算两个位置之间的距离, 该小节我们以测试数据说明如何实现.<br>测试需要的表结构和数据:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表结构:</span><br><span class=\"line\">CREATE TABLE `geotest` (</span><br><span class=\"line\">  `userid` int(10) NOT NULL,</span><br><span class=\"line\">  `longitude` decimal(9,6) NOT NULL,</span><br><span class=\"line\">  `latitude` decimal(9,6) NOT NULL,</span><br><span class=\"line\">  `create_time` datetime DEFAULT NULL,</span><br><span class=\"line\">  UNIQUE KEY `unq_uid` (`userid`),</span><br><span class=\"line\">  KEY `idx_lat_lng` (`longitude`,`latitude`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8</span><br><span class=\"line\"></span><br><span class=\"line\">测试数据:</span><br><span class=\"line\">insert geotest values(10000, 116.417480, 40.003033, now());</span><br><span class=\"line\">insert geotest values(10001, 116.437480, 40.004033, now());</span><br><span class=\"line\">insert geotest values(10002, 116.457480, 40.005033, now());</span><br><span class=\"line\">insert geotest values(10003, 116.477480, 40.006033, now());</span><br><span class=\"line\">......</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<p>第一种公式中, google 为我们介绍了如何使用 <a href=\"https://developers.google.com/maps/articles/phpsqlsearch_v3#findnearsql\" target=\"_blank\" rel=\"noopener\">sql</a> 来获取附近的点, 如下所示, 我们选用 6371km 作为地球的半径,根据上述小节的计算公式推断:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C = sin(MLatA)*sin(MLatB)*cos(MLonA-MLonB) + cos(MLatA)*cos(MLatB)</span><br><span class=\"line\">Distance = R*Arccos(C)*Pi/180</span><br></pre></td></tr></table></figure>\n<p>google 地图的计算公式可以参考 <a href=\"http://www.arubin.org/files/geo_search.pdf\" target=\"_blank\" rel=\"noopener\">geo_search</a></p>\n<p>两个位置之间的距离则可以换算成以下公式:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">R*arccos( cos( radians(latA)*cos( radians(latB) ) * cos( radians(lonA - lonB) )) + sin( radians(latA)*cos(latB) ))</span><br></pre></td></tr></table></figure>\n<p>radians 函数计算出相应的弧度信息, 得到下面的 sql:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">  user_id, (</span><br><span class=\"line\">    6371 * acos (</span><br><span class=\"line\">      cos ( radians(40.003033) )</span><br><span class=\"line\">      * cos( radians( latitude ) )</span><br><span class=\"line\">      * cos( radians( longitude ) - radians(116.417481) )</span><br><span class=\"line\">      + sin ( radians(40.003033) )</span><br><span class=\"line\">      * sin( radians( latitude ) )</span><br><span class=\"line\">    )</span><br><span class=\"line\">  ) AS distance</span><br><span class=\"line\">FROM geotest</span><br><span class=\"line\">HAVING distance &lt; 1</span><br><span class=\"line\">ORDER BY distance</span><br><span class=\"line\">LIMIT 0 , 20;</span><br></pre></td></tr></table></figure>\n<p>上面的 sql 从 geotest 中从 geotest 表中获取到经度(116.417481) 和纬度(40.003033) 位置附近 1km 所有的user_id 信息.<br>观察这个 sql, 可以预见到在表数据较大的时候仅建立复合索引 <code>idx_lat_lng</code> 肯定会遇到性能瓶颈, 因为每行记录都需要做相关的运算, 才能跑出最后的结果.</p>\n<p>所以要提高该 sql 的性能就需要尽量过滤不需要的 longitude 和 latitude 两列的值. 参考 <a href=\"http://www.arubin.org/files/geo_search.pdf\" target=\"_blank\" rel=\"noopener\">geo_search</a> 和 <a href=\"http://stackoverflow.com/questions/1006654/fastest-way-to-find-distance-between-two-lat-long-points\" target=\"_blank\" rel=\"noopener\">fastest-way-to-find-distance</a>, 在近距离的情况下我们可以认为当前区域内的所有位置都在一个平面内, 虽然有点误差, 但是比起地球这么大的椭球, 我们完全可以忽略其中的误差. 以经纬度来讲, 1 纬度约等于 69 英里, 大约 111044.736 米, 其中的换算公式为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1°latitude  ~= 69 miles</span><br><span class=\"line\">1°longitude ~= cos(latitude)*69 miles</span><br></pre></td></tr></table></figure>\n<p>所以对于位置信息(lng, lat), 我们可以计算出以其为中心周边指定距离的四个点, 如下图所示:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-------------+</span><br><span class=\"line\">|             |</span><br><span class=\"line\">|             |</span><br><span class=\"line\">|      +      |</span><br><span class=\"line\">|             |</span><br><span class=\"line\">|             |</span><br><span class=\"line\">+-------------+</span><br></pre></td></tr></table></figure>\n<p>计算公式如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lng1 = lon - dist/abs(cos(radians(lat))*69)</span><br><span class=\"line\">lng2 = lon + dist/abs(cos(radians(lat))*69)</span><br><span class=\"line\">lat1 = lat - (dist/69);</span><br><span class=\"line\">lat2 = lat + (dist/69);</span><br></pre></td></tr></table></figure>\n<p>四个点的坐标就分别为 (lng1, lat1), (lng1, lat2), (lng2, lat1), (lng2, lat2), 所以存在于该四个点组成的平面之间的点即可以被认为在(lng, lat) 的 dist 距离内.</p>\n<p>基于上述的规则, 修改 sql 为以下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">  user_id, (</span><br><span class=\"line\">    6371 * acos (</span><br><span class=\"line\">      cos ( radians(40.003033) )</span><br><span class=\"line\">      * cos( radians( latitude ) )</span><br><span class=\"line\">      * cos( radians( longitude ) - radians(116.417481) )</span><br><span class=\"line\">      + sin ( radians(40.003033) )</span><br><span class=\"line\">      * sin( radians( latitude ) )</span><br><span class=\"line\">    )</span><br><span class=\"line\">  ) AS distance</span><br><span class=\"line\">FROM geotest</span><br><span class=\"line\">WHERE longitude BETWEEN lng1 AND lng2</span><br><span class=\"line\">AND latitude BETWEEN lat1 AND lat2</span><br><span class=\"line\">HAVING distance &lt; 1</span><br><span class=\"line\">ORDER BY distance</span><br><span class=\"line\">LIMIT 0 , 20;</span><br></pre></td></tr></table></figure>\n<p>这样就能很好的使用索引, 如果还想增加超时设置, 可以在 sql 里加上 create_time 条件进行过滤, 比如只查找最近一天的附近的用户. 另外开发者也可以结合使用 sphinx 或 elasticsearch 得到更好的性能.</p>\n<p>下面为根据上面介绍的规则整理成存储过程, 方便开发者调用访问. 这里我们将地球半径的公里数转换为米即为 6371392.89m, 69英里则转为 111044.736m, 如下存储过程返回 user_id 和 距离(米):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER $$</span><br><span class=\"line\">drop procedure if exists geo_dist$$</span><br><span class=\"line\">create procedure geo_dist(IN lng decimal(9, 6), IN lat decimal(9, 6), IN dist int)</span><br><span class=\"line\">begin</span><br><span class=\"line\">   declare lng1 decimal(9, 6); declare lng2 decimal(16, 13);</span><br><span class=\"line\">   declare lat1 decimal(9, 6); declare lat1 decimal(16, 13);</span><br><span class=\"line\"></span><br><span class=\"line\">   -- calculate lng and lat for the rectangle, in meters unit</span><br><span class=\"line\">   set lng1 = lng - dist/abs(cos(radians(lat))*111044.736);</span><br><span class=\"line\">   set lng2 = lng + dist/abs(cos(radians(lat))*111044.736);</span><br><span class=\"line\">   set lat1 = lat - (dist/111044.736);</span><br><span class=\"line\">   set lat2 = lat + (dist/111044.736);</span><br><span class=\"line\"></span><br><span class=\"line\">   -- run the query</span><br><span class=\"line\">     select user_id, round((</span><br><span class=\"line\">        6371392.89 * acos (</span><br><span class=\"line\">         cos ( radians(lat) )</span><br><span class=\"line\">         * cos( radians( latitude ) )</span><br><span class=\"line\">         * cos( radians( longitude ) - radians(lng) )</span><br><span class=\"line\">         + sin ( radians(lat) )</span><br><span class=\"line\">         * sin( radians( latitude ) )</span><br><span class=\"line\">       )</span><br><span class=\"line\">     ), 0) AS distance</span><br><span class=\"line\">     from user_position</span><br><span class=\"line\">     where lng between lng1 and lng2</span><br><span class=\"line\">     and lat between lat1 and lat2</span><br><span class=\"line\">     having distance &lt; dist</span><br><span class=\"line\">     ORDER BY distance</span><br><span class=\"line\">     LIMIT 0 , 20;</span><br><span class=\"line\">END$$</span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n<p>运行存储过程, 取出该经纬度下附近 5km 的用户和距离(m):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; call geo_dist(116.4174800000000, 40.0030330000000, 5000);</span><br><span class=\"line\">+---------+----------+</span><br><span class=\"line\">| user_id | distance |</span><br><span class=\"line\">+---------+----------+</span><br><span class=\"line\">|   10000 |        0 |</span><br><span class=\"line\">|   10001 |     1707 |</span><br><span class=\"line\">|   10002 |     3414 |</span><br><span class=\"line\">+---------+----------+</span><br><span class=\"line\">3 rows in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>\n<p>10001 用户和指定的经纬度距离为1707米, 我们在 redis 3.2 版本中进行简单测试, 可以看到结果都很相近:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6380&gt; geoadd tttt 116.417480 40.003033 t1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6380&gt; geoadd tttt 116.437481 40.004034 t2</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6380&gt; GEODIST tttt t1 t2</span><br><span class=\"line\">&quot;1707.5093&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"mongodb\"><a href=\"#mongodb\" class=\"headerlink\" title=\"mongodb\"></a>mongodb</h1><p>创建位置索引</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://arstercz.com/%E4%BD%BF%E7%94%A8-mysql-%E5%AE%9E%E7%8E%B0%E6%90%9C%E7%B4%A2%E9%99%84%E8%BF%91%E7%9A%84%E4%BA%BA/\" target=\"_blank\" rel=\"noopener\">使用 MySQL 实现搜索附近的人</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/35940647\" target=\"_blank\" rel=\"noopener\">GeoHash算法学习讲解、解析及原理分析</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"GeoHash\"><a href=\"#GeoHash\" class=\"headerlink\" title=\"GeoHash\"></a>GeoHash</h1><p>比较原始的方法，简单方便</p>\n<h1 id=\"Mysql\"><a href=\"#Mysql\" class=\"headerlink\" title=\"Mysql\"></a>Mysql</h1><p>计算公式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C = sin(MLatA)*sin(MLatB)*cos(MLonA-MLonB) + cos(MLatA)*cos(MLatB)</span><br><span class=\"line\">Distance = R*Arccos(C)*Pi/180</span><br></pre></td></tr></table></figure>\n<p>在经纬度小节中我们了解了两个公式用来计算两个位置之间的距离, 该小节我们以测试数据说明如何实现.<br>测试需要的表结构和数据:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表结构:</span><br><span class=\"line\">CREATE TABLE `geotest` (</span><br><span class=\"line\">  `userid` int(10) NOT NULL,</span><br><span class=\"line\">  `longitude` decimal(9,6) NOT NULL,</span><br><span class=\"line\">  `latitude` decimal(9,6) NOT NULL,</span><br><span class=\"line\">  `create_time` datetime DEFAULT NULL,</span><br><span class=\"line\">  UNIQUE KEY `unq_uid` (`userid`),</span><br><span class=\"line\">  KEY `idx_lat_lng` (`longitude`,`latitude`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8</span><br><span class=\"line\"></span><br><span class=\"line\">测试数据:</span><br><span class=\"line\">insert geotest values(10000, 116.417480, 40.003033, now());</span><br><span class=\"line\">insert geotest values(10001, 116.437480, 40.004033, now());</span><br><span class=\"line\">insert geotest values(10002, 116.457480, 40.005033, now());</span><br><span class=\"line\">insert geotest values(10003, 116.477480, 40.006033, now());</span><br><span class=\"line\">......</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<p>第一种公式中, google 为我们介绍了如何使用 <a href=\"https://developers.google.com/maps/articles/phpsqlsearch_v3#findnearsql\" target=\"_blank\" rel=\"noopener\">sql</a> 来获取附近的点, 如下所示, 我们选用 6371km 作为地球的半径,根据上述小节的计算公式推断:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C = sin(MLatA)*sin(MLatB)*cos(MLonA-MLonB) + cos(MLatA)*cos(MLatB)</span><br><span class=\"line\">Distance = R*Arccos(C)*Pi/180</span><br></pre></td></tr></table></figure>\n<p>google 地图的计算公式可以参考 <a href=\"http://www.arubin.org/files/geo_search.pdf\" target=\"_blank\" rel=\"noopener\">geo_search</a></p>\n<p>两个位置之间的距离则可以换算成以下公式:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">R*arccos( cos( radians(latA)*cos( radians(latB) ) * cos( radians(lonA - lonB) )) + sin( radians(latA)*cos(latB) ))</span><br></pre></td></tr></table></figure>\n<p>radians 函数计算出相应的弧度信息, 得到下面的 sql:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">  user_id, (</span><br><span class=\"line\">    6371 * acos (</span><br><span class=\"line\">      cos ( radians(40.003033) )</span><br><span class=\"line\">      * cos( radians( latitude ) )</span><br><span class=\"line\">      * cos( radians( longitude ) - radians(116.417481) )</span><br><span class=\"line\">      + sin ( radians(40.003033) )</span><br><span class=\"line\">      * sin( radians( latitude ) )</span><br><span class=\"line\">    )</span><br><span class=\"line\">  ) AS distance</span><br><span class=\"line\">FROM geotest</span><br><span class=\"line\">HAVING distance &lt; 1</span><br><span class=\"line\">ORDER BY distance</span><br><span class=\"line\">LIMIT 0 , 20;</span><br></pre></td></tr></table></figure>\n<p>上面的 sql 从 geotest 中从 geotest 表中获取到经度(116.417481) 和纬度(40.003033) 位置附近 1km 所有的user_id 信息.<br>观察这个 sql, 可以预见到在表数据较大的时候仅建立复合索引 <code>idx_lat_lng</code> 肯定会遇到性能瓶颈, 因为每行记录都需要做相关的运算, 才能跑出最后的结果.</p>\n<p>所以要提高该 sql 的性能就需要尽量过滤不需要的 longitude 和 latitude 两列的值. 参考 <a href=\"http://www.arubin.org/files/geo_search.pdf\" target=\"_blank\" rel=\"noopener\">geo_search</a> 和 <a href=\"http://stackoverflow.com/questions/1006654/fastest-way-to-find-distance-between-two-lat-long-points\" target=\"_blank\" rel=\"noopener\">fastest-way-to-find-distance</a>, 在近距离的情况下我们可以认为当前区域内的所有位置都在一个平面内, 虽然有点误差, 但是比起地球这么大的椭球, 我们完全可以忽略其中的误差. 以经纬度来讲, 1 纬度约等于 69 英里, 大约 111044.736 米, 其中的换算公式为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1°latitude  ~= 69 miles</span><br><span class=\"line\">1°longitude ~= cos(latitude)*69 miles</span><br></pre></td></tr></table></figure>\n<p>所以对于位置信息(lng, lat), 我们可以计算出以其为中心周边指定距离的四个点, 如下图所示:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-------------+</span><br><span class=\"line\">|             |</span><br><span class=\"line\">|             |</span><br><span class=\"line\">|      +      |</span><br><span class=\"line\">|             |</span><br><span class=\"line\">|             |</span><br><span class=\"line\">+-------------+</span><br></pre></td></tr></table></figure>\n<p>计算公式如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lng1 = lon - dist/abs(cos(radians(lat))*69)</span><br><span class=\"line\">lng2 = lon + dist/abs(cos(radians(lat))*69)</span><br><span class=\"line\">lat1 = lat - (dist/69);</span><br><span class=\"line\">lat2 = lat + (dist/69);</span><br></pre></td></tr></table></figure>\n<p>四个点的坐标就分别为 (lng1, lat1), (lng1, lat2), (lng2, lat1), (lng2, lat2), 所以存在于该四个点组成的平面之间的点即可以被认为在(lng, lat) 的 dist 距离内.</p>\n<p>基于上述的规则, 修改 sql 为以下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">  user_id, (</span><br><span class=\"line\">    6371 * acos (</span><br><span class=\"line\">      cos ( radians(40.003033) )</span><br><span class=\"line\">      * cos( radians( latitude ) )</span><br><span class=\"line\">      * cos( radians( longitude ) - radians(116.417481) )</span><br><span class=\"line\">      + sin ( radians(40.003033) )</span><br><span class=\"line\">      * sin( radians( latitude ) )</span><br><span class=\"line\">    )</span><br><span class=\"line\">  ) AS distance</span><br><span class=\"line\">FROM geotest</span><br><span class=\"line\">WHERE longitude BETWEEN lng1 AND lng2</span><br><span class=\"line\">AND latitude BETWEEN lat1 AND lat2</span><br><span class=\"line\">HAVING distance &lt; 1</span><br><span class=\"line\">ORDER BY distance</span><br><span class=\"line\">LIMIT 0 , 20;</span><br></pre></td></tr></table></figure>\n<p>这样就能很好的使用索引, 如果还想增加超时设置, 可以在 sql 里加上 create_time 条件进行过滤, 比如只查找最近一天的附近的用户. 另外开发者也可以结合使用 sphinx 或 elasticsearch 得到更好的性能.</p>\n<p>下面为根据上面介绍的规则整理成存储过程, 方便开发者调用访问. 这里我们将地球半径的公里数转换为米即为 6371392.89m, 69英里则转为 111044.736m, 如下存储过程返回 user_id 和 距离(米):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER $$</span><br><span class=\"line\">drop procedure if exists geo_dist$$</span><br><span class=\"line\">create procedure geo_dist(IN lng decimal(9, 6), IN lat decimal(9, 6), IN dist int)</span><br><span class=\"line\">begin</span><br><span class=\"line\">   declare lng1 decimal(9, 6); declare lng2 decimal(16, 13);</span><br><span class=\"line\">   declare lat1 decimal(9, 6); declare lat1 decimal(16, 13);</span><br><span class=\"line\"></span><br><span class=\"line\">   -- calculate lng and lat for the rectangle, in meters unit</span><br><span class=\"line\">   set lng1 = lng - dist/abs(cos(radians(lat))*111044.736);</span><br><span class=\"line\">   set lng2 = lng + dist/abs(cos(radians(lat))*111044.736);</span><br><span class=\"line\">   set lat1 = lat - (dist/111044.736);</span><br><span class=\"line\">   set lat2 = lat + (dist/111044.736);</span><br><span class=\"line\"></span><br><span class=\"line\">   -- run the query</span><br><span class=\"line\">     select user_id, round((</span><br><span class=\"line\">        6371392.89 * acos (</span><br><span class=\"line\">         cos ( radians(lat) )</span><br><span class=\"line\">         * cos( radians( latitude ) )</span><br><span class=\"line\">         * cos( radians( longitude ) - radians(lng) )</span><br><span class=\"line\">         + sin ( radians(lat) )</span><br><span class=\"line\">         * sin( radians( latitude ) )</span><br><span class=\"line\">       )</span><br><span class=\"line\">     ), 0) AS distance</span><br><span class=\"line\">     from user_position</span><br><span class=\"line\">     where lng between lng1 and lng2</span><br><span class=\"line\">     and lat between lat1 and lat2</span><br><span class=\"line\">     having distance &lt; dist</span><br><span class=\"line\">     ORDER BY distance</span><br><span class=\"line\">     LIMIT 0 , 20;</span><br><span class=\"line\">END$$</span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n<p>运行存储过程, 取出该经纬度下附近 5km 的用户和距离(m):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; call geo_dist(116.4174800000000, 40.0030330000000, 5000);</span><br><span class=\"line\">+---------+----------+</span><br><span class=\"line\">| user_id | distance |</span><br><span class=\"line\">+---------+----------+</span><br><span class=\"line\">|   10000 |        0 |</span><br><span class=\"line\">|   10001 |     1707 |</span><br><span class=\"line\">|   10002 |     3414 |</span><br><span class=\"line\">+---------+----------+</span><br><span class=\"line\">3 rows in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>\n<p>10001 用户和指定的经纬度距离为1707米, 我们在 redis 3.2 版本中进行简单测试, 可以看到结果都很相近:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6380&gt; geoadd tttt 116.417480 40.003033 t1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6380&gt; geoadd tttt 116.437481 40.004034 t2</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6380&gt; GEODIST tttt t1 t2</span><br><span class=\"line\">&quot;1707.5093&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"mongodb\"><a href=\"#mongodb\" class=\"headerlink\" title=\"mongodb\"></a>mongodb</h1><p>创建位置索引</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://arstercz.com/%E4%BD%BF%E7%94%A8-mysql-%E5%AE%9E%E7%8E%B0%E6%90%9C%E7%B4%A2%E9%99%84%E8%BF%91%E7%9A%84%E4%BA%BA/\" target=\"_blank\" rel=\"noopener\">使用 MySQL 实现搜索附近的人</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/35940647\" target=\"_blank\" rel=\"noopener\">GeoHash算法学习讲解、解析及原理分析</a></p>\n</blockquote>\n"},{"title":"Druid初始化","date":"2019-03-25T10:17:33.000Z","_content":"\n```java\npublic void init() throws SQLException {\n        if (inited) {\n            return;\n        }\n\n        // bug fixed for dead lock, for issue #2980\n        DruidDriver.getInstance();\n\n        final ReentrantLock lock = this.lock;\n        try {\n            lock.lockInterruptibly();\n        } catch (InterruptedException e) {\n            throw new SQLException(\"interrupt\", e);\n        }\n\n        boolean init = false;\n        try {\n            //双重检查\n            if (inited) {\n                return;\n            }\n\n            initStackTrace = Utils.toString(Thread.currentThread().getStackTrace());\n\n            this.id = DruidDriver.createDataSourceId();\n            if (this.id > 1) {\n                long delta = (this.id - 1) * 100000;\n                this.connectionIdSeedUpdater.addAndGet(this, delta);\n                this.statementIdSeedUpdater.addAndGet(this, delta);\n                this.resultSetIdSeedUpdater.addAndGet(this, delta);\n                this.transactionIdSeedUpdater.addAndGet(this, delta);\n            }\n\n            if (this.jdbcUrl != null) {\n                this.jdbcUrl = this.jdbcUrl.trim();\n                initFromWrapDriverUrl();\n            }\n\n            for (Filter filter : filters) {\n                filter.init(this);\n            }\n\n            if (this.dbType == null || this.dbType.length() == 0) {\n                this.dbType = JdbcUtils.getDbType(jdbcUrl, null);\n            }\n\n            if (JdbcConstants.MYSQL.equals(this.dbType)\n                    || JdbcConstants.MARIADB.equals(this.dbType)\n                    || JdbcConstants.ALIYUN_ADS.equals(this.dbType)) {\n                boolean cacheServerConfigurationSet = false;\n                if (this.connectProperties.containsKey(\"cacheServerConfiguration\")) {\n                    cacheServerConfigurationSet = true;\n                } else if (this.jdbcUrl.indexOf(\"cacheServerConfiguration\") != -1) {\n                    cacheServerConfigurationSet = true;\n                }\n                if (cacheServerConfigurationSet) {\n                    this.connectProperties.put(\"cacheServerConfiguration\", \"true\");\n                }\n            }\n\n            if (maxActive <= 0) {\n                throw new IllegalArgumentException(\"illegal maxActive \" + maxActive);\n            }\n\n            if (maxActive < minIdle) {\n                throw new IllegalArgumentException(\"illegal maxActive \" + maxActive);\n            }\n\n            if (getInitialSize() > maxActive) {\n                throw new IllegalArgumentException(\"illegal initialSize \" + this.initialSize + \", maxActive \" + maxActive);\n            }\n\n            if (timeBetweenLogStatsMillis > 0 && useGlobalDataSourceStat) {\n                throw new IllegalArgumentException(\"timeBetweenLogStatsMillis not support useGlobalDataSourceStat=true\");\n            }\n\n            if (maxEvictableIdleTimeMillis < minEvictableIdleTimeMillis) {\n                throw new SQLException(\"maxEvictableIdleTimeMillis must be grater than minEvictableIdleTimeMillis\");\n            }\n\n            if (this.driverClass != null) {\n                this.driverClass = driverClass.trim();\n            }\n\n            initFromSPIServiceLoader();\n\n            // 处理驱动\n            if (this.driver == null) {\n                if (this.driverClass == null || this.driverClass.isEmpty()) {\n                    this.driverClass = JdbcUtils.getDriverClassName(this.jdbcUrl);\n                }\n\n                if (MockDriver.class.getName().equals(driverClass)) {\n                    driver = MockDriver.instance;\n                } else {\n                    if (jdbcUrl == null && (driverClass == null || driverClass.length() == 0)) {\n                        throw new SQLException(\"url not set\");\n                    }\n                   \n                    driver = JdbcUtils.createDriver(driverClassLoader, driverClass);\n                }\n            } else {\n                if (this.driverClass == null) {\n                    this.driverClass = driver.getClass().getName();\n                }\n            }\n\t\t\t// 进行参数的核对，没有什么逻辑\n            initCheck();\n\n            // 为不同的数据库处理异常，这个可以借鉴\n            initExceptionSorter();\n            initValidConnectionChecker();\n            // 做了一些检查，不知道\n            validationQueryCheck();\n\n            // 创建数据统计对象\n            if (isUseGlobalDataSourceStat()) {\n                dataSourceStat = JdbcDataSourceStat.getGlobal();\n                if (dataSourceStat == null) {\n                    dataSourceStat = new JdbcDataSourceStat(\"Global\", \"Global\", this.dbType);\n                    JdbcDataSourceStat.setGlobal(dataSourceStat);\n                }\n                if (dataSourceStat.getDbType() == null) {\n                    dataSourceStat.setDbType(this.dbType);\n                }\n            } else {\n                dataSourceStat = new JdbcDataSourceStat(this.name, this.jdbcUrl, this.dbType, this.connectProperties);\n            }\n            dataSourceStat.setResetStatEnable(this.resetStatEnable);\n\n            // 创建连接池\n            connections = new DruidConnectionHolder[maxActive];\n            evictConnections = new DruidConnectionHolder[maxActive];\n            keepAliveConnections = new DruidConnectionHolder[maxActive];\n\n            SQLException connectError = null;\n\n            // 同步或者异步创建线程池\n            if (createScheduler != null && asyncInit) {\n                for (int i = 0; i < initialSize; ++i) {\n                    createTaskCount++;\n                    CreateConnectionTask task = new CreateConnectionTask(true);\n                    this.createSchedulerFuture = createScheduler.submit(task);\n                }\n            } else if (!asyncInit) {\n                // init connections\n                while (poolingCount < initialSize) {\n                    try {\n                        PhysicalConnectionInfo pyConnectInfo = createPhysicalConnection();\n                        DruidConnectionHolder holder = new DruidConnectionHolder(this, pyConnectInfo);\n                        connections[poolingCount++] = holder;\n                    } catch (SQLException ex) {\n                        LOG.error(\"init datasource error, url: \" + this.getUrl(), ex);\n                        if (initExceptionThrow) {\n                            connectError = ex;\n                            break;\n                        } else {\n                            Thread.sleep(3000);\n                        }\n                    }\n                }\n\n                if (poolingCount > 0) {\n                    poolingPeak = poolingCount;\n                    poolingPeakTime = System.currentTimeMillis();\n                }\n            }\n            \n\t\t\t// 用来打印线程池\n            createAndLogThread();\n            \n            \n            createAndStartCreatorThread();\n            \n            // 停止\n            createAndStartDestroyThread();\n\n            // 等待线程创建完成\n            initedLatch.await();\n            init = true;\n\n            initedTime = new Date();\n            \n            // 注册mbean\n            registerMbean();\n\n            if (connectError != null && poolingCount == 0) {\n                throw connectError;\n            }\n\n            // 检查连接池，防止连接池超出最大连接池\n            if (keepAlive) {\n                // async fill to minIdle\n                if (createScheduler != null) {\n                    for (int i = 0; i < minIdle; ++i) {\n                        createTaskCount++;\n                        CreateConnectionTask task = new CreateConnectionTask(true);\n                        this.createSchedulerFuture = createScheduler.submit(task);\n                    }\n                } else {\n                    this.emptySignal();\n                }\n            }\n\n        } catch (SQLException e) {\n            LOG.error(\"{dataSource-\" + this.getID() + \"} init error\", e);\n            throw e;\n        } catch (InterruptedException e) {\n            throw new SQLException(e.getMessage(), e);\n        } catch (RuntimeException e){\n            LOG.error(\"{dataSource-\" + this.getID() + \"} init error\", e);\n            throw e;\n        } catch (Error e){\n            LOG.error(\"{dataSource-\" + this.getID() + \"} init error\", e);\n            throw e;\n\n        } finally {\n            // 初始化成功\n            inited = true;\n            // 解锁\n            lock.unlock();\n\n            if (init && LOG.isInfoEnabled()) {\n                String msg = \"{dataSource-\" + this.getID();\n\n                if (this.name != null && !this.name.isEmpty()) {\n                    msg += \",\";\n                    msg += this.name;\n                }\n\n                msg += \"} inited\";\n\n                LOG.info(msg);\n            }\n        }\n    }\n```\n\n","source":"_posts/Druid初始化.md","raw":"---\ntitle: Druid初始化\ndate: 2019-03-25 18:17:33\ntags:\n- java\n---\n\n```java\npublic void init() throws SQLException {\n        if (inited) {\n            return;\n        }\n\n        // bug fixed for dead lock, for issue #2980\n        DruidDriver.getInstance();\n\n        final ReentrantLock lock = this.lock;\n        try {\n            lock.lockInterruptibly();\n        } catch (InterruptedException e) {\n            throw new SQLException(\"interrupt\", e);\n        }\n\n        boolean init = false;\n        try {\n            //双重检查\n            if (inited) {\n                return;\n            }\n\n            initStackTrace = Utils.toString(Thread.currentThread().getStackTrace());\n\n            this.id = DruidDriver.createDataSourceId();\n            if (this.id > 1) {\n                long delta = (this.id - 1) * 100000;\n                this.connectionIdSeedUpdater.addAndGet(this, delta);\n                this.statementIdSeedUpdater.addAndGet(this, delta);\n                this.resultSetIdSeedUpdater.addAndGet(this, delta);\n                this.transactionIdSeedUpdater.addAndGet(this, delta);\n            }\n\n            if (this.jdbcUrl != null) {\n                this.jdbcUrl = this.jdbcUrl.trim();\n                initFromWrapDriverUrl();\n            }\n\n            for (Filter filter : filters) {\n                filter.init(this);\n            }\n\n            if (this.dbType == null || this.dbType.length() == 0) {\n                this.dbType = JdbcUtils.getDbType(jdbcUrl, null);\n            }\n\n            if (JdbcConstants.MYSQL.equals(this.dbType)\n                    || JdbcConstants.MARIADB.equals(this.dbType)\n                    || JdbcConstants.ALIYUN_ADS.equals(this.dbType)) {\n                boolean cacheServerConfigurationSet = false;\n                if (this.connectProperties.containsKey(\"cacheServerConfiguration\")) {\n                    cacheServerConfigurationSet = true;\n                } else if (this.jdbcUrl.indexOf(\"cacheServerConfiguration\") != -1) {\n                    cacheServerConfigurationSet = true;\n                }\n                if (cacheServerConfigurationSet) {\n                    this.connectProperties.put(\"cacheServerConfiguration\", \"true\");\n                }\n            }\n\n            if (maxActive <= 0) {\n                throw new IllegalArgumentException(\"illegal maxActive \" + maxActive);\n            }\n\n            if (maxActive < minIdle) {\n                throw new IllegalArgumentException(\"illegal maxActive \" + maxActive);\n            }\n\n            if (getInitialSize() > maxActive) {\n                throw new IllegalArgumentException(\"illegal initialSize \" + this.initialSize + \", maxActive \" + maxActive);\n            }\n\n            if (timeBetweenLogStatsMillis > 0 && useGlobalDataSourceStat) {\n                throw new IllegalArgumentException(\"timeBetweenLogStatsMillis not support useGlobalDataSourceStat=true\");\n            }\n\n            if (maxEvictableIdleTimeMillis < minEvictableIdleTimeMillis) {\n                throw new SQLException(\"maxEvictableIdleTimeMillis must be grater than minEvictableIdleTimeMillis\");\n            }\n\n            if (this.driverClass != null) {\n                this.driverClass = driverClass.trim();\n            }\n\n            initFromSPIServiceLoader();\n\n            // 处理驱动\n            if (this.driver == null) {\n                if (this.driverClass == null || this.driverClass.isEmpty()) {\n                    this.driverClass = JdbcUtils.getDriverClassName(this.jdbcUrl);\n                }\n\n                if (MockDriver.class.getName().equals(driverClass)) {\n                    driver = MockDriver.instance;\n                } else {\n                    if (jdbcUrl == null && (driverClass == null || driverClass.length() == 0)) {\n                        throw new SQLException(\"url not set\");\n                    }\n                   \n                    driver = JdbcUtils.createDriver(driverClassLoader, driverClass);\n                }\n            } else {\n                if (this.driverClass == null) {\n                    this.driverClass = driver.getClass().getName();\n                }\n            }\n\t\t\t// 进行参数的核对，没有什么逻辑\n            initCheck();\n\n            // 为不同的数据库处理异常，这个可以借鉴\n            initExceptionSorter();\n            initValidConnectionChecker();\n            // 做了一些检查，不知道\n            validationQueryCheck();\n\n            // 创建数据统计对象\n            if (isUseGlobalDataSourceStat()) {\n                dataSourceStat = JdbcDataSourceStat.getGlobal();\n                if (dataSourceStat == null) {\n                    dataSourceStat = new JdbcDataSourceStat(\"Global\", \"Global\", this.dbType);\n                    JdbcDataSourceStat.setGlobal(dataSourceStat);\n                }\n                if (dataSourceStat.getDbType() == null) {\n                    dataSourceStat.setDbType(this.dbType);\n                }\n            } else {\n                dataSourceStat = new JdbcDataSourceStat(this.name, this.jdbcUrl, this.dbType, this.connectProperties);\n            }\n            dataSourceStat.setResetStatEnable(this.resetStatEnable);\n\n            // 创建连接池\n            connections = new DruidConnectionHolder[maxActive];\n            evictConnections = new DruidConnectionHolder[maxActive];\n            keepAliveConnections = new DruidConnectionHolder[maxActive];\n\n            SQLException connectError = null;\n\n            // 同步或者异步创建线程池\n            if (createScheduler != null && asyncInit) {\n                for (int i = 0; i < initialSize; ++i) {\n                    createTaskCount++;\n                    CreateConnectionTask task = new CreateConnectionTask(true);\n                    this.createSchedulerFuture = createScheduler.submit(task);\n                }\n            } else if (!asyncInit) {\n                // init connections\n                while (poolingCount < initialSize) {\n                    try {\n                        PhysicalConnectionInfo pyConnectInfo = createPhysicalConnection();\n                        DruidConnectionHolder holder = new DruidConnectionHolder(this, pyConnectInfo);\n                        connections[poolingCount++] = holder;\n                    } catch (SQLException ex) {\n                        LOG.error(\"init datasource error, url: \" + this.getUrl(), ex);\n                        if (initExceptionThrow) {\n                            connectError = ex;\n                            break;\n                        } else {\n                            Thread.sleep(3000);\n                        }\n                    }\n                }\n\n                if (poolingCount > 0) {\n                    poolingPeak = poolingCount;\n                    poolingPeakTime = System.currentTimeMillis();\n                }\n            }\n            \n\t\t\t// 用来打印线程池\n            createAndLogThread();\n            \n            \n            createAndStartCreatorThread();\n            \n            // 停止\n            createAndStartDestroyThread();\n\n            // 等待线程创建完成\n            initedLatch.await();\n            init = true;\n\n            initedTime = new Date();\n            \n            // 注册mbean\n            registerMbean();\n\n            if (connectError != null && poolingCount == 0) {\n                throw connectError;\n            }\n\n            // 检查连接池，防止连接池超出最大连接池\n            if (keepAlive) {\n                // async fill to minIdle\n                if (createScheduler != null) {\n                    for (int i = 0; i < minIdle; ++i) {\n                        createTaskCount++;\n                        CreateConnectionTask task = new CreateConnectionTask(true);\n                        this.createSchedulerFuture = createScheduler.submit(task);\n                    }\n                } else {\n                    this.emptySignal();\n                }\n            }\n\n        } catch (SQLException e) {\n            LOG.error(\"{dataSource-\" + this.getID() + \"} init error\", e);\n            throw e;\n        } catch (InterruptedException e) {\n            throw new SQLException(e.getMessage(), e);\n        } catch (RuntimeException e){\n            LOG.error(\"{dataSource-\" + this.getID() + \"} init error\", e);\n            throw e;\n        } catch (Error e){\n            LOG.error(\"{dataSource-\" + this.getID() + \"} init error\", e);\n            throw e;\n\n        } finally {\n            // 初始化成功\n            inited = true;\n            // 解锁\n            lock.unlock();\n\n            if (init && LOG.isInfoEnabled()) {\n                String msg = \"{dataSource-\" + this.getID();\n\n                if (this.name != null && !this.name.isEmpty()) {\n                    msg += \",\";\n                    msg += this.name;\n                }\n\n                msg += \"} inited\";\n\n                LOG.info(msg);\n            }\n        }\n    }\n```\n\n","slug":"Druid初始化","published":1,"updated":"2019-10-14T09:01:07.371Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a431002kic1ya47iok0q","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inited) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// bug fixed for dead lock, for issue #2980</span></span><br><span class=\"line\">        DruidDriver.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> ReentrantLock lock = <span class=\"keyword\">this</span>.lock;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            lock.lockInterruptibly();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SQLException(<span class=\"string\">\"interrupt\"</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> init = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//双重检查</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (inited) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            initStackTrace = Utils.toString(Thread.currentThread().getStackTrace());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.id = DruidDriver.createDataSourceId();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.id &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> delta = (<span class=\"keyword\">this</span>.id - <span class=\"number\">1</span>) * <span class=\"number\">100000</span>;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.connectionIdSeedUpdater.addAndGet(<span class=\"keyword\">this</span>, delta);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.statementIdSeedUpdater.addAndGet(<span class=\"keyword\">this</span>, delta);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.resultSetIdSeedUpdater.addAndGet(<span class=\"keyword\">this</span>, delta);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.transactionIdSeedUpdater.addAndGet(<span class=\"keyword\">this</span>, delta);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.jdbcUrl != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.jdbcUrl = <span class=\"keyword\">this</span>.jdbcUrl.trim();</span><br><span class=\"line\">                initFromWrapDriverUrl();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Filter filter : filters) &#123;</span><br><span class=\"line\">                filter.init(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dbType == <span class=\"keyword\">null</span> || <span class=\"keyword\">this</span>.dbType.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.dbType = JdbcUtils.getDbType(jdbcUrl, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (JdbcConstants.MYSQL.equals(<span class=\"keyword\">this</span>.dbType)</span><br><span class=\"line\">                    || JdbcConstants.MARIADB.equals(<span class=\"keyword\">this</span>.dbType)</span><br><span class=\"line\">                    || JdbcConstants.ALIYUN_ADS.equals(<span class=\"keyword\">this</span>.dbType)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> cacheServerConfigurationSet = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.connectProperties.containsKey(<span class=\"string\">\"cacheServerConfiguration\"</span>)) &#123;</span><br><span class=\"line\">                    cacheServerConfigurationSet = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.jdbcUrl.indexOf(<span class=\"string\">\"cacheServerConfiguration\"</span>) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    cacheServerConfigurationSet = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (cacheServerConfigurationSet) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.connectProperties.put(<span class=\"string\">\"cacheServerConfiguration\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxActive &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"illegal maxActive \"</span> + maxActive);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxActive &lt; minIdle) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"illegal maxActive \"</span> + maxActive);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (getInitialSize() &gt; maxActive) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"illegal initialSize \"</span> + <span class=\"keyword\">this</span>.initialSize + <span class=\"string\">\", maxActive \"</span> + maxActive);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (timeBetweenLogStatsMillis &gt; <span class=\"number\">0</span> &amp;&amp; useGlobalDataSourceStat) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"timeBetweenLogStatsMillis not support useGlobalDataSourceStat=true\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxEvictableIdleTimeMillis &lt; minEvictableIdleTimeMillis) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SQLException(<span class=\"string\">\"maxEvictableIdleTimeMillis must be grater than minEvictableIdleTimeMillis\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.driverClass != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.driverClass = driverClass.trim();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            initFromSPIServiceLoader();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 处理驱动</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.driver == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.driverClass == <span class=\"keyword\">null</span> || <span class=\"keyword\">this</span>.driverClass.isEmpty()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.driverClass = JdbcUtils.getDriverClassName(<span class=\"keyword\">this</span>.jdbcUrl);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (MockDriver.class.getName().equals(driverClass)) &#123;</span><br><span class=\"line\">                    driver = MockDriver.instance;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (jdbcUrl == <span class=\"keyword\">null</span> &amp;&amp; (driverClass == <span class=\"keyword\">null</span> || driverClass.length() == <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SQLException(<span class=\"string\">\"url not set\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                   </span><br><span class=\"line\">                    driver = JdbcUtils.createDriver(driverClassLoader, driverClass);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.driverClass == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.driverClass = driver.getClass().getName();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 进行参数的核对，没有什么逻辑</span></span><br><span class=\"line\">            initCheck();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 为不同的数据库处理异常，这个可以借鉴</span></span><br><span class=\"line\">            initExceptionSorter();</span><br><span class=\"line\">            initValidConnectionChecker();</span><br><span class=\"line\">            <span class=\"comment\">// 做了一些检查，不知道</span></span><br><span class=\"line\">            validationQueryCheck();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 创建数据统计对象</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isUseGlobalDataSourceStat()) &#123;</span><br><span class=\"line\">                dataSourceStat = JdbcDataSourceStat.getGlobal();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dataSourceStat == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    dataSourceStat = <span class=\"keyword\">new</span> JdbcDataSourceStat(<span class=\"string\">\"Global\"</span>, <span class=\"string\">\"Global\"</span>, <span class=\"keyword\">this</span>.dbType);</span><br><span class=\"line\">                    JdbcDataSourceStat.setGlobal(dataSourceStat);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dataSourceStat.getDbType() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    dataSourceStat.setDbType(<span class=\"keyword\">this</span>.dbType);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                dataSourceStat = <span class=\"keyword\">new</span> JdbcDataSourceStat(<span class=\"keyword\">this</span>.name, <span class=\"keyword\">this</span>.jdbcUrl, <span class=\"keyword\">this</span>.dbType, <span class=\"keyword\">this</span>.connectProperties);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dataSourceStat.setResetStatEnable(<span class=\"keyword\">this</span>.resetStatEnable);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 创建连接池</span></span><br><span class=\"line\">            connections = <span class=\"keyword\">new</span> DruidConnectionHolder[maxActive];</span><br><span class=\"line\">            evictConnections = <span class=\"keyword\">new</span> DruidConnectionHolder[maxActive];</span><br><span class=\"line\">            keepAliveConnections = <span class=\"keyword\">new</span> DruidConnectionHolder[maxActive];</span><br><span class=\"line\"></span><br><span class=\"line\">            SQLException connectError = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 同步或者异步创建线程池</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (createScheduler != <span class=\"keyword\">null</span> &amp;&amp; asyncInit) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; initialSize; ++i) &#123;</span><br><span class=\"line\">                    createTaskCount++;</span><br><span class=\"line\">                    CreateConnectionTask task = <span class=\"keyword\">new</span> CreateConnectionTask(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.createSchedulerFuture = createScheduler.submit(task);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!asyncInit) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// init connections</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (poolingCount &lt; initialSize) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        PhysicalConnectionInfo pyConnectInfo = createPhysicalConnection();</span><br><span class=\"line\">                        DruidConnectionHolder holder = <span class=\"keyword\">new</span> DruidConnectionHolder(<span class=\"keyword\">this</span>, pyConnectInfo);</span><br><span class=\"line\">                        connections[poolingCount++] = holder;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (SQLException ex) &#123;</span><br><span class=\"line\">                        LOG.error(<span class=\"string\">\"init datasource error, url: \"</span> + <span class=\"keyword\">this</span>.getUrl(), ex);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (initExceptionThrow) &#123;</span><br><span class=\"line\">                            connectError = ex;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            Thread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (poolingCount &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    poolingPeak = poolingCount;</span><br><span class=\"line\">                    poolingPeakTime = System.currentTimeMillis();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 用来打印线程池</span></span><br><span class=\"line\">            createAndLogThread();</span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\">            createAndStartCreatorThread();</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 停止</span></span><br><span class=\"line\">            createAndStartDestroyThread();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 等待线程创建完成</span></span><br><span class=\"line\">            initedLatch.await();</span><br><span class=\"line\">            init = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            initedTime = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 注册mbean</span></span><br><span class=\"line\">            registerMbean();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (connectError != <span class=\"keyword\">null</span> &amp;&amp; poolingCount == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> connectError;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 检查连接池，防止连接池超出最大连接池</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (keepAlive) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// async fill to minIdle</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (createScheduler != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; minIdle; ++i) &#123;</span><br><span class=\"line\">                        createTaskCount++;</span><br><span class=\"line\">                        CreateConnectionTask task = <span class=\"keyword\">new</span> CreateConnectionTask(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.createSchedulerFuture = createScheduler.submit(task);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.emptySignal();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            LOG.error(<span class=\"string\">\"&#123;dataSource-\"</span> + <span class=\"keyword\">this</span>.getID() + <span class=\"string\">\"&#125; init error\"</span>, e);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SQLException(e.getMessage(), e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException e)&#123;</span><br><span class=\"line\">            LOG.error(<span class=\"string\">\"&#123;dataSource-\"</span> + <span class=\"keyword\">this</span>.getID() + <span class=\"string\">\"&#125; init error\"</span>, e);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Error e)&#123;</span><br><span class=\"line\">            LOG.error(<span class=\"string\">\"&#123;dataSource-\"</span> + <span class=\"keyword\">this</span>.getID() + <span class=\"string\">\"&#125; init error\"</span>, e);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 初始化成功</span></span><br><span class=\"line\">            inited = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 解锁</span></span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (init &amp;&amp; LOG.isInfoEnabled()) &#123;</span><br><span class=\"line\">                String msg = <span class=\"string\">\"&#123;dataSource-\"</span> + <span class=\"keyword\">this</span>.getID();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.name != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"keyword\">this</span>.name.isEmpty()) &#123;</span><br><span class=\"line\">                    msg += <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">                    msg += <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                msg += <span class=\"string\">\"&#125; inited\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                LOG.info(msg);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inited) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// bug fixed for dead lock, for issue #2980</span></span><br><span class=\"line\">        DruidDriver.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> ReentrantLock lock = <span class=\"keyword\">this</span>.lock;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            lock.lockInterruptibly();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SQLException(<span class=\"string\">\"interrupt\"</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> init = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//双重检查</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (inited) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            initStackTrace = Utils.toString(Thread.currentThread().getStackTrace());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.id = DruidDriver.createDataSourceId();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.id &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> delta = (<span class=\"keyword\">this</span>.id - <span class=\"number\">1</span>) * <span class=\"number\">100000</span>;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.connectionIdSeedUpdater.addAndGet(<span class=\"keyword\">this</span>, delta);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.statementIdSeedUpdater.addAndGet(<span class=\"keyword\">this</span>, delta);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.resultSetIdSeedUpdater.addAndGet(<span class=\"keyword\">this</span>, delta);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.transactionIdSeedUpdater.addAndGet(<span class=\"keyword\">this</span>, delta);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.jdbcUrl != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.jdbcUrl = <span class=\"keyword\">this</span>.jdbcUrl.trim();</span><br><span class=\"line\">                initFromWrapDriverUrl();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Filter filter : filters) &#123;</span><br><span class=\"line\">                filter.init(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dbType == <span class=\"keyword\">null</span> || <span class=\"keyword\">this</span>.dbType.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.dbType = JdbcUtils.getDbType(jdbcUrl, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (JdbcConstants.MYSQL.equals(<span class=\"keyword\">this</span>.dbType)</span><br><span class=\"line\">                    || JdbcConstants.MARIADB.equals(<span class=\"keyword\">this</span>.dbType)</span><br><span class=\"line\">                    || JdbcConstants.ALIYUN_ADS.equals(<span class=\"keyword\">this</span>.dbType)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> cacheServerConfigurationSet = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.connectProperties.containsKey(<span class=\"string\">\"cacheServerConfiguration\"</span>)) &#123;</span><br><span class=\"line\">                    cacheServerConfigurationSet = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.jdbcUrl.indexOf(<span class=\"string\">\"cacheServerConfiguration\"</span>) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    cacheServerConfigurationSet = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (cacheServerConfigurationSet) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.connectProperties.put(<span class=\"string\">\"cacheServerConfiguration\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxActive &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"illegal maxActive \"</span> + maxActive);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxActive &lt; minIdle) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"illegal maxActive \"</span> + maxActive);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (getInitialSize() &gt; maxActive) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"illegal initialSize \"</span> + <span class=\"keyword\">this</span>.initialSize + <span class=\"string\">\", maxActive \"</span> + maxActive);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (timeBetweenLogStatsMillis &gt; <span class=\"number\">0</span> &amp;&amp; useGlobalDataSourceStat) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"timeBetweenLogStatsMillis not support useGlobalDataSourceStat=true\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxEvictableIdleTimeMillis &lt; minEvictableIdleTimeMillis) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SQLException(<span class=\"string\">\"maxEvictableIdleTimeMillis must be grater than minEvictableIdleTimeMillis\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.driverClass != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.driverClass = driverClass.trim();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            initFromSPIServiceLoader();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 处理驱动</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.driver == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.driverClass == <span class=\"keyword\">null</span> || <span class=\"keyword\">this</span>.driverClass.isEmpty()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.driverClass = JdbcUtils.getDriverClassName(<span class=\"keyword\">this</span>.jdbcUrl);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (MockDriver.class.getName().equals(driverClass)) &#123;</span><br><span class=\"line\">                    driver = MockDriver.instance;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (jdbcUrl == <span class=\"keyword\">null</span> &amp;&amp; (driverClass == <span class=\"keyword\">null</span> || driverClass.length() == <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SQLException(<span class=\"string\">\"url not set\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                   </span><br><span class=\"line\">                    driver = JdbcUtils.createDriver(driverClassLoader, driverClass);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.driverClass == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.driverClass = driver.getClass().getName();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 进行参数的核对，没有什么逻辑</span></span><br><span class=\"line\">            initCheck();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 为不同的数据库处理异常，这个可以借鉴</span></span><br><span class=\"line\">            initExceptionSorter();</span><br><span class=\"line\">            initValidConnectionChecker();</span><br><span class=\"line\">            <span class=\"comment\">// 做了一些检查，不知道</span></span><br><span class=\"line\">            validationQueryCheck();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 创建数据统计对象</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isUseGlobalDataSourceStat()) &#123;</span><br><span class=\"line\">                dataSourceStat = JdbcDataSourceStat.getGlobal();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dataSourceStat == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    dataSourceStat = <span class=\"keyword\">new</span> JdbcDataSourceStat(<span class=\"string\">\"Global\"</span>, <span class=\"string\">\"Global\"</span>, <span class=\"keyword\">this</span>.dbType);</span><br><span class=\"line\">                    JdbcDataSourceStat.setGlobal(dataSourceStat);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dataSourceStat.getDbType() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    dataSourceStat.setDbType(<span class=\"keyword\">this</span>.dbType);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                dataSourceStat = <span class=\"keyword\">new</span> JdbcDataSourceStat(<span class=\"keyword\">this</span>.name, <span class=\"keyword\">this</span>.jdbcUrl, <span class=\"keyword\">this</span>.dbType, <span class=\"keyword\">this</span>.connectProperties);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dataSourceStat.setResetStatEnable(<span class=\"keyword\">this</span>.resetStatEnable);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 创建连接池</span></span><br><span class=\"line\">            connections = <span class=\"keyword\">new</span> DruidConnectionHolder[maxActive];</span><br><span class=\"line\">            evictConnections = <span class=\"keyword\">new</span> DruidConnectionHolder[maxActive];</span><br><span class=\"line\">            keepAliveConnections = <span class=\"keyword\">new</span> DruidConnectionHolder[maxActive];</span><br><span class=\"line\"></span><br><span class=\"line\">            SQLException connectError = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 同步或者异步创建线程池</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (createScheduler != <span class=\"keyword\">null</span> &amp;&amp; asyncInit) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; initialSize; ++i) &#123;</span><br><span class=\"line\">                    createTaskCount++;</span><br><span class=\"line\">                    CreateConnectionTask task = <span class=\"keyword\">new</span> CreateConnectionTask(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.createSchedulerFuture = createScheduler.submit(task);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!asyncInit) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// init connections</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (poolingCount &lt; initialSize) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        PhysicalConnectionInfo pyConnectInfo = createPhysicalConnection();</span><br><span class=\"line\">                        DruidConnectionHolder holder = <span class=\"keyword\">new</span> DruidConnectionHolder(<span class=\"keyword\">this</span>, pyConnectInfo);</span><br><span class=\"line\">                        connections[poolingCount++] = holder;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (SQLException ex) &#123;</span><br><span class=\"line\">                        LOG.error(<span class=\"string\">\"init datasource error, url: \"</span> + <span class=\"keyword\">this</span>.getUrl(), ex);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (initExceptionThrow) &#123;</span><br><span class=\"line\">                            connectError = ex;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            Thread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (poolingCount &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    poolingPeak = poolingCount;</span><br><span class=\"line\">                    poolingPeakTime = System.currentTimeMillis();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 用来打印线程池</span></span><br><span class=\"line\">            createAndLogThread();</span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\">            createAndStartCreatorThread();</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 停止</span></span><br><span class=\"line\">            createAndStartDestroyThread();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 等待线程创建完成</span></span><br><span class=\"line\">            initedLatch.await();</span><br><span class=\"line\">            init = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            initedTime = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 注册mbean</span></span><br><span class=\"line\">            registerMbean();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (connectError != <span class=\"keyword\">null</span> &amp;&amp; poolingCount == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> connectError;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 检查连接池，防止连接池超出最大连接池</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (keepAlive) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// async fill to minIdle</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (createScheduler != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; minIdle; ++i) &#123;</span><br><span class=\"line\">                        createTaskCount++;</span><br><span class=\"line\">                        CreateConnectionTask task = <span class=\"keyword\">new</span> CreateConnectionTask(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.createSchedulerFuture = createScheduler.submit(task);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.emptySignal();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            LOG.error(<span class=\"string\">\"&#123;dataSource-\"</span> + <span class=\"keyword\">this</span>.getID() + <span class=\"string\">\"&#125; init error\"</span>, e);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SQLException(e.getMessage(), e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException e)&#123;</span><br><span class=\"line\">            LOG.error(<span class=\"string\">\"&#123;dataSource-\"</span> + <span class=\"keyword\">this</span>.getID() + <span class=\"string\">\"&#125; init error\"</span>, e);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Error e)&#123;</span><br><span class=\"line\">            LOG.error(<span class=\"string\">\"&#123;dataSource-\"</span> + <span class=\"keyword\">this</span>.getID() + <span class=\"string\">\"&#125; init error\"</span>, e);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 初始化成功</span></span><br><span class=\"line\">            inited = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 解锁</span></span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (init &amp;&amp; LOG.isInfoEnabled()) &#123;</span><br><span class=\"line\">                String msg = <span class=\"string\">\"&#123;dataSource-\"</span> + <span class=\"keyword\">this</span>.getID();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.name != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"keyword\">this</span>.name.isEmpty()) &#123;</span><br><span class=\"line\">                    msg += <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">                    msg += <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                msg += <span class=\"string\">\"&#125; inited\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                LOG.info(msg);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n"},{"_content":"title: java-线程池\ndate: 2019-04-10 10:32:39\ntags:\n\n- java\n\n## 1. 线程池的关系\n\nExecutorService```提供一些声明周期管理方法\n\n![1536473588949](assets/1536473588949.png)\n\n## 2. ```Executor\n\n```\npublic interface Executor {\n    void execute(Runnable command);\n}\n```\n\n## 3.\n\n```\njavapublic abstract class AbstractExecutorService implements ExecutorService {    // RunnableFuture 是用于获取执行结果的，我们常用它的子类 FutureTask    // 下面两个 newTaskFor 方法用于将我们的任务包装成 FutureTask 提交到线程池中执行    protected <T> RunnableFuture<T> newTaskFor(Runnable runnable, T value) {        return new FutureTask<T>(runnable, value);    }    protected <T> RunnableFuture<T> newTaskFor(Callable<T> callable) {        return new FutureTask<T>(callable);    }    // 提交任务    public Future<?> submit(Runnable task) {        if (task == null) throw new NullPointerException();        RunnableFuture<Void> ftask = newTaskFor(task, null);        execute(ftask);        return ftask;    }    /**     * @throws RejectedExecutionException {@inheritDoc}     * @throws NullPointerException       {@inheritDoc}     */    public <T> Future<T> submit(Runnable task, T result) {        if (task == null) throw new NullPointerException();         // 1. 将任务包装成 FutureTask        RunnableFuture<T> ftask = newTaskFor(task, result);        // 2. 交给执行器执行，execute 方法由具体的子类来实现        // 前面也说了，FutureTask 间接实现了Runnable 接口。        execute(ftask);        return ftask;    }    public <T> Future<T> submit(Callable<T> task) {        if (task == null) throw new NullPointerException();        RunnableFuture<T> ftask = newTaskFor(task);        execute(ftask);        return ftask;    }     // 此方法目的：将 tasks 集合中的任务提交到线程池执行，任意一个线程执行完后就可以结束了    // 第二个参数 timed 代表是否设置超时机制，超时时间为第三个参数，    // 如果 timed 为 true，同时超时了还没有一个线程返回结果，那么抛出 TimeoutException 异常    private <T> T doInvokeAny(Collection<? extends Callable<T>> tasks,                              boolean timed, long nanos)        throws InterruptedException, ExecutionException, TimeoutException {        if (tasks == null)            throw new NullPointerException();        int ntasks = tasks.size();        if (ntasks == 0)            throw new IllegalArgumentException();        ArrayList<Future<T>> futures = new ArrayList<Future<T>>(ntasks);         // ExecutorCompletionService 不是一个真正的执行器，参数 this 才是真正的执行器        // 它对执行器进行了包装，每个任务结束后，将结果保存到内部的一个 completionQueue 队列中        // 这也是为什么这个类的名字里面有个 Completion 的原因吧。        ExecutorCompletionService<T> ecs =            new ExecutorCompletionService<T>(this);        // For efficiency, especially in executors with limited        // parallelism, check to see if previously submitted tasks are        // done before submitting more of them. This interleaving        // plus the exception mechanics account for messiness of main        // loop.        try {            // 用于保存异常信息，此方法如果没有得到任何有效的结果，那么我们可以抛出最后得到的一个异常            ExecutionException ee = null;            final long deadline = timed ? System.nanoTime() + nanos : 0L;            Iterator<? extends Callable<T>> it = tasks.iterator();             // 首先先提交一个任务，后面的任务到下面的 for 循环一个个提交            futures.add(ecs.submit(it.next()));            --ntasks;            int active = 1;            for (;;) {                // ecs 上面说了，其内部有一个 completionQueue 用于保存执行完成的结果                // BlockingQueue 的 poll 方法不阻塞，返回 null 代表队列为空                Future<T> f = ecs.poll();                 // 为 null，说明刚刚提交的第一个线程还没有执行完成                // 在前面先提交一个任务，加上这里做一次检查，也是为了提高性能                if (f == null) {                    if (ntasks > 0) {                        --ntasks;                        futures.add(ecs.submit(it.next()));                        ++active;                    }                     // 这里是 else if，不是 if。这里说明，没有任务了，同时 active 为 0 说明                    // 任务都执行完成了。其实我也没理解为什么这里做一次 break？                    // 因为我认为 active 为 0 的情况，必然从下面的 f.get() 返回了                    else if (active == 0)                        break;                     // 这里也是 else if。这里说的是，没有任务了，但是设置了超时时间，这里检测是否超时                    else if (timed) {                        f = ecs.poll(nanos, TimeUnit.NANOSECONDS);                        if (f == null)                            throw new TimeoutException();                        nanos = deadline - System.nanoTime();                    }                    else                   // else。说明，没有任务需要提交，但是池中的任务没有完成，还没有超时(如果设置了超时)                    // take() 方法会阻塞，直到有元素返回，说明有任务结束了                        f = ecs.take();                }                // 有任务结束了                if (f != null) {                    --active;                    try {                        // 返回执行结果，如果有异常，都包装成 ExecutionException                        return f.get();                    } catch (ExecutionException eex) {                        ee = eex;                    } catch (RuntimeException rex) {                        ee = new ExecutionException(rex);                    }                }            }            if (ee == null)                ee = new ExecutionException();            throw ee;        } finally {            for (int i = 0, size = futures.size(); i < size; i++)                futures.get(i).cancel(true);        }    }    public <T> T invokeAny(Collection<? extends Callable<T>> tasks)        throws InterruptedException, ExecutionException {        try {            return doInvokeAny(tasks, false, 0);        } catch (TimeoutException cannotHappen) {            assert false;            return null;        }    }    public <T> T invokeAny(Collection<? extends Callable<T>> tasks,                           long timeout, TimeUnit unit)        throws InterruptedException, ExecutionException, TimeoutException {        return doInvokeAny(tasks, true, unit.toNanos(timeout));    }      // 执行所有的任务，返回任务结果。    // 先不要看这个方法，我们先想想，其实我们自己提交任务到线程池，也是想要线程池执行所有的任务    // 只不过，我们是每次 submit 一个任务，这里以一个集合作为参数提交    public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks)        throws InterruptedException {        if (tasks == null)            throw new NullPointerException();        ArrayList<Future<T>> futures = new ArrayList<Future<T>>(tasks.size());        boolean done = false;        try {            for (Callable<T> t : tasks) {                RunnableFuture<T> f = newTaskFor(t);                futures.add(f);                execute(f);            }            for (int i = 0, size = futures.size(); i < size; i++) {                Future<T> f = futures.get(i);                if (!f.isDone()) {                    try {                       // 这是一个阻塞方法，直到获取到值，或抛出了异常                       // 这里有个小细节，其实 get 方法签名上是会抛出 InterruptedException 的                       // 可是这里没有进行处理，而是抛给外层去了。此异常发生于还没执行完的任务被取消了                        f.get();                    } catch (CancellationException ignore) {                    } catch (ExecutionException ignore) {                    }                }            }            done = true;            return futures;        } finally {            if (!done)                for (int i = 0, size = futures.size(); i < size; i++)                    futures.get(i).cancel(true);        }    }    public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks,                                         long timeout, TimeUnit unit)        throws InterruptedException {        if (tasks == null)            throw new NullPointerException();        long nanos = unit.toNanos(timeout);        ArrayList<Future<T>> futures = new ArrayList<Future<T>>(tasks.size());        boolean done = false;        try {            for (Callable<T> t : tasks)                futures.add(newTaskFor(t));            final long deadline = System.nanoTime() + nanos;            final int size = futures.size();            // Interleave time checks and calls to execute in case            // executor doesn't have any/much parallelism.            for (int i = 0; i < size; i++) {                execute((Runnable)futures.get(i));                nanos = deadline - System.nanoTime();                if (nanos <= 0L)                    return futures;            }            for (int i = 0; i < size; i++) {                Future<T> f = futures.get(i);                if (!f.isDone()) {                    if (nanos <= 0L)                        return futures;                    try {                        f.get(nanos, TimeUnit.NANOSECONDS);                    } catch (CancellationException ignore) {                    } catch (ExecutionException ignore) {                    } catch (TimeoutException toe) {                        return futures;                    }                    nanos = deadline - System.nanoTime();                }            }            done = true;            return futures;        } finally {            if (!done)                for (int i = 0, size = futures.size(); i < size; i++)                    futures.get(i).cancel(true);        }    }}`\n\n```\n\n## 4.\n\n```\njava/**     * The main pool control state, ctl, is an atomic integer packing     * two conceptual fields     *   workerCount, indicating the effective number of threads     *   runState,    indicating whether running, shutting down etc     *     * In order to pack them into one int, we limit workerCount to     * (2^29)-1 (about 500 million) threads rather than (2^31)-1 (2     * billion) otherwise representable. If this is ever an issue in     * the future, the variable can be changed to be an AtomicLong,     * and the shift/mask constants below adjusted. But until the need     * arises, this code is a bit faster and simpler using an int.     *     * The workerCount is the number of workers that have been     * permitted to start and not permitted to stop.  The value may be     * transiently different from the actual number of live threads,     * for example when a ThreadFactory fails to create a thread when     * asked, and when exiting threads are still performing     * bookkeeping before terminating. The user-visible pool size is     * reported as the current size of the workers set.     *     * The runState provides the main lifecycle control, taking on values:     *     *   RUNNING:  Accept new tasks and process queued tasks     *   SHUTDOWN: Don't accept new tasks, but process queued tasks     *   STOP:     Don't accept new tasks, don't process queued tasks,     *             and interrupt in-progress tasks     *   TIDYING:  All tasks have terminated, workerCount is zero,     *             the thread transitioning to state TIDYING     *             will run the terminated() hook method     *   TERMINATED: terminated() has completed     *     * The numerical order among these values matters, to allow     * ordered comparisons. The runState monotonically increases over     * time, but need not hit each state. The transitions are:     *     * RUNNING -> SHUTDOWN     *    On invocation of shutdown(), perhaps implicitly in finalize()     * (RUNNING or SHUTDOWN) -> STOP     *    On invocation of shutdownNow()     * SHUTDOWN -> TIDYING     *    When both queue and pool are empty     * STOP -> TIDYING     *    When pool is empty     * TIDYING -> TERMINATED     *    When the terminated() hook method has completed     *     * Threads waiting in awaitTermination() will return when the     * state reaches TERMINATED.     *     * Detecting the transition from SHUTDOWN to TIDYING is less     * straightforward than you'd like because the queue may become     * empty after non-empty and vice versa during SHUTDOWN state, but     * we can only terminate if, after seeing that it is empty, we see     * that workerCount is 0 (which sometimes entails a recheck -- see     * below).     */    private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));public void execute(Runnable command) {        if (command == null)            throw new NullPointerException();        /*         * Proceed in 3 steps:         *         * 1. If fewer than corePoolSize threads are running, try to         * start a new thread with the given command as its first         * task.  The call to addWorker atomically checks runState and         * workerCount, and so prevents false alarms that would add         * threads when it shouldn't, by returning false.         *         * 2. If a task can be successfully queued, then we still need         * to double-check whether we should have added a thread         * (because existing ones died since last checking) or that         * the pool shut down since entry into this method. So we         * recheck state and if necessary roll back the enqueuing if         * stopped, or start a new thread if there are none.         *         * 3. If we cannot queue task, then we try to add a new         * thread.  If it fails, we know we are shut down or saturated         * and so reject the task.         */        int c = ctl.get();        if (workerCountOf(c) < corePoolSize) {            if (addWorker(command, true))                return;            c = ctl.get();        }        if (isRunning(c) && workQueue.offer(command)) {            int recheck = ctl.get();            if (! isRunning(recheck) && remove(command))                reject(command);            else if (workerCountOf(recheck) == 0)                addWorker(null, false);        }        else if (!addWorker(command, false))            reject(command);    }`\n```","source":"_posts/java-线程池.md","raw":"title: java-线程池\ndate: 2019-04-10 10:32:39\ntags:\n\n- java\n\n## 1. 线程池的关系\n\nExecutorService```提供一些声明周期管理方法\n\n![1536473588949](assets/1536473588949.png)\n\n## 2. ```Executor\n\n```\npublic interface Executor {\n    void execute(Runnable command);\n}\n```\n\n## 3.\n\n```\njavapublic abstract class AbstractExecutorService implements ExecutorService {    // RunnableFuture 是用于获取执行结果的，我们常用它的子类 FutureTask    // 下面两个 newTaskFor 方法用于将我们的任务包装成 FutureTask 提交到线程池中执行    protected <T> RunnableFuture<T> newTaskFor(Runnable runnable, T value) {        return new FutureTask<T>(runnable, value);    }    protected <T> RunnableFuture<T> newTaskFor(Callable<T> callable) {        return new FutureTask<T>(callable);    }    // 提交任务    public Future<?> submit(Runnable task) {        if (task == null) throw new NullPointerException();        RunnableFuture<Void> ftask = newTaskFor(task, null);        execute(ftask);        return ftask;    }    /**     * @throws RejectedExecutionException {@inheritDoc}     * @throws NullPointerException       {@inheritDoc}     */    public <T> Future<T> submit(Runnable task, T result) {        if (task == null) throw new NullPointerException();         // 1. 将任务包装成 FutureTask        RunnableFuture<T> ftask = newTaskFor(task, result);        // 2. 交给执行器执行，execute 方法由具体的子类来实现        // 前面也说了，FutureTask 间接实现了Runnable 接口。        execute(ftask);        return ftask;    }    public <T> Future<T> submit(Callable<T> task) {        if (task == null) throw new NullPointerException();        RunnableFuture<T> ftask = newTaskFor(task);        execute(ftask);        return ftask;    }     // 此方法目的：将 tasks 集合中的任务提交到线程池执行，任意一个线程执行完后就可以结束了    // 第二个参数 timed 代表是否设置超时机制，超时时间为第三个参数，    // 如果 timed 为 true，同时超时了还没有一个线程返回结果，那么抛出 TimeoutException 异常    private <T> T doInvokeAny(Collection<? extends Callable<T>> tasks,                              boolean timed, long nanos)        throws InterruptedException, ExecutionException, TimeoutException {        if (tasks == null)            throw new NullPointerException();        int ntasks = tasks.size();        if (ntasks == 0)            throw new IllegalArgumentException();        ArrayList<Future<T>> futures = new ArrayList<Future<T>>(ntasks);         // ExecutorCompletionService 不是一个真正的执行器，参数 this 才是真正的执行器        // 它对执行器进行了包装，每个任务结束后，将结果保存到内部的一个 completionQueue 队列中        // 这也是为什么这个类的名字里面有个 Completion 的原因吧。        ExecutorCompletionService<T> ecs =            new ExecutorCompletionService<T>(this);        // For efficiency, especially in executors with limited        // parallelism, check to see if previously submitted tasks are        // done before submitting more of them. This interleaving        // plus the exception mechanics account for messiness of main        // loop.        try {            // 用于保存异常信息，此方法如果没有得到任何有效的结果，那么我们可以抛出最后得到的一个异常            ExecutionException ee = null;            final long deadline = timed ? System.nanoTime() + nanos : 0L;            Iterator<? extends Callable<T>> it = tasks.iterator();             // 首先先提交一个任务，后面的任务到下面的 for 循环一个个提交            futures.add(ecs.submit(it.next()));            --ntasks;            int active = 1;            for (;;) {                // ecs 上面说了，其内部有一个 completionQueue 用于保存执行完成的结果                // BlockingQueue 的 poll 方法不阻塞，返回 null 代表队列为空                Future<T> f = ecs.poll();                 // 为 null，说明刚刚提交的第一个线程还没有执行完成                // 在前面先提交一个任务，加上这里做一次检查，也是为了提高性能                if (f == null) {                    if (ntasks > 0) {                        --ntasks;                        futures.add(ecs.submit(it.next()));                        ++active;                    }                     // 这里是 else if，不是 if。这里说明，没有任务了，同时 active 为 0 说明                    // 任务都执行完成了。其实我也没理解为什么这里做一次 break？                    // 因为我认为 active 为 0 的情况，必然从下面的 f.get() 返回了                    else if (active == 0)                        break;                     // 这里也是 else if。这里说的是，没有任务了，但是设置了超时时间，这里检测是否超时                    else if (timed) {                        f = ecs.poll(nanos, TimeUnit.NANOSECONDS);                        if (f == null)                            throw new TimeoutException();                        nanos = deadline - System.nanoTime();                    }                    else                   // else。说明，没有任务需要提交，但是池中的任务没有完成，还没有超时(如果设置了超时)                    // take() 方法会阻塞，直到有元素返回，说明有任务结束了                        f = ecs.take();                }                // 有任务结束了                if (f != null) {                    --active;                    try {                        // 返回执行结果，如果有异常，都包装成 ExecutionException                        return f.get();                    } catch (ExecutionException eex) {                        ee = eex;                    } catch (RuntimeException rex) {                        ee = new ExecutionException(rex);                    }                }            }            if (ee == null)                ee = new ExecutionException();            throw ee;        } finally {            for (int i = 0, size = futures.size(); i < size; i++)                futures.get(i).cancel(true);        }    }    public <T> T invokeAny(Collection<? extends Callable<T>> tasks)        throws InterruptedException, ExecutionException {        try {            return doInvokeAny(tasks, false, 0);        } catch (TimeoutException cannotHappen) {            assert false;            return null;        }    }    public <T> T invokeAny(Collection<? extends Callable<T>> tasks,                           long timeout, TimeUnit unit)        throws InterruptedException, ExecutionException, TimeoutException {        return doInvokeAny(tasks, true, unit.toNanos(timeout));    }      // 执行所有的任务，返回任务结果。    // 先不要看这个方法，我们先想想，其实我们自己提交任务到线程池，也是想要线程池执行所有的任务    // 只不过，我们是每次 submit 一个任务，这里以一个集合作为参数提交    public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks)        throws InterruptedException {        if (tasks == null)            throw new NullPointerException();        ArrayList<Future<T>> futures = new ArrayList<Future<T>>(tasks.size());        boolean done = false;        try {            for (Callable<T> t : tasks) {                RunnableFuture<T> f = newTaskFor(t);                futures.add(f);                execute(f);            }            for (int i = 0, size = futures.size(); i < size; i++) {                Future<T> f = futures.get(i);                if (!f.isDone()) {                    try {                       // 这是一个阻塞方法，直到获取到值，或抛出了异常                       // 这里有个小细节，其实 get 方法签名上是会抛出 InterruptedException 的                       // 可是这里没有进行处理，而是抛给外层去了。此异常发生于还没执行完的任务被取消了                        f.get();                    } catch (CancellationException ignore) {                    } catch (ExecutionException ignore) {                    }                }            }            done = true;            return futures;        } finally {            if (!done)                for (int i = 0, size = futures.size(); i < size; i++)                    futures.get(i).cancel(true);        }    }    public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks,                                         long timeout, TimeUnit unit)        throws InterruptedException {        if (tasks == null)            throw new NullPointerException();        long nanos = unit.toNanos(timeout);        ArrayList<Future<T>> futures = new ArrayList<Future<T>>(tasks.size());        boolean done = false;        try {            for (Callable<T> t : tasks)                futures.add(newTaskFor(t));            final long deadline = System.nanoTime() + nanos;            final int size = futures.size();            // Interleave time checks and calls to execute in case            // executor doesn't have any/much parallelism.            for (int i = 0; i < size; i++) {                execute((Runnable)futures.get(i));                nanos = deadline - System.nanoTime();                if (nanos <= 0L)                    return futures;            }            for (int i = 0; i < size; i++) {                Future<T> f = futures.get(i);                if (!f.isDone()) {                    if (nanos <= 0L)                        return futures;                    try {                        f.get(nanos, TimeUnit.NANOSECONDS);                    } catch (CancellationException ignore) {                    } catch (ExecutionException ignore) {                    } catch (TimeoutException toe) {                        return futures;                    }                    nanos = deadline - System.nanoTime();                }            }            done = true;            return futures;        } finally {            if (!done)                for (int i = 0, size = futures.size(); i < size; i++)                    futures.get(i).cancel(true);        }    }}`\n\n```\n\n## 4.\n\n```\njava/**     * The main pool control state, ctl, is an atomic integer packing     * two conceptual fields     *   workerCount, indicating the effective number of threads     *   runState,    indicating whether running, shutting down etc     *     * In order to pack them into one int, we limit workerCount to     * (2^29)-1 (about 500 million) threads rather than (2^31)-1 (2     * billion) otherwise representable. If this is ever an issue in     * the future, the variable can be changed to be an AtomicLong,     * and the shift/mask constants below adjusted. But until the need     * arises, this code is a bit faster and simpler using an int.     *     * The workerCount is the number of workers that have been     * permitted to start and not permitted to stop.  The value may be     * transiently different from the actual number of live threads,     * for example when a ThreadFactory fails to create a thread when     * asked, and when exiting threads are still performing     * bookkeeping before terminating. The user-visible pool size is     * reported as the current size of the workers set.     *     * The runState provides the main lifecycle control, taking on values:     *     *   RUNNING:  Accept new tasks and process queued tasks     *   SHUTDOWN: Don't accept new tasks, but process queued tasks     *   STOP:     Don't accept new tasks, don't process queued tasks,     *             and interrupt in-progress tasks     *   TIDYING:  All tasks have terminated, workerCount is zero,     *             the thread transitioning to state TIDYING     *             will run the terminated() hook method     *   TERMINATED: terminated() has completed     *     * The numerical order among these values matters, to allow     * ordered comparisons. The runState monotonically increases over     * time, but need not hit each state. The transitions are:     *     * RUNNING -> SHUTDOWN     *    On invocation of shutdown(), perhaps implicitly in finalize()     * (RUNNING or SHUTDOWN) -> STOP     *    On invocation of shutdownNow()     * SHUTDOWN -> TIDYING     *    When both queue and pool are empty     * STOP -> TIDYING     *    When pool is empty     * TIDYING -> TERMINATED     *    When the terminated() hook method has completed     *     * Threads waiting in awaitTermination() will return when the     * state reaches TERMINATED.     *     * Detecting the transition from SHUTDOWN to TIDYING is less     * straightforward than you'd like because the queue may become     * empty after non-empty and vice versa during SHUTDOWN state, but     * we can only terminate if, after seeing that it is empty, we see     * that workerCount is 0 (which sometimes entails a recheck -- see     * below).     */    private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));public void execute(Runnable command) {        if (command == null)            throw new NullPointerException();        /*         * Proceed in 3 steps:         *         * 1. If fewer than corePoolSize threads are running, try to         * start a new thread with the given command as its first         * task.  The call to addWorker atomically checks runState and         * workerCount, and so prevents false alarms that would add         * threads when it shouldn't, by returning false.         *         * 2. If a task can be successfully queued, then we still need         * to double-check whether we should have added a thread         * (because existing ones died since last checking) or that         * the pool shut down since entry into this method. So we         * recheck state and if necessary roll back the enqueuing if         * stopped, or start a new thread if there are none.         *         * 3. If we cannot queue task, then we try to add a new         * thread.  If it fails, we know we are shut down or saturated         * and so reject the task.         */        int c = ctl.get();        if (workerCountOf(c) < corePoolSize) {            if (addWorker(command, true))                return;            c = ctl.get();        }        if (isRunning(c) && workQueue.offer(command)) {            int recheck = ctl.get();            if (! isRunning(recheck) && remove(command))                reject(command);            else if (workerCountOf(recheck) == 0)                addWorker(null, false);        }        else if (!addWorker(command, false))            reject(command);    }`\n```","slug":"java-线程池","published":1,"date":"2019-10-28T08:41:15.626Z","updated":"2019-10-28T08:41:15.657Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a432002lic1yhvqxda7f","content":"<p>title: java-线程池<br>date: 2019-04-10 10:32:39<br>tags:</p>\n<ul>\n<li>java</li>\n</ul>\n<h2 id=\"1-线程池的关系\"><a href=\"#1-线程池的关系\" class=\"headerlink\" title=\"1. 线程池的关系\"></a>1. 线程池的关系</h2><p>ExecutorService<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">![1536473588949](assets/1536473588949.png)</span><br><span class=\"line\"></span><br><span class=\"line\">## 2. ```Executor</span><br></pre></td></tr></table></figure></p>\n<p>public interface Executor {<br>    void execute(Runnable command);<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 3.</span><br></pre></td></tr></table></figure></p>\n<p>javapublic abstract class AbstractExecutorService implements ExecutorService {    // RunnableFuture 是用于获取执行结果的，我们常用它的子类 FutureTask    // 下面两个 newTaskFor 方法用于将我们的任务包装成 FutureTask 提交到线程池中执行    protected <t> RunnableFuture<t> newTaskFor(Runnable runnable, T value) {        return new FutureTask<t>(runnable, value);    }    protected <t> RunnableFuture<t> newTaskFor(Callable<t> callable) {        return new FutureTask<t>(callable);    }    // 提交任务    public Future&lt;?&gt; submit(Runnable task) {        if (task == null) throw new NullPointerException();        RunnableFuture<void> ftask = newTaskFor(task, null);        execute(ftask);        return ftask;    }    /*<em>     </em> @throws RejectedExecutionException {@inheritDoc}     <em> @throws NullPointerException       {@inheritDoc}     </em>/    public <t> Future<t> submit(Runnable task, T result) {        if (task == null) throw new NullPointerException();         // 1. 将任务包装成 FutureTask        RunnableFuture<t> ftask = newTaskFor(task, result);        // 2. 交给执行器执行，execute 方法由具体的子类来实现        // 前面也说了，FutureTask 间接实现了Runnable 接口。        execute(ftask);        return ftask;    }    public <t> Future<t> submit(Callable<t> task) {        if (task == null) throw new NullPointerException();        RunnableFuture<t> ftask = newTaskFor(task);        execute(ftask);        return ftask;    }     // 此方法目的：将 tasks 集合中的任务提交到线程池执行，任意一个线程执行完后就可以结束了    // 第二个参数 timed 代表是否设置超时机制，超时时间为第三个参数，    // 如果 timed 为 true，同时超时了还没有一个线程返回结果，那么抛出 TimeoutException 异常    private <t> T doInvokeAny(Collection&lt;? extends Callable<t>&gt; tasks,                              boolean timed, long nanos)        throws InterruptedException, ExecutionException, TimeoutException {        if (tasks == null)            throw new NullPointerException();        int ntasks = tasks.size();        if (ntasks == 0)            throw new IllegalArgumentException();        ArrayList&lt;Future<t>&gt; futures = new ArrayList&lt;Future<t>&gt;(ntasks);         // ExecutorCompletionService 不是一个真正的执行器，参数 this 才是真正的执行器        // 它对执行器进行了包装，每个任务结束后，将结果保存到内部的一个 completionQueue 队列中        // 这也是为什么这个类的名字里面有个 Completion 的原因吧。        ExecutorCompletionService<t> ecs =            new ExecutorCompletionService<t>(this);        // For efficiency, especially in executors with limited        // parallelism, check to see if previously submitted tasks are        // done before submitting more of them. This interleaving        // plus the exception mechanics account for messiness of main        // loop.        try {            // 用于保存异常信息，此方法如果没有得到任何有效的结果，那么我们可以抛出最后得到的一个异常            ExecutionException ee = null;            final long deadline = timed ? System.nanoTime() + nanos : 0L;            Iterator&lt;? extends Callable<t>&gt; it = tasks.iterator();             // 首先先提交一个任务，后面的任务到下面的 for 循环一个个提交            futures.add(ecs.submit(it.next()));            –ntasks;            int active = 1;            for (;;) {                // ecs 上面说了，其内部有一个 completionQueue 用于保存执行完成的结果                // BlockingQueue 的 poll 方法不阻塞，返回 null 代表队列为空                Future<t> f = ecs.poll();                 // 为 null，说明刚刚提交的第一个线程还没有执行完成                // 在前面先提交一个任务，加上这里做一次检查，也是为了提高性能                if (f == null) {                    if (ntasks &gt; 0) {                        –ntasks;                        futures.add(ecs.submit(it.next()));                        ++active;                    }                     // 这里是 else if，不是 if。这里说明，没有任务了，同时 active 为 0 说明                    // 任务都执行完成了。其实我也没理解为什么这里做一次 break？                    // 因为我认为 active 为 0 的情况，必然从下面的 f.get() 返回了                    else if (active == 0)                        break;                     // 这里也是 else if。这里说的是，没有任务了，但是设置了超时时间，这里检测是否超时                    else if (timed) {                        f = ecs.poll(nanos, TimeUnit.NANOSECONDS);                        if (f == null)                            throw new TimeoutException();                        nanos = deadline - System.nanoTime();                    }                    else                   // else。说明，没有任务需要提交，但是池中的任务没有完成，还没有超时(如果设置了超时)                    // take() 方法会阻塞，直到有元素返回，说明有任务结束了                        f = ecs.take();                }                // 有任务结束了                if (f != null) {                    –active;                    try {                        // 返回执行结果，如果有异常，都包装成 ExecutionException                        return f.get();                    } catch (ExecutionException eex) {                        ee = eex;                    } catch (RuntimeException rex) {                        ee = new ExecutionException(rex);                    }                }            }            if (ee == null)                ee = new ExecutionException();            throw ee;        } finally {            for (int i = 0, size = futures.size(); i &lt; size; i++)                futures.get(i).cancel(true);        }    }    public <t> T invokeAny(Collection&lt;? extends Callable<t>&gt; tasks)        throws InterruptedException, ExecutionException {        try {            return doInvokeAny(tasks, false, 0);        } catch (TimeoutException cannotHappen) {            assert false;            return null;        }    }    public <t> T invokeAny(Collection&lt;? extends Callable<t>&gt; tasks,                           long timeout, TimeUnit unit)        throws InterruptedException, ExecutionException, TimeoutException {        return doInvokeAny(tasks, true, unit.toNanos(timeout));    }      // 执行所有的任务，返回任务结果。    // 先不要看这个方法，我们先想想，其实我们自己提交任务到线程池，也是想要线程池执行所有的任务    // 只不过，我们是每次 submit 一个任务，这里以一个集合作为参数提交    public <t> List&lt;Future<t>&gt; invokeAll(Collection&lt;? extends Callable<t>&gt; tasks)        throws InterruptedException {        if (tasks == null)            throw new NullPointerException();        ArrayList&lt;Future<t>&gt; futures = new ArrayList&lt;Future<t>&gt;(tasks.size());        boolean done = false;        try {            for (Callable<t> t : tasks) {                RunnableFuture<t> f = newTaskFor(t);                futures.add(f);                execute(f);            }            for (int i = 0, size = futures.size(); i &lt; size; i++) {                Future<t> f = futures.get(i);                if (!f.isDone()) {                    try {                       // 这是一个阻塞方法，直到获取到值，或抛出了异常                       // 这里有个小细节，其实 get 方法签名上是会抛出 InterruptedException 的                       // 可是这里没有进行处理，而是抛给外层去了。此异常发生于还没执行完的任务被取消了                        f.get();                    } catch (CancellationException ignore) {                    } catch (ExecutionException ignore) {                    }                }            }            done = true;            return futures;        } finally {            if (!done)                for (int i = 0, size = futures.size(); i &lt; size; i++)                    futures.get(i).cancel(true);        }    }    public <t> List&lt;Future<t>&gt; invokeAll(Collection&lt;? extends Callable<t>&gt; tasks,                                         long timeout, TimeUnit unit)        throws InterruptedException {        if (tasks == null)            throw new NullPointerException();        long nanos = unit.toNanos(timeout);        ArrayList&lt;Future<t>&gt; futures = new ArrayList&lt;Future<t>&gt;(tasks.size());        boolean done = false;        try {            for (Callable<t> t : tasks)                futures.add(newTaskFor(t));            final long deadline = System.nanoTime() + nanos;            final int size = futures.size();            // Interleave time checks and calls to execute in case            // executor doesn’t have any/much parallelism.            for (int i = 0; i &lt; size; i++) {                execute((Runnable)futures.get(i));                nanos = deadline - System.nanoTime();                if (nanos &lt;= 0L)                    return futures;            }            for (int i = 0; i &lt; size; i++) {                Future<t> f = futures.get(i);                if (!f.isDone()) {                    if (nanos &lt;= 0L)                        return futures;                    try {                        f.get(nanos, TimeUnit.NANOSECONDS);                    } catch (CancellationException ignore) {                    } catch (ExecutionException ignore) {                    } catch (TimeoutException toe) {                        return futures;                    }                    nanos = deadline - System.nanoTime();                }            }            done = true;            return futures;        } finally {            if (!done)                for (int i = 0, size = futures.size(); i &lt; size; i++)                    futures.get(i).cancel(true);        }    }}`</t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></void></t></t></t></t></t></t></t></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 4.</span><br></pre></td></tr></table></figure>\n<p>java/*<em>     </em> The main pool control state, ctl, is an atomic integer packing     <em> two conceptual fields     </em>   workerCount, indicating the effective number of threads     <em>   runState,    indicating whether running, shutting down etc     </em>     <em> In order to pack them into one int, we limit workerCount to     </em> (2^29)-1 (about 500 million) threads rather than (2^31)-1 (2     <em> billion) otherwise representable. If this is ever an issue in     </em> the future, the variable can be changed to be an AtomicLong,     <em> and the shift/mask constants below adjusted. But until the need     </em> arises, this code is a bit faster and simpler using an int.     <em>     </em> The workerCount is the number of workers that have been     <em> permitted to start and not permitted to stop.  The value may be     </em> transiently different from the actual number of live threads,     <em> for example when a ThreadFactory fails to create a thread when     </em> asked, and when exiting threads are still performing     <em> bookkeeping before terminating. The user-visible pool size is     </em> reported as the current size of the workers set.     <em>     </em> The runState provides the main lifecycle control, taking on values:     <em>     </em>   RUNNING:  Accept new tasks and process queued tasks     <em>   SHUTDOWN: Don’t accept new tasks, but process queued tasks     </em>   STOP:     Don’t accept new tasks, don’t process queued tasks,     <em>             and interrupt in-progress tasks     </em>   TIDYING:  All tasks have terminated, workerCount is zero,     <em>             the thread transitioning to state TIDYING     </em>             will run the terminated() hook method     <em>   TERMINATED: terminated() has completed     </em>     <em> The numerical order among these values matters, to allow     </em> ordered comparisons. The runState monotonically increases over     <em> time, but need not hit each state. The transitions are:     </em>     <em> RUNNING -&gt; SHUTDOWN     </em>    On invocation of shutdown(), perhaps implicitly in finalize()     <em> (RUNNING or SHUTDOWN) -&gt; STOP     </em>    On invocation of shutdownNow()     <em> SHUTDOWN -&gt; TIDYING     </em>    When both queue and pool are empty     <em> STOP -&gt; TIDYING     </em>    When pool is empty     <em> TIDYING -&gt; TERMINATED     </em>    When the terminated() hook method has completed     <em>     </em> Threads waiting in awaitTermination() will return when the     <em> state reaches TERMINATED.     </em>     <em> Detecting the transition from SHUTDOWN to TIDYING is less     </em> straightforward than you’d like because the queue may become     <em> empty after non-empty and vice versa during SHUTDOWN state, but     </em> we can only terminate if, after seeing that it is empty, we see     <em> that workerCount is 0 (which sometimes entails a recheck – see     </em> below).     <em>/    private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));public void execute(Runnable command) {        if (command == null)            throw new NullPointerException();        /</em>         <em> Proceed in 3 steps:         </em>         <em> 1. If fewer than corePoolSize threads are running, try to         </em> start a new thread with the given command as its first         <em> task.  The call to addWorker atomically checks runState and         </em> workerCount, and so prevents false alarms that would add         <em> threads when it shouldn’t, by returning false.         </em>         <em> 2. If a task can be successfully queued, then we still need         </em> to double-check whether we should have added a thread         <em> (because existing ones died since last checking) or that         </em> the pool shut down since entry into this method. So we         <em> recheck state and if necessary roll back the enqueuing if         </em> stopped, or start a new thread if there are none.         <em>         </em> 3. If we cannot queue task, then we try to add a new         <em> thread.  If it fails, we know we are shut down or saturated         </em> and so reject the task.         */        int c = ctl.get();        if (workerCountOf(c) &lt; corePoolSize) {            if (addWorker(command, true))                return;            c = ctl.get();        }        if (isRunning(c) &amp;&amp; workQueue.offer(command)) {            int recheck = ctl.get();            if (! isRunning(recheck) &amp;&amp; remove(command))                reject(command);            else if (workerCountOf(recheck) == 0)                addWorker(null, false);        }        else if (!addWorker(command, false))            reject(command);    }<code>``</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>title: java-线程池<br>date: 2019-04-10 10:32:39<br>tags:</p>\n<ul>\n<li>java</li>\n</ul>\n<h2 id=\"1-线程池的关系\"><a href=\"#1-线程池的关系\" class=\"headerlink\" title=\"1. 线程池的关系\"></a>1. 线程池的关系</h2><p>ExecutorService<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">![1536473588949](assets/1536473588949.png)</span><br><span class=\"line\"></span><br><span class=\"line\">## 2. ```Executor</span><br></pre></td></tr></table></figure></p>\n<p>public interface Executor {<br>    void execute(Runnable command);<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 3.</span><br></pre></td></tr></table></figure></p>\n<p>javapublic abstract class AbstractExecutorService implements ExecutorService {    // RunnableFuture 是用于获取执行结果的，我们常用它的子类 FutureTask    // 下面两个 newTaskFor 方法用于将我们的任务包装成 FutureTask 提交到线程池中执行    protected <t> RunnableFuture<t> newTaskFor(Runnable runnable, T value) {        return new FutureTask<t>(runnable, value);    }    protected <t> RunnableFuture<t> newTaskFor(Callable<t> callable) {        return new FutureTask<t>(callable);    }    // 提交任务    public Future&lt;?&gt; submit(Runnable task) {        if (task == null) throw new NullPointerException();        RunnableFuture<void> ftask = newTaskFor(task, null);        execute(ftask);        return ftask;    }    /*<em>     </em> @throws RejectedExecutionException {@inheritDoc}     <em> @throws NullPointerException       {@inheritDoc}     </em>/    public <t> Future<t> submit(Runnable task, T result) {        if (task == null) throw new NullPointerException();         // 1. 将任务包装成 FutureTask        RunnableFuture<t> ftask = newTaskFor(task, result);        // 2. 交给执行器执行，execute 方法由具体的子类来实现        // 前面也说了，FutureTask 间接实现了Runnable 接口。        execute(ftask);        return ftask;    }    public <t> Future<t> submit(Callable<t> task) {        if (task == null) throw new NullPointerException();        RunnableFuture<t> ftask = newTaskFor(task);        execute(ftask);        return ftask;    }     // 此方法目的：将 tasks 集合中的任务提交到线程池执行，任意一个线程执行完后就可以结束了    // 第二个参数 timed 代表是否设置超时机制，超时时间为第三个参数，    // 如果 timed 为 true，同时超时了还没有一个线程返回结果，那么抛出 TimeoutException 异常    private <t> T doInvokeAny(Collection&lt;? extends Callable<t>&gt; tasks,                              boolean timed, long nanos)        throws InterruptedException, ExecutionException, TimeoutException {        if (tasks == null)            throw new NullPointerException();        int ntasks = tasks.size();        if (ntasks == 0)            throw new IllegalArgumentException();        ArrayList&lt;Future<t>&gt; futures = new ArrayList&lt;Future<t>&gt;(ntasks);         // ExecutorCompletionService 不是一个真正的执行器，参数 this 才是真正的执行器        // 它对执行器进行了包装，每个任务结束后，将结果保存到内部的一个 completionQueue 队列中        // 这也是为什么这个类的名字里面有个 Completion 的原因吧。        ExecutorCompletionService<t> ecs =            new ExecutorCompletionService<t>(this);        // For efficiency, especially in executors with limited        // parallelism, check to see if previously submitted tasks are        // done before submitting more of them. This interleaving        // plus the exception mechanics account for messiness of main        // loop.        try {            // 用于保存异常信息，此方法如果没有得到任何有效的结果，那么我们可以抛出最后得到的一个异常            ExecutionException ee = null;            final long deadline = timed ? System.nanoTime() + nanos : 0L;            Iterator&lt;? extends Callable<t>&gt; it = tasks.iterator();             // 首先先提交一个任务，后面的任务到下面的 for 循环一个个提交            futures.add(ecs.submit(it.next()));            –ntasks;            int active = 1;            for (;;) {                // ecs 上面说了，其内部有一个 completionQueue 用于保存执行完成的结果                // BlockingQueue 的 poll 方法不阻塞，返回 null 代表队列为空                Future<t> f = ecs.poll();                 // 为 null，说明刚刚提交的第一个线程还没有执行完成                // 在前面先提交一个任务，加上这里做一次检查，也是为了提高性能                if (f == null) {                    if (ntasks &gt; 0) {                        –ntasks;                        futures.add(ecs.submit(it.next()));                        ++active;                    }                     // 这里是 else if，不是 if。这里说明，没有任务了，同时 active 为 0 说明                    // 任务都执行完成了。其实我也没理解为什么这里做一次 break？                    // 因为我认为 active 为 0 的情况，必然从下面的 f.get() 返回了                    else if (active == 0)                        break;                     // 这里也是 else if。这里说的是，没有任务了，但是设置了超时时间，这里检测是否超时                    else if (timed) {                        f = ecs.poll(nanos, TimeUnit.NANOSECONDS);                        if (f == null)                            throw new TimeoutException();                        nanos = deadline - System.nanoTime();                    }                    else                   // else。说明，没有任务需要提交，但是池中的任务没有完成，还没有超时(如果设置了超时)                    // take() 方法会阻塞，直到有元素返回，说明有任务结束了                        f = ecs.take();                }                // 有任务结束了                if (f != null) {                    –active;                    try {                        // 返回执行结果，如果有异常，都包装成 ExecutionException                        return f.get();                    } catch (ExecutionException eex) {                        ee = eex;                    } catch (RuntimeException rex) {                        ee = new ExecutionException(rex);                    }                }            }            if (ee == null)                ee = new ExecutionException();            throw ee;        } finally {            for (int i = 0, size = futures.size(); i &lt; size; i++)                futures.get(i).cancel(true);        }    }    public <t> T invokeAny(Collection&lt;? extends Callable<t>&gt; tasks)        throws InterruptedException, ExecutionException {        try {            return doInvokeAny(tasks, false, 0);        } catch (TimeoutException cannotHappen) {            assert false;            return null;        }    }    public <t> T invokeAny(Collection&lt;? extends Callable<t>&gt; tasks,                           long timeout, TimeUnit unit)        throws InterruptedException, ExecutionException, TimeoutException {        return doInvokeAny(tasks, true, unit.toNanos(timeout));    }      // 执行所有的任务，返回任务结果。    // 先不要看这个方法，我们先想想，其实我们自己提交任务到线程池，也是想要线程池执行所有的任务    // 只不过，我们是每次 submit 一个任务，这里以一个集合作为参数提交    public <t> List&lt;Future<t>&gt; invokeAll(Collection&lt;? extends Callable<t>&gt; tasks)        throws InterruptedException {        if (tasks == null)            throw new NullPointerException();        ArrayList&lt;Future<t>&gt; futures = new ArrayList&lt;Future<t>&gt;(tasks.size());        boolean done = false;        try {            for (Callable<t> t : tasks) {                RunnableFuture<t> f = newTaskFor(t);                futures.add(f);                execute(f);            }            for (int i = 0, size = futures.size(); i &lt; size; i++) {                Future<t> f = futures.get(i);                if (!f.isDone()) {                    try {                       // 这是一个阻塞方法，直到获取到值，或抛出了异常                       // 这里有个小细节，其实 get 方法签名上是会抛出 InterruptedException 的                       // 可是这里没有进行处理，而是抛给外层去了。此异常发生于还没执行完的任务被取消了                        f.get();                    } catch (CancellationException ignore) {                    } catch (ExecutionException ignore) {                    }                }            }            done = true;            return futures;        } finally {            if (!done)                for (int i = 0, size = futures.size(); i &lt; size; i++)                    futures.get(i).cancel(true);        }    }    public <t> List&lt;Future<t>&gt; invokeAll(Collection&lt;? extends Callable<t>&gt; tasks,                                         long timeout, TimeUnit unit)        throws InterruptedException {        if (tasks == null)            throw new NullPointerException();        long nanos = unit.toNanos(timeout);        ArrayList&lt;Future<t>&gt; futures = new ArrayList&lt;Future<t>&gt;(tasks.size());        boolean done = false;        try {            for (Callable<t> t : tasks)                futures.add(newTaskFor(t));            final long deadline = System.nanoTime() + nanos;            final int size = futures.size();            // Interleave time checks and calls to execute in case            // executor doesn’t have any/much parallelism.            for (int i = 0; i &lt; size; i++) {                execute((Runnable)futures.get(i));                nanos = deadline - System.nanoTime();                if (nanos &lt;= 0L)                    return futures;            }            for (int i = 0; i &lt; size; i++) {                Future<t> f = futures.get(i);                if (!f.isDone()) {                    if (nanos &lt;= 0L)                        return futures;                    try {                        f.get(nanos, TimeUnit.NANOSECONDS);                    } catch (CancellationException ignore) {                    } catch (ExecutionException ignore) {                    } catch (TimeoutException toe) {                        return futures;                    }                    nanos = deadline - System.nanoTime();                }            }            done = true;            return futures;        } finally {            if (!done)                for (int i = 0, size = futures.size(); i &lt; size; i++)                    futures.get(i).cancel(true);        }    }}`</t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></void></t></t></t></t></t></t></t></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 4.</span><br></pre></td></tr></table></figure>\n<p>java/*<em>     </em> The main pool control state, ctl, is an atomic integer packing     <em> two conceptual fields     </em>   workerCount, indicating the effective number of threads     <em>   runState,    indicating whether running, shutting down etc     </em>     <em> In order to pack them into one int, we limit workerCount to     </em> (2^29)-1 (about 500 million) threads rather than (2^31)-1 (2     <em> billion) otherwise representable. If this is ever an issue in     </em> the future, the variable can be changed to be an AtomicLong,     <em> and the shift/mask constants below adjusted. But until the need     </em> arises, this code is a bit faster and simpler using an int.     <em>     </em> The workerCount is the number of workers that have been     <em> permitted to start and not permitted to stop.  The value may be     </em> transiently different from the actual number of live threads,     <em> for example when a ThreadFactory fails to create a thread when     </em> asked, and when exiting threads are still performing     <em> bookkeeping before terminating. The user-visible pool size is     </em> reported as the current size of the workers set.     <em>     </em> The runState provides the main lifecycle control, taking on values:     <em>     </em>   RUNNING:  Accept new tasks and process queued tasks     <em>   SHUTDOWN: Don’t accept new tasks, but process queued tasks     </em>   STOP:     Don’t accept new tasks, don’t process queued tasks,     <em>             and interrupt in-progress tasks     </em>   TIDYING:  All tasks have terminated, workerCount is zero,     <em>             the thread transitioning to state TIDYING     </em>             will run the terminated() hook method     <em>   TERMINATED: terminated() has completed     </em>     <em> The numerical order among these values matters, to allow     </em> ordered comparisons. The runState monotonically increases over     <em> time, but need not hit each state. The transitions are:     </em>     <em> RUNNING -&gt; SHUTDOWN     </em>    On invocation of shutdown(), perhaps implicitly in finalize()     <em> (RUNNING or SHUTDOWN) -&gt; STOP     </em>    On invocation of shutdownNow()     <em> SHUTDOWN -&gt; TIDYING     </em>    When both queue and pool are empty     <em> STOP -&gt; TIDYING     </em>    When pool is empty     <em> TIDYING -&gt; TERMINATED     </em>    When the terminated() hook method has completed     <em>     </em> Threads waiting in awaitTermination() will return when the     <em> state reaches TERMINATED.     </em>     <em> Detecting the transition from SHUTDOWN to TIDYING is less     </em> straightforward than you’d like because the queue may become     <em> empty after non-empty and vice versa during SHUTDOWN state, but     </em> we can only terminate if, after seeing that it is empty, we see     <em> that workerCount is 0 (which sometimes entails a recheck – see     </em> below).     <em>/    private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));public void execute(Runnable command) {        if (command == null)            throw new NullPointerException();        /</em>         <em> Proceed in 3 steps:         </em>         <em> 1. If fewer than corePoolSize threads are running, try to         </em> start a new thread with the given command as its first         <em> task.  The call to addWorker atomically checks runState and         </em> workerCount, and so prevents false alarms that would add         <em> threads when it shouldn’t, by returning false.         </em>         <em> 2. If a task can be successfully queued, then we still need         </em> to double-check whether we should have added a thread         <em> (because existing ones died since last checking) or that         </em> the pool shut down since entry into this method. So we         <em> recheck state and if necessary roll back the enqueuing if         </em> stopped, or start a new thread if there are none.         <em>         </em> 3. If we cannot queue task, then we try to add a new         <em> thread.  If it fails, we know we are shut down or saturated         </em> and so reject the task.         */        int c = ctl.get();        if (workerCountOf(c) &lt; corePoolSize) {            if (addWorker(command, true))                return;            c = ctl.get();        }        if (isRunning(c) &amp;&amp; workQueue.offer(command)) {            int recheck = ctl.get();            if (! isRunning(recheck) &amp;&amp; remove(command))                reject(command);            else if (workerCountOf(recheck) == 0)                addWorker(null, false);        }        else if (!addWorker(command, false))            reject(command);    }<code>``</code></p>\n"},{"title":"lorawan协议（中文版）","date":"2018-12-05T13:34:09.000Z","_content":"\n# 介绍\n\n网关和服务器之间的协议是有目的的非常基本的，仅用于演示目的，或用于私有和可靠的网络。\n\n这里没有网关或服务器的认证，并且确认仅用于网络质量评估，而不是 纠正UDP数据报丢失（无重试）。\n\n# 系统原理和相关定义\n\n```\n ((( Y )))\n     |\n     |\n+ - -|- - - - - - - - - - - - - +        xxxxxxxxxxxx          +--------+\n| +--+-----------+     +------+ |       xx x  x     xxx        |        |\n| |              |     |      | |      xx  Internet  xx        |        |\n| | Concentrator |<--->| Host |<-------xx     or    xx-------->|        |\n| |              | SPI |      | |      xx  Intranet  xx        | Server |\n| +--------------+     +------+ |       xxxx   x   xxxx        |        |\n|    ^                     ^    |           xxxxxxxx           |        |\n|    | PPS +-------+ NMEA  |    |                              |        |\n|    +-----|  GPS  |-------+    |                              +--------+\n|          | (opt) |            |\n|          +-------+            |\n|                               |\n|             Gateway           |\n+- - - - - - - - - - - - - - - -+\n```\n\n- **网关**：无线电RX / TX板，基于Semtech多通道调制解调器（SX130x），收发器（SX135x）和/或低功耗独立调制解调器（SX127x）。\n- **主机**：运行包转发器的嵌入式计算机。通过SPI链路驱动集中器。 GPS：具有“每秒1脉冲”的GNSS（GPS，伽利略，GLONASS等）接收器 输出和到主机的串行链接，以发送包含时间和地理坐标数据的NMEA帧。可选的。\n- **网关**：由至少一个无线电集中器，主机，一些组成的设备网络连接到互联网或专用网络（以太网，3G，Wifi，微波链路），以及可选的GPS接收器进行同步。\n- **服务器**：一种抽象计算机，它将处理由网关接收和转发的RF数据包，并发出RF数据包以响应网关必须发出的数据包。\n\n假设网关可以在NAT后面或防火墙停止任何传入连接。 假设服务器具有静态IP地址（或通过DNS服务可解决的地址），并且能够接收特定端口上的传入连接。\n\n# 上行协议\n\n3.1 时序图\n\n```\n+---------+                                                    +---------+\n| Gateway |                                                    | Server  |\n+---------+                                                    +---------+\n     | -----------------------------------\\                         |\n     |-| When 1-N RF packets are received |                         |\n     | ------------------------------------                         |\n     |                                                              |\n     | PUSH_DATA (token X, GW MAC, JSON payload)                    |\n     |------------------------------------------------------------->|\n     |                                                              |\n     |                                           PUSH_ACK (token X) |\n     |<-------------------------------------------------------------|\n     |                              ------------------------------\\ |\n     |                              | process packets *after* ack |-|\n     |                              ------------------------------- |\n     |                                                              |\n```\n\n## `PUSH_DATA` 包\n\n网关使用该数据包类型主要是将所接收的RF分组和相关联的元数据转发到服务器。\n\n| 字节    | 功能                    |\n| ------- | ----------------------- |\n| 0       | 协议版本2               |\n| 1-2     | 随机凭证                |\n| 3       | PUSH_DATA标识`0x00`     |\n| 4-11    | 网关唯一标识（MAC地址） |\n| 12-结束 | `JSON`对象，看第4章     |\n\n## `PUSH_ACK`包\n\n服务器使用该数据包类型立即确认收到的所有PUSH_DATA数据包。\n\n| 字节 | 功能                                  |\n| ---- | ------------------------------------- |\n| 0    | 协议版本2                             |\n| 1-2  | 与`PUSH_DATA`包中相同的凭证，用于确认 |\n| 3    | `PUSH_ACK`标识`0x01`                  |\n\n# 上行`JSON`数据结构\n\n根对象包含名为`\"rxpk\"`的数组：\n\n```\n{\n\t\"rxpk\":[ {...}, ...]\n}\n```\n\n该数组包含至少一个`JSON`对象，每个对象包含一个RF数据包以及包含以下字段的关联元数据：\n\n| 名称 | 类别   | 功能                                                        |\n| ---- | ------ | ----------------------------------------------------------- |\n| time | string | UTC time of pkt RX, us precision, ISO 8601 ‘compact’ format |\n| tmst | number | Internal timestamp of “RX finished” event (32b unsigned)    |\n| freq | number | RX central frequency in MHz (unsigned float, Hz precision)  |\n| chan | number | Concentrator “IF” channel used for RX (unsigned integer)    |\n| rfch | number | Concentrator “RF chain” used for RX (unsigned integer)      |\n| stat | number | CRC status: 1 = OK, -1 = fail, 0 = no CRC                   |\n| modu | string | Modulation identifier “LORA” or “FSK”                       |\n| datr | string | LoRa datarate identifier (eg. SF12BW500)                    |\n| datr | number | FSK datarate (unsigned, in bits per second)                 |\n| codr | string | LoRa ECC coding rate identifier                             |\n| rssi | number | RSSI in dBm (signed integer, 1 dB precision)                |\n| lsnr | number | Lora SNR ratio in dB (signed float, 0.1 dB precision)       |\n| size | number | RF packet payload size in bytes (unsigned integer)          |\n| data | string | Base64 encoded RF packet payload, padded                    |\n\n示例（为了便于阅读而添加了空格，缩进和换行符）：\n\n```\n{\"rxpk\":[\n\t{\n\t\t\"time\":\"2013-03-31T16:21:17.528002Z\",\n\t\t\"tmst\":3512348611,\n\t\t\"chan\":2,\n\t\t\"rfch\":0,\n\t\t\"freq\":866.349812,\n\t\t\"stat\":1,\n\t\t\"modu\":\"LORA\",\n\t\t\"datr\":\"SF7BW125\",\n\t\t\"codr\":\"4/6\",\n\t\t\"rssi\":-35,\n\t\t\"lsnr\":5.1,\n\t\t\"size\":32,\n\t\t\"data\":\"-DS4CGaDCdG+48eJNM3Vai-zDpsR71Pn9CPA9uCON84\"\n\t},{\n\t\t\"time\":\"2013-03-31T16:21:17.530974Z\",\n\t\t\"tmst\":3512348514,\n\t\t\"chan\":9,\n\t\t\"rfch\":1,\n\t\t\"freq\":869.1,\n\t\t\"stat\":1,\n\t\t\"modu\":\"FSK\",\n\t\t\"datr\":50000,\n\t\t\"rssi\":-75,\n\t\t\"size\":16,\n\t\t\"data\":\"VEVTVF9QQUNLRVRfMTIzNA==\"\n\t},{\n\t\t\"time\":\"2013-03-31T16:21:17.532038Z\",\n\t\t\"tmst\":3316387610,\n\t\t\"chan\":0,\n\t\t\"rfch\":0,\n\t\t\"freq\":863.00981,\n\t\t\"stat\":1,\n\t\t\"modu\":\"LORA\",\n\t\t\"datr\":\"SF10BW125\",\n\t\t\"codr\":\"4/7\",\n\t\t\"rssi\":-38,\n\t\t\"lsnr\":5.5,\n\t\t\"size\":32,\n\t\t\"data\":\"ysgRl452xNLep9S1NTIg2lomKDxUgn3DJ7DE+b00Ass\"\n\t}\n]}\n```\n\n根对象还可以包含名为`\"stat\"`的对象：\n\n```\n{\n\t\"rxpk\":[ {...}, ...],\n\t\"stat\":{...}\n}\n```\n\n数据包可能不包含`\"rxpk\"`数组而是“stat”对象。\n\n```\n{\n\t\"stat\":{...}\n}\n```\n\n该对象包含网关的状态，包含以下字段：\n\n| 名称 | 类型   | 功能                                                         |\n| ---- | ------ | ------------------------------------------------------------ |\n| time | string | UTC ‘system’ time of the gateway, ISO 8601 ‘expanded’ format |\n| lati | number | GPS latitude of the gateway in degree (float, N is +)        |\n| long | number | GPS latitude of the gateway in degree (float, E is +)        |\n| alti | number | GPS altitude of the gateway in meter RX (integer)            |\n| rxnb | number | Number of radio packets received (unsigned integer)          |\n| rxok | number | Number of radio packets received with a valid PHY CRC        |\n| rxfw | number | Number of radio packets forwarded (unsigned integer)         |\n| ackr | number | Percentage of upstream datagrams that were acknowledged      |\n| dwnb | number | Number of downlink datagrams received (unsigned integer)     |\n| txnb | number | Number of packets emitted (unsigned integer)                 |\n\n示例（为了便于阅读而添加了空格，缩进和换行符）：\n\n```\n{\"stat\":{\n\t\"time\":\"2014-01-12 08:59:28 GMT\",\n\t\"lati\":46.24000,\n\t\"long\":3.25230,\n\t\"alti\":145,\n\t\"rxnb\":2,\n\t\"rxok\":2,\n\t\"rxfw\":2,\n\t\"ackr\":100.0,\n\t\"dwnb\":2,\n\t\"txnb\":2\n}}\n```\n\n# 下行协议\n\n## 时序图\n\n```\n+---------+                                                    +---------+\n| Gateway |                                                    | Server  |\n+---------+                                                    +---------+\n     | -----------------------------------\\                         |\n     |-| Every N seconds (keepalive time) |                         |\n     | ------------------------------------                         |\n     |                                                              |\n     | PULL_DATA (token Y, MAC@)                                    |\n     |------------------------------------------------------------->|\n     |                                                              |\n     |                                           PULL_ACK (token Y) |\n     |<-------------------------------------------------------------|\n     |                                                              |\n\n+---------+                                                    +---------+\n| Gateway |                                                    | Server  |\n+---------+                                                    +---------+\n     |      ------------------------------------------------------\\ |\n     |      | Anytime after first PULL_DATA for each packet to TX |-|\n     |      ------------------------------------------------------- |\n     |                                                              |\n     |                            PULL_RESP (token Z, JSON payload) |\n     |<-------------------------------------------------------------|\n     |                                                              |\n     | TX_ACK (token Z, JSON payload)                               |\n     |------------------------------------------------------------->|\n```\n\n## PULL_DATA包\n\n网关使用该数据包类型来轮询来自服务器的数据。\n\n此数据交换由网关初始化，因为如果网关位于NAT后面，服务器可能无法将数据包发送到网关。 当网关初始化交换机时，将打开通向服务器的网络路由，并允许数据包在两个方向上流动。 网关必须定期发送PULL_DATA数据包，以确保网络路由保持打开状态，以便服务器随时使用。\n\n| Bytes | Function                                |\n| ----- | --------------------------------------- |\n| 0     | protocol version = 2                    |\n| 1-2   | random token                            |\n| 3     | PULL_DATA identifier 0x02               |\n| 4-11  | Gateway unique identifier (MAC address) |\n\n### `PULL_ACK` 包\n\n服务器使用该数据包类型来确认网络路由是否已打开，以及服务器是否可以随时发送PULL_RESP数据包。\n\n| Bytes | Function                                          |\n| ----- | ------------------------------------------------- |\n| 0     | protocol version = 2                              |\n| 1-2   | same token as the PULL_DATA packet to acknowledge |\n| 3     | `PULL_ACK` identifier `0x04`                      |\n\n### PULL_RESP 包\n\n服务器使用该数据包类型来发送必须由网关发出的RF数据包和相关元数据。\n\n| Bytes | Function                                                   |\n| ----- | ---------------------------------------------------------- |\n| 0     | protocol version = 2                                       |\n| 1-2   | random token                                               |\n| 3     | PULL_RESP identifier 0x03                                  |\n| 4-end | JSON object, starting with {, ending with }, see section 6 |\n\n### TX_ACK 包\n\n网关使用该分组类型向服务器发送反馈，以通知网关是否已接受或拒绝下行链路请求。 数据报可以选项包含一个JSON字符串，以提供有关acknoledge的更多详细信息。 如果没有JSON（空字符串），这意味着没有发生错误。\n\n| Bytes  | Function                                                     |\n| ------ | ------------------------------------------------------------ |\n| 0      | protocol version = 2                                         |\n| 1-2    | same token as the PULL_RESP packet to acknowledge            |\n| 3      | TX_ACK identifier 0x05                                       |\n| 4-11   | Gateway unique identifier (MAC address)                      |\n| 12-end | [optional] JSON object, starting with {, ending with }, see section 6 |\n\n## 下行`JSON`数据结构\n\n------\n\nPULL_RESP数据包的根对象必须包含名为“txpk”的对象：\n\n```\n{\n\t\"txpk\": {...}\n}\n```\n\n该对象包含要发出的RF数据包以及与以下字段相关联的元数据：\n\n| Name | Type   | Function                                                     |\n| ---- | ------ | ------------------------------------------------------------ |\n| imme | bool   | Send packet immediately (will ignore tmst & time)            |\n| tmst | number | Send packet on a certain timestamp value (will ignore time)  |\n| time | string | Send packet at a certain time (GPS synchronization required) |\n| freq | number | TX central frequency in MHz (unsigned float, Hz precision)   |\n| rfch | number | Concentrator “RF chain” used for TX (unsigned integer)       |\n| powe | number | TX output power in dBm (unsigned integer, dBm precision)     |\n| modu | string | Modulation identifier “LORA” or “FSK”                        |\n| datr | string | LoRa datarate identifier (eg. SF12BW500)                     |\n| datr | number | FSK datarate (unsigned, in bits per second)                  |\n| codr | string | LoRa ECC coding rate identifier                              |\n| fdev | number | FSK frequency deviation (unsigned integer, in Hz)            |\n| ipol | bool   | Lora modulation polarization inversion                       |\n| prea | number | RF preamble size (unsigned integer)                          |\n| size | number | RF packet payload size in bytes (unsigned integer)           |\n| data | string | Base64 encoded RF packet payload, padding optional           |\n| ncrc | bool   | If true, disable the CRC of the physical layer (optional)    |\n\n大多数字段都是可选的。如果省略字段，将使用默认参数。 示例（为便于阅读而添加了空格，缩进和换行符）：\n\n```\n{\"txpk\":{\n\t\"imme\":true,\n\t\"freq\":864.123456,\n\t\"rfch\":0,\n\t\"powe\":14,\n\t\"modu\":\"LORA\",\n\t\"datr\":\"SF11BW125\",\n\t\"codr\":\"4/6\",\n\t\"ipol\":false,\n\t\"size\":32,\n\t\"data\":\"H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v\"\n}}\n{\"txpk\":{\n\t\"imme\":true,\n\t\"freq\":861.3,\n\t\"rfch\":0,\n\t\"powe\":12,\n\t\"modu\":\"FSK\",\n\t\"datr\":50000,\n\t\"fdev\":3000,\n\t\"size\":32,\n\t\"data\":\"H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v\"\n}}\n```\n\nTX_ACK数据包的根对象必须包含名为“txpk_ack”的对象：\n\n```\n{\n\t\"txpk_ack\": {...}\n}\n```\n\n该对象包含有关相关PULL_RESP数据包的状态信息。\n\n| Name  | Type   | Function                                                     |\n| ----- | ------ | ------------------------------------------------------------ |\n| error | string | Indication about success or type of failure that occured for downlink request. |\n\n可能的错误有：\n\n| Value            | Definition                                                   |\n| ---------------- | ------------------------------------------------------------ |\n| NONE             | Packet has been programmed for downlink                      |\n| TOO_LATE         | Rejected because it was already too late to program this packet for downlink |\n| TOO_EARLY        | Rejected because downlink packet timestamp is too much in advance |\n| COLLISION_PACKET | Rejected because there was already a packet programmed in requested timeframe |\n| COLLISION_BEACON | Rejected because there was already a beacon planned in requested timeframe |\n| TX_FREQ          | Rejected because requested frequency is not supported by TX RF chain |\n| TX_POWER         | Rejected because requested power is not supported by gateway |\n| GPS_UNLOCKED     | Rejected because GPS is unlocked, so GPS timestamp cannot be used |\n\n示例（为便于阅读而添加了空格，缩进和换行符）：\n\n```\n{\"txpk_ack\":{\n\t\"error\":\"COLLISION_PACKET\"\n}}\n```","source":"_posts/lorawan协议（中文版）.md","raw":"---\ntitle: lorawan协议（中文版）\ndate: 2018-12-05 21:34:09\ntags: lorawan\n---\n\n# 介绍\n\n网关和服务器之间的协议是有目的的非常基本的，仅用于演示目的，或用于私有和可靠的网络。\n\n这里没有网关或服务器的认证，并且确认仅用于网络质量评估，而不是 纠正UDP数据报丢失（无重试）。\n\n# 系统原理和相关定义\n\n```\n ((( Y )))\n     |\n     |\n+ - -|- - - - - - - - - - - - - +        xxxxxxxxxxxx          +--------+\n| +--+-----------+     +------+ |       xx x  x     xxx        |        |\n| |              |     |      | |      xx  Internet  xx        |        |\n| | Concentrator |<--->| Host |<-------xx     or    xx-------->|        |\n| |              | SPI |      | |      xx  Intranet  xx        | Server |\n| +--------------+     +------+ |       xxxx   x   xxxx        |        |\n|    ^                     ^    |           xxxxxxxx           |        |\n|    | PPS +-------+ NMEA  |    |                              |        |\n|    +-----|  GPS  |-------+    |                              +--------+\n|          | (opt) |            |\n|          +-------+            |\n|                               |\n|             Gateway           |\n+- - - - - - - - - - - - - - - -+\n```\n\n- **网关**：无线电RX / TX板，基于Semtech多通道调制解调器（SX130x），收发器（SX135x）和/或低功耗独立调制解调器（SX127x）。\n- **主机**：运行包转发器的嵌入式计算机。通过SPI链路驱动集中器。 GPS：具有“每秒1脉冲”的GNSS（GPS，伽利略，GLONASS等）接收器 输出和到主机的串行链接，以发送包含时间和地理坐标数据的NMEA帧。可选的。\n- **网关**：由至少一个无线电集中器，主机，一些组成的设备网络连接到互联网或专用网络（以太网，3G，Wifi，微波链路），以及可选的GPS接收器进行同步。\n- **服务器**：一种抽象计算机，它将处理由网关接收和转发的RF数据包，并发出RF数据包以响应网关必须发出的数据包。\n\n假设网关可以在NAT后面或防火墙停止任何传入连接。 假设服务器具有静态IP地址（或通过DNS服务可解决的地址），并且能够接收特定端口上的传入连接。\n\n# 上行协议\n\n3.1 时序图\n\n```\n+---------+                                                    +---------+\n| Gateway |                                                    | Server  |\n+---------+                                                    +---------+\n     | -----------------------------------\\                         |\n     |-| When 1-N RF packets are received |                         |\n     | ------------------------------------                         |\n     |                                                              |\n     | PUSH_DATA (token X, GW MAC, JSON payload)                    |\n     |------------------------------------------------------------->|\n     |                                                              |\n     |                                           PUSH_ACK (token X) |\n     |<-------------------------------------------------------------|\n     |                              ------------------------------\\ |\n     |                              | process packets *after* ack |-|\n     |                              ------------------------------- |\n     |                                                              |\n```\n\n## `PUSH_DATA` 包\n\n网关使用该数据包类型主要是将所接收的RF分组和相关联的元数据转发到服务器。\n\n| 字节    | 功能                    |\n| ------- | ----------------------- |\n| 0       | 协议版本2               |\n| 1-2     | 随机凭证                |\n| 3       | PUSH_DATA标识`0x00`     |\n| 4-11    | 网关唯一标识（MAC地址） |\n| 12-结束 | `JSON`对象，看第4章     |\n\n## `PUSH_ACK`包\n\n服务器使用该数据包类型立即确认收到的所有PUSH_DATA数据包。\n\n| 字节 | 功能                                  |\n| ---- | ------------------------------------- |\n| 0    | 协议版本2                             |\n| 1-2  | 与`PUSH_DATA`包中相同的凭证，用于确认 |\n| 3    | `PUSH_ACK`标识`0x01`                  |\n\n# 上行`JSON`数据结构\n\n根对象包含名为`\"rxpk\"`的数组：\n\n```\n{\n\t\"rxpk\":[ {...}, ...]\n}\n```\n\n该数组包含至少一个`JSON`对象，每个对象包含一个RF数据包以及包含以下字段的关联元数据：\n\n| 名称 | 类别   | 功能                                                        |\n| ---- | ------ | ----------------------------------------------------------- |\n| time | string | UTC time of pkt RX, us precision, ISO 8601 ‘compact’ format |\n| tmst | number | Internal timestamp of “RX finished” event (32b unsigned)    |\n| freq | number | RX central frequency in MHz (unsigned float, Hz precision)  |\n| chan | number | Concentrator “IF” channel used for RX (unsigned integer)    |\n| rfch | number | Concentrator “RF chain” used for RX (unsigned integer)      |\n| stat | number | CRC status: 1 = OK, -1 = fail, 0 = no CRC                   |\n| modu | string | Modulation identifier “LORA” or “FSK”                       |\n| datr | string | LoRa datarate identifier (eg. SF12BW500)                    |\n| datr | number | FSK datarate (unsigned, in bits per second)                 |\n| codr | string | LoRa ECC coding rate identifier                             |\n| rssi | number | RSSI in dBm (signed integer, 1 dB precision)                |\n| lsnr | number | Lora SNR ratio in dB (signed float, 0.1 dB precision)       |\n| size | number | RF packet payload size in bytes (unsigned integer)          |\n| data | string | Base64 encoded RF packet payload, padded                    |\n\n示例（为了便于阅读而添加了空格，缩进和换行符）：\n\n```\n{\"rxpk\":[\n\t{\n\t\t\"time\":\"2013-03-31T16:21:17.528002Z\",\n\t\t\"tmst\":3512348611,\n\t\t\"chan\":2,\n\t\t\"rfch\":0,\n\t\t\"freq\":866.349812,\n\t\t\"stat\":1,\n\t\t\"modu\":\"LORA\",\n\t\t\"datr\":\"SF7BW125\",\n\t\t\"codr\":\"4/6\",\n\t\t\"rssi\":-35,\n\t\t\"lsnr\":5.1,\n\t\t\"size\":32,\n\t\t\"data\":\"-DS4CGaDCdG+48eJNM3Vai-zDpsR71Pn9CPA9uCON84\"\n\t},{\n\t\t\"time\":\"2013-03-31T16:21:17.530974Z\",\n\t\t\"tmst\":3512348514,\n\t\t\"chan\":9,\n\t\t\"rfch\":1,\n\t\t\"freq\":869.1,\n\t\t\"stat\":1,\n\t\t\"modu\":\"FSK\",\n\t\t\"datr\":50000,\n\t\t\"rssi\":-75,\n\t\t\"size\":16,\n\t\t\"data\":\"VEVTVF9QQUNLRVRfMTIzNA==\"\n\t},{\n\t\t\"time\":\"2013-03-31T16:21:17.532038Z\",\n\t\t\"tmst\":3316387610,\n\t\t\"chan\":0,\n\t\t\"rfch\":0,\n\t\t\"freq\":863.00981,\n\t\t\"stat\":1,\n\t\t\"modu\":\"LORA\",\n\t\t\"datr\":\"SF10BW125\",\n\t\t\"codr\":\"4/7\",\n\t\t\"rssi\":-38,\n\t\t\"lsnr\":5.5,\n\t\t\"size\":32,\n\t\t\"data\":\"ysgRl452xNLep9S1NTIg2lomKDxUgn3DJ7DE+b00Ass\"\n\t}\n]}\n```\n\n根对象还可以包含名为`\"stat\"`的对象：\n\n```\n{\n\t\"rxpk\":[ {...}, ...],\n\t\"stat\":{...}\n}\n```\n\n数据包可能不包含`\"rxpk\"`数组而是“stat”对象。\n\n```\n{\n\t\"stat\":{...}\n}\n```\n\n该对象包含网关的状态，包含以下字段：\n\n| 名称 | 类型   | 功能                                                         |\n| ---- | ------ | ------------------------------------------------------------ |\n| time | string | UTC ‘system’ time of the gateway, ISO 8601 ‘expanded’ format |\n| lati | number | GPS latitude of the gateway in degree (float, N is +)        |\n| long | number | GPS latitude of the gateway in degree (float, E is +)        |\n| alti | number | GPS altitude of the gateway in meter RX (integer)            |\n| rxnb | number | Number of radio packets received (unsigned integer)          |\n| rxok | number | Number of radio packets received with a valid PHY CRC        |\n| rxfw | number | Number of radio packets forwarded (unsigned integer)         |\n| ackr | number | Percentage of upstream datagrams that were acknowledged      |\n| dwnb | number | Number of downlink datagrams received (unsigned integer)     |\n| txnb | number | Number of packets emitted (unsigned integer)                 |\n\n示例（为了便于阅读而添加了空格，缩进和换行符）：\n\n```\n{\"stat\":{\n\t\"time\":\"2014-01-12 08:59:28 GMT\",\n\t\"lati\":46.24000,\n\t\"long\":3.25230,\n\t\"alti\":145,\n\t\"rxnb\":2,\n\t\"rxok\":2,\n\t\"rxfw\":2,\n\t\"ackr\":100.0,\n\t\"dwnb\":2,\n\t\"txnb\":2\n}}\n```\n\n# 下行协议\n\n## 时序图\n\n```\n+---------+                                                    +---------+\n| Gateway |                                                    | Server  |\n+---------+                                                    +---------+\n     | -----------------------------------\\                         |\n     |-| Every N seconds (keepalive time) |                         |\n     | ------------------------------------                         |\n     |                                                              |\n     | PULL_DATA (token Y, MAC@)                                    |\n     |------------------------------------------------------------->|\n     |                                                              |\n     |                                           PULL_ACK (token Y) |\n     |<-------------------------------------------------------------|\n     |                                                              |\n\n+---------+                                                    +---------+\n| Gateway |                                                    | Server  |\n+---------+                                                    +---------+\n     |      ------------------------------------------------------\\ |\n     |      | Anytime after first PULL_DATA for each packet to TX |-|\n     |      ------------------------------------------------------- |\n     |                                                              |\n     |                            PULL_RESP (token Z, JSON payload) |\n     |<-------------------------------------------------------------|\n     |                                                              |\n     | TX_ACK (token Z, JSON payload)                               |\n     |------------------------------------------------------------->|\n```\n\n## PULL_DATA包\n\n网关使用该数据包类型来轮询来自服务器的数据。\n\n此数据交换由网关初始化，因为如果网关位于NAT后面，服务器可能无法将数据包发送到网关。 当网关初始化交换机时，将打开通向服务器的网络路由，并允许数据包在两个方向上流动。 网关必须定期发送PULL_DATA数据包，以确保网络路由保持打开状态，以便服务器随时使用。\n\n| Bytes | Function                                |\n| ----- | --------------------------------------- |\n| 0     | protocol version = 2                    |\n| 1-2   | random token                            |\n| 3     | PULL_DATA identifier 0x02               |\n| 4-11  | Gateway unique identifier (MAC address) |\n\n### `PULL_ACK` 包\n\n服务器使用该数据包类型来确认网络路由是否已打开，以及服务器是否可以随时发送PULL_RESP数据包。\n\n| Bytes | Function                                          |\n| ----- | ------------------------------------------------- |\n| 0     | protocol version = 2                              |\n| 1-2   | same token as the PULL_DATA packet to acknowledge |\n| 3     | `PULL_ACK` identifier `0x04`                      |\n\n### PULL_RESP 包\n\n服务器使用该数据包类型来发送必须由网关发出的RF数据包和相关元数据。\n\n| Bytes | Function                                                   |\n| ----- | ---------------------------------------------------------- |\n| 0     | protocol version = 2                                       |\n| 1-2   | random token                                               |\n| 3     | PULL_RESP identifier 0x03                                  |\n| 4-end | JSON object, starting with {, ending with }, see section 6 |\n\n### TX_ACK 包\n\n网关使用该分组类型向服务器发送反馈，以通知网关是否已接受或拒绝下行链路请求。 数据报可以选项包含一个JSON字符串，以提供有关acknoledge的更多详细信息。 如果没有JSON（空字符串），这意味着没有发生错误。\n\n| Bytes  | Function                                                     |\n| ------ | ------------------------------------------------------------ |\n| 0      | protocol version = 2                                         |\n| 1-2    | same token as the PULL_RESP packet to acknowledge            |\n| 3      | TX_ACK identifier 0x05                                       |\n| 4-11   | Gateway unique identifier (MAC address)                      |\n| 12-end | [optional] JSON object, starting with {, ending with }, see section 6 |\n\n## 下行`JSON`数据结构\n\n------\n\nPULL_RESP数据包的根对象必须包含名为“txpk”的对象：\n\n```\n{\n\t\"txpk\": {...}\n}\n```\n\n该对象包含要发出的RF数据包以及与以下字段相关联的元数据：\n\n| Name | Type   | Function                                                     |\n| ---- | ------ | ------------------------------------------------------------ |\n| imme | bool   | Send packet immediately (will ignore tmst & time)            |\n| tmst | number | Send packet on a certain timestamp value (will ignore time)  |\n| time | string | Send packet at a certain time (GPS synchronization required) |\n| freq | number | TX central frequency in MHz (unsigned float, Hz precision)   |\n| rfch | number | Concentrator “RF chain” used for TX (unsigned integer)       |\n| powe | number | TX output power in dBm (unsigned integer, dBm precision)     |\n| modu | string | Modulation identifier “LORA” or “FSK”                        |\n| datr | string | LoRa datarate identifier (eg. SF12BW500)                     |\n| datr | number | FSK datarate (unsigned, in bits per second)                  |\n| codr | string | LoRa ECC coding rate identifier                              |\n| fdev | number | FSK frequency deviation (unsigned integer, in Hz)            |\n| ipol | bool   | Lora modulation polarization inversion                       |\n| prea | number | RF preamble size (unsigned integer)                          |\n| size | number | RF packet payload size in bytes (unsigned integer)           |\n| data | string | Base64 encoded RF packet payload, padding optional           |\n| ncrc | bool   | If true, disable the CRC of the physical layer (optional)    |\n\n大多数字段都是可选的。如果省略字段，将使用默认参数。 示例（为便于阅读而添加了空格，缩进和换行符）：\n\n```\n{\"txpk\":{\n\t\"imme\":true,\n\t\"freq\":864.123456,\n\t\"rfch\":0,\n\t\"powe\":14,\n\t\"modu\":\"LORA\",\n\t\"datr\":\"SF11BW125\",\n\t\"codr\":\"4/6\",\n\t\"ipol\":false,\n\t\"size\":32,\n\t\"data\":\"H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v\"\n}}\n{\"txpk\":{\n\t\"imme\":true,\n\t\"freq\":861.3,\n\t\"rfch\":0,\n\t\"powe\":12,\n\t\"modu\":\"FSK\",\n\t\"datr\":50000,\n\t\"fdev\":3000,\n\t\"size\":32,\n\t\"data\":\"H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v\"\n}}\n```\n\nTX_ACK数据包的根对象必须包含名为“txpk_ack”的对象：\n\n```\n{\n\t\"txpk_ack\": {...}\n}\n```\n\n该对象包含有关相关PULL_RESP数据包的状态信息。\n\n| Name  | Type   | Function                                                     |\n| ----- | ------ | ------------------------------------------------------------ |\n| error | string | Indication about success or type of failure that occured for downlink request. |\n\n可能的错误有：\n\n| Value            | Definition                                                   |\n| ---------------- | ------------------------------------------------------------ |\n| NONE             | Packet has been programmed for downlink                      |\n| TOO_LATE         | Rejected because it was already too late to program this packet for downlink |\n| TOO_EARLY        | Rejected because downlink packet timestamp is too much in advance |\n| COLLISION_PACKET | Rejected because there was already a packet programmed in requested timeframe |\n| COLLISION_BEACON | Rejected because there was already a beacon planned in requested timeframe |\n| TX_FREQ          | Rejected because requested frequency is not supported by TX RF chain |\n| TX_POWER         | Rejected because requested power is not supported by gateway |\n| GPS_UNLOCKED     | Rejected because GPS is unlocked, so GPS timestamp cannot be used |\n\n示例（为便于阅读而添加了空格，缩进和换行符）：\n\n```\n{\"txpk_ack\":{\n\t\"error\":\"COLLISION_PACKET\"\n}}\n```","slug":"lorawan协议（中文版）","published":1,"updated":"2019-10-14T09:01:07.718Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a432002nic1y7ewyfdd1","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>网关和服务器之间的协议是有目的的非常基本的，仅用于演示目的，或用于私有和可靠的网络。</p>\n<p>这里没有网关或服务器的认证，并且确认仅用于网络质量评估，而不是 纠正UDP数据报丢失（无重试）。</p>\n<h1 id=\"系统原理和相关定义\"><a href=\"#系统原理和相关定义\" class=\"headerlink\" title=\"系统原理和相关定义\"></a>系统原理和相关定义</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ((( Y )))</span><br><span class=\"line\">     |</span><br><span class=\"line\">     |</span><br><span class=\"line\">+ - -|- - - - - - - - - - - - - +        xxxxxxxxxxxx          +--------+</span><br><span class=\"line\">| +--+-----------+     +------+ |       xx x  x     xxx        |        |</span><br><span class=\"line\">| |              |     |      | |      xx  Internet  xx        |        |</span><br><span class=\"line\">| | Concentrator |&lt;---&gt;| Host |&lt;-------xx     or    xx--------&gt;|        |</span><br><span class=\"line\">| |              | SPI |      | |      xx  Intranet  xx        | Server |</span><br><span class=\"line\">| +--------------+     +------+ |       xxxx   x   xxxx        |        |</span><br><span class=\"line\">|    ^                     ^    |           xxxxxxxx           |        |</span><br><span class=\"line\">|    | PPS +-------+ NMEA  |    |                              |        |</span><br><span class=\"line\">|    +-----|  GPS  |-------+    |                              +--------+</span><br><span class=\"line\">|          | (opt) |            |</span><br><span class=\"line\">|          +-------+            |</span><br><span class=\"line\">|                               |</span><br><span class=\"line\">|             Gateway           |</span><br><span class=\"line\">+- - - - - - - - - - - - - - - -+</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>网关</strong>：无线电RX / TX板，基于Semtech多通道调制解调器（SX130x），收发器（SX135x）和/或低功耗独立调制解调器（SX127x）。</li>\n<li><strong>主机</strong>：运行包转发器的嵌入式计算机。通过SPI链路驱动集中器。 GPS：具有“每秒1脉冲”的GNSS（GPS，伽利略，GLONASS等）接收器 输出和到主机的串行链接，以发送包含时间和地理坐标数据的NMEA帧。可选的。</li>\n<li><strong>网关</strong>：由至少一个无线电集中器，主机，一些组成的设备网络连接到互联网或专用网络（以太网，3G，Wifi，微波链路），以及可选的GPS接收器进行同步。</li>\n<li><strong>服务器</strong>：一种抽象计算机，它将处理由网关接收和转发的RF数据包，并发出RF数据包以响应网关必须发出的数据包。</li>\n</ul>\n<p>假设网关可以在NAT后面或防火墙停止任何传入连接。 假设服务器具有静态IP地址（或通过DNS服务可解决的地址），并且能够接收特定端口上的传入连接。</p>\n<h1 id=\"上行协议\"><a href=\"#上行协议\" class=\"headerlink\" title=\"上行协议\"></a>上行协议</h1><p>3.1 时序图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">| Gateway |                                                    | Server  |</span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">     | -----------------------------------\\                         |</span><br><span class=\"line\">     |-| When 1-N RF packets are received |                         |</span><br><span class=\"line\">     | ------------------------------------                         |</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     | PUSH_DATA (token X, GW MAC, JSON payload)                    |</span><br><span class=\"line\">     |-------------------------------------------------------------&gt;|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     |                                           PUSH_ACK (token X) |</span><br><span class=\"line\">     |&lt;-------------------------------------------------------------|</span><br><span class=\"line\">     |                              ------------------------------\\ |</span><br><span class=\"line\">     |                              | process packets *after* ack |-|</span><br><span class=\"line\">     |                              ------------------------------- |</span><br><span class=\"line\">     |                                                              |</span><br></pre></td></tr></table></figure>\n<h2 id=\"PUSH-DATA-包\"><a href=\"#PUSH-DATA-包\" class=\"headerlink\" title=\"PUSH_DATA 包\"></a><code>PUSH_DATA</code> 包</h2><p>网关使用该数据包类型主要是将所接收的RF分组和相关联的元数据转发到服务器。</p>\n<table>\n<thead>\n<tr>\n<th>字节</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>协议版本2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>随机凭证</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PUSH_DATA标识<code>0x00</code></td>\n</tr>\n<tr>\n<td>4-11</td>\n<td>网关唯一标识（MAC地址）</td>\n</tr>\n<tr>\n<td>12-结束</td>\n<td><code>JSON</code>对象，看第4章</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"PUSH-ACK包\"><a href=\"#PUSH-ACK包\" class=\"headerlink\" title=\"PUSH_ACK包\"></a><code>PUSH_ACK</code>包</h2><p>服务器使用该数据包类型立即确认收到的所有PUSH_DATA数据包。</p>\n<table>\n<thead>\n<tr>\n<th>字节</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>协议版本2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>与<code>PUSH_DATA</code>包中相同的凭证，用于确认</td>\n</tr>\n<tr>\n<td>3</td>\n<td><code>PUSH_ACK</code>标识<code>0x01</code></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"上行JSON数据结构\"><a href=\"#上行JSON数据结构\" class=\"headerlink\" title=\"上行JSON数据结构\"></a>上行<code>JSON</code>数据结构</h1><p>根对象包含名为<code>&quot;rxpk&quot;</code>的数组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;rxpk&quot;:[ &#123;...&#125;, ...]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该数组包含至少一个<code>JSON</code>对象，每个对象包含一个RF数据包以及包含以下字段的关联元数据：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>类别</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>time</td>\n<td>string</td>\n<td>UTC time of pkt RX, us precision, ISO 8601 ‘compact’ format</td>\n</tr>\n<tr>\n<td>tmst</td>\n<td>number</td>\n<td>Internal timestamp of “RX finished” event (32b unsigned)</td>\n</tr>\n<tr>\n<td>freq</td>\n<td>number</td>\n<td>RX central frequency in MHz (unsigned float, Hz precision)</td>\n</tr>\n<tr>\n<td>chan</td>\n<td>number</td>\n<td>Concentrator “IF” channel used for RX (unsigned integer)</td>\n</tr>\n<tr>\n<td>rfch</td>\n<td>number</td>\n<td>Concentrator “RF chain” used for RX (unsigned integer)</td>\n</tr>\n<tr>\n<td>stat</td>\n<td>number</td>\n<td>CRC status: 1 = OK, -1 = fail, 0 = no CRC</td>\n</tr>\n<tr>\n<td>modu</td>\n<td>string</td>\n<td>Modulation identifier “LORA” or “FSK”</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>string</td>\n<td>LoRa datarate identifier (eg. SF12BW500)</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>number</td>\n<td>FSK datarate (unsigned, in bits per second)</td>\n</tr>\n<tr>\n<td>codr</td>\n<td>string</td>\n<td>LoRa ECC coding rate identifier</td>\n</tr>\n<tr>\n<td>rssi</td>\n<td>number</td>\n<td>RSSI in dBm (signed integer, 1 dB precision)</td>\n</tr>\n<tr>\n<td>lsnr</td>\n<td>number</td>\n<td>Lora SNR ratio in dB (signed float, 0.1 dB precision)</td>\n</tr>\n<tr>\n<td>size</td>\n<td>number</td>\n<td>RF packet payload size in bytes (unsigned integer)</td>\n</tr>\n<tr>\n<td>data</td>\n<td>string</td>\n<td>Base64 encoded RF packet payload, padded</td>\n</tr>\n</tbody>\n</table>\n<p>示例（为了便于阅读而添加了空格，缩进和换行符）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;rxpk&quot;:[</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t&quot;time&quot;:&quot;2013-03-31T16:21:17.528002Z&quot;,</span><br><span class=\"line\">\t\t&quot;tmst&quot;:3512348611,</span><br><span class=\"line\">\t\t&quot;chan&quot;:2,</span><br><span class=\"line\">\t\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t\t&quot;freq&quot;:866.349812,</span><br><span class=\"line\">\t\t&quot;stat&quot;:1,</span><br><span class=\"line\">\t\t&quot;modu&quot;:&quot;LORA&quot;,</span><br><span class=\"line\">\t\t&quot;datr&quot;:&quot;SF7BW125&quot;,</span><br><span class=\"line\">\t\t&quot;codr&quot;:&quot;4/6&quot;,</span><br><span class=\"line\">\t\t&quot;rssi&quot;:-35,</span><br><span class=\"line\">\t\t&quot;lsnr&quot;:5.1,</span><br><span class=\"line\">\t\t&quot;size&quot;:32,</span><br><span class=\"line\">\t\t&quot;data&quot;:&quot;-DS4CGaDCdG+48eJNM3Vai-zDpsR71Pn9CPA9uCON84&quot;</span><br><span class=\"line\">\t&#125;,&#123;</span><br><span class=\"line\">\t\t&quot;time&quot;:&quot;2013-03-31T16:21:17.530974Z&quot;,</span><br><span class=\"line\">\t\t&quot;tmst&quot;:3512348514,</span><br><span class=\"line\">\t\t&quot;chan&quot;:9,</span><br><span class=\"line\">\t\t&quot;rfch&quot;:1,</span><br><span class=\"line\">\t\t&quot;freq&quot;:869.1,</span><br><span class=\"line\">\t\t&quot;stat&quot;:1,</span><br><span class=\"line\">\t\t&quot;modu&quot;:&quot;FSK&quot;,</span><br><span class=\"line\">\t\t&quot;datr&quot;:50000,</span><br><span class=\"line\">\t\t&quot;rssi&quot;:-75,</span><br><span class=\"line\">\t\t&quot;size&quot;:16,</span><br><span class=\"line\">\t\t&quot;data&quot;:&quot;VEVTVF9QQUNLRVRfMTIzNA==&quot;</span><br><span class=\"line\">\t&#125;,&#123;</span><br><span class=\"line\">\t\t&quot;time&quot;:&quot;2013-03-31T16:21:17.532038Z&quot;,</span><br><span class=\"line\">\t\t&quot;tmst&quot;:3316387610,</span><br><span class=\"line\">\t\t&quot;chan&quot;:0,</span><br><span class=\"line\">\t\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t\t&quot;freq&quot;:863.00981,</span><br><span class=\"line\">\t\t&quot;stat&quot;:1,</span><br><span class=\"line\">\t\t&quot;modu&quot;:&quot;LORA&quot;,</span><br><span class=\"line\">\t\t&quot;datr&quot;:&quot;SF10BW125&quot;,</span><br><span class=\"line\">\t\t&quot;codr&quot;:&quot;4/7&quot;,</span><br><span class=\"line\">\t\t&quot;rssi&quot;:-38,</span><br><span class=\"line\">\t\t&quot;lsnr&quot;:5.5,</span><br><span class=\"line\">\t\t&quot;size&quot;:32,</span><br><span class=\"line\">\t\t&quot;data&quot;:&quot;ysgRl452xNLep9S1NTIg2lomKDxUgn3DJ7DE+b00Ass&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">]&#125;</span><br></pre></td></tr></table></figure>\n<p>根对象还可以包含名为<code>&quot;stat&quot;</code>的对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;rxpk&quot;:[ &#123;...&#125;, ...],</span><br><span class=\"line\">\t&quot;stat&quot;:&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>数据包可能不包含<code>&quot;rxpk&quot;</code>数组而是“stat”对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;stat&quot;:&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该对象包含网关的状态，包含以下字段：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>类型</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>time</td>\n<td>string</td>\n<td>UTC ‘system’ time of the gateway, ISO 8601 ‘expanded’ format</td>\n</tr>\n<tr>\n<td>lati</td>\n<td>number</td>\n<td>GPS latitude of the gateway in degree (float, N is +)</td>\n</tr>\n<tr>\n<td>long</td>\n<td>number</td>\n<td>GPS latitude of the gateway in degree (float, E is +)</td>\n</tr>\n<tr>\n<td>alti</td>\n<td>number</td>\n<td>GPS altitude of the gateway in meter RX (integer)</td>\n</tr>\n<tr>\n<td>rxnb</td>\n<td>number</td>\n<td>Number of radio packets received (unsigned integer)</td>\n</tr>\n<tr>\n<td>rxok</td>\n<td>number</td>\n<td>Number of radio packets received with a valid PHY CRC</td>\n</tr>\n<tr>\n<td>rxfw</td>\n<td>number</td>\n<td>Number of radio packets forwarded (unsigned integer)</td>\n</tr>\n<tr>\n<td>ackr</td>\n<td>number</td>\n<td>Percentage of upstream datagrams that were acknowledged</td>\n</tr>\n<tr>\n<td>dwnb</td>\n<td>number</td>\n<td>Number of downlink datagrams received (unsigned integer)</td>\n</tr>\n<tr>\n<td>txnb</td>\n<td>number</td>\n<td>Number of packets emitted (unsigned integer)</td>\n</tr>\n</tbody>\n</table>\n<p>示例（为了便于阅读而添加了空格，缩进和换行符）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;stat&quot;:&#123;</span><br><span class=\"line\">\t&quot;time&quot;:&quot;2014-01-12 08:59:28 GMT&quot;,</span><br><span class=\"line\">\t&quot;lati&quot;:46.24000,</span><br><span class=\"line\">\t&quot;long&quot;:3.25230,</span><br><span class=\"line\">\t&quot;alti&quot;:145,</span><br><span class=\"line\">\t&quot;rxnb&quot;:2,</span><br><span class=\"line\">\t&quot;rxok&quot;:2,</span><br><span class=\"line\">\t&quot;rxfw&quot;:2,</span><br><span class=\"line\">\t&quot;ackr&quot;:100.0,</span><br><span class=\"line\">\t&quot;dwnb&quot;:2,</span><br><span class=\"line\">\t&quot;txnb&quot;:2</span><br><span class=\"line\">&#125;&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"下行协议\"><a href=\"#下行协议\" class=\"headerlink\" title=\"下行协议\"></a>下行协议</h1><h2 id=\"时序图\"><a href=\"#时序图\" class=\"headerlink\" title=\"时序图\"></a>时序图</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">| Gateway |                                                    | Server  |</span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">     | -----------------------------------\\                         |</span><br><span class=\"line\">     |-| Every N seconds (keepalive time) |                         |</span><br><span class=\"line\">     | ------------------------------------                         |</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     | PULL_DATA (token Y, MAC@)                                    |</span><br><span class=\"line\">     |-------------------------------------------------------------&gt;|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     |                                           PULL_ACK (token Y) |</span><br><span class=\"line\">     |&lt;-------------------------------------------------------------|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\"></span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">| Gateway |                                                    | Server  |</span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">     |      ------------------------------------------------------\\ |</span><br><span class=\"line\">     |      | Anytime after first PULL_DATA for each packet to TX |-|</span><br><span class=\"line\">     |      ------------------------------------------------------- |</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     |                            PULL_RESP (token Z, JSON payload) |</span><br><span class=\"line\">     |&lt;-------------------------------------------------------------|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     | TX_ACK (token Z, JSON payload)                               |</span><br><span class=\"line\">     |-------------------------------------------------------------&gt;|</span><br></pre></td></tr></table></figure>\n<h2 id=\"PULL-DATA包\"><a href=\"#PULL-DATA包\" class=\"headerlink\" title=\"PULL_DATA包\"></a>PULL_DATA包</h2><p>网关使用该数据包类型来轮询来自服务器的数据。</p>\n<p>此数据交换由网关初始化，因为如果网关位于NAT后面，服务器可能无法将数据包发送到网关。 当网关初始化交换机时，将打开通向服务器的网络路由，并允许数据包在两个方向上流动。 网关必须定期发送PULL_DATA数据包，以确保网络路由保持打开状态，以便服务器随时使用。</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>random token</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PULL_DATA identifier 0x02</td>\n</tr>\n<tr>\n<td>4-11</td>\n<td>Gateway unique identifier (MAC address)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"PULL-ACK-包\"><a href=\"#PULL-ACK-包\" class=\"headerlink\" title=\"PULL_ACK 包\"></a><code>PULL_ACK</code> 包</h3><p>服务器使用该数据包类型来确认网络路由是否已打开，以及服务器是否可以随时发送PULL_RESP数据包。</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>same token as the PULL_DATA packet to acknowledge</td>\n</tr>\n<tr>\n<td>3</td>\n<td><code>PULL_ACK</code> identifier <code>0x04</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"PULL-RESP-包\"><a href=\"#PULL-RESP-包\" class=\"headerlink\" title=\"PULL_RESP 包\"></a>PULL_RESP 包</h3><p>服务器使用该数据包类型来发送必须由网关发出的RF数据包和相关元数据。</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>random token</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PULL_RESP identifier 0x03</td>\n</tr>\n<tr>\n<td>4-end</td>\n<td>JSON object, starting with {, ending with }, see section 6</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"TX-ACK-包\"><a href=\"#TX-ACK-包\" class=\"headerlink\" title=\"TX_ACK 包\"></a>TX_ACK 包</h3><p>网关使用该分组类型向服务器发送反馈，以通知网关是否已接受或拒绝下行链路请求。 数据报可以选项包含一个JSON字符串，以提供有关acknoledge的更多详细信息。 如果没有JSON（空字符串），这意味着没有发生错误。</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>same token as the PULL_RESP packet to acknowledge</td>\n</tr>\n<tr>\n<td>3</td>\n<td>TX_ACK identifier 0x05</td>\n</tr>\n<tr>\n<td>4-11</td>\n<td>Gateway unique identifier (MAC address)</td>\n</tr>\n<tr>\n<td>12-end</td>\n<td>[optional] JSON object, starting with {, ending with }, see section 6</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"下行JSON数据结构\"><a href=\"#下行JSON数据结构\" class=\"headerlink\" title=\"下行JSON数据结构\"></a>下行<code>JSON</code>数据结构</h2><hr>\n<p>PULL_RESP数据包的根对象必须包含名为“txpk”的对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;txpk&quot;: &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该对象包含要发出的RF数据包以及与以下字段相关联的元数据：</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>imme</td>\n<td>bool</td>\n<td>Send packet immediately (will ignore tmst &amp; time)</td>\n</tr>\n<tr>\n<td>tmst</td>\n<td>number</td>\n<td>Send packet on a certain timestamp value (will ignore time)</td>\n</tr>\n<tr>\n<td>time</td>\n<td>string</td>\n<td>Send packet at a certain time (GPS synchronization required)</td>\n</tr>\n<tr>\n<td>freq</td>\n<td>number</td>\n<td>TX central frequency in MHz (unsigned float, Hz precision)</td>\n</tr>\n<tr>\n<td>rfch</td>\n<td>number</td>\n<td>Concentrator “RF chain” used for TX (unsigned integer)</td>\n</tr>\n<tr>\n<td>powe</td>\n<td>number</td>\n<td>TX output power in dBm (unsigned integer, dBm precision)</td>\n</tr>\n<tr>\n<td>modu</td>\n<td>string</td>\n<td>Modulation identifier “LORA” or “FSK”</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>string</td>\n<td>LoRa datarate identifier (eg. SF12BW500)</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>number</td>\n<td>FSK datarate (unsigned, in bits per second)</td>\n</tr>\n<tr>\n<td>codr</td>\n<td>string</td>\n<td>LoRa ECC coding rate identifier</td>\n</tr>\n<tr>\n<td>fdev</td>\n<td>number</td>\n<td>FSK frequency deviation (unsigned integer, in Hz)</td>\n</tr>\n<tr>\n<td>ipol</td>\n<td>bool</td>\n<td>Lora modulation polarization inversion</td>\n</tr>\n<tr>\n<td>prea</td>\n<td>number</td>\n<td>RF preamble size (unsigned integer)</td>\n</tr>\n<tr>\n<td>size</td>\n<td>number</td>\n<td>RF packet payload size in bytes (unsigned integer)</td>\n</tr>\n<tr>\n<td>data</td>\n<td>string</td>\n<td>Base64 encoded RF packet payload, padding optional</td>\n</tr>\n<tr>\n<td>ncrc</td>\n<td>bool</td>\n<td>If true, disable the CRC of the physical layer (optional)</td>\n</tr>\n</tbody>\n</table>\n<p>大多数字段都是可选的。如果省略字段，将使用默认参数。 示例（为便于阅读而添加了空格，缩进和换行符）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;txpk&quot;:&#123;</span><br><span class=\"line\">\t&quot;imme&quot;:true,</span><br><span class=\"line\">\t&quot;freq&quot;:864.123456,</span><br><span class=\"line\">\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t&quot;powe&quot;:14,</span><br><span class=\"line\">\t&quot;modu&quot;:&quot;LORA&quot;,</span><br><span class=\"line\">\t&quot;datr&quot;:&quot;SF11BW125&quot;,</span><br><span class=\"line\">\t&quot;codr&quot;:&quot;4/6&quot;,</span><br><span class=\"line\">\t&quot;ipol&quot;:false,</span><br><span class=\"line\">\t&quot;size&quot;:32,</span><br><span class=\"line\">\t&quot;data&quot;:&quot;H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v&quot;</span><br><span class=\"line\">&#125;&#125;</span><br><span class=\"line\">&#123;&quot;txpk&quot;:&#123;</span><br><span class=\"line\">\t&quot;imme&quot;:true,</span><br><span class=\"line\">\t&quot;freq&quot;:861.3,</span><br><span class=\"line\">\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t&quot;powe&quot;:12,</span><br><span class=\"line\">\t&quot;modu&quot;:&quot;FSK&quot;,</span><br><span class=\"line\">\t&quot;datr&quot;:50000,</span><br><span class=\"line\">\t&quot;fdev&quot;:3000,</span><br><span class=\"line\">\t&quot;size&quot;:32,</span><br><span class=\"line\">\t&quot;data&quot;:&quot;H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v&quot;</span><br><span class=\"line\">&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>TX_ACK数据包的根对象必须包含名为“txpk_ack”的对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;txpk_ack&quot;: &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该对象包含有关相关PULL_RESP数据包的状态信息。</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>error</td>\n<td>string</td>\n<td>Indication about success or type of failure that occured for downlink request.</td>\n</tr>\n</tbody>\n</table>\n<p>可能的错误有：</p>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NONE</td>\n<td>Packet has been programmed for downlink</td>\n</tr>\n<tr>\n<td>TOO_LATE</td>\n<td>Rejected because it was already too late to program this packet for downlink</td>\n</tr>\n<tr>\n<td>TOO_EARLY</td>\n<td>Rejected because downlink packet timestamp is too much in advance</td>\n</tr>\n<tr>\n<td>COLLISION_PACKET</td>\n<td>Rejected because there was already a packet programmed in requested timeframe</td>\n</tr>\n<tr>\n<td>COLLISION_BEACON</td>\n<td>Rejected because there was already a beacon planned in requested timeframe</td>\n</tr>\n<tr>\n<td>TX_FREQ</td>\n<td>Rejected because requested frequency is not supported by TX RF chain</td>\n</tr>\n<tr>\n<td>TX_POWER</td>\n<td>Rejected because requested power is not supported by gateway</td>\n</tr>\n<tr>\n<td>GPS_UNLOCKED</td>\n<td>Rejected because GPS is unlocked, so GPS timestamp cannot be used</td>\n</tr>\n</tbody>\n</table>\n<p>示例（为便于阅读而添加了空格，缩进和换行符）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;txpk_ack&quot;:&#123;</span><br><span class=\"line\">\t&quot;error&quot;:&quot;COLLISION_PACKET&quot;</span><br><span class=\"line\">&#125;&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>网关和服务器之间的协议是有目的的非常基本的，仅用于演示目的，或用于私有和可靠的网络。</p>\n<p>这里没有网关或服务器的认证，并且确认仅用于网络质量评估，而不是 纠正UDP数据报丢失（无重试）。</p>\n<h1 id=\"系统原理和相关定义\"><a href=\"#系统原理和相关定义\" class=\"headerlink\" title=\"系统原理和相关定义\"></a>系统原理和相关定义</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ((( Y )))</span><br><span class=\"line\">     |</span><br><span class=\"line\">     |</span><br><span class=\"line\">+ - -|- - - - - - - - - - - - - +        xxxxxxxxxxxx          +--------+</span><br><span class=\"line\">| +--+-----------+     +------+ |       xx x  x     xxx        |        |</span><br><span class=\"line\">| |              |     |      | |      xx  Internet  xx        |        |</span><br><span class=\"line\">| | Concentrator |&lt;---&gt;| Host |&lt;-------xx     or    xx--------&gt;|        |</span><br><span class=\"line\">| |              | SPI |      | |      xx  Intranet  xx        | Server |</span><br><span class=\"line\">| +--------------+     +------+ |       xxxx   x   xxxx        |        |</span><br><span class=\"line\">|    ^                     ^    |           xxxxxxxx           |        |</span><br><span class=\"line\">|    | PPS +-------+ NMEA  |    |                              |        |</span><br><span class=\"line\">|    +-----|  GPS  |-------+    |                              +--------+</span><br><span class=\"line\">|          | (opt) |            |</span><br><span class=\"line\">|          +-------+            |</span><br><span class=\"line\">|                               |</span><br><span class=\"line\">|             Gateway           |</span><br><span class=\"line\">+- - - - - - - - - - - - - - - -+</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>网关</strong>：无线电RX / TX板，基于Semtech多通道调制解调器（SX130x），收发器（SX135x）和/或低功耗独立调制解调器（SX127x）。</li>\n<li><strong>主机</strong>：运行包转发器的嵌入式计算机。通过SPI链路驱动集中器。 GPS：具有“每秒1脉冲”的GNSS（GPS，伽利略，GLONASS等）接收器 输出和到主机的串行链接，以发送包含时间和地理坐标数据的NMEA帧。可选的。</li>\n<li><strong>网关</strong>：由至少一个无线电集中器，主机，一些组成的设备网络连接到互联网或专用网络（以太网，3G，Wifi，微波链路），以及可选的GPS接收器进行同步。</li>\n<li><strong>服务器</strong>：一种抽象计算机，它将处理由网关接收和转发的RF数据包，并发出RF数据包以响应网关必须发出的数据包。</li>\n</ul>\n<p>假设网关可以在NAT后面或防火墙停止任何传入连接。 假设服务器具有静态IP地址（或通过DNS服务可解决的地址），并且能够接收特定端口上的传入连接。</p>\n<h1 id=\"上行协议\"><a href=\"#上行协议\" class=\"headerlink\" title=\"上行协议\"></a>上行协议</h1><p>3.1 时序图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">| Gateway |                                                    | Server  |</span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">     | -----------------------------------\\                         |</span><br><span class=\"line\">     |-| When 1-N RF packets are received |                         |</span><br><span class=\"line\">     | ------------------------------------                         |</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     | PUSH_DATA (token X, GW MAC, JSON payload)                    |</span><br><span class=\"line\">     |-------------------------------------------------------------&gt;|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     |                                           PUSH_ACK (token X) |</span><br><span class=\"line\">     |&lt;-------------------------------------------------------------|</span><br><span class=\"line\">     |                              ------------------------------\\ |</span><br><span class=\"line\">     |                              | process packets *after* ack |-|</span><br><span class=\"line\">     |                              ------------------------------- |</span><br><span class=\"line\">     |                                                              |</span><br></pre></td></tr></table></figure>\n<h2 id=\"PUSH-DATA-包\"><a href=\"#PUSH-DATA-包\" class=\"headerlink\" title=\"PUSH_DATA 包\"></a><code>PUSH_DATA</code> 包</h2><p>网关使用该数据包类型主要是将所接收的RF分组和相关联的元数据转发到服务器。</p>\n<table>\n<thead>\n<tr>\n<th>字节</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>协议版本2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>随机凭证</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PUSH_DATA标识<code>0x00</code></td>\n</tr>\n<tr>\n<td>4-11</td>\n<td>网关唯一标识（MAC地址）</td>\n</tr>\n<tr>\n<td>12-结束</td>\n<td><code>JSON</code>对象，看第4章</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"PUSH-ACK包\"><a href=\"#PUSH-ACK包\" class=\"headerlink\" title=\"PUSH_ACK包\"></a><code>PUSH_ACK</code>包</h2><p>服务器使用该数据包类型立即确认收到的所有PUSH_DATA数据包。</p>\n<table>\n<thead>\n<tr>\n<th>字节</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>协议版本2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>与<code>PUSH_DATA</code>包中相同的凭证，用于确认</td>\n</tr>\n<tr>\n<td>3</td>\n<td><code>PUSH_ACK</code>标识<code>0x01</code></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"上行JSON数据结构\"><a href=\"#上行JSON数据结构\" class=\"headerlink\" title=\"上行JSON数据结构\"></a>上行<code>JSON</code>数据结构</h1><p>根对象包含名为<code>&quot;rxpk&quot;</code>的数组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;rxpk&quot;:[ &#123;...&#125;, ...]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该数组包含至少一个<code>JSON</code>对象，每个对象包含一个RF数据包以及包含以下字段的关联元数据：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>类别</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>time</td>\n<td>string</td>\n<td>UTC time of pkt RX, us precision, ISO 8601 ‘compact’ format</td>\n</tr>\n<tr>\n<td>tmst</td>\n<td>number</td>\n<td>Internal timestamp of “RX finished” event (32b unsigned)</td>\n</tr>\n<tr>\n<td>freq</td>\n<td>number</td>\n<td>RX central frequency in MHz (unsigned float, Hz precision)</td>\n</tr>\n<tr>\n<td>chan</td>\n<td>number</td>\n<td>Concentrator “IF” channel used for RX (unsigned integer)</td>\n</tr>\n<tr>\n<td>rfch</td>\n<td>number</td>\n<td>Concentrator “RF chain” used for RX (unsigned integer)</td>\n</tr>\n<tr>\n<td>stat</td>\n<td>number</td>\n<td>CRC status: 1 = OK, -1 = fail, 0 = no CRC</td>\n</tr>\n<tr>\n<td>modu</td>\n<td>string</td>\n<td>Modulation identifier “LORA” or “FSK”</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>string</td>\n<td>LoRa datarate identifier (eg. SF12BW500)</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>number</td>\n<td>FSK datarate (unsigned, in bits per second)</td>\n</tr>\n<tr>\n<td>codr</td>\n<td>string</td>\n<td>LoRa ECC coding rate identifier</td>\n</tr>\n<tr>\n<td>rssi</td>\n<td>number</td>\n<td>RSSI in dBm (signed integer, 1 dB precision)</td>\n</tr>\n<tr>\n<td>lsnr</td>\n<td>number</td>\n<td>Lora SNR ratio in dB (signed float, 0.1 dB precision)</td>\n</tr>\n<tr>\n<td>size</td>\n<td>number</td>\n<td>RF packet payload size in bytes (unsigned integer)</td>\n</tr>\n<tr>\n<td>data</td>\n<td>string</td>\n<td>Base64 encoded RF packet payload, padded</td>\n</tr>\n</tbody>\n</table>\n<p>示例（为了便于阅读而添加了空格，缩进和换行符）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;rxpk&quot;:[</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t&quot;time&quot;:&quot;2013-03-31T16:21:17.528002Z&quot;,</span><br><span class=\"line\">\t\t&quot;tmst&quot;:3512348611,</span><br><span class=\"line\">\t\t&quot;chan&quot;:2,</span><br><span class=\"line\">\t\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t\t&quot;freq&quot;:866.349812,</span><br><span class=\"line\">\t\t&quot;stat&quot;:1,</span><br><span class=\"line\">\t\t&quot;modu&quot;:&quot;LORA&quot;,</span><br><span class=\"line\">\t\t&quot;datr&quot;:&quot;SF7BW125&quot;,</span><br><span class=\"line\">\t\t&quot;codr&quot;:&quot;4/6&quot;,</span><br><span class=\"line\">\t\t&quot;rssi&quot;:-35,</span><br><span class=\"line\">\t\t&quot;lsnr&quot;:5.1,</span><br><span class=\"line\">\t\t&quot;size&quot;:32,</span><br><span class=\"line\">\t\t&quot;data&quot;:&quot;-DS4CGaDCdG+48eJNM3Vai-zDpsR71Pn9CPA9uCON84&quot;</span><br><span class=\"line\">\t&#125;,&#123;</span><br><span class=\"line\">\t\t&quot;time&quot;:&quot;2013-03-31T16:21:17.530974Z&quot;,</span><br><span class=\"line\">\t\t&quot;tmst&quot;:3512348514,</span><br><span class=\"line\">\t\t&quot;chan&quot;:9,</span><br><span class=\"line\">\t\t&quot;rfch&quot;:1,</span><br><span class=\"line\">\t\t&quot;freq&quot;:869.1,</span><br><span class=\"line\">\t\t&quot;stat&quot;:1,</span><br><span class=\"line\">\t\t&quot;modu&quot;:&quot;FSK&quot;,</span><br><span class=\"line\">\t\t&quot;datr&quot;:50000,</span><br><span class=\"line\">\t\t&quot;rssi&quot;:-75,</span><br><span class=\"line\">\t\t&quot;size&quot;:16,</span><br><span class=\"line\">\t\t&quot;data&quot;:&quot;VEVTVF9QQUNLRVRfMTIzNA==&quot;</span><br><span class=\"line\">\t&#125;,&#123;</span><br><span class=\"line\">\t\t&quot;time&quot;:&quot;2013-03-31T16:21:17.532038Z&quot;,</span><br><span class=\"line\">\t\t&quot;tmst&quot;:3316387610,</span><br><span class=\"line\">\t\t&quot;chan&quot;:0,</span><br><span class=\"line\">\t\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t\t&quot;freq&quot;:863.00981,</span><br><span class=\"line\">\t\t&quot;stat&quot;:1,</span><br><span class=\"line\">\t\t&quot;modu&quot;:&quot;LORA&quot;,</span><br><span class=\"line\">\t\t&quot;datr&quot;:&quot;SF10BW125&quot;,</span><br><span class=\"line\">\t\t&quot;codr&quot;:&quot;4/7&quot;,</span><br><span class=\"line\">\t\t&quot;rssi&quot;:-38,</span><br><span class=\"line\">\t\t&quot;lsnr&quot;:5.5,</span><br><span class=\"line\">\t\t&quot;size&quot;:32,</span><br><span class=\"line\">\t\t&quot;data&quot;:&quot;ysgRl452xNLep9S1NTIg2lomKDxUgn3DJ7DE+b00Ass&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">]&#125;</span><br></pre></td></tr></table></figure>\n<p>根对象还可以包含名为<code>&quot;stat&quot;</code>的对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;rxpk&quot;:[ &#123;...&#125;, ...],</span><br><span class=\"line\">\t&quot;stat&quot;:&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>数据包可能不包含<code>&quot;rxpk&quot;</code>数组而是“stat”对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;stat&quot;:&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该对象包含网关的状态，包含以下字段：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>类型</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>time</td>\n<td>string</td>\n<td>UTC ‘system’ time of the gateway, ISO 8601 ‘expanded’ format</td>\n</tr>\n<tr>\n<td>lati</td>\n<td>number</td>\n<td>GPS latitude of the gateway in degree (float, N is +)</td>\n</tr>\n<tr>\n<td>long</td>\n<td>number</td>\n<td>GPS latitude of the gateway in degree (float, E is +)</td>\n</tr>\n<tr>\n<td>alti</td>\n<td>number</td>\n<td>GPS altitude of the gateway in meter RX (integer)</td>\n</tr>\n<tr>\n<td>rxnb</td>\n<td>number</td>\n<td>Number of radio packets received (unsigned integer)</td>\n</tr>\n<tr>\n<td>rxok</td>\n<td>number</td>\n<td>Number of radio packets received with a valid PHY CRC</td>\n</tr>\n<tr>\n<td>rxfw</td>\n<td>number</td>\n<td>Number of radio packets forwarded (unsigned integer)</td>\n</tr>\n<tr>\n<td>ackr</td>\n<td>number</td>\n<td>Percentage of upstream datagrams that were acknowledged</td>\n</tr>\n<tr>\n<td>dwnb</td>\n<td>number</td>\n<td>Number of downlink datagrams received (unsigned integer)</td>\n</tr>\n<tr>\n<td>txnb</td>\n<td>number</td>\n<td>Number of packets emitted (unsigned integer)</td>\n</tr>\n</tbody>\n</table>\n<p>示例（为了便于阅读而添加了空格，缩进和换行符）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;stat&quot;:&#123;</span><br><span class=\"line\">\t&quot;time&quot;:&quot;2014-01-12 08:59:28 GMT&quot;,</span><br><span class=\"line\">\t&quot;lati&quot;:46.24000,</span><br><span class=\"line\">\t&quot;long&quot;:3.25230,</span><br><span class=\"line\">\t&quot;alti&quot;:145,</span><br><span class=\"line\">\t&quot;rxnb&quot;:2,</span><br><span class=\"line\">\t&quot;rxok&quot;:2,</span><br><span class=\"line\">\t&quot;rxfw&quot;:2,</span><br><span class=\"line\">\t&quot;ackr&quot;:100.0,</span><br><span class=\"line\">\t&quot;dwnb&quot;:2,</span><br><span class=\"line\">\t&quot;txnb&quot;:2</span><br><span class=\"line\">&#125;&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"下行协议\"><a href=\"#下行协议\" class=\"headerlink\" title=\"下行协议\"></a>下行协议</h1><h2 id=\"时序图\"><a href=\"#时序图\" class=\"headerlink\" title=\"时序图\"></a>时序图</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">| Gateway |                                                    | Server  |</span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">     | -----------------------------------\\                         |</span><br><span class=\"line\">     |-| Every N seconds (keepalive time) |                         |</span><br><span class=\"line\">     | ------------------------------------                         |</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     | PULL_DATA (token Y, MAC@)                                    |</span><br><span class=\"line\">     |-------------------------------------------------------------&gt;|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     |                                           PULL_ACK (token Y) |</span><br><span class=\"line\">     |&lt;-------------------------------------------------------------|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\"></span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">| Gateway |                                                    | Server  |</span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">     |      ------------------------------------------------------\\ |</span><br><span class=\"line\">     |      | Anytime after first PULL_DATA for each packet to TX |-|</span><br><span class=\"line\">     |      ------------------------------------------------------- |</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     |                            PULL_RESP (token Z, JSON payload) |</span><br><span class=\"line\">     |&lt;-------------------------------------------------------------|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     | TX_ACK (token Z, JSON payload)                               |</span><br><span class=\"line\">     |-------------------------------------------------------------&gt;|</span><br></pre></td></tr></table></figure>\n<h2 id=\"PULL-DATA包\"><a href=\"#PULL-DATA包\" class=\"headerlink\" title=\"PULL_DATA包\"></a>PULL_DATA包</h2><p>网关使用该数据包类型来轮询来自服务器的数据。</p>\n<p>此数据交换由网关初始化，因为如果网关位于NAT后面，服务器可能无法将数据包发送到网关。 当网关初始化交换机时，将打开通向服务器的网络路由，并允许数据包在两个方向上流动。 网关必须定期发送PULL_DATA数据包，以确保网络路由保持打开状态，以便服务器随时使用。</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>random token</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PULL_DATA identifier 0x02</td>\n</tr>\n<tr>\n<td>4-11</td>\n<td>Gateway unique identifier (MAC address)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"PULL-ACK-包\"><a href=\"#PULL-ACK-包\" class=\"headerlink\" title=\"PULL_ACK 包\"></a><code>PULL_ACK</code> 包</h3><p>服务器使用该数据包类型来确认网络路由是否已打开，以及服务器是否可以随时发送PULL_RESP数据包。</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>same token as the PULL_DATA packet to acknowledge</td>\n</tr>\n<tr>\n<td>3</td>\n<td><code>PULL_ACK</code> identifier <code>0x04</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"PULL-RESP-包\"><a href=\"#PULL-RESP-包\" class=\"headerlink\" title=\"PULL_RESP 包\"></a>PULL_RESP 包</h3><p>服务器使用该数据包类型来发送必须由网关发出的RF数据包和相关元数据。</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>random token</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PULL_RESP identifier 0x03</td>\n</tr>\n<tr>\n<td>4-end</td>\n<td>JSON object, starting with {, ending with }, see section 6</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"TX-ACK-包\"><a href=\"#TX-ACK-包\" class=\"headerlink\" title=\"TX_ACK 包\"></a>TX_ACK 包</h3><p>网关使用该分组类型向服务器发送反馈，以通知网关是否已接受或拒绝下行链路请求。 数据报可以选项包含一个JSON字符串，以提供有关acknoledge的更多详细信息。 如果没有JSON（空字符串），这意味着没有发生错误。</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>same token as the PULL_RESP packet to acknowledge</td>\n</tr>\n<tr>\n<td>3</td>\n<td>TX_ACK identifier 0x05</td>\n</tr>\n<tr>\n<td>4-11</td>\n<td>Gateway unique identifier (MAC address)</td>\n</tr>\n<tr>\n<td>12-end</td>\n<td>[optional] JSON object, starting with {, ending with }, see section 6</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"下行JSON数据结构\"><a href=\"#下行JSON数据结构\" class=\"headerlink\" title=\"下行JSON数据结构\"></a>下行<code>JSON</code>数据结构</h2><hr>\n<p>PULL_RESP数据包的根对象必须包含名为“txpk”的对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;txpk&quot;: &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该对象包含要发出的RF数据包以及与以下字段相关联的元数据：</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>imme</td>\n<td>bool</td>\n<td>Send packet immediately (will ignore tmst &amp; time)</td>\n</tr>\n<tr>\n<td>tmst</td>\n<td>number</td>\n<td>Send packet on a certain timestamp value (will ignore time)</td>\n</tr>\n<tr>\n<td>time</td>\n<td>string</td>\n<td>Send packet at a certain time (GPS synchronization required)</td>\n</tr>\n<tr>\n<td>freq</td>\n<td>number</td>\n<td>TX central frequency in MHz (unsigned float, Hz precision)</td>\n</tr>\n<tr>\n<td>rfch</td>\n<td>number</td>\n<td>Concentrator “RF chain” used for TX (unsigned integer)</td>\n</tr>\n<tr>\n<td>powe</td>\n<td>number</td>\n<td>TX output power in dBm (unsigned integer, dBm precision)</td>\n</tr>\n<tr>\n<td>modu</td>\n<td>string</td>\n<td>Modulation identifier “LORA” or “FSK”</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>string</td>\n<td>LoRa datarate identifier (eg. SF12BW500)</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>number</td>\n<td>FSK datarate (unsigned, in bits per second)</td>\n</tr>\n<tr>\n<td>codr</td>\n<td>string</td>\n<td>LoRa ECC coding rate identifier</td>\n</tr>\n<tr>\n<td>fdev</td>\n<td>number</td>\n<td>FSK frequency deviation (unsigned integer, in Hz)</td>\n</tr>\n<tr>\n<td>ipol</td>\n<td>bool</td>\n<td>Lora modulation polarization inversion</td>\n</tr>\n<tr>\n<td>prea</td>\n<td>number</td>\n<td>RF preamble size (unsigned integer)</td>\n</tr>\n<tr>\n<td>size</td>\n<td>number</td>\n<td>RF packet payload size in bytes (unsigned integer)</td>\n</tr>\n<tr>\n<td>data</td>\n<td>string</td>\n<td>Base64 encoded RF packet payload, padding optional</td>\n</tr>\n<tr>\n<td>ncrc</td>\n<td>bool</td>\n<td>If true, disable the CRC of the physical layer (optional)</td>\n</tr>\n</tbody>\n</table>\n<p>大多数字段都是可选的。如果省略字段，将使用默认参数。 示例（为便于阅读而添加了空格，缩进和换行符）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;txpk&quot;:&#123;</span><br><span class=\"line\">\t&quot;imme&quot;:true,</span><br><span class=\"line\">\t&quot;freq&quot;:864.123456,</span><br><span class=\"line\">\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t&quot;powe&quot;:14,</span><br><span class=\"line\">\t&quot;modu&quot;:&quot;LORA&quot;,</span><br><span class=\"line\">\t&quot;datr&quot;:&quot;SF11BW125&quot;,</span><br><span class=\"line\">\t&quot;codr&quot;:&quot;4/6&quot;,</span><br><span class=\"line\">\t&quot;ipol&quot;:false,</span><br><span class=\"line\">\t&quot;size&quot;:32,</span><br><span class=\"line\">\t&quot;data&quot;:&quot;H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v&quot;</span><br><span class=\"line\">&#125;&#125;</span><br><span class=\"line\">&#123;&quot;txpk&quot;:&#123;</span><br><span class=\"line\">\t&quot;imme&quot;:true,</span><br><span class=\"line\">\t&quot;freq&quot;:861.3,</span><br><span class=\"line\">\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t&quot;powe&quot;:12,</span><br><span class=\"line\">\t&quot;modu&quot;:&quot;FSK&quot;,</span><br><span class=\"line\">\t&quot;datr&quot;:50000,</span><br><span class=\"line\">\t&quot;fdev&quot;:3000,</span><br><span class=\"line\">\t&quot;size&quot;:32,</span><br><span class=\"line\">\t&quot;data&quot;:&quot;H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v&quot;</span><br><span class=\"line\">&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>TX_ACK数据包的根对象必须包含名为“txpk_ack”的对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;txpk_ack&quot;: &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该对象包含有关相关PULL_RESP数据包的状态信息。</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>error</td>\n<td>string</td>\n<td>Indication about success or type of failure that occured for downlink request.</td>\n</tr>\n</tbody>\n</table>\n<p>可能的错误有：</p>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NONE</td>\n<td>Packet has been programmed for downlink</td>\n</tr>\n<tr>\n<td>TOO_LATE</td>\n<td>Rejected because it was already too late to program this packet for downlink</td>\n</tr>\n<tr>\n<td>TOO_EARLY</td>\n<td>Rejected because downlink packet timestamp is too much in advance</td>\n</tr>\n<tr>\n<td>COLLISION_PACKET</td>\n<td>Rejected because there was already a packet programmed in requested timeframe</td>\n</tr>\n<tr>\n<td>COLLISION_BEACON</td>\n<td>Rejected because there was already a beacon planned in requested timeframe</td>\n</tr>\n<tr>\n<td>TX_FREQ</td>\n<td>Rejected because requested frequency is not supported by TX RF chain</td>\n</tr>\n<tr>\n<td>TX_POWER</td>\n<td>Rejected because requested power is not supported by gateway</td>\n</tr>\n<tr>\n<td>GPS_UNLOCKED</td>\n<td>Rejected because GPS is unlocked, so GPS timestamp cannot be used</td>\n</tr>\n</tbody>\n</table>\n<p>示例（为便于阅读而添加了空格，缩进和换行符）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;txpk_ack&quot;:&#123;</span><br><span class=\"line\">\t&quot;error&quot;:&quot;COLLISION_PACKET&quot;</span><br><span class=\"line\">&#125;&#125;</span><br></pre></td></tr></table></figure>"},{"title":"spring数据库事务","date":"2019-09-01T12:22:24.000Z","_content":"\n# 接口\n\n## PlatformTransactionManager\n\nPlatformTransactionManager接口中定义了三个方法：\n\n```java\nPublic interface PlatformTransactionManager()...{  \n    // Return a currently active transaction or create a new one, according to the specified propagation behavior（根据指定的传播行为，返回当前活动的事务或创建一个新事务。）\n    TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException; \n    // Commit the given transaction, with regard to its status（使用事务目前的状态提交事务）\n    Void commit(TransactionStatus status) throws TransactionException;  \n    // Perform a rollback of the given transaction（对执行的事务进行回滚）\n    Void rollback(TransactionStatus status) throws TransactionException;  \n    } \n复制代码\n```\n\n我们刚刚也说了Spring中PlatformTransactionManager根据不同持久层框架所对应的接口实现类,几个比较常见的如下图所示\n\n\n\n![PlatformTransactionManager根据不同持久层框架所对应的接口实现](http://wumu.sciento.cn/20190901203705.png)\n\n\n\n比如我们在使用JDBC或者iBatis（就是Mybatis）进行数据持久化操作时,我们的xml配置通常如下：\n\n```xml\n\t<!-- 事务管理器 -->\n\t<bean id=\"transactionManager\"\n\t\tclass=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n\t\t<!-- 数据源 -->\n\t\t<property name=\"dataSource\" ref=\"dataSource\" />\n\t</bean>\n```\n\n## TransactionDefinition\n\n事务管理器接口 **PlatformTransactionManager** 通过 **getTransaction(TransactionDefinition definition)** 方法来得到一个事务，这个方法里面的参数是 **TransactionDefinition类** ，这个类就定义了一些基本的事务属性。\n\n**那么什么是事务属性呢？**\n\n事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。事务属性包含了5个方面。 \n\n![](http://wumu.sciento.cn/20190901203901.png)\n\n\n\n### TransactionDefinition接口中的方法如下：\n\nTransactionDefinition接口中定义了5个方法以及一些表示事务属性的常量比如隔离级别、传播行为等等的常量。\n\n我下面只是列出了TransactionDefinition接口中的方法而没有给出接口中定义的常量，该接口中的常量信息会在后面依次介绍到。\n\n```java\npublic interface TransactionDefinition {\n    // 返回事务的传播行为\n    int getPropagationBehavior(); \n    // 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据\n    int getIsolationLevel(); \n    // 返回事务必须在多少秒内完成\n    //返回事务的名字\n    String getName()；\n    int getTimeout();  \n    // 返回是否优化为只读事务。\n    boolean isReadOnly();\n} \n```\n\n## TransactionStatus\n\nPlatformTransactionManager.getTransaction(…) 方法返回一个 TransactionStatus 对象。返回的TransactionStatus 对象可能代表一个新的或已经存在的事务（如果在当前调用堆栈有一个符合条件的事务）。TransactionStatus 接口提供了一个简单的控制事务执行和查询事务状态的方法。该接口定义如清单3所示：\n\n##### 清单3. TransactionStatus 接口中定义的主要方法\n\n```java\n`public  interface TransactionStatus{``   ``boolean isNewTransaction();``   ``void setRollbackOnly();``   ``boolean isRollbackOnly();``}`\n```\n\n# 事务管理API分析\n\n## 事务隔离级别\n\n隔离级别是指若干个并发的事务之间的隔离程度。TransactionDefinition 接口中定义了五个表示隔离级别的常量：\n\n- TransactionDefinition.ISOLATION_DEFAULT：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是TransactionDefinition.ISOLATION_READ_COMMITTED。\n\n- TransactionDefinition.ISOLATION_READ_UNCOMMITTED：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读和不可重复读，因此很少使用该隔离级别。\n\n- TransactionDefinition.ISOLATION_READ_COMMITTED：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。\n\n- TransactionDefinition.ISOLATION_REPEATABLE_READ：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。即使在多次查询之间有新增的数据满足该查询，这些新增的记录也会被忽略。该级别可以防止脏读和不可重复读。\n\n- TransactionDefinition.ISOLATION_SERIALIZABLE：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。\n\n## 事务传播行为\n\n所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：\n\n- TransactionDefinition.PROPAGATION_REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。\n- TransactionDefinition.PROPAGATION_REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起。\n- TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。\n- TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。\n- TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。\n- TransactionDefinition.PROPAGATION_MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。\n- TransactionDefinition.PROPAGATION_NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。\n\n这里需要指出的是，前面的六种事务传播行为是 Spring 从 EJB 中引入的，他们共享相同的概念。而 PROPAGATION_NESTED是 Spring 所特有的。以 PROPAGATION_NESTED 启动的事务内嵌于外部事务中（如果存在外部事务的话），此时，内嵌事务并不是一个独立的事务，它依赖于外部事务的存在，只有通过外部的事务提交，才能引起内部事务的提交，嵌套的子事务不能单独提交。如果熟悉 JDBC 中的保存点（SavePoint）的概念，那嵌套事务就很容易理解了，其实嵌套的子事务就是保存点的一个应用，一个事务中可以包括多个保存点，每一个嵌套子事务。另外，外部事务的回滚也会导致嵌套子事务的回滚。\n\n## 事务超时\n\n所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。\n\n## 事务的只读属性\n\n事务的只读属性是指，对事务性资源进行只读操作或者是读写操作。所谓事务性资源就是指那些被事务管理的资源，比如数据源、 JMS 资源，以及自定义的事务性资源等等。如果确定只对事务性资源进行只读操作，那么我们可以将事务标志为只读的，以提高事务处理的性能。在 TransactionDefinition 中以 boolean 类型来表示该事务是否只读。\n\n应用场合：\n\n如果你一次执行单条查询语句，则没有必要启用事务支持，数据库默认支持SQL执行期间的读一致性； \n如果你一次执行多条查询语句，例如统计查询，报表查询，在这种场景下，多条查询SQL必须保证整体的读一致性，否则，在前条SQL查询之后，后条SQL查询之前，数据被其他用户改变，则该次整体的统计查询将会出现读数据不一致的状态，此时，应该启用事务支持。\n【注意是一次执行多次查询来统计某些信息，这时为了保证数据整体的一致性，要用只读事务】\n\n怎样设置：\n\n对于只读查询，可以指定事务类型为readonly，即只读事务。\n由于只读事务不存在数据的修改，因此数据库将会为只读事务提供一些优化手段，例如Oracle对于只读事务，不启动回滚段，不记录回滚log。\n\n（1）在JDBC中，指定只读事务的办法为： connection.setReadOnly(true);\n\n（2）在Hibernate中，指定只读事务的办法为： session.setFlushMode(FlushMode.NEVER); \n此时，Hibernate也会为只读事务提供Session方面的一些优化手段\n\n（3）在Spring的Hibernate封装中，指定只读事务的办法为： bean配置文件中，prop属性增加“readOnly”\n或者用注解方式@Transactional(readOnly=true)\n【 if the transaction is marked as read-only, Spring will set the Hibernate Session’s flush mode to FLUSH_NEVER, \nand will set the JDBC transaction to read-only】也就是说在Spring中设置只读事务是利用上面两种方式\n\n## 事务的回滚规则\n\n通常情况下，如果在事务中抛出了未检查异常（继承自 RuntimeException 的异常），则默认将回滚事务。如果没有抛出任何异常，或者抛出了已检查异常，则仍然提交事务。这通常也是大多数开发者希望的处理方式，也是 EJB 中的默认处理方式。但是，我们可以根据需要人为控制事务在抛出某些未检查异常时任然提交事务，或者在抛出某些已检查异常时回滚事务。","source":"_posts/spring数据库事务.md","raw":"---\ntitle: spring数据库事务\ndate: 2019-09-01 20:22:24\ntags: \n- mysql\n- spring\n---\n\n# 接口\n\n## PlatformTransactionManager\n\nPlatformTransactionManager接口中定义了三个方法：\n\n```java\nPublic interface PlatformTransactionManager()...{  \n    // Return a currently active transaction or create a new one, according to the specified propagation behavior（根据指定的传播行为，返回当前活动的事务或创建一个新事务。）\n    TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException; \n    // Commit the given transaction, with regard to its status（使用事务目前的状态提交事务）\n    Void commit(TransactionStatus status) throws TransactionException;  \n    // Perform a rollback of the given transaction（对执行的事务进行回滚）\n    Void rollback(TransactionStatus status) throws TransactionException;  \n    } \n复制代码\n```\n\n我们刚刚也说了Spring中PlatformTransactionManager根据不同持久层框架所对应的接口实现类,几个比较常见的如下图所示\n\n\n\n![PlatformTransactionManager根据不同持久层框架所对应的接口实现](http://wumu.sciento.cn/20190901203705.png)\n\n\n\n比如我们在使用JDBC或者iBatis（就是Mybatis）进行数据持久化操作时,我们的xml配置通常如下：\n\n```xml\n\t<!-- 事务管理器 -->\n\t<bean id=\"transactionManager\"\n\t\tclass=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n\t\t<!-- 数据源 -->\n\t\t<property name=\"dataSource\" ref=\"dataSource\" />\n\t</bean>\n```\n\n## TransactionDefinition\n\n事务管理器接口 **PlatformTransactionManager** 通过 **getTransaction(TransactionDefinition definition)** 方法来得到一个事务，这个方法里面的参数是 **TransactionDefinition类** ，这个类就定义了一些基本的事务属性。\n\n**那么什么是事务属性呢？**\n\n事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。事务属性包含了5个方面。 \n\n![](http://wumu.sciento.cn/20190901203901.png)\n\n\n\n### TransactionDefinition接口中的方法如下：\n\nTransactionDefinition接口中定义了5个方法以及一些表示事务属性的常量比如隔离级别、传播行为等等的常量。\n\n我下面只是列出了TransactionDefinition接口中的方法而没有给出接口中定义的常量，该接口中的常量信息会在后面依次介绍到。\n\n```java\npublic interface TransactionDefinition {\n    // 返回事务的传播行为\n    int getPropagationBehavior(); \n    // 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据\n    int getIsolationLevel(); \n    // 返回事务必须在多少秒内完成\n    //返回事务的名字\n    String getName()；\n    int getTimeout();  \n    // 返回是否优化为只读事务。\n    boolean isReadOnly();\n} \n```\n\n## TransactionStatus\n\nPlatformTransactionManager.getTransaction(…) 方法返回一个 TransactionStatus 对象。返回的TransactionStatus 对象可能代表一个新的或已经存在的事务（如果在当前调用堆栈有一个符合条件的事务）。TransactionStatus 接口提供了一个简单的控制事务执行和查询事务状态的方法。该接口定义如清单3所示：\n\n##### 清单3. TransactionStatus 接口中定义的主要方法\n\n```java\n`public  interface TransactionStatus{``   ``boolean isNewTransaction();``   ``void setRollbackOnly();``   ``boolean isRollbackOnly();``}`\n```\n\n# 事务管理API分析\n\n## 事务隔离级别\n\n隔离级别是指若干个并发的事务之间的隔离程度。TransactionDefinition 接口中定义了五个表示隔离级别的常量：\n\n- TransactionDefinition.ISOLATION_DEFAULT：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是TransactionDefinition.ISOLATION_READ_COMMITTED。\n\n- TransactionDefinition.ISOLATION_READ_UNCOMMITTED：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读和不可重复读，因此很少使用该隔离级别。\n\n- TransactionDefinition.ISOLATION_READ_COMMITTED：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。\n\n- TransactionDefinition.ISOLATION_REPEATABLE_READ：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。即使在多次查询之间有新增的数据满足该查询，这些新增的记录也会被忽略。该级别可以防止脏读和不可重复读。\n\n- TransactionDefinition.ISOLATION_SERIALIZABLE：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。\n\n## 事务传播行为\n\n所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：\n\n- TransactionDefinition.PROPAGATION_REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。\n- TransactionDefinition.PROPAGATION_REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起。\n- TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。\n- TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。\n- TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。\n- TransactionDefinition.PROPAGATION_MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。\n- TransactionDefinition.PROPAGATION_NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。\n\n这里需要指出的是，前面的六种事务传播行为是 Spring 从 EJB 中引入的，他们共享相同的概念。而 PROPAGATION_NESTED是 Spring 所特有的。以 PROPAGATION_NESTED 启动的事务内嵌于外部事务中（如果存在外部事务的话），此时，内嵌事务并不是一个独立的事务，它依赖于外部事务的存在，只有通过外部的事务提交，才能引起内部事务的提交，嵌套的子事务不能单独提交。如果熟悉 JDBC 中的保存点（SavePoint）的概念，那嵌套事务就很容易理解了，其实嵌套的子事务就是保存点的一个应用，一个事务中可以包括多个保存点，每一个嵌套子事务。另外，外部事务的回滚也会导致嵌套子事务的回滚。\n\n## 事务超时\n\n所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。\n\n## 事务的只读属性\n\n事务的只读属性是指，对事务性资源进行只读操作或者是读写操作。所谓事务性资源就是指那些被事务管理的资源，比如数据源、 JMS 资源，以及自定义的事务性资源等等。如果确定只对事务性资源进行只读操作，那么我们可以将事务标志为只读的，以提高事务处理的性能。在 TransactionDefinition 中以 boolean 类型来表示该事务是否只读。\n\n应用场合：\n\n如果你一次执行单条查询语句，则没有必要启用事务支持，数据库默认支持SQL执行期间的读一致性； \n如果你一次执行多条查询语句，例如统计查询，报表查询，在这种场景下，多条查询SQL必须保证整体的读一致性，否则，在前条SQL查询之后，后条SQL查询之前，数据被其他用户改变，则该次整体的统计查询将会出现读数据不一致的状态，此时，应该启用事务支持。\n【注意是一次执行多次查询来统计某些信息，这时为了保证数据整体的一致性，要用只读事务】\n\n怎样设置：\n\n对于只读查询，可以指定事务类型为readonly，即只读事务。\n由于只读事务不存在数据的修改，因此数据库将会为只读事务提供一些优化手段，例如Oracle对于只读事务，不启动回滚段，不记录回滚log。\n\n（1）在JDBC中，指定只读事务的办法为： connection.setReadOnly(true);\n\n（2）在Hibernate中，指定只读事务的办法为： session.setFlushMode(FlushMode.NEVER); \n此时，Hibernate也会为只读事务提供Session方面的一些优化手段\n\n（3）在Spring的Hibernate封装中，指定只读事务的办法为： bean配置文件中，prop属性增加“readOnly”\n或者用注解方式@Transactional(readOnly=true)\n【 if the transaction is marked as read-only, Spring will set the Hibernate Session’s flush mode to FLUSH_NEVER, \nand will set the JDBC transaction to read-only】也就是说在Spring中设置只读事务是利用上面两种方式\n\n## 事务的回滚规则\n\n通常情况下，如果在事务中抛出了未检查异常（继承自 RuntimeException 的异常），则默认将回滚事务。如果没有抛出任何异常，或者抛出了已检查异常，则仍然提交事务。这通常也是大多数开发者希望的处理方式，也是 EJB 中的默认处理方式。但是，我们可以根据需要人为控制事务在抛出某些未检查异常时任然提交事务，或者在抛出某些已检查异常时回滚事务。","slug":"spring数据库事务","published":1,"updated":"2019-10-14T09:01:08.295Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a434002oic1yrv9j4v3p","content":"<h1 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h1><h2 id=\"PlatformTransactionManager\"><a href=\"#PlatformTransactionManager\" class=\"headerlink\" title=\"PlatformTransactionManager\"></a>PlatformTransactionManager</h2><p>PlatformTransactionManager接口中定义了三个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Public interface <span class=\"title\">PlatformTransactionManager</span><span class=\"params\">()</span>...</span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">// Return a currently active transaction or create a new one, according to the specified propagation behavior（根据指定的传播行为，返回当前活动的事务或创建一个新事务。）</span></span><br><span class=\"line\">    <span class=\"function\">TransactionStatus <span class=\"title\">getTransaction</span><span class=\"params\">(TransactionDefinition definition)</span> <span class=\"keyword\">throws</span> TransactionException</span>; </span><br><span class=\"line\">    <span class=\"comment\">// Commit the given transaction, with regard to its status（使用事务目前的状态提交事务）</span></span><br><span class=\"line\">    <span class=\"function\">Void <span class=\"title\">commit</span><span class=\"params\">(TransactionStatus status)</span> <span class=\"keyword\">throws</span> TransactionException</span>;  </span><br><span class=\"line\">    <span class=\"comment\">// Perform a rollback of the given transaction（对执行的事务进行回滚）</span></span><br><span class=\"line\">    <span class=\"function\">Void <span class=\"title\">rollback</span><span class=\"params\">(TransactionStatus status)</span> <span class=\"keyword\">throws</span> TransactionException</span>;  </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>我们刚刚也说了Spring中PlatformTransactionManager根据不同持久层框架所对应的接口实现类,几个比较常见的如下图所示</p>\n<p><img src=\"http://wumu.sciento.cn/20190901203705.png\" alt=\"PlatformTransactionManager根据不同持久层框架所对应的接口实现\"></p>\n<p>比如我们在使用JDBC或者iBatis（就是Mybatis）进行数据持久化操作时,我们的xml配置通常如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 事务管理器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 数据源 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"TransactionDefinition\"><a href=\"#TransactionDefinition\" class=\"headerlink\" title=\"TransactionDefinition\"></a>TransactionDefinition</h2><p>事务管理器接口 <strong>PlatformTransactionManager</strong> 通过 <strong>getTransaction(TransactionDefinition definition)</strong> 方法来得到一个事务，这个方法里面的参数是 <strong>TransactionDefinition类</strong> ，这个类就定义了一些基本的事务属性。</p>\n<p><strong>那么什么是事务属性呢？</strong></p>\n<p>事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。事务属性包含了5个方面。 </p>\n<p><img src=\"http://wumu.sciento.cn/20190901203901.png\" alt=\"\"></p>\n<h3 id=\"TransactionDefinition接口中的方法如下：\"><a href=\"#TransactionDefinition接口中的方法如下：\" class=\"headerlink\" title=\"TransactionDefinition接口中的方法如下：\"></a>TransactionDefinition接口中的方法如下：</h3><p>TransactionDefinition接口中定义了5个方法以及一些表示事务属性的常量比如隔离级别、传播行为等等的常量。</p>\n<p>我下面只是列出了TransactionDefinition接口中的方法而没有给出接口中定义的常量，该接口中的常量信息会在后面依次介绍到。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TransactionDefinition</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回事务的传播行为</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPropagationBehavior</span><span class=\"params\">()</span></span>; </span><br><span class=\"line\">    <span class=\"comment\">// 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getIsolationLevel</span><span class=\"params\">()</span></span>; </span><br><span class=\"line\">    <span class=\"comment\">// 返回事务必须在多少秒内完成</span></span><br><span class=\"line\">    <span class=\"comment\">//返回事务的名字</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getName</span><span class=\"params\">()</span>；</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">int</span> <span class=\"title\">getTimeout</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">    <span class=\"comment\">// 返回是否优化为只读事务。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isReadOnly</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"TransactionStatus\"><a href=\"#TransactionStatus\" class=\"headerlink\" title=\"TransactionStatus\"></a>TransactionStatus</h2><p>PlatformTransactionManager.getTransaction(…) 方法返回一个 TransactionStatus 对象。返回的TransactionStatus 对象可能代表一个新的或已经存在的事务（如果在当前调用堆栈有一个符合条件的事务）。TransactionStatus 接口提供了一个简单的控制事务执行和查询事务状态的方法。该接口定义如清单3所示：</p>\n<h5 id=\"清单3-TransactionStatus-接口中定义的主要方法\"><a href=\"#清单3-TransactionStatus-接口中定义的主要方法\" class=\"headerlink\" title=\"清单3. TransactionStatus 接口中定义的主要方法\"></a>清单3. TransactionStatus 接口中定义的主要方法</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"keyword\">public</span>  <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TransactionStatus</span></span>&#123;``   ``<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isNewTransaction</span><span class=\"params\">()</span></span>;``   ``<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setRollbackOnly</span><span class=\"params\">()</span></span>;``   ``<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isRollbackOnly</span><span class=\"params\">()</span></span>;``&#125;`</span><br></pre></td></tr></table></figure>\n<h1 id=\"事务管理API分析\"><a href=\"#事务管理API分析\" class=\"headerlink\" title=\"事务管理API分析\"></a>事务管理API分析</h1><h2 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h2><p>隔离级别是指若干个并发的事务之间的隔离程度。TransactionDefinition 接口中定义了五个表示隔离级别的常量：</p>\n<ul>\n<li><p>TransactionDefinition.ISOLATION_DEFAULT：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是TransactionDefinition.ISOLATION_READ_COMMITTED。</p>\n</li>\n<li><p>TransactionDefinition.ISOLATION_READ_UNCOMMITTED：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读和不可重复读，因此很少使用该隔离级别。</p>\n</li>\n<li><p>TransactionDefinition.ISOLATION_READ_COMMITTED：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。</p>\n</li>\n<li><p>TransactionDefinition.ISOLATION_REPEATABLE_READ：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。即使在多次查询之间有新增的数据满足该查询，这些新增的记录也会被忽略。该级别可以防止脏读和不可重复读。</p>\n</li>\n<li><p>TransactionDefinition.ISOLATION_SERIALIZABLE：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</p>\n</li>\n</ul>\n<h2 id=\"事务传播行为\"><a href=\"#事务传播行为\" class=\"headerlink\" title=\"事务传播行为\"></a>事务传播行为</h2><p>所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：</p>\n<ul>\n<li>TransactionDefinition.PROPAGATION_REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li>\n<li>TransactionDefinition.PROPAGATION_REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li>\n<li>TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li>\n<li>TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li>\n<li>TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。</li>\n<li>TransactionDefinition.PROPAGATION_MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</li>\n<li>TransactionDefinition.PROPAGATION_NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</li>\n</ul>\n<p>这里需要指出的是，前面的六种事务传播行为是 Spring 从 EJB 中引入的，他们共享相同的概念。而 PROPAGATION_NESTED是 Spring 所特有的。以 PROPAGATION_NESTED 启动的事务内嵌于外部事务中（如果存在外部事务的话），此时，内嵌事务并不是一个独立的事务，它依赖于外部事务的存在，只有通过外部的事务提交，才能引起内部事务的提交，嵌套的子事务不能单独提交。如果熟悉 JDBC 中的保存点（SavePoint）的概念，那嵌套事务就很容易理解了，其实嵌套的子事务就是保存点的一个应用，一个事务中可以包括多个保存点，每一个嵌套子事务。另外，外部事务的回滚也会导致嵌套子事务的回滚。</p>\n<h2 id=\"事务超时\"><a href=\"#事务超时\" class=\"headerlink\" title=\"事务超时\"></a>事务超时</h2><p>所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。</p>\n<h2 id=\"事务的只读属性\"><a href=\"#事务的只读属性\" class=\"headerlink\" title=\"事务的只读属性\"></a>事务的只读属性</h2><p>事务的只读属性是指，对事务性资源进行只读操作或者是读写操作。所谓事务性资源就是指那些被事务管理的资源，比如数据源、 JMS 资源，以及自定义的事务性资源等等。如果确定只对事务性资源进行只读操作，那么我们可以将事务标志为只读的，以提高事务处理的性能。在 TransactionDefinition 中以 boolean 类型来表示该事务是否只读。</p>\n<p>应用场合：</p>\n<p>如果你一次执行单条查询语句，则没有必要启用事务支持，数据库默认支持SQL执行期间的读一致性；<br>如果你一次执行多条查询语句，例如统计查询，报表查询，在这种场景下，多条查询SQL必须保证整体的读一致性，否则，在前条SQL查询之后，后条SQL查询之前，数据被其他用户改变，则该次整体的统计查询将会出现读数据不一致的状态，此时，应该启用事务支持。<br>【注意是一次执行多次查询来统计某些信息，这时为了保证数据整体的一致性，要用只读事务】</p>\n<p>怎样设置：</p>\n<p>对于只读查询，可以指定事务类型为readonly，即只读事务。<br>由于只读事务不存在数据的修改，因此数据库将会为只读事务提供一些优化手段，例如Oracle对于只读事务，不启动回滚段，不记录回滚log。</p>\n<p>（1）在JDBC中，指定只读事务的办法为： connection.setReadOnly(true);</p>\n<p>（2）在Hibernate中，指定只读事务的办法为： session.setFlushMode(FlushMode.NEVER);<br>此时，Hibernate也会为只读事务提供Session方面的一些优化手段</p>\n<p>（3）在Spring的Hibernate封装中，指定只读事务的办法为： bean配置文件中，prop属性增加“readOnly”<br>或者用注解方式@Transactional(readOnly=true)<br>【 if the transaction is marked as read-only, Spring will set the Hibernate Session’s flush mode to FLUSH_NEVER,<br>and will set the JDBC transaction to read-only】也就是说在Spring中设置只读事务是利用上面两种方式</p>\n<h2 id=\"事务的回滚规则\"><a href=\"#事务的回滚规则\" class=\"headerlink\" title=\"事务的回滚规则\"></a>事务的回滚规则</h2><p>通常情况下，如果在事务中抛出了未检查异常（继承自 RuntimeException 的异常），则默认将回滚事务。如果没有抛出任何异常，或者抛出了已检查异常，则仍然提交事务。这通常也是大多数开发者希望的处理方式，也是 EJB 中的默认处理方式。但是，我们可以根据需要人为控制事务在抛出某些未检查异常时任然提交事务，或者在抛出某些已检查异常时回滚事务。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h1><h2 id=\"PlatformTransactionManager\"><a href=\"#PlatformTransactionManager\" class=\"headerlink\" title=\"PlatformTransactionManager\"></a>PlatformTransactionManager</h2><p>PlatformTransactionManager接口中定义了三个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Public interface <span class=\"title\">PlatformTransactionManager</span><span class=\"params\">()</span>...</span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">// Return a currently active transaction or create a new one, according to the specified propagation behavior（根据指定的传播行为，返回当前活动的事务或创建一个新事务。）</span></span><br><span class=\"line\">    <span class=\"function\">TransactionStatus <span class=\"title\">getTransaction</span><span class=\"params\">(TransactionDefinition definition)</span> <span class=\"keyword\">throws</span> TransactionException</span>; </span><br><span class=\"line\">    <span class=\"comment\">// Commit the given transaction, with regard to its status（使用事务目前的状态提交事务）</span></span><br><span class=\"line\">    <span class=\"function\">Void <span class=\"title\">commit</span><span class=\"params\">(TransactionStatus status)</span> <span class=\"keyword\">throws</span> TransactionException</span>;  </span><br><span class=\"line\">    <span class=\"comment\">// Perform a rollback of the given transaction（对执行的事务进行回滚）</span></span><br><span class=\"line\">    <span class=\"function\">Void <span class=\"title\">rollback</span><span class=\"params\">(TransactionStatus status)</span> <span class=\"keyword\">throws</span> TransactionException</span>;  </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>我们刚刚也说了Spring中PlatformTransactionManager根据不同持久层框架所对应的接口实现类,几个比较常见的如下图所示</p>\n<p><img src=\"http://wumu.sciento.cn/20190901203705.png\" alt=\"PlatformTransactionManager根据不同持久层框架所对应的接口实现\"></p>\n<p>比如我们在使用JDBC或者iBatis（就是Mybatis）进行数据持久化操作时,我们的xml配置通常如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 事务管理器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 数据源 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"TransactionDefinition\"><a href=\"#TransactionDefinition\" class=\"headerlink\" title=\"TransactionDefinition\"></a>TransactionDefinition</h2><p>事务管理器接口 <strong>PlatformTransactionManager</strong> 通过 <strong>getTransaction(TransactionDefinition definition)</strong> 方法来得到一个事务，这个方法里面的参数是 <strong>TransactionDefinition类</strong> ，这个类就定义了一些基本的事务属性。</p>\n<p><strong>那么什么是事务属性呢？</strong></p>\n<p>事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。事务属性包含了5个方面。 </p>\n<p><img src=\"http://wumu.sciento.cn/20190901203901.png\" alt=\"\"></p>\n<h3 id=\"TransactionDefinition接口中的方法如下：\"><a href=\"#TransactionDefinition接口中的方法如下：\" class=\"headerlink\" title=\"TransactionDefinition接口中的方法如下：\"></a>TransactionDefinition接口中的方法如下：</h3><p>TransactionDefinition接口中定义了5个方法以及一些表示事务属性的常量比如隔离级别、传播行为等等的常量。</p>\n<p>我下面只是列出了TransactionDefinition接口中的方法而没有给出接口中定义的常量，该接口中的常量信息会在后面依次介绍到。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TransactionDefinition</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回事务的传播行为</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPropagationBehavior</span><span class=\"params\">()</span></span>; </span><br><span class=\"line\">    <span class=\"comment\">// 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getIsolationLevel</span><span class=\"params\">()</span></span>; </span><br><span class=\"line\">    <span class=\"comment\">// 返回事务必须在多少秒内完成</span></span><br><span class=\"line\">    <span class=\"comment\">//返回事务的名字</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getName</span><span class=\"params\">()</span>；</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">int</span> <span class=\"title\">getTimeout</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">    <span class=\"comment\">// 返回是否优化为只读事务。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isReadOnly</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"TransactionStatus\"><a href=\"#TransactionStatus\" class=\"headerlink\" title=\"TransactionStatus\"></a>TransactionStatus</h2><p>PlatformTransactionManager.getTransaction(…) 方法返回一个 TransactionStatus 对象。返回的TransactionStatus 对象可能代表一个新的或已经存在的事务（如果在当前调用堆栈有一个符合条件的事务）。TransactionStatus 接口提供了一个简单的控制事务执行和查询事务状态的方法。该接口定义如清单3所示：</p>\n<h5 id=\"清单3-TransactionStatus-接口中定义的主要方法\"><a href=\"#清单3-TransactionStatus-接口中定义的主要方法\" class=\"headerlink\" title=\"清单3. TransactionStatus 接口中定义的主要方法\"></a>清单3. TransactionStatus 接口中定义的主要方法</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"keyword\">public</span>  <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TransactionStatus</span></span>&#123;``   ``<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isNewTransaction</span><span class=\"params\">()</span></span>;``   ``<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setRollbackOnly</span><span class=\"params\">()</span></span>;``   ``<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isRollbackOnly</span><span class=\"params\">()</span></span>;``&#125;`</span><br></pre></td></tr></table></figure>\n<h1 id=\"事务管理API分析\"><a href=\"#事务管理API分析\" class=\"headerlink\" title=\"事务管理API分析\"></a>事务管理API分析</h1><h2 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h2><p>隔离级别是指若干个并发的事务之间的隔离程度。TransactionDefinition 接口中定义了五个表示隔离级别的常量：</p>\n<ul>\n<li><p>TransactionDefinition.ISOLATION_DEFAULT：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是TransactionDefinition.ISOLATION_READ_COMMITTED。</p>\n</li>\n<li><p>TransactionDefinition.ISOLATION_READ_UNCOMMITTED：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读和不可重复读，因此很少使用该隔离级别。</p>\n</li>\n<li><p>TransactionDefinition.ISOLATION_READ_COMMITTED：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。</p>\n</li>\n<li><p>TransactionDefinition.ISOLATION_REPEATABLE_READ：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。即使在多次查询之间有新增的数据满足该查询，这些新增的记录也会被忽略。该级别可以防止脏读和不可重复读。</p>\n</li>\n<li><p>TransactionDefinition.ISOLATION_SERIALIZABLE：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</p>\n</li>\n</ul>\n<h2 id=\"事务传播行为\"><a href=\"#事务传播行为\" class=\"headerlink\" title=\"事务传播行为\"></a>事务传播行为</h2><p>所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：</p>\n<ul>\n<li>TransactionDefinition.PROPAGATION_REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li>\n<li>TransactionDefinition.PROPAGATION_REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li>\n<li>TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li>\n<li>TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li>\n<li>TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。</li>\n<li>TransactionDefinition.PROPAGATION_MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</li>\n<li>TransactionDefinition.PROPAGATION_NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</li>\n</ul>\n<p>这里需要指出的是，前面的六种事务传播行为是 Spring 从 EJB 中引入的，他们共享相同的概念。而 PROPAGATION_NESTED是 Spring 所特有的。以 PROPAGATION_NESTED 启动的事务内嵌于外部事务中（如果存在外部事务的话），此时，内嵌事务并不是一个独立的事务，它依赖于外部事务的存在，只有通过外部的事务提交，才能引起内部事务的提交，嵌套的子事务不能单独提交。如果熟悉 JDBC 中的保存点（SavePoint）的概念，那嵌套事务就很容易理解了，其实嵌套的子事务就是保存点的一个应用，一个事务中可以包括多个保存点，每一个嵌套子事务。另外，外部事务的回滚也会导致嵌套子事务的回滚。</p>\n<h2 id=\"事务超时\"><a href=\"#事务超时\" class=\"headerlink\" title=\"事务超时\"></a>事务超时</h2><p>所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。</p>\n<h2 id=\"事务的只读属性\"><a href=\"#事务的只读属性\" class=\"headerlink\" title=\"事务的只读属性\"></a>事务的只读属性</h2><p>事务的只读属性是指，对事务性资源进行只读操作或者是读写操作。所谓事务性资源就是指那些被事务管理的资源，比如数据源、 JMS 资源，以及自定义的事务性资源等等。如果确定只对事务性资源进行只读操作，那么我们可以将事务标志为只读的，以提高事务处理的性能。在 TransactionDefinition 中以 boolean 类型来表示该事务是否只读。</p>\n<p>应用场合：</p>\n<p>如果你一次执行单条查询语句，则没有必要启用事务支持，数据库默认支持SQL执行期间的读一致性；<br>如果你一次执行多条查询语句，例如统计查询，报表查询，在这种场景下，多条查询SQL必须保证整体的读一致性，否则，在前条SQL查询之后，后条SQL查询之前，数据被其他用户改变，则该次整体的统计查询将会出现读数据不一致的状态，此时，应该启用事务支持。<br>【注意是一次执行多次查询来统计某些信息，这时为了保证数据整体的一致性，要用只读事务】</p>\n<p>怎样设置：</p>\n<p>对于只读查询，可以指定事务类型为readonly，即只读事务。<br>由于只读事务不存在数据的修改，因此数据库将会为只读事务提供一些优化手段，例如Oracle对于只读事务，不启动回滚段，不记录回滚log。</p>\n<p>（1）在JDBC中，指定只读事务的办法为： connection.setReadOnly(true);</p>\n<p>（2）在Hibernate中，指定只读事务的办法为： session.setFlushMode(FlushMode.NEVER);<br>此时，Hibernate也会为只读事务提供Session方面的一些优化手段</p>\n<p>（3）在Spring的Hibernate封装中，指定只读事务的办法为： bean配置文件中，prop属性增加“readOnly”<br>或者用注解方式@Transactional(readOnly=true)<br>【 if the transaction is marked as read-only, Spring will set the Hibernate Session’s flush mode to FLUSH_NEVER,<br>and will set the JDBC transaction to read-only】也就是说在Spring中设置只读事务是利用上面两种方式</p>\n<h2 id=\"事务的回滚规则\"><a href=\"#事务的回滚规则\" class=\"headerlink\" title=\"事务的回滚规则\"></a>事务的回滚规则</h2><p>通常情况下，如果在事务中抛出了未检查异常（继承自 RuntimeException 的异常），则默认将回滚事务。如果没有抛出任何异常，或者抛出了已检查异常，则仍然提交事务。这通常也是大多数开发者希望的处理方式，也是 EJB 中的默认处理方式。但是，我们可以根据需要人为控制事务在抛出某些未检查异常时任然提交事务，或者在抛出某些已检查异常时回滚事务。</p>\n"},{"title":"lorawan协议","date":"2018-12-05T13:32:24.000Z","_content":"\n## Introduction\n\n------\n\nThe protocol between the gateway and the server is purposefully very basic and for demonstration purpose only, or for use on private and reliable networks.\n\nThere is no authentication of the gateway or the server, and the acknowledges are only used for network quality assessment, not to correct UDP datagrams losses (no retries).\n\n## System schematic and definitions\n\n------\n\n```\n ((( Y )))\n     |\n     |\n+ - -|- - - - - - - - - - - - - +        xxxxxxxxxxxx          +--------+\n| +--+-----------+     +------+ |       xx x  x     xxx        |        |\n| |              |     |      | |      xx  Internet  xx        |        |\n| | Concentrator |<--->| Host |<-------xx     or    xx-------->|        |\n| |              | SPI |      | |      xx  Intranet  xx        | Server |\n| +--------------+     +------+ |       xxxx   x   xxxx        |        |\n|    ^                     ^    |           xxxxxxxx           |        |\n|    | PPS +-------+ NMEA  |    |                              |        |\n|    +-----|  GPS  |-------+    |                              +--------+\n|          | (opt) |            |\n|          +-------+            |\n|                               |\n|             Gateway           |\n+- - - - - - - - - - - - - - - -+\n```\n\n**Concentrator**: radio RX/TX board, based on Semtech multichannel modems (SX130x), transceivers (SX135x) and/or low-power stand-alone modems (SX127x).\n\n**Host**: embedded computer on which the packet forwarder is run. Drives the concentrator through a SPI link.\n\n**GPS**: GNSS (GPS, Galileo, GLONASS, etc) receiver with a “1 Pulse Per Second” output and a serial link to the host to send NMEA frames containing time and geographical coordinates data. Optional.\n\n**Gateway**: a device composed of at least one radio concentrator, a host, some network connection to the internet or a private network (Ethernet, 3G, Wifi, microwave link), and optionally a GPS receiver for synchronization.\n\n**Server**: an abstract computer that will process the RF packets received and forwarded by the gateway, and issue RF packets in response that the gateway will have to emit.\n\nIt is assumed that the gateway can be behind a NAT or a firewall stopping any incoming connection. It is assumed that the server has an static IP address (or an address solvable through a DNS service) and is able to receive incoming connections on a specific port.\n\n## Upstream protocol\n\n------\n\n### Sequence diagram\n\n```\n+---------+                                                    +---------+\n| Gateway |                                                    | Server  |\n+---------+                                                    +---------+\n     | -----------------------------------\\                         |\n     |-| When 1-N RF packets are received |                         |\n     | ------------------------------------                         |\n     |                                                              |\n     | PUSH_DATA (token X, GW MAC, JSON payload)                    |\n     |------------------------------------------------------------->|\n     |                                                              |\n     |                                           PUSH_ACK (token X) |\n     |<-------------------------------------------------------------|\n     |                              ------------------------------\\ |\n     |                              | process packets *after* ack |-|\n     |                              ------------------------------- |\n     |                                                              |\n```\n\n### PUSH_DATA packet\n\nThat packet type is used by the gateway mainly to forward the RF packets received, and associated metadata, to the server.\n\n| Bytes  | Function                                                   |\n| ------ | ---------------------------------------------------------- |\n| 0      | protocol version = 2                                       |\n| 1-2    | random token                                               |\n| 3      | PUSH_DATA identifier 0x00                                  |\n| 4-11   | Gateway unique identifier (MAC address)                    |\n| 12-end | JSON object, starting with {, ending with }, see section 4 |\n\n### PUSH_ACK packet\n\nThat packet type is used by the server to acknowledge immediately all the PUSH_DATA packets received.\n\n| Bytes | Function                                          |\n| ----- | ------------------------------------------------- |\n| 0     | protocol version = 2                              |\n| 1-2   | same token as the PUSH_DATA packet to acknowledge |\n| 3     | PUSH_ACK identifier 0x01                          |\n\n## Upstream JSON data structure\n\n------\n\nThe root object can contain an array named “rxpk”:\n\n```\n{\n\t\"rxpk\":[ {...}, ...]\n}\n```\n\nThat array contains at least one JSON object, each object contain a RF packet and associated metadata with the following fields:\n\n| Name | Type   | Function                                                    |\n| ---- | ------ | ----------------------------------------------------------- |\n| time | string | UTC time of pkt RX, us precision, ISO 8601 ‘compact’ format |\n| tmst | number | Internal timestamp of “RX finished” event (32b unsigned)    |\n| freq | number | RX central frequency in MHz (unsigned float, Hz precision)  |\n| chan | number | Concentrator “IF” channel used for RX (unsigned integer)    |\n| rfch | number | Concentrator “RF chain” used for RX (unsigned integer)      |\n| stat | number | CRC status: 1 = OK, -1 = fail, 0 = no CRC                   |\n| modu | string | Modulation identifier “LORA” or “FSK”                       |\n| datr | string | LoRa datarate identifier (eg. SF12BW500)                    |\n| datr | number | FSK datarate (unsigned, in bits per second)                 |\n| codr | string | LoRa ECC coding rate identifier                             |\n| rssi | number | RSSI in dBm (signed integer, 1 dB precision)                |\n| lsnr | number | Lora SNR ratio in dB (signed float, 0.1 dB precision)       |\n| size | number | RF packet payload size in bytes (unsigned integer)          |\n| data | string | Base64 encoded RF packet payload, padded                    |\n\nExample (white-spaces, indentation and newlines added for readability):\n\n```\n{\"rxpk\":[\n\t{\n\t\t\"time\":\"2013-03-31T16:21:17.528002Z\",\n\t\t\"tmst\":3512348611,\n\t\t\"chan\":2,\n\t\t\"rfch\":0,\n\t\t\"freq\":866.349812,\n\t\t\"stat\":1,\n\t\t\"modu\":\"LORA\",\n\t\t\"datr\":\"SF7BW125\",\n\t\t\"codr\":\"4/6\",\n\t\t\"rssi\":-35,\n\t\t\"lsnr\":5.1,\n\t\t\"size\":32,\n\t\t\"data\":\"-DS4CGaDCdG+48eJNM3Vai-zDpsR71Pn9CPA9uCON84\"\n\t},{\n\t\t\"time\":\"2013-03-31T16:21:17.530974Z\",\n\t\t\"tmst\":3512348514,\n\t\t\"chan\":9,\n\t\t\"rfch\":1,\n\t\t\"freq\":869.1,\n\t\t\"stat\":1,\n\t\t\"modu\":\"FSK\",\n\t\t\"datr\":50000,\n\t\t\"rssi\":-75,\n\t\t\"size\":16,\n\t\t\"data\":\"VEVTVF9QQUNLRVRfMTIzNA==\"\n\t},{\n\t\t\"time\":\"2013-03-31T16:21:17.532038Z\",\n\t\t\"tmst\":3316387610,\n\t\t\"chan\":0,\n\t\t\"rfch\":0,\n\t\t\"freq\":863.00981,\n\t\t\"stat\":1,\n\t\t\"modu\":\"LORA\",\n\t\t\"datr\":\"SF10BW125\",\n\t\t\"codr\":\"4/7\",\n\t\t\"rssi\":-38,\n\t\t\"lsnr\":5.5,\n\t\t\"size\":32,\n\t\t\"data\":\"ysgRl452xNLep9S1NTIg2lomKDxUgn3DJ7DE+b00Ass\"\n\t}\n]}\n```\n\nThe root object can also contain an object named “stat” :\n\n```\n{\n\t\"rxpk\":[ {...}, ...],\n\t\"stat\":{...}\n}\n```\n\nIt is possible for a packet to contain no “rxpk” array but a “stat” object.\n\n```\n{\n\t\"stat\":{...}\n}\n```\n\nThat object contains the status of the gateway, with the following fields:\n\n| Name | Type   | Function                                                     |\n| ---- | ------ | ------------------------------------------------------------ |\n| time | string | UTC ‘system’ time of the gateway, ISO 8601 ‘expanded’ format |\n| lati | number | GPS latitude of the gateway in degree (float, N is +)        |\n| long | number | GPS latitude of the gateway in degree (float, E is +)        |\n| alti | number | GPS altitude of the gateway in meter RX (integer)            |\n| rxnb | number | Number of radio packets received (unsigned integer)          |\n| rxok | number | Number of radio packets received with a valid PHY CRC        |\n| rxfw | number | Number of radio packets forwarded (unsigned integer)         |\n| ackr | number | Percentage of upstream datagrams that were acknowledged      |\n| dwnb | number | Number of downlink datagrams received (unsigned integer)     |\n| txnb | number | Number of packets emitted (unsigned integer)                 |\n\nExample (white-spaces, indentation and newlines added for readability):\n\n```\n{\"stat\":{\n\t\"time\":\"2014-01-12 08:59:28 GMT\",\n\t\"lati\":46.24000,\n\t\"long\":3.25230,\n\t\"alti\":145,\n\t\"rxnb\":2,\n\t\"rxok\":2,\n\t\"rxfw\":2,\n\t\"ackr\":100.0,\n\t\"dwnb\":2,\n\t\"txnb\":2\n}}\n```\n\n## Downstream protocol\n\n------\n\n### Sequence diagram\n\n```\n+---------+                                                    +---------+\n| Gateway |                                                    | Server  |\n+---------+                                                    +---------+\n     | -----------------------------------\\                         |\n     |-| Every N seconds (keepalive time) |                         |\n     | ------------------------------------                         |\n     |                                                              |\n     | PULL_DATA (token Y, MAC@)                                    |\n     |------------------------------------------------------------->|\n     |                                                              |\n     |                                           PULL_ACK (token Y) |\n     |<-------------------------------------------------------------|\n     |                                                              |\n\n+---------+                                                    +---------+\n| Gateway |                                                    | Server  |\n+---------+                                                    +---------+\n     |      ------------------------------------------------------\\ |\n     |      | Anytime after first PULL_DATA for each packet to TX |-|\n     |      ------------------------------------------------------- |\n     |                                                              |\n     |                            PULL_RESP (token Z, JSON payload) |\n     |<-------------------------------------------------------------|\n     |                                                              |\n     | TX_ACK (token Z, JSON payload)                               |\n     |------------------------------------------------------------->|\n```\n\n### PULL_DATA packet\n\nThat packet type is used by the gateway to poll data from the server.\n\nThis data exchange is initialized by the gateway because it might be impossible for the server to send packets to the gateway if the gateway is behind a NAT.\n\nWhen the gateway initialize the exchange, the network route towards the server will open and will allow for packets to flow both directions. The gateway must periodically send PULL_DATA packets to be sure the network route stays open for the server to be used at any time.\n\n| Bytes | Function                                |\n| ----- | --------------------------------------- |\n| 0     | protocol version = 2                    |\n| 1-2   | random token                            |\n| 3     | PULL_DATA identifier 0x02               |\n| 4-11  | Gateway unique identifier (MAC address) |\n\n###  PULL_ACK packet\n\nThat packet type is used by the server to confirm that the network route is open and that the server can send PULL_RESP packets at any time.\n\n| Bytes | Function                                          |\n| ----- | ------------------------------------------------- |\n| 0     | protocol version = 2                              |\n| 1-2   | same token as the PULL_DATA packet to acknowledge |\n| 3     | PULL_ACK identifier 0x04                          |\n\n### PULL_RESP packet\n\nThat packet type is used by the server to send RF packets and associated metadata that will have to be emitted by the gateway.\n\n| Bytes | Function                                                   |\n| ----- | ---------------------------------------------------------- |\n| 0     | protocol version = 2                                       |\n| 1-2   | random token                                               |\n| 3     | PULL_RESP identifier 0x03                                  |\n| 4-end | JSON object, starting with {, ending with }, see section 6 |\n\n### TX_ACK packet\n\nThat packet type is used by the gateway to send a feedback to the server to inform if a downlink request has been accepted or rejected by the gateway. The datagram may optionnaly contain a JSON string to give more details on acknoledge. If no JSON is present (empty string), this means than no error occured.\n\n| Bytes  | Function                                                     |\n| ------ | ------------------------------------------------------------ |\n| 0      | protocol version = 2                                         |\n| 1-2    | same token as the PULL_RESP packet to acknowledge            |\n| 3      | TX_ACK identifier 0x05                                       |\n| 4-11   | Gateway unique identifier (MAC address)                      |\n| 12-end | [optional] JSON object, starting with {, ending with }, see section 6 |\n\n## Downstream JSON data structure\n\n------\n\nThe root object of PULL_RESP packet must contain an object named “txpk”:\n\n```\n{\n\t\"txpk\": {...}\n}\n```\n\nThat object contain a RF packet to be emitted and associated metadata with the following fields:\n\n| Name | Type   | Function                                                     |\n| ---- | ------ | ------------------------------------------------------------ |\n| imme | bool   | Send packet immediately (will ignore tmst & time)            |\n| tmst | number | Send packet on a certain timestamp value (will ignore time)  |\n| time | string | Send packet at a certain time (GPS synchronization required) |\n| freq | number | TX central frequency in MHz (unsigned float, Hz precision)   |\n| rfch | number | Concentrator “RF chain” used for TX (unsigned integer)       |\n| powe | number | TX output power in dBm (unsigned integer, dBm precision)     |\n| modu | string | Modulation identifier “LORA” or “FSK”                        |\n| datr | string | LoRa datarate identifier (eg. SF12BW500)                     |\n| datr | number | FSK datarate (unsigned, in bits per second)                  |\n| codr | string | LoRa ECC coding rate identifier                              |\n| fdev | number | FSK frequency deviation (unsigned integer, in Hz)            |\n| ipol | bool   | Lora modulation polarization inversion                       |\n| prea | number | RF preamble size (unsigned integer)                          |\n| size | number | RF packet payload size in bytes (unsigned integer)           |\n| data | string | Base64 encoded RF packet payload, padding optional           |\n| ncrc | bool   | If true, disable the CRC of the physical layer (optional)    |\n\nMost fields are optional. If a field is omitted, default parameters will be used.\n\nExamples (white-spaces, indentation and newlines added for readability):\n\n```\n{\"txpk\":{\n\t\"imme\":true,\n\t\"freq\":864.123456,\n\t\"rfch\":0,\n\t\"powe\":14,\n\t\"modu\":\"LORA\",\n\t\"datr\":\"SF11BW125\",\n\t\"codr\":\"4/6\",\n\t\"ipol\":false,\n\t\"size\":32,\n\t\"data\":\"H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v\"\n}}\n{\"txpk\":{\n\t\"imme\":true,\n\t\"freq\":861.3,\n\t\"rfch\":0,\n\t\"powe\":12,\n\t\"modu\":\"FSK\",\n\t\"datr\":50000,\n\t\"fdev\":3000,\n\t\"size\":32,\n\t\"data\":\"H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v\"\n}}\n```\n\nThe root object of TX_ACK packet must contain an object named “txpk_ack”:\n\n```\n{\n\t\"txpk_ack\": {...}\n}\n```\n\nThat object contain status information concerning the associated PULL_RESP packet.\n\n| Name  | Type   | Function                                                     |\n| ----- | ------ | ------------------------------------------------------------ |\n| error | string | Indication about success or type of failure that occured for downlink request. |\n\nThe possible values of “error” field are:\n\n| Value            | Definition                                                   |\n| ---------------- | ------------------------------------------------------------ |\n| NONE             | Packet has been programmed for downlink                      |\n| TOO_LATE         | Rejected because it was already too late to program this packet for downlink |\n| TOO_EARLY        | Rejected because downlink packet timestamp is too much in advance |\n| COLLISION_PACKET | Rejected because there was already a packet programmed in requested timeframe |\n| COLLISION_BEACON | Rejected because there was already a beacon planned in requested timeframe |\n| TX_FREQ          | Rejected because requested frequency is not supported by TX RF chain |\n| TX_POWER         | Rejected because requested power is not supported by gateway |\n| GPS_UNLOCKED     | Rejected because GPS is unlocked, so GPS timestamp cannot be used |\n\nExamples (white-spaces, indentation and newlines added for readability):\n\n```\n{\"txpk_ack\":{\n\t\"error\":\"COLLISION_PACKET\"\n}}\n```\n\n## Revisions\n\n------\n\n### v1.3\n\n- Added downlink feedback from gateway to server (PULL_RESP -> TX_ACK)\n\n### v1.2\n\n- Added value of FSK bitrate for upstream.\n- Added parameters for FSK bitrate and frequency deviation for downstream.\n\n### v1.1\n\n- Added syntax for status report JSON object on upstream.\n\n### v1.0\n\n- Initial version.","source":"_posts/lorawan协议.md","raw":"---\ntitle: lorawan协议\ndate: 2018-12-05 21:32:24\ntags:\n- lorawan\n---\n\n## Introduction\n\n------\n\nThe protocol between the gateway and the server is purposefully very basic and for demonstration purpose only, or for use on private and reliable networks.\n\nThere is no authentication of the gateway or the server, and the acknowledges are only used for network quality assessment, not to correct UDP datagrams losses (no retries).\n\n## System schematic and definitions\n\n------\n\n```\n ((( Y )))\n     |\n     |\n+ - -|- - - - - - - - - - - - - +        xxxxxxxxxxxx          +--------+\n| +--+-----------+     +------+ |       xx x  x     xxx        |        |\n| |              |     |      | |      xx  Internet  xx        |        |\n| | Concentrator |<--->| Host |<-------xx     or    xx-------->|        |\n| |              | SPI |      | |      xx  Intranet  xx        | Server |\n| +--------------+     +------+ |       xxxx   x   xxxx        |        |\n|    ^                     ^    |           xxxxxxxx           |        |\n|    | PPS +-------+ NMEA  |    |                              |        |\n|    +-----|  GPS  |-------+    |                              +--------+\n|          | (opt) |            |\n|          +-------+            |\n|                               |\n|             Gateway           |\n+- - - - - - - - - - - - - - - -+\n```\n\n**Concentrator**: radio RX/TX board, based on Semtech multichannel modems (SX130x), transceivers (SX135x) and/or low-power stand-alone modems (SX127x).\n\n**Host**: embedded computer on which the packet forwarder is run. Drives the concentrator through a SPI link.\n\n**GPS**: GNSS (GPS, Galileo, GLONASS, etc) receiver with a “1 Pulse Per Second” output and a serial link to the host to send NMEA frames containing time and geographical coordinates data. Optional.\n\n**Gateway**: a device composed of at least one radio concentrator, a host, some network connection to the internet or a private network (Ethernet, 3G, Wifi, microwave link), and optionally a GPS receiver for synchronization.\n\n**Server**: an abstract computer that will process the RF packets received and forwarded by the gateway, and issue RF packets in response that the gateway will have to emit.\n\nIt is assumed that the gateway can be behind a NAT or a firewall stopping any incoming connection. It is assumed that the server has an static IP address (or an address solvable through a DNS service) and is able to receive incoming connections on a specific port.\n\n## Upstream protocol\n\n------\n\n### Sequence diagram\n\n```\n+---------+                                                    +---------+\n| Gateway |                                                    | Server  |\n+---------+                                                    +---------+\n     | -----------------------------------\\                         |\n     |-| When 1-N RF packets are received |                         |\n     | ------------------------------------                         |\n     |                                                              |\n     | PUSH_DATA (token X, GW MAC, JSON payload)                    |\n     |------------------------------------------------------------->|\n     |                                                              |\n     |                                           PUSH_ACK (token X) |\n     |<-------------------------------------------------------------|\n     |                              ------------------------------\\ |\n     |                              | process packets *after* ack |-|\n     |                              ------------------------------- |\n     |                                                              |\n```\n\n### PUSH_DATA packet\n\nThat packet type is used by the gateway mainly to forward the RF packets received, and associated metadata, to the server.\n\n| Bytes  | Function                                                   |\n| ------ | ---------------------------------------------------------- |\n| 0      | protocol version = 2                                       |\n| 1-2    | random token                                               |\n| 3      | PUSH_DATA identifier 0x00                                  |\n| 4-11   | Gateway unique identifier (MAC address)                    |\n| 12-end | JSON object, starting with {, ending with }, see section 4 |\n\n### PUSH_ACK packet\n\nThat packet type is used by the server to acknowledge immediately all the PUSH_DATA packets received.\n\n| Bytes | Function                                          |\n| ----- | ------------------------------------------------- |\n| 0     | protocol version = 2                              |\n| 1-2   | same token as the PUSH_DATA packet to acknowledge |\n| 3     | PUSH_ACK identifier 0x01                          |\n\n## Upstream JSON data structure\n\n------\n\nThe root object can contain an array named “rxpk”:\n\n```\n{\n\t\"rxpk\":[ {...}, ...]\n}\n```\n\nThat array contains at least one JSON object, each object contain a RF packet and associated metadata with the following fields:\n\n| Name | Type   | Function                                                    |\n| ---- | ------ | ----------------------------------------------------------- |\n| time | string | UTC time of pkt RX, us precision, ISO 8601 ‘compact’ format |\n| tmst | number | Internal timestamp of “RX finished” event (32b unsigned)    |\n| freq | number | RX central frequency in MHz (unsigned float, Hz precision)  |\n| chan | number | Concentrator “IF” channel used for RX (unsigned integer)    |\n| rfch | number | Concentrator “RF chain” used for RX (unsigned integer)      |\n| stat | number | CRC status: 1 = OK, -1 = fail, 0 = no CRC                   |\n| modu | string | Modulation identifier “LORA” or “FSK”                       |\n| datr | string | LoRa datarate identifier (eg. SF12BW500)                    |\n| datr | number | FSK datarate (unsigned, in bits per second)                 |\n| codr | string | LoRa ECC coding rate identifier                             |\n| rssi | number | RSSI in dBm (signed integer, 1 dB precision)                |\n| lsnr | number | Lora SNR ratio in dB (signed float, 0.1 dB precision)       |\n| size | number | RF packet payload size in bytes (unsigned integer)          |\n| data | string | Base64 encoded RF packet payload, padded                    |\n\nExample (white-spaces, indentation and newlines added for readability):\n\n```\n{\"rxpk\":[\n\t{\n\t\t\"time\":\"2013-03-31T16:21:17.528002Z\",\n\t\t\"tmst\":3512348611,\n\t\t\"chan\":2,\n\t\t\"rfch\":0,\n\t\t\"freq\":866.349812,\n\t\t\"stat\":1,\n\t\t\"modu\":\"LORA\",\n\t\t\"datr\":\"SF7BW125\",\n\t\t\"codr\":\"4/6\",\n\t\t\"rssi\":-35,\n\t\t\"lsnr\":5.1,\n\t\t\"size\":32,\n\t\t\"data\":\"-DS4CGaDCdG+48eJNM3Vai-zDpsR71Pn9CPA9uCON84\"\n\t},{\n\t\t\"time\":\"2013-03-31T16:21:17.530974Z\",\n\t\t\"tmst\":3512348514,\n\t\t\"chan\":9,\n\t\t\"rfch\":1,\n\t\t\"freq\":869.1,\n\t\t\"stat\":1,\n\t\t\"modu\":\"FSK\",\n\t\t\"datr\":50000,\n\t\t\"rssi\":-75,\n\t\t\"size\":16,\n\t\t\"data\":\"VEVTVF9QQUNLRVRfMTIzNA==\"\n\t},{\n\t\t\"time\":\"2013-03-31T16:21:17.532038Z\",\n\t\t\"tmst\":3316387610,\n\t\t\"chan\":0,\n\t\t\"rfch\":0,\n\t\t\"freq\":863.00981,\n\t\t\"stat\":1,\n\t\t\"modu\":\"LORA\",\n\t\t\"datr\":\"SF10BW125\",\n\t\t\"codr\":\"4/7\",\n\t\t\"rssi\":-38,\n\t\t\"lsnr\":5.5,\n\t\t\"size\":32,\n\t\t\"data\":\"ysgRl452xNLep9S1NTIg2lomKDxUgn3DJ7DE+b00Ass\"\n\t}\n]}\n```\n\nThe root object can also contain an object named “stat” :\n\n```\n{\n\t\"rxpk\":[ {...}, ...],\n\t\"stat\":{...}\n}\n```\n\nIt is possible for a packet to contain no “rxpk” array but a “stat” object.\n\n```\n{\n\t\"stat\":{...}\n}\n```\n\nThat object contains the status of the gateway, with the following fields:\n\n| Name | Type   | Function                                                     |\n| ---- | ------ | ------------------------------------------------------------ |\n| time | string | UTC ‘system’ time of the gateway, ISO 8601 ‘expanded’ format |\n| lati | number | GPS latitude of the gateway in degree (float, N is +)        |\n| long | number | GPS latitude of the gateway in degree (float, E is +)        |\n| alti | number | GPS altitude of the gateway in meter RX (integer)            |\n| rxnb | number | Number of radio packets received (unsigned integer)          |\n| rxok | number | Number of radio packets received with a valid PHY CRC        |\n| rxfw | number | Number of radio packets forwarded (unsigned integer)         |\n| ackr | number | Percentage of upstream datagrams that were acknowledged      |\n| dwnb | number | Number of downlink datagrams received (unsigned integer)     |\n| txnb | number | Number of packets emitted (unsigned integer)                 |\n\nExample (white-spaces, indentation and newlines added for readability):\n\n```\n{\"stat\":{\n\t\"time\":\"2014-01-12 08:59:28 GMT\",\n\t\"lati\":46.24000,\n\t\"long\":3.25230,\n\t\"alti\":145,\n\t\"rxnb\":2,\n\t\"rxok\":2,\n\t\"rxfw\":2,\n\t\"ackr\":100.0,\n\t\"dwnb\":2,\n\t\"txnb\":2\n}}\n```\n\n## Downstream protocol\n\n------\n\n### Sequence diagram\n\n```\n+---------+                                                    +---------+\n| Gateway |                                                    | Server  |\n+---------+                                                    +---------+\n     | -----------------------------------\\                         |\n     |-| Every N seconds (keepalive time) |                         |\n     | ------------------------------------                         |\n     |                                                              |\n     | PULL_DATA (token Y, MAC@)                                    |\n     |------------------------------------------------------------->|\n     |                                                              |\n     |                                           PULL_ACK (token Y) |\n     |<-------------------------------------------------------------|\n     |                                                              |\n\n+---------+                                                    +---------+\n| Gateway |                                                    | Server  |\n+---------+                                                    +---------+\n     |      ------------------------------------------------------\\ |\n     |      | Anytime after first PULL_DATA for each packet to TX |-|\n     |      ------------------------------------------------------- |\n     |                                                              |\n     |                            PULL_RESP (token Z, JSON payload) |\n     |<-------------------------------------------------------------|\n     |                                                              |\n     | TX_ACK (token Z, JSON payload)                               |\n     |------------------------------------------------------------->|\n```\n\n### PULL_DATA packet\n\nThat packet type is used by the gateway to poll data from the server.\n\nThis data exchange is initialized by the gateway because it might be impossible for the server to send packets to the gateway if the gateway is behind a NAT.\n\nWhen the gateway initialize the exchange, the network route towards the server will open and will allow for packets to flow both directions. The gateway must periodically send PULL_DATA packets to be sure the network route stays open for the server to be used at any time.\n\n| Bytes | Function                                |\n| ----- | --------------------------------------- |\n| 0     | protocol version = 2                    |\n| 1-2   | random token                            |\n| 3     | PULL_DATA identifier 0x02               |\n| 4-11  | Gateway unique identifier (MAC address) |\n\n###  PULL_ACK packet\n\nThat packet type is used by the server to confirm that the network route is open and that the server can send PULL_RESP packets at any time.\n\n| Bytes | Function                                          |\n| ----- | ------------------------------------------------- |\n| 0     | protocol version = 2                              |\n| 1-2   | same token as the PULL_DATA packet to acknowledge |\n| 3     | PULL_ACK identifier 0x04                          |\n\n### PULL_RESP packet\n\nThat packet type is used by the server to send RF packets and associated metadata that will have to be emitted by the gateway.\n\n| Bytes | Function                                                   |\n| ----- | ---------------------------------------------------------- |\n| 0     | protocol version = 2                                       |\n| 1-2   | random token                                               |\n| 3     | PULL_RESP identifier 0x03                                  |\n| 4-end | JSON object, starting with {, ending with }, see section 6 |\n\n### TX_ACK packet\n\nThat packet type is used by the gateway to send a feedback to the server to inform if a downlink request has been accepted or rejected by the gateway. The datagram may optionnaly contain a JSON string to give more details on acknoledge. If no JSON is present (empty string), this means than no error occured.\n\n| Bytes  | Function                                                     |\n| ------ | ------------------------------------------------------------ |\n| 0      | protocol version = 2                                         |\n| 1-2    | same token as the PULL_RESP packet to acknowledge            |\n| 3      | TX_ACK identifier 0x05                                       |\n| 4-11   | Gateway unique identifier (MAC address)                      |\n| 12-end | [optional] JSON object, starting with {, ending with }, see section 6 |\n\n## Downstream JSON data structure\n\n------\n\nThe root object of PULL_RESP packet must contain an object named “txpk”:\n\n```\n{\n\t\"txpk\": {...}\n}\n```\n\nThat object contain a RF packet to be emitted and associated metadata with the following fields:\n\n| Name | Type   | Function                                                     |\n| ---- | ------ | ------------------------------------------------------------ |\n| imme | bool   | Send packet immediately (will ignore tmst & time)            |\n| tmst | number | Send packet on a certain timestamp value (will ignore time)  |\n| time | string | Send packet at a certain time (GPS synchronization required) |\n| freq | number | TX central frequency in MHz (unsigned float, Hz precision)   |\n| rfch | number | Concentrator “RF chain” used for TX (unsigned integer)       |\n| powe | number | TX output power in dBm (unsigned integer, dBm precision)     |\n| modu | string | Modulation identifier “LORA” or “FSK”                        |\n| datr | string | LoRa datarate identifier (eg. SF12BW500)                     |\n| datr | number | FSK datarate (unsigned, in bits per second)                  |\n| codr | string | LoRa ECC coding rate identifier                              |\n| fdev | number | FSK frequency deviation (unsigned integer, in Hz)            |\n| ipol | bool   | Lora modulation polarization inversion                       |\n| prea | number | RF preamble size (unsigned integer)                          |\n| size | number | RF packet payload size in bytes (unsigned integer)           |\n| data | string | Base64 encoded RF packet payload, padding optional           |\n| ncrc | bool   | If true, disable the CRC of the physical layer (optional)    |\n\nMost fields are optional. If a field is omitted, default parameters will be used.\n\nExamples (white-spaces, indentation and newlines added for readability):\n\n```\n{\"txpk\":{\n\t\"imme\":true,\n\t\"freq\":864.123456,\n\t\"rfch\":0,\n\t\"powe\":14,\n\t\"modu\":\"LORA\",\n\t\"datr\":\"SF11BW125\",\n\t\"codr\":\"4/6\",\n\t\"ipol\":false,\n\t\"size\":32,\n\t\"data\":\"H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v\"\n}}\n{\"txpk\":{\n\t\"imme\":true,\n\t\"freq\":861.3,\n\t\"rfch\":0,\n\t\"powe\":12,\n\t\"modu\":\"FSK\",\n\t\"datr\":50000,\n\t\"fdev\":3000,\n\t\"size\":32,\n\t\"data\":\"H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v\"\n}}\n```\n\nThe root object of TX_ACK packet must contain an object named “txpk_ack”:\n\n```\n{\n\t\"txpk_ack\": {...}\n}\n```\n\nThat object contain status information concerning the associated PULL_RESP packet.\n\n| Name  | Type   | Function                                                     |\n| ----- | ------ | ------------------------------------------------------------ |\n| error | string | Indication about success or type of failure that occured for downlink request. |\n\nThe possible values of “error” field are:\n\n| Value            | Definition                                                   |\n| ---------------- | ------------------------------------------------------------ |\n| NONE             | Packet has been programmed for downlink                      |\n| TOO_LATE         | Rejected because it was already too late to program this packet for downlink |\n| TOO_EARLY        | Rejected because downlink packet timestamp is too much in advance |\n| COLLISION_PACKET | Rejected because there was already a packet programmed in requested timeframe |\n| COLLISION_BEACON | Rejected because there was already a beacon planned in requested timeframe |\n| TX_FREQ          | Rejected because requested frequency is not supported by TX RF chain |\n| TX_POWER         | Rejected because requested power is not supported by gateway |\n| GPS_UNLOCKED     | Rejected because GPS is unlocked, so GPS timestamp cannot be used |\n\nExamples (white-spaces, indentation and newlines added for readability):\n\n```\n{\"txpk_ack\":{\n\t\"error\":\"COLLISION_PACKET\"\n}}\n```\n\n## Revisions\n\n------\n\n### v1.3\n\n- Added downlink feedback from gateway to server (PULL_RESP -> TX_ACK)\n\n### v1.2\n\n- Added value of FSK bitrate for upstream.\n- Added parameters for FSK bitrate and frequency deviation for downstream.\n\n### v1.1\n\n- Added syntax for status report JSON object on upstream.\n\n### v1.0\n\n- Initial version.","slug":"lorawan协议","published":1,"updated":"2019-10-14T09:01:07.716Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a43j002uic1y86o30dto","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><hr>\n<p>The protocol between the gateway and the server is purposefully very basic and for demonstration purpose only, or for use on private and reliable networks.</p>\n<p>There is no authentication of the gateway or the server, and the acknowledges are only used for network quality assessment, not to correct UDP datagrams losses (no retries).</p>\n<h2 id=\"System-schematic-and-definitions\"><a href=\"#System-schematic-and-definitions\" class=\"headerlink\" title=\"System schematic and definitions\"></a>System schematic and definitions</h2><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ((( Y )))</span><br><span class=\"line\">     |</span><br><span class=\"line\">     |</span><br><span class=\"line\">+ - -|- - - - - - - - - - - - - +        xxxxxxxxxxxx          +--------+</span><br><span class=\"line\">| +--+-----------+     +------+ |       xx x  x     xxx        |        |</span><br><span class=\"line\">| |              |     |      | |      xx  Internet  xx        |        |</span><br><span class=\"line\">| | Concentrator |&lt;---&gt;| Host |&lt;-------xx     or    xx--------&gt;|        |</span><br><span class=\"line\">| |              | SPI |      | |      xx  Intranet  xx        | Server |</span><br><span class=\"line\">| +--------------+     +------+ |       xxxx   x   xxxx        |        |</span><br><span class=\"line\">|    ^                     ^    |           xxxxxxxx           |        |</span><br><span class=\"line\">|    | PPS +-------+ NMEA  |    |                              |        |</span><br><span class=\"line\">|    +-----|  GPS  |-------+    |                              +--------+</span><br><span class=\"line\">|          | (opt) |            |</span><br><span class=\"line\">|          +-------+            |</span><br><span class=\"line\">|                               |</span><br><span class=\"line\">|             Gateway           |</span><br><span class=\"line\">+- - - - - - - - - - - - - - - -+</span><br></pre></td></tr></table></figure>\n<p><strong>Concentrator</strong>: radio RX/TX board, based on Semtech multichannel modems (SX130x), transceivers (SX135x) and/or low-power stand-alone modems (SX127x).</p>\n<p><strong>Host</strong>: embedded computer on which the packet forwarder is run. Drives the concentrator through a SPI link.</p>\n<p><strong>GPS</strong>: GNSS (GPS, Galileo, GLONASS, etc) receiver with a “1 Pulse Per Second” output and a serial link to the host to send NMEA frames containing time and geographical coordinates data. Optional.</p>\n<p><strong>Gateway</strong>: a device composed of at least one radio concentrator, a host, some network connection to the internet or a private network (Ethernet, 3G, Wifi, microwave link), and optionally a GPS receiver for synchronization.</p>\n<p><strong>Server</strong>: an abstract computer that will process the RF packets received and forwarded by the gateway, and issue RF packets in response that the gateway will have to emit.</p>\n<p>It is assumed that the gateway can be behind a NAT or a firewall stopping any incoming connection. It is assumed that the server has an static IP address (or an address solvable through a DNS service) and is able to receive incoming connections on a specific port.</p>\n<h2 id=\"Upstream-protocol\"><a href=\"#Upstream-protocol\" class=\"headerlink\" title=\"Upstream protocol\"></a>Upstream protocol</h2><hr>\n<h3 id=\"Sequence-diagram\"><a href=\"#Sequence-diagram\" class=\"headerlink\" title=\"Sequence diagram\"></a>Sequence diagram</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">| Gateway |                                                    | Server  |</span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">     | -----------------------------------\\                         |</span><br><span class=\"line\">     |-| When 1-N RF packets are received |                         |</span><br><span class=\"line\">     | ------------------------------------                         |</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     | PUSH_DATA (token X, GW MAC, JSON payload)                    |</span><br><span class=\"line\">     |-------------------------------------------------------------&gt;|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     |                                           PUSH_ACK (token X) |</span><br><span class=\"line\">     |&lt;-------------------------------------------------------------|</span><br><span class=\"line\">     |                              ------------------------------\\ |</span><br><span class=\"line\">     |                              | process packets *after* ack |-|</span><br><span class=\"line\">     |                              ------------------------------- |</span><br><span class=\"line\">     |                                                              |</span><br></pre></td></tr></table></figure>\n<h3 id=\"PUSH-DATA-packet\"><a href=\"#PUSH-DATA-packet\" class=\"headerlink\" title=\"PUSH_DATA packet\"></a>PUSH_DATA packet</h3><p>That packet type is used by the gateway mainly to forward the RF packets received, and associated metadata, to the server.</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>random token</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PUSH_DATA identifier 0x00</td>\n</tr>\n<tr>\n<td>4-11</td>\n<td>Gateway unique identifier (MAC address)</td>\n</tr>\n<tr>\n<td>12-end</td>\n<td>JSON object, starting with {, ending with }, see section 4</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"PUSH-ACK-packet\"><a href=\"#PUSH-ACK-packet\" class=\"headerlink\" title=\"PUSH_ACK packet\"></a>PUSH_ACK packet</h3><p>That packet type is used by the server to acknowledge immediately all the PUSH_DATA packets received.</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>same token as the PUSH_DATA packet to acknowledge</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PUSH_ACK identifier 0x01</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Upstream-JSON-data-structure\"><a href=\"#Upstream-JSON-data-structure\" class=\"headerlink\" title=\"Upstream JSON data structure\"></a>Upstream JSON data structure</h2><hr>\n<p>The root object can contain an array named “rxpk”:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;rxpk&quot;:[ &#123;...&#125;, ...]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>That array contains at least one JSON object, each object contain a RF packet and associated metadata with the following fields:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>time</td>\n<td>string</td>\n<td>UTC time of pkt RX, us precision, ISO 8601 ‘compact’ format</td>\n</tr>\n<tr>\n<td>tmst</td>\n<td>number</td>\n<td>Internal timestamp of “RX finished” event (32b unsigned)</td>\n</tr>\n<tr>\n<td>freq</td>\n<td>number</td>\n<td>RX central frequency in MHz (unsigned float, Hz precision)</td>\n</tr>\n<tr>\n<td>chan</td>\n<td>number</td>\n<td>Concentrator “IF” channel used for RX (unsigned integer)</td>\n</tr>\n<tr>\n<td>rfch</td>\n<td>number</td>\n<td>Concentrator “RF chain” used for RX (unsigned integer)</td>\n</tr>\n<tr>\n<td>stat</td>\n<td>number</td>\n<td>CRC status: 1 = OK, -1 = fail, 0 = no CRC</td>\n</tr>\n<tr>\n<td>modu</td>\n<td>string</td>\n<td>Modulation identifier “LORA” or “FSK”</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>string</td>\n<td>LoRa datarate identifier (eg. SF12BW500)</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>number</td>\n<td>FSK datarate (unsigned, in bits per second)</td>\n</tr>\n<tr>\n<td>codr</td>\n<td>string</td>\n<td>LoRa ECC coding rate identifier</td>\n</tr>\n<tr>\n<td>rssi</td>\n<td>number</td>\n<td>RSSI in dBm (signed integer, 1 dB precision)</td>\n</tr>\n<tr>\n<td>lsnr</td>\n<td>number</td>\n<td>Lora SNR ratio in dB (signed float, 0.1 dB precision)</td>\n</tr>\n<tr>\n<td>size</td>\n<td>number</td>\n<td>RF packet payload size in bytes (unsigned integer)</td>\n</tr>\n<tr>\n<td>data</td>\n<td>string</td>\n<td>Base64 encoded RF packet payload, padded</td>\n</tr>\n</tbody>\n</table>\n<p>Example (white-spaces, indentation and newlines added for readability):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;rxpk&quot;:[</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t&quot;time&quot;:&quot;2013-03-31T16:21:17.528002Z&quot;,</span><br><span class=\"line\">\t\t&quot;tmst&quot;:3512348611,</span><br><span class=\"line\">\t\t&quot;chan&quot;:2,</span><br><span class=\"line\">\t\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t\t&quot;freq&quot;:866.349812,</span><br><span class=\"line\">\t\t&quot;stat&quot;:1,</span><br><span class=\"line\">\t\t&quot;modu&quot;:&quot;LORA&quot;,</span><br><span class=\"line\">\t\t&quot;datr&quot;:&quot;SF7BW125&quot;,</span><br><span class=\"line\">\t\t&quot;codr&quot;:&quot;4/6&quot;,</span><br><span class=\"line\">\t\t&quot;rssi&quot;:-35,</span><br><span class=\"line\">\t\t&quot;lsnr&quot;:5.1,</span><br><span class=\"line\">\t\t&quot;size&quot;:32,</span><br><span class=\"line\">\t\t&quot;data&quot;:&quot;-DS4CGaDCdG+48eJNM3Vai-zDpsR71Pn9CPA9uCON84&quot;</span><br><span class=\"line\">\t&#125;,&#123;</span><br><span class=\"line\">\t\t&quot;time&quot;:&quot;2013-03-31T16:21:17.530974Z&quot;,</span><br><span class=\"line\">\t\t&quot;tmst&quot;:3512348514,</span><br><span class=\"line\">\t\t&quot;chan&quot;:9,</span><br><span class=\"line\">\t\t&quot;rfch&quot;:1,</span><br><span class=\"line\">\t\t&quot;freq&quot;:869.1,</span><br><span class=\"line\">\t\t&quot;stat&quot;:1,</span><br><span class=\"line\">\t\t&quot;modu&quot;:&quot;FSK&quot;,</span><br><span class=\"line\">\t\t&quot;datr&quot;:50000,</span><br><span class=\"line\">\t\t&quot;rssi&quot;:-75,</span><br><span class=\"line\">\t\t&quot;size&quot;:16,</span><br><span class=\"line\">\t\t&quot;data&quot;:&quot;VEVTVF9QQUNLRVRfMTIzNA==&quot;</span><br><span class=\"line\">\t&#125;,&#123;</span><br><span class=\"line\">\t\t&quot;time&quot;:&quot;2013-03-31T16:21:17.532038Z&quot;,</span><br><span class=\"line\">\t\t&quot;tmst&quot;:3316387610,</span><br><span class=\"line\">\t\t&quot;chan&quot;:0,</span><br><span class=\"line\">\t\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t\t&quot;freq&quot;:863.00981,</span><br><span class=\"line\">\t\t&quot;stat&quot;:1,</span><br><span class=\"line\">\t\t&quot;modu&quot;:&quot;LORA&quot;,</span><br><span class=\"line\">\t\t&quot;datr&quot;:&quot;SF10BW125&quot;,</span><br><span class=\"line\">\t\t&quot;codr&quot;:&quot;4/7&quot;,</span><br><span class=\"line\">\t\t&quot;rssi&quot;:-38,</span><br><span class=\"line\">\t\t&quot;lsnr&quot;:5.5,</span><br><span class=\"line\">\t\t&quot;size&quot;:32,</span><br><span class=\"line\">\t\t&quot;data&quot;:&quot;ysgRl452xNLep9S1NTIg2lomKDxUgn3DJ7DE+b00Ass&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">]&#125;</span><br></pre></td></tr></table></figure>\n<p>The root object can also contain an object named “stat” :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;rxpk&quot;:[ &#123;...&#125;, ...],</span><br><span class=\"line\">\t&quot;stat&quot;:&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>It is possible for a packet to contain no “rxpk” array but a “stat” object.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;stat&quot;:&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>That object contains the status of the gateway, with the following fields:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>time</td>\n<td>string</td>\n<td>UTC ‘system’ time of the gateway, ISO 8601 ‘expanded’ format</td>\n</tr>\n<tr>\n<td>lati</td>\n<td>number</td>\n<td>GPS latitude of the gateway in degree (float, N is +)</td>\n</tr>\n<tr>\n<td>long</td>\n<td>number</td>\n<td>GPS latitude of the gateway in degree (float, E is +)</td>\n</tr>\n<tr>\n<td>alti</td>\n<td>number</td>\n<td>GPS altitude of the gateway in meter RX (integer)</td>\n</tr>\n<tr>\n<td>rxnb</td>\n<td>number</td>\n<td>Number of radio packets received (unsigned integer)</td>\n</tr>\n<tr>\n<td>rxok</td>\n<td>number</td>\n<td>Number of radio packets received with a valid PHY CRC</td>\n</tr>\n<tr>\n<td>rxfw</td>\n<td>number</td>\n<td>Number of radio packets forwarded (unsigned integer)</td>\n</tr>\n<tr>\n<td>ackr</td>\n<td>number</td>\n<td>Percentage of upstream datagrams that were acknowledged</td>\n</tr>\n<tr>\n<td>dwnb</td>\n<td>number</td>\n<td>Number of downlink datagrams received (unsigned integer)</td>\n</tr>\n<tr>\n<td>txnb</td>\n<td>number</td>\n<td>Number of packets emitted (unsigned integer)</td>\n</tr>\n</tbody>\n</table>\n<p>Example (white-spaces, indentation and newlines added for readability):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;stat&quot;:&#123;</span><br><span class=\"line\">\t&quot;time&quot;:&quot;2014-01-12 08:59:28 GMT&quot;,</span><br><span class=\"line\">\t&quot;lati&quot;:46.24000,</span><br><span class=\"line\">\t&quot;long&quot;:3.25230,</span><br><span class=\"line\">\t&quot;alti&quot;:145,</span><br><span class=\"line\">\t&quot;rxnb&quot;:2,</span><br><span class=\"line\">\t&quot;rxok&quot;:2,</span><br><span class=\"line\">\t&quot;rxfw&quot;:2,</span><br><span class=\"line\">\t&quot;ackr&quot;:100.0,</span><br><span class=\"line\">\t&quot;dwnb&quot;:2,</span><br><span class=\"line\">\t&quot;txnb&quot;:2</span><br><span class=\"line\">&#125;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Downstream-protocol\"><a href=\"#Downstream-protocol\" class=\"headerlink\" title=\"Downstream protocol\"></a>Downstream protocol</h2><hr>\n<h3 id=\"Sequence-diagram-1\"><a href=\"#Sequence-diagram-1\" class=\"headerlink\" title=\"Sequence diagram\"></a>Sequence diagram</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">| Gateway |                                                    | Server  |</span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">     | -----------------------------------\\                         |</span><br><span class=\"line\">     |-| Every N seconds (keepalive time) |                         |</span><br><span class=\"line\">     | ------------------------------------                         |</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     | PULL_DATA (token Y, MAC@)                                    |</span><br><span class=\"line\">     |-------------------------------------------------------------&gt;|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     |                                           PULL_ACK (token Y) |</span><br><span class=\"line\">     |&lt;-------------------------------------------------------------|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\"></span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">| Gateway |                                                    | Server  |</span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">     |      ------------------------------------------------------\\ |</span><br><span class=\"line\">     |      | Anytime after first PULL_DATA for each packet to TX |-|</span><br><span class=\"line\">     |      ------------------------------------------------------- |</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     |                            PULL_RESP (token Z, JSON payload) |</span><br><span class=\"line\">     |&lt;-------------------------------------------------------------|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     | TX_ACK (token Z, JSON payload)                               |</span><br><span class=\"line\">     |-------------------------------------------------------------&gt;|</span><br></pre></td></tr></table></figure>\n<h3 id=\"PULL-DATA-packet\"><a href=\"#PULL-DATA-packet\" class=\"headerlink\" title=\"PULL_DATA packet\"></a>PULL_DATA packet</h3><p>That packet type is used by the gateway to poll data from the server.</p>\n<p>This data exchange is initialized by the gateway because it might be impossible for the server to send packets to the gateway if the gateway is behind a NAT.</p>\n<p>When the gateway initialize the exchange, the network route towards the server will open and will allow for packets to flow both directions. The gateway must periodically send PULL_DATA packets to be sure the network route stays open for the server to be used at any time.</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>random token</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PULL_DATA identifier 0x02</td>\n</tr>\n<tr>\n<td>4-11</td>\n<td>Gateway unique identifier (MAC address)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"PULL-ACK-packet\"><a href=\"#PULL-ACK-packet\" class=\"headerlink\" title=\"PULL_ACK packet\"></a>PULL_ACK packet</h3><p>That packet type is used by the server to confirm that the network route is open and that the server can send PULL_RESP packets at any time.</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>same token as the PULL_DATA packet to acknowledge</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PULL_ACK identifier 0x04</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"PULL-RESP-packet\"><a href=\"#PULL-RESP-packet\" class=\"headerlink\" title=\"PULL_RESP packet\"></a>PULL_RESP packet</h3><p>That packet type is used by the server to send RF packets and associated metadata that will have to be emitted by the gateway.</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>random token</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PULL_RESP identifier 0x03</td>\n</tr>\n<tr>\n<td>4-end</td>\n<td>JSON object, starting with {, ending with }, see section 6</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"TX-ACK-packet\"><a href=\"#TX-ACK-packet\" class=\"headerlink\" title=\"TX_ACK packet\"></a>TX_ACK packet</h3><p>That packet type is used by the gateway to send a feedback to the server to inform if a downlink request has been accepted or rejected by the gateway. The datagram may optionnaly contain a JSON string to give more details on acknoledge. If no JSON is present (empty string), this means than no error occured.</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>same token as the PULL_RESP packet to acknowledge</td>\n</tr>\n<tr>\n<td>3</td>\n<td>TX_ACK identifier 0x05</td>\n</tr>\n<tr>\n<td>4-11</td>\n<td>Gateway unique identifier (MAC address)</td>\n</tr>\n<tr>\n<td>12-end</td>\n<td>[optional] JSON object, starting with {, ending with }, see section 6</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Downstream-JSON-data-structure\"><a href=\"#Downstream-JSON-data-structure\" class=\"headerlink\" title=\"Downstream JSON data structure\"></a>Downstream JSON data structure</h2><hr>\n<p>The root object of PULL_RESP packet must contain an object named “txpk”:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;txpk&quot;: &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>That object contain a RF packet to be emitted and associated metadata with the following fields:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>imme</td>\n<td>bool</td>\n<td>Send packet immediately (will ignore tmst &amp; time)</td>\n</tr>\n<tr>\n<td>tmst</td>\n<td>number</td>\n<td>Send packet on a certain timestamp value (will ignore time)</td>\n</tr>\n<tr>\n<td>time</td>\n<td>string</td>\n<td>Send packet at a certain time (GPS synchronization required)</td>\n</tr>\n<tr>\n<td>freq</td>\n<td>number</td>\n<td>TX central frequency in MHz (unsigned float, Hz precision)</td>\n</tr>\n<tr>\n<td>rfch</td>\n<td>number</td>\n<td>Concentrator “RF chain” used for TX (unsigned integer)</td>\n</tr>\n<tr>\n<td>powe</td>\n<td>number</td>\n<td>TX output power in dBm (unsigned integer, dBm precision)</td>\n</tr>\n<tr>\n<td>modu</td>\n<td>string</td>\n<td>Modulation identifier “LORA” or “FSK”</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>string</td>\n<td>LoRa datarate identifier (eg. SF12BW500)</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>number</td>\n<td>FSK datarate (unsigned, in bits per second)</td>\n</tr>\n<tr>\n<td>codr</td>\n<td>string</td>\n<td>LoRa ECC coding rate identifier</td>\n</tr>\n<tr>\n<td>fdev</td>\n<td>number</td>\n<td>FSK frequency deviation (unsigned integer, in Hz)</td>\n</tr>\n<tr>\n<td>ipol</td>\n<td>bool</td>\n<td>Lora modulation polarization inversion</td>\n</tr>\n<tr>\n<td>prea</td>\n<td>number</td>\n<td>RF preamble size (unsigned integer)</td>\n</tr>\n<tr>\n<td>size</td>\n<td>number</td>\n<td>RF packet payload size in bytes (unsigned integer)</td>\n</tr>\n<tr>\n<td>data</td>\n<td>string</td>\n<td>Base64 encoded RF packet payload, padding optional</td>\n</tr>\n<tr>\n<td>ncrc</td>\n<td>bool</td>\n<td>If true, disable the CRC of the physical layer (optional)</td>\n</tr>\n</tbody>\n</table>\n<p>Most fields are optional. If a field is omitted, default parameters will be used.</p>\n<p>Examples (white-spaces, indentation and newlines added for readability):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;txpk&quot;:&#123;</span><br><span class=\"line\">\t&quot;imme&quot;:true,</span><br><span class=\"line\">\t&quot;freq&quot;:864.123456,</span><br><span class=\"line\">\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t&quot;powe&quot;:14,</span><br><span class=\"line\">\t&quot;modu&quot;:&quot;LORA&quot;,</span><br><span class=\"line\">\t&quot;datr&quot;:&quot;SF11BW125&quot;,</span><br><span class=\"line\">\t&quot;codr&quot;:&quot;4/6&quot;,</span><br><span class=\"line\">\t&quot;ipol&quot;:false,</span><br><span class=\"line\">\t&quot;size&quot;:32,</span><br><span class=\"line\">\t&quot;data&quot;:&quot;H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v&quot;</span><br><span class=\"line\">&#125;&#125;</span><br><span class=\"line\">&#123;&quot;txpk&quot;:&#123;</span><br><span class=\"line\">\t&quot;imme&quot;:true,</span><br><span class=\"line\">\t&quot;freq&quot;:861.3,</span><br><span class=\"line\">\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t&quot;powe&quot;:12,</span><br><span class=\"line\">\t&quot;modu&quot;:&quot;FSK&quot;,</span><br><span class=\"line\">\t&quot;datr&quot;:50000,</span><br><span class=\"line\">\t&quot;fdev&quot;:3000,</span><br><span class=\"line\">\t&quot;size&quot;:32,</span><br><span class=\"line\">\t&quot;data&quot;:&quot;H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v&quot;</span><br><span class=\"line\">&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>The root object of TX_ACK packet must contain an object named “txpk_ack”:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;txpk_ack&quot;: &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>That object contain status information concerning the associated PULL_RESP packet.</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>error</td>\n<td>string</td>\n<td>Indication about success or type of failure that occured for downlink request.</td>\n</tr>\n</tbody>\n</table>\n<p>The possible values of “error” field are:</p>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NONE</td>\n<td>Packet has been programmed for downlink</td>\n</tr>\n<tr>\n<td>TOO_LATE</td>\n<td>Rejected because it was already too late to program this packet for downlink</td>\n</tr>\n<tr>\n<td>TOO_EARLY</td>\n<td>Rejected because downlink packet timestamp is too much in advance</td>\n</tr>\n<tr>\n<td>COLLISION_PACKET</td>\n<td>Rejected because there was already a packet programmed in requested timeframe</td>\n</tr>\n<tr>\n<td>COLLISION_BEACON</td>\n<td>Rejected because there was already a beacon planned in requested timeframe</td>\n</tr>\n<tr>\n<td>TX_FREQ</td>\n<td>Rejected because requested frequency is not supported by TX RF chain</td>\n</tr>\n<tr>\n<td>TX_POWER</td>\n<td>Rejected because requested power is not supported by gateway</td>\n</tr>\n<tr>\n<td>GPS_UNLOCKED</td>\n<td>Rejected because GPS is unlocked, so GPS timestamp cannot be used</td>\n</tr>\n</tbody>\n</table>\n<p>Examples (white-spaces, indentation and newlines added for readability):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;txpk_ack&quot;:&#123;</span><br><span class=\"line\">\t&quot;error&quot;:&quot;COLLISION_PACKET&quot;</span><br><span class=\"line\">&#125;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Revisions\"><a href=\"#Revisions\" class=\"headerlink\" title=\"Revisions\"></a>Revisions</h2><hr>\n<h3 id=\"v1-3\"><a href=\"#v1-3\" class=\"headerlink\" title=\"v1.3\"></a>v1.3</h3><ul>\n<li>Added downlink feedback from gateway to server (PULL_RESP -&gt; TX_ACK)</li>\n</ul>\n<h3 id=\"v1-2\"><a href=\"#v1-2\" class=\"headerlink\" title=\"v1.2\"></a>v1.2</h3><ul>\n<li>Added value of FSK bitrate for upstream.</li>\n<li>Added parameters for FSK bitrate and frequency deviation for downstream.</li>\n</ul>\n<h3 id=\"v1-1\"><a href=\"#v1-1\" class=\"headerlink\" title=\"v1.1\"></a>v1.1</h3><ul>\n<li>Added syntax for status report JSON object on upstream.</li>\n</ul>\n<h3 id=\"v1-0\"><a href=\"#v1-0\" class=\"headerlink\" title=\"v1.0\"></a>v1.0</h3><ul>\n<li>Initial version.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><hr>\n<p>The protocol between the gateway and the server is purposefully very basic and for demonstration purpose only, or for use on private and reliable networks.</p>\n<p>There is no authentication of the gateway or the server, and the acknowledges are only used for network quality assessment, not to correct UDP datagrams losses (no retries).</p>\n<h2 id=\"System-schematic-and-definitions\"><a href=\"#System-schematic-and-definitions\" class=\"headerlink\" title=\"System schematic and definitions\"></a>System schematic and definitions</h2><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ((( Y )))</span><br><span class=\"line\">     |</span><br><span class=\"line\">     |</span><br><span class=\"line\">+ - -|- - - - - - - - - - - - - +        xxxxxxxxxxxx          +--------+</span><br><span class=\"line\">| +--+-----------+     +------+ |       xx x  x     xxx        |        |</span><br><span class=\"line\">| |              |     |      | |      xx  Internet  xx        |        |</span><br><span class=\"line\">| | Concentrator |&lt;---&gt;| Host |&lt;-------xx     or    xx--------&gt;|        |</span><br><span class=\"line\">| |              | SPI |      | |      xx  Intranet  xx        | Server |</span><br><span class=\"line\">| +--------------+     +------+ |       xxxx   x   xxxx        |        |</span><br><span class=\"line\">|    ^                     ^    |           xxxxxxxx           |        |</span><br><span class=\"line\">|    | PPS +-------+ NMEA  |    |                              |        |</span><br><span class=\"line\">|    +-----|  GPS  |-------+    |                              +--------+</span><br><span class=\"line\">|          | (opt) |            |</span><br><span class=\"line\">|          +-------+            |</span><br><span class=\"line\">|                               |</span><br><span class=\"line\">|             Gateway           |</span><br><span class=\"line\">+- - - - - - - - - - - - - - - -+</span><br></pre></td></tr></table></figure>\n<p><strong>Concentrator</strong>: radio RX/TX board, based on Semtech multichannel modems (SX130x), transceivers (SX135x) and/or low-power stand-alone modems (SX127x).</p>\n<p><strong>Host</strong>: embedded computer on which the packet forwarder is run. Drives the concentrator through a SPI link.</p>\n<p><strong>GPS</strong>: GNSS (GPS, Galileo, GLONASS, etc) receiver with a “1 Pulse Per Second” output and a serial link to the host to send NMEA frames containing time and geographical coordinates data. Optional.</p>\n<p><strong>Gateway</strong>: a device composed of at least one radio concentrator, a host, some network connection to the internet or a private network (Ethernet, 3G, Wifi, microwave link), and optionally a GPS receiver for synchronization.</p>\n<p><strong>Server</strong>: an abstract computer that will process the RF packets received and forwarded by the gateway, and issue RF packets in response that the gateway will have to emit.</p>\n<p>It is assumed that the gateway can be behind a NAT or a firewall stopping any incoming connection. It is assumed that the server has an static IP address (or an address solvable through a DNS service) and is able to receive incoming connections on a specific port.</p>\n<h2 id=\"Upstream-protocol\"><a href=\"#Upstream-protocol\" class=\"headerlink\" title=\"Upstream protocol\"></a>Upstream protocol</h2><hr>\n<h3 id=\"Sequence-diagram\"><a href=\"#Sequence-diagram\" class=\"headerlink\" title=\"Sequence diagram\"></a>Sequence diagram</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">| Gateway |                                                    | Server  |</span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">     | -----------------------------------\\                         |</span><br><span class=\"line\">     |-| When 1-N RF packets are received |                         |</span><br><span class=\"line\">     | ------------------------------------                         |</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     | PUSH_DATA (token X, GW MAC, JSON payload)                    |</span><br><span class=\"line\">     |-------------------------------------------------------------&gt;|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     |                                           PUSH_ACK (token X) |</span><br><span class=\"line\">     |&lt;-------------------------------------------------------------|</span><br><span class=\"line\">     |                              ------------------------------\\ |</span><br><span class=\"line\">     |                              | process packets *after* ack |-|</span><br><span class=\"line\">     |                              ------------------------------- |</span><br><span class=\"line\">     |                                                              |</span><br></pre></td></tr></table></figure>\n<h3 id=\"PUSH-DATA-packet\"><a href=\"#PUSH-DATA-packet\" class=\"headerlink\" title=\"PUSH_DATA packet\"></a>PUSH_DATA packet</h3><p>That packet type is used by the gateway mainly to forward the RF packets received, and associated metadata, to the server.</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>random token</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PUSH_DATA identifier 0x00</td>\n</tr>\n<tr>\n<td>4-11</td>\n<td>Gateway unique identifier (MAC address)</td>\n</tr>\n<tr>\n<td>12-end</td>\n<td>JSON object, starting with {, ending with }, see section 4</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"PUSH-ACK-packet\"><a href=\"#PUSH-ACK-packet\" class=\"headerlink\" title=\"PUSH_ACK packet\"></a>PUSH_ACK packet</h3><p>That packet type is used by the server to acknowledge immediately all the PUSH_DATA packets received.</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>same token as the PUSH_DATA packet to acknowledge</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PUSH_ACK identifier 0x01</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Upstream-JSON-data-structure\"><a href=\"#Upstream-JSON-data-structure\" class=\"headerlink\" title=\"Upstream JSON data structure\"></a>Upstream JSON data structure</h2><hr>\n<p>The root object can contain an array named “rxpk”:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;rxpk&quot;:[ &#123;...&#125;, ...]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>That array contains at least one JSON object, each object contain a RF packet and associated metadata with the following fields:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>time</td>\n<td>string</td>\n<td>UTC time of pkt RX, us precision, ISO 8601 ‘compact’ format</td>\n</tr>\n<tr>\n<td>tmst</td>\n<td>number</td>\n<td>Internal timestamp of “RX finished” event (32b unsigned)</td>\n</tr>\n<tr>\n<td>freq</td>\n<td>number</td>\n<td>RX central frequency in MHz (unsigned float, Hz precision)</td>\n</tr>\n<tr>\n<td>chan</td>\n<td>number</td>\n<td>Concentrator “IF” channel used for RX (unsigned integer)</td>\n</tr>\n<tr>\n<td>rfch</td>\n<td>number</td>\n<td>Concentrator “RF chain” used for RX (unsigned integer)</td>\n</tr>\n<tr>\n<td>stat</td>\n<td>number</td>\n<td>CRC status: 1 = OK, -1 = fail, 0 = no CRC</td>\n</tr>\n<tr>\n<td>modu</td>\n<td>string</td>\n<td>Modulation identifier “LORA” or “FSK”</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>string</td>\n<td>LoRa datarate identifier (eg. SF12BW500)</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>number</td>\n<td>FSK datarate (unsigned, in bits per second)</td>\n</tr>\n<tr>\n<td>codr</td>\n<td>string</td>\n<td>LoRa ECC coding rate identifier</td>\n</tr>\n<tr>\n<td>rssi</td>\n<td>number</td>\n<td>RSSI in dBm (signed integer, 1 dB precision)</td>\n</tr>\n<tr>\n<td>lsnr</td>\n<td>number</td>\n<td>Lora SNR ratio in dB (signed float, 0.1 dB precision)</td>\n</tr>\n<tr>\n<td>size</td>\n<td>number</td>\n<td>RF packet payload size in bytes (unsigned integer)</td>\n</tr>\n<tr>\n<td>data</td>\n<td>string</td>\n<td>Base64 encoded RF packet payload, padded</td>\n</tr>\n</tbody>\n</table>\n<p>Example (white-spaces, indentation and newlines added for readability):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;rxpk&quot;:[</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t&quot;time&quot;:&quot;2013-03-31T16:21:17.528002Z&quot;,</span><br><span class=\"line\">\t\t&quot;tmst&quot;:3512348611,</span><br><span class=\"line\">\t\t&quot;chan&quot;:2,</span><br><span class=\"line\">\t\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t\t&quot;freq&quot;:866.349812,</span><br><span class=\"line\">\t\t&quot;stat&quot;:1,</span><br><span class=\"line\">\t\t&quot;modu&quot;:&quot;LORA&quot;,</span><br><span class=\"line\">\t\t&quot;datr&quot;:&quot;SF7BW125&quot;,</span><br><span class=\"line\">\t\t&quot;codr&quot;:&quot;4/6&quot;,</span><br><span class=\"line\">\t\t&quot;rssi&quot;:-35,</span><br><span class=\"line\">\t\t&quot;lsnr&quot;:5.1,</span><br><span class=\"line\">\t\t&quot;size&quot;:32,</span><br><span class=\"line\">\t\t&quot;data&quot;:&quot;-DS4CGaDCdG+48eJNM3Vai-zDpsR71Pn9CPA9uCON84&quot;</span><br><span class=\"line\">\t&#125;,&#123;</span><br><span class=\"line\">\t\t&quot;time&quot;:&quot;2013-03-31T16:21:17.530974Z&quot;,</span><br><span class=\"line\">\t\t&quot;tmst&quot;:3512348514,</span><br><span class=\"line\">\t\t&quot;chan&quot;:9,</span><br><span class=\"line\">\t\t&quot;rfch&quot;:1,</span><br><span class=\"line\">\t\t&quot;freq&quot;:869.1,</span><br><span class=\"line\">\t\t&quot;stat&quot;:1,</span><br><span class=\"line\">\t\t&quot;modu&quot;:&quot;FSK&quot;,</span><br><span class=\"line\">\t\t&quot;datr&quot;:50000,</span><br><span class=\"line\">\t\t&quot;rssi&quot;:-75,</span><br><span class=\"line\">\t\t&quot;size&quot;:16,</span><br><span class=\"line\">\t\t&quot;data&quot;:&quot;VEVTVF9QQUNLRVRfMTIzNA==&quot;</span><br><span class=\"line\">\t&#125;,&#123;</span><br><span class=\"line\">\t\t&quot;time&quot;:&quot;2013-03-31T16:21:17.532038Z&quot;,</span><br><span class=\"line\">\t\t&quot;tmst&quot;:3316387610,</span><br><span class=\"line\">\t\t&quot;chan&quot;:0,</span><br><span class=\"line\">\t\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t\t&quot;freq&quot;:863.00981,</span><br><span class=\"line\">\t\t&quot;stat&quot;:1,</span><br><span class=\"line\">\t\t&quot;modu&quot;:&quot;LORA&quot;,</span><br><span class=\"line\">\t\t&quot;datr&quot;:&quot;SF10BW125&quot;,</span><br><span class=\"line\">\t\t&quot;codr&quot;:&quot;4/7&quot;,</span><br><span class=\"line\">\t\t&quot;rssi&quot;:-38,</span><br><span class=\"line\">\t\t&quot;lsnr&quot;:5.5,</span><br><span class=\"line\">\t\t&quot;size&quot;:32,</span><br><span class=\"line\">\t\t&quot;data&quot;:&quot;ysgRl452xNLep9S1NTIg2lomKDxUgn3DJ7DE+b00Ass&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">]&#125;</span><br></pre></td></tr></table></figure>\n<p>The root object can also contain an object named “stat” :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;rxpk&quot;:[ &#123;...&#125;, ...],</span><br><span class=\"line\">\t&quot;stat&quot;:&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>It is possible for a packet to contain no “rxpk” array but a “stat” object.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;stat&quot;:&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>That object contains the status of the gateway, with the following fields:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>time</td>\n<td>string</td>\n<td>UTC ‘system’ time of the gateway, ISO 8601 ‘expanded’ format</td>\n</tr>\n<tr>\n<td>lati</td>\n<td>number</td>\n<td>GPS latitude of the gateway in degree (float, N is +)</td>\n</tr>\n<tr>\n<td>long</td>\n<td>number</td>\n<td>GPS latitude of the gateway in degree (float, E is +)</td>\n</tr>\n<tr>\n<td>alti</td>\n<td>number</td>\n<td>GPS altitude of the gateway in meter RX (integer)</td>\n</tr>\n<tr>\n<td>rxnb</td>\n<td>number</td>\n<td>Number of radio packets received (unsigned integer)</td>\n</tr>\n<tr>\n<td>rxok</td>\n<td>number</td>\n<td>Number of radio packets received with a valid PHY CRC</td>\n</tr>\n<tr>\n<td>rxfw</td>\n<td>number</td>\n<td>Number of radio packets forwarded (unsigned integer)</td>\n</tr>\n<tr>\n<td>ackr</td>\n<td>number</td>\n<td>Percentage of upstream datagrams that were acknowledged</td>\n</tr>\n<tr>\n<td>dwnb</td>\n<td>number</td>\n<td>Number of downlink datagrams received (unsigned integer)</td>\n</tr>\n<tr>\n<td>txnb</td>\n<td>number</td>\n<td>Number of packets emitted (unsigned integer)</td>\n</tr>\n</tbody>\n</table>\n<p>Example (white-spaces, indentation and newlines added for readability):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;stat&quot;:&#123;</span><br><span class=\"line\">\t&quot;time&quot;:&quot;2014-01-12 08:59:28 GMT&quot;,</span><br><span class=\"line\">\t&quot;lati&quot;:46.24000,</span><br><span class=\"line\">\t&quot;long&quot;:3.25230,</span><br><span class=\"line\">\t&quot;alti&quot;:145,</span><br><span class=\"line\">\t&quot;rxnb&quot;:2,</span><br><span class=\"line\">\t&quot;rxok&quot;:2,</span><br><span class=\"line\">\t&quot;rxfw&quot;:2,</span><br><span class=\"line\">\t&quot;ackr&quot;:100.0,</span><br><span class=\"line\">\t&quot;dwnb&quot;:2,</span><br><span class=\"line\">\t&quot;txnb&quot;:2</span><br><span class=\"line\">&#125;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Downstream-protocol\"><a href=\"#Downstream-protocol\" class=\"headerlink\" title=\"Downstream protocol\"></a>Downstream protocol</h2><hr>\n<h3 id=\"Sequence-diagram-1\"><a href=\"#Sequence-diagram-1\" class=\"headerlink\" title=\"Sequence diagram\"></a>Sequence diagram</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">| Gateway |                                                    | Server  |</span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">     | -----------------------------------\\                         |</span><br><span class=\"line\">     |-| Every N seconds (keepalive time) |                         |</span><br><span class=\"line\">     | ------------------------------------                         |</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     | PULL_DATA (token Y, MAC@)                                    |</span><br><span class=\"line\">     |-------------------------------------------------------------&gt;|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     |                                           PULL_ACK (token Y) |</span><br><span class=\"line\">     |&lt;-------------------------------------------------------------|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\"></span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">| Gateway |                                                    | Server  |</span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">     |      ------------------------------------------------------\\ |</span><br><span class=\"line\">     |      | Anytime after first PULL_DATA for each packet to TX |-|</span><br><span class=\"line\">     |      ------------------------------------------------------- |</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     |                            PULL_RESP (token Z, JSON payload) |</span><br><span class=\"line\">     |&lt;-------------------------------------------------------------|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     | TX_ACK (token Z, JSON payload)                               |</span><br><span class=\"line\">     |-------------------------------------------------------------&gt;|</span><br></pre></td></tr></table></figure>\n<h3 id=\"PULL-DATA-packet\"><a href=\"#PULL-DATA-packet\" class=\"headerlink\" title=\"PULL_DATA packet\"></a>PULL_DATA packet</h3><p>That packet type is used by the gateway to poll data from the server.</p>\n<p>This data exchange is initialized by the gateway because it might be impossible for the server to send packets to the gateway if the gateway is behind a NAT.</p>\n<p>When the gateway initialize the exchange, the network route towards the server will open and will allow for packets to flow both directions. The gateway must periodically send PULL_DATA packets to be sure the network route stays open for the server to be used at any time.</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>random token</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PULL_DATA identifier 0x02</td>\n</tr>\n<tr>\n<td>4-11</td>\n<td>Gateway unique identifier (MAC address)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"PULL-ACK-packet\"><a href=\"#PULL-ACK-packet\" class=\"headerlink\" title=\"PULL_ACK packet\"></a>PULL_ACK packet</h3><p>That packet type is used by the server to confirm that the network route is open and that the server can send PULL_RESP packets at any time.</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>same token as the PULL_DATA packet to acknowledge</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PULL_ACK identifier 0x04</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"PULL-RESP-packet\"><a href=\"#PULL-RESP-packet\" class=\"headerlink\" title=\"PULL_RESP packet\"></a>PULL_RESP packet</h3><p>That packet type is used by the server to send RF packets and associated metadata that will have to be emitted by the gateway.</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>random token</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PULL_RESP identifier 0x03</td>\n</tr>\n<tr>\n<td>4-end</td>\n<td>JSON object, starting with {, ending with }, see section 6</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"TX-ACK-packet\"><a href=\"#TX-ACK-packet\" class=\"headerlink\" title=\"TX_ACK packet\"></a>TX_ACK packet</h3><p>That packet type is used by the gateway to send a feedback to the server to inform if a downlink request has been accepted or rejected by the gateway. The datagram may optionnaly contain a JSON string to give more details on acknoledge. If no JSON is present (empty string), this means than no error occured.</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>same token as the PULL_RESP packet to acknowledge</td>\n</tr>\n<tr>\n<td>3</td>\n<td>TX_ACK identifier 0x05</td>\n</tr>\n<tr>\n<td>4-11</td>\n<td>Gateway unique identifier (MAC address)</td>\n</tr>\n<tr>\n<td>12-end</td>\n<td>[optional] JSON object, starting with {, ending with }, see section 6</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Downstream-JSON-data-structure\"><a href=\"#Downstream-JSON-data-structure\" class=\"headerlink\" title=\"Downstream JSON data structure\"></a>Downstream JSON data structure</h2><hr>\n<p>The root object of PULL_RESP packet must contain an object named “txpk”:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;txpk&quot;: &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>That object contain a RF packet to be emitted and associated metadata with the following fields:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>imme</td>\n<td>bool</td>\n<td>Send packet immediately (will ignore tmst &amp; time)</td>\n</tr>\n<tr>\n<td>tmst</td>\n<td>number</td>\n<td>Send packet on a certain timestamp value (will ignore time)</td>\n</tr>\n<tr>\n<td>time</td>\n<td>string</td>\n<td>Send packet at a certain time (GPS synchronization required)</td>\n</tr>\n<tr>\n<td>freq</td>\n<td>number</td>\n<td>TX central frequency in MHz (unsigned float, Hz precision)</td>\n</tr>\n<tr>\n<td>rfch</td>\n<td>number</td>\n<td>Concentrator “RF chain” used for TX (unsigned integer)</td>\n</tr>\n<tr>\n<td>powe</td>\n<td>number</td>\n<td>TX output power in dBm (unsigned integer, dBm precision)</td>\n</tr>\n<tr>\n<td>modu</td>\n<td>string</td>\n<td>Modulation identifier “LORA” or “FSK”</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>string</td>\n<td>LoRa datarate identifier (eg. SF12BW500)</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>number</td>\n<td>FSK datarate (unsigned, in bits per second)</td>\n</tr>\n<tr>\n<td>codr</td>\n<td>string</td>\n<td>LoRa ECC coding rate identifier</td>\n</tr>\n<tr>\n<td>fdev</td>\n<td>number</td>\n<td>FSK frequency deviation (unsigned integer, in Hz)</td>\n</tr>\n<tr>\n<td>ipol</td>\n<td>bool</td>\n<td>Lora modulation polarization inversion</td>\n</tr>\n<tr>\n<td>prea</td>\n<td>number</td>\n<td>RF preamble size (unsigned integer)</td>\n</tr>\n<tr>\n<td>size</td>\n<td>number</td>\n<td>RF packet payload size in bytes (unsigned integer)</td>\n</tr>\n<tr>\n<td>data</td>\n<td>string</td>\n<td>Base64 encoded RF packet payload, padding optional</td>\n</tr>\n<tr>\n<td>ncrc</td>\n<td>bool</td>\n<td>If true, disable the CRC of the physical layer (optional)</td>\n</tr>\n</tbody>\n</table>\n<p>Most fields are optional. If a field is omitted, default parameters will be used.</p>\n<p>Examples (white-spaces, indentation and newlines added for readability):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;txpk&quot;:&#123;</span><br><span class=\"line\">\t&quot;imme&quot;:true,</span><br><span class=\"line\">\t&quot;freq&quot;:864.123456,</span><br><span class=\"line\">\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t&quot;powe&quot;:14,</span><br><span class=\"line\">\t&quot;modu&quot;:&quot;LORA&quot;,</span><br><span class=\"line\">\t&quot;datr&quot;:&quot;SF11BW125&quot;,</span><br><span class=\"line\">\t&quot;codr&quot;:&quot;4/6&quot;,</span><br><span class=\"line\">\t&quot;ipol&quot;:false,</span><br><span class=\"line\">\t&quot;size&quot;:32,</span><br><span class=\"line\">\t&quot;data&quot;:&quot;H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v&quot;</span><br><span class=\"line\">&#125;&#125;</span><br><span class=\"line\">&#123;&quot;txpk&quot;:&#123;</span><br><span class=\"line\">\t&quot;imme&quot;:true,</span><br><span class=\"line\">\t&quot;freq&quot;:861.3,</span><br><span class=\"line\">\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t&quot;powe&quot;:12,</span><br><span class=\"line\">\t&quot;modu&quot;:&quot;FSK&quot;,</span><br><span class=\"line\">\t&quot;datr&quot;:50000,</span><br><span class=\"line\">\t&quot;fdev&quot;:3000,</span><br><span class=\"line\">\t&quot;size&quot;:32,</span><br><span class=\"line\">\t&quot;data&quot;:&quot;H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v&quot;</span><br><span class=\"line\">&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>The root object of TX_ACK packet must contain an object named “txpk_ack”:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;txpk_ack&quot;: &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>That object contain status information concerning the associated PULL_RESP packet.</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>error</td>\n<td>string</td>\n<td>Indication about success or type of failure that occured for downlink request.</td>\n</tr>\n</tbody>\n</table>\n<p>The possible values of “error” field are:</p>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NONE</td>\n<td>Packet has been programmed for downlink</td>\n</tr>\n<tr>\n<td>TOO_LATE</td>\n<td>Rejected because it was already too late to program this packet for downlink</td>\n</tr>\n<tr>\n<td>TOO_EARLY</td>\n<td>Rejected because downlink packet timestamp is too much in advance</td>\n</tr>\n<tr>\n<td>COLLISION_PACKET</td>\n<td>Rejected because there was already a packet programmed in requested timeframe</td>\n</tr>\n<tr>\n<td>COLLISION_BEACON</td>\n<td>Rejected because there was already a beacon planned in requested timeframe</td>\n</tr>\n<tr>\n<td>TX_FREQ</td>\n<td>Rejected because requested frequency is not supported by TX RF chain</td>\n</tr>\n<tr>\n<td>TX_POWER</td>\n<td>Rejected because requested power is not supported by gateway</td>\n</tr>\n<tr>\n<td>GPS_UNLOCKED</td>\n<td>Rejected because GPS is unlocked, so GPS timestamp cannot be used</td>\n</tr>\n</tbody>\n</table>\n<p>Examples (white-spaces, indentation and newlines added for readability):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;txpk_ack&quot;:&#123;</span><br><span class=\"line\">\t&quot;error&quot;:&quot;COLLISION_PACKET&quot;</span><br><span class=\"line\">&#125;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Revisions\"><a href=\"#Revisions\" class=\"headerlink\" title=\"Revisions\"></a>Revisions</h2><hr>\n<h3 id=\"v1-3\"><a href=\"#v1-3\" class=\"headerlink\" title=\"v1.3\"></a>v1.3</h3><ul>\n<li>Added downlink feedback from gateway to server (PULL_RESP -&gt; TX_ACK)</li>\n</ul>\n<h3 id=\"v1-2\"><a href=\"#v1-2\" class=\"headerlink\" title=\"v1.2\"></a>v1.2</h3><ul>\n<li>Added value of FSK bitrate for upstream.</li>\n<li>Added parameters for FSK bitrate and frequency deviation for downstream.</li>\n</ul>\n<h3 id=\"v1-1\"><a href=\"#v1-1\" class=\"headerlink\" title=\"v1.1\"></a>v1.1</h3><ul>\n<li>Added syntax for status report JSON object on upstream.</li>\n</ul>\n<h3 id=\"v1-0\"><a href=\"#v1-0\" class=\"headerlink\" title=\"v1.0\"></a>v1.0</h3><ul>\n<li>Initial version.</li>\n</ul>\n"},{"title":"go工程搭建","date":"2019-04-09T01:26:21.000Z","_content":"\n# 工程基本结构\n\n","source":"_posts/go/go工程搭建.md","raw":"---\ntitle: go工程搭建\ndate: 2019-04-09 09:26:21\ntags:\n- go\n---\n\n# 工程基本结构\n\n","slug":"go/go工程搭建","published":1,"updated":"2019-10-14T09:01:07.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a43o002vic1yoa7g69o6","content":"<h1 id=\"工程基本结构\"><a href=\"#工程基本结构\" class=\"headerlink\" title=\"工程基本结构\"></a>工程基本结构</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"工程基本结构\"><a href=\"#工程基本结构\" class=\"headerlink\" title=\"工程基本结构\"></a>工程基本结构</h1>"},{"title":"sqlx基本使用","date":"2019-02-13T08:15:58.000Z","_content":"\n# 安装\n\n```bash\ngo get github.com/jmoiron/sqlx\n```\n\n# 连接数据库\n\n```go\nvar db *sqlx.DB\n \n// exactly the same as the built-in\ndb = sqlx.Open(\"sqlite3\", \":memory:\")\n \n// from a pre-existing sql.DB; note the required driverName\ndb = sqlx.NewDb(sql.Open(\"sqlite3\", \":memory:\"), \"sqlite3\")\n \n// force a connection and test that it worked\nerr = db.Ping()\n```\n\n# 查询\n\n## Exec\n\n直接执行，适合add,update,delete\n\n```go\nschema := `CREATE TABLE place (\n    country text,\n    city text NULL,\n    telcode integer);`\n \n// execute a query on the server\nresult, err := db.Exec(schema)\n \n// or, you can use MustExec, which panics on error\ncityState := `INSERT INTO place (country, telcode) VALUES (?, ?)`\ncountryCity := `INSERT INTO place (country, city, telcode) VALUES (?, ?, ?)`\ndb.MustExec(cityState, \"Hong Kong\", 852)\ndb.MustExec(cityState, \"Singapore\", 65)\ndb.MustExec(countryCity, \"South Africa\", \"Johannesburg\", 27)\n```\n\n## Query\n\n查询数据库，适合select\n\n```go\n// fetch all places from the db\nrows, err := db.Query(\"SELECT country, city, telcode FROM place\")\n \n// iterate over each row\nfor rows.Next() {\n    var country string\n    // note that city can be NULL, so we use the NullString type\n    var city    sql.NullString\n    var telcode int\n    err = rows.Scan(&country, &city, &telcode)\n}\n\n// queryx 可以对结果转换成结构体\nvar person2 User\n\trowxs,err :=db.Queryx(\"SELECT * FROM sys_user LIMIT 1\")\n\tif err != nil{\n\t\tpanic(err)\n\t}\n\tfor rowxs.Next(){\n\t\trowxs.StructScan(&person2)\n\t\tfmt.Println(person2)\n\t}\n```\n\n## Select\n\n```go\np := Place{}\npp := []Place{}\n \n// this will pull the first place directly into p\nerr = db.Get(&p, \"SELECT * FROM place LIMIT 1\")\n \n// this will pull places with telcode > 50 into the slice pp\nerr = db.Select(&pp, \"SELECT * FROM place WHERE telcode > ?\", 50)\n \n// they work with regular types as well\nvar id int\nerr = db.Get(&id, \"SELECT count(*) FROM place\")\n \n// fetch at most 10 place names\nvar names []string\nerr = db.Select(&names, \"SELECT name FROM place LIMIT 10\")\n```\n\n# 事务\n\n```go\n// this will not work if connection pool > 1\ndb.MustExec(\"BEGIN;\")\ndb.MustExec(...)\ndb.MustExec(\"COMMIT;\")\n```\n\n# 预编译\n\n```go\nstmt, err := db.Prepare(`SELECT * FROM place WHERE telcode=?`)\nrow = stmt.QueryRow(65)\n \ntx, err := db.Begin()\ntxStmt, err := tx.Prepare(`SELECT * FROM place WHERE telcode=?`)\nrow = txStmt.QueryRow(852)\n```\n\n# Named Queries\n\n```go\n// named query with a struct\np := Place{Country: \"South Africa\"}\nrows, err := db.NamedQuery(`SELECT * FROM place WHERE country=:country`, p)\n \n// named query with a map\nm := map[string]interface{}{\"city\": \"Johannesburg\"}\nresult, err := db.NamedExec(`SELECT * FROM place WHERE city=:city`, m)\n\n\np := Place{TelephoneCode: 50}\npp := []Place{}\n \n// select all telcodes > 50\nnstmt, err := db.PrepareNamed(`SELECT * FROM place WHERE telcode > :telcode`)\nerr = nstmt.Select(&pp, p)\n\n\narg := map[string]interface{}{\n    \"published\": true,\n    \"authors\": []{8, 19, 32, 44},\n}\nquery, args, err := sqlx.Named(\"SELECT * FROM articles WHERE published=:published AND author_id IN (:authors)\", arg)\nquery, args, err := sqlx.In(query, args...)\nquery = db.Rebind(query)\ndb.Query(query, args...)\n```\n\n\n\n# 参考\n\n> http://jmoiron.github.io/sqlx/\n\n","source":"_posts/go/sqlx基本使用.md","raw":"---\ntitle: sqlx基本使用\ndate: 2019-02-13 16:15:58\ntags:\n- go\n---\n\n# 安装\n\n```bash\ngo get github.com/jmoiron/sqlx\n```\n\n# 连接数据库\n\n```go\nvar db *sqlx.DB\n \n// exactly the same as the built-in\ndb = sqlx.Open(\"sqlite3\", \":memory:\")\n \n// from a pre-existing sql.DB; note the required driverName\ndb = sqlx.NewDb(sql.Open(\"sqlite3\", \":memory:\"), \"sqlite3\")\n \n// force a connection and test that it worked\nerr = db.Ping()\n```\n\n# 查询\n\n## Exec\n\n直接执行，适合add,update,delete\n\n```go\nschema := `CREATE TABLE place (\n    country text,\n    city text NULL,\n    telcode integer);`\n \n// execute a query on the server\nresult, err := db.Exec(schema)\n \n// or, you can use MustExec, which panics on error\ncityState := `INSERT INTO place (country, telcode) VALUES (?, ?)`\ncountryCity := `INSERT INTO place (country, city, telcode) VALUES (?, ?, ?)`\ndb.MustExec(cityState, \"Hong Kong\", 852)\ndb.MustExec(cityState, \"Singapore\", 65)\ndb.MustExec(countryCity, \"South Africa\", \"Johannesburg\", 27)\n```\n\n## Query\n\n查询数据库，适合select\n\n```go\n// fetch all places from the db\nrows, err := db.Query(\"SELECT country, city, telcode FROM place\")\n \n// iterate over each row\nfor rows.Next() {\n    var country string\n    // note that city can be NULL, so we use the NullString type\n    var city    sql.NullString\n    var telcode int\n    err = rows.Scan(&country, &city, &telcode)\n}\n\n// queryx 可以对结果转换成结构体\nvar person2 User\n\trowxs,err :=db.Queryx(\"SELECT * FROM sys_user LIMIT 1\")\n\tif err != nil{\n\t\tpanic(err)\n\t}\n\tfor rowxs.Next(){\n\t\trowxs.StructScan(&person2)\n\t\tfmt.Println(person2)\n\t}\n```\n\n## Select\n\n```go\np := Place{}\npp := []Place{}\n \n// this will pull the first place directly into p\nerr = db.Get(&p, \"SELECT * FROM place LIMIT 1\")\n \n// this will pull places with telcode > 50 into the slice pp\nerr = db.Select(&pp, \"SELECT * FROM place WHERE telcode > ?\", 50)\n \n// they work with regular types as well\nvar id int\nerr = db.Get(&id, \"SELECT count(*) FROM place\")\n \n// fetch at most 10 place names\nvar names []string\nerr = db.Select(&names, \"SELECT name FROM place LIMIT 10\")\n```\n\n# 事务\n\n```go\n// this will not work if connection pool > 1\ndb.MustExec(\"BEGIN;\")\ndb.MustExec(...)\ndb.MustExec(\"COMMIT;\")\n```\n\n# 预编译\n\n```go\nstmt, err := db.Prepare(`SELECT * FROM place WHERE telcode=?`)\nrow = stmt.QueryRow(65)\n \ntx, err := db.Begin()\ntxStmt, err := tx.Prepare(`SELECT * FROM place WHERE telcode=?`)\nrow = txStmt.QueryRow(852)\n```\n\n# Named Queries\n\n```go\n// named query with a struct\np := Place{Country: \"South Africa\"}\nrows, err := db.NamedQuery(`SELECT * FROM place WHERE country=:country`, p)\n \n// named query with a map\nm := map[string]interface{}{\"city\": \"Johannesburg\"}\nresult, err := db.NamedExec(`SELECT * FROM place WHERE city=:city`, m)\n\n\np := Place{TelephoneCode: 50}\npp := []Place{}\n \n// select all telcodes > 50\nnstmt, err := db.PrepareNamed(`SELECT * FROM place WHERE telcode > :telcode`)\nerr = nstmt.Select(&pp, p)\n\n\narg := map[string]interface{}{\n    \"published\": true,\n    \"authors\": []{8, 19, 32, 44},\n}\nquery, args, err := sqlx.Named(\"SELECT * FROM articles WHERE published=:published AND author_id IN (:authors)\", arg)\nquery, args, err := sqlx.In(query, args...)\nquery = db.Rebind(query)\ndb.Query(query, args...)\n```\n\n\n\n# 参考\n\n> http://jmoiron.github.io/sqlx/\n\n","slug":"go/sqlx基本使用","published":1,"updated":"2019-10-14T09:01:07.474Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a43p002xic1y2h14lvpg","content":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/jmoiron/sqlx</span><br></pre></td></tr></table></figure>\n<h1 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> db *sqlx.DB</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// exactly the same as the built-in</span></span><br><span class=\"line\">db = sqlx.Open(<span class=\"string\">\"sqlite3\"</span>, <span class=\"string\">\":memory:\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// from a pre-existing sql.DB; note the required driverName</span></span><br><span class=\"line\">db = sqlx.NewDb(sql.Open(<span class=\"string\">\"sqlite3\"</span>, <span class=\"string\">\":memory:\"</span>), <span class=\"string\">\"sqlite3\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// force a connection and test that it worked</span></span><br><span class=\"line\">err = db.Ping()</span><br></pre></td></tr></table></figure>\n<h1 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h1><h2 id=\"Exec\"><a href=\"#Exec\" class=\"headerlink\" title=\"Exec\"></a>Exec</h2><p>直接执行，适合add,update,delete</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schema := <span class=\"string\">`CREATE TABLE place (</span></span><br><span class=\"line\"><span class=\"string\">    country text,</span></span><br><span class=\"line\"><span class=\"string\">    city text NULL,</span></span><br><span class=\"line\"><span class=\"string\">    telcode integer);`</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// execute a query on the server</span></span><br><span class=\"line\">result, err := db.Exec(schema)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// or, you can use MustExec, which panics on error</span></span><br><span class=\"line\">cityState := <span class=\"string\">`INSERT INTO place (country, telcode) VALUES (?, ?)`</span></span><br><span class=\"line\">countryCity := <span class=\"string\">`INSERT INTO place (country, city, telcode) VALUES (?, ?, ?)`</span></span><br><span class=\"line\">db.MustExec(cityState, <span class=\"string\">\"Hong Kong\"</span>, <span class=\"number\">852</span>)</span><br><span class=\"line\">db.MustExec(cityState, <span class=\"string\">\"Singapore\"</span>, <span class=\"number\">65</span>)</span><br><span class=\"line\">db.MustExec(countryCity, <span class=\"string\">\"South Africa\"</span>, <span class=\"string\">\"Johannesburg\"</span>, <span class=\"number\">27</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Query\"><a href=\"#Query\" class=\"headerlink\" title=\"Query\"></a>Query</h2><p>查询数据库，适合select</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// fetch all places from the db</span></span><br><span class=\"line\">rows, err := db.Query(<span class=\"string\">\"SELECT country, city, telcode FROM place\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// iterate over each row</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> rows.Next() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> country <span class=\"keyword\">string</span></span><br><span class=\"line\">    <span class=\"comment\">// note that city can be NULL, so we use the NullString type</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> city    sql.NullString</span><br><span class=\"line\">    <span class=\"keyword\">var</span> telcode <span class=\"keyword\">int</span></span><br><span class=\"line\">    err = rows.Scan(&amp;country, &amp;city, &amp;telcode)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// queryx 可以对结果转换成结构体</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 User</span><br><span class=\"line\">\trowxs,err :=db.Queryx(<span class=\"string\">\"SELECT * FROM sys_user LIMIT 1\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> rowxs.Next()&#123;</span><br><span class=\"line\">\t\trowxs.StructScan(&amp;person2)</span><br><span class=\"line\">\t\tfmt.Println(person2)</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Select\"><a href=\"#Select\" class=\"headerlink\" title=\"Select\"></a>Select</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p := Place&#123;&#125;</span><br><span class=\"line\">pp := []Place&#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// this will pull the first place directly into p</span></span><br><span class=\"line\">err = db.Get(&amp;p, <span class=\"string\">\"SELECT * FROM place LIMIT 1\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// this will pull places with telcode &gt; 50 into the slice pp</span></span><br><span class=\"line\">err = db.Select(&amp;pp, <span class=\"string\">\"SELECT * FROM place WHERE telcode &gt; ?\"</span>, <span class=\"number\">50</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// they work with regular types as well</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> id <span class=\"keyword\">int</span></span><br><span class=\"line\">err = db.Get(&amp;id, <span class=\"string\">\"SELECT count(*) FROM place\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// fetch at most 10 place names</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> names []<span class=\"keyword\">string</span></span><br><span class=\"line\">err = db.Select(&amp;names, <span class=\"string\">\"SELECT name FROM place LIMIT 10\"</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// this will not work if connection pool &gt; 1</span></span><br><span class=\"line\">db.MustExec(<span class=\"string\">\"BEGIN;\"</span>)</span><br><span class=\"line\">db.MustExec(...)</span><br><span class=\"line\">db.MustExec(<span class=\"string\">\"COMMIT;\"</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"预编译\"><a href=\"#预编译\" class=\"headerlink\" title=\"预编译\"></a>预编译</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stmt, err := db.Prepare(<span class=\"string\">`SELECT * FROM place WHERE telcode=?`</span>)</span><br><span class=\"line\">row = stmt.QueryRow(<span class=\"number\">65</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">tx, err := db.Begin()</span><br><span class=\"line\">txStmt, err := tx.Prepare(<span class=\"string\">`SELECT * FROM place WHERE telcode=?`</span>)</span><br><span class=\"line\">row = txStmt.QueryRow(<span class=\"number\">852</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"Named-Queries\"><a href=\"#Named-Queries\" class=\"headerlink\" title=\"Named Queries\"></a>Named Queries</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// named query with a struct</span></span><br><span class=\"line\">p := Place&#123;Country: <span class=\"string\">\"South Africa\"</span>&#125;</span><br><span class=\"line\">rows, err := db.NamedQuery(<span class=\"string\">`SELECT * FROM place WHERE country=:country`</span>, p)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// named query with a map</span></span><br><span class=\"line\">m := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">\"city\"</span>: <span class=\"string\">\"Johannesburg\"</span>&#125;</span><br><span class=\"line\">result, err := db.NamedExec(<span class=\"string\">`SELECT * FROM place WHERE city=:city`</span>, m)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p := Place&#123;TelephoneCode: <span class=\"number\">50</span>&#125;</span><br><span class=\"line\">pp := []Place&#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// select all telcodes &gt; 50</span></span><br><span class=\"line\">nstmt, err := db.PrepareNamed(<span class=\"string\">`SELECT * FROM place WHERE telcode &gt; :telcode`</span>)</span><br><span class=\"line\">err = nstmt.Select(&amp;pp, p)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">arg := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;</span><br><span class=\"line\">    <span class=\"string\">\"published\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"authors\"</span>: []&#123;<span class=\"number\">8</span>, <span class=\"number\">19</span>, <span class=\"number\">32</span>, <span class=\"number\">44</span>&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">query, args, err := sqlx.Named(<span class=\"string\">\"SELECT * FROM articles WHERE published=:published AND author_id IN (:authors)\"</span>, arg)</span><br><span class=\"line\">query, args, err := sqlx.In(query, args...)</span><br><span class=\"line\">query = db.Rebind(query)</span><br><span class=\"line\">db.Query(query, args...)</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"http://jmoiron.github.io/sqlx/\" target=\"_blank\" rel=\"noopener\">http://jmoiron.github.io/sqlx/</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/jmoiron/sqlx</span><br></pre></td></tr></table></figure>\n<h1 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> db *sqlx.DB</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// exactly the same as the built-in</span></span><br><span class=\"line\">db = sqlx.Open(<span class=\"string\">\"sqlite3\"</span>, <span class=\"string\">\":memory:\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// from a pre-existing sql.DB; note the required driverName</span></span><br><span class=\"line\">db = sqlx.NewDb(sql.Open(<span class=\"string\">\"sqlite3\"</span>, <span class=\"string\">\":memory:\"</span>), <span class=\"string\">\"sqlite3\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// force a connection and test that it worked</span></span><br><span class=\"line\">err = db.Ping()</span><br></pre></td></tr></table></figure>\n<h1 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h1><h2 id=\"Exec\"><a href=\"#Exec\" class=\"headerlink\" title=\"Exec\"></a>Exec</h2><p>直接执行，适合add,update,delete</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schema := <span class=\"string\">`CREATE TABLE place (</span></span><br><span class=\"line\"><span class=\"string\">    country text,</span></span><br><span class=\"line\"><span class=\"string\">    city text NULL,</span></span><br><span class=\"line\"><span class=\"string\">    telcode integer);`</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// execute a query on the server</span></span><br><span class=\"line\">result, err := db.Exec(schema)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// or, you can use MustExec, which panics on error</span></span><br><span class=\"line\">cityState := <span class=\"string\">`INSERT INTO place (country, telcode) VALUES (?, ?)`</span></span><br><span class=\"line\">countryCity := <span class=\"string\">`INSERT INTO place (country, city, telcode) VALUES (?, ?, ?)`</span></span><br><span class=\"line\">db.MustExec(cityState, <span class=\"string\">\"Hong Kong\"</span>, <span class=\"number\">852</span>)</span><br><span class=\"line\">db.MustExec(cityState, <span class=\"string\">\"Singapore\"</span>, <span class=\"number\">65</span>)</span><br><span class=\"line\">db.MustExec(countryCity, <span class=\"string\">\"South Africa\"</span>, <span class=\"string\">\"Johannesburg\"</span>, <span class=\"number\">27</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Query\"><a href=\"#Query\" class=\"headerlink\" title=\"Query\"></a>Query</h2><p>查询数据库，适合select</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// fetch all places from the db</span></span><br><span class=\"line\">rows, err := db.Query(<span class=\"string\">\"SELECT country, city, telcode FROM place\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// iterate over each row</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> rows.Next() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> country <span class=\"keyword\">string</span></span><br><span class=\"line\">    <span class=\"comment\">// note that city can be NULL, so we use the NullString type</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> city    sql.NullString</span><br><span class=\"line\">    <span class=\"keyword\">var</span> telcode <span class=\"keyword\">int</span></span><br><span class=\"line\">    err = rows.Scan(&amp;country, &amp;city, &amp;telcode)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// queryx 可以对结果转换成结构体</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 User</span><br><span class=\"line\">\trowxs,err :=db.Queryx(<span class=\"string\">\"SELECT * FROM sys_user LIMIT 1\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> rowxs.Next()&#123;</span><br><span class=\"line\">\t\trowxs.StructScan(&amp;person2)</span><br><span class=\"line\">\t\tfmt.Println(person2)</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Select\"><a href=\"#Select\" class=\"headerlink\" title=\"Select\"></a>Select</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p := Place&#123;&#125;</span><br><span class=\"line\">pp := []Place&#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// this will pull the first place directly into p</span></span><br><span class=\"line\">err = db.Get(&amp;p, <span class=\"string\">\"SELECT * FROM place LIMIT 1\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// this will pull places with telcode &gt; 50 into the slice pp</span></span><br><span class=\"line\">err = db.Select(&amp;pp, <span class=\"string\">\"SELECT * FROM place WHERE telcode &gt; ?\"</span>, <span class=\"number\">50</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// they work with regular types as well</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> id <span class=\"keyword\">int</span></span><br><span class=\"line\">err = db.Get(&amp;id, <span class=\"string\">\"SELECT count(*) FROM place\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// fetch at most 10 place names</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> names []<span class=\"keyword\">string</span></span><br><span class=\"line\">err = db.Select(&amp;names, <span class=\"string\">\"SELECT name FROM place LIMIT 10\"</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// this will not work if connection pool &gt; 1</span></span><br><span class=\"line\">db.MustExec(<span class=\"string\">\"BEGIN;\"</span>)</span><br><span class=\"line\">db.MustExec(...)</span><br><span class=\"line\">db.MustExec(<span class=\"string\">\"COMMIT;\"</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"预编译\"><a href=\"#预编译\" class=\"headerlink\" title=\"预编译\"></a>预编译</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stmt, err := db.Prepare(<span class=\"string\">`SELECT * FROM place WHERE telcode=?`</span>)</span><br><span class=\"line\">row = stmt.QueryRow(<span class=\"number\">65</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">tx, err := db.Begin()</span><br><span class=\"line\">txStmt, err := tx.Prepare(<span class=\"string\">`SELECT * FROM place WHERE telcode=?`</span>)</span><br><span class=\"line\">row = txStmt.QueryRow(<span class=\"number\">852</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"Named-Queries\"><a href=\"#Named-Queries\" class=\"headerlink\" title=\"Named Queries\"></a>Named Queries</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// named query with a struct</span></span><br><span class=\"line\">p := Place&#123;Country: <span class=\"string\">\"South Africa\"</span>&#125;</span><br><span class=\"line\">rows, err := db.NamedQuery(<span class=\"string\">`SELECT * FROM place WHERE country=:country`</span>, p)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// named query with a map</span></span><br><span class=\"line\">m := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">\"city\"</span>: <span class=\"string\">\"Johannesburg\"</span>&#125;</span><br><span class=\"line\">result, err := db.NamedExec(<span class=\"string\">`SELECT * FROM place WHERE city=:city`</span>, m)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p := Place&#123;TelephoneCode: <span class=\"number\">50</span>&#125;</span><br><span class=\"line\">pp := []Place&#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// select all telcodes &gt; 50</span></span><br><span class=\"line\">nstmt, err := db.PrepareNamed(<span class=\"string\">`SELECT * FROM place WHERE telcode &gt; :telcode`</span>)</span><br><span class=\"line\">err = nstmt.Select(&amp;pp, p)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">arg := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;</span><br><span class=\"line\">    <span class=\"string\">\"published\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"authors\"</span>: []&#123;<span class=\"number\">8</span>, <span class=\"number\">19</span>, <span class=\"number\">32</span>, <span class=\"number\">44</span>&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">query, args, err := sqlx.Named(<span class=\"string\">\"SELECT * FROM articles WHERE published=:published AND author_id IN (:authors)\"</span>, arg)</span><br><span class=\"line\">query, args, err := sqlx.In(query, args...)</span><br><span class=\"line\">query = db.Rebind(query)</span><br><span class=\"line\">db.Query(query, args...)</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"http://jmoiron.github.io/sqlx/\" target=\"_blank\" rel=\"noopener\">http://jmoiron.github.io/sqlx/</a></p>\n</blockquote>\n"},{"title":"java多线程","date":"2019-02-15T08:37:30.000Z","_content":"\n# 相关的类\n\n1. Runnable\n2. Thread\n3. Callable:比Runnable有个返回值\n4. Future\n5. FutureTask\n\n","source":"_posts/java/java多线程.md","raw":"---\ntitle: java多线程\ndate: 2019-02-15 16:37:30\ntags:\n- java\n---\n\n# 相关的类\n\n1. Runnable\n2. Thread\n3. Callable:比Runnable有个返回值\n4. Future\n5. FutureTask\n\n","slug":"java/java多线程","published":1,"updated":"2019-10-14T09:01:07.551Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a43q002zic1yo37emq5q","content":"<h1 id=\"相关的类\"><a href=\"#相关的类\" class=\"headerlink\" title=\"相关的类\"></a>相关的类</h1><ol>\n<li>Runnable</li>\n<li>Thread</li>\n<li>Callable:比Runnable有个返回值</li>\n<li>Future</li>\n<li>FutureTask</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"相关的类\"><a href=\"#相关的类\" class=\"headerlink\" title=\"相关的类\"></a>相关的类</h1><ol>\n<li>Runnable</li>\n<li>Thread</li>\n<li>Callable:比Runnable有个返回值</li>\n<li>Future</li>\n<li>FutureTask</li>\n</ol>\n"},{"title":"java多线程自问","date":"2019-04-15T02:31:35.000Z","_content":"\n1. java创建线程的方式\n2. java的线程的类型\n3. Timer与TimerTask的区别\n4. 怎么启动、停止、加入、礼让线程\n5. 线程的生命周期以及其切换\n6. CountDownLatch、CyclicBarrier和Semaphore\n7. 什么是线程安全？Vector是一个线程安全类吗？ \n8. ","source":"_posts/java/java多线程自问.md","raw":"---\ntitle: java多线程自问\ndate: 2019-04-15 10:31:35\ntags:\n- java\n---\n\n1. java创建线程的方式\n2. java的线程的类型\n3. Timer与TimerTask的区别\n4. 怎么启动、停止、加入、礼让线程\n5. 线程的生命周期以及其切换\n6. CountDownLatch、CyclicBarrier和Semaphore\n7. 什么是线程安全？Vector是一个线程安全类吗？ \n8. ","slug":"java/java多线程自问","published":1,"updated":"2019-10-14T09:01:07.616Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a43q0031ic1ynoti6c9s","content":"<ol>\n<li>java创建线程的方式</li>\n<li>java的线程的类型</li>\n<li>Timer与TimerTask的区别</li>\n<li>怎么启动、停止、加入、礼让线程</li>\n<li>线程的生命周期以及其切换</li>\n<li>CountDownLatch、CyclicBarrier和Semaphore</li>\n<li>什么是线程安全？Vector是一个线程安全类吗？ </li>\n<li></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>java创建线程的方式</li>\n<li>java的线程的类型</li>\n<li>Timer与TimerTask的区别</li>\n<li>怎么启动、停止、加入、礼让线程</li>\n<li>线程的生命周期以及其切换</li>\n<li>CountDownLatch、CyclicBarrier和Semaphore</li>\n<li>什么是线程安全？Vector是一个线程安全类吗？ </li>\n<li></li>\n</ol>\n"},{"title":"spring的jms事务","date":"2019-08-03T07:05:17.000Z","_content":"\n","source":"_posts/java/spring的jms事务.md","raw":"---\ntitle: spring的jms事务\ndate: 2019-08-03 15:05:17\ntags:\n- java\n- spring\n---\n\n","slug":"java/spring的jms事务","published":1,"updated":"2019-10-14T09:01:07.607Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a43r0033ic1yst80cllo","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"使用jenv对java多版本管理","date":"2019-10-25T02:42:43.000Z","_content":"\n- 配置JDK环境变量\n\n打开 vim ~/.bash_profile 文件 进行添加\n\n```bash\nexport JAVA_8_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home\nexport JAVA_7_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home\n# 默认激活 jdk8\nexport JAVA_HOME=$JAVA_8_HOME\n```\n\n\n\n\n\n编辑完成，重新加载 .bash_profile\n\n```\n$ source ~/.bash_profile\n```\n\n#### jEnv安装\n\n- 安装\n\n```\n$ brew install jenv\n```\n\n- 配置\n\n安装了zsh，配置如下\n\n```\n$ echo 'export PATH=\"$HOME/.jenv/bin:$PATH\"' >> ~/.zshrc\n$ echo 'eval \"$(jenv init -)\"' >> ~/.zshrc\n```\n\n\n\n如果是默认的bash\n\n```\n$ echo 'export PATH=\"$HOME/.jenv/bin:$PATH\"' >> ~/.bash_profile\n$ echo 'eval \"$(jenv init -)\"' >> ~/.bash_profilec\n```\n\n#### jEnv配置JDK\n\n查看安装的java版本，如果我们一开始未添加jdk，执行jenv versions 应该是空的，* 号位置表示当前的jdk版本\n\n```bash\n$ jenv versions\n  system\n  1.7\n* 1.7.0.80 (set by /Users/gulj/.java-version)\n  1.8\n  1.8.0.112\n  oracle64-1.7.0.80\n  oracle64-1.8.0.112\n```\n\n重启下terminal，为jEnv添加java版本\n\n```\n添加jdk7\n$ jenv add /Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home\n添加jdk8\n$ jenv add /Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home\n```\n\n> 添加完jdk7和jdk8之后，再执行 **jenv versions** 命令就会看到我们添加的jdk\n\n#### jEnv常用命令\n\n- 移除指定版本jdk\n\n```\n$ jenv remove 1.8.0.111\n```\n\n- 选择一个jdk版本\n\n```\n$ jenv local 1.8.0.111\n```\n\n- 设置默认的jdk版本\n\n```\n$ jenv global 1.8.0.111\n```\n\n- 查看当前版本jdk的路径\n\n```\njenv which java\n```","source":"_posts/java/使用jenv对java多版本管理.md","raw":"---\ntitle: 使用jenv对java多版本管理\ndate: 2019-10-25 10:42:43\ntags:\n- java\n---\n\n- 配置JDK环境变量\n\n打开 vim ~/.bash_profile 文件 进行添加\n\n```bash\nexport JAVA_8_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home\nexport JAVA_7_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home\n# 默认激活 jdk8\nexport JAVA_HOME=$JAVA_8_HOME\n```\n\n\n\n\n\n编辑完成，重新加载 .bash_profile\n\n```\n$ source ~/.bash_profile\n```\n\n#### jEnv安装\n\n- 安装\n\n```\n$ brew install jenv\n```\n\n- 配置\n\n安装了zsh，配置如下\n\n```\n$ echo 'export PATH=\"$HOME/.jenv/bin:$PATH\"' >> ~/.zshrc\n$ echo 'eval \"$(jenv init -)\"' >> ~/.zshrc\n```\n\n\n\n如果是默认的bash\n\n```\n$ echo 'export PATH=\"$HOME/.jenv/bin:$PATH\"' >> ~/.bash_profile\n$ echo 'eval \"$(jenv init -)\"' >> ~/.bash_profilec\n```\n\n#### jEnv配置JDK\n\n查看安装的java版本，如果我们一开始未添加jdk，执行jenv versions 应该是空的，* 号位置表示当前的jdk版本\n\n```bash\n$ jenv versions\n  system\n  1.7\n* 1.7.0.80 (set by /Users/gulj/.java-version)\n  1.8\n  1.8.0.112\n  oracle64-1.7.0.80\n  oracle64-1.8.0.112\n```\n\n重启下terminal，为jEnv添加java版本\n\n```\n添加jdk7\n$ jenv add /Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home\n添加jdk8\n$ jenv add /Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home\n```\n\n> 添加完jdk7和jdk8之后，再执行 **jenv versions** 命令就会看到我们添加的jdk\n\n#### jEnv常用命令\n\n- 移除指定版本jdk\n\n```\n$ jenv remove 1.8.0.111\n```\n\n- 选择一个jdk版本\n\n```\n$ jenv local 1.8.0.111\n```\n\n- 设置默认的jdk版本\n\n```\n$ jenv global 1.8.0.111\n```\n\n- 查看当前版本jdk的路径\n\n```\njenv which java\n```","slug":"java/使用jenv对java多版本管理","published":1,"updated":"2019-10-25T02:44:27.960Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a43s0035ic1yb77cijt1","content":"<ul>\n<li>配置JDK环境变量</li>\n</ul>\n<p>打开 vim ~/.bash_profile 文件 进行添加</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> JAVA_8_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home</span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_7_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home</span><br><span class=\"line\"><span class=\"comment\"># 默认激活 jdk8</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=<span class=\"variable\">$JAVA_8_HOME</span></span><br></pre></td></tr></table></figure>\n<p>编辑完成，重新加载 .bash_profile</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<h4 id=\"jEnv安装\"><a href=\"#jEnv安装\" class=\"headerlink\" title=\"jEnv安装\"></a>jEnv安装</h4><ul>\n<li>安装</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install jenv</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置</li>\n</ul>\n<p>安装了zsh，配置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &apos;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrc</span><br><span class=\"line\">$ echo &apos;eval &quot;$(jenv init -)&quot;&apos; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure>\n<p>如果是默认的bash</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &apos;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&apos; &gt;&gt; ~/.bash_profile</span><br><span class=\"line\">$ echo &apos;eval &quot;$(jenv init -)&quot;&apos; &gt;&gt; ~/.bash_profilec</span><br></pre></td></tr></table></figure>\n<h4 id=\"jEnv配置JDK\"><a href=\"#jEnv配置JDK\" class=\"headerlink\" title=\"jEnv配置JDK\"></a>jEnv配置JDK</h4><p>查看安装的java版本，如果我们一开始未添加jdk，执行jenv versions 应该是空的，* 号位置表示当前的jdk版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jenv versions</span><br><span class=\"line\">  system</span><br><span class=\"line\">  1.7</span><br><span class=\"line\">* 1.7.0.80 (<span class=\"built_in\">set</span> by /Users/gulj/.java-version)</span><br><span class=\"line\">  1.8</span><br><span class=\"line\">  1.8.0.112</span><br><span class=\"line\">  oracle64-1.7.0.80</span><br><span class=\"line\">  oracle64-1.8.0.112</span><br></pre></td></tr></table></figure>\n<p>重启下terminal，为jEnv添加java版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">添加jdk7</span><br><span class=\"line\">$ jenv add /Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home</span><br><span class=\"line\">添加jdk8</span><br><span class=\"line\">$ jenv add /Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>添加完jdk7和jdk8之后，再执行 <strong>jenv versions</strong> 命令就会看到我们添加的jdk</p>\n</blockquote>\n<h4 id=\"jEnv常用命令\"><a href=\"#jEnv常用命令\" class=\"headerlink\" title=\"jEnv常用命令\"></a>jEnv常用命令</h4><ul>\n<li>移除指定版本jdk</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jenv remove 1.8.0.111</span><br></pre></td></tr></table></figure>\n<ul>\n<li>选择一个jdk版本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jenv local 1.8.0.111</span><br></pre></td></tr></table></figure>\n<ul>\n<li>设置默认的jdk版本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jenv global 1.8.0.111</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看当前版本jdk的路径</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jenv which java</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>配置JDK环境变量</li>\n</ul>\n<p>打开 vim ~/.bash_profile 文件 进行添加</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> JAVA_8_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home</span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_7_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home</span><br><span class=\"line\"><span class=\"comment\"># 默认激活 jdk8</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=<span class=\"variable\">$JAVA_8_HOME</span></span><br></pre></td></tr></table></figure>\n<p>编辑完成，重新加载 .bash_profile</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<h4 id=\"jEnv安装\"><a href=\"#jEnv安装\" class=\"headerlink\" title=\"jEnv安装\"></a>jEnv安装</h4><ul>\n<li>安装</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install jenv</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置</li>\n</ul>\n<p>安装了zsh，配置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &apos;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrc</span><br><span class=\"line\">$ echo &apos;eval &quot;$(jenv init -)&quot;&apos; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure>\n<p>如果是默认的bash</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &apos;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&apos; &gt;&gt; ~/.bash_profile</span><br><span class=\"line\">$ echo &apos;eval &quot;$(jenv init -)&quot;&apos; &gt;&gt; ~/.bash_profilec</span><br></pre></td></tr></table></figure>\n<h4 id=\"jEnv配置JDK\"><a href=\"#jEnv配置JDK\" class=\"headerlink\" title=\"jEnv配置JDK\"></a>jEnv配置JDK</h4><p>查看安装的java版本，如果我们一开始未添加jdk，执行jenv versions 应该是空的，* 号位置表示当前的jdk版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jenv versions</span><br><span class=\"line\">  system</span><br><span class=\"line\">  1.7</span><br><span class=\"line\">* 1.7.0.80 (<span class=\"built_in\">set</span> by /Users/gulj/.java-version)</span><br><span class=\"line\">  1.8</span><br><span class=\"line\">  1.8.0.112</span><br><span class=\"line\">  oracle64-1.7.0.80</span><br><span class=\"line\">  oracle64-1.8.0.112</span><br></pre></td></tr></table></figure>\n<p>重启下terminal，为jEnv添加java版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">添加jdk7</span><br><span class=\"line\">$ jenv add /Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home</span><br><span class=\"line\">添加jdk8</span><br><span class=\"line\">$ jenv add /Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>添加完jdk7和jdk8之后，再执行 <strong>jenv versions</strong> 命令就会看到我们添加的jdk</p>\n</blockquote>\n<h4 id=\"jEnv常用命令\"><a href=\"#jEnv常用命令\" class=\"headerlink\" title=\"jEnv常用命令\"></a>jEnv常用命令</h4><ul>\n<li>移除指定版本jdk</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jenv remove 1.8.0.111</span><br></pre></td></tr></table></figure>\n<ul>\n<li>选择一个jdk版本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jenv local 1.8.0.111</span><br></pre></td></tr></table></figure>\n<ul>\n<li>设置默认的jdk版本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jenv global 1.8.0.111</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看当前版本jdk的路径</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jenv which java</span><br></pre></td></tr></table></figure>"},{"title":"mysql修改字符集","date":"2019-07-27T08:55:17.000Z","_content":"\n# 概念\n\n1. 字符集（character set）：定义了字符以及字符的编码。\n2. 字符序（collation）：定义了字符的比较规则。\n\n# Mysql字符集\n\n1. 一个字符集对应至少一种字符序（一般是1对多）。\n2. 两个不同的字符集不能有相同的字符序。\n3. 每个字符集都有默认的字符序。\n\n```mysql\n-- 第一种方式\nSHOW CHARACTER SET;\n\n-- 第二种方式\nuse information_schema;\nselect * from CHARACTER_SETS;\n\n-- 例子\nSHOW CHARACTER SET WHERE Charset=\"utf8\";\nSHOW CHARACTER SET LIKE \"utf8%\";\n```\n\n# Mysql字符序\n\n```mysql\n -- 第一种方式\n SHOW COLLATION WHERE Charset = 'utf8';\n \n -- 第二种方式\n USE information_schema;\n SELECT * FROM COLLATIONS WHERE CHARACTER_SET_NAME=\"utf8\";\n```\n\n## 命名规范\n\n字符序的命名，以其对应的字符集作为前缀，如下所示。比如字符序`utf8_general_ci`，标明它是字符集`utf8`的字符序。\n\n更多规则可以参考 [官方文档](https://dev.mysql.com/doc/refman/5.7/en/charset-collation-names.html)。\n\n```mysql\n[information_schema]> SELECT CHARACTER_SET_NAME, COLLATION_NAME FROM COLLATIONS WHERE CHARACTER_SET_NAME=\"utf8\" limit 2; \n```\n\n# 设置修改\n\n1. 修改数据库字符集\n\n   ```mysql\n   ALTER DATABASE db_name DEFAULT CHARACTER SET character_name [COLLATE ...];\n   把表默认的字符集和所有字符列（CHAR,VARCHAR,TEXT）改为新的字符集：\n   ALTER TABLE tbl_name CONVERT TO CHARACTER SET character_name [COLLATE ...]\n   如：ALTER TABLE logtest CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;\n   ```\n\n2. 修改表的默认字符集\n\n   ```mysql\n   ALTER TABLE tbl_name DEFAULT CHARACTER SET character_name [COLLATE...];\n   如：ALTER TABLE logtest DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;\n   ```\n\n3. 修改字段的字符集\n\n   ```mysql\n   ALTER TABLE tbl_name CHANGE c_name c_name CHARACTER SET character_name [COLLATE ...];\n   如：ALTER TABLE logtest CHANGE title title VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci;\n   ```\n\n4. 查看数据库编码\n\n   ```mysql\n   SHOW CREATE DATABASE db_name;\n   ```\n\n5. 查看表编码\n\n   ```mysql\n   SHOW CREATE TABLE tbl_name;\n   ```\n\n6. 查看字段编码\n\n   ```mysql\n   SHOW FULL COLUMNS FROM tbl_name;\n   ```\n\n7. 查看系统的编码字符\n\n   ```mysql\n   SHOW VARIABLES WHERE Variable_name LIKE 'character\\_set\\_%' OR Variable_name LIKE 'collation%';\n   ```\n\n8. MySQL字符集设置\n\n   系统变量：\n\n   ```sh\n   – character_set_server：默认的内部操作字符集\n   \n   – character_set_client：客户端来源数据使用的字符集\n   \n   – character_set_connection：连接层字符集\n   \n   – character_set_results：查询结果字符集\n   \n   – character_set_database：当前选中数据库的默认字符集\n   \n   – character_set_system：系统元数据(字段名等)字符集\n   \n   – 还有以collation_开头的同上面对应的变量，用来描述字符序。\n   ```\n\n   用introducer指定文本字符串的字符集：\n\n   – 格式为：[_charset] ‘string’ [COLLATE collation]\n\n   – 例如：\n\n   ```sql\n   • SELECT _latin1 ‘string’;\n   \n   • SELECT _utf8 ‘你好’ COLLATE utf8_general_ci;\n   \n   –-  由introducer修饰的文本字符串在请求过程中不经过多余的转码，直接转换为内部字符集处理。\n   ```\n\n   #### MySQL中的字符集转换过程\n\n   1. MySQL Server收到请求时将请求数据从character_set_client转换为character_set_connection；\n   2. 进行内部操作前将请求数据从character_set_connection转换为内部操作字符集，其确定方法如下：\n\n   • 使用每个数据字段的CHARACTER SET设定值；\n\n   • 若上述值不存在，则使用对应数据表的DEFAULT CHARACTER SET设定值(MySQL扩展，非SQL标准)；\n\n   • 若上述值不存在，则使用对应数据库的DEFAULT CHARACTER SET设定值；\n\n   • 若上述值不存在，则使用character_set_server设定值。\n\n# 参考\n\n> https://www.cnblogs.com/chyingp/p/mysql-character-set-collation.html\n>\n> https://www.cnblogs.com/qiumingcheng/p/10336170.html\n\n","source":"_posts/mysql/mysql修改字符集.md","raw":"---\ntitle: mysql修改字符集\ndate: 2019-07-27 16:55:17\ntags:\n- mysql\n---\n\n# 概念\n\n1. 字符集（character set）：定义了字符以及字符的编码。\n2. 字符序（collation）：定义了字符的比较规则。\n\n# Mysql字符集\n\n1. 一个字符集对应至少一种字符序（一般是1对多）。\n2. 两个不同的字符集不能有相同的字符序。\n3. 每个字符集都有默认的字符序。\n\n```mysql\n-- 第一种方式\nSHOW CHARACTER SET;\n\n-- 第二种方式\nuse information_schema;\nselect * from CHARACTER_SETS;\n\n-- 例子\nSHOW CHARACTER SET WHERE Charset=\"utf8\";\nSHOW CHARACTER SET LIKE \"utf8%\";\n```\n\n# Mysql字符序\n\n```mysql\n -- 第一种方式\n SHOW COLLATION WHERE Charset = 'utf8';\n \n -- 第二种方式\n USE information_schema;\n SELECT * FROM COLLATIONS WHERE CHARACTER_SET_NAME=\"utf8\";\n```\n\n## 命名规范\n\n字符序的命名，以其对应的字符集作为前缀，如下所示。比如字符序`utf8_general_ci`，标明它是字符集`utf8`的字符序。\n\n更多规则可以参考 [官方文档](https://dev.mysql.com/doc/refman/5.7/en/charset-collation-names.html)。\n\n```mysql\n[information_schema]> SELECT CHARACTER_SET_NAME, COLLATION_NAME FROM COLLATIONS WHERE CHARACTER_SET_NAME=\"utf8\" limit 2; \n```\n\n# 设置修改\n\n1. 修改数据库字符集\n\n   ```mysql\n   ALTER DATABASE db_name DEFAULT CHARACTER SET character_name [COLLATE ...];\n   把表默认的字符集和所有字符列（CHAR,VARCHAR,TEXT）改为新的字符集：\n   ALTER TABLE tbl_name CONVERT TO CHARACTER SET character_name [COLLATE ...]\n   如：ALTER TABLE logtest CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;\n   ```\n\n2. 修改表的默认字符集\n\n   ```mysql\n   ALTER TABLE tbl_name DEFAULT CHARACTER SET character_name [COLLATE...];\n   如：ALTER TABLE logtest DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;\n   ```\n\n3. 修改字段的字符集\n\n   ```mysql\n   ALTER TABLE tbl_name CHANGE c_name c_name CHARACTER SET character_name [COLLATE ...];\n   如：ALTER TABLE logtest CHANGE title title VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci;\n   ```\n\n4. 查看数据库编码\n\n   ```mysql\n   SHOW CREATE DATABASE db_name;\n   ```\n\n5. 查看表编码\n\n   ```mysql\n   SHOW CREATE TABLE tbl_name;\n   ```\n\n6. 查看字段编码\n\n   ```mysql\n   SHOW FULL COLUMNS FROM tbl_name;\n   ```\n\n7. 查看系统的编码字符\n\n   ```mysql\n   SHOW VARIABLES WHERE Variable_name LIKE 'character\\_set\\_%' OR Variable_name LIKE 'collation%';\n   ```\n\n8. MySQL字符集设置\n\n   系统变量：\n\n   ```sh\n   – character_set_server：默认的内部操作字符集\n   \n   – character_set_client：客户端来源数据使用的字符集\n   \n   – character_set_connection：连接层字符集\n   \n   – character_set_results：查询结果字符集\n   \n   – character_set_database：当前选中数据库的默认字符集\n   \n   – character_set_system：系统元数据(字段名等)字符集\n   \n   – 还有以collation_开头的同上面对应的变量，用来描述字符序。\n   ```\n\n   用introducer指定文本字符串的字符集：\n\n   – 格式为：[_charset] ‘string’ [COLLATE collation]\n\n   – 例如：\n\n   ```sql\n   • SELECT _latin1 ‘string’;\n   \n   • SELECT _utf8 ‘你好’ COLLATE utf8_general_ci;\n   \n   –-  由introducer修饰的文本字符串在请求过程中不经过多余的转码，直接转换为内部字符集处理。\n   ```\n\n   #### MySQL中的字符集转换过程\n\n   1. MySQL Server收到请求时将请求数据从character_set_client转换为character_set_connection；\n   2. 进行内部操作前将请求数据从character_set_connection转换为内部操作字符集，其确定方法如下：\n\n   • 使用每个数据字段的CHARACTER SET设定值；\n\n   • 若上述值不存在，则使用对应数据表的DEFAULT CHARACTER SET设定值(MySQL扩展，非SQL标准)；\n\n   • 若上述值不存在，则使用对应数据库的DEFAULT CHARACTER SET设定值；\n\n   • 若上述值不存在，则使用character_set_server设定值。\n\n# 参考\n\n> https://www.cnblogs.com/chyingp/p/mysql-character-set-collation.html\n>\n> https://www.cnblogs.com/qiumingcheng/p/10336170.html\n\n","slug":"mysql/mysql修改字符集","published":1,"updated":"2019-10-14T09:01:07.861Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a43s0037ic1yqf71o5qj","content":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><ol>\n<li>字符集（character set）：定义了字符以及字符的编码。</li>\n<li>字符序（collation）：定义了字符的比较规则。</li>\n</ol>\n<h1 id=\"Mysql字符集\"><a href=\"#Mysql字符集\" class=\"headerlink\" title=\"Mysql字符集\"></a>Mysql字符集</h1><ol>\n<li>一个字符集对应至少一种字符序（一般是1对多）。</li>\n<li>两个不同的字符集不能有相同的字符序。</li>\n<li>每个字符集都有默认的字符序。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 第一种方式</span><br><span class=\"line\">SHOW CHARACTER SET;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 第二种方式</span><br><span class=\"line\">use information_schema;</span><br><span class=\"line\">select * from CHARACTER_SETS;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 例子</span><br><span class=\"line\">SHOW CHARACTER SET WHERE Charset=&quot;utf8&quot;;</span><br><span class=\"line\">SHOW CHARACTER SET LIKE &quot;utf8%&quot;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Mysql字符序\"><a href=\"#Mysql字符序\" class=\"headerlink\" title=\"Mysql字符序\"></a>Mysql字符序</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 第一种方式</span><br><span class=\"line\">SHOW COLLATION WHERE Charset = &apos;utf8&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 第二种方式</span><br><span class=\"line\">USE information_schema;</span><br><span class=\"line\">SELECT * FROM COLLATIONS WHERE CHARACTER_SET_NAME=&quot;utf8&quot;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><p>字符序的命名，以其对应的字符集作为前缀，如下所示。比如字符序<code>utf8_general_ci</code>，标明它是字符集<code>utf8</code>的字符序。</p>\n<p>更多规则可以参考 <a href=\"https://dev.mysql.com/doc/refman/5.7/en/charset-collation-names.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[information_schema]&gt; SELECT CHARACTER_SET_NAME, COLLATION_NAME FROM COLLATIONS WHERE CHARACTER_SET_NAME=&quot;utf8&quot; limit 2;</span><br></pre></td></tr></table></figure>\n<h1 id=\"设置修改\"><a href=\"#设置修改\" class=\"headerlink\" title=\"设置修改\"></a>设置修改</h1><ol>\n<li><p>修改数据库字符集</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER DATABASE db_name DEFAULT CHARACTER SET character_name [COLLATE ...];</span><br><span class=\"line\">把表默认的字符集和所有字符列（CHAR,VARCHAR,TEXT）改为新的字符集：</span><br><span class=\"line\">ALTER TABLE tbl_name CONVERT TO CHARACTER SET character_name [COLLATE ...]</span><br><span class=\"line\">如：ALTER TABLE logtest CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改表的默认字符集</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl_name DEFAULT CHARACTER SET character_name [COLLATE...];</span><br><span class=\"line\">如：ALTER TABLE logtest DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改字段的字符集</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl_name CHANGE c_name c_name CHARACTER SET character_name [COLLATE ...];</span><br><span class=\"line\">如：ALTER TABLE logtest CHANGE title title VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看数据库编码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW CREATE DATABASE db_name;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看表编码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW CREATE TABLE tbl_name;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看字段编码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW FULL COLUMNS FROM tbl_name;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看系统的编码字符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW VARIABLES WHERE Variable_name LIKE &apos;character\\_set\\_%&apos; OR Variable_name LIKE &apos;collation%&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>MySQL字符集设置</p>\n<p>系统变量：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">– character_set_server：默认的内部操作字符集</span><br><span class=\"line\"></span><br><span class=\"line\">– character_set_client：客户端来源数据使用的字符集</span><br><span class=\"line\"></span><br><span class=\"line\">– character_set_connection：连接层字符集</span><br><span class=\"line\"></span><br><span class=\"line\">– character_set_results：查询结果字符集</span><br><span class=\"line\"></span><br><span class=\"line\">– character_set_database：当前选中数据库的默认字符集</span><br><span class=\"line\"></span><br><span class=\"line\">– character_set_system：系统元数据(字段名等)字符集</span><br><span class=\"line\"></span><br><span class=\"line\">– 还有以collation_开头的同上面对应的变量，用来描述字符序。</span><br></pre></td></tr></table></figure>\n<p>用introducer指定文本字符串的字符集：</p>\n<p>– 格式为：[_charset] ‘string’ [COLLATE collation]</p>\n<p>– 例如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">• <span class=\"keyword\">SELECT</span> _latin1 ‘<span class=\"keyword\">string</span>’;</span><br><span class=\"line\"></span><br><span class=\"line\">• <span class=\"keyword\">SELECT</span> _utf8 ‘你好’ <span class=\"keyword\">COLLATE</span> utf8_general_ci;</span><br><span class=\"line\"></span><br><span class=\"line\">–-  由introducer修饰的文本字符串在请求过程中不经过多余的转码，直接转换为内部字符集处理。</span><br></pre></td></tr></table></figure>\n<h4 id=\"MySQL中的字符集转换过程\"><a href=\"#MySQL中的字符集转换过程\" class=\"headerlink\" title=\"MySQL中的字符集转换过程\"></a>MySQL中的字符集转换过程</h4><ol>\n<li>MySQL Server收到请求时将请求数据从character_set_client转换为character_set_connection；</li>\n<li>进行内部操作前将请求数据从character_set_connection转换为内部操作字符集，其确定方法如下：</li>\n</ol>\n<p>• 使用每个数据字段的CHARACTER SET设定值；</p>\n<p>• 若上述值不存在，则使用对应数据表的DEFAULT CHARACTER SET设定值(MySQL扩展，非SQL标准)；</p>\n<p>• 若上述值不存在，则使用对应数据库的DEFAULT CHARACTER SET设定值；</p>\n<p>• 若上述值不存在，则使用character_set_server设定值。</p>\n</li>\n</ol>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://www.cnblogs.com/chyingp/p/mysql-character-set-collation.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/chyingp/p/mysql-character-set-collation.html</a></p>\n<p><a href=\"https://www.cnblogs.com/qiumingcheng/p/10336170.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/qiumingcheng/p/10336170.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><ol>\n<li>字符集（character set）：定义了字符以及字符的编码。</li>\n<li>字符序（collation）：定义了字符的比较规则。</li>\n</ol>\n<h1 id=\"Mysql字符集\"><a href=\"#Mysql字符集\" class=\"headerlink\" title=\"Mysql字符集\"></a>Mysql字符集</h1><ol>\n<li>一个字符集对应至少一种字符序（一般是1对多）。</li>\n<li>两个不同的字符集不能有相同的字符序。</li>\n<li>每个字符集都有默认的字符序。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 第一种方式</span><br><span class=\"line\">SHOW CHARACTER SET;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 第二种方式</span><br><span class=\"line\">use information_schema;</span><br><span class=\"line\">select * from CHARACTER_SETS;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 例子</span><br><span class=\"line\">SHOW CHARACTER SET WHERE Charset=&quot;utf8&quot;;</span><br><span class=\"line\">SHOW CHARACTER SET LIKE &quot;utf8%&quot;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Mysql字符序\"><a href=\"#Mysql字符序\" class=\"headerlink\" title=\"Mysql字符序\"></a>Mysql字符序</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 第一种方式</span><br><span class=\"line\">SHOW COLLATION WHERE Charset = &apos;utf8&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 第二种方式</span><br><span class=\"line\">USE information_schema;</span><br><span class=\"line\">SELECT * FROM COLLATIONS WHERE CHARACTER_SET_NAME=&quot;utf8&quot;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><p>字符序的命名，以其对应的字符集作为前缀，如下所示。比如字符序<code>utf8_general_ci</code>，标明它是字符集<code>utf8</code>的字符序。</p>\n<p>更多规则可以参考 <a href=\"https://dev.mysql.com/doc/refman/5.7/en/charset-collation-names.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[information_schema]&gt; SELECT CHARACTER_SET_NAME, COLLATION_NAME FROM COLLATIONS WHERE CHARACTER_SET_NAME=&quot;utf8&quot; limit 2;</span><br></pre></td></tr></table></figure>\n<h1 id=\"设置修改\"><a href=\"#设置修改\" class=\"headerlink\" title=\"设置修改\"></a>设置修改</h1><ol>\n<li><p>修改数据库字符集</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER DATABASE db_name DEFAULT CHARACTER SET character_name [COLLATE ...];</span><br><span class=\"line\">把表默认的字符集和所有字符列（CHAR,VARCHAR,TEXT）改为新的字符集：</span><br><span class=\"line\">ALTER TABLE tbl_name CONVERT TO CHARACTER SET character_name [COLLATE ...]</span><br><span class=\"line\">如：ALTER TABLE logtest CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改表的默认字符集</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl_name DEFAULT CHARACTER SET character_name [COLLATE...];</span><br><span class=\"line\">如：ALTER TABLE logtest DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改字段的字符集</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl_name CHANGE c_name c_name CHARACTER SET character_name [COLLATE ...];</span><br><span class=\"line\">如：ALTER TABLE logtest CHANGE title title VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看数据库编码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW CREATE DATABASE db_name;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看表编码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW CREATE TABLE tbl_name;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看字段编码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW FULL COLUMNS FROM tbl_name;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看系统的编码字符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW VARIABLES WHERE Variable_name LIKE &apos;character\\_set\\_%&apos; OR Variable_name LIKE &apos;collation%&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>MySQL字符集设置</p>\n<p>系统变量：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">– character_set_server：默认的内部操作字符集</span><br><span class=\"line\"></span><br><span class=\"line\">– character_set_client：客户端来源数据使用的字符集</span><br><span class=\"line\"></span><br><span class=\"line\">– character_set_connection：连接层字符集</span><br><span class=\"line\"></span><br><span class=\"line\">– character_set_results：查询结果字符集</span><br><span class=\"line\"></span><br><span class=\"line\">– character_set_database：当前选中数据库的默认字符集</span><br><span class=\"line\"></span><br><span class=\"line\">– character_set_system：系统元数据(字段名等)字符集</span><br><span class=\"line\"></span><br><span class=\"line\">– 还有以collation_开头的同上面对应的变量，用来描述字符序。</span><br></pre></td></tr></table></figure>\n<p>用introducer指定文本字符串的字符集：</p>\n<p>– 格式为：[_charset] ‘string’ [COLLATE collation]</p>\n<p>– 例如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">• <span class=\"keyword\">SELECT</span> _latin1 ‘<span class=\"keyword\">string</span>’;</span><br><span class=\"line\"></span><br><span class=\"line\">• <span class=\"keyword\">SELECT</span> _utf8 ‘你好’ <span class=\"keyword\">COLLATE</span> utf8_general_ci;</span><br><span class=\"line\"></span><br><span class=\"line\">–-  由introducer修饰的文本字符串在请求过程中不经过多余的转码，直接转换为内部字符集处理。</span><br></pre></td></tr></table></figure>\n<h4 id=\"MySQL中的字符集转换过程\"><a href=\"#MySQL中的字符集转换过程\" class=\"headerlink\" title=\"MySQL中的字符集转换过程\"></a>MySQL中的字符集转换过程</h4><ol>\n<li>MySQL Server收到请求时将请求数据从character_set_client转换为character_set_connection；</li>\n<li>进行内部操作前将请求数据从character_set_connection转换为内部操作字符集，其确定方法如下：</li>\n</ol>\n<p>• 使用每个数据字段的CHARACTER SET设定值；</p>\n<p>• 若上述值不存在，则使用对应数据表的DEFAULT CHARACTER SET设定值(MySQL扩展，非SQL标准)；</p>\n<p>• 若上述值不存在，则使用对应数据库的DEFAULT CHARACTER SET设定值；</p>\n<p>• 若上述值不存在，则使用character_set_server设定值。</p>\n</li>\n</ol>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://www.cnblogs.com/chyingp/p/mysql-character-set-collation.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/chyingp/p/mysql-character-set-collation.html</a></p>\n<p><a href=\"https://www.cnblogs.com/qiumingcheng/p/10336170.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/qiumingcheng/p/10336170.html</a></p>\n</blockquote>\n"},{"title":"centos安装mysql","date":"2019-03-29T07:45:32.000Z","_content":"\n# 添加 MySQL YUM 源\n\n```\n$wget 'https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm'\n$sudo rpm -Uvh mysql57-community-release-el7-11.noarch.rpm\n$yum repolist all | grep mysql\nmysql-connectors-community/x86_64 MySQL Connectors Community                  36\nmysql-tools-community/x86_64      MySQL Tools Community                       47\nmysql57-community/x86_64          MySQL 5.7 Community Server                 187\n```\n\n# 安装MySQL\n\n```\n## 安装最新版\n$sudo yum install mysql-community-server\n$ sudo yum install mysql   ## 安装客户端\n## 安装老版本\n## 1. yum-config-manager\n$ sudo dnf config-manager --disable mysql57-community\n$ sudo dnf config-manager --enable mysql56-community\n$ yum repolist | grep mysql\nmysql-connectors-community/x86_64 MySQL Connectors Community                  36\nmysql-tools-community/x86_64      MySQL Tools Community                       47\nmysql56-community/x86_64          MySQL 5.6 Community Server                 327\n## 2. 直接修改 /etc/yum.repos.d/mysql-community.repo\n# Enable to use MySQL 5.6\n[mysql56-community]\nname=MySQL 5.6 Community Server\nbaseurl=http://repo.mysql.com/yum/mysql-5.6-community/el/7/$basearch/\nenabled=1 #表示当前版本是安装\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql\n[mysql57-community]\nname=MySQL 5.7 Community Server\nbaseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/\nenabled=0 #默认这个是 1\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql\n```\n\n# 启动Mysql\n\n```\n$sudo service mysqld start \n$sudo systemctl start mysqld #CentOS 7\n$sudo systemctl status mysqld\n● mysqld.service - MySQL Community Server\n   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)\n   Active: active (running) since Sat 2017-05-27 12:56:26 CST; 15s ago\n  Process: 2482 ExecStartPost=/usr/bin/mysql-systemd-start post (code=exited, status=0/SUCCESS)\n  Process: 2421 ExecStartPre=/usr/bin/mysql-systemd-start pre (code=exited, status=0/SUCCESS)\n Main PID: 2481 (mysqld_safe)\n   CGroup: /system.slice/mysqld.service\n           ├─2481 /bin/sh /usr/bin/mysqld_safe --basedir=/usr\n           └─2647 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql --plugin-dir=/usr/...\n```\n\n## 修改密码\n\n```\n## 获取临时密码\nsudo grep 'temporary password' /var/log/mysqld.log\n$ mysql -uroot -p  #输入查看到的密码\nmysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass4!';\n```\n\nmysql的密码存在安全等级\n\n```\nshell> mysql_secure_installation\n```\n\n```\nmysql> SHOW VARIABLES LIKE 'validate_password%';\n```\n\n**validate_password_number_count**参数是密码中至少含有的数字个数，当密码策略是MEDIUM或以上时生效。\n\n**validate_password_special_char_count**参数是密码中非英文数字等特殊字符的个数，当密码策略是MEDIUM或以上时生效。\n\n**validate_password_mixed_case_count**参数是密码中英文字符大小写的个数，当密码策略是MEDIUM或以上时生效。\n\n**validate_password_length**参数是密码的长度，这个参数由下面的公式生成\n\nvalidate_password_number_count+ validate_password_special_char_count+ (2 * validate_password_mixed_case_count)\n\n**validate_password_dictionary_file**参数是指定密码验证的字典文件路径。\n\n**validate_password_policy**这个参数可以设为0、1、2，分别代表从低到高的密码强度，此参数的默认值为1，如果想将密码强度改弱，则更改此参数为0。\n\n\n\n## 修改密码策略\n\n更改密码策略为LOW  \n\n```\nmysql> set global validate_password_policy=0;\n```\n\n更改密码长度  \n\n```\nmysql> set global validate_password_length=0;\n```\n\n## 安全设置\n\n```\n## 会提示设置5个关键位置\n## 设置 root 密码\n## 禁止 root 账号远程登录\n## 禁止匿名账号（anonymous）登录\n## 删除测试库\n## 是否确认修改\n$ mysql_secure_installation\n```\n\n# 安装三方插件\n\n```\nyum --disablerepo=\\* --enablerepo='mysql*-community*' list available\n```\n\n# 修改编码\n\n```\n## /etc/my.cnf\n[client]\ndefault-character-set = utf8\n[mysqld]\ndefault-storage-engine = INNODB\ncharacter-set-server = utf8\ncollation-server = utf8_general_ci #不区分大小写\ncollation-server =  utf8_bin #区分大小写\ncollation-server = utf8_unicode_ci #比 utf8_general_ci 更准确\n```\n\n# 修改服务器时间\n\n```\n## mysql 中默认的时间戳是 UTC 时间，需要改为服务器时间的话官网提供了 3 种方式\n$ mysql_tzinfo_to_sql tz_dir\n$ mysql_tzinfo_to_sql tz_file tz_name\n$ mysql_tzinfo_to_sql --leap tz_file\n## tz_dir 代表服务器时间数据库，CentOS 7 中默认的目录为 /usr/share/zoneinfo ，tz_name 为具体的时区。如果设置的时区需要闰秒，则使用 --leap，具体的用法如下：\n$ mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root -p mysql\n$ mysql_tzinfo_to_sql tz_file tz_name | mysql -u root mysql\n$ mysql_tzinfo_to_sql --leap tz_file | mysql -u root mysql\n> set global time_zone = '+8:00';  ##修改mysql全局时区为北京时间，即我们所在的东8区\n> set time_zone = '+8:00';  ##修改当前会话时区\n> flush privileges;  #立即生效\n## 通过修改my.cnf配置文件来修改时区\n# vim /etc/my.cnf  ##在[mysqld]区域中加上\ndefault-time_zone = '+8:00'\n# /etc/init.d/mysqld restart  ##重启mysql使新时区生效\n```\n\n","source":"_posts/mysql/mysql安装.md","raw":"---\ntitle: centos安装mysql\ndate: 2019-03-29 15:45:32\ntags:\n- linux\n---\n\n# 添加 MySQL YUM 源\n\n```\n$wget 'https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm'\n$sudo rpm -Uvh mysql57-community-release-el7-11.noarch.rpm\n$yum repolist all | grep mysql\nmysql-connectors-community/x86_64 MySQL Connectors Community                  36\nmysql-tools-community/x86_64      MySQL Tools Community                       47\nmysql57-community/x86_64          MySQL 5.7 Community Server                 187\n```\n\n# 安装MySQL\n\n```\n## 安装最新版\n$sudo yum install mysql-community-server\n$ sudo yum install mysql   ## 安装客户端\n## 安装老版本\n## 1. yum-config-manager\n$ sudo dnf config-manager --disable mysql57-community\n$ sudo dnf config-manager --enable mysql56-community\n$ yum repolist | grep mysql\nmysql-connectors-community/x86_64 MySQL Connectors Community                  36\nmysql-tools-community/x86_64      MySQL Tools Community                       47\nmysql56-community/x86_64          MySQL 5.6 Community Server                 327\n## 2. 直接修改 /etc/yum.repos.d/mysql-community.repo\n# Enable to use MySQL 5.6\n[mysql56-community]\nname=MySQL 5.6 Community Server\nbaseurl=http://repo.mysql.com/yum/mysql-5.6-community/el/7/$basearch/\nenabled=1 #表示当前版本是安装\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql\n[mysql57-community]\nname=MySQL 5.7 Community Server\nbaseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/\nenabled=0 #默认这个是 1\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql\n```\n\n# 启动Mysql\n\n```\n$sudo service mysqld start \n$sudo systemctl start mysqld #CentOS 7\n$sudo systemctl status mysqld\n● mysqld.service - MySQL Community Server\n   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)\n   Active: active (running) since Sat 2017-05-27 12:56:26 CST; 15s ago\n  Process: 2482 ExecStartPost=/usr/bin/mysql-systemd-start post (code=exited, status=0/SUCCESS)\n  Process: 2421 ExecStartPre=/usr/bin/mysql-systemd-start pre (code=exited, status=0/SUCCESS)\n Main PID: 2481 (mysqld_safe)\n   CGroup: /system.slice/mysqld.service\n           ├─2481 /bin/sh /usr/bin/mysqld_safe --basedir=/usr\n           └─2647 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql --plugin-dir=/usr/...\n```\n\n## 修改密码\n\n```\n## 获取临时密码\nsudo grep 'temporary password' /var/log/mysqld.log\n$ mysql -uroot -p  #输入查看到的密码\nmysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass4!';\n```\n\nmysql的密码存在安全等级\n\n```\nshell> mysql_secure_installation\n```\n\n```\nmysql> SHOW VARIABLES LIKE 'validate_password%';\n```\n\n**validate_password_number_count**参数是密码中至少含有的数字个数，当密码策略是MEDIUM或以上时生效。\n\n**validate_password_special_char_count**参数是密码中非英文数字等特殊字符的个数，当密码策略是MEDIUM或以上时生效。\n\n**validate_password_mixed_case_count**参数是密码中英文字符大小写的个数，当密码策略是MEDIUM或以上时生效。\n\n**validate_password_length**参数是密码的长度，这个参数由下面的公式生成\n\nvalidate_password_number_count+ validate_password_special_char_count+ (2 * validate_password_mixed_case_count)\n\n**validate_password_dictionary_file**参数是指定密码验证的字典文件路径。\n\n**validate_password_policy**这个参数可以设为0、1、2，分别代表从低到高的密码强度，此参数的默认值为1，如果想将密码强度改弱，则更改此参数为0。\n\n\n\n## 修改密码策略\n\n更改密码策略为LOW  \n\n```\nmysql> set global validate_password_policy=0;\n```\n\n更改密码长度  \n\n```\nmysql> set global validate_password_length=0;\n```\n\n## 安全设置\n\n```\n## 会提示设置5个关键位置\n## 设置 root 密码\n## 禁止 root 账号远程登录\n## 禁止匿名账号（anonymous）登录\n## 删除测试库\n## 是否确认修改\n$ mysql_secure_installation\n```\n\n# 安装三方插件\n\n```\nyum --disablerepo=\\* --enablerepo='mysql*-community*' list available\n```\n\n# 修改编码\n\n```\n## /etc/my.cnf\n[client]\ndefault-character-set = utf8\n[mysqld]\ndefault-storage-engine = INNODB\ncharacter-set-server = utf8\ncollation-server = utf8_general_ci #不区分大小写\ncollation-server =  utf8_bin #区分大小写\ncollation-server = utf8_unicode_ci #比 utf8_general_ci 更准确\n```\n\n# 修改服务器时间\n\n```\n## mysql 中默认的时间戳是 UTC 时间，需要改为服务器时间的话官网提供了 3 种方式\n$ mysql_tzinfo_to_sql tz_dir\n$ mysql_tzinfo_to_sql tz_file tz_name\n$ mysql_tzinfo_to_sql --leap tz_file\n## tz_dir 代表服务器时间数据库，CentOS 7 中默认的目录为 /usr/share/zoneinfo ，tz_name 为具体的时区。如果设置的时区需要闰秒，则使用 --leap，具体的用法如下：\n$ mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root -p mysql\n$ mysql_tzinfo_to_sql tz_file tz_name | mysql -u root mysql\n$ mysql_tzinfo_to_sql --leap tz_file | mysql -u root mysql\n> set global time_zone = '+8:00';  ##修改mysql全局时区为北京时间，即我们所在的东8区\n> set time_zone = '+8:00';  ##修改当前会话时区\n> flush privileges;  #立即生效\n## 通过修改my.cnf配置文件来修改时区\n# vim /etc/my.cnf  ##在[mysqld]区域中加上\ndefault-time_zone = '+8:00'\n# /etc/init.d/mysqld restart  ##重启mysql使新时区生效\n```\n\n","slug":"mysql/mysql安装","published":1,"updated":"2019-10-14T09:01:07.874Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a43t0039ic1ya2o23k25","content":"<h1 id=\"添加-MySQL-YUM-源\"><a href=\"#添加-MySQL-YUM-源\" class=\"headerlink\" title=\"添加 MySQL YUM 源\"></a>添加 MySQL YUM 源</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$wget &apos;https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm&apos;</span><br><span class=\"line\">$sudo rpm -Uvh mysql57-community-release-el7-11.noarch.rpm</span><br><span class=\"line\">$yum repolist all | grep mysql</span><br><span class=\"line\">mysql-connectors-community/x86_64 MySQL Connectors Community                  36</span><br><span class=\"line\">mysql-tools-community/x86_64      MySQL Tools Community                       47</span><br><span class=\"line\">mysql57-community/x86_64          MySQL 5.7 Community Server                 187</span><br></pre></td></tr></table></figure>\n<h1 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 安装最新版</span><br><span class=\"line\">$sudo yum install mysql-community-server</span><br><span class=\"line\">$ sudo yum install mysql   ## 安装客户端</span><br><span class=\"line\">## 安装老版本</span><br><span class=\"line\">## 1. yum-config-manager</span><br><span class=\"line\">$ sudo dnf config-manager --disable mysql57-community</span><br><span class=\"line\">$ sudo dnf config-manager --enable mysql56-community</span><br><span class=\"line\">$ yum repolist | grep mysql</span><br><span class=\"line\">mysql-connectors-community/x86_64 MySQL Connectors Community                  36</span><br><span class=\"line\">mysql-tools-community/x86_64      MySQL Tools Community                       47</span><br><span class=\"line\">mysql56-community/x86_64          MySQL 5.6 Community Server                 327</span><br><span class=\"line\">## 2. 直接修改 /etc/yum.repos.d/mysql-community.repo</span><br><span class=\"line\"># Enable to use MySQL 5.6</span><br><span class=\"line\">[mysql56-community]</span><br><span class=\"line\">name=MySQL 5.6 Community Server</span><br><span class=\"line\">baseurl=http://repo.mysql.com/yum/mysql-5.6-community/el/7/$basearch/</span><br><span class=\"line\">enabled=1 #表示当前版本是安装</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br><span class=\"line\">[mysql57-community]</span><br><span class=\"line\">name=MySQL 5.7 Community Server</span><br><span class=\"line\">baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/</span><br><span class=\"line\">enabled=0 #默认这个是 1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></table></figure>\n<h1 id=\"启动Mysql\"><a href=\"#启动Mysql\" class=\"headerlink\" title=\"启动Mysql\"></a>启动Mysql</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sudo service mysqld start </span><br><span class=\"line\">$sudo systemctl start mysqld #CentOS 7</span><br><span class=\"line\">$sudo systemctl status mysqld</span><br><span class=\"line\">● mysqld.service - MySQL Community Server</span><br><span class=\"line\">   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Sat 2017-05-27 12:56:26 CST; 15s ago</span><br><span class=\"line\">  Process: 2482 ExecStartPost=/usr/bin/mysql-systemd-start post (code=exited, status=0/SUCCESS)</span><br><span class=\"line\">  Process: 2421 ExecStartPre=/usr/bin/mysql-systemd-start pre (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 2481 (mysqld_safe)</span><br><span class=\"line\">   CGroup: /system.slice/mysqld.service</span><br><span class=\"line\">           ├─2481 /bin/sh /usr/bin/mysqld_safe --basedir=/usr</span><br><span class=\"line\">           └─2647 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql --plugin-dir=/usr/...</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 获取临时密码</span><br><span class=\"line\">sudo grep &apos;temporary password&apos; /var/log/mysqld.log</span><br><span class=\"line\">$ mysql -uroot -p  #输入查看到的密码</span><br><span class=\"line\">mysql&gt; ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;MyNewPass4!&apos;;</span><br></pre></td></tr></table></figure>\n<p>mysql的密码存在安全等级</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; mysql_secure_installation</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SHOW VARIABLES LIKE &apos;validate_password%&apos;;</span><br></pre></td></tr></table></figure>\n<p><strong>validate_password_number_count</strong>参数是密码中至少含有的数字个数，当密码策略是MEDIUM或以上时生效。</p>\n<p><strong>validate_password_special_char_count</strong>参数是密码中非英文数字等特殊字符的个数，当密码策略是MEDIUM或以上时生效。</p>\n<p><strong>validate_password_mixed_case_count</strong>参数是密码中英文字符大小写的个数，当密码策略是MEDIUM或以上时生效。</p>\n<p><strong>validate_password_length</strong>参数是密码的长度，这个参数由下面的公式生成</p>\n<p>validate_password_number_count+ validate_password_special_char_count+ (2 * validate_password_mixed_case_count)</p>\n<p><strong>validate_password_dictionary_file</strong>参数是指定密码验证的字典文件路径。</p>\n<p><strong>validate_password_policy</strong>这个参数可以设为0、1、2，分别代表从低到高的密码强度，此参数的默认值为1，如果想将密码强度改弱，则更改此参数为0。</p>\n<h2 id=\"修改密码策略\"><a href=\"#修改密码策略\" class=\"headerlink\" title=\"修改密码策略\"></a>修改密码策略</h2><p>更改密码策略为LOW  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; set global validate_password_policy=0;</span><br></pre></td></tr></table></figure>\n<p>更改密码长度  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; set global validate_password_length=0;</span><br></pre></td></tr></table></figure>\n<h2 id=\"安全设置\"><a href=\"#安全设置\" class=\"headerlink\" title=\"安全设置\"></a>安全设置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 会提示设置5个关键位置</span><br><span class=\"line\">## 设置 root 密码</span><br><span class=\"line\">## 禁止 root 账号远程登录</span><br><span class=\"line\">## 禁止匿名账号（anonymous）登录</span><br><span class=\"line\">## 删除测试库</span><br><span class=\"line\">## 是否确认修改</span><br><span class=\"line\">$ mysql_secure_installation</span><br></pre></td></tr></table></figure>\n<h1 id=\"安装三方插件\"><a href=\"#安装三方插件\" class=\"headerlink\" title=\"安装三方插件\"></a>安装三方插件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum --disablerepo=\\* --enablerepo=&apos;mysql*-community*&apos; list available</span><br></pre></td></tr></table></figure>\n<h1 id=\"修改编码\"><a href=\"#修改编码\" class=\"headerlink\" title=\"修改编码\"></a>修改编码</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## /etc/my.cnf</span><br><span class=\"line\">[client]</span><br><span class=\"line\">default-character-set = utf8</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">default-storage-engine = INNODB</span><br><span class=\"line\">character-set-server = utf8</span><br><span class=\"line\">collation-server = utf8_general_ci #不区分大小写</span><br><span class=\"line\">collation-server =  utf8_bin #区分大小写</span><br><span class=\"line\">collation-server = utf8_unicode_ci #比 utf8_general_ci 更准确</span><br></pre></td></tr></table></figure>\n<h1 id=\"修改服务器时间\"><a href=\"#修改服务器时间\" class=\"headerlink\" title=\"修改服务器时间\"></a>修改服务器时间</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## mysql 中默认的时间戳是 UTC 时间，需要改为服务器时间的话官网提供了 3 种方式</span><br><span class=\"line\">$ mysql_tzinfo_to_sql tz_dir</span><br><span class=\"line\">$ mysql_tzinfo_to_sql tz_file tz_name</span><br><span class=\"line\">$ mysql_tzinfo_to_sql --leap tz_file</span><br><span class=\"line\">## tz_dir 代表服务器时间数据库，CentOS 7 中默认的目录为 /usr/share/zoneinfo ，tz_name 为具体的时区。如果设置的时区需要闰秒，则使用 --leap，具体的用法如下：</span><br><span class=\"line\">$ mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root -p mysql</span><br><span class=\"line\">$ mysql_tzinfo_to_sql tz_file tz_name | mysql -u root mysql</span><br><span class=\"line\">$ mysql_tzinfo_to_sql --leap tz_file | mysql -u root mysql</span><br><span class=\"line\">&gt; set global time_zone = &apos;+8:00&apos;;  ##修改mysql全局时区为北京时间，即我们所在的东8区</span><br><span class=\"line\">&gt; set time_zone = &apos;+8:00&apos;;  ##修改当前会话时区</span><br><span class=\"line\">&gt; flush privileges;  #立即生效</span><br><span class=\"line\">## 通过修改my.cnf配置文件来修改时区</span><br><span class=\"line\"># vim /etc/my.cnf  ##在[mysqld]区域中加上</span><br><span class=\"line\">default-time_zone = &apos;+8:00&apos;</span><br><span class=\"line\"># /etc/init.d/mysqld restart  ##重启mysql使新时区生效</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"添加-MySQL-YUM-源\"><a href=\"#添加-MySQL-YUM-源\" class=\"headerlink\" title=\"添加 MySQL YUM 源\"></a>添加 MySQL YUM 源</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$wget &apos;https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm&apos;</span><br><span class=\"line\">$sudo rpm -Uvh mysql57-community-release-el7-11.noarch.rpm</span><br><span class=\"line\">$yum repolist all | grep mysql</span><br><span class=\"line\">mysql-connectors-community/x86_64 MySQL Connectors Community                  36</span><br><span class=\"line\">mysql-tools-community/x86_64      MySQL Tools Community                       47</span><br><span class=\"line\">mysql57-community/x86_64          MySQL 5.7 Community Server                 187</span><br></pre></td></tr></table></figure>\n<h1 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 安装最新版</span><br><span class=\"line\">$sudo yum install mysql-community-server</span><br><span class=\"line\">$ sudo yum install mysql   ## 安装客户端</span><br><span class=\"line\">## 安装老版本</span><br><span class=\"line\">## 1. yum-config-manager</span><br><span class=\"line\">$ sudo dnf config-manager --disable mysql57-community</span><br><span class=\"line\">$ sudo dnf config-manager --enable mysql56-community</span><br><span class=\"line\">$ yum repolist | grep mysql</span><br><span class=\"line\">mysql-connectors-community/x86_64 MySQL Connectors Community                  36</span><br><span class=\"line\">mysql-tools-community/x86_64      MySQL Tools Community                       47</span><br><span class=\"line\">mysql56-community/x86_64          MySQL 5.6 Community Server                 327</span><br><span class=\"line\">## 2. 直接修改 /etc/yum.repos.d/mysql-community.repo</span><br><span class=\"line\"># Enable to use MySQL 5.6</span><br><span class=\"line\">[mysql56-community]</span><br><span class=\"line\">name=MySQL 5.6 Community Server</span><br><span class=\"line\">baseurl=http://repo.mysql.com/yum/mysql-5.6-community/el/7/$basearch/</span><br><span class=\"line\">enabled=1 #表示当前版本是安装</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br><span class=\"line\">[mysql57-community]</span><br><span class=\"line\">name=MySQL 5.7 Community Server</span><br><span class=\"line\">baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/</span><br><span class=\"line\">enabled=0 #默认这个是 1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></table></figure>\n<h1 id=\"启动Mysql\"><a href=\"#启动Mysql\" class=\"headerlink\" title=\"启动Mysql\"></a>启动Mysql</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sudo service mysqld start </span><br><span class=\"line\">$sudo systemctl start mysqld #CentOS 7</span><br><span class=\"line\">$sudo systemctl status mysqld</span><br><span class=\"line\">● mysqld.service - MySQL Community Server</span><br><span class=\"line\">   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Sat 2017-05-27 12:56:26 CST; 15s ago</span><br><span class=\"line\">  Process: 2482 ExecStartPost=/usr/bin/mysql-systemd-start post (code=exited, status=0/SUCCESS)</span><br><span class=\"line\">  Process: 2421 ExecStartPre=/usr/bin/mysql-systemd-start pre (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 2481 (mysqld_safe)</span><br><span class=\"line\">   CGroup: /system.slice/mysqld.service</span><br><span class=\"line\">           ├─2481 /bin/sh /usr/bin/mysqld_safe --basedir=/usr</span><br><span class=\"line\">           └─2647 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql --plugin-dir=/usr/...</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 获取临时密码</span><br><span class=\"line\">sudo grep &apos;temporary password&apos; /var/log/mysqld.log</span><br><span class=\"line\">$ mysql -uroot -p  #输入查看到的密码</span><br><span class=\"line\">mysql&gt; ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;MyNewPass4!&apos;;</span><br></pre></td></tr></table></figure>\n<p>mysql的密码存在安全等级</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; mysql_secure_installation</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SHOW VARIABLES LIKE &apos;validate_password%&apos;;</span><br></pre></td></tr></table></figure>\n<p><strong>validate_password_number_count</strong>参数是密码中至少含有的数字个数，当密码策略是MEDIUM或以上时生效。</p>\n<p><strong>validate_password_special_char_count</strong>参数是密码中非英文数字等特殊字符的个数，当密码策略是MEDIUM或以上时生效。</p>\n<p><strong>validate_password_mixed_case_count</strong>参数是密码中英文字符大小写的个数，当密码策略是MEDIUM或以上时生效。</p>\n<p><strong>validate_password_length</strong>参数是密码的长度，这个参数由下面的公式生成</p>\n<p>validate_password_number_count+ validate_password_special_char_count+ (2 * validate_password_mixed_case_count)</p>\n<p><strong>validate_password_dictionary_file</strong>参数是指定密码验证的字典文件路径。</p>\n<p><strong>validate_password_policy</strong>这个参数可以设为0、1、2，分别代表从低到高的密码强度，此参数的默认值为1，如果想将密码强度改弱，则更改此参数为0。</p>\n<h2 id=\"修改密码策略\"><a href=\"#修改密码策略\" class=\"headerlink\" title=\"修改密码策略\"></a>修改密码策略</h2><p>更改密码策略为LOW  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; set global validate_password_policy=0;</span><br></pre></td></tr></table></figure>\n<p>更改密码长度  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; set global validate_password_length=0;</span><br></pre></td></tr></table></figure>\n<h2 id=\"安全设置\"><a href=\"#安全设置\" class=\"headerlink\" title=\"安全设置\"></a>安全设置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 会提示设置5个关键位置</span><br><span class=\"line\">## 设置 root 密码</span><br><span class=\"line\">## 禁止 root 账号远程登录</span><br><span class=\"line\">## 禁止匿名账号（anonymous）登录</span><br><span class=\"line\">## 删除测试库</span><br><span class=\"line\">## 是否确认修改</span><br><span class=\"line\">$ mysql_secure_installation</span><br></pre></td></tr></table></figure>\n<h1 id=\"安装三方插件\"><a href=\"#安装三方插件\" class=\"headerlink\" title=\"安装三方插件\"></a>安装三方插件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum --disablerepo=\\* --enablerepo=&apos;mysql*-community*&apos; list available</span><br></pre></td></tr></table></figure>\n<h1 id=\"修改编码\"><a href=\"#修改编码\" class=\"headerlink\" title=\"修改编码\"></a>修改编码</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## /etc/my.cnf</span><br><span class=\"line\">[client]</span><br><span class=\"line\">default-character-set = utf8</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">default-storage-engine = INNODB</span><br><span class=\"line\">character-set-server = utf8</span><br><span class=\"line\">collation-server = utf8_general_ci #不区分大小写</span><br><span class=\"line\">collation-server =  utf8_bin #区分大小写</span><br><span class=\"line\">collation-server = utf8_unicode_ci #比 utf8_general_ci 更准确</span><br></pre></td></tr></table></figure>\n<h1 id=\"修改服务器时间\"><a href=\"#修改服务器时间\" class=\"headerlink\" title=\"修改服务器时间\"></a>修改服务器时间</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## mysql 中默认的时间戳是 UTC 时间，需要改为服务器时间的话官网提供了 3 种方式</span><br><span class=\"line\">$ mysql_tzinfo_to_sql tz_dir</span><br><span class=\"line\">$ mysql_tzinfo_to_sql tz_file tz_name</span><br><span class=\"line\">$ mysql_tzinfo_to_sql --leap tz_file</span><br><span class=\"line\">## tz_dir 代表服务器时间数据库，CentOS 7 中默认的目录为 /usr/share/zoneinfo ，tz_name 为具体的时区。如果设置的时区需要闰秒，则使用 --leap，具体的用法如下：</span><br><span class=\"line\">$ mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root -p mysql</span><br><span class=\"line\">$ mysql_tzinfo_to_sql tz_file tz_name | mysql -u root mysql</span><br><span class=\"line\">$ mysql_tzinfo_to_sql --leap tz_file | mysql -u root mysql</span><br><span class=\"line\">&gt; set global time_zone = &apos;+8:00&apos;;  ##修改mysql全局时区为北京时间，即我们所在的东8区</span><br><span class=\"line\">&gt; set time_zone = &apos;+8:00&apos;;  ##修改当前会话时区</span><br><span class=\"line\">&gt; flush privileges;  #立即生效</span><br><span class=\"line\">## 通过修改my.cnf配置文件来修改时区</span><br><span class=\"line\"># vim /etc/my.cnf  ##在[mysqld]区域中加上</span><br><span class=\"line\">default-time_zone = &apos;+8:00&apos;</span><br><span class=\"line\"># /etc/init.d/mysqld restart  ##重启mysql使新时区生效</span><br></pre></td></tr></table></figure>\n"},{"title":"mysql性能检测","date":"2019-08-31T15:26:45.000Z","_content":"\n# 性能检测蝉蛹命令\n\n1. show status\n2. show processlist\n3. show variables\n\n# 瓶颈分析常用命令\n\n## 获取mysql用户下的进程总数\n\n```shell\nps -ef | awk '{print $1}' | grep \"mysql\" | grep -v \"grep\" | wc -l\n```\n\n## 主机性能状态\n\n```shell\nuptime\n```\n\n## CPU使用率\n\n```shell\ntop\nvmstat\n```\n\n## 磁盘IO量\n\n```shell\nvmstat\niostat\n```\n\n## swap进出量\n\n```shell\nfree -m\n```\n\n# 数据库性能状态\n\n## QPS\n\n**方法一 基于 questions  计算qps,基于  com_commit  com_rollback 计算tps**\n\n```sql\nquestions = show global status like 'questions';\n\nuptime = show global status like 'uptime';\n\nqps=questions/uptime\n```\n\n```sql\ncom_commit = show global status like 'com_commit';\n\ncom_rollback = show global status like 'com_rollback';\n\nuptime = show global status like 'uptime';\n\ntps=(com_commit + com_rollback)/uptime\n```\n\n**方法二  基于 com_\\* 的status 变量计算tps ,qps**\n\n使用如下命令：\n\n```sql\nshow global status where variable_name in('com_select','com_insert','com_delete','com_update');\n\n获取间隔1s 的 com_*的值，并作差值运算\n\ndel_diff = (int(mystat2['com_delete'])   - int(mystat1['com_delete']) ) / diff\n\nins_diff = (int(mystat2['com_insert'])    - int(mystat1['com_insert']) ) / diff\n\nsel_diff = (int(mystat2['com_select'])    - int(mystat1['com_select']) ) / diff\n\nupd_diff = (int(mystat2['com_update'])   - int(mystat1['com_update']) ) / diff\n\n\n```\n\n**总结：**\n\nQuestions 是记录了从mysqld启动以来所有的select，dml 次数包括show 命令的查询的次数。这样多少有失准确性，比如很多数据库有监控系统在运行，每5秒对数据库进行一次show 查询来获取当前数据库的状态，而这些查询就被记录到QPS,TPS统计中，造成一定的\"数据污染\".\n\n如果数据库中存在比较多的myisam表，则计算还是questions 比较合适。\n\n如果数据库中存在比较多的innodb表，则计算以com_*数据来源比较合适\n\n## TPS\n\nTPS = (Com_commit + Com_rollback) / seconds \n\n```sql\nshow status like 'Com_commit'; \nshow status like 'Com_rollback';\n```\n\n## key Buffer 命中率\n\nkey_buffer_read_hits = (1-key_reads / key_read_requests) * 100% \nkey_buffer_write_hits = (1-key_writes / key_write_requests) * 100%\n\n```sql\nshow status like 'Key%';\n```\n\n## InnoDB Buffer命中率\n\ninnodb_buffer_read_hits = (1 - innodb_buffer_pool_reads / innodb_buffer_pool_read_requests) * 100%\n\n```sql\nshow status like 'innodb_buffer_pool_read%';\n```\n\n## Query Cache命中率\n\nQuery_cache_hits = (Qcahce_hits / (Qcache_hits + Qcache_inserts )) * 100%;\n\n```sql\n show status like 'Qcache%';\n```\n\n## Table Cache状态量\n\n```sql\nshow status like 'open%';\n```\n\n## Thread Cache 命中率\n\nThread_cache_hits = (1 - Threads_created / connections ) * 100%\n\n```sql\nshow status like 'Thread%';\nshow status like 'Connections';\n```\n\n## 锁定状态\n\n```sql\nshow status like '%lock%';\n```\n\n## 复制延时量\n\n```sql\nshow slave status;\n```\n\n## Tmp Table 状况(临时表状况)\n\n```sql\nshow status like 'Create_tmp%';\n```\n\n## Binlog Cache 使用状况 \n\n```sql\nshow status like 'Binlog_cache%';\n```\n\n## Innodb_log_waits\n\n```SQL\nshow status like 'innodb_log_waits';\n```\n\n\n\n\n\n\n\n# 参考\n\n<https://blog.csdn.net/li_adou/article/details/78791972>\n\n","source":"_posts/mysql/mysql性能检测.md","raw":"---\ntitle: mysql性能检测\ndate: 2019-08-31 23:26:45\ntags: mysql\n---\n\n# 性能检测蝉蛹命令\n\n1. show status\n2. show processlist\n3. show variables\n\n# 瓶颈分析常用命令\n\n## 获取mysql用户下的进程总数\n\n```shell\nps -ef | awk '{print $1}' | grep \"mysql\" | grep -v \"grep\" | wc -l\n```\n\n## 主机性能状态\n\n```shell\nuptime\n```\n\n## CPU使用率\n\n```shell\ntop\nvmstat\n```\n\n## 磁盘IO量\n\n```shell\nvmstat\niostat\n```\n\n## swap进出量\n\n```shell\nfree -m\n```\n\n# 数据库性能状态\n\n## QPS\n\n**方法一 基于 questions  计算qps,基于  com_commit  com_rollback 计算tps**\n\n```sql\nquestions = show global status like 'questions';\n\nuptime = show global status like 'uptime';\n\nqps=questions/uptime\n```\n\n```sql\ncom_commit = show global status like 'com_commit';\n\ncom_rollback = show global status like 'com_rollback';\n\nuptime = show global status like 'uptime';\n\ntps=(com_commit + com_rollback)/uptime\n```\n\n**方法二  基于 com_\\* 的status 变量计算tps ,qps**\n\n使用如下命令：\n\n```sql\nshow global status where variable_name in('com_select','com_insert','com_delete','com_update');\n\n获取间隔1s 的 com_*的值，并作差值运算\n\ndel_diff = (int(mystat2['com_delete'])   - int(mystat1['com_delete']) ) / diff\n\nins_diff = (int(mystat2['com_insert'])    - int(mystat1['com_insert']) ) / diff\n\nsel_diff = (int(mystat2['com_select'])    - int(mystat1['com_select']) ) / diff\n\nupd_diff = (int(mystat2['com_update'])   - int(mystat1['com_update']) ) / diff\n\n\n```\n\n**总结：**\n\nQuestions 是记录了从mysqld启动以来所有的select，dml 次数包括show 命令的查询的次数。这样多少有失准确性，比如很多数据库有监控系统在运行，每5秒对数据库进行一次show 查询来获取当前数据库的状态，而这些查询就被记录到QPS,TPS统计中，造成一定的\"数据污染\".\n\n如果数据库中存在比较多的myisam表，则计算还是questions 比较合适。\n\n如果数据库中存在比较多的innodb表，则计算以com_*数据来源比较合适\n\n## TPS\n\nTPS = (Com_commit + Com_rollback) / seconds \n\n```sql\nshow status like 'Com_commit'; \nshow status like 'Com_rollback';\n```\n\n## key Buffer 命中率\n\nkey_buffer_read_hits = (1-key_reads / key_read_requests) * 100% \nkey_buffer_write_hits = (1-key_writes / key_write_requests) * 100%\n\n```sql\nshow status like 'Key%';\n```\n\n## InnoDB Buffer命中率\n\ninnodb_buffer_read_hits = (1 - innodb_buffer_pool_reads / innodb_buffer_pool_read_requests) * 100%\n\n```sql\nshow status like 'innodb_buffer_pool_read%';\n```\n\n## Query Cache命中率\n\nQuery_cache_hits = (Qcahce_hits / (Qcache_hits + Qcache_inserts )) * 100%;\n\n```sql\n show status like 'Qcache%';\n```\n\n## Table Cache状态量\n\n```sql\nshow status like 'open%';\n```\n\n## Thread Cache 命中率\n\nThread_cache_hits = (1 - Threads_created / connections ) * 100%\n\n```sql\nshow status like 'Thread%';\nshow status like 'Connections';\n```\n\n## 锁定状态\n\n```sql\nshow status like '%lock%';\n```\n\n## 复制延时量\n\n```sql\nshow slave status;\n```\n\n## Tmp Table 状况(临时表状况)\n\n```sql\nshow status like 'Create_tmp%';\n```\n\n## Binlog Cache 使用状况 \n\n```sql\nshow status like 'Binlog_cache%';\n```\n\n## Innodb_log_waits\n\n```SQL\nshow status like 'innodb_log_waits';\n```\n\n\n\n\n\n\n\n# 参考\n\n<https://blog.csdn.net/li_adou/article/details/78791972>\n\n","slug":"mysql/mysql性能检测","published":1,"updated":"2019-10-14T09:01:07.878Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a43u003bic1ykhv6rups","content":"<h1 id=\"性能检测蝉蛹命令\"><a href=\"#性能检测蝉蛹命令\" class=\"headerlink\" title=\"性能检测蝉蛹命令\"></a>性能检测蝉蛹命令</h1><ol>\n<li>show status</li>\n<li>show processlist</li>\n<li>show variables</li>\n</ol>\n<h1 id=\"瓶颈分析常用命令\"><a href=\"#瓶颈分析常用命令\" class=\"headerlink\" title=\"瓶颈分析常用命令\"></a>瓶颈分析常用命令</h1><h2 id=\"获取mysql用户下的进程总数\"><a href=\"#获取mysql用户下的进程总数\" class=\"headerlink\" title=\"获取mysql用户下的进程总数\"></a>获取mysql用户下的进程总数</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | awk '&#123;print $1&#125;' | grep \"mysql\" | grep -v \"grep\" | wc -l</span><br></pre></td></tr></table></figure>\n<h2 id=\"主机性能状态\"><a href=\"#主机性能状态\" class=\"headerlink\" title=\"主机性能状态\"></a>主机性能状态</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uptime</span><br></pre></td></tr></table></figure>\n<h2 id=\"CPU使用率\"><a href=\"#CPU使用率\" class=\"headerlink\" title=\"CPU使用率\"></a>CPU使用率</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top</span><br><span class=\"line\">vmstat</span><br></pre></td></tr></table></figure>\n<h2 id=\"磁盘IO量\"><a href=\"#磁盘IO量\" class=\"headerlink\" title=\"磁盘IO量\"></a>磁盘IO量</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vmstat</span><br><span class=\"line\">iostat</span><br></pre></td></tr></table></figure>\n<h2 id=\"swap进出量\"><a href=\"#swap进出量\" class=\"headerlink\" title=\"swap进出量\"></a>swap进出量</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free -m</span><br></pre></td></tr></table></figure>\n<h1 id=\"数据库性能状态\"><a href=\"#数据库性能状态\" class=\"headerlink\" title=\"数据库性能状态\"></a>数据库性能状态</h1><h2 id=\"QPS\"><a href=\"#QPS\" class=\"headerlink\" title=\"QPS\"></a>QPS</h2><p><strong>方法一 基于 questions  计算qps,基于  com_commit  com_rollback 计算tps</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">questions = <span class=\"keyword\">show</span> <span class=\"keyword\">global</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'questions'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">uptime = <span class=\"keyword\">show</span> <span class=\"keyword\">global</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'uptime'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">qps=questions/uptime</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com_commit = <span class=\"keyword\">show</span> <span class=\"keyword\">global</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'com_commit'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">com_rollback = <span class=\"keyword\">show</span> <span class=\"keyword\">global</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'com_rollback'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">uptime = <span class=\"keyword\">show</span> <span class=\"keyword\">global</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'uptime'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">tps=(com_commit + com_rollback)/uptime</span><br></pre></td></tr></table></figure>\n<p><strong>方法二  基于 com_* 的status 变量计算tps ,qps</strong></p>\n<p>使用如下命令：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">global</span> <span class=\"keyword\">status</span> <span class=\"keyword\">where</span> variable_name <span class=\"keyword\">in</span>(<span class=\"string\">'com_select'</span>,<span class=\"string\">'com_insert'</span>,<span class=\"string\">'com_delete'</span>,<span class=\"string\">'com_update'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">获取间隔1s 的 com_*的值，并作差值运算</span><br><span class=\"line\"></span><br><span class=\"line\">del_diff = (int(mystat2['com_delete'])   - int(mystat1['com_delete']) ) / diff</span><br><span class=\"line\"></span><br><span class=\"line\">ins_diff = (int(mystat2['com_insert'])    - int(mystat1['com_insert']) ) / diff</span><br><span class=\"line\"></span><br><span class=\"line\">sel_diff = (int(mystat2['com_select'])    - int(mystat1['com_select']) ) / diff</span><br><span class=\"line\"></span><br><span class=\"line\">upd_diff = (int(mystat2['com_update'])   - int(mystat1['com_update']) ) / diff</span><br></pre></td></tr></table></figure>\n<p><strong>总结：</strong></p>\n<p>Questions 是记录了从mysqld启动以来所有的select，dml 次数包括show 命令的查询的次数。这样多少有失准确性，比如很多数据库有监控系统在运行，每5秒对数据库进行一次show 查询来获取当前数据库的状态，而这些查询就被记录到QPS,TPS统计中，造成一定的”数据污染”.</p>\n<p>如果数据库中存在比较多的myisam表，则计算还是questions 比较合适。</p>\n<p>如果数据库中存在比较多的innodb表，则计算以com_*数据来源比较合适</p>\n<h2 id=\"TPS\"><a href=\"#TPS\" class=\"headerlink\" title=\"TPS\"></a>TPS</h2><p>TPS = (Com_commit + Com_rollback) / seconds </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Com_commit'</span>; </span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Com_rollback'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"key-Buffer-命中率\"><a href=\"#key-Buffer-命中率\" class=\"headerlink\" title=\"key Buffer 命中率\"></a>key Buffer 命中率</h2><p>key_buffer_read_hits = (1-key_reads / key_read_requests) <em> 100%<br>key_buffer_write_hits = (1-key_writes / key_write_requests) </em> 100%</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Key%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"InnoDB-Buffer命中率\"><a href=\"#InnoDB-Buffer命中率\" class=\"headerlink\" title=\"InnoDB Buffer命中率\"></a>InnoDB Buffer命中率</h2><p>innodb_buffer_read_hits = (1 - innodb_buffer_pool_reads / innodb_buffer_pool_read_requests) * 100%</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'innodb_buffer_pool_read%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Query-Cache命中率\"><a href=\"#Query-Cache命中率\" class=\"headerlink\" title=\"Query Cache命中率\"></a>Query Cache命中率</h2><p>Query_cache_hits = (Qcahce_hits / (Qcache_hits + Qcache_inserts )) * 100%;</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Qcache%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Table-Cache状态量\"><a href=\"#Table-Cache状态量\" class=\"headerlink\" title=\"Table Cache状态量\"></a>Table Cache状态量</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'open%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Thread-Cache-命中率\"><a href=\"#Thread-Cache-命中率\" class=\"headerlink\" title=\"Thread Cache 命中率\"></a>Thread Cache 命中率</h2><p>Thread_cache_hits = (1 - Threads_created / connections ) * 100%</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Thread%'</span>;</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Connections'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"锁定状态\"><a href=\"#锁定状态\" class=\"headerlink\" title=\"锁定状态\"></a>锁定状态</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'%lock%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"复制延时量\"><a href=\"#复制延时量\" class=\"headerlink\" title=\"复制延时量\"></a>复制延时量</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">slave</span> <span class=\"keyword\">status</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tmp-Table-状况-临时表状况\"><a href=\"#Tmp-Table-状况-临时表状况\" class=\"headerlink\" title=\"Tmp Table 状况(临时表状况)\"></a>Tmp Table 状况(临时表状况)</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Create_tmp%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Binlog-Cache-使用状况\"><a href=\"#Binlog-Cache-使用状况\" class=\"headerlink\" title=\"Binlog Cache 使用状况\"></a>Binlog Cache 使用状况</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Binlog_cache%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Innodb-log-waits\"><a href=\"#Innodb-log-waits\" class=\"headerlink\" title=\"Innodb_log_waits\"></a>Innodb_log_waits</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'innodb_log_waits'</span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/li_adou/article/details/78791972\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/li_adou/article/details/78791972</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"性能检测蝉蛹命令\"><a href=\"#性能检测蝉蛹命令\" class=\"headerlink\" title=\"性能检测蝉蛹命令\"></a>性能检测蝉蛹命令</h1><ol>\n<li>show status</li>\n<li>show processlist</li>\n<li>show variables</li>\n</ol>\n<h1 id=\"瓶颈分析常用命令\"><a href=\"#瓶颈分析常用命令\" class=\"headerlink\" title=\"瓶颈分析常用命令\"></a>瓶颈分析常用命令</h1><h2 id=\"获取mysql用户下的进程总数\"><a href=\"#获取mysql用户下的进程总数\" class=\"headerlink\" title=\"获取mysql用户下的进程总数\"></a>获取mysql用户下的进程总数</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | awk '&#123;print $1&#125;' | grep \"mysql\" | grep -v \"grep\" | wc -l</span><br></pre></td></tr></table></figure>\n<h2 id=\"主机性能状态\"><a href=\"#主机性能状态\" class=\"headerlink\" title=\"主机性能状态\"></a>主机性能状态</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uptime</span><br></pre></td></tr></table></figure>\n<h2 id=\"CPU使用率\"><a href=\"#CPU使用率\" class=\"headerlink\" title=\"CPU使用率\"></a>CPU使用率</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top</span><br><span class=\"line\">vmstat</span><br></pre></td></tr></table></figure>\n<h2 id=\"磁盘IO量\"><a href=\"#磁盘IO量\" class=\"headerlink\" title=\"磁盘IO量\"></a>磁盘IO量</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vmstat</span><br><span class=\"line\">iostat</span><br></pre></td></tr></table></figure>\n<h2 id=\"swap进出量\"><a href=\"#swap进出量\" class=\"headerlink\" title=\"swap进出量\"></a>swap进出量</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free -m</span><br></pre></td></tr></table></figure>\n<h1 id=\"数据库性能状态\"><a href=\"#数据库性能状态\" class=\"headerlink\" title=\"数据库性能状态\"></a>数据库性能状态</h1><h2 id=\"QPS\"><a href=\"#QPS\" class=\"headerlink\" title=\"QPS\"></a>QPS</h2><p><strong>方法一 基于 questions  计算qps,基于  com_commit  com_rollback 计算tps</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">questions = <span class=\"keyword\">show</span> <span class=\"keyword\">global</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'questions'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">uptime = <span class=\"keyword\">show</span> <span class=\"keyword\">global</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'uptime'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">qps=questions/uptime</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com_commit = <span class=\"keyword\">show</span> <span class=\"keyword\">global</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'com_commit'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">com_rollback = <span class=\"keyword\">show</span> <span class=\"keyword\">global</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'com_rollback'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">uptime = <span class=\"keyword\">show</span> <span class=\"keyword\">global</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'uptime'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">tps=(com_commit + com_rollback)/uptime</span><br></pre></td></tr></table></figure>\n<p><strong>方法二  基于 com_* 的status 变量计算tps ,qps</strong></p>\n<p>使用如下命令：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">global</span> <span class=\"keyword\">status</span> <span class=\"keyword\">where</span> variable_name <span class=\"keyword\">in</span>(<span class=\"string\">'com_select'</span>,<span class=\"string\">'com_insert'</span>,<span class=\"string\">'com_delete'</span>,<span class=\"string\">'com_update'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">获取间隔1s 的 com_*的值，并作差值运算</span><br><span class=\"line\"></span><br><span class=\"line\">del_diff = (int(mystat2['com_delete'])   - int(mystat1['com_delete']) ) / diff</span><br><span class=\"line\"></span><br><span class=\"line\">ins_diff = (int(mystat2['com_insert'])    - int(mystat1['com_insert']) ) / diff</span><br><span class=\"line\"></span><br><span class=\"line\">sel_diff = (int(mystat2['com_select'])    - int(mystat1['com_select']) ) / diff</span><br><span class=\"line\"></span><br><span class=\"line\">upd_diff = (int(mystat2['com_update'])   - int(mystat1['com_update']) ) / diff</span><br></pre></td></tr></table></figure>\n<p><strong>总结：</strong></p>\n<p>Questions 是记录了从mysqld启动以来所有的select，dml 次数包括show 命令的查询的次数。这样多少有失准确性，比如很多数据库有监控系统在运行，每5秒对数据库进行一次show 查询来获取当前数据库的状态，而这些查询就被记录到QPS,TPS统计中，造成一定的”数据污染”.</p>\n<p>如果数据库中存在比较多的myisam表，则计算还是questions 比较合适。</p>\n<p>如果数据库中存在比较多的innodb表，则计算以com_*数据来源比较合适</p>\n<h2 id=\"TPS\"><a href=\"#TPS\" class=\"headerlink\" title=\"TPS\"></a>TPS</h2><p>TPS = (Com_commit + Com_rollback) / seconds </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Com_commit'</span>; </span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Com_rollback'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"key-Buffer-命中率\"><a href=\"#key-Buffer-命中率\" class=\"headerlink\" title=\"key Buffer 命中率\"></a>key Buffer 命中率</h2><p>key_buffer_read_hits = (1-key_reads / key_read_requests) <em> 100%<br>key_buffer_write_hits = (1-key_writes / key_write_requests) </em> 100%</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Key%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"InnoDB-Buffer命中率\"><a href=\"#InnoDB-Buffer命中率\" class=\"headerlink\" title=\"InnoDB Buffer命中率\"></a>InnoDB Buffer命中率</h2><p>innodb_buffer_read_hits = (1 - innodb_buffer_pool_reads / innodb_buffer_pool_read_requests) * 100%</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'innodb_buffer_pool_read%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Query-Cache命中率\"><a href=\"#Query-Cache命中率\" class=\"headerlink\" title=\"Query Cache命中率\"></a>Query Cache命中率</h2><p>Query_cache_hits = (Qcahce_hits / (Qcache_hits + Qcache_inserts )) * 100%;</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Qcache%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Table-Cache状态量\"><a href=\"#Table-Cache状态量\" class=\"headerlink\" title=\"Table Cache状态量\"></a>Table Cache状态量</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'open%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Thread-Cache-命中率\"><a href=\"#Thread-Cache-命中率\" class=\"headerlink\" title=\"Thread Cache 命中率\"></a>Thread Cache 命中率</h2><p>Thread_cache_hits = (1 - Threads_created / connections ) * 100%</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Thread%'</span>;</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Connections'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"锁定状态\"><a href=\"#锁定状态\" class=\"headerlink\" title=\"锁定状态\"></a>锁定状态</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'%lock%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"复制延时量\"><a href=\"#复制延时量\" class=\"headerlink\" title=\"复制延时量\"></a>复制延时量</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">slave</span> <span class=\"keyword\">status</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tmp-Table-状况-临时表状况\"><a href=\"#Tmp-Table-状况-临时表状况\" class=\"headerlink\" title=\"Tmp Table 状况(临时表状况)\"></a>Tmp Table 状况(临时表状况)</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Create_tmp%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Binlog-Cache-使用状况\"><a href=\"#Binlog-Cache-使用状况\" class=\"headerlink\" title=\"Binlog Cache 使用状况\"></a>Binlog Cache 使用状况</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Binlog_cache%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Innodb-log-waits\"><a href=\"#Innodb-log-waits\" class=\"headerlink\" title=\"Innodb_log_waits\"></a>Innodb_log_waits</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'innodb_log_waits'</span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/li_adou/article/details/78791972\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/li_adou/article/details/78791972</a></p>\n"},{"title":"mysql权限管理","date":"2019-03-29T08:55:22.000Z","_content":"\n# 用户管理\n\n# 基本操作\n\n```sql\ncreate user zhangsan identified by 'zhangsan';\n\nSELECT current_user();                                        ← 查看当前用户\nSELECT user,host FROM mysql.user;                    ← 查看用户信息\nSHOW GRANTS;                                                  ← 当前用户权限，会生成SQL语句\nCREATE USER 'user'@'host' IDENTIFIED BY 'password';           ← 创建用户\nDROP USER 'user'@'host';                                      ← 删除用户\nRENAME USER 'user'@'host' TO 'fool'@'host';        \n```\n\n## 修改密码\n\n```sql\nmysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'new-password';   ← 修改密码(recommand)\nmysql> SET PASSWORD FOR 'root'@'localhost'=PASSWORD('new-password'); ← 修改密码\nmysql> UPDATE mysql.user SET password=PASSWORD('new-password')\n       WHERE USER='root' AND Host='127.0.0.1';\nmysql> UPDATE mysql.user SET password='' WHERE user='root';          ← 清除密码\nmysql> FLUSH PRIVILEGES;\n$ mysqladmin -uROOT -pOLD_PASSWD password NEW_PASSWD                 ← 通过mysqladmin修改\n$ mysqladmin -uROOT -p flush-privileges\n```\n\n## 权限管理\n\n```sql\nmysql> GRANT ALL ON *.* TO 'user'@'%' [IDENTIFIED BY 'password'];\nmysql> GRANT ALL PRIVILIGES ON [TABLE | DATABASE] student,course TO user1,user2;\nmysql> GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, CREATE TEMPORARY, ALTER,\n       DROP, REFERENCES, INDEX, CREATE VIEW, SHOW VIEW, CREATE ROUTINE,\n       ALTER ROUTINE, EXECUTE\n       ON db.tbl TO 'user'@'host' [IDENTIFIED BY 'password'];\nmysql> GRANT ALL ON sampdb.* TO PUBLIC WITH GRANT OPTION;            ← 所有人，可以授权给其他人\nmysql> GRANT UPDATE(col),SELECT ON TABLE tbl TO user;                ← 针对列赋值\nmysql> SHOW GRANTS [FOR 'user'@'host'];                              ← 查看权限信息\nmysql> REVOKE ALL ON *.* FROM 'user'@'host';                         ← 撤销权限\nmysql> REVOKE SELECT(user, host), UPDATE(host) ON db.tbl FROM 'user'@'%';\n\n```\n\n# 权限\n\n##  admin\n\n```\nmysql> CREATE USER 'admin'@'IP' IDENTIFIED BY 'password';\nmysql> GRANT ALL PRIVILEGES ON *.* TO 'admin'@'IP';\n\nmysql> REVOKE ALL PRIVILEGES ON *.* FROM 'admin'@'IP';\nmysql> DROP USER 'admin'@'IP';\n```\n\n## root\n\n```sql\nmysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION;\n```\n\n# 其他\n\n## 重置root密码\n\n```sql\n----- 1. 停止mysql服务器\n# systemctl stop mysqld\n# /opt/mysql-5.7/bin/mysqladmin -uroot -p'init-password' shutdown\nShutting down MySQL..     done\n\n----- 2. 获取跳过认证的启动参数\n# mysqld --help --verbose | grep 'skip-grant-tables' -A1\n    --skip-grant-tables Start without grant tables. This gives all users FULL\n                          ACCESS to all tables.\n\n----- 3. 启动服务器，跳过认证\n# mysqld --skip-grant-tables --user=mysql &\n[1] 10209\n\n----- 4. 取消密码\nmysql> UPDATE mysql.user SET password='' WHERE user='root';\nQuery OK, 2 rows affected (0.00 sec)\nRows matched: 2  Changed: 2  Warnings: 0\n```\n\n## MySQL 中 localhost 127.0.0.1 区别\n\n`%` 是一个通配符，用以匹配所有的 IP 地址，但是不能匹配到 `locahost` 这个特殊的域名。\n\n也就是说，如果要允许本地登录，单纯只配置一个 `%` 是不够的 (应该是说对这种方式是不够的)，需要同时配置一个 `locahost` 的账号。\n\n```sql\nmysql> GRANT ALL ON *.* TO 'foobar'@'%' IDENTIFIED BY '123456';\nQuery OK, 0 rows affected (0.01 sec)\nmysql> SELECT user, host, password FROM mysql.user WHERE user like 'foobar%';\n+--------+------+-------------------------------------------+\n| user   | host | password                                  |\n+--------+------+-------------------------------------------+\n| foobar | %    | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |\n+--------+------+-------------------------------------------+\n1 row in set (0.00 sec)\n\n$ mysql -ufoobar -h127.0.0.1 -P3307 -p'123456'\nERROR 1045 (28000): Access denied for user 'foobar'@'localhost' (using password: YES)\n```\n\nhttps://jin-yang.github.io/post/mysql-localhost-vs-127.0.0.1-introduce.html\n\n# 参考\n\nhttps://jin-yang.github.io/post/mysql-users.html\n\nhttps://www.cnblogs.com/Richardzhu/p/3318595.html","source":"_posts/mysql/mysql权限管理.md","raw":"---\ntitle: mysql权限管理\ndate: 2019-03-29 16:55:22\ntags:\n- linux\n---\n\n# 用户管理\n\n# 基本操作\n\n```sql\ncreate user zhangsan identified by 'zhangsan';\n\nSELECT current_user();                                        ← 查看当前用户\nSELECT user,host FROM mysql.user;                    ← 查看用户信息\nSHOW GRANTS;                                                  ← 当前用户权限，会生成SQL语句\nCREATE USER 'user'@'host' IDENTIFIED BY 'password';           ← 创建用户\nDROP USER 'user'@'host';                                      ← 删除用户\nRENAME USER 'user'@'host' TO 'fool'@'host';        \n```\n\n## 修改密码\n\n```sql\nmysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'new-password';   ← 修改密码(recommand)\nmysql> SET PASSWORD FOR 'root'@'localhost'=PASSWORD('new-password'); ← 修改密码\nmysql> UPDATE mysql.user SET password=PASSWORD('new-password')\n       WHERE USER='root' AND Host='127.0.0.1';\nmysql> UPDATE mysql.user SET password='' WHERE user='root';          ← 清除密码\nmysql> FLUSH PRIVILEGES;\n$ mysqladmin -uROOT -pOLD_PASSWD password NEW_PASSWD                 ← 通过mysqladmin修改\n$ mysqladmin -uROOT -p flush-privileges\n```\n\n## 权限管理\n\n```sql\nmysql> GRANT ALL ON *.* TO 'user'@'%' [IDENTIFIED BY 'password'];\nmysql> GRANT ALL PRIVILIGES ON [TABLE | DATABASE] student,course TO user1,user2;\nmysql> GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, CREATE TEMPORARY, ALTER,\n       DROP, REFERENCES, INDEX, CREATE VIEW, SHOW VIEW, CREATE ROUTINE,\n       ALTER ROUTINE, EXECUTE\n       ON db.tbl TO 'user'@'host' [IDENTIFIED BY 'password'];\nmysql> GRANT ALL ON sampdb.* TO PUBLIC WITH GRANT OPTION;            ← 所有人，可以授权给其他人\nmysql> GRANT UPDATE(col),SELECT ON TABLE tbl TO user;                ← 针对列赋值\nmysql> SHOW GRANTS [FOR 'user'@'host'];                              ← 查看权限信息\nmysql> REVOKE ALL ON *.* FROM 'user'@'host';                         ← 撤销权限\nmysql> REVOKE SELECT(user, host), UPDATE(host) ON db.tbl FROM 'user'@'%';\n\n```\n\n# 权限\n\n##  admin\n\n```\nmysql> CREATE USER 'admin'@'IP' IDENTIFIED BY 'password';\nmysql> GRANT ALL PRIVILEGES ON *.* TO 'admin'@'IP';\n\nmysql> REVOKE ALL PRIVILEGES ON *.* FROM 'admin'@'IP';\nmysql> DROP USER 'admin'@'IP';\n```\n\n## root\n\n```sql\nmysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION;\n```\n\n# 其他\n\n## 重置root密码\n\n```sql\n----- 1. 停止mysql服务器\n# systemctl stop mysqld\n# /opt/mysql-5.7/bin/mysqladmin -uroot -p'init-password' shutdown\nShutting down MySQL..     done\n\n----- 2. 获取跳过认证的启动参数\n# mysqld --help --verbose | grep 'skip-grant-tables' -A1\n    --skip-grant-tables Start without grant tables. This gives all users FULL\n                          ACCESS to all tables.\n\n----- 3. 启动服务器，跳过认证\n# mysqld --skip-grant-tables --user=mysql &\n[1] 10209\n\n----- 4. 取消密码\nmysql> UPDATE mysql.user SET password='' WHERE user='root';\nQuery OK, 2 rows affected (0.00 sec)\nRows matched: 2  Changed: 2  Warnings: 0\n```\n\n## MySQL 中 localhost 127.0.0.1 区别\n\n`%` 是一个通配符，用以匹配所有的 IP 地址，但是不能匹配到 `locahost` 这个特殊的域名。\n\n也就是说，如果要允许本地登录，单纯只配置一个 `%` 是不够的 (应该是说对这种方式是不够的)，需要同时配置一个 `locahost` 的账号。\n\n```sql\nmysql> GRANT ALL ON *.* TO 'foobar'@'%' IDENTIFIED BY '123456';\nQuery OK, 0 rows affected (0.01 sec)\nmysql> SELECT user, host, password FROM mysql.user WHERE user like 'foobar%';\n+--------+------+-------------------------------------------+\n| user   | host | password                                  |\n+--------+------+-------------------------------------------+\n| foobar | %    | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |\n+--------+------+-------------------------------------------+\n1 row in set (0.00 sec)\n\n$ mysql -ufoobar -h127.0.0.1 -P3307 -p'123456'\nERROR 1045 (28000): Access denied for user 'foobar'@'localhost' (using password: YES)\n```\n\nhttps://jin-yang.github.io/post/mysql-localhost-vs-127.0.0.1-introduce.html\n\n# 参考\n\nhttps://jin-yang.github.io/post/mysql-users.html\n\nhttps://www.cnblogs.com/Richardzhu/p/3318595.html","slug":"mysql/mysql权限管理","published":1,"updated":"2019-10-14T09:01:07.907Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a43v003dic1yi9jyk263","content":"<h1 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h1><h1 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> zhangsan <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"string\">'zhangsan'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">current_user</span>();                                        ← 查看当前用户</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">user</span>,host <span class=\"keyword\">FROM</span> mysql.user;                    ← 查看用户信息</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">GRANTS</span>;                                                  ← 当前用户权限，会生成SQL语句</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> <span class=\"string\">'user'</span>@<span class=\"string\">'host'</span> <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">BY</span> <span class=\"string\">'password'</span>;           ← 创建用户</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">USER</span> <span class=\"string\">'user'</span>@<span class=\"string\">'host'</span>;                                      ← 删除用户</span><br><span class=\"line\"><span class=\"keyword\">RENAME</span> <span class=\"keyword\">USER</span> <span class=\"string\">'user'</span>@<span class=\"string\">'host'</span> <span class=\"keyword\">TO</span> <span class=\"string\">'fool'</span>@<span class=\"string\">'host'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; ALTER USER 'root'@'localhost' IDENTIFIED BY 'new-password';   ← 修改密码(recommand)</span><br><span class=\"line\">mysql&gt; SET PASSWORD FOR 'root'@'localhost'=PASSWORD('new-password'); ← 修改密码</span><br><span class=\"line\">mysql&gt; UPDATE mysql.user SET password=PASSWORD('new-password')</span><br><span class=\"line\">       WHERE USER='root' AND Host='127.0.0.1';</span><br><span class=\"line\">mysql&gt; UPDATE mysql.user SET password='' WHERE user='root';          ← 清除密码</span><br><span class=\"line\">mysql&gt; FLUSH PRIVILEGES;</span><br><span class=\"line\">$ mysqladmin -uROOT -pOLD_PASSWD password NEW_PASSWD                 ← 通过mysqladmin修改</span><br><span class=\"line\">$ mysqladmin -uROOT -p <span class=\"keyword\">flush</span>-<span class=\"keyword\">privileges</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"权限管理\"><a href=\"#权限管理\" class=\"headerlink\" title=\"权限管理\"></a>权限管理</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; GRANT ALL ON *.* TO 'user'@'%' [IDENTIFIED BY 'password'];</span><br><span class=\"line\">mysql&gt; GRANT ALL PRIVILIGES ON [TABLE | DATABASE] student,course TO user1,user2;</span><br><span class=\"line\">mysql&gt; GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, CREATE TEMPORARY, ALTER,</span><br><span class=\"line\">       <span class=\"keyword\">DROP</span>, <span class=\"keyword\">REFERENCES</span>, <span class=\"keyword\">INDEX</span>, <span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span>, <span class=\"keyword\">SHOW</span> <span class=\"keyword\">VIEW</span>, <span class=\"keyword\">CREATE</span> ROUTINE,</span><br><span class=\"line\">       <span class=\"keyword\">ALTER</span> ROUTINE, <span class=\"keyword\">EXECUTE</span></span><br><span class=\"line\">       <span class=\"keyword\">ON</span> db.tbl <span class=\"keyword\">TO</span> <span class=\"string\">'user'</span>@<span class=\"string\">'host'</span> [<span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">BY</span> <span class=\"string\">'password'</span>];</span><br><span class=\"line\">mysql&gt; GRANT ALL ON sampdb.* TO PUBLIC WITH GRANT OPTION;            ← 所有人，可以授权给其他人</span><br><span class=\"line\">mysql&gt; GRANT UPDATE(col),SELECT ON TABLE tbl TO user;                ← 针对列赋值</span><br><span class=\"line\">mysql&gt; SHOW GRANTS [FOR 'user'@'host'];                              ← 查看权限信息</span><br><span class=\"line\">mysql&gt; REVOKE ALL ON *.* FROM 'user'@'host';                         ← 撤销权限</span><br><span class=\"line\">mysql&gt; REVOKE SELECT(user, host), UPDATE(host) ON db.tbl FROM 'user'@'%';</span><br></pre></td></tr></table></figure>\n<h1 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h1><h2 id=\"admin\"><a href=\"#admin\" class=\"headerlink\" title=\"admin\"></a>admin</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE USER &apos;admin&apos;@&apos;IP&apos; IDENTIFIED BY &apos;password&apos;;</span><br><span class=\"line\">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;admin&apos;@&apos;IP&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; REVOKE ALL PRIVILEGES ON *.* FROM &apos;admin&apos;@&apos;IP&apos;;</span><br><span class=\"line\">mysql&gt; DROP USER &apos;admin&apos;@&apos;IP&apos;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"root\"><a href=\"#root\" class=\"headerlink\" title=\"root\"></a>root</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"重置root密码\"><a href=\"#重置root密码\" class=\"headerlink\" title=\"重置root密码\"></a>重置root密码</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">----- 1. 停止mysql服务器</span></span><br><span class=\"line\"><span class=\"comment\"># systemctl stop mysqld</span></span><br><span class=\"line\"><span class=\"comment\"># /opt/mysql-5.7/bin/mysqladmin -uroot -p'init-password' shutdown</span></span><br><span class=\"line\">Shutting down MySQL..     done</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">----- 2. 获取跳过认证的启动参数</span></span><br><span class=\"line\"><span class=\"comment\"># mysqld --help --verbose | grep 'skip-grant-tables' -A1</span></span><br><span class=\"line\">    <span class=\"comment\">--skip-grant-tables Start without grant tables. This gives all users FULL</span></span><br><span class=\"line\">                          ACCESS to all tables.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">----- 3. 启动服务器，跳过认证</span></span><br><span class=\"line\"><span class=\"comment\"># mysqld --skip-grant-tables --user=mysql &amp;</span></span><br><span class=\"line\">[1] 10209</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">----- 4. 取消密码</span></span><br><span class=\"line\">mysql&gt; UPDATE mysql.user SET password='' WHERE user='root';</span><br><span class=\"line\">Query OK, 2 rows affected (0.00 sec)</span><br><span class=\"line\">Rows matched: 2  Changed: 2  Warnings: 0</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-中-localhost-127-0-0-1-区别\"><a href=\"#MySQL-中-localhost-127-0-0-1-区别\" class=\"headerlink\" title=\"MySQL 中 localhost 127.0.0.1 区别\"></a>MySQL 中 localhost 127.0.0.1 区别</h2><p><code>%</code> 是一个通配符，用以匹配所有的 IP 地址，但是不能匹配到 <code>locahost</code> 这个特殊的域名。</p>\n<p>也就是说，如果要允许本地登录，单纯只配置一个 <code>%</code> 是不够的 (应该是说对这种方式是不够的)，需要同时配置一个 <code>locahost</code> 的账号。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; GRANT ALL ON *.* TO 'foobar'@'%' IDENTIFIED BY '123456';</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br><span class=\"line\">mysql&gt; SELECT user, host, password FROM mysql.user WHERE user like 'foobar%';</span><br><span class=\"line\">+<span class=\"comment\">--------+------+-------------------------------------------+</span></span><br><span class=\"line\">| user   | host | password                                  |</span><br><span class=\"line\">+<span class=\"comment\">--------+------+-------------------------------------------+</span></span><br><span class=\"line\">| foobar | %    | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |</span><br><span class=\"line\">+<span class=\"comment\">--------+------+-------------------------------------------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">$ mysql -ufoobar -h127<span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> -P3307 -p<span class=\"string\">'123456'</span></span><br><span class=\"line\"><span class=\"keyword\">ERROR</span> <span class=\"number\">1045</span> (<span class=\"number\">28000</span>): <span class=\"keyword\">Access</span> denied <span class=\"keyword\">for</span> <span class=\"keyword\">user</span> <span class=\"string\">'foobar'</span>@<span class=\"string\">'localhost'</span> (<span class=\"keyword\">using</span> <span class=\"keyword\">password</span>: YES)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://jin-yang.github.io/post/mysql-localhost-vs-127.0.0.1-introduce.html\" target=\"_blank\" rel=\"noopener\">https://jin-yang.github.io/post/mysql-localhost-vs-127.0.0.1-introduce.html</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://jin-yang.github.io/post/mysql-users.html\" target=\"_blank\" rel=\"noopener\">https://jin-yang.github.io/post/mysql-users.html</a></p>\n<p><a href=\"https://www.cnblogs.com/Richardzhu/p/3318595.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Richardzhu/p/3318595.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h1><h1 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> zhangsan <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"string\">'zhangsan'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">current_user</span>();                                        ← 查看当前用户</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">user</span>,host <span class=\"keyword\">FROM</span> mysql.user;                    ← 查看用户信息</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">GRANTS</span>;                                                  ← 当前用户权限，会生成SQL语句</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> <span class=\"string\">'user'</span>@<span class=\"string\">'host'</span> <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">BY</span> <span class=\"string\">'password'</span>;           ← 创建用户</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">USER</span> <span class=\"string\">'user'</span>@<span class=\"string\">'host'</span>;                                      ← 删除用户</span><br><span class=\"line\"><span class=\"keyword\">RENAME</span> <span class=\"keyword\">USER</span> <span class=\"string\">'user'</span>@<span class=\"string\">'host'</span> <span class=\"keyword\">TO</span> <span class=\"string\">'fool'</span>@<span class=\"string\">'host'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; ALTER USER 'root'@'localhost' IDENTIFIED BY 'new-password';   ← 修改密码(recommand)</span><br><span class=\"line\">mysql&gt; SET PASSWORD FOR 'root'@'localhost'=PASSWORD('new-password'); ← 修改密码</span><br><span class=\"line\">mysql&gt; UPDATE mysql.user SET password=PASSWORD('new-password')</span><br><span class=\"line\">       WHERE USER='root' AND Host='127.0.0.1';</span><br><span class=\"line\">mysql&gt; UPDATE mysql.user SET password='' WHERE user='root';          ← 清除密码</span><br><span class=\"line\">mysql&gt; FLUSH PRIVILEGES;</span><br><span class=\"line\">$ mysqladmin -uROOT -pOLD_PASSWD password NEW_PASSWD                 ← 通过mysqladmin修改</span><br><span class=\"line\">$ mysqladmin -uROOT -p <span class=\"keyword\">flush</span>-<span class=\"keyword\">privileges</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"权限管理\"><a href=\"#权限管理\" class=\"headerlink\" title=\"权限管理\"></a>权限管理</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; GRANT ALL ON *.* TO 'user'@'%' [IDENTIFIED BY 'password'];</span><br><span class=\"line\">mysql&gt; GRANT ALL PRIVILIGES ON [TABLE | DATABASE] student,course TO user1,user2;</span><br><span class=\"line\">mysql&gt; GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, CREATE TEMPORARY, ALTER,</span><br><span class=\"line\">       <span class=\"keyword\">DROP</span>, <span class=\"keyword\">REFERENCES</span>, <span class=\"keyword\">INDEX</span>, <span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span>, <span class=\"keyword\">SHOW</span> <span class=\"keyword\">VIEW</span>, <span class=\"keyword\">CREATE</span> ROUTINE,</span><br><span class=\"line\">       <span class=\"keyword\">ALTER</span> ROUTINE, <span class=\"keyword\">EXECUTE</span></span><br><span class=\"line\">       <span class=\"keyword\">ON</span> db.tbl <span class=\"keyword\">TO</span> <span class=\"string\">'user'</span>@<span class=\"string\">'host'</span> [<span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">BY</span> <span class=\"string\">'password'</span>];</span><br><span class=\"line\">mysql&gt; GRANT ALL ON sampdb.* TO PUBLIC WITH GRANT OPTION;            ← 所有人，可以授权给其他人</span><br><span class=\"line\">mysql&gt; GRANT UPDATE(col),SELECT ON TABLE tbl TO user;                ← 针对列赋值</span><br><span class=\"line\">mysql&gt; SHOW GRANTS [FOR 'user'@'host'];                              ← 查看权限信息</span><br><span class=\"line\">mysql&gt; REVOKE ALL ON *.* FROM 'user'@'host';                         ← 撤销权限</span><br><span class=\"line\">mysql&gt; REVOKE SELECT(user, host), UPDATE(host) ON db.tbl FROM 'user'@'%';</span><br></pre></td></tr></table></figure>\n<h1 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h1><h2 id=\"admin\"><a href=\"#admin\" class=\"headerlink\" title=\"admin\"></a>admin</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE USER &apos;admin&apos;@&apos;IP&apos; IDENTIFIED BY &apos;password&apos;;</span><br><span class=\"line\">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;admin&apos;@&apos;IP&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; REVOKE ALL PRIVILEGES ON *.* FROM &apos;admin&apos;@&apos;IP&apos;;</span><br><span class=\"line\">mysql&gt; DROP USER &apos;admin&apos;@&apos;IP&apos;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"root\"><a href=\"#root\" class=\"headerlink\" title=\"root\"></a>root</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"重置root密码\"><a href=\"#重置root密码\" class=\"headerlink\" title=\"重置root密码\"></a>重置root密码</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">----- 1. 停止mysql服务器</span></span><br><span class=\"line\"><span class=\"comment\"># systemctl stop mysqld</span></span><br><span class=\"line\"><span class=\"comment\"># /opt/mysql-5.7/bin/mysqladmin -uroot -p'init-password' shutdown</span></span><br><span class=\"line\">Shutting down MySQL..     done</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">----- 2. 获取跳过认证的启动参数</span></span><br><span class=\"line\"><span class=\"comment\"># mysqld --help --verbose | grep 'skip-grant-tables' -A1</span></span><br><span class=\"line\">    <span class=\"comment\">--skip-grant-tables Start without grant tables. This gives all users FULL</span></span><br><span class=\"line\">                          ACCESS to all tables.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">----- 3. 启动服务器，跳过认证</span></span><br><span class=\"line\"><span class=\"comment\"># mysqld --skip-grant-tables --user=mysql &amp;</span></span><br><span class=\"line\">[1] 10209</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">----- 4. 取消密码</span></span><br><span class=\"line\">mysql&gt; UPDATE mysql.user SET password='' WHERE user='root';</span><br><span class=\"line\">Query OK, 2 rows affected (0.00 sec)</span><br><span class=\"line\">Rows matched: 2  Changed: 2  Warnings: 0</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-中-localhost-127-0-0-1-区别\"><a href=\"#MySQL-中-localhost-127-0-0-1-区别\" class=\"headerlink\" title=\"MySQL 中 localhost 127.0.0.1 区别\"></a>MySQL 中 localhost 127.0.0.1 区别</h2><p><code>%</code> 是一个通配符，用以匹配所有的 IP 地址，但是不能匹配到 <code>locahost</code> 这个特殊的域名。</p>\n<p>也就是说，如果要允许本地登录，单纯只配置一个 <code>%</code> 是不够的 (应该是说对这种方式是不够的)，需要同时配置一个 <code>locahost</code> 的账号。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; GRANT ALL ON *.* TO 'foobar'@'%' IDENTIFIED BY '123456';</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br><span class=\"line\">mysql&gt; SELECT user, host, password FROM mysql.user WHERE user like 'foobar%';</span><br><span class=\"line\">+<span class=\"comment\">--------+------+-------------------------------------------+</span></span><br><span class=\"line\">| user   | host | password                                  |</span><br><span class=\"line\">+<span class=\"comment\">--------+------+-------------------------------------------+</span></span><br><span class=\"line\">| foobar | %    | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |</span><br><span class=\"line\">+<span class=\"comment\">--------+------+-------------------------------------------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">$ mysql -ufoobar -h127<span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> -P3307 -p<span class=\"string\">'123456'</span></span><br><span class=\"line\"><span class=\"keyword\">ERROR</span> <span class=\"number\">1045</span> (<span class=\"number\">28000</span>): <span class=\"keyword\">Access</span> denied <span class=\"keyword\">for</span> <span class=\"keyword\">user</span> <span class=\"string\">'foobar'</span>@<span class=\"string\">'localhost'</span> (<span class=\"keyword\">using</span> <span class=\"keyword\">password</span>: YES)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://jin-yang.github.io/post/mysql-localhost-vs-127.0.0.1-introduce.html\" target=\"_blank\" rel=\"noopener\">https://jin-yang.github.io/post/mysql-localhost-vs-127.0.0.1-introduce.html</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://jin-yang.github.io/post/mysql-users.html\" target=\"_blank\" rel=\"noopener\">https://jin-yang.github.io/post/mysql-users.html</a></p>\n<p><a href=\"https://www.cnblogs.com/Richardzhu/p/3318595.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Richardzhu/p/3318595.html</a></p>\n"},{"title":"mysql自带的数据库","date":"2019-07-27T10:06:05.000Z","_content":"\n#  information_schema\n\n1. SCHEMATA表：提供了当前mysql实例中所有数据库的信息。是show databases的结果取之此表。\n\n2. TABLES表：提供了关于数据库中的表的信息（包括视图）。详细表述了某个表属于哪个schema，表类型，表引擎，创建时间等信息。是show tables from schemaname的　　结果取之此表。\n\n3. COLUMNS表：提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息。是show columns from schemaname.tablename的结果取之此表。\n\n4. STATISTICS表：提供了关于表索引的信息。是show index from schemaname.tablename的结果取之此表。\n\n5. USER_PRIVILEGES（用户权限）表：给出了关于全程权限的信息。该信息源自mysql.user授权表。是非标准表。\n\n6. SCHEMA_PRIVILEGES（方案权限）表：给出了关于方案（数据库）权限的信息。该信息来自mysql.db授权表。是非标准表。\n\n7. TABLE_PRIVILEGES（表权限）表：给出了关于表权限的信息。该信息源自mysql.tables_priv授权表。是非标准表。\n\n8. COLUMN_PRIVILEGES（列权限）表：给出了关于列权限的信息。该信息源自mysql.columns_priv授权表。是非标准表。\n\n9. CHARACTER_SETS（字符集）表：提供了mysql实例可用字符集的信息。是SHOW CHARACTER SET结果集取之此表。\n\n10. COLLATIONS表：提供了关于各字符集的对照信息。\n\n11. COLLATION_CHARACTER_SET_APPLICABILITY表：指明了可用于校对的字符集。这些列等效于SHOW COLLATION的前两个显示字段。\n\n12. TABLE_CONSTRAINTS表：描述了存在约束的表。以及表的约束类型。\n\n13. KEY_COLUMN_USAGE表：描述了具有约束的键列。\n\n14. ROUTINES表：提供了关于存储子程序（存储程序和函数）的信息。此时，ROUTINES表不包含自定义函数（UDF）。名为“mysql.proc name”的列指明了对应于　　　　　　　INFORMATION_SCHEMA.ROUTINES表的mysql.proc表列。\n\n15. VIEWS表：给出了关于数据库中的视图的信息。需要有show views权限，否则无法查看视图信息。\n\n16. TRIGGERS表：提供了关于触发程序的信息。必须有super权限才能查看该表。\n\n# mysql\n\n\n\n# performance_schema\n\n 需要设置参数： performance_schema 才可以启动该功能\n\n按照相关的标准对进行的事件统计表, 表也是只读的，只能turcate\n\n　　events_waits_summary_by_instance             \n\n　　events_waits_summary_by_thread_by_event_name \n\n　　events_waits_summary_global_by_event_name    \n\n　　file_summary_by_event_name                   \n\n　　file_summary_by_instance   \n\n- setup_consumers 描述各种事件\n\n- setup_instruments 描述这个数据库下的表名以及是否开启监控。\n\n- setup_timers   描述 监控选项已经采样频率的时间间隔\n\n- events_waits_current  记录当前正在发生的等待事件，这个表是只读的表，不能update ，delete ，但是可以truncate\n\n- 性能历史表 ：events_waits_history  只保留每个线程（thread） 的最近的10个事件\n\n- 性能历史表 ：events_waits_history_long 记录最近的10000个事件  标准的先进先出（FIFO) 这俩表也是只读表，只能truncate\n\n# sakila\n\n　　这是一个MySQL的一个样本数据库，里边都是一些例子表。\n\n","source":"_posts/mysql/mysql自带的数据库.md","raw":"---\ntitle: mysql自带的数据库\ndate: 2019-07-27 18:06:05\ntags:\n- mysql\n---\n\n#  information_schema\n\n1. SCHEMATA表：提供了当前mysql实例中所有数据库的信息。是show databases的结果取之此表。\n\n2. TABLES表：提供了关于数据库中的表的信息（包括视图）。详细表述了某个表属于哪个schema，表类型，表引擎，创建时间等信息。是show tables from schemaname的　　结果取之此表。\n\n3. COLUMNS表：提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息。是show columns from schemaname.tablename的结果取之此表。\n\n4. STATISTICS表：提供了关于表索引的信息。是show index from schemaname.tablename的结果取之此表。\n\n5. USER_PRIVILEGES（用户权限）表：给出了关于全程权限的信息。该信息源自mysql.user授权表。是非标准表。\n\n6. SCHEMA_PRIVILEGES（方案权限）表：给出了关于方案（数据库）权限的信息。该信息来自mysql.db授权表。是非标准表。\n\n7. TABLE_PRIVILEGES（表权限）表：给出了关于表权限的信息。该信息源自mysql.tables_priv授权表。是非标准表。\n\n8. COLUMN_PRIVILEGES（列权限）表：给出了关于列权限的信息。该信息源自mysql.columns_priv授权表。是非标准表。\n\n9. CHARACTER_SETS（字符集）表：提供了mysql实例可用字符集的信息。是SHOW CHARACTER SET结果集取之此表。\n\n10. COLLATIONS表：提供了关于各字符集的对照信息。\n\n11. COLLATION_CHARACTER_SET_APPLICABILITY表：指明了可用于校对的字符集。这些列等效于SHOW COLLATION的前两个显示字段。\n\n12. TABLE_CONSTRAINTS表：描述了存在约束的表。以及表的约束类型。\n\n13. KEY_COLUMN_USAGE表：描述了具有约束的键列。\n\n14. ROUTINES表：提供了关于存储子程序（存储程序和函数）的信息。此时，ROUTINES表不包含自定义函数（UDF）。名为“mysql.proc name”的列指明了对应于　　　　　　　INFORMATION_SCHEMA.ROUTINES表的mysql.proc表列。\n\n15. VIEWS表：给出了关于数据库中的视图的信息。需要有show views权限，否则无法查看视图信息。\n\n16. TRIGGERS表：提供了关于触发程序的信息。必须有super权限才能查看该表。\n\n# mysql\n\n\n\n# performance_schema\n\n 需要设置参数： performance_schema 才可以启动该功能\n\n按照相关的标准对进行的事件统计表, 表也是只读的，只能turcate\n\n　　events_waits_summary_by_instance             \n\n　　events_waits_summary_by_thread_by_event_name \n\n　　events_waits_summary_global_by_event_name    \n\n　　file_summary_by_event_name                   \n\n　　file_summary_by_instance   \n\n- setup_consumers 描述各种事件\n\n- setup_instruments 描述这个数据库下的表名以及是否开启监控。\n\n- setup_timers   描述 监控选项已经采样频率的时间间隔\n\n- events_waits_current  记录当前正在发生的等待事件，这个表是只读的表，不能update ，delete ，但是可以truncate\n\n- 性能历史表 ：events_waits_history  只保留每个线程（thread） 的最近的10个事件\n\n- 性能历史表 ：events_waits_history_long 记录最近的10000个事件  标准的先进先出（FIFO) 这俩表也是只读表，只能truncate\n\n# sakila\n\n　　这是一个MySQL的一个样本数据库，里边都是一些例子表。\n\n","slug":"mysql/mysql自带的数据库","published":1,"updated":"2019-10-14T09:01:07.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a43w003fic1yqx8kr5m9","content":"<h1 id=\"information-schema\"><a href=\"#information-schema\" class=\"headerlink\" title=\"information_schema\"></a>information_schema</h1><ol>\n<li><p>SCHEMATA表：提供了当前mysql实例中所有数据库的信息。是show databases的结果取之此表。</p>\n</li>\n<li><p>TABLES表：提供了关于数据库中的表的信息（包括视图）。详细表述了某个表属于哪个schema，表类型，表引擎，创建时间等信息。是show tables from schemaname的　　结果取之此表。</p>\n</li>\n<li><p>COLUMNS表：提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息。是show columns from schemaname.tablename的结果取之此表。</p>\n</li>\n<li><p>STATISTICS表：提供了关于表索引的信息。是show index from schemaname.tablename的结果取之此表。</p>\n</li>\n<li><p>USER_PRIVILEGES（用户权限）表：给出了关于全程权限的信息。该信息源自mysql.user授权表。是非标准表。</p>\n</li>\n<li><p>SCHEMA_PRIVILEGES（方案权限）表：给出了关于方案（数据库）权限的信息。该信息来自mysql.db授权表。是非标准表。</p>\n</li>\n<li><p>TABLE_PRIVILEGES（表权限）表：给出了关于表权限的信息。该信息源自mysql.tables_priv授权表。是非标准表。</p>\n</li>\n<li><p>COLUMN_PRIVILEGES（列权限）表：给出了关于列权限的信息。该信息源自mysql.columns_priv授权表。是非标准表。</p>\n</li>\n<li><p>CHARACTER_SETS（字符集）表：提供了mysql实例可用字符集的信息。是SHOW CHARACTER SET结果集取之此表。</p>\n</li>\n<li><p>COLLATIONS表：提供了关于各字符集的对照信息。</p>\n</li>\n<li><p>COLLATION_CHARACTER_SET_APPLICABILITY表：指明了可用于校对的字符集。这些列等效于SHOW COLLATION的前两个显示字段。</p>\n</li>\n<li><p>TABLE_CONSTRAINTS表：描述了存在约束的表。以及表的约束类型。</p>\n</li>\n<li><p>KEY_COLUMN_USAGE表：描述了具有约束的键列。</p>\n</li>\n<li><p>ROUTINES表：提供了关于存储子程序（存储程序和函数）的信息。此时，ROUTINES表不包含自定义函数（UDF）。名为“mysql.proc name”的列指明了对应于　　　　　　　INFORMATION_SCHEMA.ROUTINES表的mysql.proc表列。</p>\n</li>\n<li><p>VIEWS表：给出了关于数据库中的视图的信息。需要有show views权限，否则无法查看视图信息。</p>\n</li>\n<li><p>TRIGGERS表：提供了关于触发程序的信息。必须有super权限才能查看该表。</p>\n</li>\n</ol>\n<h1 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h1><h1 id=\"performance-schema\"><a href=\"#performance-schema\" class=\"headerlink\" title=\"performance_schema\"></a>performance_schema</h1><p> 需要设置参数： performance_schema 才可以启动该功能</p>\n<p>按照相关的标准对进行的事件统计表, 表也是只读的，只能turcate</p>\n<p>　　events_waits_summary_by_instance             </p>\n<p>　　events_waits_summary_by_thread_by_event_name </p>\n<p>　　events_waits_summary_global_by_event_name    </p>\n<p>　　file_summary_by_event_name                   </p>\n<p>　　file_summary_by_instance   </p>\n<ul>\n<li><p>setup_consumers 描述各种事件</p>\n</li>\n<li><p>setup_instruments 描述这个数据库下的表名以及是否开启监控。</p>\n</li>\n<li><p>setup_timers   描述 监控选项已经采样频率的时间间隔</p>\n</li>\n<li><p>events_waits_current  记录当前正在发生的等待事件，这个表是只读的表，不能update ，delete ，但是可以truncate</p>\n</li>\n<li><p>性能历史表 ：events_waits_history  只保留每个线程（thread） 的最近的10个事件</p>\n</li>\n<li><p>性能历史表 ：events_waits_history_long 记录最近的10000个事件  标准的先进先出（FIFO) 这俩表也是只读表，只能truncate</p>\n</li>\n</ul>\n<h1 id=\"sakila\"><a href=\"#sakila\" class=\"headerlink\" title=\"sakila\"></a>sakila</h1><p>　　这是一个MySQL的一个样本数据库，里边都是一些例子表。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"information-schema\"><a href=\"#information-schema\" class=\"headerlink\" title=\"information_schema\"></a>information_schema</h1><ol>\n<li><p>SCHEMATA表：提供了当前mysql实例中所有数据库的信息。是show databases的结果取之此表。</p>\n</li>\n<li><p>TABLES表：提供了关于数据库中的表的信息（包括视图）。详细表述了某个表属于哪个schema，表类型，表引擎，创建时间等信息。是show tables from schemaname的　　结果取之此表。</p>\n</li>\n<li><p>COLUMNS表：提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息。是show columns from schemaname.tablename的结果取之此表。</p>\n</li>\n<li><p>STATISTICS表：提供了关于表索引的信息。是show index from schemaname.tablename的结果取之此表。</p>\n</li>\n<li><p>USER_PRIVILEGES（用户权限）表：给出了关于全程权限的信息。该信息源自mysql.user授权表。是非标准表。</p>\n</li>\n<li><p>SCHEMA_PRIVILEGES（方案权限）表：给出了关于方案（数据库）权限的信息。该信息来自mysql.db授权表。是非标准表。</p>\n</li>\n<li><p>TABLE_PRIVILEGES（表权限）表：给出了关于表权限的信息。该信息源自mysql.tables_priv授权表。是非标准表。</p>\n</li>\n<li><p>COLUMN_PRIVILEGES（列权限）表：给出了关于列权限的信息。该信息源自mysql.columns_priv授权表。是非标准表。</p>\n</li>\n<li><p>CHARACTER_SETS（字符集）表：提供了mysql实例可用字符集的信息。是SHOW CHARACTER SET结果集取之此表。</p>\n</li>\n<li><p>COLLATIONS表：提供了关于各字符集的对照信息。</p>\n</li>\n<li><p>COLLATION_CHARACTER_SET_APPLICABILITY表：指明了可用于校对的字符集。这些列等效于SHOW COLLATION的前两个显示字段。</p>\n</li>\n<li><p>TABLE_CONSTRAINTS表：描述了存在约束的表。以及表的约束类型。</p>\n</li>\n<li><p>KEY_COLUMN_USAGE表：描述了具有约束的键列。</p>\n</li>\n<li><p>ROUTINES表：提供了关于存储子程序（存储程序和函数）的信息。此时，ROUTINES表不包含自定义函数（UDF）。名为“mysql.proc name”的列指明了对应于　　　　　　　INFORMATION_SCHEMA.ROUTINES表的mysql.proc表列。</p>\n</li>\n<li><p>VIEWS表：给出了关于数据库中的视图的信息。需要有show views权限，否则无法查看视图信息。</p>\n</li>\n<li><p>TRIGGERS表：提供了关于触发程序的信息。必须有super权限才能查看该表。</p>\n</li>\n</ol>\n<h1 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h1><h1 id=\"performance-schema\"><a href=\"#performance-schema\" class=\"headerlink\" title=\"performance_schema\"></a>performance_schema</h1><p> 需要设置参数： performance_schema 才可以启动该功能</p>\n<p>按照相关的标准对进行的事件统计表, 表也是只读的，只能turcate</p>\n<p>　　events_waits_summary_by_instance             </p>\n<p>　　events_waits_summary_by_thread_by_event_name </p>\n<p>　　events_waits_summary_global_by_event_name    </p>\n<p>　　file_summary_by_event_name                   </p>\n<p>　　file_summary_by_instance   </p>\n<ul>\n<li><p>setup_consumers 描述各种事件</p>\n</li>\n<li><p>setup_instruments 描述这个数据库下的表名以及是否开启监控。</p>\n</li>\n<li><p>setup_timers   描述 监控选项已经采样频率的时间间隔</p>\n</li>\n<li><p>events_waits_current  记录当前正在发生的等待事件，这个表是只读的表，不能update ，delete ，但是可以truncate</p>\n</li>\n<li><p>性能历史表 ：events_waits_history  只保留每个线程（thread） 的最近的10个事件</p>\n</li>\n<li><p>性能历史表 ：events_waits_history_long 记录最近的10000个事件  标准的先进先出（FIFO) 这俩表也是只读表，只能truncate</p>\n</li>\n</ul>\n<h1 id=\"sakila\"><a href=\"#sakila\" class=\"headerlink\" title=\"sakila\"></a>sakila</h1><p>　　这是一个MySQL的一个样本数据库，里边都是一些例子表。</p>\n"},{"title":"数据库事务","date":"2019-09-01T12:18:43.000Z","_content":"\n　本篇讲诉数据库中事务的四大特性（ACID），并且将会详细地说明事务的隔离级别。\n\n　　如果一个数据库声称支持事务的操作，那么该数据库必须要具备以下四个特性：\n\n## ⑴ 原子性（Atomicity）\n\n　　原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，这和前面两篇博客介绍事务的功能是一样的概念，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。\n\n## ⑵ 一致性（Consistency）\n\n　　一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。\n\n　　拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。\n\n## ⑶ 隔离性（Isolation）\n\n　　隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。\n\n　　即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。\n\n　　关于事务的隔离性数据库提供了多种隔离级别，稍后会介绍到。\n\n## ⑷ 持久性（Durability）\n\n　　持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。\n\n　　例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。\n\n　　以上介绍完事务的四大特性(简称ACID)，现在重点来说明下事务的隔离性，当多个线程都开启事务操作数据库中的数据时，数据库系统要能进行隔离操作，以保证各个线程获取数据的准确性，在介绍数据库提供的各种隔离级别之前，我们先看看如果不考虑事务的隔离性，会发生的几种问题：\n\n## 1，脏读\n\n　　脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。\n\n　　当一个事务正在多次修改某个数据，而在这个事务中这多次的修改都还未提交，这时一个并发的事务来访问该数据，就会造成两个事务得到的数据不一致。例如：用户A向用户B转账100元，对应SQL命令如下\n\n```\n    update account set money=money+100 where name=’B’;  (此时A通知B)\n\n    update account set money=money - 100 where name=’A’;\n```\n\n　　当只执行第一条SQL时，A通知B查看账户，B发现确实钱已到账（此时即发生了脏读），而之后无论第二条SQL是否执行，只要该事务不提交，则所有操作都将回滚，那么当B以后再次查看账户时就会发现钱其实并没有转。\n\n## 2，不可重复读\n\n　　不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了。\n\n　　例如事务T1在读取某一数据，而事务T2立马修改了这个数据并且提交事务给数据库，事务T1再次读取该数据就得到了不同的结果，发送了不可重复读。\n\n　　不可重复读和脏读的区别是，脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据。\n\n　　在某些情况下，不可重复读并不是问题，比如我们多次查询某个数据当然以最后查询得到的结果为主。但在另一些情况下就有可能发生问题，例如对于同一个数据A和B依次查询就可能不同，A和B就可能打起来了……\n\n## 3，虚读(幻读)\n\n　　幻读是事务非独立执行时发生的一种现象。例如事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。\n\n　　幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）。\n　　现在来看看MySQL数据库为我们提供的四种隔离级别：\n　　① Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。\n　　② Repeatable read (可重复读)：可避免脏读、不可重复读的发生。\n　　③ Read committed (读已提交)：可避免脏读的发生。\n　　④ Read uncommitted (读未提交)：最低级别，任何情况都无法保证。\n\n　　以上四种隔离级别最高的是Serializable级别，最低的是Read uncommitted级别，当然级别越高，执行效率就越低。像Serializable这样的级别，就是以锁表的方式(类似于Java多线程中的锁)使得其他的线程只能在锁外等待，所以平时选用何种隔离级别应该根据实际情况。在MySQL数据库中默认的隔离级别为Repeatable read (可重复读)。\n\n　　在MySQL数据库中，支持上面四种隔离级别，默认的为Repeatable read (可重复读)；而在Oracle数据库中，只支持Serializable (串行化)级别和Read committed (读已提交)这两种级别，其中默认的为Read committed级别。\n\n　　在MySQL数据库中查看当前事务的隔离级别：\n\n```\n    select @@tx_isolation;\n```\n\n　　在MySQL数据库中设置事务的隔离 级别：\n\n```\n    set  [glogal | session]  transaction isolation level 隔离级别名称;\n    set tx_isolation=’隔离级别名称;’\n```\n\n　　后记：隔离级别的设置只对当前链接有效。对于使用MySQL命令窗口而言，一个窗口就相当于一个链接，当前窗口设置的隔离级别只对当前窗口中的事务有效；对于JDBC操作数据库来说，一个Connection对象相当于一个链接，而对于Connection对象设置的隔离级别只对该Connection对象有效，与其他链接Connection对象无关。\n\n# 参考博客：\n\n<http://www.zhihu.com/question/23989904>\n<http://dev.mysql.com/doc/refman/5.6/en/set-transaction.html>\n<http://www.cnblogs.com/xdp-gacl/p/3984001.html>\n<https://www.cnblogs.com/fjdingsd/p/5273008.html>\n\n ","source":"_posts/mysql/数据库事务.md","raw":"---\ntitle: 数据库事务\ndate: 2019-09-01 20:18:43\ntags: mysql\n---\n\n　本篇讲诉数据库中事务的四大特性（ACID），并且将会详细地说明事务的隔离级别。\n\n　　如果一个数据库声称支持事务的操作，那么该数据库必须要具备以下四个特性：\n\n## ⑴ 原子性（Atomicity）\n\n　　原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，这和前面两篇博客介绍事务的功能是一样的概念，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。\n\n## ⑵ 一致性（Consistency）\n\n　　一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。\n\n　　拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。\n\n## ⑶ 隔离性（Isolation）\n\n　　隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。\n\n　　即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。\n\n　　关于事务的隔离性数据库提供了多种隔离级别，稍后会介绍到。\n\n## ⑷ 持久性（Durability）\n\n　　持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。\n\n　　例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。\n\n　　以上介绍完事务的四大特性(简称ACID)，现在重点来说明下事务的隔离性，当多个线程都开启事务操作数据库中的数据时，数据库系统要能进行隔离操作，以保证各个线程获取数据的准确性，在介绍数据库提供的各种隔离级别之前，我们先看看如果不考虑事务的隔离性，会发生的几种问题：\n\n## 1，脏读\n\n　　脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。\n\n　　当一个事务正在多次修改某个数据，而在这个事务中这多次的修改都还未提交，这时一个并发的事务来访问该数据，就会造成两个事务得到的数据不一致。例如：用户A向用户B转账100元，对应SQL命令如下\n\n```\n    update account set money=money+100 where name=’B’;  (此时A通知B)\n\n    update account set money=money - 100 where name=’A’;\n```\n\n　　当只执行第一条SQL时，A通知B查看账户，B发现确实钱已到账（此时即发生了脏读），而之后无论第二条SQL是否执行，只要该事务不提交，则所有操作都将回滚，那么当B以后再次查看账户时就会发现钱其实并没有转。\n\n## 2，不可重复读\n\n　　不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了。\n\n　　例如事务T1在读取某一数据，而事务T2立马修改了这个数据并且提交事务给数据库，事务T1再次读取该数据就得到了不同的结果，发送了不可重复读。\n\n　　不可重复读和脏读的区别是，脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据。\n\n　　在某些情况下，不可重复读并不是问题，比如我们多次查询某个数据当然以最后查询得到的结果为主。但在另一些情况下就有可能发生问题，例如对于同一个数据A和B依次查询就可能不同，A和B就可能打起来了……\n\n## 3，虚读(幻读)\n\n　　幻读是事务非独立执行时发生的一种现象。例如事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。\n\n　　幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）。\n　　现在来看看MySQL数据库为我们提供的四种隔离级别：\n　　① Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。\n　　② Repeatable read (可重复读)：可避免脏读、不可重复读的发生。\n　　③ Read committed (读已提交)：可避免脏读的发生。\n　　④ Read uncommitted (读未提交)：最低级别，任何情况都无法保证。\n\n　　以上四种隔离级别最高的是Serializable级别，最低的是Read uncommitted级别，当然级别越高，执行效率就越低。像Serializable这样的级别，就是以锁表的方式(类似于Java多线程中的锁)使得其他的线程只能在锁外等待，所以平时选用何种隔离级别应该根据实际情况。在MySQL数据库中默认的隔离级别为Repeatable read (可重复读)。\n\n　　在MySQL数据库中，支持上面四种隔离级别，默认的为Repeatable read (可重复读)；而在Oracle数据库中，只支持Serializable (串行化)级别和Read committed (读已提交)这两种级别，其中默认的为Read committed级别。\n\n　　在MySQL数据库中查看当前事务的隔离级别：\n\n```\n    select @@tx_isolation;\n```\n\n　　在MySQL数据库中设置事务的隔离 级别：\n\n```\n    set  [glogal | session]  transaction isolation level 隔离级别名称;\n    set tx_isolation=’隔离级别名称;’\n```\n\n　　后记：隔离级别的设置只对当前链接有效。对于使用MySQL命令窗口而言，一个窗口就相当于一个链接，当前窗口设置的隔离级别只对当前窗口中的事务有效；对于JDBC操作数据库来说，一个Connection对象相当于一个链接，而对于Connection对象设置的隔离级别只对该Connection对象有效，与其他链接Connection对象无关。\n\n# 参考博客：\n\n<http://www.zhihu.com/question/23989904>\n<http://dev.mysql.com/doc/refman/5.6/en/set-transaction.html>\n<http://www.cnblogs.com/xdp-gacl/p/3984001.html>\n<https://www.cnblogs.com/fjdingsd/p/5273008.html>\n\n ","slug":"mysql/数据库事务","published":1,"updated":"2019-10-14T09:01:07.924Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a43w003hic1ytfu5q22s","content":"<p>　本篇讲诉数据库中事务的四大特性（ACID），并且将会详细地说明事务的隔离级别。</p>\n<p>　　如果一个数据库声称支持事务的操作，那么该数据库必须要具备以下四个特性：</p>\n<h2 id=\"⑴-原子性（Atomicity）\"><a href=\"#⑴-原子性（Atomicity）\" class=\"headerlink\" title=\"⑴ 原子性（Atomicity）\"></a>⑴ 原子性（Atomicity）</h2><p>　　原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，这和前面两篇博客介绍事务的功能是一样的概念，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</p>\n<h2 id=\"⑵-一致性（Consistency）\"><a href=\"#⑵-一致性（Consistency）\" class=\"headerlink\" title=\"⑵ 一致性（Consistency）\"></a>⑵ 一致性（Consistency）</h2><p>　　一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</p>\n<p>　　拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。</p>\n<h2 id=\"⑶-隔离性（Isolation）\"><a href=\"#⑶-隔离性（Isolation）\" class=\"headerlink\" title=\"⑶ 隔离性（Isolation）\"></a>⑶ 隔离性（Isolation）</h2><p>　　隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</p>\n<p>　　即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</p>\n<p>　　关于事务的隔离性数据库提供了多种隔离级别，稍后会介绍到。</p>\n<h2 id=\"⑷-持久性（Durability）\"><a href=\"#⑷-持久性（Durability）\" class=\"headerlink\" title=\"⑷ 持久性（Durability）\"></a>⑷ 持久性（Durability）</h2><p>　　持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p>\n<p>　　例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。</p>\n<p>　　以上介绍完事务的四大特性(简称ACID)，现在重点来说明下事务的隔离性，当多个线程都开启事务操作数据库中的数据时，数据库系统要能进行隔离操作，以保证各个线程获取数据的准确性，在介绍数据库提供的各种隔离级别之前，我们先看看如果不考虑事务的隔离性，会发生的几种问题：</p>\n<h2 id=\"1，脏读\"><a href=\"#1，脏读\" class=\"headerlink\" title=\"1，脏读\"></a>1，脏读</h2><p>　　脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。</p>\n<p>　　当一个事务正在多次修改某个数据，而在这个事务中这多次的修改都还未提交，这时一个并发的事务来访问该数据，就会造成两个事务得到的数据不一致。例如：用户A向用户B转账100元，对应SQL命令如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update account set money=money+100 where name=’B’;  (此时A通知B)</span><br><span class=\"line\"></span><br><span class=\"line\">update account set money=money - 100 where name=’A’;</span><br></pre></td></tr></table></figure>\n<p>　　当只执行第一条SQL时，A通知B查看账户，B发现确实钱已到账（此时即发生了脏读），而之后无论第二条SQL是否执行，只要该事务不提交，则所有操作都将回滚，那么当B以后再次查看账户时就会发现钱其实并没有转。</p>\n<h2 id=\"2，不可重复读\"><a href=\"#2，不可重复读\" class=\"headerlink\" title=\"2，不可重复读\"></a>2，不可重复读</h2><p>　　不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了。</p>\n<p>　　例如事务T1在读取某一数据，而事务T2立马修改了这个数据并且提交事务给数据库，事务T1再次读取该数据就得到了不同的结果，发送了不可重复读。</p>\n<p>　　不可重复读和脏读的区别是，脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据。</p>\n<p>　　在某些情况下，不可重复读并不是问题，比如我们多次查询某个数据当然以最后查询得到的结果为主。但在另一些情况下就有可能发生问题，例如对于同一个数据A和B依次查询就可能不同，A和B就可能打起来了……</p>\n<h2 id=\"3，虚读-幻读\"><a href=\"#3，虚读-幻读\" class=\"headerlink\" title=\"3，虚读(幻读)\"></a>3，虚读(幻读)</h2><p>　　幻读是事务非独立执行时发生的一种现象。例如事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。</p>\n<p>　　幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）。<br>　　现在来看看MySQL数据库为我们提供的四种隔离级别：<br>　　① Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。<br>　　② Repeatable read (可重复读)：可避免脏读、不可重复读的发生。<br>　　③ Read committed (读已提交)：可避免脏读的发生。<br>　　④ Read uncommitted (读未提交)：最低级别，任何情况都无法保证。</p>\n<p>　　以上四种隔离级别最高的是Serializable级别，最低的是Read uncommitted级别，当然级别越高，执行效率就越低。像Serializable这样的级别，就是以锁表的方式(类似于Java多线程中的锁)使得其他的线程只能在锁外等待，所以平时选用何种隔离级别应该根据实际情况。在MySQL数据库中默认的隔离级别为Repeatable read (可重复读)。</p>\n<p>　　在MySQL数据库中，支持上面四种隔离级别，默认的为Repeatable read (可重复读)；而在Oracle数据库中，只支持Serializable (串行化)级别和Read committed (读已提交)这两种级别，其中默认的为Read committed级别。</p>\n<p>　　在MySQL数据库中查看当前事务的隔离级别：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select @@tx_isolation;</span><br></pre></td></tr></table></figure>\n<p>　　在MySQL数据库中设置事务的隔离 级别：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set  [glogal | session]  transaction isolation level 隔离级别名称;</span><br><span class=\"line\">set tx_isolation=’隔离级别名称;’</span><br></pre></td></tr></table></figure>\n<p>　　后记：隔离级别的设置只对当前链接有效。对于使用MySQL命令窗口而言，一个窗口就相当于一个链接，当前窗口设置的隔离级别只对当前窗口中的事务有效；对于JDBC操作数据库来说，一个Connection对象相当于一个链接，而对于Connection对象设置的隔离级别只对该Connection对象有效，与其他链接Connection对象无关。</p>\n<h1 id=\"参考博客：\"><a href=\"#参考博客：\" class=\"headerlink\" title=\"参考博客：\"></a>参考博客：</h1><p><a href=\"http://www.zhihu.com/question/23989904\" target=\"_blank\" rel=\"noopener\">http://www.zhihu.com/question/23989904</a><br><a href=\"http://dev.mysql.com/doc/refman/5.6/en/set-transaction.html\" target=\"_blank\" rel=\"noopener\">http://dev.mysql.com/doc/refman/5.6/en/set-transaction.html</a><br><a href=\"http://www.cnblogs.com/xdp-gacl/p/3984001.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/xdp-gacl/p/3984001.html</a><br><a href=\"https://www.cnblogs.com/fjdingsd/p/5273008.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/fjdingsd/p/5273008.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>　本篇讲诉数据库中事务的四大特性（ACID），并且将会详细地说明事务的隔离级别。</p>\n<p>　　如果一个数据库声称支持事务的操作，那么该数据库必须要具备以下四个特性：</p>\n<h2 id=\"⑴-原子性（Atomicity）\"><a href=\"#⑴-原子性（Atomicity）\" class=\"headerlink\" title=\"⑴ 原子性（Atomicity）\"></a>⑴ 原子性（Atomicity）</h2><p>　　原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，这和前面两篇博客介绍事务的功能是一样的概念，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</p>\n<h2 id=\"⑵-一致性（Consistency）\"><a href=\"#⑵-一致性（Consistency）\" class=\"headerlink\" title=\"⑵ 一致性（Consistency）\"></a>⑵ 一致性（Consistency）</h2><p>　　一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</p>\n<p>　　拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。</p>\n<h2 id=\"⑶-隔离性（Isolation）\"><a href=\"#⑶-隔离性（Isolation）\" class=\"headerlink\" title=\"⑶ 隔离性（Isolation）\"></a>⑶ 隔离性（Isolation）</h2><p>　　隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</p>\n<p>　　即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</p>\n<p>　　关于事务的隔离性数据库提供了多种隔离级别，稍后会介绍到。</p>\n<h2 id=\"⑷-持久性（Durability）\"><a href=\"#⑷-持久性（Durability）\" class=\"headerlink\" title=\"⑷ 持久性（Durability）\"></a>⑷ 持久性（Durability）</h2><p>　　持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p>\n<p>　　例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。</p>\n<p>　　以上介绍完事务的四大特性(简称ACID)，现在重点来说明下事务的隔离性，当多个线程都开启事务操作数据库中的数据时，数据库系统要能进行隔离操作，以保证各个线程获取数据的准确性，在介绍数据库提供的各种隔离级别之前，我们先看看如果不考虑事务的隔离性，会发生的几种问题：</p>\n<h2 id=\"1，脏读\"><a href=\"#1，脏读\" class=\"headerlink\" title=\"1，脏读\"></a>1，脏读</h2><p>　　脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。</p>\n<p>　　当一个事务正在多次修改某个数据，而在这个事务中这多次的修改都还未提交，这时一个并发的事务来访问该数据，就会造成两个事务得到的数据不一致。例如：用户A向用户B转账100元，对应SQL命令如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update account set money=money+100 where name=’B’;  (此时A通知B)</span><br><span class=\"line\"></span><br><span class=\"line\">update account set money=money - 100 where name=’A’;</span><br></pre></td></tr></table></figure>\n<p>　　当只执行第一条SQL时，A通知B查看账户，B发现确实钱已到账（此时即发生了脏读），而之后无论第二条SQL是否执行，只要该事务不提交，则所有操作都将回滚，那么当B以后再次查看账户时就会发现钱其实并没有转。</p>\n<h2 id=\"2，不可重复读\"><a href=\"#2，不可重复读\" class=\"headerlink\" title=\"2，不可重复读\"></a>2，不可重复读</h2><p>　　不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了。</p>\n<p>　　例如事务T1在读取某一数据，而事务T2立马修改了这个数据并且提交事务给数据库，事务T1再次读取该数据就得到了不同的结果，发送了不可重复读。</p>\n<p>　　不可重复读和脏读的区别是，脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据。</p>\n<p>　　在某些情况下，不可重复读并不是问题，比如我们多次查询某个数据当然以最后查询得到的结果为主。但在另一些情况下就有可能发生问题，例如对于同一个数据A和B依次查询就可能不同，A和B就可能打起来了……</p>\n<h2 id=\"3，虚读-幻读\"><a href=\"#3，虚读-幻读\" class=\"headerlink\" title=\"3，虚读(幻读)\"></a>3，虚读(幻读)</h2><p>　　幻读是事务非独立执行时发生的一种现象。例如事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。</p>\n<p>　　幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）。<br>　　现在来看看MySQL数据库为我们提供的四种隔离级别：<br>　　① Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。<br>　　② Repeatable read (可重复读)：可避免脏读、不可重复读的发生。<br>　　③ Read committed (读已提交)：可避免脏读的发生。<br>　　④ Read uncommitted (读未提交)：最低级别，任何情况都无法保证。</p>\n<p>　　以上四种隔离级别最高的是Serializable级别，最低的是Read uncommitted级别，当然级别越高，执行效率就越低。像Serializable这样的级别，就是以锁表的方式(类似于Java多线程中的锁)使得其他的线程只能在锁外等待，所以平时选用何种隔离级别应该根据实际情况。在MySQL数据库中默认的隔离级别为Repeatable read (可重复读)。</p>\n<p>　　在MySQL数据库中，支持上面四种隔离级别，默认的为Repeatable read (可重复读)；而在Oracle数据库中，只支持Serializable (串行化)级别和Read committed (读已提交)这两种级别，其中默认的为Read committed级别。</p>\n<p>　　在MySQL数据库中查看当前事务的隔离级别：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select @@tx_isolation;</span><br></pre></td></tr></table></figure>\n<p>　　在MySQL数据库中设置事务的隔离 级别：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set  [glogal | session]  transaction isolation level 隔离级别名称;</span><br><span class=\"line\">set tx_isolation=’隔离级别名称;’</span><br></pre></td></tr></table></figure>\n<p>　　后记：隔离级别的设置只对当前链接有效。对于使用MySQL命令窗口而言，一个窗口就相当于一个链接，当前窗口设置的隔离级别只对当前窗口中的事务有效；对于JDBC操作数据库来说，一个Connection对象相当于一个链接，而对于Connection对象设置的隔离级别只对该Connection对象有效，与其他链接Connection对象无关。</p>\n<h1 id=\"参考博客：\"><a href=\"#参考博客：\" class=\"headerlink\" title=\"参考博客：\"></a>参考博客：</h1><p><a href=\"http://www.zhihu.com/question/23989904\" target=\"_blank\" rel=\"noopener\">http://www.zhihu.com/question/23989904</a><br><a href=\"http://dev.mysql.com/doc/refman/5.6/en/set-transaction.html\" target=\"_blank\" rel=\"noopener\">http://dev.mysql.com/doc/refman/5.6/en/set-transaction.html</a><br><a href=\"http://www.cnblogs.com/xdp-gacl/p/3984001.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/xdp-gacl/p/3984001.html</a><br><a href=\"https://www.cnblogs.com/fjdingsd/p/5273008.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/fjdingsd/p/5273008.html</a></p>\n"},{"title":"nginx配置","date":"2018-12-05T13:47:32.000Z","_content":"\n## 配置web服务器\n\n```\nserver {\n    listen      80;\n    server_name api.lufficc.com  *.lufficc.com;\n    location /images/ {\n        root /data;\n    }\n\n    location / {\n        proxy_pass https://lufficc.com;\n    }\n}\n```\n\n## 反向代理\n\n```\nserver{\n      listen 80;\n      server_name search.lufficc.com;\n      location / {\n              proxy_pass https://www.baidu.com;\n      }\n}\n```\n\n# 参考\n\n> https://lufficc.com/blog/configure-nginx-as-a-web-server\n>\n> https://blog.csdn.net/hj7jay/article/details/53905943 http://www.nginx.cn/76.html","source":"_posts/nginx/nginx配置.md","raw":"---\ntitle: nginx配置\ndate: 2018-12-05 21:47:32\ntags:\n- web\n- linux\n---\n\n## 配置web服务器\n\n```\nserver {\n    listen      80;\n    server_name api.lufficc.com  *.lufficc.com;\n    location /images/ {\n        root /data;\n    }\n\n    location / {\n        proxy_pass https://lufficc.com;\n    }\n}\n```\n\n## 反向代理\n\n```\nserver{\n      listen 80;\n      server_name search.lufficc.com;\n      location / {\n              proxy_pass https://www.baidu.com;\n      }\n}\n```\n\n# 参考\n\n> https://lufficc.com/blog/configure-nginx-as-a-web-server\n>\n> https://blog.csdn.net/hj7jay/article/details/53905943 http://www.nginx.cn/76.html","slug":"nginx/nginx配置","published":1,"updated":"2019-10-14T09:01:07.958Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a43x003jic1y3xeupw5u","content":"<h2 id=\"配置web服务器\"><a href=\"#配置web服务器\" class=\"headerlink\" title=\"配置web服务器\"></a>配置web服务器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      80;</span><br><span class=\"line\">    server_name api.lufficc.com  *.lufficc.com;</span><br><span class=\"line\">    location /images/ &#123;</span><br><span class=\"line\">        root /data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass https://lufficc.com;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">      listen 80;</span><br><span class=\"line\">      server_name search.lufficc.com;</span><br><span class=\"line\">      location / &#123;</span><br><span class=\"line\">              proxy_pass https://www.baidu.com;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://lufficc.com/blog/configure-nginx-as-a-web-server\" target=\"_blank\" rel=\"noopener\">https://lufficc.com/blog/configure-nginx-as-a-web-server</a></p>\n<p><a href=\"https://blog.csdn.net/hj7jay/article/details/53905943\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/hj7jay/article/details/53905943</a> <a href=\"http://www.nginx.cn/76.html\" target=\"_blank\" rel=\"noopener\">http://www.nginx.cn/76.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"配置web服务器\"><a href=\"#配置web服务器\" class=\"headerlink\" title=\"配置web服务器\"></a>配置web服务器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      80;</span><br><span class=\"line\">    server_name api.lufficc.com  *.lufficc.com;</span><br><span class=\"line\">    location /images/ &#123;</span><br><span class=\"line\">        root /data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass https://lufficc.com;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">      listen 80;</span><br><span class=\"line\">      server_name search.lufficc.com;</span><br><span class=\"line\">      location / &#123;</span><br><span class=\"line\">              proxy_pass https://www.baidu.com;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://lufficc.com/blog/configure-nginx-as-a-web-server\" target=\"_blank\" rel=\"noopener\">https://lufficc.com/blog/configure-nginx-as-a-web-server</a></p>\n<p><a href=\"https://blog.csdn.net/hj7jay/article/details/53905943\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/hj7jay/article/details/53905943</a> <a href=\"http://www.nginx.cn/76.html\" target=\"_blank\" rel=\"noopener\">http://www.nginx.cn/76.html</a></p>\n</blockquote>\n"},{"title":"Oracle基本管理","date":"2018-12-29T12:37:37.000Z","_content":"\n# 用户管理\n\n```sql\n## 创建用户\ncreate user test identified by test;\nshow user;\n\n## 删除用户\ndelete test (cascade);\n\n## 修改用户\nalter user test identified by wumu;\nalter user test expire;\n\n## 用户口令\n## 密码输错三次就密码锁定2天\ncreate profile lock_account limit failed_login_attempts 3 password_lock_time 2;\nalter user tea profile lock_account;\n## 解锁\nalter user tea account unlock;\n## 每10天需要修改密码，宽限期为两天\ncreate profile myprofile limit password_life_time 10 password_grace_time 2;\nalter user tea profile myprofile;\n## 口令10天后可以重用\ncreate profile password_history limit password_lift_time 10 password_grace_time 2 password_reuse_time 10\n\n## 撤销profile\ndrop profile my_profile CASCADE；\n\n```\n\n# 权限管理\n\n```\n## 授权\ngrant system_privilege|all privileges to {user identified by password |role|}\n[with admin option]\n\ngrant object_privileage | All\non schema.object\nto user | role\n[with admin option]\n[with the grant any object]\n\ngrant select on test to wumu with grant option;\ngrant connect tp wumu with admin option;\n\n## create session 用于登录\n## dba 管路员\n## resource 可以建表\n## desc table_name\n## 撤销权限\n## 如果授权者的权限被撤回，那么它的被授予者也会失去相关的权限\ninvoke system_privilege from user|role\ninvoke object_privilege|All on scheme.object from user|role [cascade contraints]\n\n## 查询权限\n## 系统权限放在DBA_SYS_PRIVS\n## 对象权限放在数据字典DBA_TAB_PRIVS\n\n```\n\n","source":"_posts/oracle/Oracle基本管理.md","raw":"---\ntitle: Oracle基本管理\ndate: 2018-12-29 20:37:37\ntags:\n- oracle\n---\n\n# 用户管理\n\n```sql\n## 创建用户\ncreate user test identified by test;\nshow user;\n\n## 删除用户\ndelete test (cascade);\n\n## 修改用户\nalter user test identified by wumu;\nalter user test expire;\n\n## 用户口令\n## 密码输错三次就密码锁定2天\ncreate profile lock_account limit failed_login_attempts 3 password_lock_time 2;\nalter user tea profile lock_account;\n## 解锁\nalter user tea account unlock;\n## 每10天需要修改密码，宽限期为两天\ncreate profile myprofile limit password_life_time 10 password_grace_time 2;\nalter user tea profile myprofile;\n## 口令10天后可以重用\ncreate profile password_history limit password_lift_time 10 password_grace_time 2 password_reuse_time 10\n\n## 撤销profile\ndrop profile my_profile CASCADE；\n\n```\n\n# 权限管理\n\n```\n## 授权\ngrant system_privilege|all privileges to {user identified by password |role|}\n[with admin option]\n\ngrant object_privileage | All\non schema.object\nto user | role\n[with admin option]\n[with the grant any object]\n\ngrant select on test to wumu with grant option;\ngrant connect tp wumu with admin option;\n\n## create session 用于登录\n## dba 管路员\n## resource 可以建表\n## desc table_name\n## 撤销权限\n## 如果授权者的权限被撤回，那么它的被授予者也会失去相关的权限\ninvoke system_privilege from user|role\ninvoke object_privilege|All on scheme.object from user|role [cascade contraints]\n\n## 查询权限\n## 系统权限放在DBA_SYS_PRIVS\n## 对象权限放在数据字典DBA_TAB_PRIVS\n\n```\n\n","slug":"oracle/Oracle基本管理","published":1,"updated":"2019-10-14T09:01:08.111Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a43y003lic1ydtau2v3o","content":"<h1 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 创建用户</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> <span class=\"keyword\">test</span> <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"keyword\">test</span>;</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">user</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 删除用户</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">test</span> (<span class=\"keyword\">cascade</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 修改用户</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> <span class=\"keyword\">test</span> <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> wumu;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> <span class=\"keyword\">test</span> <span class=\"keyword\">expire</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 用户口令</span></span><br><span class=\"line\"><span class=\"comment\">## 密码输错三次就密码锁定2天</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> profile lock_account <span class=\"keyword\">limit</span> <span class=\"keyword\">failed_login_attempts</span> <span class=\"number\">3</span> <span class=\"keyword\">password_lock_time</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> tea profile lock_account;</span><br><span class=\"line\"><span class=\"comment\">## 解锁</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> tea <span class=\"keyword\">account</span> <span class=\"keyword\">unlock</span>;</span><br><span class=\"line\"><span class=\"comment\">## 每10天需要修改密码，宽限期为两天</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> profile myprofile <span class=\"keyword\">limit</span> password_life_time <span class=\"number\">10</span> <span class=\"keyword\">password_grace_time</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> tea profile myprofile;</span><br><span class=\"line\"><span class=\"comment\">## 口令10天后可以重用</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> profile password_history <span class=\"keyword\">limit</span> password_lift_time <span class=\"number\">10</span> <span class=\"keyword\">password_grace_time</span> <span class=\"number\">2</span> <span class=\"keyword\">password_reuse_time</span> <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 撤销profile</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> profile my_profile <span class=\"keyword\">CASCADE</span>；</span><br></pre></td></tr></table></figure>\n<h1 id=\"权限管理\"><a href=\"#权限管理\" class=\"headerlink\" title=\"权限管理\"></a>权限管理</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 授权</span><br><span class=\"line\">grant system_privilege|all privileges to &#123;user identified by password |role|&#125;</span><br><span class=\"line\">[with admin option]</span><br><span class=\"line\"></span><br><span class=\"line\">grant object_privileage | All</span><br><span class=\"line\">on schema.object</span><br><span class=\"line\">to user | role</span><br><span class=\"line\">[with admin option]</span><br><span class=\"line\">[with the grant any object]</span><br><span class=\"line\"></span><br><span class=\"line\">grant select on test to wumu with grant option;</span><br><span class=\"line\">grant connect tp wumu with admin option;</span><br><span class=\"line\"></span><br><span class=\"line\">## create session 用于登录</span><br><span class=\"line\">## dba 管路员</span><br><span class=\"line\">## resource 可以建表</span><br><span class=\"line\">## desc table_name</span><br><span class=\"line\">## 撤销权限</span><br><span class=\"line\">## 如果授权者的权限被撤回，那么它的被授予者也会失去相关的权限</span><br><span class=\"line\">invoke system_privilege from user|role</span><br><span class=\"line\">invoke object_privilege|All on scheme.object from user|role [cascade contraints]</span><br><span class=\"line\"></span><br><span class=\"line\">## 查询权限</span><br><span class=\"line\">## 系统权限放在DBA_SYS_PRIVS</span><br><span class=\"line\">## 对象权限放在数据字典DBA_TAB_PRIVS</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 创建用户</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> <span class=\"keyword\">test</span> <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"keyword\">test</span>;</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">user</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 删除用户</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">test</span> (<span class=\"keyword\">cascade</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 修改用户</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> <span class=\"keyword\">test</span> <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> wumu;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> <span class=\"keyword\">test</span> <span class=\"keyword\">expire</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 用户口令</span></span><br><span class=\"line\"><span class=\"comment\">## 密码输错三次就密码锁定2天</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> profile lock_account <span class=\"keyword\">limit</span> <span class=\"keyword\">failed_login_attempts</span> <span class=\"number\">3</span> <span class=\"keyword\">password_lock_time</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> tea profile lock_account;</span><br><span class=\"line\"><span class=\"comment\">## 解锁</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> tea <span class=\"keyword\">account</span> <span class=\"keyword\">unlock</span>;</span><br><span class=\"line\"><span class=\"comment\">## 每10天需要修改密码，宽限期为两天</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> profile myprofile <span class=\"keyword\">limit</span> password_life_time <span class=\"number\">10</span> <span class=\"keyword\">password_grace_time</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> tea profile myprofile;</span><br><span class=\"line\"><span class=\"comment\">## 口令10天后可以重用</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> profile password_history <span class=\"keyword\">limit</span> password_lift_time <span class=\"number\">10</span> <span class=\"keyword\">password_grace_time</span> <span class=\"number\">2</span> <span class=\"keyword\">password_reuse_time</span> <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 撤销profile</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> profile my_profile <span class=\"keyword\">CASCADE</span>；</span><br></pre></td></tr></table></figure>\n<h1 id=\"权限管理\"><a href=\"#权限管理\" class=\"headerlink\" title=\"权限管理\"></a>权限管理</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 授权</span><br><span class=\"line\">grant system_privilege|all privileges to &#123;user identified by password |role|&#125;</span><br><span class=\"line\">[with admin option]</span><br><span class=\"line\"></span><br><span class=\"line\">grant object_privileage | All</span><br><span class=\"line\">on schema.object</span><br><span class=\"line\">to user | role</span><br><span class=\"line\">[with admin option]</span><br><span class=\"line\">[with the grant any object]</span><br><span class=\"line\"></span><br><span class=\"line\">grant select on test to wumu with grant option;</span><br><span class=\"line\">grant connect tp wumu with admin option;</span><br><span class=\"line\"></span><br><span class=\"line\">## create session 用于登录</span><br><span class=\"line\">## dba 管路员</span><br><span class=\"line\">## resource 可以建表</span><br><span class=\"line\">## desc table_name</span><br><span class=\"line\">## 撤销权限</span><br><span class=\"line\">## 如果授权者的权限被撤回，那么它的被授予者也会失去相关的权限</span><br><span class=\"line\">invoke system_privilege from user|role</span><br><span class=\"line\">invoke object_privilege|All on scheme.object from user|role [cascade contraints]</span><br><span class=\"line\"></span><br><span class=\"line\">## 查询权限</span><br><span class=\"line\">## 系统权限放在DBA_SYS_PRIVS</span><br><span class=\"line\">## 对象权限放在数据字典DBA_TAB_PRIVS</span><br></pre></td></tr></table></figure>\n"},{"title":"Oracle表管理","date":"2018-12-29T13:45:47.000Z","_content":"\n## 数据类型\n\n```\n## 字符型\nchar 定长，后面空格补全\nvarchar2() 变长\nclob 字符型大对象\n\n## 数字类型\nnumber\nnumber(5，2) 标识5位有效数，2位小数-999.99-999.99\nnumber(5) 5位整数\n\n## 日期类型\ndate\ntimestramp\n## 图片\nblob 二进制4g,为了安全可以放入数据库\n```\n\n# 表操作\n\n```\ncreate table table_name(\n)\n\ndrop table table_name;\n\nrename table_name to other_table_name;\n\nalter table table_name add ...;\nalter table table_name modify ...;\nalter table table_name drop column ...;\n```\n\n","source":"_posts/oracle/Oracle表管理.md","raw":"---\ntitle: Oracle表管理\ndate: 2018-12-29 21:45:47\ntags:\n- oracle\n---\n\n## 数据类型\n\n```\n## 字符型\nchar 定长，后面空格补全\nvarchar2() 变长\nclob 字符型大对象\n\n## 数字类型\nnumber\nnumber(5，2) 标识5位有效数，2位小数-999.99-999.99\nnumber(5) 5位整数\n\n## 日期类型\ndate\ntimestramp\n## 图片\nblob 二进制4g,为了安全可以放入数据库\n```\n\n# 表操作\n\n```\ncreate table table_name(\n)\n\ndrop table table_name;\n\nrename table_name to other_table_name;\n\nalter table table_name add ...;\nalter table table_name modify ...;\nalter table table_name drop column ...;\n```\n\n","slug":"oracle/Oracle表管理","published":1,"updated":"2019-10-14T09:01:08.119Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a43z003nic1yddw0hsqo","content":"<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 字符型</span><br><span class=\"line\">char 定长，后面空格补全</span><br><span class=\"line\">varchar2() 变长</span><br><span class=\"line\">clob 字符型大对象</span><br><span class=\"line\"></span><br><span class=\"line\">## 数字类型</span><br><span class=\"line\">number</span><br><span class=\"line\">number(5，2) 标识5位有效数，2位小数-999.99-999.99</span><br><span class=\"line\">number(5) 5位整数</span><br><span class=\"line\"></span><br><span class=\"line\">## 日期类型</span><br><span class=\"line\">date</span><br><span class=\"line\">timestramp</span><br><span class=\"line\">## 图片</span><br><span class=\"line\">blob 二进制4g,为了安全可以放入数据库</span><br></pre></td></tr></table></figure>\n<h1 id=\"表操作\"><a href=\"#表操作\" class=\"headerlink\" title=\"表操作\"></a>表操作</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table table_name(</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">drop table table_name;</span><br><span class=\"line\"></span><br><span class=\"line\">rename table_name to other_table_name;</span><br><span class=\"line\"></span><br><span class=\"line\">alter table table_name add ...;</span><br><span class=\"line\">alter table table_name modify ...;</span><br><span class=\"line\">alter table table_name drop column ...;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 字符型</span><br><span class=\"line\">char 定长，后面空格补全</span><br><span class=\"line\">varchar2() 变长</span><br><span class=\"line\">clob 字符型大对象</span><br><span class=\"line\"></span><br><span class=\"line\">## 数字类型</span><br><span class=\"line\">number</span><br><span class=\"line\">number(5，2) 标识5位有效数，2位小数-999.99-999.99</span><br><span class=\"line\">number(5) 5位整数</span><br><span class=\"line\"></span><br><span class=\"line\">## 日期类型</span><br><span class=\"line\">date</span><br><span class=\"line\">timestramp</span><br><span class=\"line\">## 图片</span><br><span class=\"line\">blob 二进制4g,为了安全可以放入数据库</span><br></pre></td></tr></table></figure>\n<h1 id=\"表操作\"><a href=\"#表操作\" class=\"headerlink\" title=\"表操作\"></a>表操作</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table table_name(</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">drop table table_name;</span><br><span class=\"line\"></span><br><span class=\"line\">rename table_name to other_table_name;</span><br><span class=\"line\"></span><br><span class=\"line\">alter table table_name add ...;</span><br><span class=\"line\">alter table table_name modify ...;</span><br><span class=\"line\">alter table table_name drop column ...;</span><br></pre></td></tr></table></figure>\n"},{"title":"python-类","date":"2019-08-04T10:12:22.000Z","_content":"\n# 类中默认函数\n\n## ____new____和____init____区别\n\n__new__:创建对象时调用，会返回当前对象的一个实例\n\n__init__:创建完对象后调用，对当前对象的一些实例初始化，无返回值\n\n1、在类中，如果__new__和__init__同时存在，会优先调用__new__\n\n\n```python\nclass Data(object):\n     def __new__(self):\n             print \"new\"\n     def __init__(self):\n             print \"init\"\n \ndata = Data()\n# new\n```\n\n2、__new__方法会返回所构造的对象，__init__则不会。__init__无返回值。\n\n```python\nclass Data(object):\n     def __init__(cls):\n            cls.x = 2\n             print \"init\"\n            return cls\n\ndata = Data()\n'''\ninit\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: __init__() should return None, not 'Data'\n'''\n```\n\n```python\nclass Data(object):\n    def __new__(cls):\n        print(\"new\")\n        cls.x = 1\n        return cls\ndef __init__(self):\n    print(\"init\")\n\n\ndata = Data()\nprint(data.x)\n# new\n# 1\ndata.x =2\nprint(data.x)\n# 2\n```\n\nIf __new__() returns an instance of cls, then the new instance’s __init__() method will be invoked like __init__(self[, ...]), where self is the new instance and the remaining arguments are the same as were passed to __new__().\n\n如果__new__返回一个对象的实例，会隐式调用__init__\n\nIf __new__() does not return an instance of cls, then the new instance’s __init__() method will not be invoked.\n\n如果__new__不返回一个对象的实例，__init__不会被调用\n\n```python\nclass A(object):\n     def __new__(Class):\n             object = super(A,Class).__new__(Class)\n             print \"in New\"\n             return object\n     def __init__(self):\n             print \"in init\"\n \nA()\n# in New\n# in init\n\nclass A(object):\n     def __new__(cls):\n             print \"in New\"\n             return cls\n     def __init__(self):\n             print \"in init\"\n \na = A()      \n# in New \n```\n\nobject.__init__(self[, ...])\nCalled when the instance is created. The arguments are those passed to the class constructor expression. If a base class has an __init__() method, the derived class’s __init__() method, if any, must explicitly call it to ensure proper initialization of the base class part of the instance; for example: BaseClass.__init__(self, [args...]). As a special constraint on constructors, no value may be returned; doing so will cause a TypeError to be raised at runtime.\n\n在对象的实例创建完成后调用。参数被传给类的构造函数。如果基类有__init__方法，子类必须显示调用基类的__init__。\n\n没有返回值，否则会再引发TypeError错误。\n\n","source":"_posts/python/python-类.md","raw":"---\ntitle: python-类\ndate: 2019-08-04 18:12:22\ntags: python\n---\n\n# 类中默认函数\n\n## ____new____和____init____区别\n\n__new__:创建对象时调用，会返回当前对象的一个实例\n\n__init__:创建完对象后调用，对当前对象的一些实例初始化，无返回值\n\n1、在类中，如果__new__和__init__同时存在，会优先调用__new__\n\n\n```python\nclass Data(object):\n     def __new__(self):\n             print \"new\"\n     def __init__(self):\n             print \"init\"\n \ndata = Data()\n# new\n```\n\n2、__new__方法会返回所构造的对象，__init__则不会。__init__无返回值。\n\n```python\nclass Data(object):\n     def __init__(cls):\n            cls.x = 2\n             print \"init\"\n            return cls\n\ndata = Data()\n'''\ninit\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: __init__() should return None, not 'Data'\n'''\n```\n\n```python\nclass Data(object):\n    def __new__(cls):\n        print(\"new\")\n        cls.x = 1\n        return cls\ndef __init__(self):\n    print(\"init\")\n\n\ndata = Data()\nprint(data.x)\n# new\n# 1\ndata.x =2\nprint(data.x)\n# 2\n```\n\nIf __new__() returns an instance of cls, then the new instance’s __init__() method will be invoked like __init__(self[, ...]), where self is the new instance and the remaining arguments are the same as were passed to __new__().\n\n如果__new__返回一个对象的实例，会隐式调用__init__\n\nIf __new__() does not return an instance of cls, then the new instance’s __init__() method will not be invoked.\n\n如果__new__不返回一个对象的实例，__init__不会被调用\n\n```python\nclass A(object):\n     def __new__(Class):\n             object = super(A,Class).__new__(Class)\n             print \"in New\"\n             return object\n     def __init__(self):\n             print \"in init\"\n \nA()\n# in New\n# in init\n\nclass A(object):\n     def __new__(cls):\n             print \"in New\"\n             return cls\n     def __init__(self):\n             print \"in init\"\n \na = A()      \n# in New \n```\n\nobject.__init__(self[, ...])\nCalled when the instance is created. The arguments are those passed to the class constructor expression. If a base class has an __init__() method, the derived class’s __init__() method, if any, must explicitly call it to ensure proper initialization of the base class part of the instance; for example: BaseClass.__init__(self, [args...]). As a special constraint on constructors, no value may be returned; doing so will cause a TypeError to be raised at runtime.\n\n在对象的实例创建完成后调用。参数被传给类的构造函数。如果基类有__init__方法，子类必须显示调用基类的__init__。\n\n没有返回值，否则会再引发TypeError错误。\n\n","slug":"python/python-类","published":1,"updated":"2019-10-14T09:01:08.165Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a440003qic1y5nok7jeu","content":"<h1 id=\"类中默认函数\"><a href=\"#类中默认函数\" class=\"headerlink\" title=\"类中默认函数\"></a>类中默认函数</h1><h2 id=\"new和init区别\"><a href=\"#new和init区别\" class=\"headerlink\" title=\"new和init区别\"></a><strong><strong>new</strong></strong>和<strong><strong>init</strong></strong>区别</h2><p><strong>new</strong>:创建对象时调用，会返回当前对象的一个实例</p>\n<p><strong>init</strong>:创建完对象后调用，对当前对象的一些实例初始化，无返回值</p>\n<p>1、在类中，如果<strong>new</strong>和<strong>init</strong>同时存在，会优先调用<strong>new</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Data</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">             <span class=\"keyword\">print</span> <span class=\"string\">\"new\"</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">             <span class=\"keyword\">print</span> <span class=\"string\">\"init\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">data = Data()</span><br><span class=\"line\"><span class=\"comment\"># new</span></span><br></pre></td></tr></table></figure>\n<p>2、<strong>new</strong>方法会返回所构造的对象，<strong>init</strong>则不会。<strong>init</strong>无返回值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Data</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">            cls.x = <span class=\"number\">2</span></span><br><span class=\"line\">             <span class=\"keyword\">print</span> <span class=\"string\">\"init\"</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> cls</span><br><span class=\"line\"></span><br><span class=\"line\">data = Data()</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">init</span></span><br><span class=\"line\"><span class=\"string\">Traceback (most recent call last):</span></span><br><span class=\"line\"><span class=\"string\">  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;</span></span><br><span class=\"line\"><span class=\"string\">TypeError: __init__() should return None, not 'Data'</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Data</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"new\"</span>)</span><br><span class=\"line\">        cls.x = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"init\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">data = Data()</span><br><span class=\"line\">print(data.x)</span><br><span class=\"line\"><span class=\"comment\"># new</span></span><br><span class=\"line\"><span class=\"comment\"># 1</span></span><br><span class=\"line\">data.x =<span class=\"number\">2</span></span><br><span class=\"line\">print(data.x)</span><br><span class=\"line\"><span class=\"comment\"># 2</span></span><br></pre></td></tr></table></figure>\n<p>If <strong>new</strong>() returns an instance of cls, then the new instance’s <strong>init</strong>() method will be invoked like <strong>init</strong>(self[, …]), where self is the new instance and the remaining arguments are the same as were passed to <strong>new</strong>().</p>\n<p>如果<strong>new</strong>返回一个对象的实例，会隐式调用<strong>init</strong></p>\n<p>If <strong>new</strong>() does not return an instance of cls, then the new instance’s <strong>init</strong>() method will not be invoked.</p>\n<p>如果<strong>new</strong>不返回一个对象的实例，<strong>init</strong>不会被调用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(Class)</span>:</span></span><br><span class=\"line\">             object = super(A,Class).__new__(Class)</span><br><span class=\"line\">             <span class=\"keyword\">print</span> <span class=\"string\">\"in New\"</span></span><br><span class=\"line\">             <span class=\"keyword\">return</span> object</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">             <span class=\"keyword\">print</span> <span class=\"string\">\"in init\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">A()</span><br><span class=\"line\"><span class=\"comment\"># in New</span></span><br><span class=\"line\"><span class=\"comment\"># in init</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">             <span class=\"keyword\">print</span> <span class=\"string\">\"in New\"</span></span><br><span class=\"line\">             <span class=\"keyword\">return</span> cls</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">             <span class=\"keyword\">print</span> <span class=\"string\">\"in init\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">a = A()      </span><br><span class=\"line\"><span class=\"comment\"># in New</span></span><br></pre></td></tr></table></figure>\n<p>object.<strong>init</strong>(self[, …])<br>Called when the instance is created. The arguments are those passed to the class constructor expression. If a base class has an <strong>init</strong>() method, the derived class’s <strong>init</strong>() method, if any, must explicitly call it to ensure proper initialization of the base class part of the instance; for example: BaseClass.<strong>init</strong>(self, [args…]). As a special constraint on constructors, no value may be returned; doing so will cause a TypeError to be raised at runtime.</p>\n<p>在对象的实例创建完成后调用。参数被传给类的构造函数。如果基类有<strong>init</strong>方法，子类必须显示调用基类的<strong>init</strong>。</p>\n<p>没有返回值，否则会再引发TypeError错误。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"类中默认函数\"><a href=\"#类中默认函数\" class=\"headerlink\" title=\"类中默认函数\"></a>类中默认函数</h1><h2 id=\"new和init区别\"><a href=\"#new和init区别\" class=\"headerlink\" title=\"new和init区别\"></a><strong><strong>new</strong></strong>和<strong><strong>init</strong></strong>区别</h2><p><strong>new</strong>:创建对象时调用，会返回当前对象的一个实例</p>\n<p><strong>init</strong>:创建完对象后调用，对当前对象的一些实例初始化，无返回值</p>\n<p>1、在类中，如果<strong>new</strong>和<strong>init</strong>同时存在，会优先调用<strong>new</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Data</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">             <span class=\"keyword\">print</span> <span class=\"string\">\"new\"</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">             <span class=\"keyword\">print</span> <span class=\"string\">\"init\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">data = Data()</span><br><span class=\"line\"><span class=\"comment\"># new</span></span><br></pre></td></tr></table></figure>\n<p>2、<strong>new</strong>方法会返回所构造的对象，<strong>init</strong>则不会。<strong>init</strong>无返回值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Data</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">            cls.x = <span class=\"number\">2</span></span><br><span class=\"line\">             <span class=\"keyword\">print</span> <span class=\"string\">\"init\"</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> cls</span><br><span class=\"line\"></span><br><span class=\"line\">data = Data()</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">init</span></span><br><span class=\"line\"><span class=\"string\">Traceback (most recent call last):</span></span><br><span class=\"line\"><span class=\"string\">  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;</span></span><br><span class=\"line\"><span class=\"string\">TypeError: __init__() should return None, not 'Data'</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Data</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"new\"</span>)</span><br><span class=\"line\">        cls.x = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"init\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">data = Data()</span><br><span class=\"line\">print(data.x)</span><br><span class=\"line\"><span class=\"comment\"># new</span></span><br><span class=\"line\"><span class=\"comment\"># 1</span></span><br><span class=\"line\">data.x =<span class=\"number\">2</span></span><br><span class=\"line\">print(data.x)</span><br><span class=\"line\"><span class=\"comment\"># 2</span></span><br></pre></td></tr></table></figure>\n<p>If <strong>new</strong>() returns an instance of cls, then the new instance’s <strong>init</strong>() method will be invoked like <strong>init</strong>(self[, …]), where self is the new instance and the remaining arguments are the same as were passed to <strong>new</strong>().</p>\n<p>如果<strong>new</strong>返回一个对象的实例，会隐式调用<strong>init</strong></p>\n<p>If <strong>new</strong>() does not return an instance of cls, then the new instance’s <strong>init</strong>() method will not be invoked.</p>\n<p>如果<strong>new</strong>不返回一个对象的实例，<strong>init</strong>不会被调用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(Class)</span>:</span></span><br><span class=\"line\">             object = super(A,Class).__new__(Class)</span><br><span class=\"line\">             <span class=\"keyword\">print</span> <span class=\"string\">\"in New\"</span></span><br><span class=\"line\">             <span class=\"keyword\">return</span> object</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">             <span class=\"keyword\">print</span> <span class=\"string\">\"in init\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">A()</span><br><span class=\"line\"><span class=\"comment\"># in New</span></span><br><span class=\"line\"><span class=\"comment\"># in init</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">             <span class=\"keyword\">print</span> <span class=\"string\">\"in New\"</span></span><br><span class=\"line\">             <span class=\"keyword\">return</span> cls</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">             <span class=\"keyword\">print</span> <span class=\"string\">\"in init\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">a = A()      </span><br><span class=\"line\"><span class=\"comment\"># in New</span></span><br></pre></td></tr></table></figure>\n<p>object.<strong>init</strong>(self[, …])<br>Called when the instance is created. The arguments are those passed to the class constructor expression. If a base class has an <strong>init</strong>() method, the derived class’s <strong>init</strong>() method, if any, must explicitly call it to ensure proper initialization of the base class part of the instance; for example: BaseClass.<strong>init</strong>(self, [args…]). As a special constraint on constructors, no value may be returned; doing so will cause a TypeError to be raised at runtime.</p>\n<p>在对象的实例创建完成后调用。参数被传给类的构造函数。如果基类有<strong>init</strong>方法，子类必须显示调用基类的<strong>init</strong>。</p>\n<p>没有返回值，否则会再引发TypeError错误。</p>\n"},{"title":"python-字符串格式","date":"2019-07-31T02:59:16.000Z","_content":"\n# 格式化操作符（%）\n\n\"%\"是Python风格的字符串格式化操作符，非常类似C语言里的printf()函数的字符串格式化（C语言中也是使用%）。\n\n下面整理了一下Python中字符串格式化符合：\n\n| 格式化符号 | 说明                                                         |\n| ---------- | ------------------------------------------------------------ |\n| %c         | 转换成字符（ASCII 码值，或者长度为一的字符串）               |\n| %r         | 优先用repr()函数进行字符串转换                               |\n| %s         | 优先用str()函数进行字符串转换                                |\n| %d / %i    | 转成有符号十进制数                                           |\n| %u         | 转成无符号十进制数                                           |\n| %o         | 转成无符号八进制数                                           |\n| %x / %X    | 转成无符号十六进制数（x / X 代表转换后的十六进制字符的大小写） |\n| %e / %E    | 转成科学计数法（e / E控制输出e / E）                         |\n| %f / %F    | 转成浮点数（小数部分自然截断）                               |\n| %g / %G    | %e和%f / %E和%F 的简写                                       |\n| %%         | 输出% （格式化字符串里面包括百分号，那么必须使用%%）         |\n\n这里列出的格式化符合都比较简单，唯一想要强调一下的就是\"%s\"和\"%r\"的差别。\n\n看个简单的代码：\n\n```python\nstring = \"Hello\\tWill\\n\"\n\nprint(\"%s\" %string)\nprint(\"%r\" %string)\n'''\nHello   Will\n\n'Hello\\tWill\\n'\n'''\n```\n\n补充：\n\nPython打印值的时候会保持该值在Python代码中的状态，不是用户所希望看到的状态。而使用print打印值则不一样，print打印出来的值是用户所希望看到的状态。 str和repr的区别：\n\n1. str\n\n   把值转换为合理形式的字符串，给用户看的。str实际上类似于int，long，是一种类型。\n\n   ```python\n   print str(\"Hello,  world!\")\n   # Hello,  world!            \n   print str(1000L)\n   # 1000                         \n   str(\"Hello, world!\")\n   # 'Hello, world!'               # 字符串转换之后仍然是字符串\n   str(1000L)\n   # '1000'\n   ```\n\n2. repr()\n\n   创建一个字符串，以合法python表达式的形式来表示值。repr()是一个函数。\n\n   ```python\n   print repr(\"Hello,  world!\")\n   # 'Hello,  world!'\n   print repr(1000L)\n   # 1000L\n   repr(\"Hello,  world!\")\n   # \"'Hello,  world!'\"\n   repr(1000L)\n   # '1000L'\n   ```\n\n# 格式化操作辅助符\n\n\n\n通过\"%\"可以进行字符串格式化，但是\"%\"经常会结合下面的辅助符一起使用。\n\n| **辅助符号** | **说明**                                                     |\n| ------------ | ------------------------------------------------------------ |\n| *****        | 定义宽度或者小数点精度                                       |\n| **-**        | 用做左对齐                                                   |\n| **+**        | 在正数前面显示加号(+)                                        |\n| **#**        | 在八进制数前面显示零(0)，在十六进制前面显示\"0x\"或者\"0X\"（取决于用的是\"x\"还是\"X\"） |\n| **0**        | 显示的数字前面填充\"0\"而不是默认的空格                        |\n| **(var)**    | 映射变量（通常用来处理字段类型的参数）                       |\n| **m.n**      | m 是显示的最小总宽度，n 是小数点后的位数（如果可用的话）     |\n\n```python\nnum = 100\n\nprint(\"%d to hex is %x\" %(num, num))\nprint(\"%d to hex is %X\" %(num, num))\nprint(\"%d to hex is %#x\" %(num, num))\nprint(\"%d to hex is %#X\" %(num, num))\n\n# 浮点数\nf = 3.1415926\nprint(\"value of f is: %.4f\" %f)\n\n# 指定宽度和对齐\nstudents = [{\"name\":\"Wilber\", \"age\":27}, {\"name\":\"Will\", \"age\":28}, {\"name\":\"June\", \"age\":27}]\nprint(\"name: %10s, age: %10d\" %(students[0][\"name\"], students[0][\"age\"]))\nprint(\"name: %-10s, age: %-10d\" %(students[1][\"name\"], students[1][\"age\"]))\nprint(\"name: %*s, age: %0*d\" %(10, students[2][\"name\"], 10, students[2][\"age\"]))\n\n# dict参数\nfor student in students:\n    print(\"%(name)s is %(age)d years old\" %student)\n    \n'''\n100 to hex is 64\n100 to hex is 64\n100 to hex is 0x64\n100 to hex is 0X64\nvalue of f is: 3.1416\nname:     Wilber, age:         27\nname: Will      , age: 28        \nname:       June, age: 0000000027\nWilber is 27 years old\nWill is 28 years old\nJune is 27 years old\n'''\n```\n\n# 字符串模板\n\n其实，在Python中进行字符串的格式化，除了格式化操作符，还可以使用string模块中的字符串模板（Template）对象。下面就主要看看Template对象的substitute()方法：\n\n```python\nfrom string import Template\nsTemp = Template('Hi ,$name,$$ ')\nprint(sTemp.substitute(name='wumu'))\n'''\nHi ,wumu,$ \n'''\n```\n\n# format\n\n```python\n# 位置参数\nprint(\"{} is {} years old\".format(\"Wilber\", 28))\nprint(\"Hi, {0}! {0} is {1} years old\".format(\"Wilber\", 28))\n\n# 关键字参数\nprint(\"{name} is {age} years old\".format(name = \"Wilber\", age = 28))\n\n# 下标参数\nli = [\"Wilber\", 28]\nprint(\"{0[0]} is {0[1]} years old\".format(li))\n\n# 填充与对齐\n# ^、<、>分别是居中、左对齐、右对齐，后面带宽度\n# :号后面带填充的字符，只能是一个字符，不指定的话默认是用空格填充\nprint('{:>8}'.format('3.14'))\nprint('{:<8}'.format('3.14'))\nprint('{:^8}'.format('3.14'))\nprint('{:0>8}'.format('3.14'))\nprint('{:a>8}'.format('3.14'))\n\n# 浮点数精度\nprint('{:.4f}'.format(3.1415926))\nprint('{:0>10.4f}'.format(3.1415926))\n\n# 进制\n# b、d、o、x分别是二进制、十进制、八进制、十六进制\nprint('{:b}'.format(11))\nprint('{:d}'.format(11))\nprint('{:o}'.format(11))\nprint('{:x}'.format(11))\nprint('{:#x}'.format(11))\nprint('{:#X}'.format(11))\n\n# 千位分隔符\nprint('{:,}'.format(15700000000))\n\n'''\nWilber is 28 years old\nHi, Wilber! Wilber is 28 years old\nWilber is 28 years old\nWilber is 28 years old\n    3.14\n3.14    \n  3.14  \n00003.14\naaaa3.14\n3.1416\n00003.1416\n1011\n11\n13\nb\n0xb\n0XB\n15,700,000,000\n'''\n```\n\n\n\n# 参考\n\n> <https://www.cnblogs.com/wilber2013/p/4641616.html>","source":"_posts/python/python-字符串格式.md","raw":"---\ntitle: python-字符串格式\ndate: 2019-07-31 10:59:16\ntags: python\n---\n\n# 格式化操作符（%）\n\n\"%\"是Python风格的字符串格式化操作符，非常类似C语言里的printf()函数的字符串格式化（C语言中也是使用%）。\n\n下面整理了一下Python中字符串格式化符合：\n\n| 格式化符号 | 说明                                                         |\n| ---------- | ------------------------------------------------------------ |\n| %c         | 转换成字符（ASCII 码值，或者长度为一的字符串）               |\n| %r         | 优先用repr()函数进行字符串转换                               |\n| %s         | 优先用str()函数进行字符串转换                                |\n| %d / %i    | 转成有符号十进制数                                           |\n| %u         | 转成无符号十进制数                                           |\n| %o         | 转成无符号八进制数                                           |\n| %x / %X    | 转成无符号十六进制数（x / X 代表转换后的十六进制字符的大小写） |\n| %e / %E    | 转成科学计数法（e / E控制输出e / E）                         |\n| %f / %F    | 转成浮点数（小数部分自然截断）                               |\n| %g / %G    | %e和%f / %E和%F 的简写                                       |\n| %%         | 输出% （格式化字符串里面包括百分号，那么必须使用%%）         |\n\n这里列出的格式化符合都比较简单，唯一想要强调一下的就是\"%s\"和\"%r\"的差别。\n\n看个简单的代码：\n\n```python\nstring = \"Hello\\tWill\\n\"\n\nprint(\"%s\" %string)\nprint(\"%r\" %string)\n'''\nHello   Will\n\n'Hello\\tWill\\n'\n'''\n```\n\n补充：\n\nPython打印值的时候会保持该值在Python代码中的状态，不是用户所希望看到的状态。而使用print打印值则不一样，print打印出来的值是用户所希望看到的状态。 str和repr的区别：\n\n1. str\n\n   把值转换为合理形式的字符串，给用户看的。str实际上类似于int，long，是一种类型。\n\n   ```python\n   print str(\"Hello,  world!\")\n   # Hello,  world!            \n   print str(1000L)\n   # 1000                         \n   str(\"Hello, world!\")\n   # 'Hello, world!'               # 字符串转换之后仍然是字符串\n   str(1000L)\n   # '1000'\n   ```\n\n2. repr()\n\n   创建一个字符串，以合法python表达式的形式来表示值。repr()是一个函数。\n\n   ```python\n   print repr(\"Hello,  world!\")\n   # 'Hello,  world!'\n   print repr(1000L)\n   # 1000L\n   repr(\"Hello,  world!\")\n   # \"'Hello,  world!'\"\n   repr(1000L)\n   # '1000L'\n   ```\n\n# 格式化操作辅助符\n\n\n\n通过\"%\"可以进行字符串格式化，但是\"%\"经常会结合下面的辅助符一起使用。\n\n| **辅助符号** | **说明**                                                     |\n| ------------ | ------------------------------------------------------------ |\n| *****        | 定义宽度或者小数点精度                                       |\n| **-**        | 用做左对齐                                                   |\n| **+**        | 在正数前面显示加号(+)                                        |\n| **#**        | 在八进制数前面显示零(0)，在十六进制前面显示\"0x\"或者\"0X\"（取决于用的是\"x\"还是\"X\"） |\n| **0**        | 显示的数字前面填充\"0\"而不是默认的空格                        |\n| **(var)**    | 映射变量（通常用来处理字段类型的参数）                       |\n| **m.n**      | m 是显示的最小总宽度，n 是小数点后的位数（如果可用的话）     |\n\n```python\nnum = 100\n\nprint(\"%d to hex is %x\" %(num, num))\nprint(\"%d to hex is %X\" %(num, num))\nprint(\"%d to hex is %#x\" %(num, num))\nprint(\"%d to hex is %#X\" %(num, num))\n\n# 浮点数\nf = 3.1415926\nprint(\"value of f is: %.4f\" %f)\n\n# 指定宽度和对齐\nstudents = [{\"name\":\"Wilber\", \"age\":27}, {\"name\":\"Will\", \"age\":28}, {\"name\":\"June\", \"age\":27}]\nprint(\"name: %10s, age: %10d\" %(students[0][\"name\"], students[0][\"age\"]))\nprint(\"name: %-10s, age: %-10d\" %(students[1][\"name\"], students[1][\"age\"]))\nprint(\"name: %*s, age: %0*d\" %(10, students[2][\"name\"], 10, students[2][\"age\"]))\n\n# dict参数\nfor student in students:\n    print(\"%(name)s is %(age)d years old\" %student)\n    \n'''\n100 to hex is 64\n100 to hex is 64\n100 to hex is 0x64\n100 to hex is 0X64\nvalue of f is: 3.1416\nname:     Wilber, age:         27\nname: Will      , age: 28        \nname:       June, age: 0000000027\nWilber is 27 years old\nWill is 28 years old\nJune is 27 years old\n'''\n```\n\n# 字符串模板\n\n其实，在Python中进行字符串的格式化，除了格式化操作符，还可以使用string模块中的字符串模板（Template）对象。下面就主要看看Template对象的substitute()方法：\n\n```python\nfrom string import Template\nsTemp = Template('Hi ,$name,$$ ')\nprint(sTemp.substitute(name='wumu'))\n'''\nHi ,wumu,$ \n'''\n```\n\n# format\n\n```python\n# 位置参数\nprint(\"{} is {} years old\".format(\"Wilber\", 28))\nprint(\"Hi, {0}! {0} is {1} years old\".format(\"Wilber\", 28))\n\n# 关键字参数\nprint(\"{name} is {age} years old\".format(name = \"Wilber\", age = 28))\n\n# 下标参数\nli = [\"Wilber\", 28]\nprint(\"{0[0]} is {0[1]} years old\".format(li))\n\n# 填充与对齐\n# ^、<、>分别是居中、左对齐、右对齐，后面带宽度\n# :号后面带填充的字符，只能是一个字符，不指定的话默认是用空格填充\nprint('{:>8}'.format('3.14'))\nprint('{:<8}'.format('3.14'))\nprint('{:^8}'.format('3.14'))\nprint('{:0>8}'.format('3.14'))\nprint('{:a>8}'.format('3.14'))\n\n# 浮点数精度\nprint('{:.4f}'.format(3.1415926))\nprint('{:0>10.4f}'.format(3.1415926))\n\n# 进制\n# b、d、o、x分别是二进制、十进制、八进制、十六进制\nprint('{:b}'.format(11))\nprint('{:d}'.format(11))\nprint('{:o}'.format(11))\nprint('{:x}'.format(11))\nprint('{:#x}'.format(11))\nprint('{:#X}'.format(11))\n\n# 千位分隔符\nprint('{:,}'.format(15700000000))\n\n'''\nWilber is 28 years old\nHi, Wilber! Wilber is 28 years old\nWilber is 28 years old\nWilber is 28 years old\n    3.14\n3.14    \n  3.14  \n00003.14\naaaa3.14\n3.1416\n00003.1416\n1011\n11\n13\nb\n0xb\n0XB\n15,700,000,000\n'''\n```\n\n\n\n# 参考\n\n> <https://www.cnblogs.com/wilber2013/p/4641616.html>","slug":"python/python-字符串格式","published":1,"updated":"2019-10-14T09:01:08.165Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a440003sic1y0rg917zi","content":"<h1 id=\"格式化操作符（-）\"><a href=\"#格式化操作符（-）\" class=\"headerlink\" title=\"格式化操作符（%）\"></a>格式化操作符（%）</h1><p>“%”是Python风格的字符串格式化操作符，非常类似C语言里的printf()函数的字符串格式化（C语言中也是使用%）。</p>\n<p>下面整理了一下Python中字符串格式化符合：</p>\n<table>\n<thead>\n<tr>\n<th>格式化符号</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%c</td>\n<td>转换成字符（ASCII 码值，或者长度为一的字符串）</td>\n</tr>\n<tr>\n<td>%r</td>\n<td>优先用repr()函数进行字符串转换</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>优先用str()函数进行字符串转换</td>\n</tr>\n<tr>\n<td>%d / %i</td>\n<td>转成有符号十进制数</td>\n</tr>\n<tr>\n<td>%u</td>\n<td>转成无符号十进制数</td>\n</tr>\n<tr>\n<td>%o</td>\n<td>转成无符号八进制数</td>\n</tr>\n<tr>\n<td>%x / %X</td>\n<td>转成无符号十六进制数（x / X 代表转换后的十六进制字符的大小写）</td>\n</tr>\n<tr>\n<td>%e / %E</td>\n<td>转成科学计数法（e / E控制输出e / E）</td>\n</tr>\n<tr>\n<td>%f / %F</td>\n<td>转成浮点数（小数部分自然截断）</td>\n</tr>\n<tr>\n<td>%g / %G</td>\n<td>%e和%f / %E和%F 的简写</td>\n</tr>\n<tr>\n<td>%%</td>\n<td>输出% （格式化字符串里面包括百分号，那么必须使用%%）</td>\n</tr>\n</tbody>\n</table>\n<p>这里列出的格式化符合都比较简单，唯一想要强调一下的就是”%s”和”%r”的差别。</p>\n<p>看个简单的代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">\"Hello\\tWill\\n\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"%s\"</span> %string)</span><br><span class=\"line\">print(<span class=\"string\">\"%r\"</span> %string)</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Hello   Will</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">'Hello\\tWill\\n'</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<p>补充：</p>\n<p>Python打印值的时候会保持该值在Python代码中的状态，不是用户所希望看到的状态。而使用print打印值则不一样，print打印出来的值是用户所希望看到的状态。 str和repr的区别：</p>\n<ol>\n<li><p>str</p>\n<p>把值转换为合理形式的字符串，给用户看的。str实际上类似于int，long，是一种类型。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">print</span> str(<span class=\"string\">\"Hello,  world!\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># Hello,  world!            </span></span><br><span class=\"line\"><span class=\"keyword\">print</span> str(<span class=\"number\">1000L</span>)</span><br><span class=\"line\"><span class=\"comment\"># 1000                         </span></span><br><span class=\"line\">str(<span class=\"string\">\"Hello, world!\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 'Hello, world!'               # 字符串转换之后仍然是字符串</span></span><br><span class=\"line\">str(<span class=\"number\">1000L</span>)</span><br><span class=\"line\"><span class=\"comment\"># '1000'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>repr()</p>\n<p>创建一个字符串，以合法python表达式的形式来表示值。repr()是一个函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">print</span> repr(<span class=\"string\">\"Hello,  world!\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 'Hello,  world!'</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> repr(<span class=\"number\">1000L</span>)</span><br><span class=\"line\"><span class=\"comment\"># 1000L</span></span><br><span class=\"line\">repr(<span class=\"string\">\"Hello,  world!\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># \"'Hello,  world!'\"</span></span><br><span class=\"line\">repr(<span class=\"number\">1000L</span>)</span><br><span class=\"line\"><span class=\"comment\"># '1000L'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"格式化操作辅助符\"><a href=\"#格式化操作辅助符\" class=\"headerlink\" title=\"格式化操作辅助符\"></a>格式化操作辅助符</h1><p>通过”%”可以进行字符串格式化，但是”%”经常会结合下面的辅助符一起使用。</p>\n<table>\n<thead>\n<tr>\n<th><strong>辅助符号</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>*</strong></td>\n<td>定义宽度或者小数点精度</td>\n</tr>\n<tr>\n<td><strong>-</strong></td>\n<td>用做左对齐</td>\n</tr>\n<tr>\n<td><strong>+</strong></td>\n<td>在正数前面显示加号(+)</td>\n</tr>\n<tr>\n<td><strong>#</strong></td>\n<td>在八进制数前面显示零(0)，在十六进制前面显示”0x”或者”0X”（取决于用的是”x”还是”X”）</td>\n</tr>\n<tr>\n<td><strong>0</strong></td>\n<td>显示的数字前面填充”0”而不是默认的空格</td>\n</tr>\n<tr>\n<td><strong>(var)</strong></td>\n<td>映射变量（通常用来处理字段类型的参数）</td>\n</tr>\n<tr>\n<td><strong>m.n</strong></td>\n<td>m 是显示的最小总宽度，n 是小数点后的位数（如果可用的话）</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"%d to hex is %x\"</span> %(num, num))</span><br><span class=\"line\">print(<span class=\"string\">\"%d to hex is %X\"</span> %(num, num))</span><br><span class=\"line\">print(<span class=\"string\">\"%d to hex is %#x\"</span> %(num, num))</span><br><span class=\"line\">print(<span class=\"string\">\"%d to hex is %#X\"</span> %(num, num))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 浮点数</span></span><br><span class=\"line\">f = <span class=\"number\">3.1415926</span></span><br><span class=\"line\">print(<span class=\"string\">\"value of f is: %.4f\"</span> %f)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定宽度和对齐</span></span><br><span class=\"line\">students = [&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"Wilber\"</span>, <span class=\"string\">\"age\"</span>:<span class=\"number\">27</span>&#125;, &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"Will\"</span>, <span class=\"string\">\"age\"</span>:<span class=\"number\">28</span>&#125;, &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"June\"</span>, <span class=\"string\">\"age\"</span>:<span class=\"number\">27</span>&#125;]</span><br><span class=\"line\">print(<span class=\"string\">\"name: %10s, age: %10d\"</span> %(students[<span class=\"number\">0</span>][<span class=\"string\">\"name\"</span>], students[<span class=\"number\">0</span>][<span class=\"string\">\"age\"</span>]))</span><br><span class=\"line\">print(<span class=\"string\">\"name: %-10s, age: %-10d\"</span> %(students[<span class=\"number\">1</span>][<span class=\"string\">\"name\"</span>], students[<span class=\"number\">1</span>][<span class=\"string\">\"age\"</span>]))</span><br><span class=\"line\">print(<span class=\"string\">\"name: %*s, age: %0*d\"</span> %(<span class=\"number\">10</span>, students[<span class=\"number\">2</span>][<span class=\"string\">\"name\"</span>], <span class=\"number\">10</span>, students[<span class=\"number\">2</span>][<span class=\"string\">\"age\"</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># dict参数</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> student <span class=\"keyword\">in</span> students:</span><br><span class=\"line\">    print(<span class=\"string\">\"%(name)s is %(age)d years old\"</span> %student)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">100 to hex is 64</span></span><br><span class=\"line\"><span class=\"string\">100 to hex is 64</span></span><br><span class=\"line\"><span class=\"string\">100 to hex is 0x64</span></span><br><span class=\"line\"><span class=\"string\">100 to hex is 0X64</span></span><br><span class=\"line\"><span class=\"string\">value of f is: 3.1416</span></span><br><span class=\"line\"><span class=\"string\">name:     Wilber, age:         27</span></span><br><span class=\"line\"><span class=\"string\">name: Will      , age: 28        </span></span><br><span class=\"line\"><span class=\"string\">name:       June, age: 0000000027</span></span><br><span class=\"line\"><span class=\"string\">Wilber is 27 years old</span></span><br><span class=\"line\"><span class=\"string\">Will is 28 years old</span></span><br><span class=\"line\"><span class=\"string\">June is 27 years old</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"字符串模板\"><a href=\"#字符串模板\" class=\"headerlink\" title=\"字符串模板\"></a>字符串模板</h1><p>其实，在Python中进行字符串的格式化，除了格式化操作符，还可以使用string模块中的字符串模板（Template）对象。下面就主要看看Template对象的substitute()方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> string <span class=\"keyword\">import</span> Template</span><br><span class=\"line\">sTemp = Template(<span class=\"string\">'Hi ,$name,$$ '</span>)</span><br><span class=\"line\">print(sTemp.substitute(name=<span class=\"string\">'wumu'</span>))</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Hi ,wumu,$ </span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"format\"><a href=\"#format\" class=\"headerlink\" title=\"format\"></a>format</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 位置参数</span></span><br><span class=\"line\">print(<span class=\"string\">\"&#123;&#125; is &#123;&#125; years old\"</span>.format(<span class=\"string\">\"Wilber\"</span>, <span class=\"number\">28</span>))</span><br><span class=\"line\">print(<span class=\"string\">\"Hi, &#123;0&#125;! &#123;0&#125; is &#123;1&#125; years old\"</span>.format(<span class=\"string\">\"Wilber\"</span>, <span class=\"number\">28</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关键字参数</span></span><br><span class=\"line\">print(<span class=\"string\">\"&#123;name&#125; is &#123;age&#125; years old\"</span>.format(name = <span class=\"string\">\"Wilber\"</span>, age = <span class=\"number\">28</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下标参数</span></span><br><span class=\"line\">li = [<span class=\"string\">\"Wilber\"</span>, <span class=\"number\">28</span>]</span><br><span class=\"line\">print(<span class=\"string\">\"&#123;0[0]&#125; is &#123;0[1]&#125; years old\"</span>.format(li))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 填充与对齐</span></span><br><span class=\"line\"><span class=\"comment\"># ^、&lt;、&gt;分别是居中、左对齐、右对齐，后面带宽度</span></span><br><span class=\"line\"><span class=\"comment\"># :号后面带填充的字符，只能是一个字符，不指定的话默认是用空格填充</span></span><br><span class=\"line\">print(<span class=\"string\">'&#123;:&gt;8&#125;'</span>.format(<span class=\"string\">'3.14'</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:&lt;8&#125;'</span>.format(<span class=\"string\">'3.14'</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:^8&#125;'</span>.format(<span class=\"string\">'3.14'</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:0&gt;8&#125;'</span>.format(<span class=\"string\">'3.14'</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:a&gt;8&#125;'</span>.format(<span class=\"string\">'3.14'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 浮点数精度</span></span><br><span class=\"line\">print(<span class=\"string\">'&#123;:.4f&#125;'</span>.format(<span class=\"number\">3.1415926</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:0&gt;10.4f&#125;'</span>.format(<span class=\"number\">3.1415926</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进制</span></span><br><span class=\"line\"><span class=\"comment\"># b、d、o、x分别是二进制、十进制、八进制、十六进制</span></span><br><span class=\"line\">print(<span class=\"string\">'&#123;:b&#125;'</span>.format(<span class=\"number\">11</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:d&#125;'</span>.format(<span class=\"number\">11</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:o&#125;'</span>.format(<span class=\"number\">11</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:x&#125;'</span>.format(<span class=\"number\">11</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:#x&#125;'</span>.format(<span class=\"number\">11</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:#X&#125;'</span>.format(<span class=\"number\">11</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 千位分隔符</span></span><br><span class=\"line\">print(<span class=\"string\">'&#123;:,&#125;'</span>.format(<span class=\"number\">15700000000</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Wilber is 28 years old</span></span><br><span class=\"line\"><span class=\"string\">Hi, Wilber! Wilber is 28 years old</span></span><br><span class=\"line\"><span class=\"string\">Wilber is 28 years old</span></span><br><span class=\"line\"><span class=\"string\">Wilber is 28 years old</span></span><br><span class=\"line\"><span class=\"string\">    3.14</span></span><br><span class=\"line\"><span class=\"string\">3.14    </span></span><br><span class=\"line\"><span class=\"string\">  3.14  </span></span><br><span class=\"line\"><span class=\"string\">00003.14</span></span><br><span class=\"line\"><span class=\"string\">aaaa3.14</span></span><br><span class=\"line\"><span class=\"string\">3.1416</span></span><br><span class=\"line\"><span class=\"string\">00003.1416</span></span><br><span class=\"line\"><span class=\"string\">1011</span></span><br><span class=\"line\"><span class=\"string\">11</span></span><br><span class=\"line\"><span class=\"string\">13</span></span><br><span class=\"line\"><span class=\"string\">b</span></span><br><span class=\"line\"><span class=\"string\">0xb</span></span><br><span class=\"line\"><span class=\"string\">0XB</span></span><br><span class=\"line\"><span class=\"string\">15,700,000,000</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://www.cnblogs.com/wilber2013/p/4641616.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/wilber2013/p/4641616.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"格式化操作符（-）\"><a href=\"#格式化操作符（-）\" class=\"headerlink\" title=\"格式化操作符（%）\"></a>格式化操作符（%）</h1><p>“%”是Python风格的字符串格式化操作符，非常类似C语言里的printf()函数的字符串格式化（C语言中也是使用%）。</p>\n<p>下面整理了一下Python中字符串格式化符合：</p>\n<table>\n<thead>\n<tr>\n<th>格式化符号</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%c</td>\n<td>转换成字符（ASCII 码值，或者长度为一的字符串）</td>\n</tr>\n<tr>\n<td>%r</td>\n<td>优先用repr()函数进行字符串转换</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>优先用str()函数进行字符串转换</td>\n</tr>\n<tr>\n<td>%d / %i</td>\n<td>转成有符号十进制数</td>\n</tr>\n<tr>\n<td>%u</td>\n<td>转成无符号十进制数</td>\n</tr>\n<tr>\n<td>%o</td>\n<td>转成无符号八进制数</td>\n</tr>\n<tr>\n<td>%x / %X</td>\n<td>转成无符号十六进制数（x / X 代表转换后的十六进制字符的大小写）</td>\n</tr>\n<tr>\n<td>%e / %E</td>\n<td>转成科学计数法（e / E控制输出e / E）</td>\n</tr>\n<tr>\n<td>%f / %F</td>\n<td>转成浮点数（小数部分自然截断）</td>\n</tr>\n<tr>\n<td>%g / %G</td>\n<td>%e和%f / %E和%F 的简写</td>\n</tr>\n<tr>\n<td>%%</td>\n<td>输出% （格式化字符串里面包括百分号，那么必须使用%%）</td>\n</tr>\n</tbody>\n</table>\n<p>这里列出的格式化符合都比较简单，唯一想要强调一下的就是”%s”和”%r”的差别。</p>\n<p>看个简单的代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">\"Hello\\tWill\\n\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"%s\"</span> %string)</span><br><span class=\"line\">print(<span class=\"string\">\"%r\"</span> %string)</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Hello   Will</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">'Hello\\tWill\\n'</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<p>补充：</p>\n<p>Python打印值的时候会保持该值在Python代码中的状态，不是用户所希望看到的状态。而使用print打印值则不一样，print打印出来的值是用户所希望看到的状态。 str和repr的区别：</p>\n<ol>\n<li><p>str</p>\n<p>把值转换为合理形式的字符串，给用户看的。str实际上类似于int，long，是一种类型。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">print</span> str(<span class=\"string\">\"Hello,  world!\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># Hello,  world!            </span></span><br><span class=\"line\"><span class=\"keyword\">print</span> str(<span class=\"number\">1000L</span>)</span><br><span class=\"line\"><span class=\"comment\"># 1000                         </span></span><br><span class=\"line\">str(<span class=\"string\">\"Hello, world!\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 'Hello, world!'               # 字符串转换之后仍然是字符串</span></span><br><span class=\"line\">str(<span class=\"number\">1000L</span>)</span><br><span class=\"line\"><span class=\"comment\"># '1000'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>repr()</p>\n<p>创建一个字符串，以合法python表达式的形式来表示值。repr()是一个函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">print</span> repr(<span class=\"string\">\"Hello,  world!\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 'Hello,  world!'</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> repr(<span class=\"number\">1000L</span>)</span><br><span class=\"line\"><span class=\"comment\"># 1000L</span></span><br><span class=\"line\">repr(<span class=\"string\">\"Hello,  world!\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># \"'Hello,  world!'\"</span></span><br><span class=\"line\">repr(<span class=\"number\">1000L</span>)</span><br><span class=\"line\"><span class=\"comment\"># '1000L'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"格式化操作辅助符\"><a href=\"#格式化操作辅助符\" class=\"headerlink\" title=\"格式化操作辅助符\"></a>格式化操作辅助符</h1><p>通过”%”可以进行字符串格式化，但是”%”经常会结合下面的辅助符一起使用。</p>\n<table>\n<thead>\n<tr>\n<th><strong>辅助符号</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>*</strong></td>\n<td>定义宽度或者小数点精度</td>\n</tr>\n<tr>\n<td><strong>-</strong></td>\n<td>用做左对齐</td>\n</tr>\n<tr>\n<td><strong>+</strong></td>\n<td>在正数前面显示加号(+)</td>\n</tr>\n<tr>\n<td><strong>#</strong></td>\n<td>在八进制数前面显示零(0)，在十六进制前面显示”0x”或者”0X”（取决于用的是”x”还是”X”）</td>\n</tr>\n<tr>\n<td><strong>0</strong></td>\n<td>显示的数字前面填充”0”而不是默认的空格</td>\n</tr>\n<tr>\n<td><strong>(var)</strong></td>\n<td>映射变量（通常用来处理字段类型的参数）</td>\n</tr>\n<tr>\n<td><strong>m.n</strong></td>\n<td>m 是显示的最小总宽度，n 是小数点后的位数（如果可用的话）</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"%d to hex is %x\"</span> %(num, num))</span><br><span class=\"line\">print(<span class=\"string\">\"%d to hex is %X\"</span> %(num, num))</span><br><span class=\"line\">print(<span class=\"string\">\"%d to hex is %#x\"</span> %(num, num))</span><br><span class=\"line\">print(<span class=\"string\">\"%d to hex is %#X\"</span> %(num, num))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 浮点数</span></span><br><span class=\"line\">f = <span class=\"number\">3.1415926</span></span><br><span class=\"line\">print(<span class=\"string\">\"value of f is: %.4f\"</span> %f)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定宽度和对齐</span></span><br><span class=\"line\">students = [&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"Wilber\"</span>, <span class=\"string\">\"age\"</span>:<span class=\"number\">27</span>&#125;, &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"Will\"</span>, <span class=\"string\">\"age\"</span>:<span class=\"number\">28</span>&#125;, &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"June\"</span>, <span class=\"string\">\"age\"</span>:<span class=\"number\">27</span>&#125;]</span><br><span class=\"line\">print(<span class=\"string\">\"name: %10s, age: %10d\"</span> %(students[<span class=\"number\">0</span>][<span class=\"string\">\"name\"</span>], students[<span class=\"number\">0</span>][<span class=\"string\">\"age\"</span>]))</span><br><span class=\"line\">print(<span class=\"string\">\"name: %-10s, age: %-10d\"</span> %(students[<span class=\"number\">1</span>][<span class=\"string\">\"name\"</span>], students[<span class=\"number\">1</span>][<span class=\"string\">\"age\"</span>]))</span><br><span class=\"line\">print(<span class=\"string\">\"name: %*s, age: %0*d\"</span> %(<span class=\"number\">10</span>, students[<span class=\"number\">2</span>][<span class=\"string\">\"name\"</span>], <span class=\"number\">10</span>, students[<span class=\"number\">2</span>][<span class=\"string\">\"age\"</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># dict参数</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> student <span class=\"keyword\">in</span> students:</span><br><span class=\"line\">    print(<span class=\"string\">\"%(name)s is %(age)d years old\"</span> %student)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">100 to hex is 64</span></span><br><span class=\"line\"><span class=\"string\">100 to hex is 64</span></span><br><span class=\"line\"><span class=\"string\">100 to hex is 0x64</span></span><br><span class=\"line\"><span class=\"string\">100 to hex is 0X64</span></span><br><span class=\"line\"><span class=\"string\">value of f is: 3.1416</span></span><br><span class=\"line\"><span class=\"string\">name:     Wilber, age:         27</span></span><br><span class=\"line\"><span class=\"string\">name: Will      , age: 28        </span></span><br><span class=\"line\"><span class=\"string\">name:       June, age: 0000000027</span></span><br><span class=\"line\"><span class=\"string\">Wilber is 27 years old</span></span><br><span class=\"line\"><span class=\"string\">Will is 28 years old</span></span><br><span class=\"line\"><span class=\"string\">June is 27 years old</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"字符串模板\"><a href=\"#字符串模板\" class=\"headerlink\" title=\"字符串模板\"></a>字符串模板</h1><p>其实，在Python中进行字符串的格式化，除了格式化操作符，还可以使用string模块中的字符串模板（Template）对象。下面就主要看看Template对象的substitute()方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> string <span class=\"keyword\">import</span> Template</span><br><span class=\"line\">sTemp = Template(<span class=\"string\">'Hi ,$name,$$ '</span>)</span><br><span class=\"line\">print(sTemp.substitute(name=<span class=\"string\">'wumu'</span>))</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Hi ,wumu,$ </span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"format\"><a href=\"#format\" class=\"headerlink\" title=\"format\"></a>format</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 位置参数</span></span><br><span class=\"line\">print(<span class=\"string\">\"&#123;&#125; is &#123;&#125; years old\"</span>.format(<span class=\"string\">\"Wilber\"</span>, <span class=\"number\">28</span>))</span><br><span class=\"line\">print(<span class=\"string\">\"Hi, &#123;0&#125;! &#123;0&#125; is &#123;1&#125; years old\"</span>.format(<span class=\"string\">\"Wilber\"</span>, <span class=\"number\">28</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关键字参数</span></span><br><span class=\"line\">print(<span class=\"string\">\"&#123;name&#125; is &#123;age&#125; years old\"</span>.format(name = <span class=\"string\">\"Wilber\"</span>, age = <span class=\"number\">28</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下标参数</span></span><br><span class=\"line\">li = [<span class=\"string\">\"Wilber\"</span>, <span class=\"number\">28</span>]</span><br><span class=\"line\">print(<span class=\"string\">\"&#123;0[0]&#125; is &#123;0[1]&#125; years old\"</span>.format(li))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 填充与对齐</span></span><br><span class=\"line\"><span class=\"comment\"># ^、&lt;、&gt;分别是居中、左对齐、右对齐，后面带宽度</span></span><br><span class=\"line\"><span class=\"comment\"># :号后面带填充的字符，只能是一个字符，不指定的话默认是用空格填充</span></span><br><span class=\"line\">print(<span class=\"string\">'&#123;:&gt;8&#125;'</span>.format(<span class=\"string\">'3.14'</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:&lt;8&#125;'</span>.format(<span class=\"string\">'3.14'</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:^8&#125;'</span>.format(<span class=\"string\">'3.14'</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:0&gt;8&#125;'</span>.format(<span class=\"string\">'3.14'</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:a&gt;8&#125;'</span>.format(<span class=\"string\">'3.14'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 浮点数精度</span></span><br><span class=\"line\">print(<span class=\"string\">'&#123;:.4f&#125;'</span>.format(<span class=\"number\">3.1415926</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:0&gt;10.4f&#125;'</span>.format(<span class=\"number\">3.1415926</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进制</span></span><br><span class=\"line\"><span class=\"comment\"># b、d、o、x分别是二进制、十进制、八进制、十六进制</span></span><br><span class=\"line\">print(<span class=\"string\">'&#123;:b&#125;'</span>.format(<span class=\"number\">11</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:d&#125;'</span>.format(<span class=\"number\">11</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:o&#125;'</span>.format(<span class=\"number\">11</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:x&#125;'</span>.format(<span class=\"number\">11</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:#x&#125;'</span>.format(<span class=\"number\">11</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:#X&#125;'</span>.format(<span class=\"number\">11</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 千位分隔符</span></span><br><span class=\"line\">print(<span class=\"string\">'&#123;:,&#125;'</span>.format(<span class=\"number\">15700000000</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Wilber is 28 years old</span></span><br><span class=\"line\"><span class=\"string\">Hi, Wilber! Wilber is 28 years old</span></span><br><span class=\"line\"><span class=\"string\">Wilber is 28 years old</span></span><br><span class=\"line\"><span class=\"string\">Wilber is 28 years old</span></span><br><span class=\"line\"><span class=\"string\">    3.14</span></span><br><span class=\"line\"><span class=\"string\">3.14    </span></span><br><span class=\"line\"><span class=\"string\">  3.14  </span></span><br><span class=\"line\"><span class=\"string\">00003.14</span></span><br><span class=\"line\"><span class=\"string\">aaaa3.14</span></span><br><span class=\"line\"><span class=\"string\">3.1416</span></span><br><span class=\"line\"><span class=\"string\">00003.1416</span></span><br><span class=\"line\"><span class=\"string\">1011</span></span><br><span class=\"line\"><span class=\"string\">11</span></span><br><span class=\"line\"><span class=\"string\">13</span></span><br><span class=\"line\"><span class=\"string\">b</span></span><br><span class=\"line\"><span class=\"string\">0xb</span></span><br><span class=\"line\"><span class=\"string\">0XB</span></span><br><span class=\"line\"><span class=\"string\">15,700,000,000</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://www.cnblogs.com/wilber2013/p/4641616.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/wilber2013/p/4641616.html</a></p>\n</blockquote>\n"},{"title":"python-装饰器","date":"2019-07-31T11:44:57.000Z","_content":"\n# 简单的装饰器\n\n```python\nimport logging\n\n\ndef use_logging(func):\n\n    def wrapper():\n        logging.warning(\"%s is running\" % func.__name__)\n        return func()   # 把 foo 当做参数传递进来时，执行func()就相当于执行foo()\n    return wrapper\n\ndef foo():\n    print('i am foo')\n\nfoo = use_logging(foo)  # 因为装饰器 use_logging(foo) 返回的时函数对象 wrapper，这条语句相当于  foo = wrapper\nfoo()                   # 执行foo()就相当于执行 wrapper()\n'''\nWARNING:root:foo is running\ni am foo\n'''\n```\n\n# @ 语法糖\n\n```python\ndef use_logging(func):\n\n    def wrapper():\n        logging.warn(\"%s is running\" % func.__name__)\n        return func()\n    return wrapper\n\n@use_logging\ndef foo():\n    print(\"i am foo\")\n\nfoo()\n```\n\n# *args、**kwargs\n\n可能有人问，如果我的业务逻辑函数 foo 需要参数怎么办？比如：\n\n```\ndef foo(name):\n    print(\"i am %s\" % name)\n```\n\n我们可以在定义 wrapper 函数的时候指定参数：\n\n```python\ndef wrapper(name):\n        logging.warn(\"%s is running\" % func.__name__)\n        return func(name)\n    return wrapper\n```\n\n这样 foo 函数定义的参数就可以定义在 wrapper 函数中。这时，又有人要问了，如果 foo 函数接收两个参数呢？三个参数呢？更有甚者，我可能传很多个。当装饰器不知道 foo 到底有多少个参数时，我们可以用 *args 来代替：\n\n```python\ndef wrapper(*args):\n        logging.warn(\"%s is running\" % func.__name__)\n        return func(*args)\n    return wrapper\n```\n\n如此一来，甭管 foo 定义了多少个参数，我都可以完整地传递到 func 中去。这样就不影响 foo 的业务逻辑了。这时还有读者会问，如果 foo 函数还定义了一些关键字参数呢？比如：\n\n```python\ndef foo(name, age=None, height=None):\n    print(\"I am %s, age %s, height %s\" % (name, age, height))\n```\n\n这时，你就可以把 wrapper 函数指定关键字函数：\n\n```python\ndef wrapper(*args, **kwargs):\n        # args是一个数组，kwargs一个字典\n        logging.warn(\"%s is running\" % func.__name__)\n        return func(*args, **kwargs)\n    return wrapper\n```\n\n# 带参数的装饰器\n\n装饰器还有更大的灵活性，例如带参数的装饰器，在上面的装饰器调用中，该装饰器接收唯一的参数就是执行业务的函数 foo 。装饰器的语法允许我们在调用时，提供其它参数，比如`@decorator(a)`。这样，就为装饰器的编写和使用提供了更大的灵活性。比如，我们可以在装饰器中指定日志的等级，因为不同业务函数可能需要的日志级别是不一样的。\n\n```python\ndef use_logging(level):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            if level == \"warn\":\n                logging.warn(\"%s is running\" % func.__name__)\n            elif level == \"info\":\n                logging.info(\"%s is running\" % func.__name__)\n            return func(*args)\n        return wrapper\n\n    return decorator\n\n@use_logging(level=\"warn\")\ndef foo(name='foo'):\n    print(\"i am %s\" % name)\n\nfoo()\n```\n\n上面的 use_logging 是允许带参数的装饰器。它实际上是对原有装饰器的一个函数封装，并返回一个装饰器。我们可以将它理解为一个含有参数的闭包。当我 们使用`@use_logging(level=\"warn\")`调用的时候，Python 能够发现这一层的封装，并把参数传递到装饰器的环境中。\n\n```python\n@use_logging(level=\"warn\")`等价于`@decorator\n```\n\n# 类装饰器\n\n没错，装饰器不仅可以是函数，还可以是类，相比函数装饰器，类装饰器具有灵活度大、高内聚、封装性等优点。使用类装饰器主要依靠类的`__call__`方法，当使用 @ 形式将装饰器附加到函数上时，就会调用此方法。\n\n```python\nclass Foo(object):\n    def __init__(self, func):\n        self._func = func\n\n    def __call__(self):\n        print ('class decorator runing')\n        self._func()\n        print ('class decorator ending')\n\n@Foo\ndef bar():\n    print ('bar')\n\nbar()\n```\n\n### functools.wraps\n\n使用装饰器极大地复用了代码，但是他有一个缺点就是原函数的元信息不见了，比如函数的`docstring`、`__name__`、参数列表，先看例子：\n\n```python\n# 装饰器\ndef logged(func):\n    def with_logging(*args, **kwargs):\n        print func.__name__      # 输出 'with_logging'\n        print func.__doc__       # 输出 None\n        return func(*args, **kwargs)\n    return with_logging\n\n# 函数\n@logged\ndef f(x):\n   \"\"\"does some math\"\"\"\n   return x + x * x\n\nlogged(f)\n```\n\n不难发现，函数 f 被`with_logging`取代了，当然它的`docstring`，`__name__`就是变成了`with_logging`函数的信息了。好在我们有`functools.wraps`，`wraps`本身也是一个装饰器，它能把原函数的元信息拷贝到装饰器里面的 func 函数中，这使得装饰器里面的 func 函数也有和原函数 foo 一样的元信息了。\n\n```python\nfrom functools import wraps\ndef logged(func):\n    @wraps(func)\n    def with_logging(*args, **kwargs):\n        print func.__name__      # 输出 'f'\n        print func.__doc__       # 输出 'does some math'\n        return func(*args, **kwargs)\n    return with_logging\n\n@logged\ndef f(x):\n   \"\"\"does some math\"\"\"\n   return x + x * x\n```\n\n# 装饰器顺序\n\n一个函数还可以同时定义多个装饰器，比如：\n\n```python\n@a\n@b\n@c\ndef f ():\n    pass\n```\n\n它的执行顺序是从里到外，最先调用最里层的装饰器，最后调用最外层的装饰器，它等效于\n\n```python\nf = a(b(c(f)))\n```\n\n# 补充\n\n## *与**区别\n\n在Python的函数定义中使用*args和**kwargs可传递可变参数。*args用作传递非命名键值可变长参数列表（位置参数），**kwargs用作传递键值可变长参数列表。在函数调用的时候也有解构的使用\n\n```python\ndef test_var_args(farg, *args):\n    print \"formal arg:\", farg\n    for arg in args:\n        print \"another arg:\", arg\n \ntest_var_args(1, \"two\", 3)\n'''\nformal arg: 1\nanother arg: two\nanother arg: 3\n'''\n```\n\n```python\ndef test_var_kwargs(farg, **kwargs):\n    print \"formal arg:\", farg\n    for key in kwargs:\n        print \"another keyword arg: %s: %s\" % (key, kwargs[key])\n \ntest_var_kwargs(farg=1, myarg2=\"two\", myarg3=3)\n'''\nRequired argument:  1\nOptional argument (*args):  2\nOptional argument (*args):  3\nOptional argument (*args):  4\nOptional argument k2 (*kwargs): 6\nOptional argument k1 (*kwargs): 5\n'''\n```\n\n```python\ndef test_var_args_call(arg1, arg2, arg3):\n    print \"arg1:\", arg1\n    print \"arg2:\", arg2\n    print \"arg3:\", arg3\n \nargs = (\"two\", 3)\ntest_var_args_call(1, *args)\n```\n\n```python\ndef test_var_args_call(arg1, arg2, arg3):\n    print \"arg1:\", arg1\n    print \"arg2:\", arg2\n    print \"arg3:\", arg3\n \nkwargs = {\"arg3\": 3, \"arg2\": \"two\"}\ntest_var_args_call(1, **kwargs)\n```\n\n\n\n# 参考\n\n> <https://foofish.net/python-decorator.html>\n>\n> <https://www.biaodianfu.com/python-args-kwargs.html>\n>\n> <https://my.oschina.net/leejun2005/blog/477614> 例子介绍的很详细","source":"_posts/python/python-装饰器.md","raw":"---\ntitle: python-装饰器\ndate: 2019-07-31 19:44:57\ntags: python\n---\n\n# 简单的装饰器\n\n```python\nimport logging\n\n\ndef use_logging(func):\n\n    def wrapper():\n        logging.warning(\"%s is running\" % func.__name__)\n        return func()   # 把 foo 当做参数传递进来时，执行func()就相当于执行foo()\n    return wrapper\n\ndef foo():\n    print('i am foo')\n\nfoo = use_logging(foo)  # 因为装饰器 use_logging(foo) 返回的时函数对象 wrapper，这条语句相当于  foo = wrapper\nfoo()                   # 执行foo()就相当于执行 wrapper()\n'''\nWARNING:root:foo is running\ni am foo\n'''\n```\n\n# @ 语法糖\n\n```python\ndef use_logging(func):\n\n    def wrapper():\n        logging.warn(\"%s is running\" % func.__name__)\n        return func()\n    return wrapper\n\n@use_logging\ndef foo():\n    print(\"i am foo\")\n\nfoo()\n```\n\n# *args、**kwargs\n\n可能有人问，如果我的业务逻辑函数 foo 需要参数怎么办？比如：\n\n```\ndef foo(name):\n    print(\"i am %s\" % name)\n```\n\n我们可以在定义 wrapper 函数的时候指定参数：\n\n```python\ndef wrapper(name):\n        logging.warn(\"%s is running\" % func.__name__)\n        return func(name)\n    return wrapper\n```\n\n这样 foo 函数定义的参数就可以定义在 wrapper 函数中。这时，又有人要问了，如果 foo 函数接收两个参数呢？三个参数呢？更有甚者，我可能传很多个。当装饰器不知道 foo 到底有多少个参数时，我们可以用 *args 来代替：\n\n```python\ndef wrapper(*args):\n        logging.warn(\"%s is running\" % func.__name__)\n        return func(*args)\n    return wrapper\n```\n\n如此一来，甭管 foo 定义了多少个参数，我都可以完整地传递到 func 中去。这样就不影响 foo 的业务逻辑了。这时还有读者会问，如果 foo 函数还定义了一些关键字参数呢？比如：\n\n```python\ndef foo(name, age=None, height=None):\n    print(\"I am %s, age %s, height %s\" % (name, age, height))\n```\n\n这时，你就可以把 wrapper 函数指定关键字函数：\n\n```python\ndef wrapper(*args, **kwargs):\n        # args是一个数组，kwargs一个字典\n        logging.warn(\"%s is running\" % func.__name__)\n        return func(*args, **kwargs)\n    return wrapper\n```\n\n# 带参数的装饰器\n\n装饰器还有更大的灵活性，例如带参数的装饰器，在上面的装饰器调用中，该装饰器接收唯一的参数就是执行业务的函数 foo 。装饰器的语法允许我们在调用时，提供其它参数，比如`@decorator(a)`。这样，就为装饰器的编写和使用提供了更大的灵活性。比如，我们可以在装饰器中指定日志的等级，因为不同业务函数可能需要的日志级别是不一样的。\n\n```python\ndef use_logging(level):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            if level == \"warn\":\n                logging.warn(\"%s is running\" % func.__name__)\n            elif level == \"info\":\n                logging.info(\"%s is running\" % func.__name__)\n            return func(*args)\n        return wrapper\n\n    return decorator\n\n@use_logging(level=\"warn\")\ndef foo(name='foo'):\n    print(\"i am %s\" % name)\n\nfoo()\n```\n\n上面的 use_logging 是允许带参数的装饰器。它实际上是对原有装饰器的一个函数封装，并返回一个装饰器。我们可以将它理解为一个含有参数的闭包。当我 们使用`@use_logging(level=\"warn\")`调用的时候，Python 能够发现这一层的封装，并把参数传递到装饰器的环境中。\n\n```python\n@use_logging(level=\"warn\")`等价于`@decorator\n```\n\n# 类装饰器\n\n没错，装饰器不仅可以是函数，还可以是类，相比函数装饰器，类装饰器具有灵活度大、高内聚、封装性等优点。使用类装饰器主要依靠类的`__call__`方法，当使用 @ 形式将装饰器附加到函数上时，就会调用此方法。\n\n```python\nclass Foo(object):\n    def __init__(self, func):\n        self._func = func\n\n    def __call__(self):\n        print ('class decorator runing')\n        self._func()\n        print ('class decorator ending')\n\n@Foo\ndef bar():\n    print ('bar')\n\nbar()\n```\n\n### functools.wraps\n\n使用装饰器极大地复用了代码，但是他有一个缺点就是原函数的元信息不见了，比如函数的`docstring`、`__name__`、参数列表，先看例子：\n\n```python\n# 装饰器\ndef logged(func):\n    def with_logging(*args, **kwargs):\n        print func.__name__      # 输出 'with_logging'\n        print func.__doc__       # 输出 None\n        return func(*args, **kwargs)\n    return with_logging\n\n# 函数\n@logged\ndef f(x):\n   \"\"\"does some math\"\"\"\n   return x + x * x\n\nlogged(f)\n```\n\n不难发现，函数 f 被`with_logging`取代了，当然它的`docstring`，`__name__`就是变成了`with_logging`函数的信息了。好在我们有`functools.wraps`，`wraps`本身也是一个装饰器，它能把原函数的元信息拷贝到装饰器里面的 func 函数中，这使得装饰器里面的 func 函数也有和原函数 foo 一样的元信息了。\n\n```python\nfrom functools import wraps\ndef logged(func):\n    @wraps(func)\n    def with_logging(*args, **kwargs):\n        print func.__name__      # 输出 'f'\n        print func.__doc__       # 输出 'does some math'\n        return func(*args, **kwargs)\n    return with_logging\n\n@logged\ndef f(x):\n   \"\"\"does some math\"\"\"\n   return x + x * x\n```\n\n# 装饰器顺序\n\n一个函数还可以同时定义多个装饰器，比如：\n\n```python\n@a\n@b\n@c\ndef f ():\n    pass\n```\n\n它的执行顺序是从里到外，最先调用最里层的装饰器，最后调用最外层的装饰器，它等效于\n\n```python\nf = a(b(c(f)))\n```\n\n# 补充\n\n## *与**区别\n\n在Python的函数定义中使用*args和**kwargs可传递可变参数。*args用作传递非命名键值可变长参数列表（位置参数），**kwargs用作传递键值可变长参数列表。在函数调用的时候也有解构的使用\n\n```python\ndef test_var_args(farg, *args):\n    print \"formal arg:\", farg\n    for arg in args:\n        print \"another arg:\", arg\n \ntest_var_args(1, \"two\", 3)\n'''\nformal arg: 1\nanother arg: two\nanother arg: 3\n'''\n```\n\n```python\ndef test_var_kwargs(farg, **kwargs):\n    print \"formal arg:\", farg\n    for key in kwargs:\n        print \"another keyword arg: %s: %s\" % (key, kwargs[key])\n \ntest_var_kwargs(farg=1, myarg2=\"two\", myarg3=3)\n'''\nRequired argument:  1\nOptional argument (*args):  2\nOptional argument (*args):  3\nOptional argument (*args):  4\nOptional argument k2 (*kwargs): 6\nOptional argument k1 (*kwargs): 5\n'''\n```\n\n```python\ndef test_var_args_call(arg1, arg2, arg3):\n    print \"arg1:\", arg1\n    print \"arg2:\", arg2\n    print \"arg3:\", arg3\n \nargs = (\"two\", 3)\ntest_var_args_call(1, *args)\n```\n\n```python\ndef test_var_args_call(arg1, arg2, arg3):\n    print \"arg1:\", arg1\n    print \"arg2:\", arg2\n    print \"arg3:\", arg3\n \nkwargs = {\"arg3\": 3, \"arg2\": \"two\"}\ntest_var_args_call(1, **kwargs)\n```\n\n\n\n# 参考\n\n> <https://foofish.net/python-decorator.html>\n>\n> <https://www.biaodianfu.com/python-args-kwargs.html>\n>\n> <https://my.oschina.net/leejun2005/blog/477614> 例子介绍的很详细","slug":"python/python-装饰器","published":1,"updated":"2019-10-14T09:01:08.165Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a441003uic1yf5ww8ydf","content":"<h1 id=\"简单的装饰器\"><a href=\"#简单的装饰器\" class=\"headerlink\" title=\"简单的装饰器\"></a>简单的装饰器</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">use_logging</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        logging.warning(<span class=\"string\">\"%s is running\"</span> % func.__name__)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func()   <span class=\"comment\"># 把 foo 当做参数传递进来时，执行func()就相当于执行foo()</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'i am foo'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">foo = use_logging(foo)  <span class=\"comment\"># 因为装饰器 use_logging(foo) 返回的时函数对象 wrapper，这条语句相当于  foo = wrapper</span></span><br><span class=\"line\">foo()                   <span class=\"comment\"># 执行foo()就相当于执行 wrapper()</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WARNING:root:foo is running</span></span><br><span class=\"line\"><span class=\"string\">i am foo</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"语法糖\"><a href=\"#语法糖\" class=\"headerlink\" title=\"@ 语法糖\"></a>@ 语法糖</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">use_logging</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        logging.warn(<span class=\"string\">\"%s is running\"</span> % func.__name__)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@use_logging</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"i am foo\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure>\n<h1 id=\"args、-kwargs\"><a href=\"#args、-kwargs\" class=\"headerlink\" title=\"*args、**kwargs\"></a>*args、**kwargs</h1><p>可能有人问，如果我的业务逻辑函数 foo 需要参数怎么办？比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def foo(name):</span><br><span class=\"line\">    print(&quot;i am %s&quot; % name)</span><br></pre></td></tr></table></figure>\n<p>我们可以在定义 wrapper 函数的时候指定参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(name)</span>:</span></span><br><span class=\"line\">        logging.warn(<span class=\"string\">\"%s is running\"</span> % func.__name__)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(name)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br></pre></td></tr></table></figure>\n<p>这样 foo 函数定义的参数就可以定义在 wrapper 函数中。这时，又有人要问了，如果 foo 函数接收两个参数呢？三个参数呢？更有甚者，我可能传很多个。当装饰器不知道 foo 到底有多少个参数时，我们可以用 *args 来代替：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args)</span>:</span></span><br><span class=\"line\">        logging.warn(<span class=\"string\">\"%s is running\"</span> % func.__name__)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(*args)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br></pre></td></tr></table></figure>\n<p>如此一来，甭管 foo 定义了多少个参数，我都可以完整地传递到 func 中去。这样就不影响 foo 的业务逻辑了。这时还有读者会问，如果 foo 函数还定义了一些关键字参数呢？比如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(name, age=None, height=None)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"I am %s, age %s, height %s\"</span> % (name, age, height))</span><br></pre></td></tr></table></figure>\n<p>这时，你就可以把 wrapper 函数指定关键字函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># args是一个数组，kwargs一个字典</span></span><br><span class=\"line\">        logging.warn(<span class=\"string\">\"%s is running\"</span> % func.__name__)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(*args, **kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br></pre></td></tr></table></figure>\n<h1 id=\"带参数的装饰器\"><a href=\"#带参数的装饰器\" class=\"headerlink\" title=\"带参数的装饰器\"></a>带参数的装饰器</h1><p>装饰器还有更大的灵活性，例如带参数的装饰器，在上面的装饰器调用中，该装饰器接收唯一的参数就是执行业务的函数 foo 。装饰器的语法允许我们在调用时，提供其它参数，比如<code>@decorator(a)</code>。这样，就为装饰器的编写和使用提供了更大的灵活性。比如，我们可以在装饰器中指定日志的等级，因为不同业务函数可能需要的日志级别是不一样的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">use_logging</span><span class=\"params\">(level)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> level == <span class=\"string\">\"warn\"</span>:</span><br><span class=\"line\">                logging.warn(<span class=\"string\">\"%s is running\"</span> % func.__name__)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> level == <span class=\"string\">\"info\"</span>:</span><br><span class=\"line\">                logging.info(<span class=\"string\">\"%s is running\"</span> % func.__name__)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> func(*args)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@use_logging(level=\"warn\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(name=<span class=\"string\">'foo'</span>)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"i am %s\"</span> % name)</span><br><span class=\"line\"></span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure>\n<p>上面的 use_logging 是允许带参数的装饰器。它实际上是对原有装饰器的一个函数封装，并返回一个装饰器。我们可以将它理解为一个含有参数的闭包。当我 们使用<code>@use_logging(level=&quot;warn&quot;)</code>调用的时候，Python 能够发现这一层的封装，并把参数传递到装饰器的环境中。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@use_logging(level=\"warn\")`等价于`@decorator</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"类装饰器\"><a href=\"#类装饰器\" class=\"headerlink\" title=\"类装饰器\"></a>类装饰器</h1><p>没错，装饰器不仅可以是函数，还可以是类，相比函数装饰器，类装饰器具有灵活度大、高内聚、封装性等优点。使用类装饰器主要依靠类的<code>__call__</code>方法，当使用 @ 形式将装饰器附加到函数上时，就会调用此方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, func)</span>:</span></span><br><span class=\"line\">        self._func = func</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> (<span class=\"string\">'class decorator runing'</span>)</span><br><span class=\"line\">        self._func()</span><br><span class=\"line\">        <span class=\"keyword\">print</span> (<span class=\"string\">'class decorator ending'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Foo</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bar</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">'bar'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">bar()</span><br></pre></td></tr></table></figure>\n<h3 id=\"functools-wraps\"><a href=\"#functools-wraps\" class=\"headerlink\" title=\"functools.wraps\"></a>functools.wraps</h3><p>使用装饰器极大地复用了代码，但是他有一个缺点就是原函数的元信息不见了，比如函数的<code>docstring</code>、<code>__name__</code>、参数列表，先看例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 装饰器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">logged</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">with_logging</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> func.__name__      <span class=\"comment\"># 输出 'with_logging'</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> func.__doc__       <span class=\"comment\"># 输出 None</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(*args, **kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> with_logging</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 函数</span></span><br><span class=\"line\"><span class=\"meta\">@logged</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">   <span class=\"string\">\"\"\"does some math\"\"\"</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> x + x * x</span><br><span class=\"line\"></span><br><span class=\"line\">logged(f)</span><br></pre></td></tr></table></figure>\n<p>不难发现，函数 f 被<code>with_logging</code>取代了，当然它的<code>docstring</code>，<code>__name__</code>就是变成了<code>with_logging</code>函数的信息了。好在我们有<code>functools.wraps</code>，<code>wraps</code>本身也是一个装饰器，它能把原函数的元信息拷贝到装饰器里面的 func 函数中，这使得装饰器里面的 func 函数也有和原函数 foo 一样的元信息了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> wraps</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">logged</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @wraps(func)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">with_logging</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> func.__name__      <span class=\"comment\"># 输出 'f'</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> func.__doc__       <span class=\"comment\"># 输出 'does some math'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(*args, **kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> with_logging</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@logged</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">   <span class=\"string\">\"\"\"does some math\"\"\"</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> x + x * x</span><br></pre></td></tr></table></figure>\n<h1 id=\"装饰器顺序\"><a href=\"#装饰器顺序\" class=\"headerlink\" title=\"装饰器顺序\"></a>装饰器顺序</h1><p>一个函数还可以同时定义多个装饰器，比如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@a</span></span><br><span class=\"line\"><span class=\"meta\">@b</span></span><br><span class=\"line\"><span class=\"meta\">@c</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span> <span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>它的执行顺序是从里到外，最先调用最里层的装饰器，最后调用最外层的装饰器，它等效于</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = a(b(c(f)))</span><br></pre></td></tr></table></figure>\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><h2 id=\"与-区别\"><a href=\"#与-区别\" class=\"headerlink\" title=\"*与**区别\"></a>*与**区别</h2><p>在Python的函数定义中使用<em>args和**kwargs可传递可变参数。</em>args用作传递非命名键值可变长参数列表（位置参数），**kwargs用作传递键值可变长参数列表。在函数调用的时候也有解构的使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_var_args</span><span class=\"params\">(farg, *args)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"formal arg:\"</span>, farg</span><br><span class=\"line\">    <span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> args:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"another arg:\"</span>, arg</span><br><span class=\"line\"> </span><br><span class=\"line\">test_var_args(<span class=\"number\">1</span>, <span class=\"string\">\"two\"</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">formal arg: 1</span></span><br><span class=\"line\"><span class=\"string\">another arg: two</span></span><br><span class=\"line\"><span class=\"string\">another arg: 3</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_var_kwargs</span><span class=\"params\">(farg, **kwargs)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"formal arg:\"</span>, farg</span><br><span class=\"line\">    <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> kwargs:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"another keyword arg: %s: %s\"</span> % (key, kwargs[key])</span><br><span class=\"line\"> </span><br><span class=\"line\">test_var_kwargs(farg=<span class=\"number\">1</span>, myarg2=<span class=\"string\">\"two\"</span>, myarg3=<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Required argument:  1</span></span><br><span class=\"line\"><span class=\"string\">Optional argument (*args):  2</span></span><br><span class=\"line\"><span class=\"string\">Optional argument (*args):  3</span></span><br><span class=\"line\"><span class=\"string\">Optional argument (*args):  4</span></span><br><span class=\"line\"><span class=\"string\">Optional argument k2 (*kwargs): 6</span></span><br><span class=\"line\"><span class=\"string\">Optional argument k1 (*kwargs): 5</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_var_args_call</span><span class=\"params\">(arg1, arg2, arg3)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"arg1:\"</span>, arg1</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"arg2:\"</span>, arg2</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"arg3:\"</span>, arg3</span><br><span class=\"line\"> </span><br><span class=\"line\">args = (<span class=\"string\">\"two\"</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">test_var_args_call(<span class=\"number\">1</span>, *args)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_var_args_call</span><span class=\"params\">(arg1, arg2, arg3)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"arg1:\"</span>, arg1</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"arg2:\"</span>, arg2</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"arg3:\"</span>, arg3</span><br><span class=\"line\"> </span><br><span class=\"line\">kwargs = &#123;<span class=\"string\">\"arg3\"</span>: <span class=\"number\">3</span>, <span class=\"string\">\"arg2\"</span>: <span class=\"string\">\"two\"</span>&#125;</span><br><span class=\"line\">test_var_args_call(<span class=\"number\">1</span>, **kwargs)</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://foofish.net/python-decorator.html\" target=\"_blank\" rel=\"noopener\">https://foofish.net/python-decorator.html</a></p>\n<p><a href=\"https://www.biaodianfu.com/python-args-kwargs.html\" target=\"_blank\" rel=\"noopener\">https://www.biaodianfu.com/python-args-kwargs.html</a></p>\n<p><a href=\"https://my.oschina.net/leejun2005/blog/477614\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/leejun2005/blog/477614</a> 例子介绍的很详细</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简单的装饰器\"><a href=\"#简单的装饰器\" class=\"headerlink\" title=\"简单的装饰器\"></a>简单的装饰器</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">use_logging</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        logging.warning(<span class=\"string\">\"%s is running\"</span> % func.__name__)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func()   <span class=\"comment\"># 把 foo 当做参数传递进来时，执行func()就相当于执行foo()</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'i am foo'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">foo = use_logging(foo)  <span class=\"comment\"># 因为装饰器 use_logging(foo) 返回的时函数对象 wrapper，这条语句相当于  foo = wrapper</span></span><br><span class=\"line\">foo()                   <span class=\"comment\"># 执行foo()就相当于执行 wrapper()</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WARNING:root:foo is running</span></span><br><span class=\"line\"><span class=\"string\">i am foo</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"语法糖\"><a href=\"#语法糖\" class=\"headerlink\" title=\"@ 语法糖\"></a>@ 语法糖</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">use_logging</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        logging.warn(<span class=\"string\">\"%s is running\"</span> % func.__name__)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@use_logging</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"i am foo\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure>\n<h1 id=\"args、-kwargs\"><a href=\"#args、-kwargs\" class=\"headerlink\" title=\"*args、**kwargs\"></a>*args、**kwargs</h1><p>可能有人问，如果我的业务逻辑函数 foo 需要参数怎么办？比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def foo(name):</span><br><span class=\"line\">    print(&quot;i am %s&quot; % name)</span><br></pre></td></tr></table></figure>\n<p>我们可以在定义 wrapper 函数的时候指定参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(name)</span>:</span></span><br><span class=\"line\">        logging.warn(<span class=\"string\">\"%s is running\"</span> % func.__name__)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(name)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br></pre></td></tr></table></figure>\n<p>这样 foo 函数定义的参数就可以定义在 wrapper 函数中。这时，又有人要问了，如果 foo 函数接收两个参数呢？三个参数呢？更有甚者，我可能传很多个。当装饰器不知道 foo 到底有多少个参数时，我们可以用 *args 来代替：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args)</span>:</span></span><br><span class=\"line\">        logging.warn(<span class=\"string\">\"%s is running\"</span> % func.__name__)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(*args)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br></pre></td></tr></table></figure>\n<p>如此一来，甭管 foo 定义了多少个参数，我都可以完整地传递到 func 中去。这样就不影响 foo 的业务逻辑了。这时还有读者会问，如果 foo 函数还定义了一些关键字参数呢？比如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(name, age=None, height=None)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"I am %s, age %s, height %s\"</span> % (name, age, height))</span><br></pre></td></tr></table></figure>\n<p>这时，你就可以把 wrapper 函数指定关键字函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># args是一个数组，kwargs一个字典</span></span><br><span class=\"line\">        logging.warn(<span class=\"string\">\"%s is running\"</span> % func.__name__)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(*args, **kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br></pre></td></tr></table></figure>\n<h1 id=\"带参数的装饰器\"><a href=\"#带参数的装饰器\" class=\"headerlink\" title=\"带参数的装饰器\"></a>带参数的装饰器</h1><p>装饰器还有更大的灵活性，例如带参数的装饰器，在上面的装饰器调用中，该装饰器接收唯一的参数就是执行业务的函数 foo 。装饰器的语法允许我们在调用时，提供其它参数，比如<code>@decorator(a)</code>。这样，就为装饰器的编写和使用提供了更大的灵活性。比如，我们可以在装饰器中指定日志的等级，因为不同业务函数可能需要的日志级别是不一样的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">use_logging</span><span class=\"params\">(level)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> level == <span class=\"string\">\"warn\"</span>:</span><br><span class=\"line\">                logging.warn(<span class=\"string\">\"%s is running\"</span> % func.__name__)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> level == <span class=\"string\">\"info\"</span>:</span><br><span class=\"line\">                logging.info(<span class=\"string\">\"%s is running\"</span> % func.__name__)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> func(*args)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@use_logging(level=\"warn\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(name=<span class=\"string\">'foo'</span>)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"i am %s\"</span> % name)</span><br><span class=\"line\"></span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure>\n<p>上面的 use_logging 是允许带参数的装饰器。它实际上是对原有装饰器的一个函数封装，并返回一个装饰器。我们可以将它理解为一个含有参数的闭包。当我 们使用<code>@use_logging(level=&quot;warn&quot;)</code>调用的时候，Python 能够发现这一层的封装，并把参数传递到装饰器的环境中。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@use_logging(level=\"warn\")`等价于`@decorator</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"类装饰器\"><a href=\"#类装饰器\" class=\"headerlink\" title=\"类装饰器\"></a>类装饰器</h1><p>没错，装饰器不仅可以是函数，还可以是类，相比函数装饰器，类装饰器具有灵活度大、高内聚、封装性等优点。使用类装饰器主要依靠类的<code>__call__</code>方法，当使用 @ 形式将装饰器附加到函数上时，就会调用此方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, func)</span>:</span></span><br><span class=\"line\">        self._func = func</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> (<span class=\"string\">'class decorator runing'</span>)</span><br><span class=\"line\">        self._func()</span><br><span class=\"line\">        <span class=\"keyword\">print</span> (<span class=\"string\">'class decorator ending'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Foo</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bar</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">'bar'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">bar()</span><br></pre></td></tr></table></figure>\n<h3 id=\"functools-wraps\"><a href=\"#functools-wraps\" class=\"headerlink\" title=\"functools.wraps\"></a>functools.wraps</h3><p>使用装饰器极大地复用了代码，但是他有一个缺点就是原函数的元信息不见了，比如函数的<code>docstring</code>、<code>__name__</code>、参数列表，先看例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 装饰器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">logged</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">with_logging</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> func.__name__      <span class=\"comment\"># 输出 'with_logging'</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> func.__doc__       <span class=\"comment\"># 输出 None</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(*args, **kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> with_logging</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 函数</span></span><br><span class=\"line\"><span class=\"meta\">@logged</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">   <span class=\"string\">\"\"\"does some math\"\"\"</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> x + x * x</span><br><span class=\"line\"></span><br><span class=\"line\">logged(f)</span><br></pre></td></tr></table></figure>\n<p>不难发现，函数 f 被<code>with_logging</code>取代了，当然它的<code>docstring</code>，<code>__name__</code>就是变成了<code>with_logging</code>函数的信息了。好在我们有<code>functools.wraps</code>，<code>wraps</code>本身也是一个装饰器，它能把原函数的元信息拷贝到装饰器里面的 func 函数中，这使得装饰器里面的 func 函数也有和原函数 foo 一样的元信息了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> wraps</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">logged</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @wraps(func)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">with_logging</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> func.__name__      <span class=\"comment\"># 输出 'f'</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> func.__doc__       <span class=\"comment\"># 输出 'does some math'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(*args, **kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> with_logging</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@logged</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">   <span class=\"string\">\"\"\"does some math\"\"\"</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> x + x * x</span><br></pre></td></tr></table></figure>\n<h1 id=\"装饰器顺序\"><a href=\"#装饰器顺序\" class=\"headerlink\" title=\"装饰器顺序\"></a>装饰器顺序</h1><p>一个函数还可以同时定义多个装饰器，比如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@a</span></span><br><span class=\"line\"><span class=\"meta\">@b</span></span><br><span class=\"line\"><span class=\"meta\">@c</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span> <span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>它的执行顺序是从里到外，最先调用最里层的装饰器，最后调用最外层的装饰器，它等效于</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = a(b(c(f)))</span><br></pre></td></tr></table></figure>\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><h2 id=\"与-区别\"><a href=\"#与-区别\" class=\"headerlink\" title=\"*与**区别\"></a>*与**区别</h2><p>在Python的函数定义中使用<em>args和**kwargs可传递可变参数。</em>args用作传递非命名键值可变长参数列表（位置参数），**kwargs用作传递键值可变长参数列表。在函数调用的时候也有解构的使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_var_args</span><span class=\"params\">(farg, *args)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"formal arg:\"</span>, farg</span><br><span class=\"line\">    <span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> args:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"another arg:\"</span>, arg</span><br><span class=\"line\"> </span><br><span class=\"line\">test_var_args(<span class=\"number\">1</span>, <span class=\"string\">\"two\"</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">formal arg: 1</span></span><br><span class=\"line\"><span class=\"string\">another arg: two</span></span><br><span class=\"line\"><span class=\"string\">another arg: 3</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_var_kwargs</span><span class=\"params\">(farg, **kwargs)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"formal arg:\"</span>, farg</span><br><span class=\"line\">    <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> kwargs:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"another keyword arg: %s: %s\"</span> % (key, kwargs[key])</span><br><span class=\"line\"> </span><br><span class=\"line\">test_var_kwargs(farg=<span class=\"number\">1</span>, myarg2=<span class=\"string\">\"two\"</span>, myarg3=<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Required argument:  1</span></span><br><span class=\"line\"><span class=\"string\">Optional argument (*args):  2</span></span><br><span class=\"line\"><span class=\"string\">Optional argument (*args):  3</span></span><br><span class=\"line\"><span class=\"string\">Optional argument (*args):  4</span></span><br><span class=\"line\"><span class=\"string\">Optional argument k2 (*kwargs): 6</span></span><br><span class=\"line\"><span class=\"string\">Optional argument k1 (*kwargs): 5</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_var_args_call</span><span class=\"params\">(arg1, arg2, arg3)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"arg1:\"</span>, arg1</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"arg2:\"</span>, arg2</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"arg3:\"</span>, arg3</span><br><span class=\"line\"> </span><br><span class=\"line\">args = (<span class=\"string\">\"two\"</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">test_var_args_call(<span class=\"number\">1</span>, *args)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_var_args_call</span><span class=\"params\">(arg1, arg2, arg3)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"arg1:\"</span>, arg1</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"arg2:\"</span>, arg2</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"arg3:\"</span>, arg3</span><br><span class=\"line\"> </span><br><span class=\"line\">kwargs = &#123;<span class=\"string\">\"arg3\"</span>: <span class=\"number\">3</span>, <span class=\"string\">\"arg2\"</span>: <span class=\"string\">\"two\"</span>&#125;</span><br><span class=\"line\">test_var_args_call(<span class=\"number\">1</span>, **kwargs)</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://foofish.net/python-decorator.html\" target=\"_blank\" rel=\"noopener\">https://foofish.net/python-decorator.html</a></p>\n<p><a href=\"https://www.biaodianfu.com/python-args-kwargs.html\" target=\"_blank\" rel=\"noopener\">https://www.biaodianfu.com/python-args-kwargs.html</a></p>\n<p><a href=\"https://my.oschina.net/leejun2005/blog/477614\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/leejun2005/blog/477614</a> 例子介绍的很详细</p>\n</blockquote>\n"},{"title":"create-react-app脚手架","date":"2019-08-07T01:38:30.000Z","_content":"\n# 安装\n\n```bash\nnpm install -g create-react-app\n# 切记项目名称不能大写\ncreate-react-app firstapp\ncd firstapp\nnpm run start\n```\n\n# eject\n\n这是一次性的操作\n\n```bash\nnpm run eject\n```\n\n# 启动less或者sass\n\n## sass\n\ncreate-react-app默认有sass的配置，只需要安装依赖就行\n\n```bash\nnpm install node-sass --save\n```\n\n## less\n\n默认没有less的配置，需要自己在webpack中配置\n\n1. 安装依赖\n\n   ```bash\n   npm install less less-loader --save\n   ```\n2. 运行完成之后，打开 config 目录下的 webpack.config.js 文件，找到 `// style files regexes` 注释位置，仿照其解析 sass 的规则，在下面添加两行代码\n\n   ```js\n   // 添加 less 解析规则\n   const lessRegex = /\\.less$/;\n   const lessModuleRegex = /\\.module\\.less$/;\n   复制代码\n   ```\n\n   找到 rules 属性配置，在其中添加 less 解析配置\n\n   > **!!!注意：** 这里有一个需要注意的地方，下面的这些 `less` 配置规则放在 `sass` 的解析规则下面即可，如果放在了 `file-loader` 的解析规则下面，`less` 文件解析不会生效。\n\n   ```json\n   // Less 解析配置\n   {\n       test: lessRegex,\n       exclude: lessModuleRegex,\n       use: getStyleLoaders(\n           {\n               importLoaders: 2,\n               sourceMap: isEnvProduction && shouldUseSourceMap,\n           },\n           'less-loader'\n       ),\n       sideEffects: true,\n   },\n   {\n       test: lessModuleRegex,\n       use: getStyleLoaders(\n           {\n               importLoaders: 2,\n               sourceMap: isEnvProduction && shouldUseSourceMap,\n               modules: true,\n               getLocalIdent: getCSSModuleLocalIdent,\n           },\n           'less-loader'\n       )\n   },\n   ```\n\n\n# css module\n\n在css的命名中使用*.module.css就可以使用css module，也可以自己修改webpack的文件。\n\n# 参考\n\n> <https://www.jianshu.com/p/1f054623ecac>","source":"_posts/react/create-react-app脚手架.md","raw":"---\ntitle: create-react-app脚手架\ndate: 2019-08-07 09:38:30\ntags:\n- react\n---\n\n# 安装\n\n```bash\nnpm install -g create-react-app\n# 切记项目名称不能大写\ncreate-react-app firstapp\ncd firstapp\nnpm run start\n```\n\n# eject\n\n这是一次性的操作\n\n```bash\nnpm run eject\n```\n\n# 启动less或者sass\n\n## sass\n\ncreate-react-app默认有sass的配置，只需要安装依赖就行\n\n```bash\nnpm install node-sass --save\n```\n\n## less\n\n默认没有less的配置，需要自己在webpack中配置\n\n1. 安装依赖\n\n   ```bash\n   npm install less less-loader --save\n   ```\n2. 运行完成之后，打开 config 目录下的 webpack.config.js 文件，找到 `// style files regexes` 注释位置，仿照其解析 sass 的规则，在下面添加两行代码\n\n   ```js\n   // 添加 less 解析规则\n   const lessRegex = /\\.less$/;\n   const lessModuleRegex = /\\.module\\.less$/;\n   复制代码\n   ```\n\n   找到 rules 属性配置，在其中添加 less 解析配置\n\n   > **!!!注意：** 这里有一个需要注意的地方，下面的这些 `less` 配置规则放在 `sass` 的解析规则下面即可，如果放在了 `file-loader` 的解析规则下面，`less` 文件解析不会生效。\n\n   ```json\n   // Less 解析配置\n   {\n       test: lessRegex,\n       exclude: lessModuleRegex,\n       use: getStyleLoaders(\n           {\n               importLoaders: 2,\n               sourceMap: isEnvProduction && shouldUseSourceMap,\n           },\n           'less-loader'\n       ),\n       sideEffects: true,\n   },\n   {\n       test: lessModuleRegex,\n       use: getStyleLoaders(\n           {\n               importLoaders: 2,\n               sourceMap: isEnvProduction && shouldUseSourceMap,\n               modules: true,\n               getLocalIdent: getCSSModuleLocalIdent,\n           },\n           'less-loader'\n       )\n   },\n   ```\n\n\n# css module\n\n在css的命名中使用*.module.css就可以使用css module，也可以自己修改webpack的文件。\n\n# 参考\n\n> <https://www.jianshu.com/p/1f054623ecac>","slug":"react/create-react-app脚手架","published":1,"updated":"2019-10-14T09:01:08.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a442003xic1yxmsr3sje","content":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g create-react-app</span><br><span class=\"line\"><span class=\"comment\"># 切记项目名称不能大写</span></span><br><span class=\"line\">create-react-app firstapp</span><br><span class=\"line\"><span class=\"built_in\">cd</span> firstapp</span><br><span class=\"line\">npm run start</span><br></pre></td></tr></table></figure>\n<h1 id=\"eject\"><a href=\"#eject\" class=\"headerlink\" title=\"eject\"></a>eject</h1><p>这是一次性的操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run eject</span><br></pre></td></tr></table></figure>\n<h1 id=\"启动less或者sass\"><a href=\"#启动less或者sass\" class=\"headerlink\" title=\"启动less或者sass\"></a>启动less或者sass</h1><h2 id=\"sass\"><a href=\"#sass\" class=\"headerlink\" title=\"sass\"></a>sass</h2><p>create-react-app默认有sass的配置，只需要安装依赖就行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install node-sass --save</span><br></pre></td></tr></table></figure>\n<h2 id=\"less\"><a href=\"#less\" class=\"headerlink\" title=\"less\"></a>less</h2><p>默认没有less的配置，需要自己在webpack中配置</p>\n<ol>\n<li><p>安装依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install less less-loader --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行完成之后，打开 config 目录下的 webpack.config.js 文件，找到 <code>// style files regexes</code> 注释位置，仿照其解析 sass 的规则，在下面添加两行代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加 less 解析规则</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> lessRegex = <span class=\"regexp\">/\\.less$/</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> lessModuleRegex = <span class=\"regexp\">/\\.module\\.less$/</span>;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>找到 rules 属性配置，在其中添加 less 解析配置</p>\n<blockquote>\n<p><strong>!!!注意：</strong> 这里有一个需要注意的地方，下面的这些 <code>less</code> 配置规则放在 <code>sass</code> 的解析规则下面即可，如果放在了 <code>file-loader</code> 的解析规则下面，<code>less</code> 文件解析不会生效。</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Less 解析配置</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    test: lessRegex,</span><br><span class=\"line\">    exclude: lessModuleRegex,</span><br><span class=\"line\">    use: getStyleLoaders(</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            importLoaders: 2,</span><br><span class=\"line\">            sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        'less-loader'</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    sideEffects: true,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    test: lessModuleRegex,</span><br><span class=\"line\">    use: getStyleLoaders(</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            importLoaders: 2,</span><br><span class=\"line\">            sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class=\"line\">            modules: true,</span><br><span class=\"line\">            getLocalIdent: getCSSModuleLocalIdent,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        'less-loader'</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"css-module\"><a href=\"#css-module\" class=\"headerlink\" title=\"css module\"></a>css module</h1><p>在css的命名中使用*.module.css就可以使用css module，也可以自己修改webpack的文件。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://www.jianshu.com/p/1f054623ecac\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/1f054623ecac</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g create-react-app</span><br><span class=\"line\"><span class=\"comment\"># 切记项目名称不能大写</span></span><br><span class=\"line\">create-react-app firstapp</span><br><span class=\"line\"><span class=\"built_in\">cd</span> firstapp</span><br><span class=\"line\">npm run start</span><br></pre></td></tr></table></figure>\n<h1 id=\"eject\"><a href=\"#eject\" class=\"headerlink\" title=\"eject\"></a>eject</h1><p>这是一次性的操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run eject</span><br></pre></td></tr></table></figure>\n<h1 id=\"启动less或者sass\"><a href=\"#启动less或者sass\" class=\"headerlink\" title=\"启动less或者sass\"></a>启动less或者sass</h1><h2 id=\"sass\"><a href=\"#sass\" class=\"headerlink\" title=\"sass\"></a>sass</h2><p>create-react-app默认有sass的配置，只需要安装依赖就行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install node-sass --save</span><br></pre></td></tr></table></figure>\n<h2 id=\"less\"><a href=\"#less\" class=\"headerlink\" title=\"less\"></a>less</h2><p>默认没有less的配置，需要自己在webpack中配置</p>\n<ol>\n<li><p>安装依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install less less-loader --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行完成之后，打开 config 目录下的 webpack.config.js 文件，找到 <code>// style files regexes</code> 注释位置，仿照其解析 sass 的规则，在下面添加两行代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加 less 解析规则</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> lessRegex = <span class=\"regexp\">/\\.less$/</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> lessModuleRegex = <span class=\"regexp\">/\\.module\\.less$/</span>;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>找到 rules 属性配置，在其中添加 less 解析配置</p>\n<blockquote>\n<p><strong>!!!注意：</strong> 这里有一个需要注意的地方，下面的这些 <code>less</code> 配置规则放在 <code>sass</code> 的解析规则下面即可，如果放在了 <code>file-loader</code> 的解析规则下面，<code>less</code> 文件解析不会生效。</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Less 解析配置</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    test: lessRegex,</span><br><span class=\"line\">    exclude: lessModuleRegex,</span><br><span class=\"line\">    use: getStyleLoaders(</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            importLoaders: 2,</span><br><span class=\"line\">            sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        'less-loader'</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    sideEffects: true,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    test: lessModuleRegex,</span><br><span class=\"line\">    use: getStyleLoaders(</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            importLoaders: 2,</span><br><span class=\"line\">            sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class=\"line\">            modules: true,</span><br><span class=\"line\">            getLocalIdent: getCSSModuleLocalIdent,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        'less-loader'</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"css-module\"><a href=\"#css-module\" class=\"headerlink\" title=\"css module\"></a>css module</h1><p>在css的命名中使用*.module.css就可以使用css module，也可以自己修改webpack的文件。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://www.jianshu.com/p/1f054623ecac\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/1f054623ecac</a></p>\n</blockquote>\n"},{"title":"python中and和or用法","date":"2019-10-25T07:41:30.000Z","_content":"\n在[Python](http://lib.csdn.net/base/python) 中，and 和 or 执行布尔逻辑演算，如你所期待的一样。但是它们并不返回布尔值，而是返回它们实际进行比较的值之一。\n\n（类似C++里面的&&和||的短路求值）\n\n（ 在布尔环境中，0、”、[]、()、{}、None为假；其它任何东西都为真。但是可以在类中定义特定的方法使得类实例的演算值为假。）\n\n# and实例：\n\n```python\n>>> 'a' and 'b'\n'b'\n>>> '' and 'b'\n''\n>>> 'a' and 'b' and 'c'\n'c'12345\n```\n\n从左到右扫描，返回第一个为假的表达式值，无假值则返回最后一个表达式值。\n\n# or实例：\n\n```python\n>>> 'a' or 'b'\n'a'\n>>> '' or 'b'\n'b'\n>>> '' or [] or{}\n{}12345\n```\n\n从左到右扫描，返回第一个为真的表达式值，无真值则返回最后一个表达式值。\n\n# and-or搭配：\n\n```python\n>>> a = \"betabin\"\n>>> b = \"python\"\n>>> 1 and a or b\n'betabin'\n>>> 0 and a or b\n'python'12345\n```\n\n看起来类似于于我们Ｃ＋＋中的条件运算符（bool？a：b），是的，当a为true的时候是一样的。但是，当a为false的时候，就明显不同了。\n\n如果坚持要用and-or技巧来实现条件运算符的话，可以用种安全的方法：\n\n```python\n>>> a = \"\"\n>>> b = \"betabin\"\n>>> (1 and [a] or [b])[0]\n''123\n```\n\n就是万能的[]，把a为假的可能性给抹杀掉，然后通过[0]再获得（因为要通过[0]获得元素，所以b也得加上[]）。\n\n\n\n这个and-or技巧主要在lambda中使用。","source":"_posts/python/python中and和or用法.md","raw":"---\ntitle: python中and和or用法\ndate: 2019-10-25 15:41:30\ntags:\n - python\n---\n\n在[Python](http://lib.csdn.net/base/python) 中，and 和 or 执行布尔逻辑演算，如你所期待的一样。但是它们并不返回布尔值，而是返回它们实际进行比较的值之一。\n\n（类似C++里面的&&和||的短路求值）\n\n（ 在布尔环境中，0、”、[]、()、{}、None为假；其它任何东西都为真。但是可以在类中定义特定的方法使得类实例的演算值为假。）\n\n# and实例：\n\n```python\n>>> 'a' and 'b'\n'b'\n>>> '' and 'b'\n''\n>>> 'a' and 'b' and 'c'\n'c'12345\n```\n\n从左到右扫描，返回第一个为假的表达式值，无假值则返回最后一个表达式值。\n\n# or实例：\n\n```python\n>>> 'a' or 'b'\n'a'\n>>> '' or 'b'\n'b'\n>>> '' or [] or{}\n{}12345\n```\n\n从左到右扫描，返回第一个为真的表达式值，无真值则返回最后一个表达式值。\n\n# and-or搭配：\n\n```python\n>>> a = \"betabin\"\n>>> b = \"python\"\n>>> 1 and a or b\n'betabin'\n>>> 0 and a or b\n'python'12345\n```\n\n看起来类似于于我们Ｃ＋＋中的条件运算符（bool？a：b），是的，当a为true的时候是一样的。但是，当a为false的时候，就明显不同了。\n\n如果坚持要用and-or技巧来实现条件运算符的话，可以用种安全的方法：\n\n```python\n>>> a = \"\"\n>>> b = \"betabin\"\n>>> (1 and [a] or [b])[0]\n''123\n```\n\n就是万能的[]，把a为假的可能性给抹杀掉，然后通过[0]再获得（因为要通过[0]获得元素，所以b也得加上[]）。\n\n\n\n这个and-or技巧主要在lambda中使用。","slug":"python/python中and和or用法","published":1,"updated":"2019-10-25T07:44:07.393Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a442003zic1ywa3ymkif","content":"<p>在<a href=\"http://lib.csdn.net/base/python\" target=\"_blank\" rel=\"noopener\">Python</a> 中，and 和 or 执行布尔逻辑演算，如你所期待的一样。但是它们并不返回布尔值，而是返回它们实际进行比较的值之一。</p>\n<p>（类似C++里面的&amp;&amp;和||的短路求值）</p>\n<p>（ 在布尔环境中，0、”、[]、()、{}、None为假；其它任何东西都为真。但是可以在类中定义特定的方法使得类实例的演算值为假。）</p>\n<h1 id=\"and实例：\"><a href=\"#and实例：\" class=\"headerlink\" title=\"and实例：\"></a>and实例：</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'a'</span> <span class=\"keyword\">and</span> <span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">''</span> <span class=\"keyword\">and</span> <span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'a'</span> <span class=\"keyword\">and</span> <span class=\"string\">'b'</span> <span class=\"keyword\">and</span> <span class=\"string\">'c'</span></span><br><span class=\"line\"><span class=\"string\">'c'</span><span class=\"number\">12345</span></span><br></pre></td></tr></table></figure>\n<p>从左到右扫描，返回第一个为假的表达式值，无假值则返回最后一个表达式值。</p>\n<h1 id=\"or实例：\"><a href=\"#or实例：\" class=\"headerlink\" title=\"or实例：\"></a>or实例：</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'a'</span> <span class=\"keyword\">or</span> <span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"string\">'a'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">''</span> <span class=\"keyword\">or</span> <span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">''</span> <span class=\"keyword\">or</span> [] <span class=\"keyword\">or</span>&#123;&#125;</span><br><span class=\"line\">&#123;&#125;<span class=\"number\">12345</span></span><br></pre></td></tr></table></figure>\n<p>从左到右扫描，返回第一个为真的表达式值，无真值则返回最后一个表达式值。</p>\n<h1 id=\"and-or搭配：\"><a href=\"#and-or搭配：\" class=\"headerlink\" title=\"and-or搭配：\"></a>and-or搭配：</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">\"betabin\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"string\">\"python\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> <span class=\"keyword\">and</span> a <span class=\"keyword\">or</span> b</span><br><span class=\"line\"><span class=\"string\">'betabin'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0</span> <span class=\"keyword\">and</span> a <span class=\"keyword\">or</span> b</span><br><span class=\"line\"><span class=\"string\">'python'</span><span class=\"number\">12345</span></span><br></pre></td></tr></table></figure>\n<p>看起来类似于于我们Ｃ＋＋中的条件运算符（bool？a：b），是的，当a为true的时候是一样的。但是，当a为false的时候，就明显不同了。</p>\n<p>如果坚持要用and-or技巧来实现条件运算符的话，可以用种安全的方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"string\">\"betabin\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>(<span class=\"number\">1</span> <span class=\"keyword\">and</span> [a] <span class=\"keyword\">or</span> [b])[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"string\">''</span><span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n<p>就是万能的[]，把a为假的可能性给抹杀掉，然后通过[0]再获得（因为要通过[0]获得元素，所以b也得加上[]）。</p>\n<p>这个and-or技巧主要在lambda中使用。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在<a href=\"http://lib.csdn.net/base/python\" target=\"_blank\" rel=\"noopener\">Python</a> 中，and 和 or 执行布尔逻辑演算，如你所期待的一样。但是它们并不返回布尔值，而是返回它们实际进行比较的值之一。</p>\n<p>（类似C++里面的&amp;&amp;和||的短路求值）</p>\n<p>（ 在布尔环境中，0、”、[]、()、{}、None为假；其它任何东西都为真。但是可以在类中定义特定的方法使得类实例的演算值为假。）</p>\n<h1 id=\"and实例：\"><a href=\"#and实例：\" class=\"headerlink\" title=\"and实例：\"></a>and实例：</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'a'</span> <span class=\"keyword\">and</span> <span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">''</span> <span class=\"keyword\">and</span> <span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'a'</span> <span class=\"keyword\">and</span> <span class=\"string\">'b'</span> <span class=\"keyword\">and</span> <span class=\"string\">'c'</span></span><br><span class=\"line\"><span class=\"string\">'c'</span><span class=\"number\">12345</span></span><br></pre></td></tr></table></figure>\n<p>从左到右扫描，返回第一个为假的表达式值，无假值则返回最后一个表达式值。</p>\n<h1 id=\"or实例：\"><a href=\"#or实例：\" class=\"headerlink\" title=\"or实例：\"></a>or实例：</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'a'</span> <span class=\"keyword\">or</span> <span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"string\">'a'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">''</span> <span class=\"keyword\">or</span> <span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">''</span> <span class=\"keyword\">or</span> [] <span class=\"keyword\">or</span>&#123;&#125;</span><br><span class=\"line\">&#123;&#125;<span class=\"number\">12345</span></span><br></pre></td></tr></table></figure>\n<p>从左到右扫描，返回第一个为真的表达式值，无真值则返回最后一个表达式值。</p>\n<h1 id=\"and-or搭配：\"><a href=\"#and-or搭配：\" class=\"headerlink\" title=\"and-or搭配：\"></a>and-or搭配：</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">\"betabin\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"string\">\"python\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> <span class=\"keyword\">and</span> a <span class=\"keyword\">or</span> b</span><br><span class=\"line\"><span class=\"string\">'betabin'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0</span> <span class=\"keyword\">and</span> a <span class=\"keyword\">or</span> b</span><br><span class=\"line\"><span class=\"string\">'python'</span><span class=\"number\">12345</span></span><br></pre></td></tr></table></figure>\n<p>看起来类似于于我们Ｃ＋＋中的条件运算符（bool？a：b），是的，当a为true的时候是一样的。但是，当a为false的时候，就明显不同了。</p>\n<p>如果坚持要用and-or技巧来实现条件运算符的话，可以用种安全的方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"string\">\"betabin\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>(<span class=\"number\">1</span> <span class=\"keyword\">and</span> [a] <span class=\"keyword\">or</span> [b])[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"string\">''</span><span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n<p>就是万能的[]，把a为假的可能性给抹杀掉，然后通过[0]再获得（因为要通过[0]获得元素，所以b也得加上[]）。</p>\n<p>这个and-or技巧主要在lambda中使用。</p>\n"},{"layout":"odoo","title":"管理Odoo服务器实例","date":"2019-06-18T06:02:38.000Z","_content":"\n全书完整目录请见：[Odoo 12开发者指南（Cookbook）第三版](https://alanhou.org/odoo12-cookbook/)\n\n本章中，我们将讲解如下内容：\n\n- 配置插件路径\n- 更新插件模块列表\n- 标准化你的实例目录布局\n- 安装并升级本地插件模块\n- 对插件应用修改\n- 应用及尝试建议的拉取请求\n\n## 引言\n\n在[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)中，我们看了如何使用与编辑器一同发布的标准核心插件来设置 Odoo 实例。本章集中讲解为 Odoo 实例添加非核心插件。Odoo中，你可以从多个目录中加载插件。此外，推荐你将第三方插件（如OCA模块）或你自定义的插件放在一个单独的文件夹中，这样可以避免与 Odoo 核心模块产生冲突。甚至Odoo 企业版也是一种类型的插件目录，你需要像普通插件目录一样加载它。\n\n> ℹ️**有关用词 – 插件(add-on) vs. 模块(module)**\n>\n> 本书中，我们使用插件或插件模块来指代 Odoo 所预期安装的 Python 包。用户界面常使用应用（app）或模块的表达 ，但我们更愿意保留模块一词来表示Python模块或包，它们不一定是 Odoo 插件，而应用（app）来表示适当定义为应用的插件模块，表示它不是Odoo主菜单中的入口。\n\n## 配置插件路径\n\n通过addons_path参数的配置，你可以在 Odoo 中加载自己的插件模块。在Odoo初始化一个新数据库时，它会搜索在addons_path配置参数中给定的这些目录。addons_path会在这些目录中搜索潜在的插件模块。addons_path中所列出的目录预期应包含子目录，每个子目录是一个插件模块。在数据库初始化完成后，你将能够安装这些目录中所给出的模块。\n\n### 准备工作\n\n这一部分假定你已经准备好了实例并生成了配置文件，如在[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)中*在一个文件中存储实例配置*一节所描述。Odoo的源码存放在~/odoo-dev/odoo中，而配置文件存放在~/odoo-dev/myinstance.cfg中。\n\n### 如何配置…\n\n按如下步骤在实例的addons_path中添加~/odoo-dev/local-addons目录：\n\n1. 编辑你的实例的配置文件，即 ~/odoo-dev/my-instance.cfg。\n\n2. 定位到以addons_path =开头一行，默认，你会看到如下内容：\n\n\n```\n  addons_path = ~/odoo-dev/odoo/odoo/addons,~/odoo-dev/odoo/add-ons \n```\n\n\n   译者注：\n\n   当前默认生成的配置文件中为绝对路径，且仅包含xxx/odoo/addons\n\n3. 修改该行，添加一个逗号（英文半角），并接你想想要添加为addons_的目录名称，如以下代码所示：\n\n\n\n  ```\naddons_path = ~/odoo-dev/odoo/odoo/addons,~/odoo-dev/odoo/addons,~/odoo-dev/local-addons \n  ```\n\n4. 重启你的实例\n\n   ```\n   $ ~/odoo-dev/odoo/odoo-bin -c my-instance.cfg \n   ```\n\n### 运行原理…\n\n在重启 Odoo 时，会读取配置文件。addons_path变量的值应为一个逗号分隔的目录列表。可接受相对路径，但它们是相对于当前工作目录的，因此应在配置文件中尽量避免。\n\n至此，~/odoo-dev/local-addons中包含的新插件尚不在该实例的可用模块列表中。为此，你需要执行一个额外的操作，在下一部分*更新插件模块列表*中会进行讲解。\n\n### 扩展知识…\n\n在第一次调用 odoo-bin脚本来初始化新数据库时，你可以传递一个带逗号分隔目录列表的–addons-path命令行参数。这会以所提供插件路径中所找到的所有插件来初始化可用插件模块列表。这么做时，你要显式地包含基础插件目录（odoo/odoo/addons）以及核心插件目录（odoo/addons）。\n\n与前面稍有不同的是本地插件目录不能为空（**译者注：**请先阅读下面的小贴士），它必须要至少包含一个子目录，并包含插件模块的最小化结构。在[第四章 创建Odoo插件模块](https://alanhou.org/creating-odoo-add-on-modules/)中，我们会来看如何编写你自己的模块。同时，这里有一个生成内容来满足Odoo要求的快捷版黑科技：\n\n\n\n```\n$ mkdir -p ~/odoo-dev/local-addons/dummy$ touch ~/odoo-dev/local-addons/dummy/__init__.py$ echo '{\"name\": \"dummy\", \"installable\": False}' > \\~/odoo-dev/local-addons/dummy/__manifest__.py \n```\n\n你可以使用–save选项来保存配置文件的路径：\n\n\n\n```\n$ odoo/odoo-bin -d mydatabase \\--add-ons-path=\"odoo/odoo/addons,odoo/addons,~/odoo-dev/local-addons\" \\--save -c ~/odoo-dev/my-instance.cfg --stop-after-init \n```\n\n本例中，使用相对路径不会有问题，因为它们会在配置文件中转化为绝对路径。\n\n> **小贴士：**因为Odoo仅当从命令行中设置路径时在插件路径的目录中查看插件，而不是在从配置文件中加载路径的时候，dummy已不再必要。因此，你可以删除它（或保留到你确定不需要新建一个配置文件时）。\n\n## 更新插件模块列表\n\n我们在前面的部分已经说到，在向插件路径添加目录时，仅仅重启Odoo服务是不足以安装其中一个新插件模块的。Odoo还需要有一个指定动作来扫描路径并更新可用插件模块的列表。\n\n### 准备工作\n\n启动你的实例并使用管理员账号连接它。然后，激活开发者模式（如果你不知道如何激活开发者模式，请参见[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)）。\n\n### 如何更新…\n\n要更新你实例中的可用插件模块列表，你需要执行如下步骤：\n\n1. 打开Apps菜单\n2. 点击Update Apps List：\n   [![Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902052063.jpg)](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902052063.jpg)\n3. 在弹出对话框中，点击Update按钮：\n   [![Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902070776.jpg)](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902070776.jpg)\n4. 在更新的最后，你可以点击Apps入口来查看已更新的可用插件模块列表。你将需要删除Apps搜索框中的默认过滤器来查看所有模块。\n\n### 运行原理…\n\n在点击了Update按钮之后，Odoo会读取插件路径配置变量。对于列表中的每一个目录，它会查看包含保存在插件模块目录中名为__manifest__.py的插件声明文件的直接子目录。Odoo读取声明内容，并预期查找其中的Python字典。除非声明内容中包含一个键installable的值为False，插件模块的元数据就会存储在数据库中。如果模块已存在，则更新相关信息。否则，会创建一条新记录。如果此前可用的插件模块未找到，则从列表中删除该记录。\n\n> ℹ️仅在初始化数据库后添加了新的插件路径时才需要更新应用列表。如果你在初始化数据库之前在配置文件中添加了新插件路径，那么就无需手动更新模块列表。\n\n## 标准化你的实例目录布局\n\n我们推荐你在开发和生产环境都使用相似的目录布局。这一标准化会在你要执行运维时体现出用处，它也会缓解你日常工作的压力。\n\n这一部分创建将相似生命周期或相似用途的文件分组放在标准化子目录中的目录结构。请自由按照自己的需求来调整这一结构，但请确保你将这一结构在某处进行记录存档。\n\n### 如何标准化…\n\n创建所推荐实例布局，你需要执行如下步骤：\n\n**译者注：**读者也可直接使用 Alan 在 GitHub 上准备的[安装脚本](https://github.com/alanhou/odoo12-cookbook/tree/master/Chapter02)进行操作\n\n1. 为实例创建一个目录：\n\n   ```\n   $ mkdir ~/odoo-dev/projectname$ cd ~/odoo-dev/projectname \n   ```\n\n2. 在名为env/的子目录中创建一个Python虚拟环境：\n\n  ```\n  $ virtualenv -p python3 env \n  ```\n\n3. 创建一些子目录，如下：\n\n  ```\n  $ mkdir src local bin filestore logs \n  ```\n\n   这些子目录的功能如下：\n\n   - src/：这包含Odoo本身的一个拷贝，以及一些第三方插件项目（我们在下一步中添加了Odoo源码）\n   - local/：这用于保存你针对具体实例的插件\n   - bin/：这包含各类帮助可执行shell脚本\n   - filestore/：这用于文件存储\n   - logs/（可选）：这用于存储服务日志文件\n\n4. 克隆Odoo并安装所需依赖包（参见\n\n   第一章 安装Odoo开发环境\n\n   获取更多内容）：\n\n   ```bash\n$ git clone https://github.com/odoo/odoo.git src/odoo\n$ env/bin/pip3 install -r src/odoo/requirements.txt \n   ```\n5. 以bin/odoo保存如下shell脚本：\n\n  ```bash\nROOT=$(dirname $0)/..\nPYTHON=$ROOT/env/bin/python3\nODOO=$ROOT/src/odoo/odoo-bin\n$PYTHON $ODOO -c $ROOT/projectname.cfg \"$@\"\nexit $?\n  ```\n\n6. 让该脚本可执行：\n\n  ```\n$ chmod +x bin/odoo \n  ```\n\n7. 创建一个空的本地模块dummy：\n\n```\n$ mkdir -p local/dummy\n$ touch local/dummy/__init__.py\n$ echo '{\"name\": \"dummy\", \"installable\": False}' >\\local/dummy/__manifest__.py \n```\n\n8. 为你的实例生成配置文件：\n\n\n\n```\n$ bin/odoo --stop-after-init --save \\ --addons-path src/odoo/odoo/addons,src/odoo/addons,local \\ --data-dir filestore \n```\n\n9. 添加一个.gitignore文件，用于告诉GitHub排除这些给定目录，这样Git在提交代码时就会忽略掉这些目录，例如 filestore/, env/, logs/和src/：\n\n```bash\n# dotfiles, with exceptions:\n.*\n!.gitignore\n# python compiled files\n*.py[co]\n# emacs backup files\n*~\n# not tracked subdirectories\n/env/\n/src/\n/filestore/\n/logs/\n```\n\n10. 为这个实例创建一个Git仓库并将已添加的文件添加到Git中：\n\n```bash\n$ git init\n$ git add .\n$ git commit -m \"initial version of projectname\"\n```\n\n### 运行原理…\n\n我们生成了一个有明确标签目录和独立角色的干净的目录结构。我使用了不同的目录来存储如下内容：\n\n- 由其它人所维护的代码（src/中）\n- 本地相关的具体代码\n- 实例的文件存储\n\n通过为每个项目建一个virtualenv环境，我们可以确保该项目的依赖文件不会与其它项目的依赖产生冲突，这些项目你可能运行着不同的Odoo版本或使用了不同的第三方插件模块，这将需要不同版本的Python依赖。这当然也会带来一部分磁盘空间的开销。\n\n以类似的方式，通过为我们不同的项目使用不同的Odoo拷贝以及第三方插件模块，我们可以让每个项目单独的进行推进并仅在需要时在这些实例上安装更新，因此也减少了引入回退的风险。\n\nbin/odoo允许我们不用记住各个路径或激活虚拟环境就可以运行服务。这还为我们设置了配置文件。你可以在其中添加其它脚本来协助你的日常工作。例如，你可以添加一个脚本来检查运行实例所需的第三方项目。\n\n有关配置文件，我们仅展示了这里需要设置的最小化选项，但很明显你可以设置更多，例如数据库名、数据库过滤器或项目所监听的端口。有关这一话题的更多信息，请参见[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)。\n\n最后，通过在Git仓库中管理所有这些，在不同的电脑上复制这一设置及在团队中分享开发内容变得相当容易。\n\n> **小贴士：**加速贴士\n>\n> 要加速项目的创建，你可以创建一个包含空结构的模板仓库，并为每个项目复制（fork）该仓库。这会省却你重新输入bin/odoo脚本、.gitignore及其它所需模板文件（持续集成配置、README.md、ChangeLog等等）所花费的时间。\n\n### 参见内容\n\n如果你喜欢这种方法，我们建议你尝试[第三章 服务器部署](https://alanhou.org/server-deployment/)中的使用 Docker 运行 Odoo 一部分的内容。\n\n### 扩展知识…\n\n复杂模块的开发要求有各类配置选项，在想要尝试任何配置选项时都会要更新配置文件。更新配置常常是一件头痛的事，避免它的一种方式是通过命令行传递所有配置选项，如下：\n\n1. 手动激活虚拟环境：\n\n```bash\n$ source env/bin/activate\n```\n\n2. 进行Odoo源代码目录：\n\n```bash\n$ cd src/odoo\n```\n\n3. 运行服务：\n\n```bash\n./odoo-bin --addons-path=addons,../../local -d test-12 -i account,sale,purchase --log-level=debug\n```\n\n第三步中，我们直接通过命令行传递了一些参数。第一个是–addons-path，它加载Odoo的核心插件目录addons，以及你自己的插件目录local，在其中你可以放自己的插件模块。选项-d会使用test-12数据库或者在该数据库不存在时新建一个数据库。选项-i 会安装会计、销售和采购模块。接着，我们传递了log-level选项来将日志级别提升为debug，这样日志中会显示更多的信息。\n\n> ℹ️通过使用命令行，你可以快速地修改配置选项。你也可以在Terminal中查看实时日志。所有可用选项可参见[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)，或使用-help命令来查看所有的选项列表及各个选项的描述。\n\n## 安装并升级本地插件模块\n\nOdoo 功能的核心来自于它的插件模块。Odoo自带的插件是你所拥有的财富，同时你也可以在应用商店下载一些插件模块或者自己写。\n\n这一部分中，我们将展示如何通过网页界面及命令行来安装并升级插件模块。\n\n对这些操作使用命令行的主要好处包含可以同时作用于一个以上的插件以及在安装或升级的过程中可以清晰地浏览到服务端日志，对于开发模式或编写脚本安装实例时都非常有用。\n\n### 准备工作\n\n确保你有一个运行中的 Odoo 实例，且数据库已初始化、插件路径已进行恰当地设置。在这一部分中，我们将安装/升级一些插件模块。\n\n### 如何安装升级…\n\n安装或升级插件有两种方法-可以使用网页界面或命令行。\n\n#### 通过网页界面\n\n可按照如下步骤来使用网页界面安装新的插件模块到数据库中：\n\n1. 使用管理员账户连接实例并打开Apps菜单\n   [![Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906002399.jpg)](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906002399.jpg)\n2. 使用搜索框来定位你想要安装的插件。这里有一些帮助你完成该任务的操作指南：\n   - 激活Not Installed过滤器\n   - 如果你要查找一个具体的功能插件而不是广泛的功能插件，删除Apps过滤器\n   - 在搜索框中输入模块名的一部分并使用它来作为模块过滤器\n   - 你会发现使用列表视图可以阅读到更多的信息\n3. 点击卡片中模块名下的Install按钮。\n\n注意有些Odoo插件模块需要有外部Python依赖，如果你的系统中未安装该Python依赖，那么 Odoo 会中止安装并显示如下的对话框：\n\n[![Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906125210.jpg)](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906125210.jpg)\n**译者注：**按正常安装不会出现一错误，需通过 pip uninstall pyldap 才能复现这一错误\n\n修复这一问题，仅需在你的系统中安装相关的Python依赖即可。\n\n要升级已安装到数据库的模块，使用如下步骤：\n\n1. 使用管理员账户连接到实例\n2. 打开Apps菜单\n3. 点击Apps:\n   [![Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906203077.jpg)](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906203077.jpg)\n4. 使用搜索框来定位你所安装的插件。有如下的小贴士：\n   - 激活Installed过滤器\n   - 如果你要查找一个具体的功能插件而不是广泛的功能插件，删除Apps过滤器\n   - 在搜索框中输入部分插件模块的名称并按下 Enter 来使用它作为模块过滤器。例如，输入CRM并按下 Enter 来搜索CRM应用\n   - 你会发现使用列表视图可以阅读到更多的信息\n5. 点击卡片右上角的的三个点，然后点击Upgrade选项：\n\n[![Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906265357.jpg)](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906265357.jpg)\n\n激活开发者模式来查看模块的技术名称。如果你不知道如何激活开发者模式，请参见[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)：\n\n[![Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906302261.jpg)](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906302261.jpg)\n\n在激活开发者模式之后，它会以红色显示模块的技术名称。如果你使用的是Odoo社区版，会看到一些带有Upgrade的附加应用。这些是Odoo企业版的应用，要想安装/使用它们，需要购买一个证书。\n\n#### 通过命令行\n\n要在你的数据库中安装新插件，可按照如下步骤：\n\n1. 查找插件的名称。这是包含__manifest__.py文件的目录名，不带前面的路径。\n\n2. 停止实例。如果你在操作生产数据库，请进行备份。\n\n3. 运行如下命令：\n\n   ```bash\n   odoo/odoo-bin -c instance.cfg -d dbname -i addon1,addon2 --stop-after-init\n   ```\n\n\n   译者注：\n\n   请将addon1,addon2替换为你所要安装的插件名\n\n\n\n   > **小贴士：**你可以省略掉-d dbname，因为这在配置文件中进行了设置。\n\n4. 重新启动实例\n\n### 运行原理…\n\n插件模块的安装和升级是两个紧密关联的操作，但有一些重要的区别，在下面两部分中进行了强调：\n\n#### 插件安装\n\n在你安装插件时，Odoo以提供的名称检查它的可用插件列表中未安装插件。它还会检查该插件的依赖，并且如果有依赖的话，它会在安装插件前递归安装这些依赖。\n\n单个模块的安装包含如下步骤：\n\n1. 如果存在，运行插件preinit钩子\n2. 从Python源代码中加载模型定义并在必要时更新数据库结构（参见[第五章 应用模型](https://alanhou.org/application-models/)了解更多信息）\n3. 加载插件的数据文件并在必要时更新数据库内容（参见[第七章 模块数据](https://alanhou.org/odoo12-module-data/)了解更多信息）\n4. 如果实例中启用了演示数据则安装插件演示数据\n5. 如果存在，运行插件postinit钩子\n6. 运行对插件视图定义的验证\n7. 如果启用了演示数据并启用了测试，运行该插件的测试（参见[第十八章 自动化测试用例](https://alanhou.org/automated-test-cases/)了解更多信息）\n8. 在数据库中更新模块状态\n9. 从插件的翻译文件中更新数据库中的翻译（参见[第十二章 国际化](https://alanhou.org/internationalization/)了解更多信息）\n\n> ℹ️preinit和postinit钩子分别使用pre_init_hook和post_init_hook键名在__manifest__.py文件中定义。这些钩子用于在插件模块的安装之前及之后触发Python函数。参见[第四章 创建Odoo插件模块](https://alanhou.org/creating-odoo-add-on-modules/)了解更多有关 init 钩子的知识。\n\n#### 插件升级\n\n升级插件时，Odoo以给定的名称在可用的插件模块列表中检查已安装插件。它还会检查该插件的反向依赖（即依赖于所升级插件的那些插件）。如果存在，则也会对它们进行递归升级。\n\n单个插件模块的升级过程包含如下步骤：\n\n1. 如果有的话，先运行插件模块的预迁移步骤（参见[第七章 模块数据](https://alanhou.org/odoo12-module-data/)了解更多信息）\n2. 从Python源码中加载模型定义并在必要时更新数据库结构（参见[第五章 应用模型](https://alanhou.org/application-models/)了解更多信息）\n3. 加载插件的数据文件并在必要时更新数据库内容（参见[第七章 模块数据](https://alanhou.org/odoo12-module-data/)了解更多信息）\n4. 如果实例中启用了演示数据更新插件演示数据\n5. 如果模块有任何迁移方法的话，先运行插件模块的后置迁移步骤（参见[第七章 模块数据](https://alanhou.org/odoo12-module-data/)了解更多信息）\n6. 运行对插件视图定义的验证\n7. 如果启用了演示数据并启用了测试，运行该插件的测试（参见[第十八章 自动化测试用例](https://alanhou.org/automated-test-cases/)了解更多信息）\n8. 在数据库中更新模块状态\n9. 从插件的翻译文件中更新数据库中的翻译（参见[第十二章 国际化](https://alanhou.org/internationalization/)了解更多信息）\n\n> ℹ️注意更新未安装的插件模块什么也不会做。但是安装已安装的插件模块会重新安装该插件，这会通过一些包含数据的数据文件产生一些预期外的问题，这些文件可能应由用户进行更新而非在常规的模块升级处理时进行更新（参见[第七章 模块数据](https://alanhou.org/odoo12-module-data/)中使用noupdate和forcecreate标记部分的内容）。通过用户界面不存在错误的风险，但通过命令行时则有可能发生。\n\n### 扩展知识…\n\n要当心依赖的处理。假定有一个实例你想要安装sale、sale_stock和sale_specific插件，sale_specific依赖于sale_stock，而sale_stock依赖于sale。要安装这三者，你只需要安装sale_specific，因为它会递归安装sale_stock和sale这两个依赖。要升级这两者，你需要升级sale，因为这样会递归升级其反向依赖，sale_stock和sale_specific。\n\n管理依赖另一个比较搞的地方是在你向已经有一个版本安装了的插件添加依赖的时候。我们继续通过前例来理解这一问题。想像一下你在sale_specific中添加了一个对stock_dropshipping的依赖。更新sale_specific插件不会自动安装新的依赖，也会要求安装sale_specific。在这种情况下，你会收到非常糟糕的错误消息，因为插件的Python代码没有成功的加载，而插件的数据和模型表则存在于数据库中。要解决这一问题，你需要停止该实例并手动安装新的依赖。\n\n## 从GitHub安装插件模块\n\nGitHub是第三方插件的一个很好的来源。很多Odoo合作伙伴使用GitHub来分享他们内部维护的插件，而Odoo社区联盟（OCA）在GitHub上共同维护着几百个插件。在你开始编写自己的插件之前，确保查看是否已有可用的插件或者作为初始以继续扩展插件。\n\n这一部分向你展示如何从GitHub上克隆OCA的partner-contact项目并让其中所包含的插件模块在我们实例中可用。\n\n### 准备工作\n\n假设你想要改变你的实例中地址的处理方式，你的客户需要在Odoo两个字段（街道和街道2）之外的第三个字段来存储地址。你肯定是可以编写自己的插件来为res.partne添加一个字段的，但如果想要让地址在发票上以合适的格式显示，问题就要比看上去麻烦一些了。所幸，你邮件列表上的某个人告诉了你partner_address_street3插件，由OCA作为partner-contact项目的一部分进行维护。\n\n本部分中所使用的路径反映了我们在*标准化你的实例目录布局*一节中所推荐的布局。\n\n### 如何安装…\n\n按照如下步骤来安装partner_address_street3：\n\n1. 进入你的项目目录：\n\n```bash\n$ cd ~/odoo-dev/my-odoo/src\n```\n\n\n\n2. 在src/目录中克隆partner-contact项目的12.0分支：\n\n```bash\n$ git clone --branch 12.0 \\https://github.com/OCA/partner-contact.git src/partner-contact\n```\n\n\n\n3. 修改插件路径来包含该目录并更新你的实例中的插件列表（参见本章中的配置插件路径和更新插件模块列表一节）。instance.cfg中的addons_path一行应该是这样的：\n\n   ```\n   addons_path = ~/odoo-dev/my-odoo/src/odoo/odoo/addons, \\~/odoo-dev/my-odoo/src/odoo/addons, \\~/odoo-dev/my-odoo/src/, \\~/odoo-dev/local-addons\n   ```\n\n4. 安装partner_address_street3插件（如果你不知道如何安装该模块，参见前面一节，安装并升级本地插件模块）\n\n### 运行原理…\n\n所有 Odoo社区联盟的代码仓库都将他们自己的插件放在单独的目录中，这与Odoo对插件路径中目录的预期是相一致的。因此，只需复制某处的仓库并将其添加到插件路径中就够了。\n\n### 扩展知识…\n\n有些维护者遵循不同的方法，每个插件模块一个仓库，放在仓库的根目录下。这种情况下，你需要创建一个新的目录，在这个目录中添加插件路径并克隆你所需的维护者的插件到该目录中。记住在每次添加一个新仓库拷贝时要更新插件模块列表。\n\n## 对插件应用修改\n\nGitHub上可用的大部分插件需要进行修改并且不遵循Odoo对其稳定发行版所强制的规则。它们可能收到漏洞修复或改善，包含你提交的问题或功能请求，这些修改可能会引入数据库模式的修改或数据文件和视图中的更新。这一部分讲解如何安装升级后的版本。\n\n### 准备工作\n\n假定你对partner_address_street3报告了一个问题并收到通知说该问题已在partner-contact项目12.0分支的最近一次修订中得以解决。这种情况下，你可以使用最新版本来更新你的实例。\n\n### 如何修改…\n\n要对GitHub的插件进行源的变更，需执行如下步骤：\n\n1. 停止使用该插件的实例。\n\n2. 如果是生产实例请做一个备份（参见[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)中*管理Odoo服务端数据库*一节）。\n\n3. 进入克隆了partner-contact的目录：\n\n```bash\n$ cd ~/odoo-dev/my-odoo/src/partner-contact\n```\n\n\n\n4. 为该项目创建一个本地标签，这样万一出现了崩溃你可以进行回退：\n\n```bash\n$ git checkout 12.0$ git tag 12.0-before-update-$(date --iso)\n```\n\n\n\n4. 获取源码的最新版本：\n\n```bash\n$ git pull --ff-only\n```\n\n\n\n6. 在你的数据库中更新partner_address_street3插件（参见*安装并升级本地插件模块*一节）\n\n7. 重启实例\n\n### 运行原理…\n\n通常，插件模块的开发者有时会发布插件的最新版本。这一更新一般包含漏洞修复及新功能。这里，我们将获取一个插件的新版本并在我们的实例中更新它。\n\n如果git pull –ff-only失败的话，你可以使用如下命令回退到前一个版本：\n\n```bash\n$  git reset --hard 12.0-before-update-$(date --iso)\n```\n\n\n\n然后，你可以尝试git pull（不添加–ff-only），它会产生一个合并，但这表示你对插件做了本地修改。\n\n### 扩展知识…\n\n如果更新这一步崩溃了，参见[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)*从源码更新Odoo*一节获取恢复的操作指南。记住要总是在一个生产数据库的拷贝上先进行测试。\n\n## 应用及尝试建议的拉取请求\n\n在GitHub的世界中，拉取请求（PR）是由开发者所提交的请求，这样项目维护人员可以添加一些新的开发。比如一个 PR 可能包含漏洞修复或新功能。这里请求在拉取到主分支之前会进行审核和测试。\n\n这一部分讲解如何对你的 Odoo 项目应用一个PR来测试漏洞修复的改进。\n\n### 准备工作\n\n在前一节中，假定你对partner_address_street3 报告了一个问题并收到一条通知在拉取请求中问题已修复，尚未合并到项目的12.0分支中。开发人员要求你验证PR #123中的修复状况。你需要使用这一分支更新一个测试实例。\n\n你不应在生产数据库直接使用该分支，因此先创建一个带有生产数据库拷贝的测试环境（参见[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)和[第三章 服务器部署](https://alanhou.org/server-deployment/)）。\n\n### 如何操作…\n\n应用并测试一个插件的GitHub拉取请求，你需要执行如下步骤：\n\n1. 停止实例\n\n2. 进入partner-contact所被克隆的目录：\n\n```bash\n$ cd ~/odoo-dev/my-odoo/src/partner-contact\n```\n\n\n\n3. 为该项目创建一个本地标签，这样万一出现崩溃时你可以回退：\n\n```bash\n$  git checkout 12.0$ git tag 12.0-before-update-$(date --iso\n```\n\n\n\n4. 拉取pull请求的分支。这么做最容易的方式是使用PR编号，在开发者与你沟通时你应该可以看到。在本例中，这个拉取请求编号是123：\n\n```bash\n$ git pull origin pull/123/head\n```\n\n\n\n5. 在你的数据库中更新partner_address_street3插件模块并重启该实例（如果你不知道如何更新该模块的话请参见*安装并升级本地插件模块*一节）\n\n6. 测试该更新 – 尝试重现问题，或测试你想要的功能。\n\n如果这不能运行，在GitHub的PR页面进行评论，说明你做了什么以及什么不能运行，这样开发者可以更新这个拉取请求。\n\n如果它没有问题，也在PR页面说下；这是PR验证流程中非常重要的一部分；这会加速主分支中的合并。\n\n### 运行原理…\n\n我们在使用一个GitHub功能，使用pull/nnnn/head分支名称来通过编号进行拉取请求的拉取，其中nnnn是PR的编号。Git pull命令合并远程分支到我们的分支，在我们基础代码中应用修改。在这之后，我们更新插件模块、对其测试并向作者报回修改是成功或是失败。\n\n### 扩展知识…\n\n如果你想要同步测试它们，你可以针对相同仓库的不同拉取请求重复本节中的第4步。如果你对结果很满意，你可以创建一个分支来保留对应用了改变的结果的引用：\n\n```bash\n$ git checkout -b 12.0-custom\n```\n\n\n\n使用一个不同的分支会帮助你记住你没有从GitHub使用该版本，而是一个自定义的版本。\n\n> ℹ️git branch命令可用于列出你仓库中的所有本地分支。\n\n从这开始，如果你需要应用来自GitHub中12.0分支的最近一个审核版本，你需要不使用–ff-only来拉取它：\n\n```bash\n$ git pull origin 12.0\n```\n\n\n\n","source":"_posts/Odoo 12开发者指南第二章 管理Odoo服务器实例.md","raw":"---\nlayout: odoo\ntitle: 管理Odoo服务器实例\ndate: 2019-06-18 14:02:38\ntags:\n- python\n- odoo\n---\n\n全书完整目录请见：[Odoo 12开发者指南（Cookbook）第三版](https://alanhou.org/odoo12-cookbook/)\n\n本章中，我们将讲解如下内容：\n\n- 配置插件路径\n- 更新插件模块列表\n- 标准化你的实例目录布局\n- 安装并升级本地插件模块\n- 对插件应用修改\n- 应用及尝试建议的拉取请求\n\n## 引言\n\n在[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)中，我们看了如何使用与编辑器一同发布的标准核心插件来设置 Odoo 实例。本章集中讲解为 Odoo 实例添加非核心插件。Odoo中，你可以从多个目录中加载插件。此外，推荐你将第三方插件（如OCA模块）或你自定义的插件放在一个单独的文件夹中，这样可以避免与 Odoo 核心模块产生冲突。甚至Odoo 企业版也是一种类型的插件目录，你需要像普通插件目录一样加载它。\n\n> ℹ️**有关用词 – 插件(add-on) vs. 模块(module)**\n>\n> 本书中，我们使用插件或插件模块来指代 Odoo 所预期安装的 Python 包。用户界面常使用应用（app）或模块的表达 ，但我们更愿意保留模块一词来表示Python模块或包，它们不一定是 Odoo 插件，而应用（app）来表示适当定义为应用的插件模块，表示它不是Odoo主菜单中的入口。\n\n## 配置插件路径\n\n通过addons_path参数的配置，你可以在 Odoo 中加载自己的插件模块。在Odoo初始化一个新数据库时，它会搜索在addons_path配置参数中给定的这些目录。addons_path会在这些目录中搜索潜在的插件模块。addons_path中所列出的目录预期应包含子目录，每个子目录是一个插件模块。在数据库初始化完成后，你将能够安装这些目录中所给出的模块。\n\n### 准备工作\n\n这一部分假定你已经准备好了实例并生成了配置文件，如在[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)中*在一个文件中存储实例配置*一节所描述。Odoo的源码存放在~/odoo-dev/odoo中，而配置文件存放在~/odoo-dev/myinstance.cfg中。\n\n### 如何配置…\n\n按如下步骤在实例的addons_path中添加~/odoo-dev/local-addons目录：\n\n1. 编辑你的实例的配置文件，即 ~/odoo-dev/my-instance.cfg。\n\n2. 定位到以addons_path =开头一行，默认，你会看到如下内容：\n\n\n```\n  addons_path = ~/odoo-dev/odoo/odoo/addons,~/odoo-dev/odoo/add-ons \n```\n\n\n   译者注：\n\n   当前默认生成的配置文件中为绝对路径，且仅包含xxx/odoo/addons\n\n3. 修改该行，添加一个逗号（英文半角），并接你想想要添加为addons_的目录名称，如以下代码所示：\n\n\n\n  ```\naddons_path = ~/odoo-dev/odoo/odoo/addons,~/odoo-dev/odoo/addons,~/odoo-dev/local-addons \n  ```\n\n4. 重启你的实例\n\n   ```\n   $ ~/odoo-dev/odoo/odoo-bin -c my-instance.cfg \n   ```\n\n### 运行原理…\n\n在重启 Odoo 时，会读取配置文件。addons_path变量的值应为一个逗号分隔的目录列表。可接受相对路径，但它们是相对于当前工作目录的，因此应在配置文件中尽量避免。\n\n至此，~/odoo-dev/local-addons中包含的新插件尚不在该实例的可用模块列表中。为此，你需要执行一个额外的操作，在下一部分*更新插件模块列表*中会进行讲解。\n\n### 扩展知识…\n\n在第一次调用 odoo-bin脚本来初始化新数据库时，你可以传递一个带逗号分隔目录列表的–addons-path命令行参数。这会以所提供插件路径中所找到的所有插件来初始化可用插件模块列表。这么做时，你要显式地包含基础插件目录（odoo/odoo/addons）以及核心插件目录（odoo/addons）。\n\n与前面稍有不同的是本地插件目录不能为空（**译者注：**请先阅读下面的小贴士），它必须要至少包含一个子目录，并包含插件模块的最小化结构。在[第四章 创建Odoo插件模块](https://alanhou.org/creating-odoo-add-on-modules/)中，我们会来看如何编写你自己的模块。同时，这里有一个生成内容来满足Odoo要求的快捷版黑科技：\n\n\n\n```\n$ mkdir -p ~/odoo-dev/local-addons/dummy$ touch ~/odoo-dev/local-addons/dummy/__init__.py$ echo '{\"name\": \"dummy\", \"installable\": False}' > \\~/odoo-dev/local-addons/dummy/__manifest__.py \n```\n\n你可以使用–save选项来保存配置文件的路径：\n\n\n\n```\n$ odoo/odoo-bin -d mydatabase \\--add-ons-path=\"odoo/odoo/addons,odoo/addons,~/odoo-dev/local-addons\" \\--save -c ~/odoo-dev/my-instance.cfg --stop-after-init \n```\n\n本例中，使用相对路径不会有问题，因为它们会在配置文件中转化为绝对路径。\n\n> **小贴士：**因为Odoo仅当从命令行中设置路径时在插件路径的目录中查看插件，而不是在从配置文件中加载路径的时候，dummy已不再必要。因此，你可以删除它（或保留到你确定不需要新建一个配置文件时）。\n\n## 更新插件模块列表\n\n我们在前面的部分已经说到，在向插件路径添加目录时，仅仅重启Odoo服务是不足以安装其中一个新插件模块的。Odoo还需要有一个指定动作来扫描路径并更新可用插件模块的列表。\n\n### 准备工作\n\n启动你的实例并使用管理员账号连接它。然后，激活开发者模式（如果你不知道如何激活开发者模式，请参见[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)）。\n\n### 如何更新…\n\n要更新你实例中的可用插件模块列表，你需要执行如下步骤：\n\n1. 打开Apps菜单\n2. 点击Update Apps List：\n   [![Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902052063.jpg)](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902052063.jpg)\n3. 在弹出对话框中，点击Update按钮：\n   [![Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902070776.jpg)](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902070776.jpg)\n4. 在更新的最后，你可以点击Apps入口来查看已更新的可用插件模块列表。你将需要删除Apps搜索框中的默认过滤器来查看所有模块。\n\n### 运行原理…\n\n在点击了Update按钮之后，Odoo会读取插件路径配置变量。对于列表中的每一个目录，它会查看包含保存在插件模块目录中名为__manifest__.py的插件声明文件的直接子目录。Odoo读取声明内容，并预期查找其中的Python字典。除非声明内容中包含一个键installable的值为False，插件模块的元数据就会存储在数据库中。如果模块已存在，则更新相关信息。否则，会创建一条新记录。如果此前可用的插件模块未找到，则从列表中删除该记录。\n\n> ℹ️仅在初始化数据库后添加了新的插件路径时才需要更新应用列表。如果你在初始化数据库之前在配置文件中添加了新插件路径，那么就无需手动更新模块列表。\n\n## 标准化你的实例目录布局\n\n我们推荐你在开发和生产环境都使用相似的目录布局。这一标准化会在你要执行运维时体现出用处，它也会缓解你日常工作的压力。\n\n这一部分创建将相似生命周期或相似用途的文件分组放在标准化子目录中的目录结构。请自由按照自己的需求来调整这一结构，但请确保你将这一结构在某处进行记录存档。\n\n### 如何标准化…\n\n创建所推荐实例布局，你需要执行如下步骤：\n\n**译者注：**读者也可直接使用 Alan 在 GitHub 上准备的[安装脚本](https://github.com/alanhou/odoo12-cookbook/tree/master/Chapter02)进行操作\n\n1. 为实例创建一个目录：\n\n   ```\n   $ mkdir ~/odoo-dev/projectname$ cd ~/odoo-dev/projectname \n   ```\n\n2. 在名为env/的子目录中创建一个Python虚拟环境：\n\n  ```\n  $ virtualenv -p python3 env \n  ```\n\n3. 创建一些子目录，如下：\n\n  ```\n  $ mkdir src local bin filestore logs \n  ```\n\n   这些子目录的功能如下：\n\n   - src/：这包含Odoo本身的一个拷贝，以及一些第三方插件项目（我们在下一步中添加了Odoo源码）\n   - local/：这用于保存你针对具体实例的插件\n   - bin/：这包含各类帮助可执行shell脚本\n   - filestore/：这用于文件存储\n   - logs/（可选）：这用于存储服务日志文件\n\n4. 克隆Odoo并安装所需依赖包（参见\n\n   第一章 安装Odoo开发环境\n\n   获取更多内容）：\n\n   ```bash\n$ git clone https://github.com/odoo/odoo.git src/odoo\n$ env/bin/pip3 install -r src/odoo/requirements.txt \n   ```\n5. 以bin/odoo保存如下shell脚本：\n\n  ```bash\nROOT=$(dirname $0)/..\nPYTHON=$ROOT/env/bin/python3\nODOO=$ROOT/src/odoo/odoo-bin\n$PYTHON $ODOO -c $ROOT/projectname.cfg \"$@\"\nexit $?\n  ```\n\n6. 让该脚本可执行：\n\n  ```\n$ chmod +x bin/odoo \n  ```\n\n7. 创建一个空的本地模块dummy：\n\n```\n$ mkdir -p local/dummy\n$ touch local/dummy/__init__.py\n$ echo '{\"name\": \"dummy\", \"installable\": False}' >\\local/dummy/__manifest__.py \n```\n\n8. 为你的实例生成配置文件：\n\n\n\n```\n$ bin/odoo --stop-after-init --save \\ --addons-path src/odoo/odoo/addons,src/odoo/addons,local \\ --data-dir filestore \n```\n\n9. 添加一个.gitignore文件，用于告诉GitHub排除这些给定目录，这样Git在提交代码时就会忽略掉这些目录，例如 filestore/, env/, logs/和src/：\n\n```bash\n# dotfiles, with exceptions:\n.*\n!.gitignore\n# python compiled files\n*.py[co]\n# emacs backup files\n*~\n# not tracked subdirectories\n/env/\n/src/\n/filestore/\n/logs/\n```\n\n10. 为这个实例创建一个Git仓库并将已添加的文件添加到Git中：\n\n```bash\n$ git init\n$ git add .\n$ git commit -m \"initial version of projectname\"\n```\n\n### 运行原理…\n\n我们生成了一个有明确标签目录和独立角色的干净的目录结构。我使用了不同的目录来存储如下内容：\n\n- 由其它人所维护的代码（src/中）\n- 本地相关的具体代码\n- 实例的文件存储\n\n通过为每个项目建一个virtualenv环境，我们可以确保该项目的依赖文件不会与其它项目的依赖产生冲突，这些项目你可能运行着不同的Odoo版本或使用了不同的第三方插件模块，这将需要不同版本的Python依赖。这当然也会带来一部分磁盘空间的开销。\n\n以类似的方式，通过为我们不同的项目使用不同的Odoo拷贝以及第三方插件模块，我们可以让每个项目单独的进行推进并仅在需要时在这些实例上安装更新，因此也减少了引入回退的风险。\n\nbin/odoo允许我们不用记住各个路径或激活虚拟环境就可以运行服务。这还为我们设置了配置文件。你可以在其中添加其它脚本来协助你的日常工作。例如，你可以添加一个脚本来检查运行实例所需的第三方项目。\n\n有关配置文件，我们仅展示了这里需要设置的最小化选项，但很明显你可以设置更多，例如数据库名、数据库过滤器或项目所监听的端口。有关这一话题的更多信息，请参见[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)。\n\n最后，通过在Git仓库中管理所有这些，在不同的电脑上复制这一设置及在团队中分享开发内容变得相当容易。\n\n> **小贴士：**加速贴士\n>\n> 要加速项目的创建，你可以创建一个包含空结构的模板仓库，并为每个项目复制（fork）该仓库。这会省却你重新输入bin/odoo脚本、.gitignore及其它所需模板文件（持续集成配置、README.md、ChangeLog等等）所花费的时间。\n\n### 参见内容\n\n如果你喜欢这种方法，我们建议你尝试[第三章 服务器部署](https://alanhou.org/server-deployment/)中的使用 Docker 运行 Odoo 一部分的内容。\n\n### 扩展知识…\n\n复杂模块的开发要求有各类配置选项，在想要尝试任何配置选项时都会要更新配置文件。更新配置常常是一件头痛的事，避免它的一种方式是通过命令行传递所有配置选项，如下：\n\n1. 手动激活虚拟环境：\n\n```bash\n$ source env/bin/activate\n```\n\n2. 进行Odoo源代码目录：\n\n```bash\n$ cd src/odoo\n```\n\n3. 运行服务：\n\n```bash\n./odoo-bin --addons-path=addons,../../local -d test-12 -i account,sale,purchase --log-level=debug\n```\n\n第三步中，我们直接通过命令行传递了一些参数。第一个是–addons-path，它加载Odoo的核心插件目录addons，以及你自己的插件目录local，在其中你可以放自己的插件模块。选项-d会使用test-12数据库或者在该数据库不存在时新建一个数据库。选项-i 会安装会计、销售和采购模块。接着，我们传递了log-level选项来将日志级别提升为debug，这样日志中会显示更多的信息。\n\n> ℹ️通过使用命令行，你可以快速地修改配置选项。你也可以在Terminal中查看实时日志。所有可用选项可参见[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)，或使用-help命令来查看所有的选项列表及各个选项的描述。\n\n## 安装并升级本地插件模块\n\nOdoo 功能的核心来自于它的插件模块。Odoo自带的插件是你所拥有的财富，同时你也可以在应用商店下载一些插件模块或者自己写。\n\n这一部分中，我们将展示如何通过网页界面及命令行来安装并升级插件模块。\n\n对这些操作使用命令行的主要好处包含可以同时作用于一个以上的插件以及在安装或升级的过程中可以清晰地浏览到服务端日志，对于开发模式或编写脚本安装实例时都非常有用。\n\n### 准备工作\n\n确保你有一个运行中的 Odoo 实例，且数据库已初始化、插件路径已进行恰当地设置。在这一部分中，我们将安装/升级一些插件模块。\n\n### 如何安装升级…\n\n安装或升级插件有两种方法-可以使用网页界面或命令行。\n\n#### 通过网页界面\n\n可按照如下步骤来使用网页界面安装新的插件模块到数据库中：\n\n1. 使用管理员账户连接实例并打开Apps菜单\n   [![Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906002399.jpg)](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906002399.jpg)\n2. 使用搜索框来定位你想要安装的插件。这里有一些帮助你完成该任务的操作指南：\n   - 激活Not Installed过滤器\n   - 如果你要查找一个具体的功能插件而不是广泛的功能插件，删除Apps过滤器\n   - 在搜索框中输入模块名的一部分并使用它来作为模块过滤器\n   - 你会发现使用列表视图可以阅读到更多的信息\n3. 点击卡片中模块名下的Install按钮。\n\n注意有些Odoo插件模块需要有外部Python依赖，如果你的系统中未安装该Python依赖，那么 Odoo 会中止安装并显示如下的对话框：\n\n[![Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906125210.jpg)](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906125210.jpg)\n**译者注：**按正常安装不会出现一错误，需通过 pip uninstall pyldap 才能复现这一错误\n\n修复这一问题，仅需在你的系统中安装相关的Python依赖即可。\n\n要升级已安装到数据库的模块，使用如下步骤：\n\n1. 使用管理员账户连接到实例\n2. 打开Apps菜单\n3. 点击Apps:\n   [![Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906203077.jpg)](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906203077.jpg)\n4. 使用搜索框来定位你所安装的插件。有如下的小贴士：\n   - 激活Installed过滤器\n   - 如果你要查找一个具体的功能插件而不是广泛的功能插件，删除Apps过滤器\n   - 在搜索框中输入部分插件模块的名称并按下 Enter 来使用它作为模块过滤器。例如，输入CRM并按下 Enter 来搜索CRM应用\n   - 你会发现使用列表视图可以阅读到更多的信息\n5. 点击卡片右上角的的三个点，然后点击Upgrade选项：\n\n[![Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906265357.jpg)](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906265357.jpg)\n\n激活开发者模式来查看模块的技术名称。如果你不知道如何激活开发者模式，请参见[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)：\n\n[![Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906302261.jpg)](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906302261.jpg)\n\n在激活开发者模式之后，它会以红色显示模块的技术名称。如果你使用的是Odoo社区版，会看到一些带有Upgrade的附加应用。这些是Odoo企业版的应用，要想安装/使用它们，需要购买一个证书。\n\n#### 通过命令行\n\n要在你的数据库中安装新插件，可按照如下步骤：\n\n1. 查找插件的名称。这是包含__manifest__.py文件的目录名，不带前面的路径。\n\n2. 停止实例。如果你在操作生产数据库，请进行备份。\n\n3. 运行如下命令：\n\n   ```bash\n   odoo/odoo-bin -c instance.cfg -d dbname -i addon1,addon2 --stop-after-init\n   ```\n\n\n   译者注：\n\n   请将addon1,addon2替换为你所要安装的插件名\n\n\n\n   > **小贴士：**你可以省略掉-d dbname，因为这在配置文件中进行了设置。\n\n4. 重新启动实例\n\n### 运行原理…\n\n插件模块的安装和升级是两个紧密关联的操作，但有一些重要的区别，在下面两部分中进行了强调：\n\n#### 插件安装\n\n在你安装插件时，Odoo以提供的名称检查它的可用插件列表中未安装插件。它还会检查该插件的依赖，并且如果有依赖的话，它会在安装插件前递归安装这些依赖。\n\n单个模块的安装包含如下步骤：\n\n1. 如果存在，运行插件preinit钩子\n2. 从Python源代码中加载模型定义并在必要时更新数据库结构（参见[第五章 应用模型](https://alanhou.org/application-models/)了解更多信息）\n3. 加载插件的数据文件并在必要时更新数据库内容（参见[第七章 模块数据](https://alanhou.org/odoo12-module-data/)了解更多信息）\n4. 如果实例中启用了演示数据则安装插件演示数据\n5. 如果存在，运行插件postinit钩子\n6. 运行对插件视图定义的验证\n7. 如果启用了演示数据并启用了测试，运行该插件的测试（参见[第十八章 自动化测试用例](https://alanhou.org/automated-test-cases/)了解更多信息）\n8. 在数据库中更新模块状态\n9. 从插件的翻译文件中更新数据库中的翻译（参见[第十二章 国际化](https://alanhou.org/internationalization/)了解更多信息）\n\n> ℹ️preinit和postinit钩子分别使用pre_init_hook和post_init_hook键名在__manifest__.py文件中定义。这些钩子用于在插件模块的安装之前及之后触发Python函数。参见[第四章 创建Odoo插件模块](https://alanhou.org/creating-odoo-add-on-modules/)了解更多有关 init 钩子的知识。\n\n#### 插件升级\n\n升级插件时，Odoo以给定的名称在可用的插件模块列表中检查已安装插件。它还会检查该插件的反向依赖（即依赖于所升级插件的那些插件）。如果存在，则也会对它们进行递归升级。\n\n单个插件模块的升级过程包含如下步骤：\n\n1. 如果有的话，先运行插件模块的预迁移步骤（参见[第七章 模块数据](https://alanhou.org/odoo12-module-data/)了解更多信息）\n2. 从Python源码中加载模型定义并在必要时更新数据库结构（参见[第五章 应用模型](https://alanhou.org/application-models/)了解更多信息）\n3. 加载插件的数据文件并在必要时更新数据库内容（参见[第七章 模块数据](https://alanhou.org/odoo12-module-data/)了解更多信息）\n4. 如果实例中启用了演示数据更新插件演示数据\n5. 如果模块有任何迁移方法的话，先运行插件模块的后置迁移步骤（参见[第七章 模块数据](https://alanhou.org/odoo12-module-data/)了解更多信息）\n6. 运行对插件视图定义的验证\n7. 如果启用了演示数据并启用了测试，运行该插件的测试（参见[第十八章 自动化测试用例](https://alanhou.org/automated-test-cases/)了解更多信息）\n8. 在数据库中更新模块状态\n9. 从插件的翻译文件中更新数据库中的翻译（参见[第十二章 国际化](https://alanhou.org/internationalization/)了解更多信息）\n\n> ℹ️注意更新未安装的插件模块什么也不会做。但是安装已安装的插件模块会重新安装该插件，这会通过一些包含数据的数据文件产生一些预期外的问题，这些文件可能应由用户进行更新而非在常规的模块升级处理时进行更新（参见[第七章 模块数据](https://alanhou.org/odoo12-module-data/)中使用noupdate和forcecreate标记部分的内容）。通过用户界面不存在错误的风险，但通过命令行时则有可能发生。\n\n### 扩展知识…\n\n要当心依赖的处理。假定有一个实例你想要安装sale、sale_stock和sale_specific插件，sale_specific依赖于sale_stock，而sale_stock依赖于sale。要安装这三者，你只需要安装sale_specific，因为它会递归安装sale_stock和sale这两个依赖。要升级这两者，你需要升级sale，因为这样会递归升级其反向依赖，sale_stock和sale_specific。\n\n管理依赖另一个比较搞的地方是在你向已经有一个版本安装了的插件添加依赖的时候。我们继续通过前例来理解这一问题。想像一下你在sale_specific中添加了一个对stock_dropshipping的依赖。更新sale_specific插件不会自动安装新的依赖，也会要求安装sale_specific。在这种情况下，你会收到非常糟糕的错误消息，因为插件的Python代码没有成功的加载，而插件的数据和模型表则存在于数据库中。要解决这一问题，你需要停止该实例并手动安装新的依赖。\n\n## 从GitHub安装插件模块\n\nGitHub是第三方插件的一个很好的来源。很多Odoo合作伙伴使用GitHub来分享他们内部维护的插件，而Odoo社区联盟（OCA）在GitHub上共同维护着几百个插件。在你开始编写自己的插件之前，确保查看是否已有可用的插件或者作为初始以继续扩展插件。\n\n这一部分向你展示如何从GitHub上克隆OCA的partner-contact项目并让其中所包含的插件模块在我们实例中可用。\n\n### 准备工作\n\n假设你想要改变你的实例中地址的处理方式，你的客户需要在Odoo两个字段（街道和街道2）之外的第三个字段来存储地址。你肯定是可以编写自己的插件来为res.partne添加一个字段的，但如果想要让地址在发票上以合适的格式显示，问题就要比看上去麻烦一些了。所幸，你邮件列表上的某个人告诉了你partner_address_street3插件，由OCA作为partner-contact项目的一部分进行维护。\n\n本部分中所使用的路径反映了我们在*标准化你的实例目录布局*一节中所推荐的布局。\n\n### 如何安装…\n\n按照如下步骤来安装partner_address_street3：\n\n1. 进入你的项目目录：\n\n```bash\n$ cd ~/odoo-dev/my-odoo/src\n```\n\n\n\n2. 在src/目录中克隆partner-contact项目的12.0分支：\n\n```bash\n$ git clone --branch 12.0 \\https://github.com/OCA/partner-contact.git src/partner-contact\n```\n\n\n\n3. 修改插件路径来包含该目录并更新你的实例中的插件列表（参见本章中的配置插件路径和更新插件模块列表一节）。instance.cfg中的addons_path一行应该是这样的：\n\n   ```\n   addons_path = ~/odoo-dev/my-odoo/src/odoo/odoo/addons, \\~/odoo-dev/my-odoo/src/odoo/addons, \\~/odoo-dev/my-odoo/src/, \\~/odoo-dev/local-addons\n   ```\n\n4. 安装partner_address_street3插件（如果你不知道如何安装该模块，参见前面一节，安装并升级本地插件模块）\n\n### 运行原理…\n\n所有 Odoo社区联盟的代码仓库都将他们自己的插件放在单独的目录中，这与Odoo对插件路径中目录的预期是相一致的。因此，只需复制某处的仓库并将其添加到插件路径中就够了。\n\n### 扩展知识…\n\n有些维护者遵循不同的方法，每个插件模块一个仓库，放在仓库的根目录下。这种情况下，你需要创建一个新的目录，在这个目录中添加插件路径并克隆你所需的维护者的插件到该目录中。记住在每次添加一个新仓库拷贝时要更新插件模块列表。\n\n## 对插件应用修改\n\nGitHub上可用的大部分插件需要进行修改并且不遵循Odoo对其稳定发行版所强制的规则。它们可能收到漏洞修复或改善，包含你提交的问题或功能请求，这些修改可能会引入数据库模式的修改或数据文件和视图中的更新。这一部分讲解如何安装升级后的版本。\n\n### 准备工作\n\n假定你对partner_address_street3报告了一个问题并收到通知说该问题已在partner-contact项目12.0分支的最近一次修订中得以解决。这种情况下，你可以使用最新版本来更新你的实例。\n\n### 如何修改…\n\n要对GitHub的插件进行源的变更，需执行如下步骤：\n\n1. 停止使用该插件的实例。\n\n2. 如果是生产实例请做一个备份（参见[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)中*管理Odoo服务端数据库*一节）。\n\n3. 进入克隆了partner-contact的目录：\n\n```bash\n$ cd ~/odoo-dev/my-odoo/src/partner-contact\n```\n\n\n\n4. 为该项目创建一个本地标签，这样万一出现了崩溃你可以进行回退：\n\n```bash\n$ git checkout 12.0$ git tag 12.0-before-update-$(date --iso)\n```\n\n\n\n4. 获取源码的最新版本：\n\n```bash\n$ git pull --ff-only\n```\n\n\n\n6. 在你的数据库中更新partner_address_street3插件（参见*安装并升级本地插件模块*一节）\n\n7. 重启实例\n\n### 运行原理…\n\n通常，插件模块的开发者有时会发布插件的最新版本。这一更新一般包含漏洞修复及新功能。这里，我们将获取一个插件的新版本并在我们的实例中更新它。\n\n如果git pull –ff-only失败的话，你可以使用如下命令回退到前一个版本：\n\n```bash\n$  git reset --hard 12.0-before-update-$(date --iso)\n```\n\n\n\n然后，你可以尝试git pull（不添加–ff-only），它会产生一个合并，但这表示你对插件做了本地修改。\n\n### 扩展知识…\n\n如果更新这一步崩溃了，参见[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)*从源码更新Odoo*一节获取恢复的操作指南。记住要总是在一个生产数据库的拷贝上先进行测试。\n\n## 应用及尝试建议的拉取请求\n\n在GitHub的世界中，拉取请求（PR）是由开发者所提交的请求，这样项目维护人员可以添加一些新的开发。比如一个 PR 可能包含漏洞修复或新功能。这里请求在拉取到主分支之前会进行审核和测试。\n\n这一部分讲解如何对你的 Odoo 项目应用一个PR来测试漏洞修复的改进。\n\n### 准备工作\n\n在前一节中，假定你对partner_address_street3 报告了一个问题并收到一条通知在拉取请求中问题已修复，尚未合并到项目的12.0分支中。开发人员要求你验证PR #123中的修复状况。你需要使用这一分支更新一个测试实例。\n\n你不应在生产数据库直接使用该分支，因此先创建一个带有生产数据库拷贝的测试环境（参见[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)和[第三章 服务器部署](https://alanhou.org/server-deployment/)）。\n\n### 如何操作…\n\n应用并测试一个插件的GitHub拉取请求，你需要执行如下步骤：\n\n1. 停止实例\n\n2. 进入partner-contact所被克隆的目录：\n\n```bash\n$ cd ~/odoo-dev/my-odoo/src/partner-contact\n```\n\n\n\n3. 为该项目创建一个本地标签，这样万一出现崩溃时你可以回退：\n\n```bash\n$  git checkout 12.0$ git tag 12.0-before-update-$(date --iso\n```\n\n\n\n4. 拉取pull请求的分支。这么做最容易的方式是使用PR编号，在开发者与你沟通时你应该可以看到。在本例中，这个拉取请求编号是123：\n\n```bash\n$ git pull origin pull/123/head\n```\n\n\n\n5. 在你的数据库中更新partner_address_street3插件模块并重启该实例（如果你不知道如何更新该模块的话请参见*安装并升级本地插件模块*一节）\n\n6. 测试该更新 – 尝试重现问题，或测试你想要的功能。\n\n如果这不能运行，在GitHub的PR页面进行评论，说明你做了什么以及什么不能运行，这样开发者可以更新这个拉取请求。\n\n如果它没有问题，也在PR页面说下；这是PR验证流程中非常重要的一部分；这会加速主分支中的合并。\n\n### 运行原理…\n\n我们在使用一个GitHub功能，使用pull/nnnn/head分支名称来通过编号进行拉取请求的拉取，其中nnnn是PR的编号。Git pull命令合并远程分支到我们的分支，在我们基础代码中应用修改。在这之后，我们更新插件模块、对其测试并向作者报回修改是成功或是失败。\n\n### 扩展知识…\n\n如果你想要同步测试它们，你可以针对相同仓库的不同拉取请求重复本节中的第4步。如果你对结果很满意，你可以创建一个分支来保留对应用了改变的结果的引用：\n\n```bash\n$ git checkout -b 12.0-custom\n```\n\n\n\n使用一个不同的分支会帮助你记住你没有从GitHub使用该版本，而是一个自定义的版本。\n\n> ℹ️git branch命令可用于列出你仓库中的所有本地分支。\n\n从这开始，如果你需要应用来自GitHub中12.0分支的最近一个审核版本，你需要不使用–ff-only来拉取它：\n\n```bash\n$ git pull origin 12.0\n```\n\n\n\n","slug":"Odoo 12开发者指南第二章 管理Odoo服务器实例","published":1,"updated":"2019-10-14T09:01:07.986Z","comments":1,"photos":[],"link":"","_id":"ck2a7a4460044ic1yabyccom5","content":"<p>全书完整目录请见：<a href=\"https://alanhou.org/odoo12-cookbook/\" target=\"_blank\" rel=\"noopener\">Odoo 12开发者指南（Cookbook）第三版</a></p>\n<p>本章中，我们将讲解如下内容：</p>\n<ul>\n<li>配置插件路径</li>\n<li>更新插件模块列表</li>\n<li>标准化你的实例目录布局</li>\n<li>安装并升级本地插件模块</li>\n<li>对插件应用修改</li>\n<li>应用及尝试建议的拉取请求</li>\n</ul>\n<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>在<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>中，我们看了如何使用与编辑器一同发布的标准核心插件来设置 Odoo 实例。本章集中讲解为 Odoo 实例添加非核心插件。Odoo中，你可以从多个目录中加载插件。此外，推荐你将第三方插件（如OCA模块）或你自定义的插件放在一个单独的文件夹中，这样可以避免与 Odoo 核心模块产生冲突。甚至Odoo 企业版也是一种类型的插件目录，你需要像普通插件目录一样加载它。</p>\n<blockquote>\n<p>ℹ️<strong>有关用词 – 插件(add-on) vs. 模块(module)</strong></p>\n<p>本书中，我们使用插件或插件模块来指代 Odoo 所预期安装的 Python 包。用户界面常使用应用（app）或模块的表达 ，但我们更愿意保留模块一词来表示Python模块或包，它们不一定是 Odoo 插件，而应用（app）来表示适当定义为应用的插件模块，表示它不是Odoo主菜单中的入口。</p>\n</blockquote>\n<h2 id=\"配置插件路径\"><a href=\"#配置插件路径\" class=\"headerlink\" title=\"配置插件路径\"></a>配置插件路径</h2><p>通过addons_path参数的配置，你可以在 Odoo 中加载自己的插件模块。在Odoo初始化一个新数据库时，它会搜索在addons_path配置参数中给定的这些目录。addons_path会在这些目录中搜索潜在的插件模块。addons_path中所列出的目录预期应包含子目录，每个子目录是一个插件模块。在数据库初始化完成后，你将能够安装这些目录中所给出的模块。</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>这一部分假定你已经准备好了实例并生成了配置文件，如在<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>中<em>在一个文件中存储实例配置</em>一节所描述。Odoo的源码存放在~/odoo-dev/odoo中，而配置文件存放在~/odoo-dev/myinstance.cfg中。</p>\n<h3 id=\"如何配置…\"><a href=\"#如何配置…\" class=\"headerlink\" title=\"如何配置…\"></a>如何配置…</h3><p>按如下步骤在实例的addons_path中添加~/odoo-dev/local-addons目录：</p>\n<ol>\n<li><p>编辑你的实例的配置文件，即 ~/odoo-dev/my-instance.cfg。</p>\n</li>\n<li><p>定位到以addons_path =开头一行，默认，你会看到如下内容：</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addons_path = ~/odoo-dev/odoo/odoo/addons,~/odoo-dev/odoo/add-ons</span><br></pre></td></tr></table></figure>\n<p>   译者注：</p>\n<p>   当前默认生成的配置文件中为绝对路径，且仅包含xxx/odoo/addons</p>\n<ol start=\"3\">\n<li>修改该行，添加一个逗号（英文半角），并接你想想要添加为addons_的目录名称，如以下代码所示：</li>\n</ol>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addons_path = ~/odoo-dev/odoo/odoo/addons,~/odoo-dev/odoo/addons,~/odoo-dev/local-addons</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><p>重启你的实例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ~/odoo-dev/odoo/odoo-bin -c my-instance.cfg</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"运行原理…\"><a href=\"#运行原理…\" class=\"headerlink\" title=\"运行原理…\"></a>运行原理…</h3><p>在重启 Odoo 时，会读取配置文件。addons_path变量的值应为一个逗号分隔的目录列表。可接受相对路径，但它们是相对于当前工作目录的，因此应在配置文件中尽量避免。</p>\n<p>至此，~/odoo-dev/local-addons中包含的新插件尚不在该实例的可用模块列表中。为此，你需要执行一个额外的操作，在下一部分<em>更新插件模块列表</em>中会进行讲解。</p>\n<h3 id=\"扩展知识…\"><a href=\"#扩展知识…\" class=\"headerlink\" title=\"扩展知识…\"></a>扩展知识…</h3><p>在第一次调用 odoo-bin脚本来初始化新数据库时，你可以传递一个带逗号分隔目录列表的–addons-path命令行参数。这会以所提供插件路径中所找到的所有插件来初始化可用插件模块列表。这么做时，你要显式地包含基础插件目录（odoo/odoo/addons）以及核心插件目录（odoo/addons）。</p>\n<p>与前面稍有不同的是本地插件目录不能为空（<strong>译者注：</strong>请先阅读下面的小贴士），它必须要至少包含一个子目录，并包含插件模块的最小化结构。在<a href=\"https://alanhou.org/creating-odoo-add-on-modules/\" target=\"_blank\" rel=\"noopener\">第四章 创建Odoo插件模块</a>中，我们会来看如何编写你自己的模块。同时，这里有一个生成内容来满足Odoo要求的快捷版黑科技：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p ~/odoo-dev/local-addons/dummy$ touch ~/odoo-dev/local-addons/dummy/__init__.py$ echo &apos;&#123;&quot;name&quot;: &quot;dummy&quot;, &quot;installable&quot;: False&#125;&apos; &gt; \\~/odoo-dev/local-addons/dummy/__manifest__.py</span><br></pre></td></tr></table></figure>\n<p>你可以使用–save选项来保存配置文件的路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ odoo/odoo-bin -d mydatabase \\--add-ons-path=&quot;odoo/odoo/addons,odoo/addons,~/odoo-dev/local-addons&quot; \\--save -c ~/odoo-dev/my-instance.cfg --stop-after-init</span><br></pre></td></tr></table></figure>\n<p>本例中，使用相对路径不会有问题，因为它们会在配置文件中转化为绝对路径。</p>\n<blockquote>\n<p><strong>小贴士：</strong>因为Odoo仅当从命令行中设置路径时在插件路径的目录中查看插件，而不是在从配置文件中加载路径的时候，dummy已不再必要。因此，你可以删除它（或保留到你确定不需要新建一个配置文件时）。</p>\n</blockquote>\n<h2 id=\"更新插件模块列表\"><a href=\"#更新插件模块列表\" class=\"headerlink\" title=\"更新插件模块列表\"></a>更新插件模块列表</h2><p>我们在前面的部分已经说到，在向插件路径添加目录时，仅仅重启Odoo服务是不足以安装其中一个新插件模块的。Odoo还需要有一个指定动作来扫描路径并更新可用插件模块的列表。</p>\n<h3 id=\"准备工作-1\"><a href=\"#准备工作-1\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>启动你的实例并使用管理员账号连接它。然后，激活开发者模式（如果你不知道如何激活开发者模式，请参见<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>）。</p>\n<h3 id=\"如何更新…\"><a href=\"#如何更新…\" class=\"headerlink\" title=\"如何更新…\"></a>如何更新…</h3><p>要更新你实例中的可用插件模块列表，你需要执行如下步骤：</p>\n<ol>\n<li>打开Apps菜单</li>\n<li>点击Update Apps List：<br>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902052063.jpg\" alt=\"Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902052063.jpg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902052063.jpg)</div>\n            </figure></li>\n<li>在弹出对话框中，点击Update按钮：<br>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902070776.jpg\" alt=\"Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902070776.jpg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902070776.jpg)</div>\n            </figure></li>\n<li>在更新的最后，你可以点击Apps入口来查看已更新的可用插件模块列表。你将需要删除Apps搜索框中的默认过滤器来查看所有模块。</li>\n</ol>\n<h3 id=\"运行原理…-1\"><a href=\"#运行原理…-1\" class=\"headerlink\" title=\"运行原理…\"></a>运行原理…</h3><p>在点击了Update按钮之后，Odoo会读取插件路径配置变量。对于列表中的每一个目录，它会查看包含保存在插件模块目录中名为<strong>manifest</strong>.py的插件声明文件的直接子目录。Odoo读取声明内容，并预期查找其中的Python字典。除非声明内容中包含一个键installable的值为False，插件模块的元数据就会存储在数据库中。如果模块已存在，则更新相关信息。否则，会创建一条新记录。如果此前可用的插件模块未找到，则从列表中删除该记录。</p>\n<blockquote>\n<p>ℹ️仅在初始化数据库后添加了新的插件路径时才需要更新应用列表。如果你在初始化数据库之前在配置文件中添加了新插件路径，那么就无需手动更新模块列表。</p>\n</blockquote>\n<h2 id=\"标准化你的实例目录布局\"><a href=\"#标准化你的实例目录布局\" class=\"headerlink\" title=\"标准化你的实例目录布局\"></a>标准化你的实例目录布局</h2><p>我们推荐你在开发和生产环境都使用相似的目录布局。这一标准化会在你要执行运维时体现出用处，它也会缓解你日常工作的压力。</p>\n<p>这一部分创建将相似生命周期或相似用途的文件分组放在标准化子目录中的目录结构。请自由按照自己的需求来调整这一结构，但请确保你将这一结构在某处进行记录存档。</p>\n<h3 id=\"如何标准化…\"><a href=\"#如何标准化…\" class=\"headerlink\" title=\"如何标准化…\"></a>如何标准化…</h3><p>创建所推荐实例布局，你需要执行如下步骤：</p>\n<p><strong>译者注：</strong>读者也可直接使用 Alan 在 GitHub 上准备的<a href=\"https://github.com/alanhou/odoo12-cookbook/tree/master/Chapter02\" target=\"_blank\" rel=\"noopener\">安装脚本</a>进行操作</p>\n<ol>\n<li><p>为实例创建一个目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir ~/odoo-dev/projectname$ cd ~/odoo-dev/projectname</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在名为env/的子目录中创建一个Python虚拟环境：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ virtualenv -p python3 env</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一些子目录，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir src local bin filestore logs</span><br></pre></td></tr></table></figure>\n<p>这些子目录的功能如下：</p>\n<ul>\n<li>src/：这包含Odoo本身的一个拷贝，以及一些第三方插件项目（我们在下一步中添加了Odoo源码）</li>\n<li>local/：这用于保存你针对具体实例的插件</li>\n<li>bin/：这包含各类帮助可执行shell脚本</li>\n<li>filestore/：这用于文件存储</li>\n<li>logs/（可选）：这用于存储服务日志文件</li>\n</ul>\n</li>\n<li><p>克隆Odoo并安装所需依赖包（参见</p>\n<p>第一章 安装Odoo开发环境</p>\n<p>获取更多内容）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/odoo/odoo.git src/odoo</span><br><span class=\"line\">$ env/bin/pip3 install -r src/odoo/requirements.txt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>以bin/odoo保存如下shell脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ROOT=$(dirname <span class=\"variable\">$0</span>)/..</span><br><span class=\"line\">PYTHON=<span class=\"variable\">$ROOT</span>/env/bin/python3</span><br><span class=\"line\">ODOO=<span class=\"variable\">$ROOT</span>/src/odoo/odoo-bin</span><br><span class=\"line\"><span class=\"variable\">$PYTHON</span> <span class=\"variable\">$ODOO</span> -c <span class=\"variable\">$ROOT</span>/projectname.cfg <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> $?</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>让该脚本可执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod +x bin/odoo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个空的本地模块dummy：</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p local/dummy</span><br><span class=\"line\">$ touch local/dummy/__init__.py</span><br><span class=\"line\">$ echo &apos;&#123;&quot;name&quot;: &quot;dummy&quot;, &quot;installable&quot;: False&#125;&apos; &gt;\\local/dummy/__manifest__.py</span><br></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>为你的实例生成配置文件：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/odoo --stop-after-init --save \\ --addons-path src/odoo/odoo/addons,src/odoo/addons,local \\ --data-dir filestore</span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>添加一个.gitignore文件，用于告诉GitHub排除这些给定目录，这样Git在提交代码时就会忽略掉这些目录，例如 filestore/, env/, logs/和src/：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># dotfiles, with exceptions:</span></span><br><span class=\"line\">.*</span><br><span class=\"line\">!.gitignore</span><br><span class=\"line\"><span class=\"comment\"># python compiled files</span></span><br><span class=\"line\">*.py[co]</span><br><span class=\"line\"><span class=\"comment\"># emacs backup files</span></span><br><span class=\"line\">*~</span><br><span class=\"line\"><span class=\"comment\"># not tracked subdirectories</span></span><br><span class=\"line\">/env/</span><br><span class=\"line\">/src/</span><br><span class=\"line\">/filestore/</span><br><span class=\"line\">/logs/</span><br></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>为这个实例创建一个Git仓库并将已添加的文件添加到Git中：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"initial version of projectname\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"运行原理…-2\"><a href=\"#运行原理…-2\" class=\"headerlink\" title=\"运行原理…\"></a>运行原理…</h3><p>我们生成了一个有明确标签目录和独立角色的干净的目录结构。我使用了不同的目录来存储如下内容：</p>\n<ul>\n<li>由其它人所维护的代码（src/中）</li>\n<li>本地相关的具体代码</li>\n<li>实例的文件存储</li>\n</ul>\n<p>通过为每个项目建一个virtualenv环境，我们可以确保该项目的依赖文件不会与其它项目的依赖产生冲突，这些项目你可能运行着不同的Odoo版本或使用了不同的第三方插件模块，这将需要不同版本的Python依赖。这当然也会带来一部分磁盘空间的开销。</p>\n<p>以类似的方式，通过为我们不同的项目使用不同的Odoo拷贝以及第三方插件模块，我们可以让每个项目单独的进行推进并仅在需要时在这些实例上安装更新，因此也减少了引入回退的风险。</p>\n<p>bin/odoo允许我们不用记住各个路径或激活虚拟环境就可以运行服务。这还为我们设置了配置文件。你可以在其中添加其它脚本来协助你的日常工作。例如，你可以添加一个脚本来检查运行实例所需的第三方项目。</p>\n<p>有关配置文件，我们仅展示了这里需要设置的最小化选项，但很明显你可以设置更多，例如数据库名、数据库过滤器或项目所监听的端口。有关这一话题的更多信息，请参见<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>。</p>\n<p>最后，通过在Git仓库中管理所有这些，在不同的电脑上复制这一设置及在团队中分享开发内容变得相当容易。</p>\n<blockquote>\n<p><strong>小贴士：</strong>加速贴士</p>\n<p>要加速项目的创建，你可以创建一个包含空结构的模板仓库，并为每个项目复制（fork）该仓库。这会省却你重新输入bin/odoo脚本、.gitignore及其它所需模板文件（持续集成配置、README.md、ChangeLog等等）所花费的时间。</p>\n</blockquote>\n<h3 id=\"参见内容\"><a href=\"#参见内容\" class=\"headerlink\" title=\"参见内容\"></a>参见内容</h3><p>如果你喜欢这种方法，我们建议你尝试<a href=\"https://alanhou.org/server-deployment/\" target=\"_blank\" rel=\"noopener\">第三章 服务器部署</a>中的使用 Docker 运行 Odoo 一部分的内容。</p>\n<h3 id=\"扩展知识…-1\"><a href=\"#扩展知识…-1\" class=\"headerlink\" title=\"扩展知识…\"></a>扩展知识…</h3><p>复杂模块的开发要求有各类配置选项，在想要尝试任何配置选项时都会要更新配置文件。更新配置常常是一件头痛的事，避免它的一种方式是通过命令行传递所有配置选项，如下：</p>\n<ol>\n<li>手动激活虚拟环境：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> env/bin/activate</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>进行Odoo源代码目录：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> src/odoo</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>运行服务：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./odoo-bin --addons-path=addons,../../<span class=\"built_in\">local</span> -d <span class=\"built_in\">test</span>-12 -i account,sale,purchase --<span class=\"built_in\">log</span>-level=debug</span><br></pre></td></tr></table></figure>\n<p>第三步中，我们直接通过命令行传递了一些参数。第一个是–addons-path，它加载Odoo的核心插件目录addons，以及你自己的插件目录local，在其中你可以放自己的插件模块。选项-d会使用test-12数据库或者在该数据库不存在时新建一个数据库。选项-i 会安装会计、销售和采购模块。接着，我们传递了log-level选项来将日志级别提升为debug，这样日志中会显示更多的信息。</p>\n<blockquote>\n<p>ℹ️通过使用命令行，你可以快速地修改配置选项。你也可以在Terminal中查看实时日志。所有可用选项可参见<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>，或使用-help命令来查看所有的选项列表及各个选项的描述。</p>\n</blockquote>\n<h2 id=\"安装并升级本地插件模块\"><a href=\"#安装并升级本地插件模块\" class=\"headerlink\" title=\"安装并升级本地插件模块\"></a>安装并升级本地插件模块</h2><p>Odoo 功能的核心来自于它的插件模块。Odoo自带的插件是你所拥有的财富，同时你也可以在应用商店下载一些插件模块或者自己写。</p>\n<p>这一部分中，我们将展示如何通过网页界面及命令行来安装并升级插件模块。</p>\n<p>对这些操作使用命令行的主要好处包含可以同时作用于一个以上的插件以及在安装或升级的过程中可以清晰地浏览到服务端日志，对于开发模式或编写脚本安装实例时都非常有用。</p>\n<h3 id=\"准备工作-2\"><a href=\"#准备工作-2\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>确保你有一个运行中的 Odoo 实例，且数据库已初始化、插件路径已进行恰当地设置。在这一部分中，我们将安装/升级一些插件模块。</p>\n<h3 id=\"如何安装升级…\"><a href=\"#如何安装升级…\" class=\"headerlink\" title=\"如何安装升级…\"></a>如何安装升级…</h3><p>安装或升级插件有两种方法-可以使用网页界面或命令行。</p>\n<h4 id=\"通过网页界面\"><a href=\"#通过网页界面\" class=\"headerlink\" title=\"通过网页界面\"></a>通过网页界面</h4><p>可按照如下步骤来使用网页界面安装新的插件模块到数据库中：</p>\n<ol>\n<li>使用管理员账户连接实例并打开Apps菜单<br>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906002399.jpg\" alt=\"Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906002399.jpg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906002399.jpg)</div>\n            </figure></li>\n<li>使用搜索框来定位你想要安装的插件。这里有一些帮助你完成该任务的操作指南：<ul>\n<li>激活Not Installed过滤器</li>\n<li>如果你要查找一个具体的功能插件而不是广泛的功能插件，删除Apps过滤器</li>\n<li>在搜索框中输入模块名的一部分并使用它来作为模块过滤器</li>\n<li>你会发现使用列表视图可以阅读到更多的信息</li>\n</ul>\n</li>\n<li>点击卡片中模块名下的Install按钮。</li>\n</ol>\n<p>注意有些Odoo插件模块需要有外部Python依赖，如果你的系统中未安装该Python依赖，那么 Odoo 会中止安装并显示如下的对话框：</p>\n<p>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906125210.jpg\" alt=\"Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906125210.jpg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906125210.jpg)</div>\n            </figure><br><strong>译者注：</strong>按正常安装不会出现一错误，需通过 pip uninstall pyldap 才能复现这一错误</p>\n<p>修复这一问题，仅需在你的系统中安装相关的Python依赖即可。</p>\n<p>要升级已安装到数据库的模块，使用如下步骤：</p>\n<ol>\n<li>使用管理员账户连接到实例</li>\n<li>打开Apps菜单</li>\n<li>点击Apps:<br>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906203077.jpg\" alt=\"Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906203077.jpg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906203077.jpg)</div>\n            </figure></li>\n<li>使用搜索框来定位你所安装的插件。有如下的小贴士：<ul>\n<li>激活Installed过滤器</li>\n<li>如果你要查找一个具体的功能插件而不是广泛的功能插件，删除Apps过滤器</li>\n<li>在搜索框中输入部分插件模块的名称并按下 Enter 来使用它作为模块过滤器。例如，输入CRM并按下 Enter 来搜索CRM应用</li>\n<li>你会发现使用列表视图可以阅读到更多的信息</li>\n</ul>\n</li>\n<li>点击卡片右上角的的三个点，然后点击Upgrade选项：</li>\n</ol>\n<p>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906265357.jpg\" alt=\"Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906265357.jpg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906265357.jpg)</div>\n            </figure></p>\n<p>激活开发者模式来查看模块的技术名称。如果你不知道如何激活开发者模式，请参见<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>：</p>\n<p>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906302261.jpg\" alt=\"Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906302261.jpg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906302261.jpg)</div>\n            </figure></p>\n<p>在激活开发者模式之后，它会以红色显示模块的技术名称。如果你使用的是Odoo社区版，会看到一些带有Upgrade的附加应用。这些是Odoo企业版的应用，要想安装/使用它们，需要购买一个证书。</p>\n<h4 id=\"通过命令行\"><a href=\"#通过命令行\" class=\"headerlink\" title=\"通过命令行\"></a>通过命令行</h4><p>要在你的数据库中安装新插件，可按照如下步骤：</p>\n<ol>\n<li><p>查找插件的名称。这是包含<strong>manifest</strong>.py文件的目录名，不带前面的路径。</p>\n</li>\n<li><p>停止实例。如果你在操作生产数据库，请进行备份。</p>\n</li>\n<li><p>运行如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">odoo/odoo-bin -c instance.cfg -d dbname -i addon1,addon2 --stop-after-init</span><br></pre></td></tr></table></figure>\n<p>译者注：</p>\n<p>请将addon1,addon2替换为你所要安装的插件名</p>\n</li>\n</ol>\n<blockquote>\n<p><strong>小贴士：</strong>你可以省略掉-d dbname，因为这在配置文件中进行了设置。</p>\n</blockquote>\n<ol start=\"4\">\n<li>重新启动实例</li>\n</ol>\n<h3 id=\"运行原理…-3\"><a href=\"#运行原理…-3\" class=\"headerlink\" title=\"运行原理…\"></a>运行原理…</h3><p>插件模块的安装和升级是两个紧密关联的操作，但有一些重要的区别，在下面两部分中进行了强调：</p>\n<h4 id=\"插件安装\"><a href=\"#插件安装\" class=\"headerlink\" title=\"插件安装\"></a>插件安装</h4><p>在你安装插件时，Odoo以提供的名称检查它的可用插件列表中未安装插件。它还会检查该插件的依赖，并且如果有依赖的话，它会在安装插件前递归安装这些依赖。</p>\n<p>单个模块的安装包含如下步骤：</p>\n<ol>\n<li>如果存在，运行插件preinit钩子</li>\n<li>从Python源代码中加载模型定义并在必要时更新数据库结构（参见<a href=\"https://alanhou.org/application-models/\" target=\"_blank\" rel=\"noopener\">第五章 应用模型</a>了解更多信息）</li>\n<li>加载插件的数据文件并在必要时更新数据库内容（参见<a href=\"https://alanhou.org/odoo12-module-data/\" target=\"_blank\" rel=\"noopener\">第七章 模块数据</a>了解更多信息）</li>\n<li>如果实例中启用了演示数据则安装插件演示数据</li>\n<li>如果存在，运行插件postinit钩子</li>\n<li>运行对插件视图定义的验证</li>\n<li>如果启用了演示数据并启用了测试，运行该插件的测试（参见<a href=\"https://alanhou.org/automated-test-cases/\" target=\"_blank\" rel=\"noopener\">第十八章 自动化测试用例</a>了解更多信息）</li>\n<li>在数据库中更新模块状态</li>\n<li>从插件的翻译文件中更新数据库中的翻译（参见<a href=\"https://alanhou.org/internationalization/\" target=\"_blank\" rel=\"noopener\">第十二章 国际化</a>了解更多信息）</li>\n</ol>\n<blockquote>\n<p>ℹ️preinit和postinit钩子分别使用pre_init_hook和post_init_hook键名在<strong>manifest</strong>.py文件中定义。这些钩子用于在插件模块的安装之前及之后触发Python函数。参见<a href=\"https://alanhou.org/creating-odoo-add-on-modules/\" target=\"_blank\" rel=\"noopener\">第四章 创建Odoo插件模块</a>了解更多有关 init 钩子的知识。</p>\n</blockquote>\n<h4 id=\"插件升级\"><a href=\"#插件升级\" class=\"headerlink\" title=\"插件升级\"></a>插件升级</h4><p>升级插件时，Odoo以给定的名称在可用的插件模块列表中检查已安装插件。它还会检查该插件的反向依赖（即依赖于所升级插件的那些插件）。如果存在，则也会对它们进行递归升级。</p>\n<p>单个插件模块的升级过程包含如下步骤：</p>\n<ol>\n<li>如果有的话，先运行插件模块的预迁移步骤（参见<a href=\"https://alanhou.org/odoo12-module-data/\" target=\"_blank\" rel=\"noopener\">第七章 模块数据</a>了解更多信息）</li>\n<li>从Python源码中加载模型定义并在必要时更新数据库结构（参见<a href=\"https://alanhou.org/application-models/\" target=\"_blank\" rel=\"noopener\">第五章 应用模型</a>了解更多信息）</li>\n<li>加载插件的数据文件并在必要时更新数据库内容（参见<a href=\"https://alanhou.org/odoo12-module-data/\" target=\"_blank\" rel=\"noopener\">第七章 模块数据</a>了解更多信息）</li>\n<li>如果实例中启用了演示数据更新插件演示数据</li>\n<li>如果模块有任何迁移方法的话，先运行插件模块的后置迁移步骤（参见<a href=\"https://alanhou.org/odoo12-module-data/\" target=\"_blank\" rel=\"noopener\">第七章 模块数据</a>了解更多信息）</li>\n<li>运行对插件视图定义的验证</li>\n<li>如果启用了演示数据并启用了测试，运行该插件的测试（参见<a href=\"https://alanhou.org/automated-test-cases/\" target=\"_blank\" rel=\"noopener\">第十八章 自动化测试用例</a>了解更多信息）</li>\n<li>在数据库中更新模块状态</li>\n<li>从插件的翻译文件中更新数据库中的翻译（参见<a href=\"https://alanhou.org/internationalization/\" target=\"_blank\" rel=\"noopener\">第十二章 国际化</a>了解更多信息）</li>\n</ol>\n<blockquote>\n<p>ℹ️注意更新未安装的插件模块什么也不会做。但是安装已安装的插件模块会重新安装该插件，这会通过一些包含数据的数据文件产生一些预期外的问题，这些文件可能应由用户进行更新而非在常规的模块升级处理时进行更新（参见<a href=\"https://alanhou.org/odoo12-module-data/\" target=\"_blank\" rel=\"noopener\">第七章 模块数据</a>中使用noupdate和forcecreate标记部分的内容）。通过用户界面不存在错误的风险，但通过命令行时则有可能发生。</p>\n</blockquote>\n<h3 id=\"扩展知识…-2\"><a href=\"#扩展知识…-2\" class=\"headerlink\" title=\"扩展知识…\"></a>扩展知识…</h3><p>要当心依赖的处理。假定有一个实例你想要安装sale、sale_stock和sale_specific插件，sale_specific依赖于sale_stock，而sale_stock依赖于sale。要安装这三者，你只需要安装sale_specific，因为它会递归安装sale_stock和sale这两个依赖。要升级这两者，你需要升级sale，因为这样会递归升级其反向依赖，sale_stock和sale_specific。</p>\n<p>管理依赖另一个比较搞的地方是在你向已经有一个版本安装了的插件添加依赖的时候。我们继续通过前例来理解这一问题。想像一下你在sale_specific中添加了一个对stock_dropshipping的依赖。更新sale_specific插件不会自动安装新的依赖，也会要求安装sale_specific。在这种情况下，你会收到非常糟糕的错误消息，因为插件的Python代码没有成功的加载，而插件的数据和模型表则存在于数据库中。要解决这一问题，你需要停止该实例并手动安装新的依赖。</p>\n<h2 id=\"从GitHub安装插件模块\"><a href=\"#从GitHub安装插件模块\" class=\"headerlink\" title=\"从GitHub安装插件模块\"></a>从GitHub安装插件模块</h2><p>GitHub是第三方插件的一个很好的来源。很多Odoo合作伙伴使用GitHub来分享他们内部维护的插件，而Odoo社区联盟（OCA）在GitHub上共同维护着几百个插件。在你开始编写自己的插件之前，确保查看是否已有可用的插件或者作为初始以继续扩展插件。</p>\n<p>这一部分向你展示如何从GitHub上克隆OCA的partner-contact项目并让其中所包含的插件模块在我们实例中可用。</p>\n<h3 id=\"准备工作-3\"><a href=\"#准备工作-3\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>假设你想要改变你的实例中地址的处理方式，你的客户需要在Odoo两个字段（街道和街道2）之外的第三个字段来存储地址。你肯定是可以编写自己的插件来为res.partne添加一个字段的，但如果想要让地址在发票上以合适的格式显示，问题就要比看上去麻烦一些了。所幸，你邮件列表上的某个人告诉了你partner_address_street3插件，由OCA作为partner-contact项目的一部分进行维护。</p>\n<p>本部分中所使用的路径反映了我们在<em>标准化你的实例目录布局</em>一节中所推荐的布局。</p>\n<h3 id=\"如何安装…\"><a href=\"#如何安装…\" class=\"headerlink\" title=\"如何安装…\"></a>如何安装…</h3><p>按照如下步骤来安装partner_address_street3：</p>\n<ol>\n<li>进入你的项目目录：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/odoo-dev/my-odoo/src</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在src/目录中克隆partner-contact项目的12.0分支：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> --branch 12.0 \\https://github.com/OCA/partner-contact.git src/partner-contact</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><p>修改插件路径来包含该目录并更新你的实例中的插件列表（参见本章中的配置插件路径和更新插件模块列表一节）。instance.cfg中的addons_path一行应该是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addons_path = ~/odoo-dev/my-odoo/src/odoo/odoo/addons, \\~/odoo-dev/my-odoo/src/odoo/addons, \\~/odoo-dev/my-odoo/src/, \\~/odoo-dev/local-addons</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装partner_address_street3插件（如果你不知道如何安装该模块，参见前面一节，安装并升级本地插件模块）</p>\n</li>\n</ol>\n<h3 id=\"运行原理…-4\"><a href=\"#运行原理…-4\" class=\"headerlink\" title=\"运行原理…\"></a>运行原理…</h3><p>所有 Odoo社区联盟的代码仓库都将他们自己的插件放在单独的目录中，这与Odoo对插件路径中目录的预期是相一致的。因此，只需复制某处的仓库并将其添加到插件路径中就够了。</p>\n<h3 id=\"扩展知识…-3\"><a href=\"#扩展知识…-3\" class=\"headerlink\" title=\"扩展知识…\"></a>扩展知识…</h3><p>有些维护者遵循不同的方法，每个插件模块一个仓库，放在仓库的根目录下。这种情况下，你需要创建一个新的目录，在这个目录中添加插件路径并克隆你所需的维护者的插件到该目录中。记住在每次添加一个新仓库拷贝时要更新插件模块列表。</p>\n<h2 id=\"对插件应用修改\"><a href=\"#对插件应用修改\" class=\"headerlink\" title=\"对插件应用修改\"></a>对插件应用修改</h2><p>GitHub上可用的大部分插件需要进行修改并且不遵循Odoo对其稳定发行版所强制的规则。它们可能收到漏洞修复或改善，包含你提交的问题或功能请求，这些修改可能会引入数据库模式的修改或数据文件和视图中的更新。这一部分讲解如何安装升级后的版本。</p>\n<h3 id=\"准备工作-4\"><a href=\"#准备工作-4\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>假定你对partner_address_street3报告了一个问题并收到通知说该问题已在partner-contact项目12.0分支的最近一次修订中得以解决。这种情况下，你可以使用最新版本来更新你的实例。</p>\n<h3 id=\"如何修改…\"><a href=\"#如何修改…\" class=\"headerlink\" title=\"如何修改…\"></a>如何修改…</h3><p>要对GitHub的插件进行源的变更，需执行如下步骤：</p>\n<ol>\n<li><p>停止使用该插件的实例。</p>\n</li>\n<li><p>如果是生产实例请做一个备份（参见<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>中<em>管理Odoo服务端数据库</em>一节）。</p>\n</li>\n<li><p>进入克隆了partner-contact的目录：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/odoo-dev/my-odoo/src/partner-contact</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>为该项目创建一个本地标签，这样万一出现了崩溃你可以进行回退：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout 12.0$ git tag 12.0-before-update-$(date --iso)</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>获取源码的最新版本：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull --ff-only</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li><p>在你的数据库中更新partner_address_street3插件（参见<em>安装并升级本地插件模块</em>一节）</p>\n</li>\n<li><p>重启实例</p>\n</li>\n</ol>\n<h3 id=\"运行原理…-5\"><a href=\"#运行原理…-5\" class=\"headerlink\" title=\"运行原理…\"></a>运行原理…</h3><p>通常，插件模块的开发者有时会发布插件的最新版本。这一更新一般包含漏洞修复及新功能。这里，我们将获取一个插件的新版本并在我们的实例中更新它。</p>\n<p>如果git pull –ff-only失败的话，你可以使用如下命令回退到前一个版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  git reset --hard 12.0-before-update-$(date --iso)</span><br></pre></td></tr></table></figure>\n<p>然后，你可以尝试git pull（不添加–ff-only），它会产生一个合并，但这表示你对插件做了本地修改。</p>\n<h3 id=\"扩展知识…-4\"><a href=\"#扩展知识…-4\" class=\"headerlink\" title=\"扩展知识…\"></a>扩展知识…</h3><p>如果更新这一步崩溃了，参见<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a><em>从源码更新Odoo</em>一节获取恢复的操作指南。记住要总是在一个生产数据库的拷贝上先进行测试。</p>\n<h2 id=\"应用及尝试建议的拉取请求\"><a href=\"#应用及尝试建议的拉取请求\" class=\"headerlink\" title=\"应用及尝试建议的拉取请求\"></a>应用及尝试建议的拉取请求</h2><p>在GitHub的世界中，拉取请求（PR）是由开发者所提交的请求，这样项目维护人员可以添加一些新的开发。比如一个 PR 可能包含漏洞修复或新功能。这里请求在拉取到主分支之前会进行审核和测试。</p>\n<p>这一部分讲解如何对你的 Odoo 项目应用一个PR来测试漏洞修复的改进。</p>\n<h3 id=\"准备工作-5\"><a href=\"#准备工作-5\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>在前一节中，假定你对partner_address_street3 报告了一个问题并收到一条通知在拉取请求中问题已修复，尚未合并到项目的12.0分支中。开发人员要求你验证PR #123中的修复状况。你需要使用这一分支更新一个测试实例。</p>\n<p>你不应在生产数据库直接使用该分支，因此先创建一个带有生产数据库拷贝的测试环境（参见<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>和<a href=\"https://alanhou.org/server-deployment/\" target=\"_blank\" rel=\"noopener\">第三章 服务器部署</a>）。</p>\n<h3 id=\"如何操作…\"><a href=\"#如何操作…\" class=\"headerlink\" title=\"如何操作…\"></a>如何操作…</h3><p>应用并测试一个插件的GitHub拉取请求，你需要执行如下步骤：</p>\n<ol>\n<li><p>停止实例</p>\n</li>\n<li><p>进入partner-contact所被克隆的目录：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/odoo-dev/my-odoo/src/partner-contact</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>为该项目创建一个本地标签，这样万一出现崩溃时你可以回退：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  git checkout 12.0$ git tag 12.0-before-update-$(date --iso</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>拉取pull请求的分支。这么做最容易的方式是使用PR编号，在开发者与你沟通时你应该可以看到。在本例中，这个拉取请求编号是123：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull origin pull/123/head</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li><p>在你的数据库中更新partner_address_street3插件模块并重启该实例（如果你不知道如何更新该模块的话请参见<em>安装并升级本地插件模块</em>一节）</p>\n</li>\n<li><p>测试该更新 – 尝试重现问题，或测试你想要的功能。</p>\n</li>\n</ol>\n<p>如果这不能运行，在GitHub的PR页面进行评论，说明你做了什么以及什么不能运行，这样开发者可以更新这个拉取请求。</p>\n<p>如果它没有问题，也在PR页面说下；这是PR验证流程中非常重要的一部分；这会加速主分支中的合并。</p>\n<h3 id=\"运行原理…-6\"><a href=\"#运行原理…-6\" class=\"headerlink\" title=\"运行原理…\"></a>运行原理…</h3><p>我们在使用一个GitHub功能，使用pull/nnnn/head分支名称来通过编号进行拉取请求的拉取，其中nnnn是PR的编号。Git pull命令合并远程分支到我们的分支，在我们基础代码中应用修改。在这之后，我们更新插件模块、对其测试并向作者报回修改是成功或是失败。</p>\n<h3 id=\"扩展知识…-5\"><a href=\"#扩展知识…-5\" class=\"headerlink\" title=\"扩展知识…\"></a>扩展知识…</h3><p>如果你想要同步测试它们，你可以针对相同仓库的不同拉取请求重复本节中的第4步。如果你对结果很满意，你可以创建一个分支来保留对应用了改变的结果的引用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b 12.0-custom</span><br></pre></td></tr></table></figure>\n<p>使用一个不同的分支会帮助你记住你没有从GitHub使用该版本，而是一个自定义的版本。</p>\n<blockquote>\n<p>ℹ️git branch命令可用于列出你仓库中的所有本地分支。</p>\n</blockquote>\n<p>从这开始，如果你需要应用来自GitHub中12.0分支的最近一个审核版本，你需要不使用–ff-only来拉取它：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull origin 12.0</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>全书完整目录请见：<a href=\"https://alanhou.org/odoo12-cookbook/\" target=\"_blank\" rel=\"noopener\">Odoo 12开发者指南（Cookbook）第三版</a></p>\n<p>本章中，我们将讲解如下内容：</p>\n<ul>\n<li>配置插件路径</li>\n<li>更新插件模块列表</li>\n<li>标准化你的实例目录布局</li>\n<li>安装并升级本地插件模块</li>\n<li>对插件应用修改</li>\n<li>应用及尝试建议的拉取请求</li>\n</ul>\n<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>在<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>中，我们看了如何使用与编辑器一同发布的标准核心插件来设置 Odoo 实例。本章集中讲解为 Odoo 实例添加非核心插件。Odoo中，你可以从多个目录中加载插件。此外，推荐你将第三方插件（如OCA模块）或你自定义的插件放在一个单独的文件夹中，这样可以避免与 Odoo 核心模块产生冲突。甚至Odoo 企业版也是一种类型的插件目录，你需要像普通插件目录一样加载它。</p>\n<blockquote>\n<p>ℹ️<strong>有关用词 – 插件(add-on) vs. 模块(module)</strong></p>\n<p>本书中，我们使用插件或插件模块来指代 Odoo 所预期安装的 Python 包。用户界面常使用应用（app）或模块的表达 ，但我们更愿意保留模块一词来表示Python模块或包，它们不一定是 Odoo 插件，而应用（app）来表示适当定义为应用的插件模块，表示它不是Odoo主菜单中的入口。</p>\n</blockquote>\n<h2 id=\"配置插件路径\"><a href=\"#配置插件路径\" class=\"headerlink\" title=\"配置插件路径\"></a>配置插件路径</h2><p>通过addons_path参数的配置，你可以在 Odoo 中加载自己的插件模块。在Odoo初始化一个新数据库时，它会搜索在addons_path配置参数中给定的这些目录。addons_path会在这些目录中搜索潜在的插件模块。addons_path中所列出的目录预期应包含子目录，每个子目录是一个插件模块。在数据库初始化完成后，你将能够安装这些目录中所给出的模块。</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>这一部分假定你已经准备好了实例并生成了配置文件，如在<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>中<em>在一个文件中存储实例配置</em>一节所描述。Odoo的源码存放在~/odoo-dev/odoo中，而配置文件存放在~/odoo-dev/myinstance.cfg中。</p>\n<h3 id=\"如何配置…\"><a href=\"#如何配置…\" class=\"headerlink\" title=\"如何配置…\"></a>如何配置…</h3><p>按如下步骤在实例的addons_path中添加~/odoo-dev/local-addons目录：</p>\n<ol>\n<li><p>编辑你的实例的配置文件，即 ~/odoo-dev/my-instance.cfg。</p>\n</li>\n<li><p>定位到以addons_path =开头一行，默认，你会看到如下内容：</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addons_path = ~/odoo-dev/odoo/odoo/addons,~/odoo-dev/odoo/add-ons</span><br></pre></td></tr></table></figure>\n<p>   译者注：</p>\n<p>   当前默认生成的配置文件中为绝对路径，且仅包含xxx/odoo/addons</p>\n<ol start=\"3\">\n<li>修改该行，添加一个逗号（英文半角），并接你想想要添加为addons_的目录名称，如以下代码所示：</li>\n</ol>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addons_path = ~/odoo-dev/odoo/odoo/addons,~/odoo-dev/odoo/addons,~/odoo-dev/local-addons</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><p>重启你的实例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ~/odoo-dev/odoo/odoo-bin -c my-instance.cfg</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"运行原理…\"><a href=\"#运行原理…\" class=\"headerlink\" title=\"运行原理…\"></a>运行原理…</h3><p>在重启 Odoo 时，会读取配置文件。addons_path变量的值应为一个逗号分隔的目录列表。可接受相对路径，但它们是相对于当前工作目录的，因此应在配置文件中尽量避免。</p>\n<p>至此，~/odoo-dev/local-addons中包含的新插件尚不在该实例的可用模块列表中。为此，你需要执行一个额外的操作，在下一部分<em>更新插件模块列表</em>中会进行讲解。</p>\n<h3 id=\"扩展知识…\"><a href=\"#扩展知识…\" class=\"headerlink\" title=\"扩展知识…\"></a>扩展知识…</h3><p>在第一次调用 odoo-bin脚本来初始化新数据库时，你可以传递一个带逗号分隔目录列表的–addons-path命令行参数。这会以所提供插件路径中所找到的所有插件来初始化可用插件模块列表。这么做时，你要显式地包含基础插件目录（odoo/odoo/addons）以及核心插件目录（odoo/addons）。</p>\n<p>与前面稍有不同的是本地插件目录不能为空（<strong>译者注：</strong>请先阅读下面的小贴士），它必须要至少包含一个子目录，并包含插件模块的最小化结构。在<a href=\"https://alanhou.org/creating-odoo-add-on-modules/\" target=\"_blank\" rel=\"noopener\">第四章 创建Odoo插件模块</a>中，我们会来看如何编写你自己的模块。同时，这里有一个生成内容来满足Odoo要求的快捷版黑科技：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p ~/odoo-dev/local-addons/dummy$ touch ~/odoo-dev/local-addons/dummy/__init__.py$ echo &apos;&#123;&quot;name&quot;: &quot;dummy&quot;, &quot;installable&quot;: False&#125;&apos; &gt; \\~/odoo-dev/local-addons/dummy/__manifest__.py</span><br></pre></td></tr></table></figure>\n<p>你可以使用–save选项来保存配置文件的路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ odoo/odoo-bin -d mydatabase \\--add-ons-path=&quot;odoo/odoo/addons,odoo/addons,~/odoo-dev/local-addons&quot; \\--save -c ~/odoo-dev/my-instance.cfg --stop-after-init</span><br></pre></td></tr></table></figure>\n<p>本例中，使用相对路径不会有问题，因为它们会在配置文件中转化为绝对路径。</p>\n<blockquote>\n<p><strong>小贴士：</strong>因为Odoo仅当从命令行中设置路径时在插件路径的目录中查看插件，而不是在从配置文件中加载路径的时候，dummy已不再必要。因此，你可以删除它（或保留到你确定不需要新建一个配置文件时）。</p>\n</blockquote>\n<h2 id=\"更新插件模块列表\"><a href=\"#更新插件模块列表\" class=\"headerlink\" title=\"更新插件模块列表\"></a>更新插件模块列表</h2><p>我们在前面的部分已经说到，在向插件路径添加目录时，仅仅重启Odoo服务是不足以安装其中一个新插件模块的。Odoo还需要有一个指定动作来扫描路径并更新可用插件模块的列表。</p>\n<h3 id=\"准备工作-1\"><a href=\"#准备工作-1\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>启动你的实例并使用管理员账号连接它。然后，激活开发者模式（如果你不知道如何激活开发者模式，请参见<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>）。</p>\n<h3 id=\"如何更新…\"><a href=\"#如何更新…\" class=\"headerlink\" title=\"如何更新…\"></a>如何更新…</h3><p>要更新你实例中的可用插件模块列表，你需要执行如下步骤：</p>\n<ol>\n<li>打开Apps菜单</li>\n<li>点击Update Apps List：<br>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902052063.jpg\" alt=\"Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902052063.jpg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902052063.jpg)</div>\n            </figure></li>\n<li>在弹出对话框中，点击Update按钮：<br>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902070776.jpg\" alt=\"Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902070776.jpg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902070776.jpg)</div>\n            </figure></li>\n<li>在更新的最后，你可以点击Apps入口来查看已更新的可用插件模块列表。你将需要删除Apps搜索框中的默认过滤器来查看所有模块。</li>\n</ol>\n<h3 id=\"运行原理…-1\"><a href=\"#运行原理…-1\" class=\"headerlink\" title=\"运行原理…\"></a>运行原理…</h3><p>在点击了Update按钮之后，Odoo会读取插件路径配置变量。对于列表中的每一个目录，它会查看包含保存在插件模块目录中名为<strong>manifest</strong>.py的插件声明文件的直接子目录。Odoo读取声明内容，并预期查找其中的Python字典。除非声明内容中包含一个键installable的值为False，插件模块的元数据就会存储在数据库中。如果模块已存在，则更新相关信息。否则，会创建一条新记录。如果此前可用的插件模块未找到，则从列表中删除该记录。</p>\n<blockquote>\n<p>ℹ️仅在初始化数据库后添加了新的插件路径时才需要更新应用列表。如果你在初始化数据库之前在配置文件中添加了新插件路径，那么就无需手动更新模块列表。</p>\n</blockquote>\n<h2 id=\"标准化你的实例目录布局\"><a href=\"#标准化你的实例目录布局\" class=\"headerlink\" title=\"标准化你的实例目录布局\"></a>标准化你的实例目录布局</h2><p>我们推荐你在开发和生产环境都使用相似的目录布局。这一标准化会在你要执行运维时体现出用处，它也会缓解你日常工作的压力。</p>\n<p>这一部分创建将相似生命周期或相似用途的文件分组放在标准化子目录中的目录结构。请自由按照自己的需求来调整这一结构，但请确保你将这一结构在某处进行记录存档。</p>\n<h3 id=\"如何标准化…\"><a href=\"#如何标准化…\" class=\"headerlink\" title=\"如何标准化…\"></a>如何标准化…</h3><p>创建所推荐实例布局，你需要执行如下步骤：</p>\n<p><strong>译者注：</strong>读者也可直接使用 Alan 在 GitHub 上准备的<a href=\"https://github.com/alanhou/odoo12-cookbook/tree/master/Chapter02\" target=\"_blank\" rel=\"noopener\">安装脚本</a>进行操作</p>\n<ol>\n<li><p>为实例创建一个目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir ~/odoo-dev/projectname$ cd ~/odoo-dev/projectname</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在名为env/的子目录中创建一个Python虚拟环境：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ virtualenv -p python3 env</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一些子目录，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir src local bin filestore logs</span><br></pre></td></tr></table></figure>\n<p>这些子目录的功能如下：</p>\n<ul>\n<li>src/：这包含Odoo本身的一个拷贝，以及一些第三方插件项目（我们在下一步中添加了Odoo源码）</li>\n<li>local/：这用于保存你针对具体实例的插件</li>\n<li>bin/：这包含各类帮助可执行shell脚本</li>\n<li>filestore/：这用于文件存储</li>\n<li>logs/（可选）：这用于存储服务日志文件</li>\n</ul>\n</li>\n<li><p>克隆Odoo并安装所需依赖包（参见</p>\n<p>第一章 安装Odoo开发环境</p>\n<p>获取更多内容）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/odoo/odoo.git src/odoo</span><br><span class=\"line\">$ env/bin/pip3 install -r src/odoo/requirements.txt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>以bin/odoo保存如下shell脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ROOT=$(dirname <span class=\"variable\">$0</span>)/..</span><br><span class=\"line\">PYTHON=<span class=\"variable\">$ROOT</span>/env/bin/python3</span><br><span class=\"line\">ODOO=<span class=\"variable\">$ROOT</span>/src/odoo/odoo-bin</span><br><span class=\"line\"><span class=\"variable\">$PYTHON</span> <span class=\"variable\">$ODOO</span> -c <span class=\"variable\">$ROOT</span>/projectname.cfg <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> $?</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>让该脚本可执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod +x bin/odoo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个空的本地模块dummy：</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p local/dummy</span><br><span class=\"line\">$ touch local/dummy/__init__.py</span><br><span class=\"line\">$ echo &apos;&#123;&quot;name&quot;: &quot;dummy&quot;, &quot;installable&quot;: False&#125;&apos; &gt;\\local/dummy/__manifest__.py</span><br></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>为你的实例生成配置文件：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/odoo --stop-after-init --save \\ --addons-path src/odoo/odoo/addons,src/odoo/addons,local \\ --data-dir filestore</span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>添加一个.gitignore文件，用于告诉GitHub排除这些给定目录，这样Git在提交代码时就会忽略掉这些目录，例如 filestore/, env/, logs/和src/：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># dotfiles, with exceptions:</span></span><br><span class=\"line\">.*</span><br><span class=\"line\">!.gitignore</span><br><span class=\"line\"><span class=\"comment\"># python compiled files</span></span><br><span class=\"line\">*.py[co]</span><br><span class=\"line\"><span class=\"comment\"># emacs backup files</span></span><br><span class=\"line\">*~</span><br><span class=\"line\"><span class=\"comment\"># not tracked subdirectories</span></span><br><span class=\"line\">/env/</span><br><span class=\"line\">/src/</span><br><span class=\"line\">/filestore/</span><br><span class=\"line\">/logs/</span><br></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>为这个实例创建一个Git仓库并将已添加的文件添加到Git中：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"initial version of projectname\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"运行原理…-2\"><a href=\"#运行原理…-2\" class=\"headerlink\" title=\"运行原理…\"></a>运行原理…</h3><p>我们生成了一个有明确标签目录和独立角色的干净的目录结构。我使用了不同的目录来存储如下内容：</p>\n<ul>\n<li>由其它人所维护的代码（src/中）</li>\n<li>本地相关的具体代码</li>\n<li>实例的文件存储</li>\n</ul>\n<p>通过为每个项目建一个virtualenv环境，我们可以确保该项目的依赖文件不会与其它项目的依赖产生冲突，这些项目你可能运行着不同的Odoo版本或使用了不同的第三方插件模块，这将需要不同版本的Python依赖。这当然也会带来一部分磁盘空间的开销。</p>\n<p>以类似的方式，通过为我们不同的项目使用不同的Odoo拷贝以及第三方插件模块，我们可以让每个项目单独的进行推进并仅在需要时在这些实例上安装更新，因此也减少了引入回退的风险。</p>\n<p>bin/odoo允许我们不用记住各个路径或激活虚拟环境就可以运行服务。这还为我们设置了配置文件。你可以在其中添加其它脚本来协助你的日常工作。例如，你可以添加一个脚本来检查运行实例所需的第三方项目。</p>\n<p>有关配置文件，我们仅展示了这里需要设置的最小化选项，但很明显你可以设置更多，例如数据库名、数据库过滤器或项目所监听的端口。有关这一话题的更多信息，请参见<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>。</p>\n<p>最后，通过在Git仓库中管理所有这些，在不同的电脑上复制这一设置及在团队中分享开发内容变得相当容易。</p>\n<blockquote>\n<p><strong>小贴士：</strong>加速贴士</p>\n<p>要加速项目的创建，你可以创建一个包含空结构的模板仓库，并为每个项目复制（fork）该仓库。这会省却你重新输入bin/odoo脚本、.gitignore及其它所需模板文件（持续集成配置、README.md、ChangeLog等等）所花费的时间。</p>\n</blockquote>\n<h3 id=\"参见内容\"><a href=\"#参见内容\" class=\"headerlink\" title=\"参见内容\"></a>参见内容</h3><p>如果你喜欢这种方法，我们建议你尝试<a href=\"https://alanhou.org/server-deployment/\" target=\"_blank\" rel=\"noopener\">第三章 服务器部署</a>中的使用 Docker 运行 Odoo 一部分的内容。</p>\n<h3 id=\"扩展知识…-1\"><a href=\"#扩展知识…-1\" class=\"headerlink\" title=\"扩展知识…\"></a>扩展知识…</h3><p>复杂模块的开发要求有各类配置选项，在想要尝试任何配置选项时都会要更新配置文件。更新配置常常是一件头痛的事，避免它的一种方式是通过命令行传递所有配置选项，如下：</p>\n<ol>\n<li>手动激活虚拟环境：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> env/bin/activate</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>进行Odoo源代码目录：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> src/odoo</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>运行服务：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./odoo-bin --addons-path=addons,../../<span class=\"built_in\">local</span> -d <span class=\"built_in\">test</span>-12 -i account,sale,purchase --<span class=\"built_in\">log</span>-level=debug</span><br></pre></td></tr></table></figure>\n<p>第三步中，我们直接通过命令行传递了一些参数。第一个是–addons-path，它加载Odoo的核心插件目录addons，以及你自己的插件目录local，在其中你可以放自己的插件模块。选项-d会使用test-12数据库或者在该数据库不存在时新建一个数据库。选项-i 会安装会计、销售和采购模块。接着，我们传递了log-level选项来将日志级别提升为debug，这样日志中会显示更多的信息。</p>\n<blockquote>\n<p>ℹ️通过使用命令行，你可以快速地修改配置选项。你也可以在Terminal中查看实时日志。所有可用选项可参见<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>，或使用-help命令来查看所有的选项列表及各个选项的描述。</p>\n</blockquote>\n<h2 id=\"安装并升级本地插件模块\"><a href=\"#安装并升级本地插件模块\" class=\"headerlink\" title=\"安装并升级本地插件模块\"></a>安装并升级本地插件模块</h2><p>Odoo 功能的核心来自于它的插件模块。Odoo自带的插件是你所拥有的财富，同时你也可以在应用商店下载一些插件模块或者自己写。</p>\n<p>这一部分中，我们将展示如何通过网页界面及命令行来安装并升级插件模块。</p>\n<p>对这些操作使用命令行的主要好处包含可以同时作用于一个以上的插件以及在安装或升级的过程中可以清晰地浏览到服务端日志，对于开发模式或编写脚本安装实例时都非常有用。</p>\n<h3 id=\"准备工作-2\"><a href=\"#准备工作-2\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>确保你有一个运行中的 Odoo 实例，且数据库已初始化、插件路径已进行恰当地设置。在这一部分中，我们将安装/升级一些插件模块。</p>\n<h3 id=\"如何安装升级…\"><a href=\"#如何安装升级…\" class=\"headerlink\" title=\"如何安装升级…\"></a>如何安装升级…</h3><p>安装或升级插件有两种方法-可以使用网页界面或命令行。</p>\n<h4 id=\"通过网页界面\"><a href=\"#通过网页界面\" class=\"headerlink\" title=\"通过网页界面\"></a>通过网页界面</h4><p>可按照如下步骤来使用网页界面安装新的插件模块到数据库中：</p>\n<ol>\n<li>使用管理员账户连接实例并打开Apps菜单<br>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906002399.jpg\" alt=\"Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906002399.jpg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906002399.jpg)</div>\n            </figure></li>\n<li>使用搜索框来定位你想要安装的插件。这里有一些帮助你完成该任务的操作指南：<ul>\n<li>激活Not Installed过滤器</li>\n<li>如果你要查找一个具体的功能插件而不是广泛的功能插件，删除Apps过滤器</li>\n<li>在搜索框中输入模块名的一部分并使用它来作为模块过滤器</li>\n<li>你会发现使用列表视图可以阅读到更多的信息</li>\n</ul>\n</li>\n<li>点击卡片中模块名下的Install按钮。</li>\n</ol>\n<p>注意有些Odoo插件模块需要有外部Python依赖，如果你的系统中未安装该Python依赖，那么 Odoo 会中止安装并显示如下的对话框：</p>\n<p>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906125210.jpg\" alt=\"Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906125210.jpg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906125210.jpg)</div>\n            </figure><br><strong>译者注：</strong>按正常安装不会出现一错误，需通过 pip uninstall pyldap 才能复现这一错误</p>\n<p>修复这一问题，仅需在你的系统中安装相关的Python依赖即可。</p>\n<p>要升级已安装到数据库的模块，使用如下步骤：</p>\n<ol>\n<li>使用管理员账户连接到实例</li>\n<li>打开Apps菜单</li>\n<li>点击Apps:<br>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906203077.jpg\" alt=\"Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906203077.jpg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906203077.jpg)</div>\n            </figure></li>\n<li>使用搜索框来定位你所安装的插件。有如下的小贴士：<ul>\n<li>激活Installed过滤器</li>\n<li>如果你要查找一个具体的功能插件而不是广泛的功能插件，删除Apps过滤器</li>\n<li>在搜索框中输入部分插件模块的名称并按下 Enter 来使用它作为模块过滤器。例如，输入CRM并按下 Enter 来搜索CRM应用</li>\n<li>你会发现使用列表视图可以阅读到更多的信息</li>\n</ul>\n</li>\n<li>点击卡片右上角的的三个点，然后点击Upgrade选项：</li>\n</ol>\n<p>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906265357.jpg\" alt=\"Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906265357.jpg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906265357.jpg)</div>\n            </figure></p>\n<p>激活开发者模式来查看模块的技术名称。如果你不知道如何激活开发者模式，请参见<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>：</p>\n<p>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906302261.jpg\" alt=\"Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906302261.jpg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906302261.jpg)</div>\n            </figure></p>\n<p>在激活开发者模式之后，它会以红色显示模块的技术名称。如果你使用的是Odoo社区版，会看到一些带有Upgrade的附加应用。这些是Odoo企业版的应用，要想安装/使用它们，需要购买一个证书。</p>\n<h4 id=\"通过命令行\"><a href=\"#通过命令行\" class=\"headerlink\" title=\"通过命令行\"></a>通过命令行</h4><p>要在你的数据库中安装新插件，可按照如下步骤：</p>\n<ol>\n<li><p>查找插件的名称。这是包含<strong>manifest</strong>.py文件的目录名，不带前面的路径。</p>\n</li>\n<li><p>停止实例。如果你在操作生产数据库，请进行备份。</p>\n</li>\n<li><p>运行如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">odoo/odoo-bin -c instance.cfg -d dbname -i addon1,addon2 --stop-after-init</span><br></pre></td></tr></table></figure>\n<p>译者注：</p>\n<p>请将addon1,addon2替换为你所要安装的插件名</p>\n</li>\n</ol>\n<blockquote>\n<p><strong>小贴士：</strong>你可以省略掉-d dbname，因为这在配置文件中进行了设置。</p>\n</blockquote>\n<ol start=\"4\">\n<li>重新启动实例</li>\n</ol>\n<h3 id=\"运行原理…-3\"><a href=\"#运行原理…-3\" class=\"headerlink\" title=\"运行原理…\"></a>运行原理…</h3><p>插件模块的安装和升级是两个紧密关联的操作，但有一些重要的区别，在下面两部分中进行了强调：</p>\n<h4 id=\"插件安装\"><a href=\"#插件安装\" class=\"headerlink\" title=\"插件安装\"></a>插件安装</h4><p>在你安装插件时，Odoo以提供的名称检查它的可用插件列表中未安装插件。它还会检查该插件的依赖，并且如果有依赖的话，它会在安装插件前递归安装这些依赖。</p>\n<p>单个模块的安装包含如下步骤：</p>\n<ol>\n<li>如果存在，运行插件preinit钩子</li>\n<li>从Python源代码中加载模型定义并在必要时更新数据库结构（参见<a href=\"https://alanhou.org/application-models/\" target=\"_blank\" rel=\"noopener\">第五章 应用模型</a>了解更多信息）</li>\n<li>加载插件的数据文件并在必要时更新数据库内容（参见<a href=\"https://alanhou.org/odoo12-module-data/\" target=\"_blank\" rel=\"noopener\">第七章 模块数据</a>了解更多信息）</li>\n<li>如果实例中启用了演示数据则安装插件演示数据</li>\n<li>如果存在，运行插件postinit钩子</li>\n<li>运行对插件视图定义的验证</li>\n<li>如果启用了演示数据并启用了测试，运行该插件的测试（参见<a href=\"https://alanhou.org/automated-test-cases/\" target=\"_blank\" rel=\"noopener\">第十八章 自动化测试用例</a>了解更多信息）</li>\n<li>在数据库中更新模块状态</li>\n<li>从插件的翻译文件中更新数据库中的翻译（参见<a href=\"https://alanhou.org/internationalization/\" target=\"_blank\" rel=\"noopener\">第十二章 国际化</a>了解更多信息）</li>\n</ol>\n<blockquote>\n<p>ℹ️preinit和postinit钩子分别使用pre_init_hook和post_init_hook键名在<strong>manifest</strong>.py文件中定义。这些钩子用于在插件模块的安装之前及之后触发Python函数。参见<a href=\"https://alanhou.org/creating-odoo-add-on-modules/\" target=\"_blank\" rel=\"noopener\">第四章 创建Odoo插件模块</a>了解更多有关 init 钩子的知识。</p>\n</blockquote>\n<h4 id=\"插件升级\"><a href=\"#插件升级\" class=\"headerlink\" title=\"插件升级\"></a>插件升级</h4><p>升级插件时，Odoo以给定的名称在可用的插件模块列表中检查已安装插件。它还会检查该插件的反向依赖（即依赖于所升级插件的那些插件）。如果存在，则也会对它们进行递归升级。</p>\n<p>单个插件模块的升级过程包含如下步骤：</p>\n<ol>\n<li>如果有的话，先运行插件模块的预迁移步骤（参见<a href=\"https://alanhou.org/odoo12-module-data/\" target=\"_blank\" rel=\"noopener\">第七章 模块数据</a>了解更多信息）</li>\n<li>从Python源码中加载模型定义并在必要时更新数据库结构（参见<a href=\"https://alanhou.org/application-models/\" target=\"_blank\" rel=\"noopener\">第五章 应用模型</a>了解更多信息）</li>\n<li>加载插件的数据文件并在必要时更新数据库内容（参见<a href=\"https://alanhou.org/odoo12-module-data/\" target=\"_blank\" rel=\"noopener\">第七章 模块数据</a>了解更多信息）</li>\n<li>如果实例中启用了演示数据更新插件演示数据</li>\n<li>如果模块有任何迁移方法的话，先运行插件模块的后置迁移步骤（参见<a href=\"https://alanhou.org/odoo12-module-data/\" target=\"_blank\" rel=\"noopener\">第七章 模块数据</a>了解更多信息）</li>\n<li>运行对插件视图定义的验证</li>\n<li>如果启用了演示数据并启用了测试，运行该插件的测试（参见<a href=\"https://alanhou.org/automated-test-cases/\" target=\"_blank\" rel=\"noopener\">第十八章 自动化测试用例</a>了解更多信息）</li>\n<li>在数据库中更新模块状态</li>\n<li>从插件的翻译文件中更新数据库中的翻译（参见<a href=\"https://alanhou.org/internationalization/\" target=\"_blank\" rel=\"noopener\">第十二章 国际化</a>了解更多信息）</li>\n</ol>\n<blockquote>\n<p>ℹ️注意更新未安装的插件模块什么也不会做。但是安装已安装的插件模块会重新安装该插件，这会通过一些包含数据的数据文件产生一些预期外的问题，这些文件可能应由用户进行更新而非在常规的模块升级处理时进行更新（参见<a href=\"https://alanhou.org/odoo12-module-data/\" target=\"_blank\" rel=\"noopener\">第七章 模块数据</a>中使用noupdate和forcecreate标记部分的内容）。通过用户界面不存在错误的风险，但通过命令行时则有可能发生。</p>\n</blockquote>\n<h3 id=\"扩展知识…-2\"><a href=\"#扩展知识…-2\" class=\"headerlink\" title=\"扩展知识…\"></a>扩展知识…</h3><p>要当心依赖的处理。假定有一个实例你想要安装sale、sale_stock和sale_specific插件，sale_specific依赖于sale_stock，而sale_stock依赖于sale。要安装这三者，你只需要安装sale_specific，因为它会递归安装sale_stock和sale这两个依赖。要升级这两者，你需要升级sale，因为这样会递归升级其反向依赖，sale_stock和sale_specific。</p>\n<p>管理依赖另一个比较搞的地方是在你向已经有一个版本安装了的插件添加依赖的时候。我们继续通过前例来理解这一问题。想像一下你在sale_specific中添加了一个对stock_dropshipping的依赖。更新sale_specific插件不会自动安装新的依赖，也会要求安装sale_specific。在这种情况下，你会收到非常糟糕的错误消息，因为插件的Python代码没有成功的加载，而插件的数据和模型表则存在于数据库中。要解决这一问题，你需要停止该实例并手动安装新的依赖。</p>\n<h2 id=\"从GitHub安装插件模块\"><a href=\"#从GitHub安装插件模块\" class=\"headerlink\" title=\"从GitHub安装插件模块\"></a>从GitHub安装插件模块</h2><p>GitHub是第三方插件的一个很好的来源。很多Odoo合作伙伴使用GitHub来分享他们内部维护的插件，而Odoo社区联盟（OCA）在GitHub上共同维护着几百个插件。在你开始编写自己的插件之前，确保查看是否已有可用的插件或者作为初始以继续扩展插件。</p>\n<p>这一部分向你展示如何从GitHub上克隆OCA的partner-contact项目并让其中所包含的插件模块在我们实例中可用。</p>\n<h3 id=\"准备工作-3\"><a href=\"#准备工作-3\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>假设你想要改变你的实例中地址的处理方式，你的客户需要在Odoo两个字段（街道和街道2）之外的第三个字段来存储地址。你肯定是可以编写自己的插件来为res.partne添加一个字段的，但如果想要让地址在发票上以合适的格式显示，问题就要比看上去麻烦一些了。所幸，你邮件列表上的某个人告诉了你partner_address_street3插件，由OCA作为partner-contact项目的一部分进行维护。</p>\n<p>本部分中所使用的路径反映了我们在<em>标准化你的实例目录布局</em>一节中所推荐的布局。</p>\n<h3 id=\"如何安装…\"><a href=\"#如何安装…\" class=\"headerlink\" title=\"如何安装…\"></a>如何安装…</h3><p>按照如下步骤来安装partner_address_street3：</p>\n<ol>\n<li>进入你的项目目录：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/odoo-dev/my-odoo/src</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在src/目录中克隆partner-contact项目的12.0分支：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> --branch 12.0 \\https://github.com/OCA/partner-contact.git src/partner-contact</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><p>修改插件路径来包含该目录并更新你的实例中的插件列表（参见本章中的配置插件路径和更新插件模块列表一节）。instance.cfg中的addons_path一行应该是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addons_path = ~/odoo-dev/my-odoo/src/odoo/odoo/addons, \\~/odoo-dev/my-odoo/src/odoo/addons, \\~/odoo-dev/my-odoo/src/, \\~/odoo-dev/local-addons</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装partner_address_street3插件（如果你不知道如何安装该模块，参见前面一节，安装并升级本地插件模块）</p>\n</li>\n</ol>\n<h3 id=\"运行原理…-4\"><a href=\"#运行原理…-4\" class=\"headerlink\" title=\"运行原理…\"></a>运行原理…</h3><p>所有 Odoo社区联盟的代码仓库都将他们自己的插件放在单独的目录中，这与Odoo对插件路径中目录的预期是相一致的。因此，只需复制某处的仓库并将其添加到插件路径中就够了。</p>\n<h3 id=\"扩展知识…-3\"><a href=\"#扩展知识…-3\" class=\"headerlink\" title=\"扩展知识…\"></a>扩展知识…</h3><p>有些维护者遵循不同的方法，每个插件模块一个仓库，放在仓库的根目录下。这种情况下，你需要创建一个新的目录，在这个目录中添加插件路径并克隆你所需的维护者的插件到该目录中。记住在每次添加一个新仓库拷贝时要更新插件模块列表。</p>\n<h2 id=\"对插件应用修改\"><a href=\"#对插件应用修改\" class=\"headerlink\" title=\"对插件应用修改\"></a>对插件应用修改</h2><p>GitHub上可用的大部分插件需要进行修改并且不遵循Odoo对其稳定发行版所强制的规则。它们可能收到漏洞修复或改善，包含你提交的问题或功能请求，这些修改可能会引入数据库模式的修改或数据文件和视图中的更新。这一部分讲解如何安装升级后的版本。</p>\n<h3 id=\"准备工作-4\"><a href=\"#准备工作-4\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>假定你对partner_address_street3报告了一个问题并收到通知说该问题已在partner-contact项目12.0分支的最近一次修订中得以解决。这种情况下，你可以使用最新版本来更新你的实例。</p>\n<h3 id=\"如何修改…\"><a href=\"#如何修改…\" class=\"headerlink\" title=\"如何修改…\"></a>如何修改…</h3><p>要对GitHub的插件进行源的变更，需执行如下步骤：</p>\n<ol>\n<li><p>停止使用该插件的实例。</p>\n</li>\n<li><p>如果是生产实例请做一个备份（参见<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>中<em>管理Odoo服务端数据库</em>一节）。</p>\n</li>\n<li><p>进入克隆了partner-contact的目录：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/odoo-dev/my-odoo/src/partner-contact</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>为该项目创建一个本地标签，这样万一出现了崩溃你可以进行回退：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout 12.0$ git tag 12.0-before-update-$(date --iso)</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>获取源码的最新版本：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull --ff-only</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li><p>在你的数据库中更新partner_address_street3插件（参见<em>安装并升级本地插件模块</em>一节）</p>\n</li>\n<li><p>重启实例</p>\n</li>\n</ol>\n<h3 id=\"运行原理…-5\"><a href=\"#运行原理…-5\" class=\"headerlink\" title=\"运行原理…\"></a>运行原理…</h3><p>通常，插件模块的开发者有时会发布插件的最新版本。这一更新一般包含漏洞修复及新功能。这里，我们将获取一个插件的新版本并在我们的实例中更新它。</p>\n<p>如果git pull –ff-only失败的话，你可以使用如下命令回退到前一个版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  git reset --hard 12.0-before-update-$(date --iso)</span><br></pre></td></tr></table></figure>\n<p>然后，你可以尝试git pull（不添加–ff-only），它会产生一个合并，但这表示你对插件做了本地修改。</p>\n<h3 id=\"扩展知识…-4\"><a href=\"#扩展知识…-4\" class=\"headerlink\" title=\"扩展知识…\"></a>扩展知识…</h3><p>如果更新这一步崩溃了，参见<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a><em>从源码更新Odoo</em>一节获取恢复的操作指南。记住要总是在一个生产数据库的拷贝上先进行测试。</p>\n<h2 id=\"应用及尝试建议的拉取请求\"><a href=\"#应用及尝试建议的拉取请求\" class=\"headerlink\" title=\"应用及尝试建议的拉取请求\"></a>应用及尝试建议的拉取请求</h2><p>在GitHub的世界中，拉取请求（PR）是由开发者所提交的请求，这样项目维护人员可以添加一些新的开发。比如一个 PR 可能包含漏洞修复或新功能。这里请求在拉取到主分支之前会进行审核和测试。</p>\n<p>这一部分讲解如何对你的 Odoo 项目应用一个PR来测试漏洞修复的改进。</p>\n<h3 id=\"准备工作-5\"><a href=\"#准备工作-5\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>在前一节中，假定你对partner_address_street3 报告了一个问题并收到一条通知在拉取请求中问题已修复，尚未合并到项目的12.0分支中。开发人员要求你验证PR #123中的修复状况。你需要使用这一分支更新一个测试实例。</p>\n<p>你不应在生产数据库直接使用该分支，因此先创建一个带有生产数据库拷贝的测试环境（参见<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>和<a href=\"https://alanhou.org/server-deployment/\" target=\"_blank\" rel=\"noopener\">第三章 服务器部署</a>）。</p>\n<h3 id=\"如何操作…\"><a href=\"#如何操作…\" class=\"headerlink\" title=\"如何操作…\"></a>如何操作…</h3><p>应用并测试一个插件的GitHub拉取请求，你需要执行如下步骤：</p>\n<ol>\n<li><p>停止实例</p>\n</li>\n<li><p>进入partner-contact所被克隆的目录：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/odoo-dev/my-odoo/src/partner-contact</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>为该项目创建一个本地标签，这样万一出现崩溃时你可以回退：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  git checkout 12.0$ git tag 12.0-before-update-$(date --iso</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>拉取pull请求的分支。这么做最容易的方式是使用PR编号，在开发者与你沟通时你应该可以看到。在本例中，这个拉取请求编号是123：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull origin pull/123/head</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li><p>在你的数据库中更新partner_address_street3插件模块并重启该实例（如果你不知道如何更新该模块的话请参见<em>安装并升级本地插件模块</em>一节）</p>\n</li>\n<li><p>测试该更新 – 尝试重现问题，或测试你想要的功能。</p>\n</li>\n</ol>\n<p>如果这不能运行，在GitHub的PR页面进行评论，说明你做了什么以及什么不能运行，这样开发者可以更新这个拉取请求。</p>\n<p>如果它没有问题，也在PR页面说下；这是PR验证流程中非常重要的一部分；这会加速主分支中的合并。</p>\n<h3 id=\"运行原理…-6\"><a href=\"#运行原理…-6\" class=\"headerlink\" title=\"运行原理…\"></a>运行原理…</h3><p>我们在使用一个GitHub功能，使用pull/nnnn/head分支名称来通过编号进行拉取请求的拉取，其中nnnn是PR的编号。Git pull命令合并远程分支到我们的分支，在我们基础代码中应用修改。在这之后，我们更新插件模块、对其测试并向作者报回修改是成功或是失败。</p>\n<h3 id=\"扩展知识…-5\"><a href=\"#扩展知识…-5\" class=\"headerlink\" title=\"扩展知识…\"></a>扩展知识…</h3><p>如果你想要同步测试它们，你可以针对相同仓库的不同拉取请求重复本节中的第4步。如果你对结果很满意，你可以创建一个分支来保留对应用了改变的结果的引用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b 12.0-custom</span><br></pre></td></tr></table></figure>\n<p>使用一个不同的分支会帮助你记住你没有从GitHub使用该版本，而是一个自定义的版本。</p>\n<blockquote>\n<p>ℹ️git branch命令可用于列出你仓库中的所有本地分支。</p>\n</blockquote>\n<p>从这开始，如果你需要应用来自GitHub中12.0分支的最近一个审核版本，你需要不使用–ff-only来拉取它：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull origin 12.0</span><br></pre></td></tr></table></figure>\n"},{"title":"hibernate_Embedded和@Embeddable","date":"2019-08-10T02:57:59.000Z","_content":"\n在使用实体类生成对应的数据库表时，很多的时候都会遇到这种情况：在一个实体类中引用另外的实体类，一般遇上这种情况，我们使用@OneToOne、@OneToMany、@ManyToOne、@ManyToMany这4个注解比较多，但是好奇害死猫，除了这四个有没有别的使用情况，尤其是一个实体类要在多个不同的实体类中进行使用，而本身又不需要独立生成一个数据库表，这就是需要@Embedded、@Embeddable的时候了，下面分成4类来说明在一个实体类中引用另外的实体类的情况，具体的数据库环境是MySQL 5.7。\n\n使用的两个实体类如下：\n\nAddress类\n```java\npublic class Address implements Serializable{\n    private static final long serialVersionUID = 8849870114128959929L;\n\n    private String country;\n    private String province;\n    private String city;\n    private String detail;\n    \n    //setter、getter}\n```\nPerson类：\n```java\n@Entity\npublic class Person implements Serializable{\n    private static final long serialVersionUID = 8849870114127659929L;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n    \n    @Column(nullable = false)\n    private String name;\n    \n    @Column(nullable = false)\n    private Integer age;\n    \n    private Address address;\n    \n    //setter、getter\n}\n```\n# 两个注解全不使用\n当这两个注解都不使用时，那么两个实体类和上面的相同，那么生成的表结构如下： \n\n![](http://wumu.sciento.cn/img/20190810110112.png)\n\n\nAddress属性字段会映射成tinyblob类型的字段，这是用来存储不超过255字符的二进制字符串的数据类型，显然我们通常不会这么使用。\n\n# 只使用@Embeddable\n我们在Address实体类上加上@Embeddable注解，变成如下类：\n\n```java\n@Embeddable\npublic class Address implements Serializable{\n    private static final long serialVersionUID = 8849870114128959929L;\n\n    private String country;\n    private String province;\n    private String city;\n    private String detail;\n    \n    //setter、getter\n}\n```\n而Person实体类不变，生成的数据库表结构如下： \n\n![](http://wumu.sciento.cn/img/20190810110330.png)\n\n\n可以看出这次是把Address中的字段映射成数据库列嵌入到Person表中了，而这些字段的类型和长度也使用默认值。如果我们在Address中的字段中设置列的相关属性，则会按照我们设定的值去生成，如下Address类：\n```java\n@Embeddable\npublic class Address implements Serializable{\n    private static final long serialVersionUID = 8849870114128959929L;\n\n    @Column(nullable = false)\n    private String country;\n    @Column(length = 30)\n    private String province;\n    @Column(unique = true)\n    private String city;\n    @Column(length = 50)\n    private String detail;\n    //setter、getter\n}\n```\n生成的表结构如下：\n\n ![](http://wumu.sciento.cn/img/20190810110454.png)\n\n\n我们在Address中配置的属性全部成功映射到Person表中。\n\n# 只使用@Embedded\n这里我们只在Person中使用@Embedded,如下：\n```java\n@Entity\npublic class Person implements Serializable{\n    private static final long serialVersionUID = 8849870114127659929L;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n    \n    @Column(nullable = false)\n    private String name;\n    \n    @Column(nullable = false)\n    private Integer age;\n    \n    @Embedded\n    private Address address;\n    \n    //setter、getter\n}\n```\nAdddress类和最开始的不同POJO类相同，此时生成的表结构如下： \n\n![](http://wumu.sciento.cn/img/20190810110619.png)\n\n\n可以看出这个表结构和在Address中只使用@Embeddable注解时相同，在进入深一步试验，我们在Address中加入列属性，但是不使用@Embeddable注解会发生什么？ \nAddress类如下：\n```java\npublic class Address implements Serializable{\n    private static final long serialVersionUID = 8849870114128959929L;\n\n    @Column(nullable = false)\n    private String country;\n    @Column(length = 30)\n    private String province;\n    @Column(unique = true)\n    private String city;\n    @Column(length = 50)\n    private String detail;\n    //setter、getter\n}\n```\n生成数据表结构如下： \n\n![](http://wumu.sciento.cn/img/20190810110728.png)\n\n\n所以只使用@Embedded和只使用@Embeddable产生的效果是相同的。\n\n# 两个注解全使用\n既然单独使用@Embedded或者只使用@Embeddable都会产生作用，那么这两个都使用效果也一定是一样的，我们平时也是这么用的。所以在这部分我们就不演示和上面相同的效果了，而是说两个深入的话题。\n\n## 覆盖@Embeddable类中字段的列属性\n这里就要使用另外的两个注解@AttributeOverrides和@AttributeOverride，这两个注解是用来覆盖@Embeddable类中字段的属性的。\n\n@AttributeOverrides：里面只包含了@AttributeOverride类型数组；\n@AttributeOverride：包含要覆盖的@Embeddable类中字段名name和新增的@Column字段的属性；\n使用如下： \nPerson类如下：\n```java\n@Entity\npublic class Person implements Serializable{\n    private static final long serialVersionUID = 8849870114127659929L;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n    \n    @Column(nullable = false)\n    private String name;\n    \n    @Column(nullable = false)\n    private Integer age;\n    \n    @Embedded\n    @AttributeOverrides({@AttributeOverride(name=\"country\", column=@Column(name = \"person_country\", length = 25, nullable = false)),\n                        @AttributeOverride(name=\"city\", column = @Column(name = \"person_city\", length = 15))})\n    private Address address;\n    \n    //setter、getter\n}\n```\nAddress类如下：\n```java\n@Embeddable\npublic class Address implements Serializable{\n    private static final long serialVersionUID = 8849870114128959929L;\n\n    @Column(nullable = false)\n    private String country;\n    @Column(length = 30)\n    private String province;\n    @Column(unique = true)\n    private String city;\n    @Column(length = 50)\n    private String detail;\n    //setter、getter\n}\n```\n生成的数据表如下：\n\n![](http://wumu.sciento.cn/img/20190810110901.png)\n\n可以看出我们的@AttributeOverrides和@AttributeOverride两个注解起作用了。\n\n## 多层嵌入实体类属性\n上面所有的例子都是使用两层实体类嵌入，其实这种实体类的嵌入映射是可以使用多层的，具体的例子如下。 \n我们新建立一个类Direction表示方位如下：\n```java\n@Embeddable\npublic class Direction implements Serializable{\n\n    @Column(nullable = false)\n    private Integer longitude;\n    private Integer latitude;\n}\n```\nAddress如下：\n```\n@Embeddable\npublic class Address implements Serializable{\n    private static final long serialVersionUID = 8849870114128959929L;\n\n    @Column(nullable = false)\n    private String country;\n    @Column(length = 30)\n    private String province;\n    @Column(unique = true)\n    private String city;\n    @Column(length = 50)\n    private String detail;\n    \n    @Embedded\n    private Direction direction;\n}\n```\nPerson类如下：\n```java\n@Entity\npublic class Person implements Serializable{\n    private static final long serialVersionUID = 8849870114127659929L;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n    \n    @Column(nullable = false)\n    private String name;\n    \n    @Column(nullable = false)\n    private Integer age;\n    \n    @Embedded\n    @AttributeOverrides({@AttributeOverride(name=\"direction.latitude\", column=@Column(name = \"person_latitude\")),\n                        @AttributeOverride(name=\"direction.longitude\", column = @Column(name = \"person_longitude\"))})\n    private Address address;\n}\n```\n生成的数据表如下：\n\n![](http://wumu.sciento.cn/img/20190810111050.png)\n\n# 在上面需要注意如下几点：\n\n在Person中定义Direction中的属性时，需要用”.”将所有相关的属性连接起来；\n在Direction中longitude属性定义为not null，但是由于使用了@AttributeOverride注解，其中虽然没有定义null属性，但是这时使用的是默认的nullable属性，默认为true;\n\n# 参考\n> https://blog.csdn.net/lmy86263/article/details/52108130","source":"_posts/java/hibernate-@Embedded和-Embeddable.md","raw":"---\ntitle: hibernate_Embedded和@Embeddable\ndate: 2019-08-10 10:57:59\ntags: java\n---\n\n在使用实体类生成对应的数据库表时，很多的时候都会遇到这种情况：在一个实体类中引用另外的实体类，一般遇上这种情况，我们使用@OneToOne、@OneToMany、@ManyToOne、@ManyToMany这4个注解比较多，但是好奇害死猫，除了这四个有没有别的使用情况，尤其是一个实体类要在多个不同的实体类中进行使用，而本身又不需要独立生成一个数据库表，这就是需要@Embedded、@Embeddable的时候了，下面分成4类来说明在一个实体类中引用另外的实体类的情况，具体的数据库环境是MySQL 5.7。\n\n使用的两个实体类如下：\n\nAddress类\n```java\npublic class Address implements Serializable{\n    private static final long serialVersionUID = 8849870114128959929L;\n\n    private String country;\n    private String province;\n    private String city;\n    private String detail;\n    \n    //setter、getter}\n```\nPerson类：\n```java\n@Entity\npublic class Person implements Serializable{\n    private static final long serialVersionUID = 8849870114127659929L;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n    \n    @Column(nullable = false)\n    private String name;\n    \n    @Column(nullable = false)\n    private Integer age;\n    \n    private Address address;\n    \n    //setter、getter\n}\n```\n# 两个注解全不使用\n当这两个注解都不使用时，那么两个实体类和上面的相同，那么生成的表结构如下： \n\n![](http://wumu.sciento.cn/img/20190810110112.png)\n\n\nAddress属性字段会映射成tinyblob类型的字段，这是用来存储不超过255字符的二进制字符串的数据类型，显然我们通常不会这么使用。\n\n# 只使用@Embeddable\n我们在Address实体类上加上@Embeddable注解，变成如下类：\n\n```java\n@Embeddable\npublic class Address implements Serializable{\n    private static final long serialVersionUID = 8849870114128959929L;\n\n    private String country;\n    private String province;\n    private String city;\n    private String detail;\n    \n    //setter、getter\n}\n```\n而Person实体类不变，生成的数据库表结构如下： \n\n![](http://wumu.sciento.cn/img/20190810110330.png)\n\n\n可以看出这次是把Address中的字段映射成数据库列嵌入到Person表中了，而这些字段的类型和长度也使用默认值。如果我们在Address中的字段中设置列的相关属性，则会按照我们设定的值去生成，如下Address类：\n```java\n@Embeddable\npublic class Address implements Serializable{\n    private static final long serialVersionUID = 8849870114128959929L;\n\n    @Column(nullable = false)\n    private String country;\n    @Column(length = 30)\n    private String province;\n    @Column(unique = true)\n    private String city;\n    @Column(length = 50)\n    private String detail;\n    //setter、getter\n}\n```\n生成的表结构如下：\n\n ![](http://wumu.sciento.cn/img/20190810110454.png)\n\n\n我们在Address中配置的属性全部成功映射到Person表中。\n\n# 只使用@Embedded\n这里我们只在Person中使用@Embedded,如下：\n```java\n@Entity\npublic class Person implements Serializable{\n    private static final long serialVersionUID = 8849870114127659929L;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n    \n    @Column(nullable = false)\n    private String name;\n    \n    @Column(nullable = false)\n    private Integer age;\n    \n    @Embedded\n    private Address address;\n    \n    //setter、getter\n}\n```\nAdddress类和最开始的不同POJO类相同，此时生成的表结构如下： \n\n![](http://wumu.sciento.cn/img/20190810110619.png)\n\n\n可以看出这个表结构和在Address中只使用@Embeddable注解时相同，在进入深一步试验，我们在Address中加入列属性，但是不使用@Embeddable注解会发生什么？ \nAddress类如下：\n```java\npublic class Address implements Serializable{\n    private static final long serialVersionUID = 8849870114128959929L;\n\n    @Column(nullable = false)\n    private String country;\n    @Column(length = 30)\n    private String province;\n    @Column(unique = true)\n    private String city;\n    @Column(length = 50)\n    private String detail;\n    //setter、getter\n}\n```\n生成数据表结构如下： \n\n![](http://wumu.sciento.cn/img/20190810110728.png)\n\n\n所以只使用@Embedded和只使用@Embeddable产生的效果是相同的。\n\n# 两个注解全使用\n既然单独使用@Embedded或者只使用@Embeddable都会产生作用，那么这两个都使用效果也一定是一样的，我们平时也是这么用的。所以在这部分我们就不演示和上面相同的效果了，而是说两个深入的话题。\n\n## 覆盖@Embeddable类中字段的列属性\n这里就要使用另外的两个注解@AttributeOverrides和@AttributeOverride，这两个注解是用来覆盖@Embeddable类中字段的属性的。\n\n@AttributeOverrides：里面只包含了@AttributeOverride类型数组；\n@AttributeOverride：包含要覆盖的@Embeddable类中字段名name和新增的@Column字段的属性；\n使用如下： \nPerson类如下：\n```java\n@Entity\npublic class Person implements Serializable{\n    private static final long serialVersionUID = 8849870114127659929L;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n    \n    @Column(nullable = false)\n    private String name;\n    \n    @Column(nullable = false)\n    private Integer age;\n    \n    @Embedded\n    @AttributeOverrides({@AttributeOverride(name=\"country\", column=@Column(name = \"person_country\", length = 25, nullable = false)),\n                        @AttributeOverride(name=\"city\", column = @Column(name = \"person_city\", length = 15))})\n    private Address address;\n    \n    //setter、getter\n}\n```\nAddress类如下：\n```java\n@Embeddable\npublic class Address implements Serializable{\n    private static final long serialVersionUID = 8849870114128959929L;\n\n    @Column(nullable = false)\n    private String country;\n    @Column(length = 30)\n    private String province;\n    @Column(unique = true)\n    private String city;\n    @Column(length = 50)\n    private String detail;\n    //setter、getter\n}\n```\n生成的数据表如下：\n\n![](http://wumu.sciento.cn/img/20190810110901.png)\n\n可以看出我们的@AttributeOverrides和@AttributeOverride两个注解起作用了。\n\n## 多层嵌入实体类属性\n上面所有的例子都是使用两层实体类嵌入，其实这种实体类的嵌入映射是可以使用多层的，具体的例子如下。 \n我们新建立一个类Direction表示方位如下：\n```java\n@Embeddable\npublic class Direction implements Serializable{\n\n    @Column(nullable = false)\n    private Integer longitude;\n    private Integer latitude;\n}\n```\nAddress如下：\n```\n@Embeddable\npublic class Address implements Serializable{\n    private static final long serialVersionUID = 8849870114128959929L;\n\n    @Column(nullable = false)\n    private String country;\n    @Column(length = 30)\n    private String province;\n    @Column(unique = true)\n    private String city;\n    @Column(length = 50)\n    private String detail;\n    \n    @Embedded\n    private Direction direction;\n}\n```\nPerson类如下：\n```java\n@Entity\npublic class Person implements Serializable{\n    private static final long serialVersionUID = 8849870114127659929L;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n    \n    @Column(nullable = false)\n    private String name;\n    \n    @Column(nullable = false)\n    private Integer age;\n    \n    @Embedded\n    @AttributeOverrides({@AttributeOverride(name=\"direction.latitude\", column=@Column(name = \"person_latitude\")),\n                        @AttributeOverride(name=\"direction.longitude\", column = @Column(name = \"person_longitude\"))})\n    private Address address;\n}\n```\n生成的数据表如下：\n\n![](http://wumu.sciento.cn/img/20190810111050.png)\n\n# 在上面需要注意如下几点：\n\n在Person中定义Direction中的属性时，需要用”.”将所有相关的属性连接起来；\n在Direction中longitude属性定义为not null，但是由于使用了@AttributeOverride注解，其中虽然没有定义null属性，但是这时使用的是默认的nullable属性，默认为true;\n\n# 参考\n> https://blog.csdn.net/lmy86263/article/details/52108130","slug":"java/hibernate-@Embedded和-Embeddable","published":1,"updated":"2019-10-14T09:01:07.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a4470045ic1y5eyhdog4","content":"<p>在使用实体类生成对应的数据库表时，很多的时候都会遇到这种情况：在一个实体类中引用另外的实体类，一般遇上这种情况，我们使用@OneToOne、@OneToMany、@ManyToOne、@ManyToMany这4个注解比较多，但是好奇害死猫，除了这四个有没有别的使用情况，尤其是一个实体类要在多个不同的实体类中进行使用，而本身又不需要独立生成一个数据库表，这就是需要@Embedded、@Embeddable的时候了，下面分成4类来说明在一个实体类中引用另外的实体类的情况，具体的数据库环境是MySQL 5.7。</p>\n<p>使用的两个实体类如下：</p>\n<p>Address类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114128959929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String country;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String province;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String detail;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//setter、getter&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>Person类：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114127659929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Address address;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//setter、getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"两个注解全不使用\"><a href=\"#两个注解全不使用\" class=\"headerlink\" title=\"两个注解全不使用\"></a>两个注解全不使用</h1><p>当这两个注解都不使用时，那么两个实体类和上面的相同，那么生成的表结构如下： </p>\n<p><img src=\"http://wumu.sciento.cn/img/20190810110112.png\" alt=\"\"></p>\n<p>Address属性字段会映射成tinyblob类型的字段，这是用来存储不超过255字符的二进制字符串的数据类型，显然我们通常不会这么使用。</p>\n<h1 id=\"只使用-Embeddable\"><a href=\"#只使用-Embeddable\" class=\"headerlink\" title=\"只使用@Embeddable\"></a>只使用@Embeddable</h1><p>我们在Address实体类上加上@Embeddable注解，变成如下类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Embeddable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114128959929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String country;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String province;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String detail;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//setter、getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而Person实体类不变，生成的数据库表结构如下： </p>\n<p><img src=\"http://wumu.sciento.cn/img/20190810110330.png\" alt=\"\"></p>\n<p>可以看出这次是把Address中的字段映射成数据库列嵌入到Person表中了，而这些字段的类型和长度也使用默认值。如果我们在Address中的字段中设置列的相关属性，则会按照我们设定的值去生成，如下Address类：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Embeddable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114128959929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String country;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(length = <span class=\"number\">30</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String province;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(unique = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(length = <span class=\"number\">50</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String detail;</span><br><span class=\"line\">    <span class=\"comment\">//setter、getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成的表结构如下：</p>\n<p> <img src=\"http://wumu.sciento.cn/img/20190810110454.png\" alt=\"\"></p>\n<p>我们在Address中配置的属性全部成功映射到Person表中。</p>\n<h1 id=\"只使用-Embedded\"><a href=\"#只使用-Embedded\" class=\"headerlink\" title=\"只使用@Embedded\"></a>只使用@Embedded</h1><p>这里我们只在Person中使用@Embedded,如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114127659929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Embedded</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Address address;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//setter、getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Adddress类和最开始的不同POJO类相同，此时生成的表结构如下： </p>\n<p><img src=\"http://wumu.sciento.cn/img/20190810110619.png\" alt=\"\"></p>\n<p>可以看出这个表结构和在Address中只使用@Embeddable注解时相同，在进入深一步试验，我们在Address中加入列属性，但是不使用@Embeddable注解会发生什么？<br>Address类如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114128959929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String country;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(length = <span class=\"number\">30</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String province;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(unique = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(length = <span class=\"number\">50</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String detail;</span><br><span class=\"line\">    <span class=\"comment\">//setter、getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成数据表结构如下： </p>\n<p><img src=\"http://wumu.sciento.cn/img/20190810110728.png\" alt=\"\"></p>\n<p>所以只使用@Embedded和只使用@Embeddable产生的效果是相同的。</p>\n<h1 id=\"两个注解全使用\"><a href=\"#两个注解全使用\" class=\"headerlink\" title=\"两个注解全使用\"></a>两个注解全使用</h1><p>既然单独使用@Embedded或者只使用@Embeddable都会产生作用，那么这两个都使用效果也一定是一样的，我们平时也是这么用的。所以在这部分我们就不演示和上面相同的效果了，而是说两个深入的话题。</p>\n<h2 id=\"覆盖-Embeddable类中字段的列属性\"><a href=\"#覆盖-Embeddable类中字段的列属性\" class=\"headerlink\" title=\"覆盖@Embeddable类中字段的列属性\"></a>覆盖@Embeddable类中字段的列属性</h2><p>这里就要使用另外的两个注解@AttributeOverrides和@AttributeOverride，这两个注解是用来覆盖@Embeddable类中字段的属性的。</p>\n<p>@AttributeOverrides：里面只包含了@AttributeOverride类型数组；<br>@AttributeOverride：包含要覆盖的@Embeddable类中字段名name和新增的@Column字段的属性；<br>使用如下：<br>Person类如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114127659929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Embedded</span></span><br><span class=\"line\">    <span class=\"meta\">@AttributeOverrides</span>(&#123;<span class=\"meta\">@AttributeOverride</span>(name=<span class=\"string\">\"country\"</span>, column=<span class=\"meta\">@Column</span>(name = <span class=\"string\">\"person_country\"</span>, length = <span class=\"number\">25</span>, nullable = <span class=\"keyword\">false</span>)),</span><br><span class=\"line\">                        <span class=\"meta\">@AttributeOverride</span>(name=<span class=\"string\">\"city\"</span>, column = <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"person_city\"</span>, length = <span class=\"number\">15</span>))&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Address address;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//setter、getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Address类如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Embeddable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114128959929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String country;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(length = <span class=\"number\">30</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String province;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(unique = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(length = <span class=\"number\">50</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String detail;</span><br><span class=\"line\">    <span class=\"comment\">//setter、getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成的数据表如下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://wumu.sciento.cn/img/20190810110901.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>可以看出我们的@AttributeOverrides和@AttributeOverride两个注解起作用了。</p>\n<h2 id=\"多层嵌入实体类属性\"><a href=\"#多层嵌入实体类属性\" class=\"headerlink\" title=\"多层嵌入实体类属性\"></a>多层嵌入实体类属性</h2><p>上面所有的例子都是使用两层实体类嵌入，其实这种实体类的嵌入映射是可以使用多层的，具体的例子如下。<br>我们新建立一个类Direction表示方位如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Embeddable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Direction</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer longitude;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer latitude;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Address如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Embeddable</span><br><span class=\"line\">public class Address implements Serializable&#123;</span><br><span class=\"line\">    private static final long serialVersionUID = 8849870114128959929L;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Column(nullable = false)</span><br><span class=\"line\">    private String country;</span><br><span class=\"line\">    @Column(length = 30)</span><br><span class=\"line\">    private String province;</span><br><span class=\"line\">    @Column(unique = true)</span><br><span class=\"line\">    private String city;</span><br><span class=\"line\">    @Column(length = 50)</span><br><span class=\"line\">    private String detail;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Embedded</span><br><span class=\"line\">    private Direction direction;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Person类如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114127659929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Embedded</span></span><br><span class=\"line\">    <span class=\"meta\">@AttributeOverrides</span>(&#123;<span class=\"meta\">@AttributeOverride</span>(name=<span class=\"string\">\"direction.latitude\"</span>, column=<span class=\"meta\">@Column</span>(name = <span class=\"string\">\"person_latitude\"</span>)),</span><br><span class=\"line\">                        <span class=\"meta\">@AttributeOverride</span>(name=<span class=\"string\">\"direction.longitude\"</span>, column = <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"person_longitude\"</span>))&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Address address;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成的数据表如下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://wumu.sciento.cn/img/20190810111050.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h1 id=\"在上面需要注意如下几点：\"><a href=\"#在上面需要注意如下几点：\" class=\"headerlink\" title=\"在上面需要注意如下几点：\"></a>在上面需要注意如下几点：</h1><p>在Person中定义Direction中的属性时，需要用”.”将所有相关的属性连接起来；<br>在Direction中longitude属性定义为not null，但是由于使用了@AttributeOverride注解，其中虽然没有定义null属性，但是这时使用的是默认的nullable属性，默认为true;</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://blog.csdn.net/lmy86263/article/details/52108130\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/lmy86263/article/details/52108130</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>在使用实体类生成对应的数据库表时，很多的时候都会遇到这种情况：在一个实体类中引用另外的实体类，一般遇上这种情况，我们使用@OneToOne、@OneToMany、@ManyToOne、@ManyToMany这4个注解比较多，但是好奇害死猫，除了这四个有没有别的使用情况，尤其是一个实体类要在多个不同的实体类中进行使用，而本身又不需要独立生成一个数据库表，这就是需要@Embedded、@Embeddable的时候了，下面分成4类来说明在一个实体类中引用另外的实体类的情况，具体的数据库环境是MySQL 5.7。</p>\n<p>使用的两个实体类如下：</p>\n<p>Address类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114128959929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String country;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String province;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String detail;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//setter、getter&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>Person类：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114127659929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Address address;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//setter、getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"两个注解全不使用\"><a href=\"#两个注解全不使用\" class=\"headerlink\" title=\"两个注解全不使用\"></a>两个注解全不使用</h1><p>当这两个注解都不使用时，那么两个实体类和上面的相同，那么生成的表结构如下： </p>\n<p><img src=\"http://wumu.sciento.cn/img/20190810110112.png\" alt=\"\"></p>\n<p>Address属性字段会映射成tinyblob类型的字段，这是用来存储不超过255字符的二进制字符串的数据类型，显然我们通常不会这么使用。</p>\n<h1 id=\"只使用-Embeddable\"><a href=\"#只使用-Embeddable\" class=\"headerlink\" title=\"只使用@Embeddable\"></a>只使用@Embeddable</h1><p>我们在Address实体类上加上@Embeddable注解，变成如下类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Embeddable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114128959929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String country;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String province;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String detail;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//setter、getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而Person实体类不变，生成的数据库表结构如下： </p>\n<p><img src=\"http://wumu.sciento.cn/img/20190810110330.png\" alt=\"\"></p>\n<p>可以看出这次是把Address中的字段映射成数据库列嵌入到Person表中了，而这些字段的类型和长度也使用默认值。如果我们在Address中的字段中设置列的相关属性，则会按照我们设定的值去生成，如下Address类：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Embeddable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114128959929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String country;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(length = <span class=\"number\">30</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String province;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(unique = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(length = <span class=\"number\">50</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String detail;</span><br><span class=\"line\">    <span class=\"comment\">//setter、getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成的表结构如下：</p>\n<p> <img src=\"http://wumu.sciento.cn/img/20190810110454.png\" alt=\"\"></p>\n<p>我们在Address中配置的属性全部成功映射到Person表中。</p>\n<h1 id=\"只使用-Embedded\"><a href=\"#只使用-Embedded\" class=\"headerlink\" title=\"只使用@Embedded\"></a>只使用@Embedded</h1><p>这里我们只在Person中使用@Embedded,如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114127659929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Embedded</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Address address;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//setter、getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Adddress类和最开始的不同POJO类相同，此时生成的表结构如下： </p>\n<p><img src=\"http://wumu.sciento.cn/img/20190810110619.png\" alt=\"\"></p>\n<p>可以看出这个表结构和在Address中只使用@Embeddable注解时相同，在进入深一步试验，我们在Address中加入列属性，但是不使用@Embeddable注解会发生什么？<br>Address类如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114128959929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String country;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(length = <span class=\"number\">30</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String province;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(unique = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(length = <span class=\"number\">50</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String detail;</span><br><span class=\"line\">    <span class=\"comment\">//setter、getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成数据表结构如下： </p>\n<p><img src=\"http://wumu.sciento.cn/img/20190810110728.png\" alt=\"\"></p>\n<p>所以只使用@Embedded和只使用@Embeddable产生的效果是相同的。</p>\n<h1 id=\"两个注解全使用\"><a href=\"#两个注解全使用\" class=\"headerlink\" title=\"两个注解全使用\"></a>两个注解全使用</h1><p>既然单独使用@Embedded或者只使用@Embeddable都会产生作用，那么这两个都使用效果也一定是一样的，我们平时也是这么用的。所以在这部分我们就不演示和上面相同的效果了，而是说两个深入的话题。</p>\n<h2 id=\"覆盖-Embeddable类中字段的列属性\"><a href=\"#覆盖-Embeddable类中字段的列属性\" class=\"headerlink\" title=\"覆盖@Embeddable类中字段的列属性\"></a>覆盖@Embeddable类中字段的列属性</h2><p>这里就要使用另外的两个注解@AttributeOverrides和@AttributeOverride，这两个注解是用来覆盖@Embeddable类中字段的属性的。</p>\n<p>@AttributeOverrides：里面只包含了@AttributeOverride类型数组；<br>@AttributeOverride：包含要覆盖的@Embeddable类中字段名name和新增的@Column字段的属性；<br>使用如下：<br>Person类如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114127659929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Embedded</span></span><br><span class=\"line\">    <span class=\"meta\">@AttributeOverrides</span>(&#123;<span class=\"meta\">@AttributeOverride</span>(name=<span class=\"string\">\"country\"</span>, column=<span class=\"meta\">@Column</span>(name = <span class=\"string\">\"person_country\"</span>, length = <span class=\"number\">25</span>, nullable = <span class=\"keyword\">false</span>)),</span><br><span class=\"line\">                        <span class=\"meta\">@AttributeOverride</span>(name=<span class=\"string\">\"city\"</span>, column = <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"person_city\"</span>, length = <span class=\"number\">15</span>))&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Address address;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//setter、getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Address类如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Embeddable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114128959929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String country;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(length = <span class=\"number\">30</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String province;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(unique = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(length = <span class=\"number\">50</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String detail;</span><br><span class=\"line\">    <span class=\"comment\">//setter、getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成的数据表如下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://wumu.sciento.cn/img/20190810110901.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>可以看出我们的@AttributeOverrides和@AttributeOverride两个注解起作用了。</p>\n<h2 id=\"多层嵌入实体类属性\"><a href=\"#多层嵌入实体类属性\" class=\"headerlink\" title=\"多层嵌入实体类属性\"></a>多层嵌入实体类属性</h2><p>上面所有的例子都是使用两层实体类嵌入，其实这种实体类的嵌入映射是可以使用多层的，具体的例子如下。<br>我们新建立一个类Direction表示方位如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Embeddable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Direction</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer longitude;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer latitude;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Address如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Embeddable</span><br><span class=\"line\">public class Address implements Serializable&#123;</span><br><span class=\"line\">    private static final long serialVersionUID = 8849870114128959929L;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Column(nullable = false)</span><br><span class=\"line\">    private String country;</span><br><span class=\"line\">    @Column(length = 30)</span><br><span class=\"line\">    private String province;</span><br><span class=\"line\">    @Column(unique = true)</span><br><span class=\"line\">    private String city;</span><br><span class=\"line\">    @Column(length = 50)</span><br><span class=\"line\">    private String detail;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Embedded</span><br><span class=\"line\">    private Direction direction;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Person类如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114127659929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Embedded</span></span><br><span class=\"line\">    <span class=\"meta\">@AttributeOverrides</span>(&#123;<span class=\"meta\">@AttributeOverride</span>(name=<span class=\"string\">\"direction.latitude\"</span>, column=<span class=\"meta\">@Column</span>(name = <span class=\"string\">\"person_latitude\"</span>)),</span><br><span class=\"line\">                        <span class=\"meta\">@AttributeOverride</span>(name=<span class=\"string\">\"direction.longitude\"</span>, column = <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"person_longitude\"</span>))&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Address address;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成的数据表如下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://wumu.sciento.cn/img/20190810111050.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h1 id=\"在上面需要注意如下几点：\"><a href=\"#在上面需要注意如下几点：\" class=\"headerlink\" title=\"在上面需要注意如下几点：\"></a>在上面需要注意如下几点：</h1><p>在Person中定义Direction中的属性时，需要用”.”将所有相关的属性连接起来；<br>在Direction中longitude属性定义为not null，但是由于使用了@AttributeOverride注解，其中虽然没有定义null属性，但是这时使用的是默认的nullable属性，默认为true;</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://blog.csdn.net/lmy86263/article/details/52108130\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/lmy86263/article/details/52108130</a></p>\n</blockquote>\n"},{"_content":"title: java-线程池\ndate: 2019-04-10 10:32:39\ntags:\n\n- java\n\n## 1. 线程池的关系\n\nExecutorService```提供一些声明周期管理方法\n\n![1536473588949](assets/1536473588949.png)\n\n## 2. ```Executor\n\n```\npublic interface Executor {\n    void execute(Runnable command);\n}\n```\n\n## 3.\n\n```\njavapublic abstract class AbstractExecutorService implements ExecutorService {    // RunnableFuture 是用于获取执行结果的，我们常用它的子类 FutureTask    // 下面两个 newTaskFor 方法用于将我们的任务包装成 FutureTask 提交到线程池中执行    protected <T> RunnableFuture<T> newTaskFor(Runnable runnable, T value) {        return new FutureTask<T>(runnable, value);    }    protected <T> RunnableFuture<T> newTaskFor(Callable<T> callable) {        return new FutureTask<T>(callable);    }    // 提交任务    public Future<?> submit(Runnable task) {        if (task == null) throw new NullPointerException();        RunnableFuture<Void> ftask = newTaskFor(task, null);        execute(ftask);        return ftask;    }    /**     * @throws RejectedExecutionException {@inheritDoc}     * @throws NullPointerException       {@inheritDoc}     */    public <T> Future<T> submit(Runnable task, T result) {        if (task == null) throw new NullPointerException();         // 1. 将任务包装成 FutureTask        RunnableFuture<T> ftask = newTaskFor(task, result);        // 2. 交给执行器执行，execute 方法由具体的子类来实现        // 前面也说了，FutureTask 间接实现了Runnable 接口。        execute(ftask);        return ftask;    }    public <T> Future<T> submit(Callable<T> task) {        if (task == null) throw new NullPointerException();        RunnableFuture<T> ftask = newTaskFor(task);        execute(ftask);        return ftask;    }     // 此方法目的：将 tasks 集合中的任务提交到线程池执行，任意一个线程执行完后就可以结束了    // 第二个参数 timed 代表是否设置超时机制，超时时间为第三个参数，    // 如果 timed 为 true，同时超时了还没有一个线程返回结果，那么抛出 TimeoutException 异常    private <T> T doInvokeAny(Collection<? extends Callable<T>> tasks,                              boolean timed, long nanos)        throws InterruptedException, ExecutionException, TimeoutException {        if (tasks == null)            throw new NullPointerException();        int ntasks = tasks.size();        if (ntasks == 0)            throw new IllegalArgumentException();        ArrayList<Future<T>> futures = new ArrayList<Future<T>>(ntasks);         // ExecutorCompletionService 不是一个真正的执行器，参数 this 才是真正的执行器        // 它对执行器进行了包装，每个任务结束后，将结果保存到内部的一个 completionQueue 队列中        // 这也是为什么这个类的名字里面有个 Completion 的原因吧。        ExecutorCompletionService<T> ecs =            new ExecutorCompletionService<T>(this);        // For efficiency, especially in executors with limited        // parallelism, check to see if previously submitted tasks are        // done before submitting more of them. This interleaving        // plus the exception mechanics account for messiness of main        // loop.        try {            // 用于保存异常信息，此方法如果没有得到任何有效的结果，那么我们可以抛出最后得到的一个异常            ExecutionException ee = null;            final long deadline = timed ? System.nanoTime() + nanos : 0L;            Iterator<? extends Callable<T>> it = tasks.iterator();             // 首先先提交一个任务，后面的任务到下面的 for 循环一个个提交            futures.add(ecs.submit(it.next()));            --ntasks;            int active = 1;            for (;;) {                // ecs 上面说了，其内部有一个 completionQueue 用于保存执行完成的结果                // BlockingQueue 的 poll 方法不阻塞，返回 null 代表队列为空                Future<T> f = ecs.poll();                 // 为 null，说明刚刚提交的第一个线程还没有执行完成                // 在前面先提交一个任务，加上这里做一次检查，也是为了提高性能                if (f == null) {                    if (ntasks > 0) {                        --ntasks;                        futures.add(ecs.submit(it.next()));                        ++active;                    }                     // 这里是 else if，不是 if。这里说明，没有任务了，同时 active 为 0 说明                    // 任务都执行完成了。其实我也没理解为什么这里做一次 break？                    // 因为我认为 active 为 0 的情况，必然从下面的 f.get() 返回了                    else if (active == 0)                        break;                     // 这里也是 else if。这里说的是，没有任务了，但是设置了超时时间，这里检测是否超时                    else if (timed) {                        f = ecs.poll(nanos, TimeUnit.NANOSECONDS);                        if (f == null)                            throw new TimeoutException();                        nanos = deadline - System.nanoTime();                    }                    else                   // else。说明，没有任务需要提交，但是池中的任务没有完成，还没有超时(如果设置了超时)                    // take() 方法会阻塞，直到有元素返回，说明有任务结束了                        f = ecs.take();                }                // 有任务结束了                if (f != null) {                    --active;                    try {                        // 返回执行结果，如果有异常，都包装成 ExecutionException                        return f.get();                    } catch (ExecutionException eex) {                        ee = eex;                    } catch (RuntimeException rex) {                        ee = new ExecutionException(rex);                    }                }            }            if (ee == null)                ee = new ExecutionException();            throw ee;        } finally {            for (int i = 0, size = futures.size(); i < size; i++)                futures.get(i).cancel(true);        }    }    public <T> T invokeAny(Collection<? extends Callable<T>> tasks)        throws InterruptedException, ExecutionException {        try {            return doInvokeAny(tasks, false, 0);        } catch (TimeoutException cannotHappen) {            assert false;            return null;        }    }    public <T> T invokeAny(Collection<? extends Callable<T>> tasks,                           long timeout, TimeUnit unit)        throws InterruptedException, ExecutionException, TimeoutException {        return doInvokeAny(tasks, true, unit.toNanos(timeout));    }      // 执行所有的任务，返回任务结果。    // 先不要看这个方法，我们先想想，其实我们自己提交任务到线程池，也是想要线程池执行所有的任务    // 只不过，我们是每次 submit 一个任务，这里以一个集合作为参数提交    public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks)        throws InterruptedException {        if (tasks == null)            throw new NullPointerException();        ArrayList<Future<T>> futures = new ArrayList<Future<T>>(tasks.size());        boolean done = false;        try {            for (Callable<T> t : tasks) {                RunnableFuture<T> f = newTaskFor(t);                futures.add(f);                execute(f);            }            for (int i = 0, size = futures.size(); i < size; i++) {                Future<T> f = futures.get(i);                if (!f.isDone()) {                    try {                       // 这是一个阻塞方法，直到获取到值，或抛出了异常                       // 这里有个小细节，其实 get 方法签名上是会抛出 InterruptedException 的                       // 可是这里没有进行处理，而是抛给外层去了。此异常发生于还没执行完的任务被取消了                        f.get();                    } catch (CancellationException ignore) {                    } catch (ExecutionException ignore) {                    }                }            }            done = true;            return futures;        } finally {            if (!done)                for (int i = 0, size = futures.size(); i < size; i++)                    futures.get(i).cancel(true);        }    }    public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks,                                         long timeout, TimeUnit unit)        throws InterruptedException {        if (tasks == null)            throw new NullPointerException();        long nanos = unit.toNanos(timeout);        ArrayList<Future<T>> futures = new ArrayList<Future<T>>(tasks.size());        boolean done = false;        try {            for (Callable<T> t : tasks)                futures.add(newTaskFor(t));            final long deadline = System.nanoTime() + nanos;            final int size = futures.size();            // Interleave time checks and calls to execute in case            // executor doesn't have any/much parallelism.            for (int i = 0; i < size; i++) {                execute((Runnable)futures.get(i));                nanos = deadline - System.nanoTime();                if (nanos <= 0L)                    return futures;            }            for (int i = 0; i < size; i++) {                Future<T> f = futures.get(i);                if (!f.isDone()) {                    if (nanos <= 0L)                        return futures;                    try {                        f.get(nanos, TimeUnit.NANOSECONDS);                    } catch (CancellationException ignore) {                    } catch (ExecutionException ignore) {                    } catch (TimeoutException toe) {                        return futures;                    }                    nanos = deadline - System.nanoTime();                }            }            done = true;            return futures;        } finally {            if (!done)                for (int i = 0, size = futures.size(); i < size; i++)                    futures.get(i).cancel(true);        }    }}`\n\n```\n\n## 4.\n\n```\njava/**     * The main pool control state, ctl, is an atomic integer packing     * two conceptual fields     *   workerCount, indicating the effective number of threads     *   runState,    indicating whether running, shutting down etc     *     * In order to pack them into one int, we limit workerCount to     * (2^29)-1 (about 500 million) threads rather than (2^31)-1 (2     * billion) otherwise representable. If this is ever an issue in     * the future, the variable can be changed to be an AtomicLong,     * and the shift/mask constants below adjusted. But until the need     * arises, this code is a bit faster and simpler using an int.     *     * The workerCount is the number of workers that have been     * permitted to start and not permitted to stop.  The value may be     * transiently different from the actual number of live threads,     * for example when a ThreadFactory fails to create a thread when     * asked, and when exiting threads are still performing     * bookkeeping before terminating. The user-visible pool size is     * reported as the current size of the workers set.     *     * The runState provides the main lifecycle control, taking on values:     *     *   RUNNING:  Accept new tasks and process queued tasks     *   SHUTDOWN: Don't accept new tasks, but process queued tasks     *   STOP:     Don't accept new tasks, don't process queued tasks,     *             and interrupt in-progress tasks     *   TIDYING:  All tasks have terminated, workerCount is zero,     *             the thread transitioning to state TIDYING     *             will run the terminated() hook method     *   TERMINATED: terminated() has completed     *     * The numerical order among these values matters, to allow     * ordered comparisons. The runState monotonically increases over     * time, but need not hit each state. The transitions are:     *     * RUNNING -> SHUTDOWN     *    On invocation of shutdown(), perhaps implicitly in finalize()     * (RUNNING or SHUTDOWN) -> STOP     *    On invocation of shutdownNow()     * SHUTDOWN -> TIDYING     *    When both queue and pool are empty     * STOP -> TIDYING     *    When pool is empty     * TIDYING -> TERMINATED     *    When the terminated() hook method has completed     *     * Threads waiting in awaitTermination() will return when the     * state reaches TERMINATED.     *     * Detecting the transition from SHUTDOWN to TIDYING is less     * straightforward than you'd like because the queue may become     * empty after non-empty and vice versa during SHUTDOWN state, but     * we can only terminate if, after seeing that it is empty, we see     * that workerCount is 0 (which sometimes entails a recheck -- see     * below).     */    private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));public void execute(Runnable command) {        if (command == null)            throw new NullPointerException();        /*         * Proceed in 3 steps:         *         * 1. If fewer than corePoolSize threads are running, try to         * start a new thread with the given command as its first         * task.  The call to addWorker atomically checks runState and         * workerCount, and so prevents false alarms that would add         * threads when it shouldn't, by returning false.         *         * 2. If a task can be successfully queued, then we still need         * to double-check whether we should have added a thread         * (because existing ones died since last checking) or that         * the pool shut down since entry into this method. So we         * recheck state and if necessary roll back the enqueuing if         * stopped, or start a new thread if there are none.         *         * 3. If we cannot queue task, then we try to add a new         * thread.  If it fails, we know we are shut down or saturated         * and so reject the task.         */        int c = ctl.get();        if (workerCountOf(c) < corePoolSize) {            if (addWorker(command, true))                return;            c = ctl.get();        }        if (isRunning(c) && workQueue.offer(command)) {            int recheck = ctl.get();            if (! isRunning(recheck) && remove(command))                reject(command);            else if (workerCountOf(recheck) == 0)                addWorker(null, false);        }        else if (!addWorker(command, false))            reject(command);    }`\n```","source":"_posts/java/java-线程池.md","raw":"title: java-线程池\ndate: 2019-04-10 10:32:39\ntags:\n\n- java\n\n## 1. 线程池的关系\n\nExecutorService```提供一些声明周期管理方法\n\n![1536473588949](assets/1536473588949.png)\n\n## 2. ```Executor\n\n```\npublic interface Executor {\n    void execute(Runnable command);\n}\n```\n\n## 3.\n\n```\njavapublic abstract class AbstractExecutorService implements ExecutorService {    // RunnableFuture 是用于获取执行结果的，我们常用它的子类 FutureTask    // 下面两个 newTaskFor 方法用于将我们的任务包装成 FutureTask 提交到线程池中执行    protected <T> RunnableFuture<T> newTaskFor(Runnable runnable, T value) {        return new FutureTask<T>(runnable, value);    }    protected <T> RunnableFuture<T> newTaskFor(Callable<T> callable) {        return new FutureTask<T>(callable);    }    // 提交任务    public Future<?> submit(Runnable task) {        if (task == null) throw new NullPointerException();        RunnableFuture<Void> ftask = newTaskFor(task, null);        execute(ftask);        return ftask;    }    /**     * @throws RejectedExecutionException {@inheritDoc}     * @throws NullPointerException       {@inheritDoc}     */    public <T> Future<T> submit(Runnable task, T result) {        if (task == null) throw new NullPointerException();         // 1. 将任务包装成 FutureTask        RunnableFuture<T> ftask = newTaskFor(task, result);        // 2. 交给执行器执行，execute 方法由具体的子类来实现        // 前面也说了，FutureTask 间接实现了Runnable 接口。        execute(ftask);        return ftask;    }    public <T> Future<T> submit(Callable<T> task) {        if (task == null) throw new NullPointerException();        RunnableFuture<T> ftask = newTaskFor(task);        execute(ftask);        return ftask;    }     // 此方法目的：将 tasks 集合中的任务提交到线程池执行，任意一个线程执行完后就可以结束了    // 第二个参数 timed 代表是否设置超时机制，超时时间为第三个参数，    // 如果 timed 为 true，同时超时了还没有一个线程返回结果，那么抛出 TimeoutException 异常    private <T> T doInvokeAny(Collection<? extends Callable<T>> tasks,                              boolean timed, long nanos)        throws InterruptedException, ExecutionException, TimeoutException {        if (tasks == null)            throw new NullPointerException();        int ntasks = tasks.size();        if (ntasks == 0)            throw new IllegalArgumentException();        ArrayList<Future<T>> futures = new ArrayList<Future<T>>(ntasks);         // ExecutorCompletionService 不是一个真正的执行器，参数 this 才是真正的执行器        // 它对执行器进行了包装，每个任务结束后，将结果保存到内部的一个 completionQueue 队列中        // 这也是为什么这个类的名字里面有个 Completion 的原因吧。        ExecutorCompletionService<T> ecs =            new ExecutorCompletionService<T>(this);        // For efficiency, especially in executors with limited        // parallelism, check to see if previously submitted tasks are        // done before submitting more of them. This interleaving        // plus the exception mechanics account for messiness of main        // loop.        try {            // 用于保存异常信息，此方法如果没有得到任何有效的结果，那么我们可以抛出最后得到的一个异常            ExecutionException ee = null;            final long deadline = timed ? System.nanoTime() + nanos : 0L;            Iterator<? extends Callable<T>> it = tasks.iterator();             // 首先先提交一个任务，后面的任务到下面的 for 循环一个个提交            futures.add(ecs.submit(it.next()));            --ntasks;            int active = 1;            for (;;) {                // ecs 上面说了，其内部有一个 completionQueue 用于保存执行完成的结果                // BlockingQueue 的 poll 方法不阻塞，返回 null 代表队列为空                Future<T> f = ecs.poll();                 // 为 null，说明刚刚提交的第一个线程还没有执行完成                // 在前面先提交一个任务，加上这里做一次检查，也是为了提高性能                if (f == null) {                    if (ntasks > 0) {                        --ntasks;                        futures.add(ecs.submit(it.next()));                        ++active;                    }                     // 这里是 else if，不是 if。这里说明，没有任务了，同时 active 为 0 说明                    // 任务都执行完成了。其实我也没理解为什么这里做一次 break？                    // 因为我认为 active 为 0 的情况，必然从下面的 f.get() 返回了                    else if (active == 0)                        break;                     // 这里也是 else if。这里说的是，没有任务了，但是设置了超时时间，这里检测是否超时                    else if (timed) {                        f = ecs.poll(nanos, TimeUnit.NANOSECONDS);                        if (f == null)                            throw new TimeoutException();                        nanos = deadline - System.nanoTime();                    }                    else                   // else。说明，没有任务需要提交，但是池中的任务没有完成，还没有超时(如果设置了超时)                    // take() 方法会阻塞，直到有元素返回，说明有任务结束了                        f = ecs.take();                }                // 有任务结束了                if (f != null) {                    --active;                    try {                        // 返回执行结果，如果有异常，都包装成 ExecutionException                        return f.get();                    } catch (ExecutionException eex) {                        ee = eex;                    } catch (RuntimeException rex) {                        ee = new ExecutionException(rex);                    }                }            }            if (ee == null)                ee = new ExecutionException();            throw ee;        } finally {            for (int i = 0, size = futures.size(); i < size; i++)                futures.get(i).cancel(true);        }    }    public <T> T invokeAny(Collection<? extends Callable<T>> tasks)        throws InterruptedException, ExecutionException {        try {            return doInvokeAny(tasks, false, 0);        } catch (TimeoutException cannotHappen) {            assert false;            return null;        }    }    public <T> T invokeAny(Collection<? extends Callable<T>> tasks,                           long timeout, TimeUnit unit)        throws InterruptedException, ExecutionException, TimeoutException {        return doInvokeAny(tasks, true, unit.toNanos(timeout));    }      // 执行所有的任务，返回任务结果。    // 先不要看这个方法，我们先想想，其实我们自己提交任务到线程池，也是想要线程池执行所有的任务    // 只不过，我们是每次 submit 一个任务，这里以一个集合作为参数提交    public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks)        throws InterruptedException {        if (tasks == null)            throw new NullPointerException();        ArrayList<Future<T>> futures = new ArrayList<Future<T>>(tasks.size());        boolean done = false;        try {            for (Callable<T> t : tasks) {                RunnableFuture<T> f = newTaskFor(t);                futures.add(f);                execute(f);            }            for (int i = 0, size = futures.size(); i < size; i++) {                Future<T> f = futures.get(i);                if (!f.isDone()) {                    try {                       // 这是一个阻塞方法，直到获取到值，或抛出了异常                       // 这里有个小细节，其实 get 方法签名上是会抛出 InterruptedException 的                       // 可是这里没有进行处理，而是抛给外层去了。此异常发生于还没执行完的任务被取消了                        f.get();                    } catch (CancellationException ignore) {                    } catch (ExecutionException ignore) {                    }                }            }            done = true;            return futures;        } finally {            if (!done)                for (int i = 0, size = futures.size(); i < size; i++)                    futures.get(i).cancel(true);        }    }    public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks,                                         long timeout, TimeUnit unit)        throws InterruptedException {        if (tasks == null)            throw new NullPointerException();        long nanos = unit.toNanos(timeout);        ArrayList<Future<T>> futures = new ArrayList<Future<T>>(tasks.size());        boolean done = false;        try {            for (Callable<T> t : tasks)                futures.add(newTaskFor(t));            final long deadline = System.nanoTime() + nanos;            final int size = futures.size();            // Interleave time checks and calls to execute in case            // executor doesn't have any/much parallelism.            for (int i = 0; i < size; i++) {                execute((Runnable)futures.get(i));                nanos = deadline - System.nanoTime();                if (nanos <= 0L)                    return futures;            }            for (int i = 0; i < size; i++) {                Future<T> f = futures.get(i);                if (!f.isDone()) {                    if (nanos <= 0L)                        return futures;                    try {                        f.get(nanos, TimeUnit.NANOSECONDS);                    } catch (CancellationException ignore) {                    } catch (ExecutionException ignore) {                    } catch (TimeoutException toe) {                        return futures;                    }                    nanos = deadline - System.nanoTime();                }            }            done = true;            return futures;        } finally {            if (!done)                for (int i = 0, size = futures.size(); i < size; i++)                    futures.get(i).cancel(true);        }    }}`\n\n```\n\n## 4.\n\n```\njava/**     * The main pool control state, ctl, is an atomic integer packing     * two conceptual fields     *   workerCount, indicating the effective number of threads     *   runState,    indicating whether running, shutting down etc     *     * In order to pack them into one int, we limit workerCount to     * (2^29)-1 (about 500 million) threads rather than (2^31)-1 (2     * billion) otherwise representable. If this is ever an issue in     * the future, the variable can be changed to be an AtomicLong,     * and the shift/mask constants below adjusted. But until the need     * arises, this code is a bit faster and simpler using an int.     *     * The workerCount is the number of workers that have been     * permitted to start and not permitted to stop.  The value may be     * transiently different from the actual number of live threads,     * for example when a ThreadFactory fails to create a thread when     * asked, and when exiting threads are still performing     * bookkeeping before terminating. The user-visible pool size is     * reported as the current size of the workers set.     *     * The runState provides the main lifecycle control, taking on values:     *     *   RUNNING:  Accept new tasks and process queued tasks     *   SHUTDOWN: Don't accept new tasks, but process queued tasks     *   STOP:     Don't accept new tasks, don't process queued tasks,     *             and interrupt in-progress tasks     *   TIDYING:  All tasks have terminated, workerCount is zero,     *             the thread transitioning to state TIDYING     *             will run the terminated() hook method     *   TERMINATED: terminated() has completed     *     * The numerical order among these values matters, to allow     * ordered comparisons. The runState monotonically increases over     * time, but need not hit each state. The transitions are:     *     * RUNNING -> SHUTDOWN     *    On invocation of shutdown(), perhaps implicitly in finalize()     * (RUNNING or SHUTDOWN) -> STOP     *    On invocation of shutdownNow()     * SHUTDOWN -> TIDYING     *    When both queue and pool are empty     * STOP -> TIDYING     *    When pool is empty     * TIDYING -> TERMINATED     *    When the terminated() hook method has completed     *     * Threads waiting in awaitTermination() will return when the     * state reaches TERMINATED.     *     * Detecting the transition from SHUTDOWN to TIDYING is less     * straightforward than you'd like because the queue may become     * empty after non-empty and vice versa during SHUTDOWN state, but     * we can only terminate if, after seeing that it is empty, we see     * that workerCount is 0 (which sometimes entails a recheck -- see     * below).     */    private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));public void execute(Runnable command) {        if (command == null)            throw new NullPointerException();        /*         * Proceed in 3 steps:         *         * 1. If fewer than corePoolSize threads are running, try to         * start a new thread with the given command as its first         * task.  The call to addWorker atomically checks runState and         * workerCount, and so prevents false alarms that would add         * threads when it shouldn't, by returning false.         *         * 2. If a task can be successfully queued, then we still need         * to double-check whether we should have added a thread         * (because existing ones died since last checking) or that         * the pool shut down since entry into this method. So we         * recheck state and if necessary roll back the enqueuing if         * stopped, or start a new thread if there are none.         *         * 3. If we cannot queue task, then we try to add a new         * thread.  If it fails, we know we are shut down or saturated         * and so reject the task.         */        int c = ctl.get();        if (workerCountOf(c) < corePoolSize) {            if (addWorker(command, true))                return;            c = ctl.get();        }        if (isRunning(c) && workQueue.offer(command)) {            int recheck = ctl.get();            if (! isRunning(recheck) && remove(command))                reject(command);            else if (workerCountOf(recheck) == 0)                addWorker(null, false);        }        else if (!addWorker(command, false))            reject(command);    }`\n```","slug":"java/java-线程池","published":1,"date":"2019-10-14T09:01:07.528Z","updated":"2019-10-14T09:01:07.548Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a4480047ic1y2e3wvrx4","content":"<p>title: java-线程池<br>date: 2019-04-10 10:32:39<br>tags:</p>\n<ul>\n<li>java</li>\n</ul>\n<h2 id=\"1-线程池的关系\"><a href=\"#1-线程池的关系\" class=\"headerlink\" title=\"1. 线程池的关系\"></a>1. 线程池的关系</h2><p>ExecutorService<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">![1536473588949](assets/1536473588949.png)</span><br><span class=\"line\"></span><br><span class=\"line\">## 2. ```Executor</span><br></pre></td></tr></table></figure></p>\n<p>public interface Executor {<br>    void execute(Runnable command);<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 3.</span><br></pre></td></tr></table></figure></p>\n<p>javapublic abstract class AbstractExecutorService implements ExecutorService {    // RunnableFuture 是用于获取执行结果的，我们常用它的子类 FutureTask    // 下面两个 newTaskFor 方法用于将我们的任务包装成 FutureTask 提交到线程池中执行    protected <t> RunnableFuture<t> newTaskFor(Runnable runnable, T value) {        return new FutureTask<t>(runnable, value);    }    protected <t> RunnableFuture<t> newTaskFor(Callable<t> callable) {        return new FutureTask<t>(callable);    }    // 提交任务    public Future&lt;?&gt; submit(Runnable task) {        if (task == null) throw new NullPointerException();        RunnableFuture<void> ftask = newTaskFor(task, null);        execute(ftask);        return ftask;    }    /*<em>     </em> @throws RejectedExecutionException {@inheritDoc}     <em> @throws NullPointerException       {@inheritDoc}     </em>/    public <t> Future<t> submit(Runnable task, T result) {        if (task == null) throw new NullPointerException();         // 1. 将任务包装成 FutureTask        RunnableFuture<t> ftask = newTaskFor(task, result);        // 2. 交给执行器执行，execute 方法由具体的子类来实现        // 前面也说了，FutureTask 间接实现了Runnable 接口。        execute(ftask);        return ftask;    }    public <t> Future<t> submit(Callable<t> task) {        if (task == null) throw new NullPointerException();        RunnableFuture<t> ftask = newTaskFor(task);        execute(ftask);        return ftask;    }     // 此方法目的：将 tasks 集合中的任务提交到线程池执行，任意一个线程执行完后就可以结束了    // 第二个参数 timed 代表是否设置超时机制，超时时间为第三个参数，    // 如果 timed 为 true，同时超时了还没有一个线程返回结果，那么抛出 TimeoutException 异常    private <t> T doInvokeAny(Collection&lt;? extends Callable<t>&gt; tasks,                              boolean timed, long nanos)        throws InterruptedException, ExecutionException, TimeoutException {        if (tasks == null)            throw new NullPointerException();        int ntasks = tasks.size();        if (ntasks == 0)            throw new IllegalArgumentException();        ArrayList&lt;Future<t>&gt; futures = new ArrayList&lt;Future<t>&gt;(ntasks);         // ExecutorCompletionService 不是一个真正的执行器，参数 this 才是真正的执行器        // 它对执行器进行了包装，每个任务结束后，将结果保存到内部的一个 completionQueue 队列中        // 这也是为什么这个类的名字里面有个 Completion 的原因吧。        ExecutorCompletionService<t> ecs =            new ExecutorCompletionService<t>(this);        // For efficiency, especially in executors with limited        // parallelism, check to see if previously submitted tasks are        // done before submitting more of them. This interleaving        // plus the exception mechanics account for messiness of main        // loop.        try {            // 用于保存异常信息，此方法如果没有得到任何有效的结果，那么我们可以抛出最后得到的一个异常            ExecutionException ee = null;            final long deadline = timed ? System.nanoTime() + nanos : 0L;            Iterator&lt;? extends Callable<t>&gt; it = tasks.iterator();             // 首先先提交一个任务，后面的任务到下面的 for 循环一个个提交            futures.add(ecs.submit(it.next()));            –ntasks;            int active = 1;            for (;;) {                // ecs 上面说了，其内部有一个 completionQueue 用于保存执行完成的结果                // BlockingQueue 的 poll 方法不阻塞，返回 null 代表队列为空                Future<t> f = ecs.poll();                 // 为 null，说明刚刚提交的第一个线程还没有执行完成                // 在前面先提交一个任务，加上这里做一次检查，也是为了提高性能                if (f == null) {                    if (ntasks &gt; 0) {                        –ntasks;                        futures.add(ecs.submit(it.next()));                        ++active;                    }                     // 这里是 else if，不是 if。这里说明，没有任务了，同时 active 为 0 说明                    // 任务都执行完成了。其实我也没理解为什么这里做一次 break？                    // 因为我认为 active 为 0 的情况，必然从下面的 f.get() 返回了                    else if (active == 0)                        break;                     // 这里也是 else if。这里说的是，没有任务了，但是设置了超时时间，这里检测是否超时                    else if (timed) {                        f = ecs.poll(nanos, TimeUnit.NANOSECONDS);                        if (f == null)                            throw new TimeoutException();                        nanos = deadline - System.nanoTime();                    }                    else                   // else。说明，没有任务需要提交，但是池中的任务没有完成，还没有超时(如果设置了超时)                    // take() 方法会阻塞，直到有元素返回，说明有任务结束了                        f = ecs.take();                }                // 有任务结束了                if (f != null) {                    –active;                    try {                        // 返回执行结果，如果有异常，都包装成 ExecutionException                        return f.get();                    } catch (ExecutionException eex) {                        ee = eex;                    } catch (RuntimeException rex) {                        ee = new ExecutionException(rex);                    }                }            }            if (ee == null)                ee = new ExecutionException();            throw ee;        } finally {            for (int i = 0, size = futures.size(); i &lt; size; i++)                futures.get(i).cancel(true);        }    }    public <t> T invokeAny(Collection&lt;? extends Callable<t>&gt; tasks)        throws InterruptedException, ExecutionException {        try {            return doInvokeAny(tasks, false, 0);        } catch (TimeoutException cannotHappen) {            assert false;            return null;        }    }    public <t> T invokeAny(Collection&lt;? extends Callable<t>&gt; tasks,                           long timeout, TimeUnit unit)        throws InterruptedException, ExecutionException, TimeoutException {        return doInvokeAny(tasks, true, unit.toNanos(timeout));    }      // 执行所有的任务，返回任务结果。    // 先不要看这个方法，我们先想想，其实我们自己提交任务到线程池，也是想要线程池执行所有的任务    // 只不过，我们是每次 submit 一个任务，这里以一个集合作为参数提交    public <t> List&lt;Future<t>&gt; invokeAll(Collection&lt;? extends Callable<t>&gt; tasks)        throws InterruptedException {        if (tasks == null)            throw new NullPointerException();        ArrayList&lt;Future<t>&gt; futures = new ArrayList&lt;Future<t>&gt;(tasks.size());        boolean done = false;        try {            for (Callable<t> t : tasks) {                RunnableFuture<t> f = newTaskFor(t);                futures.add(f);                execute(f);            }            for (int i = 0, size = futures.size(); i &lt; size; i++) {                Future<t> f = futures.get(i);                if (!f.isDone()) {                    try {                       // 这是一个阻塞方法，直到获取到值，或抛出了异常                       // 这里有个小细节，其实 get 方法签名上是会抛出 InterruptedException 的                       // 可是这里没有进行处理，而是抛给外层去了。此异常发生于还没执行完的任务被取消了                        f.get();                    } catch (CancellationException ignore) {                    } catch (ExecutionException ignore) {                    }                }            }            done = true;            return futures;        } finally {            if (!done)                for (int i = 0, size = futures.size(); i &lt; size; i++)                    futures.get(i).cancel(true);        }    }    public <t> List&lt;Future<t>&gt; invokeAll(Collection&lt;? extends Callable<t>&gt; tasks,                                         long timeout, TimeUnit unit)        throws InterruptedException {        if (tasks == null)            throw new NullPointerException();        long nanos = unit.toNanos(timeout);        ArrayList&lt;Future<t>&gt; futures = new ArrayList&lt;Future<t>&gt;(tasks.size());        boolean done = false;        try {            for (Callable<t> t : tasks)                futures.add(newTaskFor(t));            final long deadline = System.nanoTime() + nanos;            final int size = futures.size();            // Interleave time checks and calls to execute in case            // executor doesn’t have any/much parallelism.            for (int i = 0; i &lt; size; i++) {                execute((Runnable)futures.get(i));                nanos = deadline - System.nanoTime();                if (nanos &lt;= 0L)                    return futures;            }            for (int i = 0; i &lt; size; i++) {                Future<t> f = futures.get(i);                if (!f.isDone()) {                    if (nanos &lt;= 0L)                        return futures;                    try {                        f.get(nanos, TimeUnit.NANOSECONDS);                    } catch (CancellationException ignore) {                    } catch (ExecutionException ignore) {                    } catch (TimeoutException toe) {                        return futures;                    }                    nanos = deadline - System.nanoTime();                }            }            done = true;            return futures;        } finally {            if (!done)                for (int i = 0, size = futures.size(); i &lt; size; i++)                    futures.get(i).cancel(true);        }    }}`</t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></void></t></t></t></t></t></t></t></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 4.</span><br></pre></td></tr></table></figure>\n<p>java/*<em>     </em> The main pool control state, ctl, is an atomic integer packing     <em> two conceptual fields     </em>   workerCount, indicating the effective number of threads     <em>   runState,    indicating whether running, shutting down etc     </em>     <em> In order to pack them into one int, we limit workerCount to     </em> (2^29)-1 (about 500 million) threads rather than (2^31)-1 (2     <em> billion) otherwise representable. If this is ever an issue in     </em> the future, the variable can be changed to be an AtomicLong,     <em> and the shift/mask constants below adjusted. But until the need     </em> arises, this code is a bit faster and simpler using an int.     <em>     </em> The workerCount is the number of workers that have been     <em> permitted to start and not permitted to stop.  The value may be     </em> transiently different from the actual number of live threads,     <em> for example when a ThreadFactory fails to create a thread when     </em> asked, and when exiting threads are still performing     <em> bookkeeping before terminating. The user-visible pool size is     </em> reported as the current size of the workers set.     <em>     </em> The runState provides the main lifecycle control, taking on values:     <em>     </em>   RUNNING:  Accept new tasks and process queued tasks     <em>   SHUTDOWN: Don’t accept new tasks, but process queued tasks     </em>   STOP:     Don’t accept new tasks, don’t process queued tasks,     <em>             and interrupt in-progress tasks     </em>   TIDYING:  All tasks have terminated, workerCount is zero,     <em>             the thread transitioning to state TIDYING     </em>             will run the terminated() hook method     <em>   TERMINATED: terminated() has completed     </em>     <em> The numerical order among these values matters, to allow     </em> ordered comparisons. The runState monotonically increases over     <em> time, but need not hit each state. The transitions are:     </em>     <em> RUNNING -&gt; SHUTDOWN     </em>    On invocation of shutdown(), perhaps implicitly in finalize()     <em> (RUNNING or SHUTDOWN) -&gt; STOP     </em>    On invocation of shutdownNow()     <em> SHUTDOWN -&gt; TIDYING     </em>    When both queue and pool are empty     <em> STOP -&gt; TIDYING     </em>    When pool is empty     <em> TIDYING -&gt; TERMINATED     </em>    When the terminated() hook method has completed     <em>     </em> Threads waiting in awaitTermination() will return when the     <em> state reaches TERMINATED.     </em>     <em> Detecting the transition from SHUTDOWN to TIDYING is less     </em> straightforward than you’d like because the queue may become     <em> empty after non-empty and vice versa during SHUTDOWN state, but     </em> we can only terminate if, after seeing that it is empty, we see     <em> that workerCount is 0 (which sometimes entails a recheck – see     </em> below).     <em>/    private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));public void execute(Runnable command) {        if (command == null)            throw new NullPointerException();        /</em>         <em> Proceed in 3 steps:         </em>         <em> 1. If fewer than corePoolSize threads are running, try to         </em> start a new thread with the given command as its first         <em> task.  The call to addWorker atomically checks runState and         </em> workerCount, and so prevents false alarms that would add         <em> threads when it shouldn’t, by returning false.         </em>         <em> 2. If a task can be successfully queued, then we still need         </em> to double-check whether we should have added a thread         <em> (because existing ones died since last checking) or that         </em> the pool shut down since entry into this method. So we         <em> recheck state and if necessary roll back the enqueuing if         </em> stopped, or start a new thread if there are none.         <em>         </em> 3. If we cannot queue task, then we try to add a new         <em> thread.  If it fails, we know we are shut down or saturated         </em> and so reject the task.         */        int c = ctl.get();        if (workerCountOf(c) &lt; corePoolSize) {            if (addWorker(command, true))                return;            c = ctl.get();        }        if (isRunning(c) &amp;&amp; workQueue.offer(command)) {            int recheck = ctl.get();            if (! isRunning(recheck) &amp;&amp; remove(command))                reject(command);            else if (workerCountOf(recheck) == 0)                addWorker(null, false);        }        else if (!addWorker(command, false))            reject(command);    }<code>``</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>title: java-线程池<br>date: 2019-04-10 10:32:39<br>tags:</p>\n<ul>\n<li>java</li>\n</ul>\n<h2 id=\"1-线程池的关系\"><a href=\"#1-线程池的关系\" class=\"headerlink\" title=\"1. 线程池的关系\"></a>1. 线程池的关系</h2><p>ExecutorService<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">![1536473588949](assets/1536473588949.png)</span><br><span class=\"line\"></span><br><span class=\"line\">## 2. ```Executor</span><br></pre></td></tr></table></figure></p>\n<p>public interface Executor {<br>    void execute(Runnable command);<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 3.</span><br></pre></td></tr></table></figure></p>\n<p>javapublic abstract class AbstractExecutorService implements ExecutorService {    // RunnableFuture 是用于获取执行结果的，我们常用它的子类 FutureTask    // 下面两个 newTaskFor 方法用于将我们的任务包装成 FutureTask 提交到线程池中执行    protected <t> RunnableFuture<t> newTaskFor(Runnable runnable, T value) {        return new FutureTask<t>(runnable, value);    }    protected <t> RunnableFuture<t> newTaskFor(Callable<t> callable) {        return new FutureTask<t>(callable);    }    // 提交任务    public Future&lt;?&gt; submit(Runnable task) {        if (task == null) throw new NullPointerException();        RunnableFuture<void> ftask = newTaskFor(task, null);        execute(ftask);        return ftask;    }    /*<em>     </em> @throws RejectedExecutionException {@inheritDoc}     <em> @throws NullPointerException       {@inheritDoc}     </em>/    public <t> Future<t> submit(Runnable task, T result) {        if (task == null) throw new NullPointerException();         // 1. 将任务包装成 FutureTask        RunnableFuture<t> ftask = newTaskFor(task, result);        // 2. 交给执行器执行，execute 方法由具体的子类来实现        // 前面也说了，FutureTask 间接实现了Runnable 接口。        execute(ftask);        return ftask;    }    public <t> Future<t> submit(Callable<t> task) {        if (task == null) throw new NullPointerException();        RunnableFuture<t> ftask = newTaskFor(task);        execute(ftask);        return ftask;    }     // 此方法目的：将 tasks 集合中的任务提交到线程池执行，任意一个线程执行完后就可以结束了    // 第二个参数 timed 代表是否设置超时机制，超时时间为第三个参数，    // 如果 timed 为 true，同时超时了还没有一个线程返回结果，那么抛出 TimeoutException 异常    private <t> T doInvokeAny(Collection&lt;? extends Callable<t>&gt; tasks,                              boolean timed, long nanos)        throws InterruptedException, ExecutionException, TimeoutException {        if (tasks == null)            throw new NullPointerException();        int ntasks = tasks.size();        if (ntasks == 0)            throw new IllegalArgumentException();        ArrayList&lt;Future<t>&gt; futures = new ArrayList&lt;Future<t>&gt;(ntasks);         // ExecutorCompletionService 不是一个真正的执行器，参数 this 才是真正的执行器        // 它对执行器进行了包装，每个任务结束后，将结果保存到内部的一个 completionQueue 队列中        // 这也是为什么这个类的名字里面有个 Completion 的原因吧。        ExecutorCompletionService<t> ecs =            new ExecutorCompletionService<t>(this);        // For efficiency, especially in executors with limited        // parallelism, check to see if previously submitted tasks are        // done before submitting more of them. This interleaving        // plus the exception mechanics account for messiness of main        // loop.        try {            // 用于保存异常信息，此方法如果没有得到任何有效的结果，那么我们可以抛出最后得到的一个异常            ExecutionException ee = null;            final long deadline = timed ? System.nanoTime() + nanos : 0L;            Iterator&lt;? extends Callable<t>&gt; it = tasks.iterator();             // 首先先提交一个任务，后面的任务到下面的 for 循环一个个提交            futures.add(ecs.submit(it.next()));            –ntasks;            int active = 1;            for (;;) {                // ecs 上面说了，其内部有一个 completionQueue 用于保存执行完成的结果                // BlockingQueue 的 poll 方法不阻塞，返回 null 代表队列为空                Future<t> f = ecs.poll();                 // 为 null，说明刚刚提交的第一个线程还没有执行完成                // 在前面先提交一个任务，加上这里做一次检查，也是为了提高性能                if (f == null) {                    if (ntasks &gt; 0) {                        –ntasks;                        futures.add(ecs.submit(it.next()));                        ++active;                    }                     // 这里是 else if，不是 if。这里说明，没有任务了，同时 active 为 0 说明                    // 任务都执行完成了。其实我也没理解为什么这里做一次 break？                    // 因为我认为 active 为 0 的情况，必然从下面的 f.get() 返回了                    else if (active == 0)                        break;                     // 这里也是 else if。这里说的是，没有任务了，但是设置了超时时间，这里检测是否超时                    else if (timed) {                        f = ecs.poll(nanos, TimeUnit.NANOSECONDS);                        if (f == null)                            throw new TimeoutException();                        nanos = deadline - System.nanoTime();                    }                    else                   // else。说明，没有任务需要提交，但是池中的任务没有完成，还没有超时(如果设置了超时)                    // take() 方法会阻塞，直到有元素返回，说明有任务结束了                        f = ecs.take();                }                // 有任务结束了                if (f != null) {                    –active;                    try {                        // 返回执行结果，如果有异常，都包装成 ExecutionException                        return f.get();                    } catch (ExecutionException eex) {                        ee = eex;                    } catch (RuntimeException rex) {                        ee = new ExecutionException(rex);                    }                }            }            if (ee == null)                ee = new ExecutionException();            throw ee;        } finally {            for (int i = 0, size = futures.size(); i &lt; size; i++)                futures.get(i).cancel(true);        }    }    public <t> T invokeAny(Collection&lt;? extends Callable<t>&gt; tasks)        throws InterruptedException, ExecutionException {        try {            return doInvokeAny(tasks, false, 0);        } catch (TimeoutException cannotHappen) {            assert false;            return null;        }    }    public <t> T invokeAny(Collection&lt;? extends Callable<t>&gt; tasks,                           long timeout, TimeUnit unit)        throws InterruptedException, ExecutionException, TimeoutException {        return doInvokeAny(tasks, true, unit.toNanos(timeout));    }      // 执行所有的任务，返回任务结果。    // 先不要看这个方法，我们先想想，其实我们自己提交任务到线程池，也是想要线程池执行所有的任务    // 只不过，我们是每次 submit 一个任务，这里以一个集合作为参数提交    public <t> List&lt;Future<t>&gt; invokeAll(Collection&lt;? extends Callable<t>&gt; tasks)        throws InterruptedException {        if (tasks == null)            throw new NullPointerException();        ArrayList&lt;Future<t>&gt; futures = new ArrayList&lt;Future<t>&gt;(tasks.size());        boolean done = false;        try {            for (Callable<t> t : tasks) {                RunnableFuture<t> f = newTaskFor(t);                futures.add(f);                execute(f);            }            for (int i = 0, size = futures.size(); i &lt; size; i++) {                Future<t> f = futures.get(i);                if (!f.isDone()) {                    try {                       // 这是一个阻塞方法，直到获取到值，或抛出了异常                       // 这里有个小细节，其实 get 方法签名上是会抛出 InterruptedException 的                       // 可是这里没有进行处理，而是抛给外层去了。此异常发生于还没执行完的任务被取消了                        f.get();                    } catch (CancellationException ignore) {                    } catch (ExecutionException ignore) {                    }                }            }            done = true;            return futures;        } finally {            if (!done)                for (int i = 0, size = futures.size(); i &lt; size; i++)                    futures.get(i).cancel(true);        }    }    public <t> List&lt;Future<t>&gt; invokeAll(Collection&lt;? extends Callable<t>&gt; tasks,                                         long timeout, TimeUnit unit)        throws InterruptedException {        if (tasks == null)            throw new NullPointerException();        long nanos = unit.toNanos(timeout);        ArrayList&lt;Future<t>&gt; futures = new ArrayList&lt;Future<t>&gt;(tasks.size());        boolean done = false;        try {            for (Callable<t> t : tasks)                futures.add(newTaskFor(t));            final long deadline = System.nanoTime() + nanos;            final int size = futures.size();            // Interleave time checks and calls to execute in case            // executor doesn’t have any/much parallelism.            for (int i = 0; i &lt; size; i++) {                execute((Runnable)futures.get(i));                nanos = deadline - System.nanoTime();                if (nanos &lt;= 0L)                    return futures;            }            for (int i = 0; i &lt; size; i++) {                Future<t> f = futures.get(i);                if (!f.isDone()) {                    if (nanos &lt;= 0L)                        return futures;                    try {                        f.get(nanos, TimeUnit.NANOSECONDS);                    } catch (CancellationException ignore) {                    } catch (ExecutionException ignore) {                    } catch (TimeoutException toe) {                        return futures;                    }                    nanos = deadline - System.nanoTime();                }            }            done = true;            return futures;        } finally {            if (!done)                for (int i = 0, size = futures.size(); i &lt; size; i++)                    futures.get(i).cancel(true);        }    }}`</t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></void></t></t></t></t></t></t></t></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 4.</span><br></pre></td></tr></table></figure>\n<p>java/*<em>     </em> The main pool control state, ctl, is an atomic integer packing     <em> two conceptual fields     </em>   workerCount, indicating the effective number of threads     <em>   runState,    indicating whether running, shutting down etc     </em>     <em> In order to pack them into one int, we limit workerCount to     </em> (2^29)-1 (about 500 million) threads rather than (2^31)-1 (2     <em> billion) otherwise representable. If this is ever an issue in     </em> the future, the variable can be changed to be an AtomicLong,     <em> and the shift/mask constants below adjusted. But until the need     </em> arises, this code is a bit faster and simpler using an int.     <em>     </em> The workerCount is the number of workers that have been     <em> permitted to start and not permitted to stop.  The value may be     </em> transiently different from the actual number of live threads,     <em> for example when a ThreadFactory fails to create a thread when     </em> asked, and when exiting threads are still performing     <em> bookkeeping before terminating. The user-visible pool size is     </em> reported as the current size of the workers set.     <em>     </em> The runState provides the main lifecycle control, taking on values:     <em>     </em>   RUNNING:  Accept new tasks and process queued tasks     <em>   SHUTDOWN: Don’t accept new tasks, but process queued tasks     </em>   STOP:     Don’t accept new tasks, don’t process queued tasks,     <em>             and interrupt in-progress tasks     </em>   TIDYING:  All tasks have terminated, workerCount is zero,     <em>             the thread transitioning to state TIDYING     </em>             will run the terminated() hook method     <em>   TERMINATED: terminated() has completed     </em>     <em> The numerical order among these values matters, to allow     </em> ordered comparisons. The runState monotonically increases over     <em> time, but need not hit each state. The transitions are:     </em>     <em> RUNNING -&gt; SHUTDOWN     </em>    On invocation of shutdown(), perhaps implicitly in finalize()     <em> (RUNNING or SHUTDOWN) -&gt; STOP     </em>    On invocation of shutdownNow()     <em> SHUTDOWN -&gt; TIDYING     </em>    When both queue and pool are empty     <em> STOP -&gt; TIDYING     </em>    When pool is empty     <em> TIDYING -&gt; TERMINATED     </em>    When the terminated() hook method has completed     <em>     </em> Threads waiting in awaitTermination() will return when the     <em> state reaches TERMINATED.     </em>     <em> Detecting the transition from SHUTDOWN to TIDYING is less     </em> straightforward than you’d like because the queue may become     <em> empty after non-empty and vice versa during SHUTDOWN state, but     </em> we can only terminate if, after seeing that it is empty, we see     <em> that workerCount is 0 (which sometimes entails a recheck – see     </em> below).     <em>/    private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));public void execute(Runnable command) {        if (command == null)            throw new NullPointerException();        /</em>         <em> Proceed in 3 steps:         </em>         <em> 1. If fewer than corePoolSize threads are running, try to         </em> start a new thread with the given command as its first         <em> task.  The call to addWorker atomically checks runState and         </em> workerCount, and so prevents false alarms that would add         <em> threads when it shouldn’t, by returning false.         </em>         <em> 2. If a task can be successfully queued, then we still need         </em> to double-check whether we should have added a thread         <em> (because existing ones died since last checking) or that         </em> the pool shut down since entry into this method. So we         <em> recheck state and if necessary roll back the enqueuing if         </em> stopped, or start a new thread if there are none.         <em>         </em> 3. If we cannot queue task, then we try to add a new         <em> thread.  If it fails, we know we are shut down or saturated         </em> and so reject the task.         */        int c = ctl.get();        if (workerCountOf(c) &lt; corePoolSize) {            if (addWorker(command, true))                return;            c = ctl.get();        }        if (isRunning(c) &amp;&amp; workQueue.offer(command)) {            int recheck = ctl.get();            if (! isRunning(recheck) &amp;&amp; remove(command))                reject(command);            else if (workerCountOf(recheck) == 0)                addWorker(null, false);        }        else if (!addWorker(command, false))            reject(command);    }<code>``</code></p>\n"},{"title":"nginx伪静态","date":"2019-09-02T14:26:40.000Z","_content":"# 伪静态\n\n伪静态是一种可以把文件后缀改成任何可能的一种方法，如果我想把PHP文件伪静态成html文件，这种相当简单的。\nnginx里使用伪静态是直接在nginx.conf 中写规则的，而apache要开启写模块(mod_rewrite)才能进行伪静态。\nnginx只需要打开nginx.conf配置文件,然后在里面写需要的规则就可以了。\n\n**1、Nginx伪静态案例：（Nginx用伪静态是不需要配置的）**\n\n找到nginx.conf配置文件：nginx.conf，然后打开，找到server {} 在里面加上：\n\n下面加的意思是隐藏掉index.php：\n\n```nginx\nlocation / {         \n    # 其他的一些规则，自己加\n    if(!-e $request_filename) {         \n        rewrite  ^(.*)$  /index.php?s=$1  last; \n        break;  \n    }\n}\n```\n\n**2、每个网站独立的配置文件（独立的伪静态规则）：**\n\n我们正常的时候每个网站都会有独立的配置文件，直接去改配置文件就好了。然后nginx.conf引入他们所有的配置文件就好了：\n\n如：在nginx.conf配置文件最下面添加以下代码：\n\n```nginx\ninclude vhost/*.conf;\n```\n\n说明：引入nginx.conf配置文件所在目录下vhost目录下的所有以.conf的配置文件！\n\n以下就是其中一个网站的配置文件内容：规则就是隐藏掉index.php\n\n```nginx\nserver {\n        listen       80;\n        root /www/web/admin/public;\n        server_name www.admin.com;\n        index  index.html index.php index.htm;\n        error_page  400 /errpage/400.html;\n        error_page  403 /errpage/403.html;\n        error_page  404 /errpage/404.html;\n        error_page  503 /errpage/503.html;\n        location ~ \\.php$ {\n                fastcgi_pass   127.0.0.1:9000;\n                fastcgi_index  index.php;\n                include fcgi.conf;\n        }\n        location ~ /\\.ht {\n                deny  all;\n        }\n        location / { \n            if (!-e $request_filename) {\n                 rewrite  ^(.*)$  /index.php?s=$1  last;\n                 break;\n            }\n        }\n}\n```\n\n# nginx url重写\n\nurl重写是指通过配置conf文件，以让网站的url中达到某种状态时则定向/跳转到某个规则，比如常见的伪静态、301重定向、浏览器定向等\n\n## rewrite\n\n### 语法\n\n在配置文件的`server`块中写，如：\n\n```nginx\nserver {   \n    rewrite 规则 定向路径 重写类型;\n}\n```\n\n- 规则：可以是字符串或者正则来表示想匹配的目标url\n- 定向路径：表示匹配到规则后要定向的路径，如果规则里有正则，则可以使用`$index`来表示正则里的捕获分组\n- 重写类型：\n  - last ：相当于Apache里德(L)标记，表示完成rewrite，浏览器地址栏URL地址不变\n  - break；本条规则匹配完成后，终止匹配，不再匹配后面的规则，浏览器地址栏URL地址不变\n  - redirect：返回302临时重定向，浏览器地址会显示跳转后的URL地址\n  - permanent：返回301永久重定向，浏览器地址栏会显示跳转后的URL地址\n\n### 简单例子\n\n```nginx\nserver {\n    # 访问 /last.html 的时候，页面内容重写到 /index.html 中\n    rewrite /last.html /index.html last;\n    # 访问 /break.html 的时候，页面内容重写到 /index.html 中，并停止后续的匹配\n    rewrite /break.html /index.html break;\n    # 访问 /redirect.html 的时候，页面直接302定向到 /index.html中\n    rewrite /redirect.html /index.html redirect;\n    # 访问 /permanent.html 的时候，页面直接301定向到 /index.html中\n    rewrite /permanent.html /index.html permanent;\n    # 把 /html/*.html => /post/*.html ，301定向\n    rewrite ^/html/(.+?).html$ /post/$1.html permanent;\n    # 把 /search/key => /search.html?keyword=key\n    rewrite ^/search\\/([^\\/]+?)(\\/|$) /search.html?keyword=$1 permanent;\n}\n```\n\n#### last和break的区别\n\n因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里 last 和 break 区别有点难以理解：\n\n- last一般写在server和if中，而break一般使用在location中\n- last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配\n- break和last都能组织继续执行后面的rewrite指令\n\n在`location`里一旦返回`break`则直接生效并停止后续的匹配`location`\n\n```nginx\nserver {\n    location / {\n        rewrite /last/ /q.html last;\n        rewrite /break/ /q.html break;\n    }\n    location = /q.html {\n        return 400;\n    }\n}\n```\n\n- 访问`/last/`时重写到`/q.html`，然后使用新的`uri`再匹配，正好匹配到`locatoin = /q.html`然后返回了`400`\n- 访问`/break`时重写到`/q.html`，由于返回了`break`，则直接停止了\n\n## if判断\n\n只是上面的简单重写很多时候满足不了需求，比如需要判断当文件不存在时、当路径包含xx时等条件，则需要用到`if`\n\n### 语法\n\n```undefined\nif (表达式) {}\n```\n\n- 当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false\n- 直接比较变量和内容时，使用=或!=\n- ~正则表达式匹配，~*不区分大小写的匹配，!~区分大小写的不匹配\n\n一些内置的条件判断：\n\n- -f和!-f用来判断是否存在文件\n- -d和!-d用来判断是否存在目录\n- -e和!-e用来判断是否存在文件或目录\n- -x和!-x用来判断文件是否可执行\n\n### 内置的全局变量\n\n```\n$args ：这个变量等于请求行中的参数，同$query_string\n$content_length ： 请求头中的Content-length字段。\n$content_type ： 请求头中的Content-Type字段。\n$document_root ： 当前请求在root指令中指定的值。\n$host ： 请求主机头字段，否则为服务器名称。\n$http_user_agent ： 客户端agent信息\n$http_cookie ： 客户端cookie信息\n$limit_rate ： 这个变量可以限制连接速率。\n$request_method ： 客户端请求的动作，通常为GET或POST。\n$remote_addr ： 客户端的IP地址。\n$remote_port ： 客户端的端口。\n$remote_user ： 已经经过Auth Basic Module验证的用户名。\n$request_filename ： 当前请求的文件路径，由root或alias指令与URI请求生成。\n$scheme ： HTTP方法（如http，https）。\n$server_protocol ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。\n$server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。\n$server_name ： 服务器名称。\n$server_port ： 请求到达服务器的端口号。\n$request_uri ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。\n$uri ： 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。\n$document_uri ： 与$uri相同。\n```\n\n如：\n\n```stylus\n访问链接是：http://localhost:88/test1/test2/test.php \n网站路径是：/var/www/html\n$host：localhost\n$server_port：88\n$request_uri：http://localhost:88/test1/test2/test.php\n$document_uri：/test1/test2/test.php\n$document_root：/var/www/html\n$request_filename：/var/www/html/test1/test2/test.php\n```\n\n### 例子\n\n```nginx\n# 如果文件不存在则返回400\nif (!-f $request_filename) {\n    return 400;\n}\n# 如果host不是xuexb.com，则301到xuexb.com中\nif ( $host != 'xuexb.com' ){\n    rewrite ^/(.*)$ https://xuexb.com/$1 permanent;\n}\n# 如果请求类型不是POST则返回405\nif ($request_method = POST) {\n    return 405;\n}\n# 如果参数中有 a=1 则301到指定域名\nif ($args ~ a=1) {\n    rewrite ^ http://example.com/ permanent;\n}\n```\n\n在某种场景下可结合`location`规则来使用，如：\n\n```nginx\n# 访问 /test.html 时\nlocation = /test.html {\n    # 默认值为xiaowu\n    set $name xiaowu;\n    # 如果参数中有 name=xx 则使用该值\n    if ($args ~* name=(\\w+?)(&|$)) {\n        set $name $1;\n    }\n    # 301\n    rewrite ^ /$name.html permanent;\n}\n```\n\n上面表示：\n\n- /test.html => /xiaowu.html\n- /test.html?name=ok => /ok.html?name=ok\n\n## location\n\n### 语法\n\n在`server`块中使用，如：\n\n```nginx\nserver { \n    location 表达式 {    }\n}\n```\n\nlocation表达式类型\n\n- 如果直接写一个路径，则匹配该路径下的\n- ~ 表示执行一个正则匹配，区分大小写\n- ~* 表示执行一个正则匹配，不区分大小写\n- ^~ 表示普通字符匹配。使用前缀匹配。如果匹配成功，则不再匹配其他location。\n- = 进行普通字符精确匹配。也就是完全匹配。\n\n### 优先级\n\n1. 等号类型（=）的优先级最高。一旦匹配成功，则不再查找其他匹配项。\n2. ^~类型表达式。一旦匹配成功，则不再查找其他匹配项。\n3. 正则表达式类型（~ ~*）的优先级次之。如果有多个location的正则能匹配的话，则使用正则表达式最长的那个。\n4. 常规字符串匹配类型。按前缀匹配。\n\n### 例子 - 假地址掩饰真地址\n\n```nginx\nserver {\n    # 用 xxoo_admin 来掩饰 admin\n    location / {\n        # 使用break拿一旦匹配成功则忽略后续location\n        rewrite /xxoo_admin /admin break;\n    }\n    # 访问真实地址直接报没权限\n    location /admin {\n        return 403;\n    }\n}\n```\n\n# 参考\n\n<https://www.toolnb.com/tools/rewriteTools.html>","source":"_posts/nginx/nginx伪静态.md","raw":"---\ntitle: nginx伪静态\ndate: 2019-09-02 22:26:40\ntags:\n- nginx\n---\n# 伪静态\n\n伪静态是一种可以把文件后缀改成任何可能的一种方法，如果我想把PHP文件伪静态成html文件，这种相当简单的。\nnginx里使用伪静态是直接在nginx.conf 中写规则的，而apache要开启写模块(mod_rewrite)才能进行伪静态。\nnginx只需要打开nginx.conf配置文件,然后在里面写需要的规则就可以了。\n\n**1、Nginx伪静态案例：（Nginx用伪静态是不需要配置的）**\n\n找到nginx.conf配置文件：nginx.conf，然后打开，找到server {} 在里面加上：\n\n下面加的意思是隐藏掉index.php：\n\n```nginx\nlocation / {         \n    # 其他的一些规则，自己加\n    if(!-e $request_filename) {         \n        rewrite  ^(.*)$  /index.php?s=$1  last; \n        break;  \n    }\n}\n```\n\n**2、每个网站独立的配置文件（独立的伪静态规则）：**\n\n我们正常的时候每个网站都会有独立的配置文件，直接去改配置文件就好了。然后nginx.conf引入他们所有的配置文件就好了：\n\n如：在nginx.conf配置文件最下面添加以下代码：\n\n```nginx\ninclude vhost/*.conf;\n```\n\n说明：引入nginx.conf配置文件所在目录下vhost目录下的所有以.conf的配置文件！\n\n以下就是其中一个网站的配置文件内容：规则就是隐藏掉index.php\n\n```nginx\nserver {\n        listen       80;\n        root /www/web/admin/public;\n        server_name www.admin.com;\n        index  index.html index.php index.htm;\n        error_page  400 /errpage/400.html;\n        error_page  403 /errpage/403.html;\n        error_page  404 /errpage/404.html;\n        error_page  503 /errpage/503.html;\n        location ~ \\.php$ {\n                fastcgi_pass   127.0.0.1:9000;\n                fastcgi_index  index.php;\n                include fcgi.conf;\n        }\n        location ~ /\\.ht {\n                deny  all;\n        }\n        location / { \n            if (!-e $request_filename) {\n                 rewrite  ^(.*)$  /index.php?s=$1  last;\n                 break;\n            }\n        }\n}\n```\n\n# nginx url重写\n\nurl重写是指通过配置conf文件，以让网站的url中达到某种状态时则定向/跳转到某个规则，比如常见的伪静态、301重定向、浏览器定向等\n\n## rewrite\n\n### 语法\n\n在配置文件的`server`块中写，如：\n\n```nginx\nserver {   \n    rewrite 规则 定向路径 重写类型;\n}\n```\n\n- 规则：可以是字符串或者正则来表示想匹配的目标url\n- 定向路径：表示匹配到规则后要定向的路径，如果规则里有正则，则可以使用`$index`来表示正则里的捕获分组\n- 重写类型：\n  - last ：相当于Apache里德(L)标记，表示完成rewrite，浏览器地址栏URL地址不变\n  - break；本条规则匹配完成后，终止匹配，不再匹配后面的规则，浏览器地址栏URL地址不变\n  - redirect：返回302临时重定向，浏览器地址会显示跳转后的URL地址\n  - permanent：返回301永久重定向，浏览器地址栏会显示跳转后的URL地址\n\n### 简单例子\n\n```nginx\nserver {\n    # 访问 /last.html 的时候，页面内容重写到 /index.html 中\n    rewrite /last.html /index.html last;\n    # 访问 /break.html 的时候，页面内容重写到 /index.html 中，并停止后续的匹配\n    rewrite /break.html /index.html break;\n    # 访问 /redirect.html 的时候，页面直接302定向到 /index.html中\n    rewrite /redirect.html /index.html redirect;\n    # 访问 /permanent.html 的时候，页面直接301定向到 /index.html中\n    rewrite /permanent.html /index.html permanent;\n    # 把 /html/*.html => /post/*.html ，301定向\n    rewrite ^/html/(.+?).html$ /post/$1.html permanent;\n    # 把 /search/key => /search.html?keyword=key\n    rewrite ^/search\\/([^\\/]+?)(\\/|$) /search.html?keyword=$1 permanent;\n}\n```\n\n#### last和break的区别\n\n因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里 last 和 break 区别有点难以理解：\n\n- last一般写在server和if中，而break一般使用在location中\n- last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配\n- break和last都能组织继续执行后面的rewrite指令\n\n在`location`里一旦返回`break`则直接生效并停止后续的匹配`location`\n\n```nginx\nserver {\n    location / {\n        rewrite /last/ /q.html last;\n        rewrite /break/ /q.html break;\n    }\n    location = /q.html {\n        return 400;\n    }\n}\n```\n\n- 访问`/last/`时重写到`/q.html`，然后使用新的`uri`再匹配，正好匹配到`locatoin = /q.html`然后返回了`400`\n- 访问`/break`时重写到`/q.html`，由于返回了`break`，则直接停止了\n\n## if判断\n\n只是上面的简单重写很多时候满足不了需求，比如需要判断当文件不存在时、当路径包含xx时等条件，则需要用到`if`\n\n### 语法\n\n```undefined\nif (表达式) {}\n```\n\n- 当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false\n- 直接比较变量和内容时，使用=或!=\n- ~正则表达式匹配，~*不区分大小写的匹配，!~区分大小写的不匹配\n\n一些内置的条件判断：\n\n- -f和!-f用来判断是否存在文件\n- -d和!-d用来判断是否存在目录\n- -e和!-e用来判断是否存在文件或目录\n- -x和!-x用来判断文件是否可执行\n\n### 内置的全局变量\n\n```\n$args ：这个变量等于请求行中的参数，同$query_string\n$content_length ： 请求头中的Content-length字段。\n$content_type ： 请求头中的Content-Type字段。\n$document_root ： 当前请求在root指令中指定的值。\n$host ： 请求主机头字段，否则为服务器名称。\n$http_user_agent ： 客户端agent信息\n$http_cookie ： 客户端cookie信息\n$limit_rate ： 这个变量可以限制连接速率。\n$request_method ： 客户端请求的动作，通常为GET或POST。\n$remote_addr ： 客户端的IP地址。\n$remote_port ： 客户端的端口。\n$remote_user ： 已经经过Auth Basic Module验证的用户名。\n$request_filename ： 当前请求的文件路径，由root或alias指令与URI请求生成。\n$scheme ： HTTP方法（如http，https）。\n$server_protocol ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。\n$server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。\n$server_name ： 服务器名称。\n$server_port ： 请求到达服务器的端口号。\n$request_uri ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。\n$uri ： 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。\n$document_uri ： 与$uri相同。\n```\n\n如：\n\n```stylus\n访问链接是：http://localhost:88/test1/test2/test.php \n网站路径是：/var/www/html\n$host：localhost\n$server_port：88\n$request_uri：http://localhost:88/test1/test2/test.php\n$document_uri：/test1/test2/test.php\n$document_root：/var/www/html\n$request_filename：/var/www/html/test1/test2/test.php\n```\n\n### 例子\n\n```nginx\n# 如果文件不存在则返回400\nif (!-f $request_filename) {\n    return 400;\n}\n# 如果host不是xuexb.com，则301到xuexb.com中\nif ( $host != 'xuexb.com' ){\n    rewrite ^/(.*)$ https://xuexb.com/$1 permanent;\n}\n# 如果请求类型不是POST则返回405\nif ($request_method = POST) {\n    return 405;\n}\n# 如果参数中有 a=1 则301到指定域名\nif ($args ~ a=1) {\n    rewrite ^ http://example.com/ permanent;\n}\n```\n\n在某种场景下可结合`location`规则来使用，如：\n\n```nginx\n# 访问 /test.html 时\nlocation = /test.html {\n    # 默认值为xiaowu\n    set $name xiaowu;\n    # 如果参数中有 name=xx 则使用该值\n    if ($args ~* name=(\\w+?)(&|$)) {\n        set $name $1;\n    }\n    # 301\n    rewrite ^ /$name.html permanent;\n}\n```\n\n上面表示：\n\n- /test.html => /xiaowu.html\n- /test.html?name=ok => /ok.html?name=ok\n\n## location\n\n### 语法\n\n在`server`块中使用，如：\n\n```nginx\nserver { \n    location 表达式 {    }\n}\n```\n\nlocation表达式类型\n\n- 如果直接写一个路径，则匹配该路径下的\n- ~ 表示执行一个正则匹配，区分大小写\n- ~* 表示执行一个正则匹配，不区分大小写\n- ^~ 表示普通字符匹配。使用前缀匹配。如果匹配成功，则不再匹配其他location。\n- = 进行普通字符精确匹配。也就是完全匹配。\n\n### 优先级\n\n1. 等号类型（=）的优先级最高。一旦匹配成功，则不再查找其他匹配项。\n2. ^~类型表达式。一旦匹配成功，则不再查找其他匹配项。\n3. 正则表达式类型（~ ~*）的优先级次之。如果有多个location的正则能匹配的话，则使用正则表达式最长的那个。\n4. 常规字符串匹配类型。按前缀匹配。\n\n### 例子 - 假地址掩饰真地址\n\n```nginx\nserver {\n    # 用 xxoo_admin 来掩饰 admin\n    location / {\n        # 使用break拿一旦匹配成功则忽略后续location\n        rewrite /xxoo_admin /admin break;\n    }\n    # 访问真实地址直接报没权限\n    location /admin {\n        return 403;\n    }\n}\n```\n\n# 参考\n\n<https://www.toolnb.com/tools/rewriteTools.html>","slug":"nginx/nginx伪静态","published":1,"updated":"2019-10-14T09:01:07.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a4490049ic1y4hrp3e4z","content":"<h1 id=\"伪静态\"><a href=\"#伪静态\" class=\"headerlink\" title=\"伪静态\"></a>伪静态</h1><p>伪静态是一种可以把文件后缀改成任何可能的一种方法，如果我想把PHP文件伪静态成html文件，这种相当简单的。<br>nginx里使用伪静态是直接在nginx.conf 中写规则的，而apache要开启写模块(mod_rewrite)才能进行伪静态。<br>nginx只需要打开nginx.conf配置文件,然后在里面写需要的规则就可以了。</p>\n<p><strong>1、Nginx伪静态案例：（Nginx用伪静态是不需要配置的）</strong></p>\n<p>找到nginx.conf配置文件：nginx.conf，然后打开，找到server {} 在里面加上：</p>\n<p>下面加的意思是隐藏掉index.php：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> / &#123;         </span><br><span class=\"line\">    <span class=\"comment\"># 其他的一些规则，自己加</span></span><br><span class=\"line\">    if(!-e $request_filename) &#123;         </span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span> <span class=\"regexp\"> ^(.*)$</span>  /index.php?s=<span class=\"variable\">$1</span>  <span class=\"literal\">last</span>; </span><br><span class=\"line\">        break;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2、每个网站独立的配置文件（独立的伪静态规则）：</strong></p>\n<p>我们正常的时候每个网站都会有独立的配置文件，直接去改配置文件就好了。然后nginx.conf引入他们所有的配置文件就好了：</p>\n<p>如：在nginx.conf配置文件最下面添加以下代码：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">include</span> vhost/<span class=\"regexp\">*.conf</span>;</span><br></pre></td></tr></table></figure>\n<p>说明：引入nginx.conf配置文件所在目录下vhost目录下的所有以.conf的配置文件！</p>\n<p>以下就是其中一个网站的配置文件内容：规则就是隐藏掉index.php</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">        <span class=\"attribute\">root</span> /www/web/admin/public;</span><br><span class=\"line\">        <span class=\"attribute\">server_name</span> www.admin.com;</span><br><span class=\"line\">        <span class=\"attribute\">index</span>  index.html index.php index.htm;</span><br><span class=\"line\">        <span class=\"attribute\">error_page</span>  <span class=\"number\">400</span> /errpage/<span class=\"number\">400</span>.html;</span><br><span class=\"line\">        <span class=\"attribute\">error_page</span>  <span class=\"number\">403</span> /errpage/<span class=\"number\">403</span>.html;</span><br><span class=\"line\">        <span class=\"attribute\">error_page</span>  <span class=\"number\">404</span> /errpage/<span class=\"number\">404</span>.html;</span><br><span class=\"line\">        <span class=\"attribute\">error_page</span>  <span class=\"number\">503</span> /errpage/<span class=\"number\">503</span>.html;</span><br><span class=\"line\">        <span class=\"attribute\">location</span> <span class=\"regexp\">~ \\.php$</span> &#123;</span><br><span class=\"line\">                <span class=\"attribute\">fastcgi_pass</span>   <span class=\"number\">127.0.0.1:9000</span>;</span><br><span class=\"line\">                <span class=\"attribute\">fastcgi_index</span>  index.php;</span><br><span class=\"line\">                <span class=\"attribute\">include</span> fcgi.conf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"attribute\">location</span> <span class=\"regexp\">~ /\\.ht</span> &#123;</span><br><span class=\"line\">                <span class=\"attribute\">deny</span>  all;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">            <span class=\"attribute\">if</span> (!-e <span class=\"variable\">$request_filename</span>) &#123;</span><br><span class=\"line\">                 <span class=\"attribute\">rewrite</span> <span class=\"regexp\"> ^(.*)$</span>  /index.php?s=<span class=\"variable\">$1</span>  <span class=\"literal\">last</span>;</span><br><span class=\"line\">                 break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"nginx-url重写\"><a href=\"#nginx-url重写\" class=\"headerlink\" title=\"nginx url重写\"></a>nginx url重写</h1><p>url重写是指通过配置conf文件，以让网站的url中达到某种状态时则定向/跳转到某个规则，比如常见的伪静态、301重定向、浏览器定向等</p>\n<h2 id=\"rewrite\"><a href=\"#rewrite\" class=\"headerlink\" title=\"rewrite\"></a>rewrite</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>在配置文件的<code>server</code>块中写，如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;   </span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span> 规则 定向路径 重写类型;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>规则：可以是字符串或者正则来表示想匹配的目标url</li>\n<li>定向路径：表示匹配到规则后要定向的路径，如果规则里有正则，则可以使用<code>$index</code>来表示正则里的捕获分组</li>\n<li>重写类型：<ul>\n<li>last ：相当于Apache里德(L)标记，表示完成rewrite，浏览器地址栏URL地址不变</li>\n<li>break；本条规则匹配完成后，终止匹配，不再匹配后面的规则，浏览器地址栏URL地址不变</li>\n<li>redirect：返回302临时重定向，浏览器地址会显示跳转后的URL地址</li>\n<li>permanent：返回301永久重定向，浏览器地址栏会显示跳转后的URL地址</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 访问 /last.html 的时候，页面内容重写到 /index.html 中</span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span> /last.html /index.html <span class=\"literal\">last</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 访问 /break.html 的时候，页面内容重写到 /index.html 中，并停止后续的匹配</span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span> /break.html /index.html <span class=\"literal\">break</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 访问 /redirect.html 的时候，页面直接302定向到 /index.html中</span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span> /redirect.html /index.html <span class=\"literal\">redirect</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 访问 /permanent.html 的时候，页面直接301定向到 /index.html中</span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span> /permanent.html /index.html <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 把 /html/*.html =&gt; /post/*.html ，301定向</span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/html/(.+?).html$</span> /post/<span class=\"variable\">$1</span>.html <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 把 /search/key =&gt; /search.html?keyword=key</span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/search\\/([^\\/]+?)(\\/|$)</span> /search.html?keyword=<span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"last和break的区别\"><a href=\"#last和break的区别\" class=\"headerlink\" title=\"last和break的区别\"></a>last和break的区别</h4><p>因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里 last 和 break 区别有点难以理解：</p>\n<ul>\n<li>last一般写在server和if中，而break一般使用在location中</li>\n<li>last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配</li>\n<li>break和last都能组织继续执行后面的rewrite指令</li>\n</ul>\n<p>在<code>location</code>里一旦返回<code>break</code>则直接生效并停止后续的匹配<code>location</code></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span> /last/ /q.html <span class=\"literal\">last</span>;</span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span> /break/ /q.html <span class=\"literal\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> = /q.html &#123;</span><br><span class=\"line\">        <span class=\"attribute\">return</span> <span class=\"number\">400</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>访问<code>/last/</code>时重写到<code>/q.html</code>，然后使用新的<code>uri</code>再匹配，正好匹配到<code>locatoin = /q.html</code>然后返回了<code>400</code></li>\n<li>访问<code>/break</code>时重写到<code>/q.html</code>，由于返回了<code>break</code>，则直接停止了</li>\n</ul>\n<h2 id=\"if判断\"><a href=\"#if判断\" class=\"headerlink\" title=\"if判断\"></a>if判断</h2><p>只是上面的简单重写很多时候满足不了需求，比如需要判断当文件不存在时、当路径包含xx时等条件，则需要用到<code>if</code></p>\n<h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (表达式) &#123;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false</li>\n<li>直接比较变量和内容时，使用=或!=</li>\n<li>~正则表达式匹配，~*不区分大小写的匹配，!~区分大小写的不匹配</li>\n</ul>\n<p>一些内置的条件判断：</p>\n<ul>\n<li>-f和!-f用来判断是否存在文件</li>\n<li>-d和!-d用来判断是否存在目录</li>\n<li>-e和!-e用来判断是否存在文件或目录</li>\n<li>-x和!-x用来判断文件是否可执行</li>\n</ul>\n<h3 id=\"内置的全局变量\"><a href=\"#内置的全局变量\" class=\"headerlink\" title=\"内置的全局变量\"></a>内置的全局变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$args ：这个变量等于请求行中的参数，同$query_string</span><br><span class=\"line\">$content_length ： 请求头中的Content-length字段。</span><br><span class=\"line\">$content_type ： 请求头中的Content-Type字段。</span><br><span class=\"line\">$document_root ： 当前请求在root指令中指定的值。</span><br><span class=\"line\">$host ： 请求主机头字段，否则为服务器名称。</span><br><span class=\"line\">$http_user_agent ： 客户端agent信息</span><br><span class=\"line\">$http_cookie ： 客户端cookie信息</span><br><span class=\"line\">$limit_rate ： 这个变量可以限制连接速率。</span><br><span class=\"line\">$request_method ： 客户端请求的动作，通常为GET或POST。</span><br><span class=\"line\">$remote_addr ： 客户端的IP地址。</span><br><span class=\"line\">$remote_port ： 客户端的端口。</span><br><span class=\"line\">$remote_user ： 已经经过Auth Basic Module验证的用户名。</span><br><span class=\"line\">$request_filename ： 当前请求的文件路径，由root或alias指令与URI请求生成。</span><br><span class=\"line\">$scheme ： HTTP方法（如http，https）。</span><br><span class=\"line\">$server_protocol ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</span><br><span class=\"line\">$server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。</span><br><span class=\"line\">$server_name ： 服务器名称。</span><br><span class=\"line\">$server_port ： 请求到达服务器的端口号。</span><br><span class=\"line\">$request_uri ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。</span><br><span class=\"line\">$uri ： 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。</span><br><span class=\"line\">$document_uri ： 与$uri相同。</span><br></pre></td></tr></table></figure>\n<p>如：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">访问链接是：http:<span class=\"comment\">//localhost:88/test1/test2/test.php </span></span><br><span class=\"line\">网站路径是：/var/www/html</span><br><span class=\"line\"><span class=\"variable\">$host</span>：localhost</span><br><span class=\"line\"><span class=\"variable\">$server_port</span>：<span class=\"number\">88</span></span><br><span class=\"line\"><span class=\"variable\">$request_uri</span>：http:<span class=\"comment\">//localhost:88/test1/test2/test.php</span></span><br><span class=\"line\"><span class=\"variable\">$document_uri</span>：/test1/test2/test.php</span><br><span class=\"line\"><span class=\"variable\">$document_root</span>：/var/www/html</span><br><span class=\"line\"><span class=\"variable\">$request_filename</span>：/var/www/html/test1/test2/test.php</span><br></pre></td></tr></table></figure>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果文件不存在则返回400</span></span><br><span class=\"line\"><span class=\"attribute\">if</span> (!-f <span class=\"variable\">$request_filename</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">400</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 如果host不是xuexb.com，则301到xuexb.com中</span></span><br><span class=\"line\"><span class=\"attribute\">if</span> ( <span class=\"variable\">$host</span> != <span class=\"string\">'xuexb.com'</span> )&#123;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/(.*)$</span> https://xuexb.com/<span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 如果请求类型不是POST则返回405</span></span><br><span class=\"line\"><span class=\"attribute\">if</span> (<span class=\"variable\">$request_method</span> = POST) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">405</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 如果参数中有 a=1 则301到指定域名</span></span><br><span class=\"line\"><span class=\"attribute\">if</span> (<span class=\"variable\">$args</span> <span class=\"regexp\">~ a=1)</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^</span> http://example.com/ <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在某种场景下可结合<code>location</code>规则来使用，如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 访问 /test.html 时</span></span><br><span class=\"line\"><span class=\"attribute\">location</span> = /test.html &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 默认值为xiaowu</span></span><br><span class=\"line\">    <span class=\"attribute\">set</span> <span class=\"variable\">$name</span> xiaowu;</span><br><span class=\"line\">    <span class=\"comment\"># 如果参数中有 name=xx 则使用该值</span></span><br><span class=\"line\">    <span class=\"attribute\">if</span> (<span class=\"variable\">$args</span> <span class=\"regexp\">~* name=(\\w+?)(&amp;|$))</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">set</span> <span class=\"variable\">$name</span> <span class=\"variable\">$1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># 301</span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^</span> /<span class=\"variable\">$name</span>.html <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面表示：</p>\n<ul>\n<li>/test.html =&gt; /xiaowu.html</li>\n<li>/test.html?name=ok =&gt; /ok.html?name=ok</li>\n</ul>\n<h2 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h2><h3 id=\"语法-2\"><a href=\"#语法-2\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>在<code>server</code>块中使用，如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">location</span> 表达式 &#123;    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>location表达式类型</p>\n<ul>\n<li>如果直接写一个路径，则匹配该路径下的</li>\n<li>~ 表示执行一个正则匹配，区分大小写</li>\n<li>~* 表示执行一个正则匹配，不区分大小写</li>\n<li>^~ 表示普通字符匹配。使用前缀匹配。如果匹配成功，则不再匹配其他location。</li>\n<li>= 进行普通字符精确匹配。也就是完全匹配。</li>\n</ul>\n<h3 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h3><ol>\n<li>等号类型（=）的优先级最高。一旦匹配成功，则不再查找其他匹配项。</li>\n<li>^~类型表达式。一旦匹配成功，则不再查找其他匹配项。</li>\n<li>正则表达式类型（~ ~*）的优先级次之。如果有多个location的正则能匹配的话，则使用正则表达式最长的那个。</li>\n<li>常规字符串匹配类型。按前缀匹配。</li>\n</ol>\n<h3 id=\"例子-假地址掩饰真地址\"><a href=\"#例子-假地址掩饰真地址\" class=\"headerlink\" title=\"例子 - 假地址掩饰真地址\"></a>例子 - 假地址掩饰真地址</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 用 xxoo_admin 来掩饰 admin</span></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"comment\"># 使用break拿一旦匹配成功则忽略后续location</span></span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span> /xxoo_admin /admin <span class=\"literal\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># 访问真实地址直接报没权限</span></span><br><span class=\"line\">    <span class=\"attribute\">location</span> /admin &#123;</span><br><span class=\"line\">        <span class=\"attribute\">return</span> <span class=\"number\">403</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.toolnb.com/tools/rewriteTools.html\" target=\"_blank\" rel=\"noopener\">https://www.toolnb.com/tools/rewriteTools.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"伪静态\"><a href=\"#伪静态\" class=\"headerlink\" title=\"伪静态\"></a>伪静态</h1><p>伪静态是一种可以把文件后缀改成任何可能的一种方法，如果我想把PHP文件伪静态成html文件，这种相当简单的。<br>nginx里使用伪静态是直接在nginx.conf 中写规则的，而apache要开启写模块(mod_rewrite)才能进行伪静态。<br>nginx只需要打开nginx.conf配置文件,然后在里面写需要的规则就可以了。</p>\n<p><strong>1、Nginx伪静态案例：（Nginx用伪静态是不需要配置的）</strong></p>\n<p>找到nginx.conf配置文件：nginx.conf，然后打开，找到server {} 在里面加上：</p>\n<p>下面加的意思是隐藏掉index.php：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> / &#123;         </span><br><span class=\"line\">    <span class=\"comment\"># 其他的一些规则，自己加</span></span><br><span class=\"line\">    if(!-e $request_filename) &#123;         </span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span> <span class=\"regexp\"> ^(.*)$</span>  /index.php?s=<span class=\"variable\">$1</span>  <span class=\"literal\">last</span>; </span><br><span class=\"line\">        break;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2、每个网站独立的配置文件（独立的伪静态规则）：</strong></p>\n<p>我们正常的时候每个网站都会有独立的配置文件，直接去改配置文件就好了。然后nginx.conf引入他们所有的配置文件就好了：</p>\n<p>如：在nginx.conf配置文件最下面添加以下代码：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">include</span> vhost/<span class=\"regexp\">*.conf</span>;</span><br></pre></td></tr></table></figure>\n<p>说明：引入nginx.conf配置文件所在目录下vhost目录下的所有以.conf的配置文件！</p>\n<p>以下就是其中一个网站的配置文件内容：规则就是隐藏掉index.php</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">        <span class=\"attribute\">root</span> /www/web/admin/public;</span><br><span class=\"line\">        <span class=\"attribute\">server_name</span> www.admin.com;</span><br><span class=\"line\">        <span class=\"attribute\">index</span>  index.html index.php index.htm;</span><br><span class=\"line\">        <span class=\"attribute\">error_page</span>  <span class=\"number\">400</span> /errpage/<span class=\"number\">400</span>.html;</span><br><span class=\"line\">        <span class=\"attribute\">error_page</span>  <span class=\"number\">403</span> /errpage/<span class=\"number\">403</span>.html;</span><br><span class=\"line\">        <span class=\"attribute\">error_page</span>  <span class=\"number\">404</span> /errpage/<span class=\"number\">404</span>.html;</span><br><span class=\"line\">        <span class=\"attribute\">error_page</span>  <span class=\"number\">503</span> /errpage/<span class=\"number\">503</span>.html;</span><br><span class=\"line\">        <span class=\"attribute\">location</span> <span class=\"regexp\">~ \\.php$</span> &#123;</span><br><span class=\"line\">                <span class=\"attribute\">fastcgi_pass</span>   <span class=\"number\">127.0.0.1:9000</span>;</span><br><span class=\"line\">                <span class=\"attribute\">fastcgi_index</span>  index.php;</span><br><span class=\"line\">                <span class=\"attribute\">include</span> fcgi.conf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"attribute\">location</span> <span class=\"regexp\">~ /\\.ht</span> &#123;</span><br><span class=\"line\">                <span class=\"attribute\">deny</span>  all;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">            <span class=\"attribute\">if</span> (!-e <span class=\"variable\">$request_filename</span>) &#123;</span><br><span class=\"line\">                 <span class=\"attribute\">rewrite</span> <span class=\"regexp\"> ^(.*)$</span>  /index.php?s=<span class=\"variable\">$1</span>  <span class=\"literal\">last</span>;</span><br><span class=\"line\">                 break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"nginx-url重写\"><a href=\"#nginx-url重写\" class=\"headerlink\" title=\"nginx url重写\"></a>nginx url重写</h1><p>url重写是指通过配置conf文件，以让网站的url中达到某种状态时则定向/跳转到某个规则，比如常见的伪静态、301重定向、浏览器定向等</p>\n<h2 id=\"rewrite\"><a href=\"#rewrite\" class=\"headerlink\" title=\"rewrite\"></a>rewrite</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>在配置文件的<code>server</code>块中写，如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;   </span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span> 规则 定向路径 重写类型;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>规则：可以是字符串或者正则来表示想匹配的目标url</li>\n<li>定向路径：表示匹配到规则后要定向的路径，如果规则里有正则，则可以使用<code>$index</code>来表示正则里的捕获分组</li>\n<li>重写类型：<ul>\n<li>last ：相当于Apache里德(L)标记，表示完成rewrite，浏览器地址栏URL地址不变</li>\n<li>break；本条规则匹配完成后，终止匹配，不再匹配后面的规则，浏览器地址栏URL地址不变</li>\n<li>redirect：返回302临时重定向，浏览器地址会显示跳转后的URL地址</li>\n<li>permanent：返回301永久重定向，浏览器地址栏会显示跳转后的URL地址</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 访问 /last.html 的时候，页面内容重写到 /index.html 中</span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span> /last.html /index.html <span class=\"literal\">last</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 访问 /break.html 的时候，页面内容重写到 /index.html 中，并停止后续的匹配</span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span> /break.html /index.html <span class=\"literal\">break</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 访问 /redirect.html 的时候，页面直接302定向到 /index.html中</span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span> /redirect.html /index.html <span class=\"literal\">redirect</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 访问 /permanent.html 的时候，页面直接301定向到 /index.html中</span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span> /permanent.html /index.html <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 把 /html/*.html =&gt; /post/*.html ，301定向</span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/html/(.+?).html$</span> /post/<span class=\"variable\">$1</span>.html <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 把 /search/key =&gt; /search.html?keyword=key</span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/search\\/([^\\/]+?)(\\/|$)</span> /search.html?keyword=<span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"last和break的区别\"><a href=\"#last和break的区别\" class=\"headerlink\" title=\"last和break的区别\"></a>last和break的区别</h4><p>因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里 last 和 break 区别有点难以理解：</p>\n<ul>\n<li>last一般写在server和if中，而break一般使用在location中</li>\n<li>last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配</li>\n<li>break和last都能组织继续执行后面的rewrite指令</li>\n</ul>\n<p>在<code>location</code>里一旦返回<code>break</code>则直接生效并停止后续的匹配<code>location</code></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span> /last/ /q.html <span class=\"literal\">last</span>;</span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span> /break/ /q.html <span class=\"literal\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> = /q.html &#123;</span><br><span class=\"line\">        <span class=\"attribute\">return</span> <span class=\"number\">400</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>访问<code>/last/</code>时重写到<code>/q.html</code>，然后使用新的<code>uri</code>再匹配，正好匹配到<code>locatoin = /q.html</code>然后返回了<code>400</code></li>\n<li>访问<code>/break</code>时重写到<code>/q.html</code>，由于返回了<code>break</code>，则直接停止了</li>\n</ul>\n<h2 id=\"if判断\"><a href=\"#if判断\" class=\"headerlink\" title=\"if判断\"></a>if判断</h2><p>只是上面的简单重写很多时候满足不了需求，比如需要判断当文件不存在时、当路径包含xx时等条件，则需要用到<code>if</code></p>\n<h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (表达式) &#123;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false</li>\n<li>直接比较变量和内容时，使用=或!=</li>\n<li>~正则表达式匹配，~*不区分大小写的匹配，!~区分大小写的不匹配</li>\n</ul>\n<p>一些内置的条件判断：</p>\n<ul>\n<li>-f和!-f用来判断是否存在文件</li>\n<li>-d和!-d用来判断是否存在目录</li>\n<li>-e和!-e用来判断是否存在文件或目录</li>\n<li>-x和!-x用来判断文件是否可执行</li>\n</ul>\n<h3 id=\"内置的全局变量\"><a href=\"#内置的全局变量\" class=\"headerlink\" title=\"内置的全局变量\"></a>内置的全局变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$args ：这个变量等于请求行中的参数，同$query_string</span><br><span class=\"line\">$content_length ： 请求头中的Content-length字段。</span><br><span class=\"line\">$content_type ： 请求头中的Content-Type字段。</span><br><span class=\"line\">$document_root ： 当前请求在root指令中指定的值。</span><br><span class=\"line\">$host ： 请求主机头字段，否则为服务器名称。</span><br><span class=\"line\">$http_user_agent ： 客户端agent信息</span><br><span class=\"line\">$http_cookie ： 客户端cookie信息</span><br><span class=\"line\">$limit_rate ： 这个变量可以限制连接速率。</span><br><span class=\"line\">$request_method ： 客户端请求的动作，通常为GET或POST。</span><br><span class=\"line\">$remote_addr ： 客户端的IP地址。</span><br><span class=\"line\">$remote_port ： 客户端的端口。</span><br><span class=\"line\">$remote_user ： 已经经过Auth Basic Module验证的用户名。</span><br><span class=\"line\">$request_filename ： 当前请求的文件路径，由root或alias指令与URI请求生成。</span><br><span class=\"line\">$scheme ： HTTP方法（如http，https）。</span><br><span class=\"line\">$server_protocol ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</span><br><span class=\"line\">$server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。</span><br><span class=\"line\">$server_name ： 服务器名称。</span><br><span class=\"line\">$server_port ： 请求到达服务器的端口号。</span><br><span class=\"line\">$request_uri ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。</span><br><span class=\"line\">$uri ： 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。</span><br><span class=\"line\">$document_uri ： 与$uri相同。</span><br></pre></td></tr></table></figure>\n<p>如：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">访问链接是：http:<span class=\"comment\">//localhost:88/test1/test2/test.php </span></span><br><span class=\"line\">网站路径是：/var/www/html</span><br><span class=\"line\"><span class=\"variable\">$host</span>：localhost</span><br><span class=\"line\"><span class=\"variable\">$server_port</span>：<span class=\"number\">88</span></span><br><span class=\"line\"><span class=\"variable\">$request_uri</span>：http:<span class=\"comment\">//localhost:88/test1/test2/test.php</span></span><br><span class=\"line\"><span class=\"variable\">$document_uri</span>：/test1/test2/test.php</span><br><span class=\"line\"><span class=\"variable\">$document_root</span>：/var/www/html</span><br><span class=\"line\"><span class=\"variable\">$request_filename</span>：/var/www/html/test1/test2/test.php</span><br></pre></td></tr></table></figure>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果文件不存在则返回400</span></span><br><span class=\"line\"><span class=\"attribute\">if</span> (!-f <span class=\"variable\">$request_filename</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">400</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 如果host不是xuexb.com，则301到xuexb.com中</span></span><br><span class=\"line\"><span class=\"attribute\">if</span> ( <span class=\"variable\">$host</span> != <span class=\"string\">'xuexb.com'</span> )&#123;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/(.*)$</span> https://xuexb.com/<span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 如果请求类型不是POST则返回405</span></span><br><span class=\"line\"><span class=\"attribute\">if</span> (<span class=\"variable\">$request_method</span> = POST) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">405</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 如果参数中有 a=1 则301到指定域名</span></span><br><span class=\"line\"><span class=\"attribute\">if</span> (<span class=\"variable\">$args</span> <span class=\"regexp\">~ a=1)</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^</span> http://example.com/ <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在某种场景下可结合<code>location</code>规则来使用，如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 访问 /test.html 时</span></span><br><span class=\"line\"><span class=\"attribute\">location</span> = /test.html &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 默认值为xiaowu</span></span><br><span class=\"line\">    <span class=\"attribute\">set</span> <span class=\"variable\">$name</span> xiaowu;</span><br><span class=\"line\">    <span class=\"comment\"># 如果参数中有 name=xx 则使用该值</span></span><br><span class=\"line\">    <span class=\"attribute\">if</span> (<span class=\"variable\">$args</span> <span class=\"regexp\">~* name=(\\w+?)(&amp;|$))</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">set</span> <span class=\"variable\">$name</span> <span class=\"variable\">$1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># 301</span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^</span> /<span class=\"variable\">$name</span>.html <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面表示：</p>\n<ul>\n<li>/test.html =&gt; /xiaowu.html</li>\n<li>/test.html?name=ok =&gt; /ok.html?name=ok</li>\n</ul>\n<h2 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h2><h3 id=\"语法-2\"><a href=\"#语法-2\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>在<code>server</code>块中使用，如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">location</span> 表达式 &#123;    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>location表达式类型</p>\n<ul>\n<li>如果直接写一个路径，则匹配该路径下的</li>\n<li>~ 表示执行一个正则匹配，区分大小写</li>\n<li>~* 表示执行一个正则匹配，不区分大小写</li>\n<li>^~ 表示普通字符匹配。使用前缀匹配。如果匹配成功，则不再匹配其他location。</li>\n<li>= 进行普通字符精确匹配。也就是完全匹配。</li>\n</ul>\n<h3 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h3><ol>\n<li>等号类型（=）的优先级最高。一旦匹配成功，则不再查找其他匹配项。</li>\n<li>^~类型表达式。一旦匹配成功，则不再查找其他匹配项。</li>\n<li>正则表达式类型（~ ~*）的优先级次之。如果有多个location的正则能匹配的话，则使用正则表达式最长的那个。</li>\n<li>常规字符串匹配类型。按前缀匹配。</li>\n</ol>\n<h3 id=\"例子-假地址掩饰真地址\"><a href=\"#例子-假地址掩饰真地址\" class=\"headerlink\" title=\"例子 - 假地址掩饰真地址\"></a>例子 - 假地址掩饰真地址</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 用 xxoo_admin 来掩饰 admin</span></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"comment\"># 使用break拿一旦匹配成功则忽略后续location</span></span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span> /xxoo_admin /admin <span class=\"literal\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># 访问真实地址直接报没权限</span></span><br><span class=\"line\">    <span class=\"attribute\">location</span> /admin &#123;</span><br><span class=\"line\">        <span class=\"attribute\">return</span> <span class=\"number\">403</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.toolnb.com/tools/rewriteTools.html\" target=\"_blank\" rel=\"noopener\">https://www.toolnb.com/tools/rewriteTools.html</a></p>\n"},{"title":"spring事务实现","date":"2019-08-03T06:40:33.000Z","_content":"\n# 事务概念回顾\n\n> ## 什么是事务？\n\n事务是逻辑上的一组操作，要么都执行，要么都不执行.\n\n> ## 事物的特性（ACID）：\n\n1. **原子性：** 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\n2. **一致性：** 执行事务前后，数据保持一致；\n3. **隔离性：** 并发访问数据库时，一个用户的事物不被其他事物所干扰，各并发事务之间数据库是独立的；\n4. **持久性:**  一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。\n\n# Spring事务管理接口介绍\n\n> ## Spring事务管理接口：\n\n- **PlatformTransactionManager：** （平台）事务管理器\n- **TransactionDefinition：** 事务定义信息(事务隔离级别、传播行为、超时、只读、回滚规则)\n- **TransactionStatus：** 事务运行状态\n\n**所谓事务管理，其实就是“按照给定的事务规则来执行提交或者回滚操作”。**\n\n> ## PlatformTransactionManager接口介绍\n\n**Spring并不直接管理事务，而是提供了多种事务管理器** ，他们将事务管理的职责委托给Hibernate或者JTA等持久化机制所提供的相关平台框架的事务来实现。 Spring事务管理器的接口是： **org.springframework.transaction.PlatformTransactionManager** ，通过这个接口，Spring为各个平台如JDBC、Hibernate等都提供了对应的事务管理器，但是具体的实现就是各个平台自己的事情了。\n\n### PlatformTransactionManager接口代码如下：\n\nPlatformTransactionManager接口中定义了三个方法：\n\n```\nPublic interface PlatformTransactionManager()...{  \n    // Return a currently active transaction or create a new one, according to the specified propagation behavior（根据指定的传播行为，返回当前活动的事务或创建一个新事务。）\n    TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException; \n    // Commit the given transaction, with regard to its status（使用事务目前的状态提交事务）\n    Void commit(TransactionStatus status) throws TransactionException;  \n    // Perform a rollback of the given transaction（对执行的事务进行回滚）\n    Void rollback(TransactionStatus status) throws TransactionException;  \n    } \n复制代码\n```\n\n我们刚刚也说了Spring中PlatformTransactionManager根据不同持久层框架所对应的接口实现类,几个比较常见的如下图所示\n\n![](http://wumu.sciento.cn/img/20190803144836.png)\n\n比如我们在使用JDBC或者iBatis（就是Mybatis）进行数据持久化操作时,我们的xml配置通常如下：\n\n```\n\t<!-- 事务管理器 -->\n\t<bean id=\"transactionManager\"\n\t\tclass=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n\t\t<!-- 数据源 -->\n\t\t<property name=\"dataSource\" ref=\"dataSource\" />\n\t</bean>\n复制代码\n```\n\n> ## TransactionDefinition接口介绍\n\n事务管理器接口 **PlatformTransactionManager** 通过 **getTransaction(TransactionDefinition definition)** 方法来得到一个事务，这个方法里面的参数是 **TransactionDefinition类** ，这个类就定义了一些基本的事务属性。\n\n**那么什么是事务属性呢？**\n\n事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。事务属性包含了5个方面。 \n\n![](http://wumu.sciento.cn/img/20190803144913.png)\n\n\n\n### TransactionDefinition接口中的方法如下：\n\nTransactionDefinition接口中定义了5个方法以及一些表示事务属性的常量比如隔离级别、传播行为等等的常量。\n\n我下面只是列出了TransactionDefinition接口中的方法而没有给出接口中定义的常量，该接口中的常量信息会在后面依次介绍到。\n\n```\npublic interface TransactionDefinition {\n    // 返回事务的传播行为\n    int getPropagationBehavior(); \n    // 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据\n    int getIsolationLevel(); \n    // 返回事务必须在多少秒内完成\n    //返回事务的名字\n    String getName()；\n    int getTimeout();  \n    // 返回是否优化为只读事务。\n    boolean isReadOnly();\n} \n复制代码\n```\n\n### （1）事务隔离级别（定义了一个事务可能受其他并发事务影响的程度）：\n\n我们先来看一下 **并发事务带来的问题** ，然后再来介绍一下 **TransactionDefinition 接口** 中定义了五个表示隔离级别的常量。\n\n> #### 并发事务带来的问题\n\n在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对统一数据进行操作）。并发虽然是必须的，但可能会导致一下的问题。\n\n- **脏读（Dirty read）:** 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。\n\n- **丢失修改（Lost to modify）:** 指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。\n\n  例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\n\n- **不可重复读（Unrepeatableread）:** 指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。\n\n- **幻读（Phantom read）:** 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。\n\n**不可重复度和幻读区别：**\n\n不可重复读的重点是修改，幻读的重点在于新增或者删除。\n\n例1（同样的条件, 你读取过的数据, 再次读取出来发现值不一样了 ）：事务1中的A先生读取自己的工资为     1000的操作还没完成，事务2中的B先生就修改了A的工资为2000，导        致A再读自己的工资时工资变为  2000；这就是不可重复读。\n\n例2（同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\n\n> #### 隔离级别\n\nTransactionDefinition 接口中定义了五个表示隔离级别的常量：\n\n- **TransactionDefinition.ISOLATION_DEFAULT:**\t使用后端数据库默认的隔离级别，Mysql 默认采用的 REPEATABLE_READ隔离级别 Oracle 默认采用的 READ_COMMITTED隔离级别.\n- **TransactionDefinition.ISOLATION_READ_UNCOMMITTED:** 最低的隔离级别，允许读取尚未提交的数据变更，**可能会导致脏读、幻读或不可重复读**\n- **TransactionDefinition.ISOLATION_READ_COMMITTED:** \t允许读取并发事务已经提交的数据，**可以阻止脏读，但是幻读或不可重复读仍有可能发生**\n- **TransactionDefinition.ISOLATION_REPEATABLE_READ:** \t对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，**可以阻止脏读和不可重复读，但幻读仍有可能发生。**\n- **TransactionDefinition.ISOLATION_SERIALIZABLE:** \t最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，**该级别可以防止脏读、不可重复读以及幻读**。但是这将严重影响程序的性能。通常情况下也不会用到该级别。\n\n\n\n### （2）事务传播行为（为了解决业务层方法之间互相调用的事务问题）：\n\n当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：\n\n**支持当前事务的情况：**\n\n- **TransactionDefinition.PROPAGATION_REQUIRED：** 如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。\n- **TransactionDefinition.PROPAGATION_SUPPORTS：** 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。\n- **TransactionDefinition.PROPAGATION_MANDATORY：** 如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）\n\n**不支持当前事务的情况：**\n\n- **TransactionDefinition.PROPAGATION_REQUIRES_NEW：** 创建一个新的事务，如果当前存在事务，则把当前事务挂起。\n- **TransactionDefinition.PROPAGATION_NOT_SUPPORTED：** 以非事务方式运行，如果当前存在事务，则把当前事务挂起。\n- **TransactionDefinition.PROPAGATION_NEVER：** 以非事务方式运行，如果当前存在事务，则抛出异常。\n\n**其他情况：**\n\n- **TransactionDefinition.PROPAGATION_NESTED：** 如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。\n\n这里需要指出的是，前面的六种事务传播行为是 Spring 从 EJB 中引入的，他们共享相同的概念。而 **PROPAGATION_NESTED** 是 Spring 所特有的。以 PROPAGATION_NESTED 启动的事务内嵌于外部事务中（如果存在外部事务的话），此时，内嵌事务并不是一个独立的事务，它依赖于外部事务的存在，只有通过外部的事务提交，才能引起内部事务的提交，嵌套的子事务不能单独提交。如果熟悉 JDBC 中的保存点（SavePoint）的概念，那嵌套事务就很容易理解了，其实嵌套的子事务就是保存点的一个应用，一个事务中可以包括多个保存点，每一个嵌套子事务。另外，外部事务的回滚也会导致嵌套子事务的回滚。\n\n### (3) 事务超时属性(一个事务允许执行的最长时间)\n\n所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。\n\n### (4) 事务只读属性（对事物资源是否执行只读操作）\n\n事务的只读属性是指，对事务性资源进行只读操作或者是读写操作。所谓事务性资源就是指那些被事务管理的资源，比如数据源、 JMS 资源，以及自定义的事务性资源等等。如果确定只对事务性资源进行只读操作，那么我们可以将事务标志为只读的，以提高事务处理的性能。在 TransactionDefinition 中以 boolean 类型来表示该事务是否只读。\n\n### (5) 回滚规则（定义事务回滚规则）\n\n# 例子\n\n## 使用API\n\n下面给出一个基于底层 API 的编程式事务管理的示例， \n基于PlatformTransactionManager、TransactionDefinition 和 TransactionStatus 三个核心接口，我们完全可以通过编程的方式来进行事务管理。\n\n```java\npublic class BankServiceImpl implements BankService {\n    private BankDao bankDao;\n    private TransactionDefinition txDefinition;\n    private PlatformTransactionManager txManager;\n\npublic boolean transfer(Long fromId， Long toId， double amount) {\n    // 获取一个事务\n    TransactionStatus txStatus = txManager.getTransaction(txDefinition);\n    boolean result = false;\n    try {\n        result = bankDao.transfer(fromId， toId， amount);\n        txManager.commit(txStatus);    // 事务提交\n    } catch (Exception e) {\n        result = false;\n        txManager.rollback(txStatus);      // 事务回滚\n        System.out.println(\"Transfer Error!\");\n    }\n    return result;\n}\n相应的配置文件如下所示：\n```\n```xml\n<bean id=\"bankService\" class=\"footmark.spring.core.tx.programmatic.origin.BankServiceImpl\">\n    <property name=\"bankDao\" ref=\"bankDao\"/>\n    <property name=\"txManager\" ref=\"transactionManager\"/>\n    <property name=\"txDefinition\">\n    <bean class=\"org.springframework.transaction.support.DefaultTransactionDefinition\">\n        <property name=\"propagationBehaviorName\" value=\"PROPAGATION_REQUIRED\"/>\n    </bean>\n    </property>\n</bean>如上所示，我们在BankServiceImpl类中增加了两个属性：一个是 TransactionDefinition 类型的属性，它用于定义事务的规则；另一个是 PlatformTransactionManager 类型的属性，用于执行事务管理操作。如果一个业务方法需要添加事务，我们首先需要在方法开始执行前调用PlatformTransactionManager.getTransaction(…) 方法启动一个事务；创建并启动了事务之后，便可以开始编写业务逻辑代码，然后在适当的地方执行事务的提交或者回滚。\n```\n\n## 基于 TransactionTemplate 的编程式事务管理\n\n　　当然，除了可以使用基于底层 API 的编程式事务外，还可以使用基于 TransactionTemplate 的编程式事务管理。通过上面的示例可以发现，上述事务管理的代码散落在业务逻辑代码中，破坏了原有代码的条理性，并且每一个业务方法都包含了类似的启动事务、提交/回滚事务的样板代码。Spring 也意识到了这些，并提供了简化的方法，这就是 Spring 在数据访问层非常常见的 模板回调模式。\n\n```java\npublic class BankServiceImpl implements BankService {\n    private BankDao bankDao;\n    private TransactionTemplate transactionTemplate;\n    ......\n    public boolean transfer(final Long fromId， final Long toId， final double amount) {\n        return (Boolean) transactionTemplate.execute(new TransactionCallback(){\n            public Object doInTransaction(TransactionStatus status) {\n                Object result;\n                try {\n                        result = bankDao.transfer(fromId， toId， amount);\n                    } catch (Exception e) {\n                        status.setRollbackOnly();\n                        result = false;\n                        System.out.println(\"Transfer Error!\");\n                }\n                return result;\n            }\n        });\n    }\n}\n```\n\n相应的配置文件如下所示：\n\n```java\n<bean id=\"bankService\" class=\"footmark.spring.core.tx.programmatic.template.BankServiceImpl\">\n    <property name=\"bankDao\" ref=\"bankDao\"/>\n    <property name=\"transactionTemplate\" ref=\"transactionTemplate\"/>\n</bean>\n```\n\n\nTransactionTemplate 的 execute() 方法有一个 TransactionCallback 类型的参数，该接口中定义了一个 doInTransaction() 方法，通常我们以匿名内部类的方式实现 TransactionCallback 接口，并在其 doInTransaction() 方法中书写业务逻辑代码。这里可以使用默认的事务提交和回滚规则，这样在业务代码中就不需要显式调用任何事务管理的 API。doInTransaction() 方法有一个TransactionStatus 类型的参数，我们可以在方法的任何位置调用该参数的 setRollbackOnly() 方法将事务标识为回滚的，以执行事务回滚。\n\n​    此外，TransactionCallback 接口有一个子接口 TransactionCallbackWithoutResult，该接口中定义了一个 doInTransactionWithoutResult() 方法，TransactionCallbackWithoutResult 接口主要用于事务过程中不需要返回值的情况。当然，对于不需要返回值的情况，我们仍然可以使用 TransactionCallback 接口，并在方法中返回任意值即可。\n\n\n\n## 基于底层 API 的编程式事务管理 \n　　下面给出一个基于底层 API 的编程式事务管理的示例， \n基于PlatformTransactionManager、TransactionDefinition 和 TransactionStatus 三个核心接口，我们完全可以通过编程的方式来进行事务管理。\n\n```java\npublic class BankServiceImpl implements BankService {\n    private BankDao bankDao;\n    private TransactionDefinition txDefinition;\n    private PlatformTransactionManager txManager;\n    public boolean transfer(Long fromId， Long toId， double amount) {\n    // 获取一个事务\n    TransactionStatus txStatus = txManager.getTransaction(txDefinition);\n    boolean result = false;\n    try {\n        result = bankDao.transfer(fromId， toId， amount);\n        txManager.commit(txStatus);    // 事务提交\n    } catch (Exception e) {\n        result = false;\n        txManager.rollback(txStatus);      // 事务回滚\n        System.out.println(\"Transfer Error!\");\n    }\n    return result;\n}\n相应的配置文件如下所示：\n```\n\n```xml\n<bean id=\"bankService\" class=\"footmark.spring.core.tx.programmatic.origin.BankServiceImpl\">\n    <property name=\"bankDao\" ref=\"bankDao\"/>\n    <property name=\"txManager\" ref=\"transactionManager\"/>\n    <property name=\"txDefinition\">\n    <bean class=\"org.springframework.transaction.support.DefaultTransactionDefinition\">\n        <property name=\"propagationBehaviorName\" value=\"PROPAGATION_REQUIRED\"/>\n    </bean>\n    </property>\n</bean>\n```\n\n\n如上所示，我们在BankServiceImpl类中增加了两个属性：一个是 TransactionDefinition 类型的属性，它用于定义事务的规则；另一个是 PlatformTransactionManager 类型的属性，用于执行事务管理操作。如果一个业务方法需要添加事务，我们首先需要在方法开始执行前调用PlatformTransactionManager.getTransaction(…) 方法启动一个事务；创建并启动了事务之后，便可以开始编写业务逻辑代码，然后在适当的地方执行事务的提交或者回滚。\n\n## 基于 TransactionTemplate 的编程式事务管理\n\n　　当然，除了可以使用基于底层 API 的编程式事务外，还可以使用基于 TransactionTemplate 的编程式事务管理。通过上面的示例可以发现，上述事务管理的代码散落在业务逻辑代码中，破坏了原有代码的条理性，并且每一个业务方法都包含了类似的启动事务、提交/回滚事务的样板代码。Spring 也意识到了这些，并提供了简化的方法，这就是 Spring 在数据访问层非常常见的 模板回调模式。\n\n```java\npublic class BankServiceImpl implements BankService {\n    private BankDao bankDao;\n    private TransactionTemplate transactionTemplate;\n    ......\n    public boolean transfer(final Long fromId， final Long toId， final double amount) {\n        return (Boolean) transactionTemplate.execute(new TransactionCallback(){\n            public Object doInTransaction(TransactionStatus status) {\n                Object result;\n                try {\n                        result = bankDao.transfer(fromId， toId， amount);\n                    } catch (Exception e) {\n                        status.setRollbackOnly();\n                        result = false;\n                        System.out.println(\"Transfer Error!\");\n                }\n                return result;\n            }\n        });\n    }\n}\n```\n\n相应的配置文件如下所示：\n\n```xml\n<bean id=\"bankService\" class=\"footmark.spring.core.tx.programmatic.template.BankServiceImpl\">\n    <property name=\"bankDao\" ref=\"bankDao\"/>\n    <property name=\"transactionTemplate\" ref=\"transactionTemplate\"/>\n</bean>\n```\n\n\nTransactionTemplate 的 execute() 方法有一个 TransactionCallback 类型的参数，该接口中定义了一个 doInTransaction() 方法，通常我们以匿名内部类的方式实现 TransactionCallback 接口，并在其 doInTransaction() 方法中书写业务逻辑代码。这里可以使用默认的事务提交和回滚规则，这样在业务代码中就不需要显式调用任何事务管理的 API。doInTransaction() 方法有一个TransactionStatus 类型的参数，我们可以在方法的任何位置调用该参数的 setRollbackOnly() 方法将事务标识为回滚的，以执行事务回滚。\n\n　　此外，TransactionCallback 接口有一个子接口 TransactionCallbackWithoutResult，该接口中定义了一个 doInTransactionWithoutResult() 方法，TransactionCallbackWithoutResult 接口主要用于事务过程中不需要返回值的情况。当然，对于不需要返回值的情况，我们仍然可以使用 TransactionCallback 接口，并在方法中返回任意值即可。\n\n## Spring 声明式事务管理\n　　Spring 的声明式事务管理是建立在 Spring AOP 机制之上的，其本质是对目标方法前后进行拦截，并在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。\n\n　　声明式事务最大的优点就是不需要通过编程的方式管理事务，这样就不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中作相关的事务规则声明（或通过等价的基于标注的方式），便可以将事务规则应用到业务逻辑中。总的来说，声明式事务得益于 Spring IoC容器 和 Spring AOP 机制的支持：IoC容器为声明式事务管理提供了基础设施，使得 Bean 对于 Spring 框架而言是可管理的；而由于事务管理本身就是一个典型的横切逻辑（正是 AOP 的用武之地），因此 Spring AOP 机制是声明式事务管理的直接实现者。\n\n　　显然，声明式事务管理要优于编程式事务管理，这正是spring倡导的非侵入式的开发方式。声明式事务管理使业务代码不受污染，一个普通的POJO对象，只要在XML文件中配置或者添加注解就可以获得完全的事务支持。因此，通常情况下，笔者强烈建议在开发中使用声明式事务，不仅因为其简单，更主要是因为这样使得纯业务代码不被污染，极大方便后期的代码维护。\n\n## 基于 <tx> 命名空间的声明式事务管理 \n\n　　Spring 2.x 引入了 <tx> 命名空间，结合使用 <aop> 命名空间，带给开发人员配置声明式事务的全新体验，配置变得更加简单和灵活。总的来说，开发者只需基于<tx>和<aop>命名空间在XML中进行简答配置便可实现声明式事务管理。下面基于<tx>使用Hibernate事务管理的配置文件：\n\n```xml\n<!-- 配置 DataSourece -->\n<bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\"\n    destroy-method=\"close\">\n    <!-- results in a setDriverClassName(String) call -->\n    <property name=\"driverClassName\">\n        <value>com.mysql.jdbc.Driver</value>\n    </property>\n    <property name=\"url\">\n        <value>jdbc:mysql://localhost:3306/ssh</value>\n    </property>\n    <property name=\"username\">\n        <value>root</value>\n    </property>\n    <property name=\"password\">\n        <value>root</value>\n    </property>\n</bean>\n\n<!-- 配置 sessionFactory -->\n<bean id=\"sessionFactory\"\n    class=\"org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean\">\n    <!-- 数据源的设置 -->\n    <property name=\"dataSource\" ref=\"dataSource\" />\n    <!-- 用于持久化的实体类类列表 -->\n    <property name=\"annotatedClasses\">\n        <list>\n            <value>cn.edu.tju.rico.model.entity.User</value>\n            <value>cn.edu.tju.rico.model.entity.Log</value>\n        </list>\n    </property>\n    <!-- Hibernate 的配置 -->\n    <property name=\"hibernateProperties\">\n        <props>\n            <!-- 方言设置   -->\n            <prop key=\"hibernate.dialect\">org.hibernate.dialect.MySQLDialect</prop>\n            <!-- 显示sql -->\n            <prop key=\"hibernate.show_sql\">true</prop>\n           <!-- 格式化sql -->\n            <prop key=\"hibernate.format_sql\">true</prop>\n            <!-- 自动创建/更新数据表 -->\n            <prop key=\"hibernate.hbm2ddl.auto\">update</prop>\n        </props>\n    </property>\n</bean>\n\n<!-- 配置 TransactionManager -->\n<bean id=\"txManager\"\n    class=\"org.springframework.orm.hibernate3.HibernateTransactionManager\">\n    <property name=\"sessionFactory\" ref=\"sessionFactory\" />\n</bean>\n\n<!-- 配置事务增强处理的切入点，以保证其被恰当的织入 -->    \n<aop:config>\n    <!-- 切点 -->\n    <aop:pointcut expression=\"execution(* cn.edu.tju.rico.service.impl.*.*(..))\"\n        id=\"bussinessService\" />\n    <!-- 声明式事务的切入 -->\n    <aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"bussinessService\" />\n</aop:config>\n\n<!-- 由txAdvice切面定义事务增强处理 -->\n<tx:advice id=\"txAdvice\" transaction-manager=\"txManager\">\n    <tx:attributes>\n        <!-- get打头的方法为只读方法,因此将read-only设为 true -->\n        <tx:method name=\"get*\" read-only=\"true\" />\n        <!-- 其他方法为读写方法,因此将read-only设为 false -->\n        <tx:method name=\"*\" read-only=\"false\" propagation=\"REQUIRED\"\n            isolation=\"DEFAULT\" />\n    </tx:attributes>\n</tx:advice>\n```\n\n 事实上，Spring配置文件中关于事务的配置总是由三个部分组成，即：DataSource、TransactionManager和代理机制三部分，无论哪种配置方式，一般变化的只是代理机制这部分。其中，DataSource、TransactionManager这两部分只是会根据数据访问方式有所变化，比如使用hibernate进行数据访问时，DataSource实际为SessionFactory，TransactionManager的实现为 HibernateTransactionManager。如下图所示：\n\n## 基于 @Transactional 的声明式事务管理\n\n　　除了基于命名空间的事务配置方式，Spring 还引入了基于 Annotation 的方式，具体主要涉及@Transactional 标注。@Transactional 可以作用于接口、接口方法、类以及类方法上：当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性；当作用于方法上时，该标注来覆盖类级别的定义。如下所示：\n\n```java\n@Transactional(propagation = Propagation.REQUIRED)\npublic boolean transfer(Long fromId， Long toId， double amount) {\n    return bankDao.transfer(fromId， toId， amount);\n}\n```\n\n\nSpring 使用 BeanPostProcessor 来处理 Bean 中的标注，因此我们需要在配置文件中作如下声明来激活该后处理 Bean，如下所示：\n\n```java\n<tx:annotation-driven transaction-manager=\"transactionManager”/>\n```\n\n1 与前面相似，transaction-manager、datasource 和 sessionFactory的配置不变，只需将基于<tx>和<aop>命名空间的配置更换为上述配置即可。\n\n## Spring 声明式事务的本质\n\n　　就Spring 声明式事务而言，无论其基于 <tx> 命名空间的实现还是基于 @Transactional 的实现，其本质都是 Spring AOP 机制的应用：即通过以@Transactional的方式或者XML配置文件的方式向业务组件中的目标业务方法插入事务增强处理并生成相应的代理对象供应用程序(客户端)使用从而达到无污染地添加事务的目的。如下图所示：\n\n\n\n# 参考\n\nhttps://juejin.im/post/5b00c52ef265da0b95276091\n\nhttps://blog.csdn.net/justloveyou_/article/details/73733278 \n\n","source":"_posts/java/spring事务实现.md","raw":"---\ntitle: spring事务实现\ndate: 2019-08-03 14:40:33\ntags:\n- java\n- spring\n---\n\n# 事务概念回顾\n\n> ## 什么是事务？\n\n事务是逻辑上的一组操作，要么都执行，要么都不执行.\n\n> ## 事物的特性（ACID）：\n\n1. **原子性：** 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\n2. **一致性：** 执行事务前后，数据保持一致；\n3. **隔离性：** 并发访问数据库时，一个用户的事物不被其他事物所干扰，各并发事务之间数据库是独立的；\n4. **持久性:**  一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。\n\n# Spring事务管理接口介绍\n\n> ## Spring事务管理接口：\n\n- **PlatformTransactionManager：** （平台）事务管理器\n- **TransactionDefinition：** 事务定义信息(事务隔离级别、传播行为、超时、只读、回滚规则)\n- **TransactionStatus：** 事务运行状态\n\n**所谓事务管理，其实就是“按照给定的事务规则来执行提交或者回滚操作”。**\n\n> ## PlatformTransactionManager接口介绍\n\n**Spring并不直接管理事务，而是提供了多种事务管理器** ，他们将事务管理的职责委托给Hibernate或者JTA等持久化机制所提供的相关平台框架的事务来实现。 Spring事务管理器的接口是： **org.springframework.transaction.PlatformTransactionManager** ，通过这个接口，Spring为各个平台如JDBC、Hibernate等都提供了对应的事务管理器，但是具体的实现就是各个平台自己的事情了。\n\n### PlatformTransactionManager接口代码如下：\n\nPlatformTransactionManager接口中定义了三个方法：\n\n```\nPublic interface PlatformTransactionManager()...{  \n    // Return a currently active transaction or create a new one, according to the specified propagation behavior（根据指定的传播行为，返回当前活动的事务或创建一个新事务。）\n    TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException; \n    // Commit the given transaction, with regard to its status（使用事务目前的状态提交事务）\n    Void commit(TransactionStatus status) throws TransactionException;  \n    // Perform a rollback of the given transaction（对执行的事务进行回滚）\n    Void rollback(TransactionStatus status) throws TransactionException;  \n    } \n复制代码\n```\n\n我们刚刚也说了Spring中PlatformTransactionManager根据不同持久层框架所对应的接口实现类,几个比较常见的如下图所示\n\n![](http://wumu.sciento.cn/img/20190803144836.png)\n\n比如我们在使用JDBC或者iBatis（就是Mybatis）进行数据持久化操作时,我们的xml配置通常如下：\n\n```\n\t<!-- 事务管理器 -->\n\t<bean id=\"transactionManager\"\n\t\tclass=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n\t\t<!-- 数据源 -->\n\t\t<property name=\"dataSource\" ref=\"dataSource\" />\n\t</bean>\n复制代码\n```\n\n> ## TransactionDefinition接口介绍\n\n事务管理器接口 **PlatformTransactionManager** 通过 **getTransaction(TransactionDefinition definition)** 方法来得到一个事务，这个方法里面的参数是 **TransactionDefinition类** ，这个类就定义了一些基本的事务属性。\n\n**那么什么是事务属性呢？**\n\n事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。事务属性包含了5个方面。 \n\n![](http://wumu.sciento.cn/img/20190803144913.png)\n\n\n\n### TransactionDefinition接口中的方法如下：\n\nTransactionDefinition接口中定义了5个方法以及一些表示事务属性的常量比如隔离级别、传播行为等等的常量。\n\n我下面只是列出了TransactionDefinition接口中的方法而没有给出接口中定义的常量，该接口中的常量信息会在后面依次介绍到。\n\n```\npublic interface TransactionDefinition {\n    // 返回事务的传播行为\n    int getPropagationBehavior(); \n    // 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据\n    int getIsolationLevel(); \n    // 返回事务必须在多少秒内完成\n    //返回事务的名字\n    String getName()；\n    int getTimeout();  \n    // 返回是否优化为只读事务。\n    boolean isReadOnly();\n} \n复制代码\n```\n\n### （1）事务隔离级别（定义了一个事务可能受其他并发事务影响的程度）：\n\n我们先来看一下 **并发事务带来的问题** ，然后再来介绍一下 **TransactionDefinition 接口** 中定义了五个表示隔离级别的常量。\n\n> #### 并发事务带来的问题\n\n在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对统一数据进行操作）。并发虽然是必须的，但可能会导致一下的问题。\n\n- **脏读（Dirty read）:** 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。\n\n- **丢失修改（Lost to modify）:** 指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。\n\n  例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\n\n- **不可重复读（Unrepeatableread）:** 指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。\n\n- **幻读（Phantom read）:** 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。\n\n**不可重复度和幻读区别：**\n\n不可重复读的重点是修改，幻读的重点在于新增或者删除。\n\n例1（同样的条件, 你读取过的数据, 再次读取出来发现值不一样了 ）：事务1中的A先生读取自己的工资为     1000的操作还没完成，事务2中的B先生就修改了A的工资为2000，导        致A再读自己的工资时工资变为  2000；这就是不可重复读。\n\n例2（同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\n\n> #### 隔离级别\n\nTransactionDefinition 接口中定义了五个表示隔离级别的常量：\n\n- **TransactionDefinition.ISOLATION_DEFAULT:**\t使用后端数据库默认的隔离级别，Mysql 默认采用的 REPEATABLE_READ隔离级别 Oracle 默认采用的 READ_COMMITTED隔离级别.\n- **TransactionDefinition.ISOLATION_READ_UNCOMMITTED:** 最低的隔离级别，允许读取尚未提交的数据变更，**可能会导致脏读、幻读或不可重复读**\n- **TransactionDefinition.ISOLATION_READ_COMMITTED:** \t允许读取并发事务已经提交的数据，**可以阻止脏读，但是幻读或不可重复读仍有可能发生**\n- **TransactionDefinition.ISOLATION_REPEATABLE_READ:** \t对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，**可以阻止脏读和不可重复读，但幻读仍有可能发生。**\n- **TransactionDefinition.ISOLATION_SERIALIZABLE:** \t最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，**该级别可以防止脏读、不可重复读以及幻读**。但是这将严重影响程序的性能。通常情况下也不会用到该级别。\n\n\n\n### （2）事务传播行为（为了解决业务层方法之间互相调用的事务问题）：\n\n当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：\n\n**支持当前事务的情况：**\n\n- **TransactionDefinition.PROPAGATION_REQUIRED：** 如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。\n- **TransactionDefinition.PROPAGATION_SUPPORTS：** 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。\n- **TransactionDefinition.PROPAGATION_MANDATORY：** 如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）\n\n**不支持当前事务的情况：**\n\n- **TransactionDefinition.PROPAGATION_REQUIRES_NEW：** 创建一个新的事务，如果当前存在事务，则把当前事务挂起。\n- **TransactionDefinition.PROPAGATION_NOT_SUPPORTED：** 以非事务方式运行，如果当前存在事务，则把当前事务挂起。\n- **TransactionDefinition.PROPAGATION_NEVER：** 以非事务方式运行，如果当前存在事务，则抛出异常。\n\n**其他情况：**\n\n- **TransactionDefinition.PROPAGATION_NESTED：** 如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。\n\n这里需要指出的是，前面的六种事务传播行为是 Spring 从 EJB 中引入的，他们共享相同的概念。而 **PROPAGATION_NESTED** 是 Spring 所特有的。以 PROPAGATION_NESTED 启动的事务内嵌于外部事务中（如果存在外部事务的话），此时，内嵌事务并不是一个独立的事务，它依赖于外部事务的存在，只有通过外部的事务提交，才能引起内部事务的提交，嵌套的子事务不能单独提交。如果熟悉 JDBC 中的保存点（SavePoint）的概念，那嵌套事务就很容易理解了，其实嵌套的子事务就是保存点的一个应用，一个事务中可以包括多个保存点，每一个嵌套子事务。另外，外部事务的回滚也会导致嵌套子事务的回滚。\n\n### (3) 事务超时属性(一个事务允许执行的最长时间)\n\n所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。\n\n### (4) 事务只读属性（对事物资源是否执行只读操作）\n\n事务的只读属性是指，对事务性资源进行只读操作或者是读写操作。所谓事务性资源就是指那些被事务管理的资源，比如数据源、 JMS 资源，以及自定义的事务性资源等等。如果确定只对事务性资源进行只读操作，那么我们可以将事务标志为只读的，以提高事务处理的性能。在 TransactionDefinition 中以 boolean 类型来表示该事务是否只读。\n\n### (5) 回滚规则（定义事务回滚规则）\n\n# 例子\n\n## 使用API\n\n下面给出一个基于底层 API 的编程式事务管理的示例， \n基于PlatformTransactionManager、TransactionDefinition 和 TransactionStatus 三个核心接口，我们完全可以通过编程的方式来进行事务管理。\n\n```java\npublic class BankServiceImpl implements BankService {\n    private BankDao bankDao;\n    private TransactionDefinition txDefinition;\n    private PlatformTransactionManager txManager;\n\npublic boolean transfer(Long fromId， Long toId， double amount) {\n    // 获取一个事务\n    TransactionStatus txStatus = txManager.getTransaction(txDefinition);\n    boolean result = false;\n    try {\n        result = bankDao.transfer(fromId， toId， amount);\n        txManager.commit(txStatus);    // 事务提交\n    } catch (Exception e) {\n        result = false;\n        txManager.rollback(txStatus);      // 事务回滚\n        System.out.println(\"Transfer Error!\");\n    }\n    return result;\n}\n相应的配置文件如下所示：\n```\n```xml\n<bean id=\"bankService\" class=\"footmark.spring.core.tx.programmatic.origin.BankServiceImpl\">\n    <property name=\"bankDao\" ref=\"bankDao\"/>\n    <property name=\"txManager\" ref=\"transactionManager\"/>\n    <property name=\"txDefinition\">\n    <bean class=\"org.springframework.transaction.support.DefaultTransactionDefinition\">\n        <property name=\"propagationBehaviorName\" value=\"PROPAGATION_REQUIRED\"/>\n    </bean>\n    </property>\n</bean>如上所示，我们在BankServiceImpl类中增加了两个属性：一个是 TransactionDefinition 类型的属性，它用于定义事务的规则；另一个是 PlatformTransactionManager 类型的属性，用于执行事务管理操作。如果一个业务方法需要添加事务，我们首先需要在方法开始执行前调用PlatformTransactionManager.getTransaction(…) 方法启动一个事务；创建并启动了事务之后，便可以开始编写业务逻辑代码，然后在适当的地方执行事务的提交或者回滚。\n```\n\n## 基于 TransactionTemplate 的编程式事务管理\n\n　　当然，除了可以使用基于底层 API 的编程式事务外，还可以使用基于 TransactionTemplate 的编程式事务管理。通过上面的示例可以发现，上述事务管理的代码散落在业务逻辑代码中，破坏了原有代码的条理性，并且每一个业务方法都包含了类似的启动事务、提交/回滚事务的样板代码。Spring 也意识到了这些，并提供了简化的方法，这就是 Spring 在数据访问层非常常见的 模板回调模式。\n\n```java\npublic class BankServiceImpl implements BankService {\n    private BankDao bankDao;\n    private TransactionTemplate transactionTemplate;\n    ......\n    public boolean transfer(final Long fromId， final Long toId， final double amount) {\n        return (Boolean) transactionTemplate.execute(new TransactionCallback(){\n            public Object doInTransaction(TransactionStatus status) {\n                Object result;\n                try {\n                        result = bankDao.transfer(fromId， toId， amount);\n                    } catch (Exception e) {\n                        status.setRollbackOnly();\n                        result = false;\n                        System.out.println(\"Transfer Error!\");\n                }\n                return result;\n            }\n        });\n    }\n}\n```\n\n相应的配置文件如下所示：\n\n```java\n<bean id=\"bankService\" class=\"footmark.spring.core.tx.programmatic.template.BankServiceImpl\">\n    <property name=\"bankDao\" ref=\"bankDao\"/>\n    <property name=\"transactionTemplate\" ref=\"transactionTemplate\"/>\n</bean>\n```\n\n\nTransactionTemplate 的 execute() 方法有一个 TransactionCallback 类型的参数，该接口中定义了一个 doInTransaction() 方法，通常我们以匿名内部类的方式实现 TransactionCallback 接口，并在其 doInTransaction() 方法中书写业务逻辑代码。这里可以使用默认的事务提交和回滚规则，这样在业务代码中就不需要显式调用任何事务管理的 API。doInTransaction() 方法有一个TransactionStatus 类型的参数，我们可以在方法的任何位置调用该参数的 setRollbackOnly() 方法将事务标识为回滚的，以执行事务回滚。\n\n​    此外，TransactionCallback 接口有一个子接口 TransactionCallbackWithoutResult，该接口中定义了一个 doInTransactionWithoutResult() 方法，TransactionCallbackWithoutResult 接口主要用于事务过程中不需要返回值的情况。当然，对于不需要返回值的情况，我们仍然可以使用 TransactionCallback 接口，并在方法中返回任意值即可。\n\n\n\n## 基于底层 API 的编程式事务管理 \n　　下面给出一个基于底层 API 的编程式事务管理的示例， \n基于PlatformTransactionManager、TransactionDefinition 和 TransactionStatus 三个核心接口，我们完全可以通过编程的方式来进行事务管理。\n\n```java\npublic class BankServiceImpl implements BankService {\n    private BankDao bankDao;\n    private TransactionDefinition txDefinition;\n    private PlatformTransactionManager txManager;\n    public boolean transfer(Long fromId， Long toId， double amount) {\n    // 获取一个事务\n    TransactionStatus txStatus = txManager.getTransaction(txDefinition);\n    boolean result = false;\n    try {\n        result = bankDao.transfer(fromId， toId， amount);\n        txManager.commit(txStatus);    // 事务提交\n    } catch (Exception e) {\n        result = false;\n        txManager.rollback(txStatus);      // 事务回滚\n        System.out.println(\"Transfer Error!\");\n    }\n    return result;\n}\n相应的配置文件如下所示：\n```\n\n```xml\n<bean id=\"bankService\" class=\"footmark.spring.core.tx.programmatic.origin.BankServiceImpl\">\n    <property name=\"bankDao\" ref=\"bankDao\"/>\n    <property name=\"txManager\" ref=\"transactionManager\"/>\n    <property name=\"txDefinition\">\n    <bean class=\"org.springframework.transaction.support.DefaultTransactionDefinition\">\n        <property name=\"propagationBehaviorName\" value=\"PROPAGATION_REQUIRED\"/>\n    </bean>\n    </property>\n</bean>\n```\n\n\n如上所示，我们在BankServiceImpl类中增加了两个属性：一个是 TransactionDefinition 类型的属性，它用于定义事务的规则；另一个是 PlatformTransactionManager 类型的属性，用于执行事务管理操作。如果一个业务方法需要添加事务，我们首先需要在方法开始执行前调用PlatformTransactionManager.getTransaction(…) 方法启动一个事务；创建并启动了事务之后，便可以开始编写业务逻辑代码，然后在适当的地方执行事务的提交或者回滚。\n\n## 基于 TransactionTemplate 的编程式事务管理\n\n　　当然，除了可以使用基于底层 API 的编程式事务外，还可以使用基于 TransactionTemplate 的编程式事务管理。通过上面的示例可以发现，上述事务管理的代码散落在业务逻辑代码中，破坏了原有代码的条理性，并且每一个业务方法都包含了类似的启动事务、提交/回滚事务的样板代码。Spring 也意识到了这些，并提供了简化的方法，这就是 Spring 在数据访问层非常常见的 模板回调模式。\n\n```java\npublic class BankServiceImpl implements BankService {\n    private BankDao bankDao;\n    private TransactionTemplate transactionTemplate;\n    ......\n    public boolean transfer(final Long fromId， final Long toId， final double amount) {\n        return (Boolean) transactionTemplate.execute(new TransactionCallback(){\n            public Object doInTransaction(TransactionStatus status) {\n                Object result;\n                try {\n                        result = bankDao.transfer(fromId， toId， amount);\n                    } catch (Exception e) {\n                        status.setRollbackOnly();\n                        result = false;\n                        System.out.println(\"Transfer Error!\");\n                }\n                return result;\n            }\n        });\n    }\n}\n```\n\n相应的配置文件如下所示：\n\n```xml\n<bean id=\"bankService\" class=\"footmark.spring.core.tx.programmatic.template.BankServiceImpl\">\n    <property name=\"bankDao\" ref=\"bankDao\"/>\n    <property name=\"transactionTemplate\" ref=\"transactionTemplate\"/>\n</bean>\n```\n\n\nTransactionTemplate 的 execute() 方法有一个 TransactionCallback 类型的参数，该接口中定义了一个 doInTransaction() 方法，通常我们以匿名内部类的方式实现 TransactionCallback 接口，并在其 doInTransaction() 方法中书写业务逻辑代码。这里可以使用默认的事务提交和回滚规则，这样在业务代码中就不需要显式调用任何事务管理的 API。doInTransaction() 方法有一个TransactionStatus 类型的参数，我们可以在方法的任何位置调用该参数的 setRollbackOnly() 方法将事务标识为回滚的，以执行事务回滚。\n\n　　此外，TransactionCallback 接口有一个子接口 TransactionCallbackWithoutResult，该接口中定义了一个 doInTransactionWithoutResult() 方法，TransactionCallbackWithoutResult 接口主要用于事务过程中不需要返回值的情况。当然，对于不需要返回值的情况，我们仍然可以使用 TransactionCallback 接口，并在方法中返回任意值即可。\n\n## Spring 声明式事务管理\n　　Spring 的声明式事务管理是建立在 Spring AOP 机制之上的，其本质是对目标方法前后进行拦截，并在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。\n\n　　声明式事务最大的优点就是不需要通过编程的方式管理事务，这样就不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中作相关的事务规则声明（或通过等价的基于标注的方式），便可以将事务规则应用到业务逻辑中。总的来说，声明式事务得益于 Spring IoC容器 和 Spring AOP 机制的支持：IoC容器为声明式事务管理提供了基础设施，使得 Bean 对于 Spring 框架而言是可管理的；而由于事务管理本身就是一个典型的横切逻辑（正是 AOP 的用武之地），因此 Spring AOP 机制是声明式事务管理的直接实现者。\n\n　　显然，声明式事务管理要优于编程式事务管理，这正是spring倡导的非侵入式的开发方式。声明式事务管理使业务代码不受污染，一个普通的POJO对象，只要在XML文件中配置或者添加注解就可以获得完全的事务支持。因此，通常情况下，笔者强烈建议在开发中使用声明式事务，不仅因为其简单，更主要是因为这样使得纯业务代码不被污染，极大方便后期的代码维护。\n\n## 基于 <tx> 命名空间的声明式事务管理 \n\n　　Spring 2.x 引入了 <tx> 命名空间，结合使用 <aop> 命名空间，带给开发人员配置声明式事务的全新体验，配置变得更加简单和灵活。总的来说，开发者只需基于<tx>和<aop>命名空间在XML中进行简答配置便可实现声明式事务管理。下面基于<tx>使用Hibernate事务管理的配置文件：\n\n```xml\n<!-- 配置 DataSourece -->\n<bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\"\n    destroy-method=\"close\">\n    <!-- results in a setDriverClassName(String) call -->\n    <property name=\"driverClassName\">\n        <value>com.mysql.jdbc.Driver</value>\n    </property>\n    <property name=\"url\">\n        <value>jdbc:mysql://localhost:3306/ssh</value>\n    </property>\n    <property name=\"username\">\n        <value>root</value>\n    </property>\n    <property name=\"password\">\n        <value>root</value>\n    </property>\n</bean>\n\n<!-- 配置 sessionFactory -->\n<bean id=\"sessionFactory\"\n    class=\"org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean\">\n    <!-- 数据源的设置 -->\n    <property name=\"dataSource\" ref=\"dataSource\" />\n    <!-- 用于持久化的实体类类列表 -->\n    <property name=\"annotatedClasses\">\n        <list>\n            <value>cn.edu.tju.rico.model.entity.User</value>\n            <value>cn.edu.tju.rico.model.entity.Log</value>\n        </list>\n    </property>\n    <!-- Hibernate 的配置 -->\n    <property name=\"hibernateProperties\">\n        <props>\n            <!-- 方言设置   -->\n            <prop key=\"hibernate.dialect\">org.hibernate.dialect.MySQLDialect</prop>\n            <!-- 显示sql -->\n            <prop key=\"hibernate.show_sql\">true</prop>\n           <!-- 格式化sql -->\n            <prop key=\"hibernate.format_sql\">true</prop>\n            <!-- 自动创建/更新数据表 -->\n            <prop key=\"hibernate.hbm2ddl.auto\">update</prop>\n        </props>\n    </property>\n</bean>\n\n<!-- 配置 TransactionManager -->\n<bean id=\"txManager\"\n    class=\"org.springframework.orm.hibernate3.HibernateTransactionManager\">\n    <property name=\"sessionFactory\" ref=\"sessionFactory\" />\n</bean>\n\n<!-- 配置事务增强处理的切入点，以保证其被恰当的织入 -->    \n<aop:config>\n    <!-- 切点 -->\n    <aop:pointcut expression=\"execution(* cn.edu.tju.rico.service.impl.*.*(..))\"\n        id=\"bussinessService\" />\n    <!-- 声明式事务的切入 -->\n    <aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"bussinessService\" />\n</aop:config>\n\n<!-- 由txAdvice切面定义事务增强处理 -->\n<tx:advice id=\"txAdvice\" transaction-manager=\"txManager\">\n    <tx:attributes>\n        <!-- get打头的方法为只读方法,因此将read-only设为 true -->\n        <tx:method name=\"get*\" read-only=\"true\" />\n        <!-- 其他方法为读写方法,因此将read-only设为 false -->\n        <tx:method name=\"*\" read-only=\"false\" propagation=\"REQUIRED\"\n            isolation=\"DEFAULT\" />\n    </tx:attributes>\n</tx:advice>\n```\n\n 事实上，Spring配置文件中关于事务的配置总是由三个部分组成，即：DataSource、TransactionManager和代理机制三部分，无论哪种配置方式，一般变化的只是代理机制这部分。其中，DataSource、TransactionManager这两部分只是会根据数据访问方式有所变化，比如使用hibernate进行数据访问时，DataSource实际为SessionFactory，TransactionManager的实现为 HibernateTransactionManager。如下图所示：\n\n## 基于 @Transactional 的声明式事务管理\n\n　　除了基于命名空间的事务配置方式，Spring 还引入了基于 Annotation 的方式，具体主要涉及@Transactional 标注。@Transactional 可以作用于接口、接口方法、类以及类方法上：当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性；当作用于方法上时，该标注来覆盖类级别的定义。如下所示：\n\n```java\n@Transactional(propagation = Propagation.REQUIRED)\npublic boolean transfer(Long fromId， Long toId， double amount) {\n    return bankDao.transfer(fromId， toId， amount);\n}\n```\n\n\nSpring 使用 BeanPostProcessor 来处理 Bean 中的标注，因此我们需要在配置文件中作如下声明来激活该后处理 Bean，如下所示：\n\n```java\n<tx:annotation-driven transaction-manager=\"transactionManager”/>\n```\n\n1 与前面相似，transaction-manager、datasource 和 sessionFactory的配置不变，只需将基于<tx>和<aop>命名空间的配置更换为上述配置即可。\n\n## Spring 声明式事务的本质\n\n　　就Spring 声明式事务而言，无论其基于 <tx> 命名空间的实现还是基于 @Transactional 的实现，其本质都是 Spring AOP 机制的应用：即通过以@Transactional的方式或者XML配置文件的方式向业务组件中的目标业务方法插入事务增强处理并生成相应的代理对象供应用程序(客户端)使用从而达到无污染地添加事务的目的。如下图所示：\n\n\n\n# 参考\n\nhttps://juejin.im/post/5b00c52ef265da0b95276091\n\nhttps://blog.csdn.net/justloveyou_/article/details/73733278 \n\n","slug":"java/spring事务实现","published":1,"updated":"2019-10-14T09:01:07.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2a7a44i004eic1ynve74jv6","content":"<h1 id=\"事务概念回顾\"><a href=\"#事务概念回顾\" class=\"headerlink\" title=\"事务概念回顾\"></a>事务概念回顾</h1><blockquote>\n<h2 id=\"什么是事务？\"><a href=\"#什么是事务？\" class=\"headerlink\" title=\"什么是事务？\"></a>什么是事务？</h2></blockquote>\n<p>事务是逻辑上的一组操作，要么都执行，要么都不执行.</p>\n<blockquote>\n<h2 id=\"事物的特性（ACID）：\"><a href=\"#事物的特性（ACID）：\" class=\"headerlink\" title=\"事物的特性（ACID）：\"></a>事物的特性（ACID）：</h2></blockquote>\n<ol>\n<li><strong>原子性：</strong> 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</li>\n<li><strong>一致性：</strong> 执行事务前后，数据保持一致；</li>\n<li><strong>隔离性：</strong> 并发访问数据库时，一个用户的事物不被其他事物所干扰，各并发事务之间数据库是独立的；</li>\n<li><strong>持久性:</strong>  一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</li>\n</ol>\n<h1 id=\"Spring事务管理接口介绍\"><a href=\"#Spring事务管理接口介绍\" class=\"headerlink\" title=\"Spring事务管理接口介绍\"></a>Spring事务管理接口介绍</h1><blockquote>\n<h2 id=\"Spring事务管理接口：\"><a href=\"#Spring事务管理接口：\" class=\"headerlink\" title=\"Spring事务管理接口：\"></a>Spring事务管理接口：</h2></blockquote>\n<ul>\n<li><strong>PlatformTransactionManager：</strong> （平台）事务管理器</li>\n<li><strong>TransactionDefinition：</strong> 事务定义信息(事务隔离级别、传播行为、超时、只读、回滚规则)</li>\n<li><strong>TransactionStatus：</strong> 事务运行状态</li>\n</ul>\n<p><strong>所谓事务管理，其实就是“按照给定的事务规则来执行提交或者回滚操作”。</strong></p>\n<blockquote>\n<h2 id=\"PlatformTransactionManager接口介绍\"><a href=\"#PlatformTransactionManager接口介绍\" class=\"headerlink\" title=\"PlatformTransactionManager接口介绍\"></a>PlatformTransactionManager接口介绍</h2></blockquote>\n<p><strong>Spring并不直接管理事务，而是提供了多种事务管理器</strong> ，他们将事务管理的职责委托给Hibernate或者JTA等持久化机制所提供的相关平台框架的事务来实现。 Spring事务管理器的接口是： <strong>org.springframework.transaction.PlatformTransactionManager</strong> ，通过这个接口，Spring为各个平台如JDBC、Hibernate等都提供了对应的事务管理器，但是具体的实现就是各个平台自己的事情了。</p>\n<h3 id=\"PlatformTransactionManager接口代码如下：\"><a href=\"#PlatformTransactionManager接口代码如下：\" class=\"headerlink\" title=\"PlatformTransactionManager接口代码如下：\"></a>PlatformTransactionManager接口代码如下：</h3><p>PlatformTransactionManager接口中定义了三个方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Public interface PlatformTransactionManager()...&#123;  </span><br><span class=\"line\">    // Return a currently active transaction or create a new one, according to the specified propagation behavior（根据指定的传播行为，返回当前活动的事务或创建一个新事务。）</span><br><span class=\"line\">    TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException; </span><br><span class=\"line\">    // Commit the given transaction, with regard to its status（使用事务目前的状态提交事务）</span><br><span class=\"line\">    Void commit(TransactionStatus status) throws TransactionException;  </span><br><span class=\"line\">    // Perform a rollback of the given transaction（对执行的事务进行回滚）</span><br><span class=\"line\">    Void rollback(TransactionStatus status) throws TransactionException;  </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>我们刚刚也说了Spring中PlatformTransactionManager根据不同持久层框架所对应的接口实现类,几个比较常见的如下图所示</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://wumu.sciento.cn/img/20190803144836.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>比如我们在使用JDBC或者iBatis（就是Mybatis）进行数据持久化操作时,我们的xml配置通常如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t&lt;!-- 事务管理器 --&gt;</span><br><span class=\"line\">\t&lt;bean id=&quot;transactionManager&quot;</span><br><span class=\"line\">\t\tclass=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class=\"line\">\t\t&lt;!-- 数据源 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h2 id=\"TransactionDefinition接口介绍\"><a href=\"#TransactionDefinition接口介绍\" class=\"headerlink\" title=\"TransactionDefinition接口介绍\"></a>TransactionDefinition接口介绍</h2></blockquote>\n<p>事务管理器接口 <strong>PlatformTransactionManager</strong> 通过 <strong>getTransaction(TransactionDefinition definition)</strong> 方法来得到一个事务，这个方法里面的参数是 <strong>TransactionDefinition类</strong> ，这个类就定义了一些基本的事务属性。</p>\n<p><strong>那么什么是事务属性呢？</strong></p>\n<p>事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。事务属性包含了5个方面。 </p>\n<p><img src=\"http://wumu.sciento.cn/img/20190803144913.png\" alt=\"\"></p>\n<h3 id=\"TransactionDefinition接口中的方法如下：\"><a href=\"#TransactionDefinition接口中的方法如下：\" class=\"headerlink\" title=\"TransactionDefinition接口中的方法如下：\"></a>TransactionDefinition接口中的方法如下：</h3><p>TransactionDefinition接口中定义了5个方法以及一些表示事务属性的常量比如隔离级别、传播行为等等的常量。</p>\n<p>我下面只是列出了TransactionDefinition接口中的方法而没有给出接口中定义的常量，该接口中的常量信息会在后面依次介绍到。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface TransactionDefinition &#123;</span><br><span class=\"line\">    // 返回事务的传播行为</span><br><span class=\"line\">    int getPropagationBehavior(); </span><br><span class=\"line\">    // 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据</span><br><span class=\"line\">    int getIsolationLevel(); </span><br><span class=\"line\">    // 返回事务必须在多少秒内完成</span><br><span class=\"line\">    //返回事务的名字</span><br><span class=\"line\">    String getName()；</span><br><span class=\"line\">    int getTimeout();  </span><br><span class=\"line\">    // 返回是否优化为只读事务。</span><br><span class=\"line\">    boolean isReadOnly();</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<h3 id=\"（1）事务隔离级别（定义了一个事务可能受其他并发事务影响的程度）：\"><a href=\"#（1）事务隔离级别（定义了一个事务可能受其他并发事务影响的程度）：\" class=\"headerlink\" title=\"（1）事务隔离级别（定义了一个事务可能受其他并发事务影响的程度）：\"></a>（1）事务隔离级别（定义了一个事务可能受其他并发事务影响的程度）：</h3><p>我们先来看一下 <strong>并发事务带来的问题</strong> ，然后再来介绍一下 <strong>TransactionDefinition 接口</strong> 中定义了五个表示隔离级别的常量。</p>\n<blockquote>\n<h4 id=\"并发事务带来的问题\"><a href=\"#并发事务带来的问题\" class=\"headerlink\" title=\"并发事务带来的问题\"></a>并发事务带来的问题</h4></blockquote>\n<p>在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对统一数据进行操作）。并发虽然是必须的，但可能会导致一下的问题。</p>\n<ul>\n<li><p><strong>脏读（Dirty read）:</strong> 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。</p>\n</li>\n<li><p><strong>丢失修改（Lost to modify）:</strong> 指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。</p>\n<p>例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。</p>\n</li>\n<li><p><strong>不可重复读（Unrepeatableread）:</strong> 指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</p>\n</li>\n<li><p><strong>幻读（Phantom read）:</strong> 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</p>\n</li>\n</ul>\n<p><strong>不可重复度和幻读区别：</strong></p>\n<p>不可重复读的重点是修改，幻读的重点在于新增或者删除。</p>\n<p>例1（同样的条件, 你读取过的数据, 再次读取出来发现值不一样了 ）：事务1中的A先生读取自己的工资为     1000的操作还没完成，事务2中的B先生就修改了A的工资为2000，导        致A再读自己的工资时工资变为  2000；这就是不可重复读。</p>\n<p>例2（同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。</p>\n<blockquote>\n<h4 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h4></blockquote>\n<p>TransactionDefinition 接口中定义了五个表示隔离级别的常量：</p>\n<ul>\n<li><strong>TransactionDefinition.ISOLATION_DEFAULT:</strong>    使用后端数据库默认的隔离级别，Mysql 默认采用的 REPEATABLE_READ隔离级别 Oracle 默认采用的 READ_COMMITTED隔离级别.</li>\n<li><strong>TransactionDefinition.ISOLATION_READ_UNCOMMITTED:</strong> 最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能会导致脏读、幻读或不可重复读</strong></li>\n<li><strong>TransactionDefinition.ISOLATION_READ_COMMITTED:</strong>     允许读取并发事务已经提交的数据，<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong></li>\n<li><strong>TransactionDefinition.ISOLATION_REPEATABLE_READ:</strong>     对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生。</strong></li>\n<li><strong>TransactionDefinition.ISOLATION_SERIALIZABLE:</strong>     最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读</strong>。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</li>\n</ul>\n<h3 id=\"（2）事务传播行为（为了解决业务层方法之间互相调用的事务问题）：\"><a href=\"#（2）事务传播行为（为了解决业务层方法之间互相调用的事务问题）：\" class=\"headerlink\" title=\"（2）事务传播行为（为了解决业务层方法之间互相调用的事务问题）：\"></a>（2）事务传播行为（为了解决业务层方法之间互相调用的事务问题）：</h3><p>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：</p>\n<p><strong>支持当前事务的情况：</strong></p>\n<ul>\n<li><strong>TransactionDefinition.PROPAGATION_REQUIRED：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li>\n<li><strong>TransactionDefinition.PROPAGATION_SUPPORTS：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li>\n<li><strong>TransactionDefinition.PROPAGATION_MANDATORY：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）</li>\n</ul>\n<p><strong>不支持当前事务的情况：</strong></p>\n<ul>\n<li><strong>TransactionDefinition.PROPAGATION_REQUIRES_NEW：</strong> 创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li>\n<li><strong>TransactionDefinition.PROPAGATION_NOT_SUPPORTED：</strong> 以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li>\n<li><strong>TransactionDefinition.PROPAGATION_NEVER：</strong> 以非事务方式运行，如果当前存在事务，则抛出异常。</li>\n</ul>\n<p><strong>其他情况：</strong></p>\n<ul>\n<li><strong>TransactionDefinition.PROPAGATION_NESTED：</strong> 如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</li>\n</ul>\n<p>这里需要指出的是，前面的六种事务传播行为是 Spring 从 EJB 中引入的，他们共享相同的概念。而 <strong>PROPAGATION_NESTED</strong> 是 Spring 所特有的。以 PROPAGATION_NESTED 启动的事务内嵌于外部事务中（如果存在外部事务的话），此时，内嵌事务并不是一个独立的事务，它依赖于外部事务的存在，只有通过外部的事务提交，才能引起内部事务的提交，嵌套的子事务不能单独提交。如果熟悉 JDBC 中的保存点（SavePoint）的概念，那嵌套事务就很容易理解了，其实嵌套的子事务就是保存点的一个应用，一个事务中可以包括多个保存点，每一个嵌套子事务。另外，外部事务的回滚也会导致嵌套子事务的回滚。</p>\n<h3 id=\"3-事务超时属性-一个事务允许执行的最长时间\"><a href=\"#3-事务超时属性-一个事务允许执行的最长时间\" class=\"headerlink\" title=\"(3) 事务超时属性(一个事务允许执行的最长时间)\"></a>(3) 事务超时属性(一个事务允许执行的最长时间)</h3><p>所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。</p>\n<h3 id=\"4-事务只读属性（对事物资源是否执行只读操作）\"><a href=\"#4-事务只读属性（对事物资源是否执行只读操作）\" class=\"headerlink\" title=\"(4) 事务只读属性（对事物资源是否执行只读操作）\"></a>(4) 事务只读属性（对事物资源是否执行只读操作）</h3><p>事务的只读属性是指，对事务性资源进行只读操作或者是读写操作。所谓事务性资源就是指那些被事务管理的资源，比如数据源、 JMS 资源，以及自定义的事务性资源等等。如果确定只对事务性资源进行只读操作，那么我们可以将事务标志为只读的，以提高事务处理的性能。在 TransactionDefinition 中以 boolean 类型来表示该事务是否只读。</p>\n<h3 id=\"5-回滚规则（定义事务回滚规则）\"><a href=\"#5-回滚规则（定义事务回滚规则）\" class=\"headerlink\" title=\"(5) 回滚规则（定义事务回滚规则）\"></a>(5) 回滚规则（定义事务回滚规则）</h3><h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><h2 id=\"使用API\"><a href=\"#使用API\" class=\"headerlink\" title=\"使用API\"></a>使用API</h2><p>下面给出一个基于底层 API 的编程式事务管理的示例，<br>基于PlatformTransactionManager、TransactionDefinition 和 TransactionStatus 三个核心接口，我们完全可以通过编程的方式来进行事务管理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BankServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">BankService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BankDao bankDao;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TransactionDefinition txDefinition;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PlatformTransactionManager txManager;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">transfer</span><span class=\"params\">(Long fromId， Long toId， <span class=\"keyword\">double</span> amount)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取一个事务</span></span><br><span class=\"line\">    TransactionStatus txStatus = txManager.getTransaction(txDefinition);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        result = bankDao.transfer(fromId， toId， amount);</span><br><span class=\"line\">        txManager.commit(txStatus);    <span class=\"comment\">// 事务提交</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        txManager.rollback(txStatus);      <span class=\"comment\">// 事务回滚</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Transfer Error!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">相应的配置文件如下所示：</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bankService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footmark.spring.core.tx.programmatic.origin.BankServiceImpl\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bankDao\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"bankDao\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"txManager\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"transactionManager\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"txDefinition\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.transaction.support.DefaultTransactionDefinition\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"propagationBehaviorName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"PROPAGATION_REQUIRED\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span>如上所示，我们在BankServiceImpl类中增加了两个属性：一个是 TransactionDefinition 类型的属性，它用于定义事务的规则；另一个是 PlatformTransactionManager 类型的属性，用于执行事务管理操作。如果一个业务方法需要添加事务，我们首先需要在方法开始执行前调用PlatformTransactionManager.getTransaction(…) 方法启动一个事务；创建并启动了事务之后，便可以开始编写业务逻辑代码，然后在适当的地方执行事务的提交或者回滚。</span><br></pre></td></tr></table></figure>\n<h2 id=\"基于-TransactionTemplate-的编程式事务管理\"><a href=\"#基于-TransactionTemplate-的编程式事务管理\" class=\"headerlink\" title=\"基于 TransactionTemplate 的编程式事务管理\"></a>基于 TransactionTemplate 的编程式事务管理</h2><p>　　当然，除了可以使用基于底层 API 的编程式事务外，还可以使用基于 TransactionTemplate 的编程式事务管理。通过上面的示例可以发现，上述事务管理的代码散落在业务逻辑代码中，破坏了原有代码的条理性，并且每一个业务方法都包含了类似的启动事务、提交/回滚事务的样板代码。Spring 也意识到了这些，并提供了简化的方法，这就是 Spring 在数据访问层非常常见的 模板回调模式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BankServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">BankService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BankDao bankDao;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TransactionTemplate transactionTemplate;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">transfer</span><span class=\"params\">(<span class=\"keyword\">final</span> Long fromId， <span class=\"keyword\">final</span> Long toId， <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> amount)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Boolean) transactionTemplate.execute(<span class=\"keyword\">new</span> TransactionCallback()&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">doInTransaction</span><span class=\"params\">(TransactionStatus status)</span> </span>&#123;</span><br><span class=\"line\">                Object result;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        result = bankDao.transfer(fromId， toId， amount);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                        status.setRollbackOnly();</span><br><span class=\"line\">                        result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"Transfer Error!\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相应的配置文件如下所示：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=<span class=\"string\">\"bankService\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"footmark.spring.core.tx.programmatic.template.BankServiceImpl\"</span>&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">\"bankDao\"</span> ref=<span class=\"string\">\"bankDao\"</span>/&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">\"transactionTemplate\"</span> ref=<span class=\"string\">\"transactionTemplate\"</span>/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<p>TransactionTemplate 的 execute() 方法有一个 TransactionCallback 类型的参数，该接口中定义了一个 doInTransaction() 方法，通常我们以匿名内部类的方式实现 TransactionCallback 接口，并在其 doInTransaction() 方法中书写业务逻辑代码。这里可以使用默认的事务提交和回滚规则，这样在业务代码中就不需要显式调用任何事务管理的 API。doInTransaction() 方法有一个TransactionStatus 类型的参数，我们可以在方法的任何位置调用该参数的 setRollbackOnly() 方法将事务标识为回滚的，以执行事务回滚。</p>\n<p>​    此外，TransactionCallback 接口有一个子接口 TransactionCallbackWithoutResult，该接口中定义了一个 doInTransactionWithoutResult() 方法，TransactionCallbackWithoutResult 接口主要用于事务过程中不需要返回值的情况。当然，对于不需要返回值的情况，我们仍然可以使用 TransactionCallback 接口，并在方法中返回任意值即可。</p>\n<h2 id=\"基于底层-API-的编程式事务管理\"><a href=\"#基于底层-API-的编程式事务管理\" class=\"headerlink\" title=\"基于底层 API 的编程式事务管理\"></a>基于底层 API 的编程式事务管理</h2><p>　　下面给出一个基于底层 API 的编程式事务管理的示例，<br>基于PlatformTransactionManager、TransactionDefinition 和 TransactionStatus 三个核心接口，我们完全可以通过编程的方式来进行事务管理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BankServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">BankService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BankDao bankDao;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TransactionDefinition txDefinition;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PlatformTransactionManager txManager;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">transfer</span><span class=\"params\">(Long fromId， Long toId， <span class=\"keyword\">double</span> amount)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取一个事务</span></span><br><span class=\"line\">    TransactionStatus txStatus = txManager.getTransaction(txDefinition);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        result = bankDao.transfer(fromId， toId， amount);</span><br><span class=\"line\">        txManager.commit(txStatus);    <span class=\"comment\">// 事务提交</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        txManager.rollback(txStatus);      <span class=\"comment\">// 事务回滚</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Transfer Error!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">相应的配置文件如下所示：</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bankService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footmark.spring.core.tx.programmatic.origin.BankServiceImpl\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bankDao\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"bankDao\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"txManager\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"transactionManager\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"txDefinition\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.transaction.support.DefaultTransactionDefinition\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"propagationBehaviorName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"PROPAGATION_REQUIRED\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如上所示，我们在BankServiceImpl类中增加了两个属性：一个是 TransactionDefinition 类型的属性，它用于定义事务的规则；另一个是 PlatformTransactionManager 类型的属性，用于执行事务管理操作。如果一个业务方法需要添加事务，我们首先需要在方法开始执行前调用PlatformTransactionManager.getTransaction(…) 方法启动一个事务；创建并启动了事务之后，便可以开始编写业务逻辑代码，然后在适当的地方执行事务的提交或者回滚。</p>\n<h2 id=\"基于-TransactionTemplate-的编程式事务管理-1\"><a href=\"#基于-TransactionTemplate-的编程式事务管理-1\" class=\"headerlink\" title=\"基于 TransactionTemplate 的编程式事务管理\"></a>基于 TransactionTemplate 的编程式事务管理</h2><p>　　当然，除了可以使用基于底层 API 的编程式事务外，还可以使用基于 TransactionTemplate 的编程式事务管理。通过上面的示例可以发现，上述事务管理的代码散落在业务逻辑代码中，破坏了原有代码的条理性，并且每一个业务方法都包含了类似的启动事务、提交/回滚事务的样板代码。Spring 也意识到了这些，并提供了简化的方法，这就是 Spring 在数据访问层非常常见的 模板回调模式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BankServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">BankService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BankDao bankDao;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TransactionTemplate transactionTemplate;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">transfer</span><span class=\"params\">(<span class=\"keyword\">final</span> Long fromId， <span class=\"keyword\">final</span> Long toId， <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> amount)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Boolean) transactionTemplate.execute(<span class=\"keyword\">new</span> TransactionCallback()&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">doInTransaction</span><span class=\"params\">(TransactionStatus status)</span> </span>&#123;</span><br><span class=\"line\">                Object result;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        result = bankDao.transfer(fromId， toId， amount);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                        status.setRollbackOnly();</span><br><span class=\"line\">                        result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"Transfer Error!\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相应的配置文件如下所示：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bankService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footmark.spring.core.tx.programmatic.template.BankServiceImpl\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bankDao\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"bankDao\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"transactionTemplate\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"transactionTemplate\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>TransactionTemplate 的 execute() 方法有一个 TransactionCallback 类型的参数，该接口中定义了一个 doInTransaction() 方法，通常我们以匿名内部类的方式实现 TransactionCallback 接口，并在其 doInTransaction() 方法中书写业务逻辑代码。这里可以使用默认的事务提交和回滚规则，这样在业务代码中就不需要显式调用任何事务管理的 API。doInTransaction() 方法有一个TransactionStatus 类型的参数，我们可以在方法的任何位置调用该参数的 setRollbackOnly() 方法将事务标识为回滚的，以执行事务回滚。</p>\n<p>　　此外，TransactionCallback 接口有一个子接口 TransactionCallbackWithoutResult，该接口中定义了一个 doInTransactionWithoutResult() 方法，TransactionCallbackWithoutResult 接口主要用于事务过程中不需要返回值的情况。当然，对于不需要返回值的情况，我们仍然可以使用 TransactionCallback 接口，并在方法中返回任意值即可。</p>\n<h2 id=\"Spring-声明式事务管理\"><a href=\"#Spring-声明式事务管理\" class=\"headerlink\" title=\"Spring 声明式事务管理\"></a>Spring 声明式事务管理</h2><p>　　Spring 的声明式事务管理是建立在 Spring AOP 机制之上的，其本质是对目标方法前后进行拦截，并在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。</p>\n<p>　　声明式事务最大的优点就是不需要通过编程的方式管理事务，这样就不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中作相关的事务规则声明（或通过等价的基于标注的方式），便可以将事务规则应用到业务逻辑中。总的来说，声明式事务得益于 Spring IoC容器 和 Spring AOP 机制的支持：IoC容器为声明式事务管理提供了基础设施，使得 Bean 对于 Spring 框架而言是可管理的；而由于事务管理本身就是一个典型的横切逻辑（正是 AOP 的用武之地），因此 Spring AOP 机制是声明式事务管理的直接实现者。</p>\n<p>　　显然，声明式事务管理要优于编程式事务管理，这正是spring倡导的非侵入式的开发方式。声明式事务管理使业务代码不受污染，一个普通的POJO对象，只要在XML文件中配置或者添加注解就可以获得完全的事务支持。因此，通常情况下，笔者强烈建议在开发中使用声明式事务，不仅因为其简单，更主要是因为这样使得纯业务代码不被污染，极大方便后期的代码维护。</p>\n<h2 id=\"基于-命名空间的声明式事务管理\"><a href=\"#基于-命名空间的声明式事务管理\" class=\"headerlink\" title=\"基于  命名空间的声明式事务管理\"></a>基于 <tx> 命名空间的声明式事务管理</tx></h2><p>　　Spring 2.x 引入了 <tx> 命名空间，结合使用 <aop> 命名空间，带给开发人员配置声明式事务的全新体验，配置变得更加简单和灵活。总的来说，开发者只需基于<tx>和<aop>命名空间在XML中进行简答配置便可实现声明式事务管理。下面基于<tx>使用Hibernate事务管理的配置文件：</tx></aop></tx></aop></tx></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 配置 DataSourece --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.commons.dbcp.BasicDataSource\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- results in a setDriverClassName(String) call --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>jdbc:mysql://localhost:3306/ssh<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置 sessionFactory --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sessionFactory\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 数据源的设置 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 用于持久化的实体类类列表 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"annotatedClasses\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>cn.edu.tju.rico.model.entity.User<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>cn.edu.tju.rico.model.entity.Log<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Hibernate 的配置 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernateProperties\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">props</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 方言设置   --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"hibernate.dialect\"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 显示sql --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"hibernate.show_sql\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">           <span class=\"comment\">&lt;!-- 格式化sql --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"hibernate.format_sql\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 自动创建/更新数据表 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"hibernate.hbm2ddl.auto\"</span>&gt;</span>update<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">props</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置 TransactionManager --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txManager\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.orm.hibernate3.HibernateTransactionManager\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sessionFactory\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"sessionFactory\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置事务增强处理的切入点，以保证其被恰当的织入 --&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 切点 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* cn.edu.tju.rico.service.impl.*.*(..))\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">id</span>=<span class=\"string\">\"bussinessService\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 声明式事务的切入 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"bussinessService\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 由txAdvice切面定义事务增强处理 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"txManager\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- get打头的方法为只读方法,因此将read-only设为 true --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"get*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 其他方法为读写方法,因此将read-only设为 false --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">isolation</span>=<span class=\"string\">\"DEFAULT\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p> 事实上，Spring配置文件中关于事务的配置总是由三个部分组成，即：DataSource、TransactionManager和代理机制三部分，无论哪种配置方式，一般变化的只是代理机制这部分。其中，DataSource、TransactionManager这两部分只是会根据数据访问方式有所变化，比如使用hibernate进行数据访问时，DataSource实际为SessionFactory，TransactionManager的实现为 HibernateTransactionManager。如下图所示：</p>\n<h2 id=\"基于-Transactional-的声明式事务管理\"><a href=\"#基于-Transactional-的声明式事务管理\" class=\"headerlink\" title=\"基于 @Transactional 的声明式事务管理\"></a>基于 @Transactional 的声明式事务管理</h2><p>　　除了基于命名空间的事务配置方式，Spring 还引入了基于 Annotation 的方式，具体主要涉及@Transactional 标注。@Transactional 可以作用于接口、接口方法、类以及类方法上：当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性；当作用于方法上时，该标注来覆盖类级别的定义。如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">transfer</span><span class=\"params\">(Long fromId， Long toId， <span class=\"keyword\">double</span> amount)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bankDao.transfer(fromId， toId， amount);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Spring 使用 BeanPostProcessor 来处理 Bean 中的标注，因此我们需要在配置文件中作如下声明来激活该后处理 Bean，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;tx:annotation-driven transaction-manager=<span class=\"string\">\"transactionManager”/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>1 与前面相似，transaction-manager、datasource 和 sessionFactory的配置不变，只需将基于<tx>和<aop>命名空间的配置更换为上述配置即可。</aop></tx></p>\n<h2 id=\"Spring-声明式事务的本质\"><a href=\"#Spring-声明式事务的本质\" class=\"headerlink\" title=\"Spring 声明式事务的本质\"></a>Spring 声明式事务的本质</h2><p>　　就Spring 声明式事务而言，无论其基于 <tx> 命名空间的实现还是基于 @Transactional 的实现，其本质都是 Spring AOP 机制的应用：即通过以@Transactional的方式或者XML配置文件的方式向业务组件中的目标业务方法插入事务增强处理并生成相应的代理对象供应用程序(客户端)使用从而达到无污染地添加事务的目的。如下图所示：</tx></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://juejin.im/post/5b00c52ef265da0b95276091\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5b00c52ef265da0b95276091</a></p>\n<p><a href=\"https://blog.csdn.net/justloveyou_/article/details/73733278\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/justloveyou_/article/details/73733278</a> </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"事务概念回顾\"><a href=\"#事务概念回顾\" class=\"headerlink\" title=\"事务概念回顾\"></a>事务概念回顾</h1><blockquote>\n<h2 id=\"什么是事务？\"><a href=\"#什么是事务？\" class=\"headerlink\" title=\"什么是事务？\"></a>什么是事务？</h2></blockquote>\n<p>事务是逻辑上的一组操作，要么都执行，要么都不执行.</p>\n<blockquote>\n<h2 id=\"事物的特性（ACID）：\"><a href=\"#事物的特性（ACID）：\" class=\"headerlink\" title=\"事物的特性（ACID）：\"></a>事物的特性（ACID）：</h2></blockquote>\n<ol>\n<li><strong>原子性：</strong> 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</li>\n<li><strong>一致性：</strong> 执行事务前后，数据保持一致；</li>\n<li><strong>隔离性：</strong> 并发访问数据库时，一个用户的事物不被其他事物所干扰，各并发事务之间数据库是独立的；</li>\n<li><strong>持久性:</strong>  一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</li>\n</ol>\n<h1 id=\"Spring事务管理接口介绍\"><a href=\"#Spring事务管理接口介绍\" class=\"headerlink\" title=\"Spring事务管理接口介绍\"></a>Spring事务管理接口介绍</h1><blockquote>\n<h2 id=\"Spring事务管理接口：\"><a href=\"#Spring事务管理接口：\" class=\"headerlink\" title=\"Spring事务管理接口：\"></a>Spring事务管理接口：</h2></blockquote>\n<ul>\n<li><strong>PlatformTransactionManager：</strong> （平台）事务管理器</li>\n<li><strong>TransactionDefinition：</strong> 事务定义信息(事务隔离级别、传播行为、超时、只读、回滚规则)</li>\n<li><strong>TransactionStatus：</strong> 事务运行状态</li>\n</ul>\n<p><strong>所谓事务管理，其实就是“按照给定的事务规则来执行提交或者回滚操作”。</strong></p>\n<blockquote>\n<h2 id=\"PlatformTransactionManager接口介绍\"><a href=\"#PlatformTransactionManager接口介绍\" class=\"headerlink\" title=\"PlatformTransactionManager接口介绍\"></a>PlatformTransactionManager接口介绍</h2></blockquote>\n<p><strong>Spring并不直接管理事务，而是提供了多种事务管理器</strong> ，他们将事务管理的职责委托给Hibernate或者JTA等持久化机制所提供的相关平台框架的事务来实现。 Spring事务管理器的接口是： <strong>org.springframework.transaction.PlatformTransactionManager</strong> ，通过这个接口，Spring为各个平台如JDBC、Hibernate等都提供了对应的事务管理器，但是具体的实现就是各个平台自己的事情了。</p>\n<h3 id=\"PlatformTransactionManager接口代码如下：\"><a href=\"#PlatformTransactionManager接口代码如下：\" class=\"headerlink\" title=\"PlatformTransactionManager接口代码如下：\"></a>PlatformTransactionManager接口代码如下：</h3><p>PlatformTransactionManager接口中定义了三个方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Public interface PlatformTransactionManager()...&#123;  </span><br><span class=\"line\">    // Return a currently active transaction or create a new one, according to the specified propagation behavior（根据指定的传播行为，返回当前活动的事务或创建一个新事务。）</span><br><span class=\"line\">    TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException; </span><br><span class=\"line\">    // Commit the given transaction, with regard to its status（使用事务目前的状态提交事务）</span><br><span class=\"line\">    Void commit(TransactionStatus status) throws TransactionException;  </span><br><span class=\"line\">    // Perform a rollback of the given transaction（对执行的事务进行回滚）</span><br><span class=\"line\">    Void rollback(TransactionStatus status) throws TransactionException;  </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>我们刚刚也说了Spring中PlatformTransactionManager根据不同持久层框架所对应的接口实现类,几个比较常见的如下图所示</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://wumu.sciento.cn/img/20190803144836.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>比如我们在使用JDBC或者iBatis（就是Mybatis）进行数据持久化操作时,我们的xml配置通常如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t&lt;!-- 事务管理器 --&gt;</span><br><span class=\"line\">\t&lt;bean id=&quot;transactionManager&quot;</span><br><span class=\"line\">\t\tclass=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class=\"line\">\t\t&lt;!-- 数据源 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h2 id=\"TransactionDefinition接口介绍\"><a href=\"#TransactionDefinition接口介绍\" class=\"headerlink\" title=\"TransactionDefinition接口介绍\"></a>TransactionDefinition接口介绍</h2></blockquote>\n<p>事务管理器接口 <strong>PlatformTransactionManager</strong> 通过 <strong>getTransaction(TransactionDefinition definition)</strong> 方法来得到一个事务，这个方法里面的参数是 <strong>TransactionDefinition类</strong> ，这个类就定义了一些基本的事务属性。</p>\n<p><strong>那么什么是事务属性呢？</strong></p>\n<p>事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。事务属性包含了5个方面。 </p>\n<p><img src=\"http://wumu.sciento.cn/img/20190803144913.png\" alt=\"\"></p>\n<h3 id=\"TransactionDefinition接口中的方法如下：\"><a href=\"#TransactionDefinition接口中的方法如下：\" class=\"headerlink\" title=\"TransactionDefinition接口中的方法如下：\"></a>TransactionDefinition接口中的方法如下：</h3><p>TransactionDefinition接口中定义了5个方法以及一些表示事务属性的常量比如隔离级别、传播行为等等的常量。</p>\n<p>我下面只是列出了TransactionDefinition接口中的方法而没有给出接口中定义的常量，该接口中的常量信息会在后面依次介绍到。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface TransactionDefinition &#123;</span><br><span class=\"line\">    // 返回事务的传播行为</span><br><span class=\"line\">    int getPropagationBehavior(); </span><br><span class=\"line\">    // 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据</span><br><span class=\"line\">    int getIsolationLevel(); </span><br><span class=\"line\">    // 返回事务必须在多少秒内完成</span><br><span class=\"line\">    //返回事务的名字</span><br><span class=\"line\">    String getName()；</span><br><span class=\"line\">    int getTimeout();  </span><br><span class=\"line\">    // 返回是否优化为只读事务。</span><br><span class=\"line\">    boolean isReadOnly();</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<h3 id=\"（1）事务隔离级别（定义了一个事务可能受其他并发事务影响的程度）：\"><a href=\"#（1）事务隔离级别（定义了一个事务可能受其他并发事务影响的程度）：\" class=\"headerlink\" title=\"（1）事务隔离级别（定义了一个事务可能受其他并发事务影响的程度）：\"></a>（1）事务隔离级别（定义了一个事务可能受其他并发事务影响的程度）：</h3><p>我们先来看一下 <strong>并发事务带来的问题</strong> ，然后再来介绍一下 <strong>TransactionDefinition 接口</strong> 中定义了五个表示隔离级别的常量。</p>\n<blockquote>\n<h4 id=\"并发事务带来的问题\"><a href=\"#并发事务带来的问题\" class=\"headerlink\" title=\"并发事务带来的问题\"></a>并发事务带来的问题</h4></blockquote>\n<p>在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对统一数据进行操作）。并发虽然是必须的，但可能会导致一下的问题。</p>\n<ul>\n<li><p><strong>脏读（Dirty read）:</strong> 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。</p>\n</li>\n<li><p><strong>丢失修改（Lost to modify）:</strong> 指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。</p>\n<p>例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。</p>\n</li>\n<li><p><strong>不可重复读（Unrepeatableread）:</strong> 指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</p>\n</li>\n<li><p><strong>幻读（Phantom read）:</strong> 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</p>\n</li>\n</ul>\n<p><strong>不可重复度和幻读区别：</strong></p>\n<p>不可重复读的重点是修改，幻读的重点在于新增或者删除。</p>\n<p>例1（同样的条件, 你读取过的数据, 再次读取出来发现值不一样了 ）：事务1中的A先生读取自己的工资为     1000的操作还没完成，事务2中的B先生就修改了A的工资为2000，导        致A再读自己的工资时工资变为  2000；这就是不可重复读。</p>\n<p>例2（同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。</p>\n<blockquote>\n<h4 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h4></blockquote>\n<p>TransactionDefinition 接口中定义了五个表示隔离级别的常量：</p>\n<ul>\n<li><strong>TransactionDefinition.ISOLATION_DEFAULT:</strong>    使用后端数据库默认的隔离级别，Mysql 默认采用的 REPEATABLE_READ隔离级别 Oracle 默认采用的 READ_COMMITTED隔离级别.</li>\n<li><strong>TransactionDefinition.ISOLATION_READ_UNCOMMITTED:</strong> 最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能会导致脏读、幻读或不可重复读</strong></li>\n<li><strong>TransactionDefinition.ISOLATION_READ_COMMITTED:</strong>     允许读取并发事务已经提交的数据，<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong></li>\n<li><strong>TransactionDefinition.ISOLATION_REPEATABLE_READ:</strong>     对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生。</strong></li>\n<li><strong>TransactionDefinition.ISOLATION_SERIALIZABLE:</strong>     最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读</strong>。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</li>\n</ul>\n<h3 id=\"（2）事务传播行为（为了解决业务层方法之间互相调用的事务问题）：\"><a href=\"#（2）事务传播行为（为了解决业务层方法之间互相调用的事务问题）：\" class=\"headerlink\" title=\"（2）事务传播行为（为了解决业务层方法之间互相调用的事务问题）：\"></a>（2）事务传播行为（为了解决业务层方法之间互相调用的事务问题）：</h3><p>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：</p>\n<p><strong>支持当前事务的情况：</strong></p>\n<ul>\n<li><strong>TransactionDefinition.PROPAGATION_REQUIRED：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li>\n<li><strong>TransactionDefinition.PROPAGATION_SUPPORTS：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li>\n<li><strong>TransactionDefinition.PROPAGATION_MANDATORY：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）</li>\n</ul>\n<p><strong>不支持当前事务的情况：</strong></p>\n<ul>\n<li><strong>TransactionDefinition.PROPAGATION_REQUIRES_NEW：</strong> 创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li>\n<li><strong>TransactionDefinition.PROPAGATION_NOT_SUPPORTED：</strong> 以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li>\n<li><strong>TransactionDefinition.PROPAGATION_NEVER：</strong> 以非事务方式运行，如果当前存在事务，则抛出异常。</li>\n</ul>\n<p><strong>其他情况：</strong></p>\n<ul>\n<li><strong>TransactionDefinition.PROPAGATION_NESTED：</strong> 如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</li>\n</ul>\n<p>这里需要指出的是，前面的六种事务传播行为是 Spring 从 EJB 中引入的，他们共享相同的概念。而 <strong>PROPAGATION_NESTED</strong> 是 Spring 所特有的。以 PROPAGATION_NESTED 启动的事务内嵌于外部事务中（如果存在外部事务的话），此时，内嵌事务并不是一个独立的事务，它依赖于外部事务的存在，只有通过外部的事务提交，才能引起内部事务的提交，嵌套的子事务不能单独提交。如果熟悉 JDBC 中的保存点（SavePoint）的概念，那嵌套事务就很容易理解了，其实嵌套的子事务就是保存点的一个应用，一个事务中可以包括多个保存点，每一个嵌套子事务。另外，外部事务的回滚也会导致嵌套子事务的回滚。</p>\n<h3 id=\"3-事务超时属性-一个事务允许执行的最长时间\"><a href=\"#3-事务超时属性-一个事务允许执行的最长时间\" class=\"headerlink\" title=\"(3) 事务超时属性(一个事务允许执行的最长时间)\"></a>(3) 事务超时属性(一个事务允许执行的最长时间)</h3><p>所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。</p>\n<h3 id=\"4-事务只读属性（对事物资源是否执行只读操作）\"><a href=\"#4-事务只读属性（对事物资源是否执行只读操作）\" class=\"headerlink\" title=\"(4) 事务只读属性（对事物资源是否执行只读操作）\"></a>(4) 事务只读属性（对事物资源是否执行只读操作）</h3><p>事务的只读属性是指，对事务性资源进行只读操作或者是读写操作。所谓事务性资源就是指那些被事务管理的资源，比如数据源、 JMS 资源，以及自定义的事务性资源等等。如果确定只对事务性资源进行只读操作，那么我们可以将事务标志为只读的，以提高事务处理的性能。在 TransactionDefinition 中以 boolean 类型来表示该事务是否只读。</p>\n<h3 id=\"5-回滚规则（定义事务回滚规则）\"><a href=\"#5-回滚规则（定义事务回滚规则）\" class=\"headerlink\" title=\"(5) 回滚规则（定义事务回滚规则）\"></a>(5) 回滚规则（定义事务回滚规则）</h3><h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><h2 id=\"使用API\"><a href=\"#使用API\" class=\"headerlink\" title=\"使用API\"></a>使用API</h2><p>下面给出一个基于底层 API 的编程式事务管理的示例，<br>基于PlatformTransactionManager、TransactionDefinition 和 TransactionStatus 三个核心接口，我们完全可以通过编程的方式来进行事务管理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BankServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">BankService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BankDao bankDao;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TransactionDefinition txDefinition;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PlatformTransactionManager txManager;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">transfer</span><span class=\"params\">(Long fromId， Long toId， <span class=\"keyword\">double</span> amount)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取一个事务</span></span><br><span class=\"line\">    TransactionStatus txStatus = txManager.getTransaction(txDefinition);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        result = bankDao.transfer(fromId， toId， amount);</span><br><span class=\"line\">        txManager.commit(txStatus);    <span class=\"comment\">// 事务提交</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        txManager.rollback(txStatus);      <span class=\"comment\">// 事务回滚</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Transfer Error!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">相应的配置文件如下所示：</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bankService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footmark.spring.core.tx.programmatic.origin.BankServiceImpl\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bankDao\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"bankDao\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"txManager\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"transactionManager\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"txDefinition\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.transaction.support.DefaultTransactionDefinition\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"propagationBehaviorName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"PROPAGATION_REQUIRED\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span>如上所示，我们在BankServiceImpl类中增加了两个属性：一个是 TransactionDefinition 类型的属性，它用于定义事务的规则；另一个是 PlatformTransactionManager 类型的属性，用于执行事务管理操作。如果一个业务方法需要添加事务，我们首先需要在方法开始执行前调用PlatformTransactionManager.getTransaction(…) 方法启动一个事务；创建并启动了事务之后，便可以开始编写业务逻辑代码，然后在适当的地方执行事务的提交或者回滚。</span><br></pre></td></tr></table></figure>\n<h2 id=\"基于-TransactionTemplate-的编程式事务管理\"><a href=\"#基于-TransactionTemplate-的编程式事务管理\" class=\"headerlink\" title=\"基于 TransactionTemplate 的编程式事务管理\"></a>基于 TransactionTemplate 的编程式事务管理</h2><p>　　当然，除了可以使用基于底层 API 的编程式事务外，还可以使用基于 TransactionTemplate 的编程式事务管理。通过上面的示例可以发现，上述事务管理的代码散落在业务逻辑代码中，破坏了原有代码的条理性，并且每一个业务方法都包含了类似的启动事务、提交/回滚事务的样板代码。Spring 也意识到了这些，并提供了简化的方法，这就是 Spring 在数据访问层非常常见的 模板回调模式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BankServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">BankService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BankDao bankDao;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TransactionTemplate transactionTemplate;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">transfer</span><span class=\"params\">(<span class=\"keyword\">final</span> Long fromId， <span class=\"keyword\">final</span> Long toId， <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> amount)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Boolean) transactionTemplate.execute(<span class=\"keyword\">new</span> TransactionCallback()&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">doInTransaction</span><span class=\"params\">(TransactionStatus status)</span> </span>&#123;</span><br><span class=\"line\">                Object result;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        result = bankDao.transfer(fromId， toId， amount);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                        status.setRollbackOnly();</span><br><span class=\"line\">                        result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"Transfer Error!\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相应的配置文件如下所示：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=<span class=\"string\">\"bankService\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"footmark.spring.core.tx.programmatic.template.BankServiceImpl\"</span>&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">\"bankDao\"</span> ref=<span class=\"string\">\"bankDao\"</span>/&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">\"transactionTemplate\"</span> ref=<span class=\"string\">\"transactionTemplate\"</span>/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<p>TransactionTemplate 的 execute() 方法有一个 TransactionCallback 类型的参数，该接口中定义了一个 doInTransaction() 方法，通常我们以匿名内部类的方式实现 TransactionCallback 接口，并在其 doInTransaction() 方法中书写业务逻辑代码。这里可以使用默认的事务提交和回滚规则，这样在业务代码中就不需要显式调用任何事务管理的 API。doInTransaction() 方法有一个TransactionStatus 类型的参数，我们可以在方法的任何位置调用该参数的 setRollbackOnly() 方法将事务标识为回滚的，以执行事务回滚。</p>\n<p>​    此外，TransactionCallback 接口有一个子接口 TransactionCallbackWithoutResult，该接口中定义了一个 doInTransactionWithoutResult() 方法，TransactionCallbackWithoutResult 接口主要用于事务过程中不需要返回值的情况。当然，对于不需要返回值的情况，我们仍然可以使用 TransactionCallback 接口，并在方法中返回任意值即可。</p>\n<h2 id=\"基于底层-API-的编程式事务管理\"><a href=\"#基于底层-API-的编程式事务管理\" class=\"headerlink\" title=\"基于底层 API 的编程式事务管理\"></a>基于底层 API 的编程式事务管理</h2><p>　　下面给出一个基于底层 API 的编程式事务管理的示例，<br>基于PlatformTransactionManager、TransactionDefinition 和 TransactionStatus 三个核心接口，我们完全可以通过编程的方式来进行事务管理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BankServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">BankService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BankDao bankDao;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TransactionDefinition txDefinition;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PlatformTransactionManager txManager;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">transfer</span><span class=\"params\">(Long fromId， Long toId， <span class=\"keyword\">double</span> amount)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取一个事务</span></span><br><span class=\"line\">    TransactionStatus txStatus = txManager.getTransaction(txDefinition);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        result = bankDao.transfer(fromId， toId， amount);</span><br><span class=\"line\">        txManager.commit(txStatus);    <span class=\"comment\">// 事务提交</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        txManager.rollback(txStatus);      <span class=\"comment\">// 事务回滚</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Transfer Error!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">相应的配置文件如下所示：</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bankService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footmark.spring.core.tx.programmatic.origin.BankServiceImpl\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bankDao\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"bankDao\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"txManager\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"transactionManager\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"txDefinition\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.transaction.support.DefaultTransactionDefinition\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"propagationBehaviorName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"PROPAGATION_REQUIRED\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如上所示，我们在BankServiceImpl类中增加了两个属性：一个是 TransactionDefinition 类型的属性，它用于定义事务的规则；另一个是 PlatformTransactionManager 类型的属性，用于执行事务管理操作。如果一个业务方法需要添加事务，我们首先需要在方法开始执行前调用PlatformTransactionManager.getTransaction(…) 方法启动一个事务；创建并启动了事务之后，便可以开始编写业务逻辑代码，然后在适当的地方执行事务的提交或者回滚。</p>\n<h2 id=\"基于-TransactionTemplate-的编程式事务管理-1\"><a href=\"#基于-TransactionTemplate-的编程式事务管理-1\" class=\"headerlink\" title=\"基于 TransactionTemplate 的编程式事务管理\"></a>基于 TransactionTemplate 的编程式事务管理</h2><p>　　当然，除了可以使用基于底层 API 的编程式事务外，还可以使用基于 TransactionTemplate 的编程式事务管理。通过上面的示例可以发现，上述事务管理的代码散落在业务逻辑代码中，破坏了原有代码的条理性，并且每一个业务方法都包含了类似的启动事务、提交/回滚事务的样板代码。Spring 也意识到了这些，并提供了简化的方法，这就是 Spring 在数据访问层非常常见的 模板回调模式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BankServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">BankService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BankDao bankDao;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TransactionTemplate transactionTemplate;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">transfer</span><span class=\"params\">(<span class=\"keyword\">final</span> Long fromId， <span class=\"keyword\">final</span> Long toId， <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> amount)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Boolean) transactionTemplate.execute(<span class=\"keyword\">new</span> TransactionCallback()&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">doInTransaction</span><span class=\"params\">(TransactionStatus status)</span> </span>&#123;</span><br><span class=\"line\">                Object result;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        result = bankDao.transfer(fromId， toId， amount);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                        status.setRollbackOnly();</span><br><span class=\"line\">                        result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"Transfer Error!\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相应的配置文件如下所示：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bankService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footmark.spring.core.tx.programmatic.template.BankServiceImpl\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bankDao\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"bankDao\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"transactionTemplate\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"transactionTemplate\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>TransactionTemplate 的 execute() 方法有一个 TransactionCallback 类型的参数，该接口中定义了一个 doInTransaction() 方法，通常我们以匿名内部类的方式实现 TransactionCallback 接口，并在其 doInTransaction() 方法中书写业务逻辑代码。这里可以使用默认的事务提交和回滚规则，这样在业务代码中就不需要显式调用任何事务管理的 API。doInTransaction() 方法有一个TransactionStatus 类型的参数，我们可以在方法的任何位置调用该参数的 setRollbackOnly() 方法将事务标识为回滚的，以执行事务回滚。</p>\n<p>　　此外，TransactionCallback 接口有一个子接口 TransactionCallbackWithoutResult，该接口中定义了一个 doInTransactionWithoutResult() 方法，TransactionCallbackWithoutResult 接口主要用于事务过程中不需要返回值的情况。当然，对于不需要返回值的情况，我们仍然可以使用 TransactionCallback 接口，并在方法中返回任意值即可。</p>\n<h2 id=\"Spring-声明式事务管理\"><a href=\"#Spring-声明式事务管理\" class=\"headerlink\" title=\"Spring 声明式事务管理\"></a>Spring 声明式事务管理</h2><p>　　Spring 的声明式事务管理是建立在 Spring AOP 机制之上的，其本质是对目标方法前后进行拦截，并在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。</p>\n<p>　　声明式事务最大的优点就是不需要通过编程的方式管理事务，这样就不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中作相关的事务规则声明（或通过等价的基于标注的方式），便可以将事务规则应用到业务逻辑中。总的来说，声明式事务得益于 Spring IoC容器 和 Spring AOP 机制的支持：IoC容器为声明式事务管理提供了基础设施，使得 Bean 对于 Spring 框架而言是可管理的；而由于事务管理本身就是一个典型的横切逻辑（正是 AOP 的用武之地），因此 Spring AOP 机制是声明式事务管理的直接实现者。</p>\n<p>　　显然，声明式事务管理要优于编程式事务管理，这正是spring倡导的非侵入式的开发方式。声明式事务管理使业务代码不受污染，一个普通的POJO对象，只要在XML文件中配置或者添加注解就可以获得完全的事务支持。因此，通常情况下，笔者强烈建议在开发中使用声明式事务，不仅因为其简单，更主要是因为这样使得纯业务代码不被污染，极大方便后期的代码维护。</p>\n<h2 id=\"基于-命名空间的声明式事务管理\"><a href=\"#基于-命名空间的声明式事务管理\" class=\"headerlink\" title=\"基于  命名空间的声明式事务管理\"></a>基于 <tx> 命名空间的声明式事务管理</tx></h2><p>　　Spring 2.x 引入了 <tx> 命名空间，结合使用 <aop> 命名空间，带给开发人员配置声明式事务的全新体验，配置变得更加简单和灵活。总的来说，开发者只需基于<tx>和<aop>命名空间在XML中进行简答配置便可实现声明式事务管理。下面基于<tx>使用Hibernate事务管理的配置文件：</tx></aop></tx></aop></tx></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 配置 DataSourece --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.commons.dbcp.BasicDataSource\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- results in a setDriverClassName(String) call --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>jdbc:mysql://localhost:3306/ssh<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置 sessionFactory --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sessionFactory\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 数据源的设置 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 用于持久化的实体类类列表 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"annotatedClasses\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>cn.edu.tju.rico.model.entity.User<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>cn.edu.tju.rico.model.entity.Log<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Hibernate 的配置 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernateProperties\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">props</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 方言设置   --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"hibernate.dialect\"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 显示sql --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"hibernate.show_sql\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">           <span class=\"comment\">&lt;!-- 格式化sql --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"hibernate.format_sql\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 自动创建/更新数据表 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"hibernate.hbm2ddl.auto\"</span>&gt;</span>update<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">props</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置 TransactionManager --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txManager\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.orm.hibernate3.HibernateTransactionManager\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sessionFactory\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"sessionFactory\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置事务增强处理的切入点，以保证其被恰当的织入 --&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 切点 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* cn.edu.tju.rico.service.impl.*.*(..))\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">id</span>=<span class=\"string\">\"bussinessService\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 声明式事务的切入 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"bussinessService\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 由txAdvice切面定义事务增强处理 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"txManager\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- get打头的方法为只读方法,因此将read-only设为 true --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"get*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 其他方法为读写方法,因此将read-only设为 false --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">isolation</span>=<span class=\"string\">\"DEFAULT\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p> 事实上，Spring配置文件中关于事务的配置总是由三个部分组成，即：DataSource、TransactionManager和代理机制三部分，无论哪种配置方式，一般变化的只是代理机制这部分。其中，DataSource、TransactionManager这两部分只是会根据数据访问方式有所变化，比如使用hibernate进行数据访问时，DataSource实际为SessionFactory，TransactionManager的实现为 HibernateTransactionManager。如下图所示：</p>\n<h2 id=\"基于-Transactional-的声明式事务管理\"><a href=\"#基于-Transactional-的声明式事务管理\" class=\"headerlink\" title=\"基于 @Transactional 的声明式事务管理\"></a>基于 @Transactional 的声明式事务管理</h2><p>　　除了基于命名空间的事务配置方式，Spring 还引入了基于 Annotation 的方式，具体主要涉及@Transactional 标注。@Transactional 可以作用于接口、接口方法、类以及类方法上：当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性；当作用于方法上时，该标注来覆盖类级别的定义。如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">transfer</span><span class=\"params\">(Long fromId， Long toId， <span class=\"keyword\">double</span> amount)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bankDao.transfer(fromId， toId， amount);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Spring 使用 BeanPostProcessor 来处理 Bean 中的标注，因此我们需要在配置文件中作如下声明来激活该后处理 Bean，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;tx:annotation-driven transaction-manager=<span class=\"string\">\"transactionManager”/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>1 与前面相似，transaction-manager、datasource 和 sessionFactory的配置不变，只需将基于<tx>和<aop>命名空间的配置更换为上述配置即可。</aop></tx></p>\n<h2 id=\"Spring-声明式事务的本质\"><a href=\"#Spring-声明式事务的本质\" class=\"headerlink\" title=\"Spring 声明式事务的本质\"></a>Spring 声明式事务的本质</h2><p>　　就Spring 声明式事务而言，无论其基于 <tx> 命名空间的实现还是基于 @Transactional 的实现，其本质都是 Spring AOP 机制的应用：即通过以@Transactional的方式或者XML配置文件的方式向业务组件中的目标业务方法插入事务增强处理并生成相应的代理对象供应用程序(客户端)使用从而达到无污染地添加事务的目的。如下图所示：</tx></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://juejin.im/post/5b00c52ef265da0b95276091\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5b00c52ef265da0b95276091</a></p>\n<p><a href=\"https://blog.csdn.net/justloveyou_/article/details/73733278\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/justloveyou_/article/details/73733278</a> </p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck2a7a4220006ic1ytap5mbqn","tag_id":"ck2a7a4200004ic1yhw62qn8m","_id":"ck2a7a4240009ic1yjgxhje3n"},{"post_id":"ck2a7a41u0000ic1y1h0pz3c5","tag_id":"ck2a7a4200004ic1yhw62qn8m","_id":"ck2a7a425000bic1ywho87mt7"},{"post_id":"ck2a7a41y0002ic1yc1f9p8af","tag_id":"ck2a7a4230008ic1y8r1s816l","_id":"ck2a7a427000fic1yegcvxqzj"},{"post_id":"ck2a7a4210005ic1y15ss8tqq","tag_id":"ck2a7a426000dic1yizqho30q","_id":"ck2a7a42b000mic1y3hp7x1pq"},{"post_id":"ck2a7a4210005ic1y15ss8tqq","tag_id":"ck2a7a428000hic1y8ep3jolf","_id":"ck2a7a42b000oic1y99xt05mx"},{"post_id":"ck2a7a42b000nic1y53agx9qp","tag_id":"ck2a7a4200004ic1yhw62qn8m","_id":"ck2a7a42c000ric1yg35npwp2"},{"post_id":"ck2a7a4230007ic1ygnpiyl0y","tag_id":"ck2a7a42a000kic1yzp4v2xu0","_id":"ck2a7a42d000tic1yt8g1sw0m"},{"post_id":"ck2a7a42c000pic1yj3qzg497","tag_id":"ck2a7a4200004ic1yhw62qn8m","_id":"ck2a7a42e000wic1ym36jcguw"},{"post_id":"ck2a7a424000aic1yzc4lcqm3","tag_id":"ck2a7a42c000qic1yru15nryo","_id":"ck2a7a42f000yic1ywff9kosj"},{"post_id":"ck2a7a42d000uic1yrp0vwji6","tag_id":"ck2a7a42a000kic1yzp4v2xu0","_id":"ck2a7a42g0011ic1y3mvpnxgn"},{"post_id":"ck2a7a425000cic1yvp6eid0i","tag_id":"ck2a7a428000hic1y8ep3jolf","_id":"ck2a7a42h0013ic1yce24hn65"},{"post_id":"ck2a7a42g000zic1ybwv20k0r","tag_id":"ck2a7a426000dic1yizqho30q","_id":"ck2a7a42i0016ic1yul1q9ksm"},{"post_id":"ck2a7a42g0012ic1yctdzs838","tag_id":"ck2a7a42a000kic1yzp4v2xu0","_id":"ck2a7a42j0018ic1y71dstv2c"},{"post_id":"ck2a7a426000eic1ywucnlqe3","tag_id":"ck2a7a42g0010ic1y98o9ryen","_id":"ck2a7a42k001aic1yax4y08pq"},{"post_id":"ck2a7a42h0014ic1y65iagn8f","tag_id":"ck2a7a42g0010ic1y98o9ryen","_id":"ck2a7a42l001dic1yu2eimdhy"},{"post_id":"ck2a7a42j0017ic1ye3vbmiqj","tag_id":"ck2a7a4230008ic1y8r1s816l","_id":"ck2a7a42m001fic1y7lssfw06"},{"post_id":"ck2a7a427000gic1yb48dhs6g","tag_id":"ck2a7a42i0015ic1y4hp2f2br","_id":"ck2a7a42n001iic1yi89t7bj2"},{"post_id":"ck2a7a429000jic1yp62py3ui","tag_id":"ck2a7a42k001bic1yhy2rwaf0","_id":"ck2a7a42o001kic1ys2kos81n"},{"post_id":"ck2a7a429000jic1yp62py3ui","tag_id":"ck2a7a426000dic1yizqho30q","_id":"ck2a7a42p001nic1ycfb5lpxx"},{"post_id":"ck2a7a42m001gic1yoefdk7q2","tag_id":"ck2a7a4230008ic1y8r1s816l","_id":"ck2a7a42q001pic1y5j00bjiz"},{"post_id":"ck2a7a42a000lic1yzcwf3ab1","tag_id":"ck2a7a42m001hic1ybbp7fdsa","_id":"ck2a7a42r001sic1yj8tetsuf"},{"post_id":"ck2a7a42p001oic1yvu4ud066","tag_id":"ck2a7a42g0010ic1y98o9ryen","_id":"ck2a7a42s001uic1ykwpt78od"},{"post_id":"ck2a7a42c000sic1y5cjmbp5f","tag_id":"ck2a7a426000dic1yizqho30q","_id":"ck2a7a42t001wic1yva9xmw8d"},{"post_id":"ck2a7a42c000sic1y5cjmbp5f","tag_id":"ck2a7a42p001mic1yowucsffq","_id":"ck2a7a42u001zic1yscuuldc8"},{"post_id":"ck2a7a42r001tic1ytv3voznk","tag_id":"ck2a7a426000dic1yizqho30q","_id":"ck2a7a42u0020ic1y09yqy2j4"},{"post_id":"ck2a7a42f000xic1y8jfixzvw","tag_id":"ck2a7a42r001ric1yzlx2st0m","_id":"ck2a7a42v0022ic1ysopmovy2"},{"post_id":"ck2a7a42f000xic1y8jfixzvw","tag_id":"ck2a7a4200004ic1yhw62qn8m","_id":"ck2a7a42v0023ic1yqt5828dw"},{"post_id":"ck2a7a42s001vic1ymm9w1ls0","tag_id":"ck2a7a426000dic1yizqho30q","_id":"ck2a7a42v0025ic1yrmaej6xg"},{"post_id":"ck2a7a42j0019ic1y1wisrg49","tag_id":"ck2a7a42t001xic1yqrm6phs7","_id":"ck2a7a42v0026ic1y8eefs16v"},{"post_id":"ck2a7a42l001eic1yyya4vdxz","tag_id":"ck2a7a42t001xic1yqrm6phs7","_id":"ck2a7a42w0028ic1y26xt8zc3"},{"post_id":"ck2a7a42n001jic1ym2rlwc6h","tag_id":"ck2a7a42v0024ic1ytglkjavp","_id":"ck2a7a42w0029ic1y38qz9p77"},{"post_id":"ck2a7a42o001lic1yihv5q0n5","tag_id":"ck2a7a42w0027ic1yudp9u72r","_id":"ck2a7a42x002cic1yv73egecf"},{"post_id":"ck2a7a42o001lic1yihv5q0n5","tag_id":"ck2a7a42w002aic1y329dt44e","_id":"ck2a7a42x002dic1y6875nxjr"},{"post_id":"ck2a7a42q001qic1yg45qr9s5","tag_id":"ck2a7a42w002bic1yqrmaq85t","_id":"ck2a7a42x002fic1yxnz2gkdj"},{"post_id":"ck2a7a42t001yic1yuz75tp8o","tag_id":"ck2a7a42x002eic1yos92mu61","_id":"ck2a7a42y002hic1ywf83exid"},{"post_id":"ck2a7a42t001yic1yuz75tp8o","tag_id":"ck2a7a42w002aic1y329dt44e","_id":"ck2a7a42y002iic1yit2mkpne"},{"post_id":"ck2a7a42t001yic1yuz75tp8o","tag_id":"ck2a7a4200004ic1yhw62qn8m","_id":"ck2a7a42y002jic1y19n10ela"},{"post_id":"ck2a7a431002kic1ya47iok0q","tag_id":"ck2a7a4200004ic1yhw62qn8m","_id":"ck2a7a432002mic1yd02atq18"},{"post_id":"ck2a7a432002nic1y7ewyfdd1","tag_id":"ck2a7a435002pic1y6mw7doqw","_id":"ck2a7a436002ric1yk8hy4ii4"},{"post_id":"ck2a7a434002oic1yrv9j4v3p","tag_id":"ck2a7a42x002eic1yos92mu61","_id":"ck2a7a436002sic1yu4j9wvzp"},{"post_id":"ck2a7a434002oic1yrv9j4v3p","tag_id":"ck2a7a435002qic1y0a9t9cca","_id":"ck2a7a436002tic1yr8f8c06e"},{"post_id":"ck2a7a43j002uic1y86o30dto","tag_id":"ck2a7a435002pic1y6mw7doqw","_id":"ck2a7a43p002wic1ynejwn2bz"},{"post_id":"ck2a7a43o002vic1yoa7g69o6","tag_id":"ck2a7a42g0010ic1y98o9ryen","_id":"ck2a7a43p002yic1ymyyvvvim"},{"post_id":"ck2a7a43p002xic1y2h14lvpg","tag_id":"ck2a7a42g0010ic1y98o9ryen","_id":"ck2a7a43q0030ic1yd9o3jy53"},{"post_id":"ck2a7a43q002zic1yo37emq5q","tag_id":"ck2a7a4200004ic1yhw62qn8m","_id":"ck2a7a43r0032ic1ycwt0775a"},{"post_id":"ck2a7a43q0031ic1ynoti6c9s","tag_id":"ck2a7a4200004ic1yhw62qn8m","_id":"ck2a7a43s0034ic1yypml5751"},{"post_id":"ck2a7a43r0033ic1yst80cllo","tag_id":"ck2a7a4200004ic1yhw62qn8m","_id":"ck2a7a43s0036ic1yo2dybhqn"},{"post_id":"ck2a7a43r0033ic1yst80cllo","tag_id":"ck2a7a435002qic1y0a9t9cca","_id":"ck2a7a43t0038ic1yn0frxuex"},{"post_id":"ck2a7a43s0035ic1yb77cijt1","tag_id":"ck2a7a4200004ic1yhw62qn8m","_id":"ck2a7a43u003aic1yb6ijyjca"},{"post_id":"ck2a7a43s0037ic1yqf71o5qj","tag_id":"ck2a7a42x002eic1yos92mu61","_id":"ck2a7a43u003cic1yskqa9pc2"},{"post_id":"ck2a7a43t0039ic1ya2o23k25","tag_id":"ck2a7a42a000kic1yzp4v2xu0","_id":"ck2a7a43w003eic1ydoj5e4c9"},{"post_id":"ck2a7a43u003bic1ykhv6rups","tag_id":"ck2a7a42x002eic1yos92mu61","_id":"ck2a7a43w003gic1y7yc51y6n"},{"post_id":"ck2a7a43v003dic1yi9jyk263","tag_id":"ck2a7a42a000kic1yzp4v2xu0","_id":"ck2a7a43x003iic1yc5umtvrx"},{"post_id":"ck2a7a43w003fic1yqx8kr5m9","tag_id":"ck2a7a42x002eic1yos92mu61","_id":"ck2a7a43y003kic1y2r54dokc"},{"post_id":"ck2a7a43w003hic1ytfu5q22s","tag_id":"ck2a7a42x002eic1yos92mu61","_id":"ck2a7a43z003mic1yym2xsgze"},{"post_id":"ck2a7a43x003jic1y3xeupw5u","tag_id":"ck2a7a4230008ic1y8r1s816l","_id":"ck2a7a43z003pic1yq9ljgxze"},{"post_id":"ck2a7a43x003jic1y3xeupw5u","tag_id":"ck2a7a42a000kic1yzp4v2xu0","_id":"ck2a7a440003ric1yw9wapf8d"},{"post_id":"ck2a7a440003qic1y5nok7jeu","tag_id":"ck2a7a42m001hic1ybbp7fdsa","_id":"ck2a7a441003tic1yj2ifx5jq"},{"post_id":"ck2a7a440003sic1y0rg917zi","tag_id":"ck2a7a42m001hic1ybbp7fdsa","_id":"ck2a7a442003wic1y626u7djz"},{"post_id":"ck2a7a43y003lic1ydtau2v3o","tag_id":"ck2a7a43z003oic1yatfenwnn","_id":"ck2a7a442003yic1yedn8rh46"},{"post_id":"ck2a7a441003uic1yf5ww8ydf","tag_id":"ck2a7a42m001hic1ybbp7fdsa","_id":"ck2a7a4430040ic1yuq9vy2eq"},{"post_id":"ck2a7a442003xic1yxmsr3sje","tag_id":"ck2a7a42t001xic1yqrm6phs7","_id":"ck2a7a4430041ic1yihp2p5gq"},{"post_id":"ck2a7a43z003nic1yddw0hsqo","tag_id":"ck2a7a43z003oic1yatfenwnn","_id":"ck2a7a4430042ic1yv8hi7avd"},{"post_id":"ck2a7a442003zic1ywa3ymkif","tag_id":"ck2a7a42m001hic1ybbp7fdsa","_id":"ck2a7a4430043ic1y1wlfpgzo"},{"post_id":"ck2a7a4470045ic1y5eyhdog4","tag_id":"ck2a7a4200004ic1yhw62qn8m","_id":"ck2a7a4480048ic1ywk8f0e9z"},{"post_id":"ck2a7a4460044ic1yabyccom5","tag_id":"ck2a7a42m001hic1ybbp7fdsa","_id":"ck2a7a44b004bic1y55x6gds8"},{"post_id":"ck2a7a4460044ic1yabyccom5","tag_id":"ck2a7a4470046ic1yun7g9zgz","_id":"ck2a7a44b004cic1yny9x9son"},{"post_id":"ck2a7a4490049ic1y4hrp3e4z","tag_id":"ck2a7a44a004aic1yqcer5vg6","_id":"ck2a7a44b004dic1yva7nto9e"},{"post_id":"ck2a7a44i004eic1ynve74jv6","tag_id":"ck2a7a4200004ic1yhw62qn8m","_id":"ck2a7a44i004fic1ysxc2y77t"},{"post_id":"ck2a7a44i004eic1ynve74jv6","tag_id":"ck2a7a435002qic1y0a9t9cca","_id":"ck2a7a44i004gic1y0k29ixck"}],"Tag":[{"name":"java","_id":"ck2a7a4200004ic1yhw62qn8m"},{"name":"web","_id":"ck2a7a4230008ic1y8r1s816l"},{"name":"js","_id":"ck2a7a426000dic1yizqho30q"},{"name":"vue","_id":"ck2a7a428000hic1y8ep3jolf"},{"name":"linux","_id":"ck2a7a42a000kic1yzp4v2xu0"},{"name":"css","_id":"ck2a7a42c000qic1yru15nryo"},{"name":"go","_id":"ck2a7a42g0010ic1y98o9ryen"},{"name":"git","_id":"ck2a7a42i0015ic1y4hp2f2br"},{"name":"babel","_id":"ck2a7a42k001bic1yhy2rwaf0"},{"name":"python","_id":"ck2a7a42m001hic1ybbp7fdsa"},{"name":"jquery","_id":"ck2a7a42p001mic1yowucsffq"},{"name":"mybatis","_id":"ck2a7a42r001ric1yzlx2st0m"},{"name":"react","_id":"ck2a7a42t001xic1yqrm6phs7"},{"name":"redis","_id":"ck2a7a42v0024ic1ytglkjavp"},{"name":"springboot","_id":"ck2a7a42w0027ic1yudp9u72r"},{"name":"mongodb","_id":"ck2a7a42w002aic1y329dt44e"},{"name":"spring-cloud","_id":"ck2a7a42w002bic1yqrmaq85t"},{"name":"mysql","_id":"ck2a7a42x002eic1yos92mu61"},{"name":"lorawan","_id":"ck2a7a435002pic1y6mw7doqw"},{"name":"spring","_id":"ck2a7a435002qic1y0a9t9cca"},{"name":"oracle","_id":"ck2a7a43z003oic1yatfenwnn"},{"name":"odoo","_id":"ck2a7a4470046ic1yun7g9zgz"},{"name":"nginx","_id":"ck2a7a44a004aic1yqcer5vg6"}]}}