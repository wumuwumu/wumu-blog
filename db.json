{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.min.js","path":"js/main.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.min.js","path":"js/search.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"c2576c9ea9b181e3553b4ccf799a4960f0b6fed3","modified":1602936080598},{"_id":"themes/indigo/.editorconfig","hash":"9b0445427777519defe360ea38c61729d847b3d3","modified":1563783375379},{"_id":"themes/indigo/README.md","hash":"4bf26d9b43bf24b8e0a1a0d058437a347972f5e6","modified":1563783375801},{"_id":"themes/indigo/_config.yml","hash":"a6e757cc14a9b422d4b34d0f1c8f1bc477518681","modified":1563783375386},{"_id":"themes/indigo/package.json","hash":"c795e3100ae3655bfa8b39adcca7333a7925b47f","modified":1563783375796},{"_id":"themes/indigo/LICENSE","hash":"24944bf7920108f5a4790e6071c32e9102760c37","modified":1563783375792},{"_id":"source/_posts/Druid初始化.md","hash":"a969a8526288471d20b1b0506e9f4098ad12d307","modified":1563783374580},{"_id":"source/_posts/SpringBoot-Quartz框架的实现.md","hash":"b68aa659d8529b6326f7e2c10dde97cebc4c4db5","modified":1602928915955},{"_id":"source/_posts/JSqlParser教程.md","hash":"6d0e1f51c237d8c401f25347381fa4af21e87463","modified":1563783374882},{"_id":"source/_posts/Tiemline设计方案.md","hash":"6e8a9776159ba4d1938cb8c863d62458286724cd","modified":1563783375294},{"_id":"source/_posts/VirtualBox磁盘扩容.md","hash":"3cb8ca68e61499bddc9471b115e27be194667b1f","modified":1563783375298},{"_id":"source/_posts/Dockerfile中的CMD与ENTRYPOINT.md","hash":"4670ad14d06a3317d988ddf5379459db47214f5d","modified":1572364204034},{"_id":"source/_posts/babel配置.md","hash":"4ebe3df52e822d532e0d9fb95c5d08144af3753c","modified":1598541948707},{"_id":"source/_posts/css动画.md","hash":"9e5286e0a039885829e8acda958cd0b0b68d1b34","modified":1563783374564},{"_id":"source/_posts/git基本操作.md","hash":"ee8992b072471cf26274821cb5605131fe3a8ac5","modified":1563783374590},{"_id":"source/_posts/cordova打包vue.md","hash":"7b446a7ae73aa64e3d8e26e93c1111f9b9faec64","modified":1563783374549},{"_id":"source/_posts/go基本语法.md","hash":"2d0dc48d005ae8a3cf3be9f88b864be7b7fb3c4f","modified":1563783374655},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1563783374664},{"_id":"source/_posts/import-在python中的区别.md","hash":"5d6ae9e9ff8e26f4f7966f9157305ad68e9744ea","modified":1563783374829},{"_id":"source/_posts/jquery基本操作.md","hash":"99741a5ef6729e9968e9333be680b84baedd8a5e","modified":1563783374870},{"_id":"source/_posts/lodash按需加载.md","hash":"9d77b7e721fe87b4d7b15eb4d33fdee2a2959e83","modified":1598541948709},{"_id":"source/_posts/lorawan协议.md","hash":"9c68443a144c4f1be959c6ecc8506bfc72340dd7","modified":1563783374901},{"_id":"source/_posts/makefile编写.md","hash":"5bc7bb88fdbcc8de26b4bca825f58f2fb6a2b73e","modified":1563783374916},{"_id":"source/_posts/linux压缩.md","hash":"eeb14d038306087eeaae400ef292fce700c0703e","modified":1567437196262},{"_id":"source/_posts/lorawan协议（中文版）.md","hash":"806513ac01eb685e678824f5c50d83b28edbe4b3","modified":1563783374911},{"_id":"source/_posts/npm版本管理.md","hash":"594aa70f5d3f061b4739e8522d16aadd250f24f7","modified":1598541948710},{"_id":"source/_posts/pm2学习.md","hash":"9faaabc5aeaace2a91e7d39c9582326304add7ee","modified":1598541948713},{"_id":"source/_posts/php5环境搭建.md","hash":"71960f5e644b4b01a6eb35541619ff71b783b936","modified":1567437622393},{"_id":"source/_posts/protobuf使用.md","hash":"5df27e2995e09f695a164d054904b2c63d940539","modified":1563783375225},{"_id":"source/_posts/react-tree-walker学习.md","hash":"364b90e706b863480ed38eac663ed37943032404","modified":1598541948714},{"_id":"source/_posts/react入门教程.md","hash":"e5bc885b5d26384f7b0ab24dc220d1eddec81bd1","modified":1563783375230},{"_id":"source/_posts/redis开启远程连接.md","hash":"a84e88700e7fc6827674225f5c31f08dc0f02e5f","modified":1598541948714},{"_id":"source/_posts/redis分布式锁.md","hash":"e3bea8f5404ce3b863753095fbf9d73b8d91b7db","modified":1563783375245},{"_id":"source/_posts/springboot-mongodb使用.md","hash":"921443187f44b554cdee7f9fb7e778ea2e35acc9","modified":1563783375264},{"_id":"source/_posts/weboack性能优化笔记.md","hash":"0adbb3fc7cd227b789f1afda61299b0916a7af19","modified":1598541948715},{"_id":"source/_posts/springcloud-eureka.md","hash":"ed6bf9f1e7f79614734b0d571b4a355593e6c19d","modified":1563783375277},{"_id":"source/_posts/spring数据库事务.md","hash":"f52eef7369a7f6b7a13c8b2430b8d77d9b63ea19","modified":1567347758858},{"_id":"source/_posts/查找附近的人.md","hash":"5c07a3ba3bd7642d122e343a935a464312cd92f7","modified":1563783375327},{"_id":"source/_posts/框架的实现.md","hash":"f40bf632f44fda8302c61d1ffeea944791c36340","modified":1598541948715},{"_id":"source/_posts/清除inline-block之间的间隙.md","hash":"93a341a7d0f14490eace87ce7b770098d209a9bd","modified":1563783375332},{"_id":"source/categories/index.md","hash":"9a7cf56b2562ecb1dd1853ead4d1b128af155a5f","modified":1563783375343},{"_id":"source/tags/index.md","hash":"f6dde816fbccea997e7eb100a7d14b845cf28975","modified":1563783375351},{"_id":"themes/indigo/languages/en.yml","hash":"1957d2bfc3a4cef299f4f169b431e9b1128ba162","modified":1563783375392},{"_id":"themes/indigo/languages/ja.yml","hash":"74fd480874bf5e773ba7f9d2a94697cda979091f","modified":1563783375397},{"_id":"themes/indigo/languages/nl-NL","hash":"9085c04491f93066f2369911cc2175b59ae596ad","modified":1563783375400},{"_id":"themes/indigo/languages/zh-CN.yml","hash":"7dc6ae434dde390b6768d244132e23cc78c33817","modified":1563783375405},{"_id":"themes/indigo/languages/zh-TW.yml","hash":"6a9e820be66eb12ae746f2527e0dc1adf927c685","modified":1563783375408},{"_id":"themes/indigo/layout/archive.ejs","hash":"d039719e21f6a6fa2925b00aaa623a180a78c818","modified":1563783375755},{"_id":"themes/indigo/layout/categories.ejs","hash":"41783d2069d5080566a99e6312aa2113105f8b41","modified":1563783375759},{"_id":"themes/indigo/layout/category.ejs","hash":"7ea26a8a935886963eda82f41c7bd5270cf780d9","modified":1563783375762},{"_id":"themes/indigo/layout/index.ejs","hash":"39477807b98b2d2df78f3b82498a11e90be8222c","modified":1563783375768},{"_id":"themes/indigo/layout/layout.ejs","hash":"d52f43fa9572d70cae834e4887c8897b43744805","modified":1563783375771},{"_id":"themes/indigo/layout/page.ejs","hash":"afb98face24d39a21ebbbde6592a9afc98572aa4","modified":1563783375775},{"_id":"themes/indigo/layout/post.ejs","hash":"afbf8532dc8d148ca4dff2ca127a3382907cf2f5","modified":1563783375780},{"_id":"themes/indigo/layout/tag.ejs","hash":"36786a3de7f6cad58209603f7d84ba23addea174","modified":1563783375784},{"_id":"themes/indigo/layout/tags.ejs","hash":"20466446c41409d14a3d42ccaec24a65a045efef","modified":1563783375787},{"_id":"themes/indigo/scripts/plugins.js","hash":"e439d717513616bedeed37ba9b05117470809b21","modified":1563783375809},{"_id":"source/_posts/java/Untitled.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1602997985222},{"_id":"source/_posts/SpringCloud/Seata TCC模式.md","hash":"c770657f1f8b956b6cabda4e4969577ad12187fb","modified":1602997845408},{"_id":"source/_posts/SpringCloud/spring cloud zipkin链路追踪.md","hash":"6120c6bc63960dadf110963cf839a638a0298043","modified":1602939871378},{"_id":"source/_posts/SpringCloud/手动创建FeignClient.md","hash":"2dc76b7d2b783637bb633320615b60c1a4f81f89","modified":1602928915955},{"_id":"source/_posts/assets/162fcc0e7e711dc7.png","hash":"ebde565e65804be337543db63d14bd838753521e","modified":1563783374455},{"_id":"source/_posts/docker/docker-compose文件编写.md","hash":"b709b73f151a8fc70aaea9d16139e1f02d1dac0c","modified":1600572175578},{"_id":"source/_posts/docker/docker教程.md","hash":"2c190a5a73e3ed18907e326b06a11b262eea61d0","modified":1600572175580},{"_id":"source/_posts/docker/docker网络模式.md","hash":"f2b2407ff24802bb22d01e21afcd998ae48b1605","modified":1600572175581},{"_id":"source/_posts/docker/网络配置三种模式对比（桥接模式，主机模式，网络地址转换）.md","hash":"9a0909df4b106f5c8007cd75eb12a6e83eb5c896","modified":1600572175582},{"_id":"source/_posts/go/go工程搭建.md","hash":"59a92264e2438a0fd553317c7d588d95058116d4","modified":1563783374629},{"_id":"source/_posts/go/sqlx基本使用.md","hash":"18344502a0cb1611701a538caa69019684f8f67f","modified":1563783374642},{"_id":"source/_posts/java/hibernate使用hbm2ddl.auto=在生产环境更新.md","hash":"e671d40eb2f9650c1b56ba1b7b20eefa4238f143","modified":1598541948708},{"_id":"source/_posts/java/java多线程自问.md","hash":"eece63b81198c894262b8db1d963603a6a969c5a","modified":1598541949130},{"_id":"source/_posts/java/java多线程.md","hash":"d3e19aaca4455a58b5d375c3126eac027da5b96a","modified":1598541949130},{"_id":"source/_posts/java/java动态代理.md","hash":"a5aa3b1097366778c552d77df4be8c7638779a4f","modified":1600573605769},{"_id":"source/_posts/java/hibernate-@Embedded和-Embeddable.md","hash":"34cc6b685010846c60cc08adfd0158a994b43ae1","modified":1567340556777},{"_id":"source/_posts/java/maven修改默认的jdk版本.md","hash":"98ae0a3c6d9890262ede3d399c7b0f186bdbbc84","modified":1602928915955},{"_id":"source/_posts/java/事务隔离级别.md","hash":"03e4a2ca2ed0f282a83e1dafeb20c1dac72e68f9","modified":1602998985823},{"_id":"source/_posts/java/nexus仓库分类.md","hash":"087a7cab70e6a82c617977ab4f0d1a8e5bc159b6","modified":1602928915956},{"_id":"source/_posts/java/nexus使用.md","hash":"85830d99780329b4a29ee0751837a58dda83ccbb","modified":1602928915956},{"_id":"source/_posts/java/使用jenv对java多版本管理.md","hash":"392c52a48cfbbcc4102af6abc361c72af0cf4dbc","modified":1598541948709},{"_id":"source/_posts/java/spring事务实现.md","hash":"d7ef264f0bc3141c3ee5c463bd5d92a93306633a","modified":1567340556777},{"_id":"source/_posts/java/spring的jms事务.md","hash":"c3c6cf1abc3df47b7ee04114e286420afe147923","modified":1567340556777},{"_id":"source/_posts/java/编写自己的Springboot-starter.md","hash":"0b56e64206576fa3de36dc4b4fd4fb42847df68e","modified":1598541948709},{"_id":"source/_posts/mybatis/mybaits拦截器.md","hash":"653fff52e8116d053dea293a5f045ee7e5bff277","modified":1600572175582},{"_id":"source/_posts/mybatis/mybatis-sessions.md","hash":"a30cd01d711d822a4a82868ec18fe1f323dfdb23","modified":1600572175582},{"_id":"source/_posts/mybatis/mybatis入门.md","hash":"da55253abc072f3976f16742e474d3234810bd57","modified":1600572175583},{"_id":"source/_posts/mysql/centos8安装mysql.md","hash":"cf0026dd925a5648ad6427a5c13f90a68da48adf","modified":1600572175583},{"_id":"source/_posts/mysql/mysql修改字符集.md","hash":"8d143f2ced3ca0bacbbdb80236c370cd6d53e355","modified":1564541143965},{"_id":"source/_posts/mysql/mysql安装.md","hash":"381574b97023db93d437c66a5aff40d5cdbdf642","modified":1600572175583},{"_id":"source/_posts/mybatis/mybatis源码阅读.md","hash":"0bb6279bcdf749bfcd8d751fa3d252d2e151a35e","modified":1600575405304},{"_id":"source/_posts/mysql/mysql自带的数据库.md","hash":"34f998ee48da9c463cb6d9165d0b1e2f70a80fbd","modified":1564541143965},{"_id":"source/_posts/mysql/mysql权限管理.md","hash":"e349637538da0679a019252ee8cc5b6ade3cd66c","modified":1598541948709},{"_id":"source/_posts/mysql/mysql性能检测.md","hash":"c9b4736938d21ba8a8e8bbebc539d2eb5755bd49","modified":1567268734496},{"_id":"source/_posts/mysql/mysql连接外网安装.md","hash":"8a544c27b3f15e54b3fbe7df8f3472504fa864c6","modified":1598541948709},{"_id":"source/_posts/nginx/nginx配置.md","hash":"d3c2ccb6657550b56b9a951fa3c48b5717871dc6","modified":1563783374981},{"_id":"source/_posts/nginx/nginx的servername配置.md","hash":"350147dc6e71f2dfc52fc7846dcc3fd359873c4d","modified":1598541948710},{"_id":"source/_posts/mysql/数据库事务.md","hash":"8c6c999312d46630634872b302be4734ffa3e1e9","modified":1567340485424},{"_id":"source/_posts/odoo/odoo模块加载机制.md","hash":"179799fefbeaaa389b1130af49613ce9e2d2736b","modified":1598541948712},{"_id":"source/_posts/odoo/Odoo 12开发者指南第二章 管理Odoo服务器实例.md","hash":"ac307013a224c499676509c82b57d81139406b19","modified":1598541949129},{"_id":"source/_posts/odoo/odoo源码解析1-启动命令.md","hash":"e85a55495578a648b78cda5869abb49632ecd5aa","modified":1598541948712},{"_id":"source/_posts/nginx/nginx伪静态.md","hash":"8c16a3b620863f34545113300d2cfd8609f1d5cb","modified":1567435580942},{"_id":"source/_posts/odoo/odoo源码解析2-server命令.md","hash":"2d3bb3af82c965940a2316031548ce23d80343d0","modified":1598541948713},{"_id":"source/_posts/odoo/odoo源码解析3-启动web服务器.md","hash":"409660a964ff906b3befec4795fc377d11496b35","modified":1598541948713},{"_id":"source/_posts/odoo/odoo源码解析4-wsgi-server.md","hash":"50076aa16a9f7a272f7806aeb5f841c1df3b0ccb","modified":1598541948713},{"_id":"source/_posts/odoo/odoo的dbfilter配置.md","hash":"85b8361b898991226b534ec89dcc19bbd5480596","modified":1598541948713},{"_id":"source/_posts/oracle/Oracle基本管理.md","hash":"dba5961ecc8b54f89dcac6e942f025419fbc7b5f","modified":1563783375212},{"_id":"source/_posts/postgresql/postgresql安装.md","hash":"7b69c7fc0e1606156dc2ed540ac069e427afbfda","modified":1600572175583},{"_id":"source/_posts/oracle/Oracle表管理.md","hash":"112c69d871eab39ed4875b4b52bd41768f71cbf4","modified":1563783375218},{"_id":"source/_posts/postgresql/postgresql账号管理.md","hash":"ec1d101f94dc0133a487141946c1f9ac79163352","modified":1600572175584},{"_id":"source/_posts/python/python-字符串格式.md","hash":"5722ad8a7c9738d52b49454d77160c8eb8cfe444","modified":1564559812562},{"_id":"source/_posts/python/python-类.md","hash":"1a88f4b6743551720e994bddf61a9cd70fd4b57e","modified":1564935234844},{"_id":"source/_posts/postgresql/postgresql配置文件.md","hash":"50a6f39fea14920e021117b15500d3c971d197ce","modified":1598541948713},{"_id":"source/_posts/python/python中and和or用法.md","hash":"08baa4624e723ab0a40db96989c6edf3f75e672f","modified":1598541948713},{"_id":"source/_posts/react/create-react-app脚手架.md","hash":"1f6182e86ddec3d7afc1e2d68870c12bb9f61585","modified":1567340556777},{"_id":"source/_posts/python/python-装饰器.md","hash":"bbc959ff999c57f79d49962266e2e6b12dfd4825","modified":1564588951925},{"_id":"source/_posts/python/python原类.md","hash":"5a2de04ee8aa081070172fb4ef1020d73b4e6751","modified":1572747857690},{"_id":"source/_posts/python/python原类实践.md","hash":"188f7fa6b3feae53b58a413a5e38746736b71f90","modified":1572778172016},{"_id":"source/_posts/react/react-cloneElement.md","hash":"d0d9ec5d2dc4c37582e3121e05ad51e08f8497ab","modified":1570966956917},{"_id":"source/_posts/react/redux-saga分成多个文件.md","hash":"7adb802f9b3062e5d7120302512d825b44b15413","modified":1598541948714},{"_id":"source/_posts/spring/Spring优秀工具类Resource.md","hash":"5729ff439ea5f9aed709d3c70d59d6eee99ae47f","modified":1602928915956},{"_id":"source/_posts/vue/Vue3工程搭建.md","hash":"9fbb789c7d901ed91b31dd6431adc33e987a8da5","modified":1598541948714},{"_id":"source/_posts/spring/springboot启动执行sql文件.md","hash":"b195e4a13089e0603de386fde7348753617aced2","modified":1602928915956},{"_id":"source/_posts/react/react的children.md","hash":"ede37bd299df360fa1a58248f755ab9cc2440428","modified":1571057292072},{"_id":"source/_posts/vue/Vue插件开发.md","hash":"abf1908e401e8ec77fa27e4199462e1350ba2f46","modified":1598541949129},{"_id":"source/_posts/运维/centos7修改网卡.md","hash":"ba3240fed8c6cb230f95a6b0f12270229516d4e8","modified":1602928915956},{"_id":"source/_posts/运维/centos8安装docker.md","hash":"699a10f6da05fffbc1f5ccc04318d01e823569c7","modified":1600572175585},{"_id":"source/_posts/运维/centos8安装kvm.md","hash":"7af5bb255894d97bd0ebba5bd8e72f8fc740b2ce","modified":1600572175585},{"_id":"source/_posts/运维/centos修改阿里云仓库.md","hash":"8294a70f123150272cd3156a182ef6c261214437","modified":1602928915957},{"_id":"source/_posts/运维/centos出现dns不能解析的问题.md","hash":"dd82f952cd197a9323392ee8a6eb5accab005592","modified":1602928915957},{"_id":"source/_posts/运维/centos8扩容root分区.md","hash":"462cf16d55d6fc1f671ddaf717bb47e0d29727d8","modified":1600572175585},{"_id":"source/_posts/运维/centos使用cockpit.md","hash":"fb7f2869c4b22a006f6e3bc5b8b56b64d4fe5056","modified":1600572175585},{"_id":"source/_posts/运维/centos安装jenkins.md","hash":"e07d203ea4967f86137fe43cdfdaadcb50747482","modified":1602928915957},{"_id":"source/_posts/运维/centos创建用户.md","hash":"370a61f9daf241c2f643afcc7ca43b29aeb58c54","modified":1600572175585},{"_id":"source/_posts/运维/centos安装nacos.md","hash":"6e903c780b37a50c201f77b20eea672dcc9820b3","modified":1602928915957},{"_id":"source/_posts/运维/centos安装nexus.md","hash":"b8dd1dd7249b9524456285066f512c9a8037f7d8","modified":1602928915958},{"_id":"source/_posts/运维/centos安装vnc.md","hash":"865ceee8dc1fc5f110275816ed507bdb37c88e30","modified":1600572175586},{"_id":"source/_posts/运维/centos安装mongdb.md","hash":"0e5b2e68fd91da4d8094fecd6a811f3e5ff0f6a3","modified":1602928915957},{"_id":"source/_posts/运维/centos配置网络.md","hash":"8cc343bd7033ae3e4b384c8d98431f8b8d85c289","modified":1600572175586},{"_id":"source/_posts/运维/centos安装rocketmq.md","hash":"aba85cf86efc4137cfb874c3e5847107d14a54d1","modified":1600572175585},{"_id":"source/_posts/运维/frp搭建.md","hash":"023aa77913e83edd419889ef94f2237aab7635f3","modified":1600572175586},{"_id":"source/_posts/运维/let-us-encrypt证书.md","hash":"9b73a4ba4f3bbabb7443b943b459fcaf6f4f5cc8","modified":1600572175586},{"_id":"source/_posts/运维/ngrok环境搭建.md","hash":"1b8bc07302663a9ad82dc80ac7fe0a10dff35881","modified":1600572175586},{"_id":"source/_posts/运维/nvc-server安装.md","hash":"8cad37c09a1af3cf471c5fd10ad86e8bdb32556d","modified":1600572175587},{"_id":"source/_posts/运维/sudoer文件解析.md","hash":"ff2fddda6879838dc12ceb34920dd9b2457cfbe6","modified":1600572175587},{"_id":"source/_posts/运维/systemd文件模板.md","hash":"116c6f06f82e8e2a33b71d57f809d42e43fd554d","modified":1600572175587},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"1510ca9349c9a5136a5ffd6b9c21f61af30c2308","modified":1603001004874},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"02a95a88774cc50dbcc32242b6c8ac7e9d9028bb","modified":1563783375437},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"55cd81ef9183426d6d99fd91550fce0a9cc92aa0","modified":1563783375423},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"00afe1ed44dc8522846d77ac1c90ef6484cdfc22","modified":1603001000539},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"6156bf20791e46fc1c5872113276c1c1f5c13773","modified":1563783375441},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"ec7b3ec79bbbead9c7e43e2e6c6b5c8bef509410","modified":1563783375446},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"bc4cb19b20de55a0332647f4dca9684184383685","modified":1563783375450},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"d39afaad6b0dd2a3ae27e6db3e9a6cd6014622fa","modified":1563783375455},{"_id":"themes/indigo/layout/_partial/paginator.ejs","hash":"dc27242927890f130a64400596b9b7ad5fca8972","modified":1563783375460},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"a87d9b0485b3bf4cdfdad890e5974c43dbaa8240","modified":1563783375738},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"439d6315a1b16e32b77a68c3f0cb2961d581086a","modified":1563783375741},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"c2091c621b5480ef1e69d72027028cec8e929892","modified":1563783375746},{"_id":"themes/indigo/layout/_partial/tags-bar.ejs","hash":"19eff4876d31080a427644f7a43fe172d0c008c6","modified":1563783375750},{"_id":"themes/indigo/source/css/style.less","hash":"f22d4146e0bdb4485d33f20080c67ba05724afea","modified":1563783376453},{"_id":"themes/indigo/source/img/avatar.jpg","hash":"62a4893b1a32e997dcdb6e467b10559df75221e2","modified":1563783376467},{"_id":"themes/indigo/source/img/alipay.jpg","hash":"6054d9ed2ca7cd1f645b729e05632134467d4daa","modified":1563783376462},{"_id":"themes/indigo/source/img/avatar.png","hash":"2c14f8e54893a61fdeb47dc1dbcc1074b427738b","modified":1563783376472},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1563783376482},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1563783376487},{"_id":"themes/indigo/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1563783376478},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1563783376491},{"_id":"themes/indigo/source/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1563783376504},{"_id":"themes/indigo/source/img/wechat.jpg","hash":"ef069cc9e80c7553fd60589b0727bbbf8c6de372","modified":1563783376495},{"_id":"themes/indigo/source/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1563783376508},{"_id":"themes/indigo/source/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1563783376513},{"_id":"themes/indigo/source/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1563783376517},{"_id":"source/_posts/assets/16a07877f982bd5c-20190428093525747.png","hash":"6aab0e4021f072f930dc394306f51df9ff8c51f5","modified":1563783374477},{"_id":"source/_posts/assets/16a07877f982bd5c-20190428093516267.png","hash":"6aab0e4021f072f930dc394306f51df9ff8c51f5","modified":1563783374471},{"_id":"source/_posts/assets/16a07877f982bd5c-6415292.png","hash":"6aab0e4021f072f930dc394306f51df9ff8c51f5","modified":1563783374494},{"_id":"source/_posts/assets/16a07877f982bd5c-20190428093534567.png","hash":"6aab0e4021f072f930dc394306f51df9ff8c51f5","modified":1563783374484},{"_id":"source/_posts/assets/16a07877f982bd5c.png","hash":"6aab0e4021f072f930dc394306f51df9ff8c51f5","modified":1563783374510},{"_id":"source/_posts/assets/16a07879db4e469e.png","hash":"c00e7874920e18a20edd208590f63174a8305918","modified":1563783374518},{"_id":"source/_posts/docker/网络配置三种模式对比（桥接模式，主机模式，网络地址转换）.assets/007S8ZIlgy1gi5jxbkbk6j30ir0a00ta-20200827183604502.jpg","hash":"493d0444e5dbb33be69371cc74d330b6c24f9ecd","modified":1600572175581},{"_id":"source/_posts/docker/网络配置三种模式对比（桥接模式，主机模式，网络地址转换）.assets/007S8ZIlgy1gi5jxbkbk6j30ir0a00ta.jpg","hash":"493d0444e5dbb33be69371cc74d330b6c24f9ecd","modified":1600572175581},{"_id":"source/_posts/docker/网络配置三种模式对比（桥接模式，主机模式，网络地址转换）.assets/SouthEast-20200827183442826.png","hash":"0fd92dd631429ba918fae1b2f399a070a4fa445b","modified":1600572175582},{"_id":"source/_posts/docker/网络配置三种模式对比（桥接模式，主机模式，网络地址转换）.assets/SouthEast-20200827183524255.png","hash":"a6904d7abe1ff06401feb058141a185779ebcc71","modified":1600572175582},{"_id":"themes/indigo/layout/_partial/plugins/baidu.ejs","hash":"e44d526029f122e9c2c74f3a647c35002c818cbe","modified":1563783375466},{"_id":"themes/indigo/layout/_partial/plugins/disqus.ejs","hash":"4a0c01e4195f685f9825fcd016d01249dbdd52ca","modified":1563783375471},{"_id":"themes/indigo/layout/_partial/plugins/dynamic-title.ejs","hash":"23c101d45911eb0846533aaa2d409c43aa5e899a","modified":1563783375476},{"_id":"themes/indigo/layout/_partial/plugins/gitment.ejs","hash":"5723d507eca4390e8e5d18c0770e7953b8c22f5a","modified":1563783375480},{"_id":"themes/indigo/layout/_partial/plugins/google-analytics.ejs","hash":"a947f4076b54b48d4df5baf2d5b3c39b632c7576","modified":1563783375485},{"_id":"themes/indigo/layout/_partial/plugins/hyper-comments.ejs","hash":"e5a83acc7c2e385b0c9abf428e86e8fdfd3a5202","modified":1563783375644},{"_id":"themes/indigo/layout/_partial/plugins/mathjax.ejs","hash":"ea603a057196de53bd6afab1fddb93d11f27eb81","modified":1563783375648},{"_id":"themes/indigo/layout/_partial/plugins/page-visit.ejs","hash":"2decb77bf3c1a064ea6ce1d4e78892c434d9c884","modified":1563783375653},{"_id":"themes/indigo/layout/_partial/plugins/site-visit.ejs","hash":"8fbd0910828f1ab6eba728bdecc9811d623baae2","modified":1563783375658},{"_id":"themes/indigo/layout/_partial/plugins/tajs.ejs","hash":"97b48fe10be1c71d4ff25ccec3bd92d97466c9c5","modified":1563783375663},{"_id":"themes/indigo/layout/_partial/plugins/valine.ejs","hash":"a976ca36bd09aeb2902bf94fcc7a59975ea25148","modified":1563783375671},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c7476165721a3a5e34d00d8c5c07e1e5474cd800","modified":1563783375681},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"bcc3bd7a9023d71778f15e98c88552335ae69a69","modified":1563783375685},{"_id":"themes/indigo/layout/_partial/post/copyright.ejs","hash":"5305ed30ee35cf50f87656737d0ffe85f5bfc16b","modified":1563783375689},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"b0c680ce5b8aaf461a6731b1ff1287bd140c168a","modified":1563783375698},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"11e7d504f7c7a3c4c052da13cfa8ea4862c9383e","modified":1563783375703},{"_id":"themes/indigo/layout/_partial/post/reward-btn.ejs","hash":"41c242fe3159dc68cec8dd00ab6d2663f5a51179","modified":1563783375707},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"23719e09689b3afbb19214c6603eb02f896cb9ba","modified":1563783375711},{"_id":"themes/indigo/layout/_partial/post/share-fab.ejs","hash":"93482ad7d1e01b966f5ee1c5d12b88564e02b349","modified":1563783375715},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"8df0d7bf6f8e106cdbdac2dd10a97367aa0695f8","modified":1563783375718},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"b3dc38652c4a018a37418136478dcd522fc49f79","modified":1563783375722},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"062d56cb88ae2be3a6616b911d4ebeffcbfe3cff","modified":1563783375726},{"_id":"themes/indigo/layout/_partial/post/toc.ejs","hash":"ad287a70724eb7cd8cd2a03a45b68032ee99973d","modified":1563783375730},{"_id":"themes/indigo/layout/_partial/post/updated.ejs","hash":"5caa71745aa340ce57938a930f3b898ee7518d74","modified":1563783375732},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"7d2a6886265386c640e94ffca3f042675f701a35","modified":1563783375823},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"d476cd3537bcd8a02d055cc223f5c805b8638cc2","modified":1563783375827},{"_id":"themes/indigo/layout/_partial/plugins/uyan.ejs","hash":"e370bd04ea5cf1c83e0c20516aff7ba3ca8b2d0b","modified":1563783375667},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"b7db31b9bc563c10b9e3cf3e6d9cfddfeb3e805a","modified":1563783375839},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"90f0948a9182c14b1dac1e9dbed3c883543266f9","modified":1563783375844},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"58492b7cdb45fe09b026b2f34e8ae69c2ddb8228","modified":1563783375848},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"4390ed22abad59c8b28ed1a479a52f15b5f9cf4a","modified":1563783375853},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"f9d06a1e24fb4857fd18d7a0bfbb3a0ab2d1c742","modified":1563783376015},{"_id":"themes/indigo/source/css/_partial/lightbox.less","hash":"9b961eb1d70e7658f42cf2ca895fa5e35a6b6541","modified":1563783375858},{"_id":"themes/indigo/source/css/_partial/page.less","hash":"e92ccb53e6ac73a51498c6a9672db9d0d2bc7f1a","modified":1563783376020},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"1c041bf91106808e5480c60d9ece45431bb503b3","modified":1563783376024},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"4857f90bb57fc22ca3f942d8934d86d5e9e82c1e","modified":1563783376029},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"2e0469ed8161d5672d903ca1a8027cd65fe007f1","modified":1563783376033},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"1d6641ae7568a0153d24beba9fd9704d2b155f6c","modified":1563783376037},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"27d80bcc96a53dd1e7eaa9a7d746e4b212357302","modified":1563783376042},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"959f4373fda6e45f6a4041a995ed3ea8a05a5170","modified":1563783376047},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"77bfd0b373b0469eb0176167fb076ccda4edf2a7","modified":1563783376056},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"a7100f31252866facd73bdebbf608c19c5723d2e","modified":1603000958889},{"_id":"themes/indigo/source/css/_plugin/valine.less","hash":"ddbb7647d83f732f9b0d5d817d40a748006949cc","modified":1563783376065},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"ea85b46e12d3b9c3612eef7aa76289a663fbc096","modified":1563783375694},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"ca30b732d2efbb0cd55a272ecdabc97f895aee78","modified":1563783375834},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1563783376315},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1563783376341},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1563783376336},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1563783376356},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1563783376361},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1563783376367},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1563783376384},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1563783376392},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1563783376397},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1563783376418},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1563783376423},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1563783376446},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1563783376289},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1563783376280},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1563783376329},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1563783376377},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1563783376409},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1563783376438},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1563783376087},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1563783376304},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1563783376270},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1563783376349},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1563783376404},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1563783376430},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1563783376323},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1563783376107}],"Category":[],"Data":[],"Page":[{"title":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ncomments: false\n---\n","date":"2019-07-22T08:16:15.343Z","updated":"2019-07-22T08:16:15.343Z","path":"categories/index.html","layout":"page","_id":"ckgepbll3002e4tjeyni10w52","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ncomments: false\n---\n","date":"2019-07-22T08:16:15.351Z","updated":"2019-07-22T08:16:15.351Z","path":"tags/index.html","layout":"page","_id":"ckgepbll4002g4tje86jlsdcn","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JSqlParser教程","date":"2018-12-05T13:58:31.000Z","_content":"\n# 解析\n\n## 获取表名\n\n```java\n//获取所有使用过的表\nStatement statement = CCJSqlParserUtil.parse(\"SELECT * FROM MY_TABLE1\");\n        Select selectStatement = (Select) statement;\n        TablesNamesFinder tablesNamesFinder = new TablesNamesFinder();\n        List<String> tableList = tablesNamesFinder.getTableList(selectStatement);\n```\n\n## 应用别名\n\n```java\n// SELECT a AS A1, b AS A2, c AS A3 FROM test\nSelect select = (Select) CCJSqlParserUtil.parse(\"select a,b,c from test\");\n        final AddAliasesVisitor instance = new AddAliasesVisitor();\n        select.getSelectBody().accept(instance);\n```\n\n## 添加一列或者表达式\n\n```java\n// SELECT a, b FROM mytable\nSelect select = (Select) CCJSqlParserUtil.parse(\"select a from mytable\");\nSelectUtils.addExpression(select, new Column(\"b\"));\n```\n\n## 添加where语句\n\n### 新建where\n\n```java\nSelect select = (Select) CCJSqlParserUtil.parse(\"select name from user\");\n        PlainSelect plainSelect = (PlainSelect) select.getSelectBody();\n        if (plainSelect.getWhere() == null) {\n            EqualsTo equalsTo = new EqualsTo();\n            equalsTo.setLeftExpression(new Column(\"id\"));\n            equalsTo.setRightExpression(new LongValue(1000L));\n            plainSelect.setWhere(equalsTo);\n        }\n```\n\n### 添加where\n\n```java\nSelect select = (Select) CCJSqlParserUtil.parse(\"select name from user where id = 1000\");\n    PlainSelect plainSelect = (PlainSelect) select.getSelectBody();\n\n    // 原where表达式\n    Expression where = plainSelect.getWhere();\n    // 新增的查询条件表达式\n    EqualsTo equalsTo = new EqualsTo();\n    equalsTo.setLeftExpression(new Column(\"name\"));\n    equalsTo.setRightExpression(new StringValue(\"'张三'\"));\n    // 用and链接条件\n    AndExpression and = new AndExpression(where, equalsTo);\n    // 设置新的where条件\n    plainSelect.setWhere(and);\n```\n\n### 添加null\n\n```java\nSelect select = (Select) CCJSqlParserUtil.parse(\"select name from user where id = 1000\");\n   PlainSelect plainSelect = (PlainSelect) select.getSelectBody();\n\n   // 原where表达式\n   Expression where = plainSelect.getWhere();\n   // 新增的null判断条件\n   IsNullExpression isNullExpression = new IsNullExpression();\n   isNullExpression.setLeftExpression(new Column(\"name\"));\n   isNullExpression.setNot(true);\n   // 用and链接条件\n   AndExpression and = new AndExpression(where, isNullExpression);\n   // 设置新的where条件\n   plainSelect.setWhere(and);\n```\n\n# 生成\n\n## 扩展插入\n\n```java\n// INSERT INTO mytable (col1) VALUES (1)\n// INSERT INTO mytable (col1, col2) VALUES (1, 5)\n// INSERT INTO mytable (col1, col2, col3) VALUES (1, 5, 10)\n\nInsert insert = (Insert) CCJSqlParserUtil.parse(\"insert into mytable (col1) values (1)\");\n        System.out.println(insert.toString());\n        insert.getColumns().add(new Column(\"col2\"));\n        insert.getItemsList().accept(new ItemsListVisitor() {\n\n            public void visit(SubSelect subSelect) {\n                throw new UnsupportedOperationException(\"Not supported yet.\");\n            }\n\n            public void visit(ExpressionList expressionList) {\n                expressionList.getExpressions().add(new LongValue(5));\n            }\n\n            public void visit(MultiExpressionList multiExprList) {\n                throw new UnsupportedOperationException(\"Not supported yet.\");\n            }\n        });\n        System.out.println(insert.toString());\n        insert.getColumns().add(new Column(\"col3\"));\n        ((ExpressionList) insert.getItemsList()).getExpressions().add(new LongValue(10));\n```\n\n## 建立select\n\n```java\nSelect select = SelectUtils.buildSelectFromTable(new Table(\"mytable\"));\n\nSelect select = SelectUtils.buildSelectFromTableAndExpressions(new Table(\"mytable\"), new Column(\"a\"), new Column(\"b\"));\n\nSelect select = SelectUtils.buildSelectFromTableAndExpressions(new Table(\"mytable\"), \"a+b\", \"test\");\n```\n\n## 代替字符串的值\n\n```java\nString sql =\"SELECT NAME, ADDRESS, COL1 FROM USER WHERE SSN IN ('11111111111111', '22222222222222');\";\nSelect select = (Select) CCJSqlParserUtil.parse(sql);\n\n//Start of value modification\nStringBuilder buffer = new StringBuilder();\nExpressionDeParser expressionDeParser = new ExpressionDeParser() {\n\n    @Override\n    public void visit(StringValue stringValue) {\n\tthis.getBuffer().append(\"XXXX\");\n    }\n    \n};\nSelectDeParser deparser = new SelectDeParser(expressionDeParser,buffer );\nexpressionDeParser.setSelectVisitor(deparser);\nexpressionDeParser.setBuffer(buffer);\nselect.getSelectBody().accept(deparser);\n//End of value modification\n\n\nSystem.out.println(buffer.toString());\n//Result is: SELECT NAME, ADDRESS, COL1 FROM USER WHERE SSN IN (XXXX, XXXX)\nimport net.sf.jsqlparser.JSQLParserException;\nimport net.sf.jsqlparser.expression.LongValue;\nimport net.sf.jsqlparser.expression.StringValue;\nimport net.sf.jsqlparser.parser.CCJSqlParserUtil;\nimport net.sf.jsqlparser.statement.Statement;\nimport net.sf.jsqlparser.util.deparser.ExpressionDeParser;\nimport net.sf.jsqlparser.util.deparser.SelectDeParser;\nimport net.sf.jsqlparser.util.deparser.StatementDeParser;\n\npublic class ReplaceColumnValues {\n\n    static class ReplaceColumnAndLongValues extends ExpressionDeParser {\n\n        @Override\n        public void visit(StringValue stringValue) {\n            this.getBuffer().append(\"?\");\n        }\n\n        @Override\n        public void visit(LongValue longValue) {\n            this.getBuffer().append(\"?\");\n        }\n    }\n\n    public static String cleanStatement(String sql) throws JSQLParserException {\n        StringBuilder buffer = new StringBuilder();\n        ExpressionDeParser expr = new ReplaceColumnAndLongValues();\n\n        SelectDeParser selectDeparser = new SelectDeParser(expr, buffer);\n        expr.setSelectVisitor(selectDeparser);\n        expr.setBuffer(buffer);\n        StatementDeParser stmtDeparser = new StatementDeParser(expr, selectDeparser, buffer);\n\n        Statement stmt = CCJSqlParserUtil.parse(sql);\n\n        stmt.accept(stmtDeparser);\n        return stmtDeparser.getBuffer().toString();\n    }\n\n    public static void main(String[] args) throws JSQLParserException {\n        System.out.println(cleanStatement(\"SELECT 'abc', 5 FROM mytable WHERE col='test'\"));\n        System.out.println(cleanStatement(\"UPDATE table1 A SET A.columna = 'XXX' WHERE A.cod_table = 'YYY'\"));\n        System.out.println(cleanStatement(\"INSERT INTO example (num, name, address, tel) VALUES (1, 'name', 'test ', '1234-1234')\"));\n        System.out.println(cleanStatement(\"DELETE FROM table1 where col=5 and col2=4\"));\n    }\n}\n\n\n\n/*\nSELECT ?, ? FROM mytable WHERE col = ?\nUPDATE table1 A SET A.columna = ? WHERE A.cod_table = ?\nINSERT INTO example (num, name, address, tel) VALUES (?, ?, ?, ?)\nDELETE FROM table1 WHERE col = ? AND col2 = ?\n*/\n```\n\n# 参考\n\n> https://github.com/JSQLParser/JSqlParser/wiki","source":"_posts/JSqlParser教程.md","raw":"---\ntitle: JSqlParser教程\ndate: 2018-12-05 21:58:31\ntags:\n- java\n---\n\n# 解析\n\n## 获取表名\n\n```java\n//获取所有使用过的表\nStatement statement = CCJSqlParserUtil.parse(\"SELECT * FROM MY_TABLE1\");\n        Select selectStatement = (Select) statement;\n        TablesNamesFinder tablesNamesFinder = new TablesNamesFinder();\n        List<String> tableList = tablesNamesFinder.getTableList(selectStatement);\n```\n\n## 应用别名\n\n```java\n// SELECT a AS A1, b AS A2, c AS A3 FROM test\nSelect select = (Select) CCJSqlParserUtil.parse(\"select a,b,c from test\");\n        final AddAliasesVisitor instance = new AddAliasesVisitor();\n        select.getSelectBody().accept(instance);\n```\n\n## 添加一列或者表达式\n\n```java\n// SELECT a, b FROM mytable\nSelect select = (Select) CCJSqlParserUtil.parse(\"select a from mytable\");\nSelectUtils.addExpression(select, new Column(\"b\"));\n```\n\n## 添加where语句\n\n### 新建where\n\n```java\nSelect select = (Select) CCJSqlParserUtil.parse(\"select name from user\");\n        PlainSelect plainSelect = (PlainSelect) select.getSelectBody();\n        if (plainSelect.getWhere() == null) {\n            EqualsTo equalsTo = new EqualsTo();\n            equalsTo.setLeftExpression(new Column(\"id\"));\n            equalsTo.setRightExpression(new LongValue(1000L));\n            plainSelect.setWhere(equalsTo);\n        }\n```\n\n### 添加where\n\n```java\nSelect select = (Select) CCJSqlParserUtil.parse(\"select name from user where id = 1000\");\n    PlainSelect plainSelect = (PlainSelect) select.getSelectBody();\n\n    // 原where表达式\n    Expression where = plainSelect.getWhere();\n    // 新增的查询条件表达式\n    EqualsTo equalsTo = new EqualsTo();\n    equalsTo.setLeftExpression(new Column(\"name\"));\n    equalsTo.setRightExpression(new StringValue(\"'张三'\"));\n    // 用and链接条件\n    AndExpression and = new AndExpression(where, equalsTo);\n    // 设置新的where条件\n    plainSelect.setWhere(and);\n```\n\n### 添加null\n\n```java\nSelect select = (Select) CCJSqlParserUtil.parse(\"select name from user where id = 1000\");\n   PlainSelect plainSelect = (PlainSelect) select.getSelectBody();\n\n   // 原where表达式\n   Expression where = plainSelect.getWhere();\n   // 新增的null判断条件\n   IsNullExpression isNullExpression = new IsNullExpression();\n   isNullExpression.setLeftExpression(new Column(\"name\"));\n   isNullExpression.setNot(true);\n   // 用and链接条件\n   AndExpression and = new AndExpression(where, isNullExpression);\n   // 设置新的where条件\n   plainSelect.setWhere(and);\n```\n\n# 生成\n\n## 扩展插入\n\n```java\n// INSERT INTO mytable (col1) VALUES (1)\n// INSERT INTO mytable (col1, col2) VALUES (1, 5)\n// INSERT INTO mytable (col1, col2, col3) VALUES (1, 5, 10)\n\nInsert insert = (Insert) CCJSqlParserUtil.parse(\"insert into mytable (col1) values (1)\");\n        System.out.println(insert.toString());\n        insert.getColumns().add(new Column(\"col2\"));\n        insert.getItemsList().accept(new ItemsListVisitor() {\n\n            public void visit(SubSelect subSelect) {\n                throw new UnsupportedOperationException(\"Not supported yet.\");\n            }\n\n            public void visit(ExpressionList expressionList) {\n                expressionList.getExpressions().add(new LongValue(5));\n            }\n\n            public void visit(MultiExpressionList multiExprList) {\n                throw new UnsupportedOperationException(\"Not supported yet.\");\n            }\n        });\n        System.out.println(insert.toString());\n        insert.getColumns().add(new Column(\"col3\"));\n        ((ExpressionList) insert.getItemsList()).getExpressions().add(new LongValue(10));\n```\n\n## 建立select\n\n```java\nSelect select = SelectUtils.buildSelectFromTable(new Table(\"mytable\"));\n\nSelect select = SelectUtils.buildSelectFromTableAndExpressions(new Table(\"mytable\"), new Column(\"a\"), new Column(\"b\"));\n\nSelect select = SelectUtils.buildSelectFromTableAndExpressions(new Table(\"mytable\"), \"a+b\", \"test\");\n```\n\n## 代替字符串的值\n\n```java\nString sql =\"SELECT NAME, ADDRESS, COL1 FROM USER WHERE SSN IN ('11111111111111', '22222222222222');\";\nSelect select = (Select) CCJSqlParserUtil.parse(sql);\n\n//Start of value modification\nStringBuilder buffer = new StringBuilder();\nExpressionDeParser expressionDeParser = new ExpressionDeParser() {\n\n    @Override\n    public void visit(StringValue stringValue) {\n\tthis.getBuffer().append(\"XXXX\");\n    }\n    \n};\nSelectDeParser deparser = new SelectDeParser(expressionDeParser,buffer );\nexpressionDeParser.setSelectVisitor(deparser);\nexpressionDeParser.setBuffer(buffer);\nselect.getSelectBody().accept(deparser);\n//End of value modification\n\n\nSystem.out.println(buffer.toString());\n//Result is: SELECT NAME, ADDRESS, COL1 FROM USER WHERE SSN IN (XXXX, XXXX)\nimport net.sf.jsqlparser.JSQLParserException;\nimport net.sf.jsqlparser.expression.LongValue;\nimport net.sf.jsqlparser.expression.StringValue;\nimport net.sf.jsqlparser.parser.CCJSqlParserUtil;\nimport net.sf.jsqlparser.statement.Statement;\nimport net.sf.jsqlparser.util.deparser.ExpressionDeParser;\nimport net.sf.jsqlparser.util.deparser.SelectDeParser;\nimport net.sf.jsqlparser.util.deparser.StatementDeParser;\n\npublic class ReplaceColumnValues {\n\n    static class ReplaceColumnAndLongValues extends ExpressionDeParser {\n\n        @Override\n        public void visit(StringValue stringValue) {\n            this.getBuffer().append(\"?\");\n        }\n\n        @Override\n        public void visit(LongValue longValue) {\n            this.getBuffer().append(\"?\");\n        }\n    }\n\n    public static String cleanStatement(String sql) throws JSQLParserException {\n        StringBuilder buffer = new StringBuilder();\n        ExpressionDeParser expr = new ReplaceColumnAndLongValues();\n\n        SelectDeParser selectDeparser = new SelectDeParser(expr, buffer);\n        expr.setSelectVisitor(selectDeparser);\n        expr.setBuffer(buffer);\n        StatementDeParser stmtDeparser = new StatementDeParser(expr, selectDeparser, buffer);\n\n        Statement stmt = CCJSqlParserUtil.parse(sql);\n\n        stmt.accept(stmtDeparser);\n        return stmtDeparser.getBuffer().toString();\n    }\n\n    public static void main(String[] args) throws JSQLParserException {\n        System.out.println(cleanStatement(\"SELECT 'abc', 5 FROM mytable WHERE col='test'\"));\n        System.out.println(cleanStatement(\"UPDATE table1 A SET A.columna = 'XXX' WHERE A.cod_table = 'YYY'\"));\n        System.out.println(cleanStatement(\"INSERT INTO example (num, name, address, tel) VALUES (1, 'name', 'test ', '1234-1234')\"));\n        System.out.println(cleanStatement(\"DELETE FROM table1 where col=5 and col2=4\"));\n    }\n}\n\n\n\n/*\nSELECT ?, ? FROM mytable WHERE col = ?\nUPDATE table1 A SET A.columna = ? WHERE A.cod_table = ?\nINSERT INTO example (num, name, address, tel) VALUES (?, ?, ?, ?)\nDELETE FROM table1 WHERE col = ? AND col2 = ?\n*/\n```\n\n# 参考\n\n> https://github.com/JSQLParser/JSqlParser/wiki","slug":"JSqlParser教程","published":1,"updated":"2019-07-22T08:16:14.882Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblj600004tje75854les","content":"<h1 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h1><h2 id=\"获取表名\"><a href=\"#获取表名\" class=\"headerlink\" title=\"获取表名\"></a>获取表名</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取所有使用过的表</span></span><br><span class=\"line\">Statement statement = CCJSqlParserUtil.parse(<span class=\"string\">\"SELECT * FROM MY_TABLE1\"</span>);</span><br><span class=\"line\">        Select selectStatement = (Select) statement;</span><br><span class=\"line\">        TablesNamesFinder tablesNamesFinder = <span class=\"keyword\">new</span> TablesNamesFinder();</span><br><span class=\"line\">        List&lt;String&gt; tableList = tablesNamesFinder.getTableList(selectStatement);</span><br></pre></td></tr></table></figure>\n<h2 id=\"应用别名\"><a href=\"#应用别名\" class=\"headerlink\" title=\"应用别名\"></a>应用别名</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SELECT a AS A1, b AS A2, c AS A3 FROM test</span></span><br><span class=\"line\">Select select = (Select) CCJSqlParserUtil.parse(<span class=\"string\">\"select a,b,c from test\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> AddAliasesVisitor instance = <span class=\"keyword\">new</span> AddAliasesVisitor();</span><br><span class=\"line\">        select.getSelectBody().accept(instance);</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加一列或者表达式\"><a href=\"#添加一列或者表达式\" class=\"headerlink\" title=\"添加一列或者表达式\"></a>添加一列或者表达式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SELECT a, b FROM mytable</span></span><br><span class=\"line\">Select select = (Select) CCJSqlParserUtil.parse(<span class=\"string\">\"select a from mytable\"</span>);</span><br><span class=\"line\">SelectUtils.addExpression(select, <span class=\"keyword\">new</span> Column(<span class=\"string\">\"b\"</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加where语句\"><a href=\"#添加where语句\" class=\"headerlink\" title=\"添加where语句\"></a>添加where语句</h2><h3 id=\"新建where\"><a href=\"#新建where\" class=\"headerlink\" title=\"新建where\"></a>新建where</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Select select = (Select) CCJSqlParserUtil.parse(<span class=\"string\">\"select name from user\"</span>);</span><br><span class=\"line\">        PlainSelect plainSelect = (PlainSelect) select.getSelectBody();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (plainSelect.getWhere() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            EqualsTo equalsTo = <span class=\"keyword\">new</span> EqualsTo();</span><br><span class=\"line\">            equalsTo.setLeftExpression(<span class=\"keyword\">new</span> Column(<span class=\"string\">\"id\"</span>));</span><br><span class=\"line\">            equalsTo.setRightExpression(<span class=\"keyword\">new</span> LongValue(<span class=\"number\">1000L</span>));</span><br><span class=\"line\">            plainSelect.setWhere(equalsTo);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加where\"><a href=\"#添加where\" class=\"headerlink\" title=\"添加where\"></a>添加where</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Select select = (Select) CCJSqlParserUtil.parse(<span class=\"string\">\"select name from user where id = 1000\"</span>);</span><br><span class=\"line\">    PlainSelect plainSelect = (PlainSelect) select.getSelectBody();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 原where表达式</span></span><br><span class=\"line\">    Expression where = plainSelect.getWhere();</span><br><span class=\"line\">    <span class=\"comment\">// 新增的查询条件表达式</span></span><br><span class=\"line\">    EqualsTo equalsTo = <span class=\"keyword\">new</span> EqualsTo();</span><br><span class=\"line\">    equalsTo.setLeftExpression(<span class=\"keyword\">new</span> Column(<span class=\"string\">\"name\"</span>));</span><br><span class=\"line\">    equalsTo.setRightExpression(<span class=\"keyword\">new</span> StringValue(<span class=\"string\">\"'张三'\"</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 用and链接条件</span></span><br><span class=\"line\">    AndExpression and = <span class=\"keyword\">new</span> AndExpression(where, equalsTo);</span><br><span class=\"line\">    <span class=\"comment\">// 设置新的where条件</span></span><br><span class=\"line\">    plainSelect.setWhere(and);</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加null\"><a href=\"#添加null\" class=\"headerlink\" title=\"添加null\"></a>添加null</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Select select = (Select) CCJSqlParserUtil.parse(<span class=\"string\">\"select name from user where id = 1000\"</span>);</span><br><span class=\"line\">   PlainSelect plainSelect = (PlainSelect) select.getSelectBody();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 原where表达式</span></span><br><span class=\"line\">   Expression where = plainSelect.getWhere();</span><br><span class=\"line\">   <span class=\"comment\">// 新增的null判断条件</span></span><br><span class=\"line\">   IsNullExpression isNullExpression = <span class=\"keyword\">new</span> IsNullExpression();</span><br><span class=\"line\">   isNullExpression.setLeftExpression(<span class=\"keyword\">new</span> Column(<span class=\"string\">\"name\"</span>));</span><br><span class=\"line\">   isNullExpression.setNot(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">   <span class=\"comment\">// 用and链接条件</span></span><br><span class=\"line\">   AndExpression and = <span class=\"keyword\">new</span> AndExpression(where, isNullExpression);</span><br><span class=\"line\">   <span class=\"comment\">// 设置新的where条件</span></span><br><span class=\"line\">   plainSelect.setWhere(and);</span><br></pre></td></tr></table></figure>\n<h1 id=\"生成\"><a href=\"#生成\" class=\"headerlink\" title=\"生成\"></a>生成</h1><h2 id=\"扩展插入\"><a href=\"#扩展插入\" class=\"headerlink\" title=\"扩展插入\"></a>扩展插入</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// INSERT INTO mytable (col1) VALUES (1)</span></span><br><span class=\"line\"><span class=\"comment\">// INSERT INTO mytable (col1, col2) VALUES (1, 5)</span></span><br><span class=\"line\"><span class=\"comment\">// INSERT INTO mytable (col1, col2, col3) VALUES (1, 5, 10)</span></span><br><span class=\"line\"></span><br><span class=\"line\">Insert insert = (Insert) CCJSqlParserUtil.parse(<span class=\"string\">\"insert into mytable (col1) values (1)\"</span>);</span><br><span class=\"line\">        System.out.println(insert.toString());</span><br><span class=\"line\">        insert.getColumns().add(<span class=\"keyword\">new</span> Column(<span class=\"string\">\"col2\"</span>));</span><br><span class=\"line\">        insert.getItemsList().accept(<span class=\"keyword\">new</span> ItemsListVisitor() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(SubSelect subSelect)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(<span class=\"string\">\"Not supported yet.\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(ExpressionList expressionList)</span> </span>&#123;</span><br><span class=\"line\">                expressionList.getExpressions().add(<span class=\"keyword\">new</span> LongValue(<span class=\"number\">5</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(MultiExpressionList multiExprList)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(<span class=\"string\">\"Not supported yet.\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        System.out.println(insert.toString());</span><br><span class=\"line\">        insert.getColumns().add(<span class=\"keyword\">new</span> Column(<span class=\"string\">\"col3\"</span>));</span><br><span class=\"line\">        ((ExpressionList) insert.getItemsList()).getExpressions().add(<span class=\"keyword\">new</span> LongValue(<span class=\"number\">10</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"建立select\"><a href=\"#建立select\" class=\"headerlink\" title=\"建立select\"></a>建立select</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Select select = SelectUtils.buildSelectFromTable(<span class=\"keyword\">new</span> Table(<span class=\"string\">\"mytable\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">Select select = SelectUtils.buildSelectFromTableAndExpressions(<span class=\"keyword\">new</span> Table(<span class=\"string\">\"mytable\"</span>), <span class=\"keyword\">new</span> Column(<span class=\"string\">\"a\"</span>), <span class=\"keyword\">new</span> Column(<span class=\"string\">\"b\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">Select select = SelectUtils.buildSelectFromTableAndExpressions(<span class=\"keyword\">new</span> Table(<span class=\"string\">\"mytable\"</span>), <span class=\"string\">\"a+b\"</span>, <span class=\"string\">\"test\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"代替字符串的值\"><a href=\"#代替字符串的值\" class=\"headerlink\" title=\"代替字符串的值\"></a>代替字符串的值</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String sql =<span class=\"string\">\"SELECT NAME, ADDRESS, COL1 FROM USER WHERE SSN IN ('11111111111111', '22222222222222');\"</span>;</span><br><span class=\"line\">Select select = (Select) CCJSqlParserUtil.parse(sql);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Start of value modification</span></span><br><span class=\"line\">StringBuilder buffer = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">ExpressionDeParser expressionDeParser = <span class=\"keyword\">new</span> ExpressionDeParser() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(StringValue stringValue)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.getBuffer().append(<span class=\"string\">\"XXXX\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">SelectDeParser deparser = <span class=\"keyword\">new</span> SelectDeParser(expressionDeParser,buffer );</span><br><span class=\"line\">expressionDeParser.setSelectVisitor(deparser);</span><br><span class=\"line\">expressionDeParser.setBuffer(buffer);</span><br><span class=\"line\">select.getSelectBody().accept(deparser);</span><br><span class=\"line\"><span class=\"comment\">//End of value modification</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(buffer.toString());</span><br><span class=\"line\"><span class=\"comment\">//Result is: SELECT NAME, ADDRESS, COL1 FROM USER WHERE SSN IN (XXXX, XXXX)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.JSQLParserException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.expression.LongValue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.expression.StringValue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.parser.CCJSqlParserUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.statement.Statement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.util.deparser.ExpressionDeParser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.util.deparser.SelectDeParser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.util.deparser.StatementDeParser;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReplaceColumnValues</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReplaceColumnAndLongValues</span> <span class=\"keyword\">extends</span> <span class=\"title\">ExpressionDeParser</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(StringValue stringValue)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.getBuffer().append(<span class=\"string\">\"?\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(LongValue longValue)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.getBuffer().append(<span class=\"string\">\"?\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">cleanStatement</span><span class=\"params\">(String sql)</span> <span class=\"keyword\">throws</span> JSQLParserException </span>&#123;</span><br><span class=\"line\">        StringBuilder buffer = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        ExpressionDeParser expr = <span class=\"keyword\">new</span> ReplaceColumnAndLongValues();</span><br><span class=\"line\"></span><br><span class=\"line\">        SelectDeParser selectDeparser = <span class=\"keyword\">new</span> SelectDeParser(expr, buffer);</span><br><span class=\"line\">        expr.setSelectVisitor(selectDeparser);</span><br><span class=\"line\">        expr.setBuffer(buffer);</span><br><span class=\"line\">        StatementDeParser stmtDeparser = <span class=\"keyword\">new</span> StatementDeParser(expr, selectDeparser, buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">        Statement stmt = CCJSqlParserUtil.parse(sql);</span><br><span class=\"line\"></span><br><span class=\"line\">        stmt.accept(stmtDeparser);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stmtDeparser.getBuffer().toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> JSQLParserException </span>&#123;</span><br><span class=\"line\">        System.out.println(cleanStatement(<span class=\"string\">\"SELECT 'abc', 5 FROM mytable WHERE col='test'\"</span>));</span><br><span class=\"line\">        System.out.println(cleanStatement(<span class=\"string\">\"UPDATE table1 A SET A.columna = 'XXX' WHERE A.cod_table = 'YYY'\"</span>));</span><br><span class=\"line\">        System.out.println(cleanStatement(<span class=\"string\">\"INSERT INTO example (num, name, address, tel) VALUES (1, 'name', 'test ', '1234-1234')\"</span>));</span><br><span class=\"line\">        System.out.println(cleanStatement(<span class=\"string\">\"DELETE FROM table1 where col=5 and col2=4\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">SELECT ?, ? FROM mytable WHERE col = ?</span></span><br><span class=\"line\"><span class=\"comment\">UPDATE table1 A SET A.columna = ? WHERE A.cod_table = ?</span></span><br><span class=\"line\"><span class=\"comment\">INSERT INTO example (num, name, address, tel) VALUES (?, ?, ?, ?)</span></span><br><span class=\"line\"><span class=\"comment\">DELETE FROM table1 WHERE col = ? AND col2 = ?</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://github.com/JSQLParser/JSqlParser/wiki\" target=\"_blank\" rel=\"noopener\">https://github.com/JSQLParser/JSqlParser/wiki</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h1><h2 id=\"获取表名\"><a href=\"#获取表名\" class=\"headerlink\" title=\"获取表名\"></a>获取表名</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取所有使用过的表</span></span><br><span class=\"line\">Statement statement = CCJSqlParserUtil.parse(<span class=\"string\">\"SELECT * FROM MY_TABLE1\"</span>);</span><br><span class=\"line\">        Select selectStatement = (Select) statement;</span><br><span class=\"line\">        TablesNamesFinder tablesNamesFinder = <span class=\"keyword\">new</span> TablesNamesFinder();</span><br><span class=\"line\">        List&lt;String&gt; tableList = tablesNamesFinder.getTableList(selectStatement);</span><br></pre></td></tr></table></figure>\n<h2 id=\"应用别名\"><a href=\"#应用别名\" class=\"headerlink\" title=\"应用别名\"></a>应用别名</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SELECT a AS A1, b AS A2, c AS A3 FROM test</span></span><br><span class=\"line\">Select select = (Select) CCJSqlParserUtil.parse(<span class=\"string\">\"select a,b,c from test\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> AddAliasesVisitor instance = <span class=\"keyword\">new</span> AddAliasesVisitor();</span><br><span class=\"line\">        select.getSelectBody().accept(instance);</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加一列或者表达式\"><a href=\"#添加一列或者表达式\" class=\"headerlink\" title=\"添加一列或者表达式\"></a>添加一列或者表达式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SELECT a, b FROM mytable</span></span><br><span class=\"line\">Select select = (Select) CCJSqlParserUtil.parse(<span class=\"string\">\"select a from mytable\"</span>);</span><br><span class=\"line\">SelectUtils.addExpression(select, <span class=\"keyword\">new</span> Column(<span class=\"string\">\"b\"</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加where语句\"><a href=\"#添加where语句\" class=\"headerlink\" title=\"添加where语句\"></a>添加where语句</h2><h3 id=\"新建where\"><a href=\"#新建where\" class=\"headerlink\" title=\"新建where\"></a>新建where</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Select select = (Select) CCJSqlParserUtil.parse(<span class=\"string\">\"select name from user\"</span>);</span><br><span class=\"line\">        PlainSelect plainSelect = (PlainSelect) select.getSelectBody();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (plainSelect.getWhere() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            EqualsTo equalsTo = <span class=\"keyword\">new</span> EqualsTo();</span><br><span class=\"line\">            equalsTo.setLeftExpression(<span class=\"keyword\">new</span> Column(<span class=\"string\">\"id\"</span>));</span><br><span class=\"line\">            equalsTo.setRightExpression(<span class=\"keyword\">new</span> LongValue(<span class=\"number\">1000L</span>));</span><br><span class=\"line\">            plainSelect.setWhere(equalsTo);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加where\"><a href=\"#添加where\" class=\"headerlink\" title=\"添加where\"></a>添加where</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Select select = (Select) CCJSqlParserUtil.parse(<span class=\"string\">\"select name from user where id = 1000\"</span>);</span><br><span class=\"line\">    PlainSelect plainSelect = (PlainSelect) select.getSelectBody();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 原where表达式</span></span><br><span class=\"line\">    Expression where = plainSelect.getWhere();</span><br><span class=\"line\">    <span class=\"comment\">// 新增的查询条件表达式</span></span><br><span class=\"line\">    EqualsTo equalsTo = <span class=\"keyword\">new</span> EqualsTo();</span><br><span class=\"line\">    equalsTo.setLeftExpression(<span class=\"keyword\">new</span> Column(<span class=\"string\">\"name\"</span>));</span><br><span class=\"line\">    equalsTo.setRightExpression(<span class=\"keyword\">new</span> StringValue(<span class=\"string\">\"'张三'\"</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 用and链接条件</span></span><br><span class=\"line\">    AndExpression and = <span class=\"keyword\">new</span> AndExpression(where, equalsTo);</span><br><span class=\"line\">    <span class=\"comment\">// 设置新的where条件</span></span><br><span class=\"line\">    plainSelect.setWhere(and);</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加null\"><a href=\"#添加null\" class=\"headerlink\" title=\"添加null\"></a>添加null</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Select select = (Select) CCJSqlParserUtil.parse(<span class=\"string\">\"select name from user where id = 1000\"</span>);</span><br><span class=\"line\">   PlainSelect plainSelect = (PlainSelect) select.getSelectBody();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 原where表达式</span></span><br><span class=\"line\">   Expression where = plainSelect.getWhere();</span><br><span class=\"line\">   <span class=\"comment\">// 新增的null判断条件</span></span><br><span class=\"line\">   IsNullExpression isNullExpression = <span class=\"keyword\">new</span> IsNullExpression();</span><br><span class=\"line\">   isNullExpression.setLeftExpression(<span class=\"keyword\">new</span> Column(<span class=\"string\">\"name\"</span>));</span><br><span class=\"line\">   isNullExpression.setNot(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">   <span class=\"comment\">// 用and链接条件</span></span><br><span class=\"line\">   AndExpression and = <span class=\"keyword\">new</span> AndExpression(where, isNullExpression);</span><br><span class=\"line\">   <span class=\"comment\">// 设置新的where条件</span></span><br><span class=\"line\">   plainSelect.setWhere(and);</span><br></pre></td></tr></table></figure>\n<h1 id=\"生成\"><a href=\"#生成\" class=\"headerlink\" title=\"生成\"></a>生成</h1><h2 id=\"扩展插入\"><a href=\"#扩展插入\" class=\"headerlink\" title=\"扩展插入\"></a>扩展插入</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// INSERT INTO mytable (col1) VALUES (1)</span></span><br><span class=\"line\"><span class=\"comment\">// INSERT INTO mytable (col1, col2) VALUES (1, 5)</span></span><br><span class=\"line\"><span class=\"comment\">// INSERT INTO mytable (col1, col2, col3) VALUES (1, 5, 10)</span></span><br><span class=\"line\"></span><br><span class=\"line\">Insert insert = (Insert) CCJSqlParserUtil.parse(<span class=\"string\">\"insert into mytable (col1) values (1)\"</span>);</span><br><span class=\"line\">        System.out.println(insert.toString());</span><br><span class=\"line\">        insert.getColumns().add(<span class=\"keyword\">new</span> Column(<span class=\"string\">\"col2\"</span>));</span><br><span class=\"line\">        insert.getItemsList().accept(<span class=\"keyword\">new</span> ItemsListVisitor() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(SubSelect subSelect)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(<span class=\"string\">\"Not supported yet.\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(ExpressionList expressionList)</span> </span>&#123;</span><br><span class=\"line\">                expressionList.getExpressions().add(<span class=\"keyword\">new</span> LongValue(<span class=\"number\">5</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(MultiExpressionList multiExprList)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException(<span class=\"string\">\"Not supported yet.\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        System.out.println(insert.toString());</span><br><span class=\"line\">        insert.getColumns().add(<span class=\"keyword\">new</span> Column(<span class=\"string\">\"col3\"</span>));</span><br><span class=\"line\">        ((ExpressionList) insert.getItemsList()).getExpressions().add(<span class=\"keyword\">new</span> LongValue(<span class=\"number\">10</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"建立select\"><a href=\"#建立select\" class=\"headerlink\" title=\"建立select\"></a>建立select</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Select select = SelectUtils.buildSelectFromTable(<span class=\"keyword\">new</span> Table(<span class=\"string\">\"mytable\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">Select select = SelectUtils.buildSelectFromTableAndExpressions(<span class=\"keyword\">new</span> Table(<span class=\"string\">\"mytable\"</span>), <span class=\"keyword\">new</span> Column(<span class=\"string\">\"a\"</span>), <span class=\"keyword\">new</span> Column(<span class=\"string\">\"b\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">Select select = SelectUtils.buildSelectFromTableAndExpressions(<span class=\"keyword\">new</span> Table(<span class=\"string\">\"mytable\"</span>), <span class=\"string\">\"a+b\"</span>, <span class=\"string\">\"test\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"代替字符串的值\"><a href=\"#代替字符串的值\" class=\"headerlink\" title=\"代替字符串的值\"></a>代替字符串的值</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String sql =<span class=\"string\">\"SELECT NAME, ADDRESS, COL1 FROM USER WHERE SSN IN ('11111111111111', '22222222222222');\"</span>;</span><br><span class=\"line\">Select select = (Select) CCJSqlParserUtil.parse(sql);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Start of value modification</span></span><br><span class=\"line\">StringBuilder buffer = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">ExpressionDeParser expressionDeParser = <span class=\"keyword\">new</span> ExpressionDeParser() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(StringValue stringValue)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.getBuffer().append(<span class=\"string\">\"XXXX\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">SelectDeParser deparser = <span class=\"keyword\">new</span> SelectDeParser(expressionDeParser,buffer );</span><br><span class=\"line\">expressionDeParser.setSelectVisitor(deparser);</span><br><span class=\"line\">expressionDeParser.setBuffer(buffer);</span><br><span class=\"line\">select.getSelectBody().accept(deparser);</span><br><span class=\"line\"><span class=\"comment\">//End of value modification</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(buffer.toString());</span><br><span class=\"line\"><span class=\"comment\">//Result is: SELECT NAME, ADDRESS, COL1 FROM USER WHERE SSN IN (XXXX, XXXX)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.JSQLParserException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.expression.LongValue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.expression.StringValue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.parser.CCJSqlParserUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.statement.Statement;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.util.deparser.ExpressionDeParser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.util.deparser.SelectDeParser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.jsqlparser.util.deparser.StatementDeParser;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReplaceColumnValues</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReplaceColumnAndLongValues</span> <span class=\"keyword\">extends</span> <span class=\"title\">ExpressionDeParser</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(StringValue stringValue)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.getBuffer().append(<span class=\"string\">\"?\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(LongValue longValue)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.getBuffer().append(<span class=\"string\">\"?\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">cleanStatement</span><span class=\"params\">(String sql)</span> <span class=\"keyword\">throws</span> JSQLParserException </span>&#123;</span><br><span class=\"line\">        StringBuilder buffer = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        ExpressionDeParser expr = <span class=\"keyword\">new</span> ReplaceColumnAndLongValues();</span><br><span class=\"line\"></span><br><span class=\"line\">        SelectDeParser selectDeparser = <span class=\"keyword\">new</span> SelectDeParser(expr, buffer);</span><br><span class=\"line\">        expr.setSelectVisitor(selectDeparser);</span><br><span class=\"line\">        expr.setBuffer(buffer);</span><br><span class=\"line\">        StatementDeParser stmtDeparser = <span class=\"keyword\">new</span> StatementDeParser(expr, selectDeparser, buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">        Statement stmt = CCJSqlParserUtil.parse(sql);</span><br><span class=\"line\"></span><br><span class=\"line\">        stmt.accept(stmtDeparser);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stmtDeparser.getBuffer().toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> JSQLParserException </span>&#123;</span><br><span class=\"line\">        System.out.println(cleanStatement(<span class=\"string\">\"SELECT 'abc', 5 FROM mytable WHERE col='test'\"</span>));</span><br><span class=\"line\">        System.out.println(cleanStatement(<span class=\"string\">\"UPDATE table1 A SET A.columna = 'XXX' WHERE A.cod_table = 'YYY'\"</span>));</span><br><span class=\"line\">        System.out.println(cleanStatement(<span class=\"string\">\"INSERT INTO example (num, name, address, tel) VALUES (1, 'name', 'test ', '1234-1234')\"</span>));</span><br><span class=\"line\">        System.out.println(cleanStatement(<span class=\"string\">\"DELETE FROM table1 where col=5 and col2=4\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">SELECT ?, ? FROM mytable WHERE col = ?</span></span><br><span class=\"line\"><span class=\"comment\">UPDATE table1 A SET A.columna = ? WHERE A.cod_table = ?</span></span><br><span class=\"line\"><span class=\"comment\">INSERT INTO example (num, name, address, tel) VALUES (?, ?, ?, ?)</span></span><br><span class=\"line\"><span class=\"comment\">DELETE FROM table1 WHERE col = ? AND col2 = ?</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://github.com/JSQLParser/JSqlParser/wiki\" target=\"_blank\" rel=\"noopener\">https://github.com/JSQLParser/JSqlParser/wiki</a></p>\n</blockquote>\n"},{"title":"Tiemline设计方案","date":"2019-01-04T12:33:08.000Z","_content":"\n\n\n\n\n# 参考\n\n> [朋友圈式的TIMELINE设计方案](https://www.myway5.com/index.php/2017/06/29/timeline-design/)\n>\n> [朋友圈的设计及实现](https://blog.csdn.net/u011035407/article/details/78592787)\n>\n> [几个大型网站的Feeds(Timeline)设计简单对比](https://cloud.tencent.com/developer/article/1350690)\n\n","source":"_posts/Tiemline设计方案.md","raw":"---\ntitle: Tiemline设计方案\ndate: 2019-01-04 20:33:08\ntags:\n- java\n---\n\n\n\n\n\n# 参考\n\n> [朋友圈式的TIMELINE设计方案](https://www.myway5.com/index.php/2017/06/29/timeline-design/)\n>\n> [朋友圈的设计及实现](https://blog.csdn.net/u011035407/article/details/78592787)\n>\n> [几个大型网站的Feeds(Timeline)设计简单对比](https://cloud.tencent.com/developer/article/1350690)\n\n","slug":"Tiemline设计方案","published":1,"updated":"2019-07-22T08:16:15.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblja00014tje5mhxb3fh","content":"<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://www.myway5.com/index.php/2017/06/29/timeline-design/\" target=\"_blank\" rel=\"noopener\">朋友圈式的TIMELINE设计方案</a></p>\n<p><a href=\"https://blog.csdn.net/u011035407/article/details/78592787\" target=\"_blank\" rel=\"noopener\">朋友圈的设计及实现</a></p>\n<p><a href=\"https://cloud.tencent.com/developer/article/1350690\" target=\"_blank\" rel=\"noopener\">几个大型网站的Feeds(Timeline)设计简单对比</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://www.myway5.com/index.php/2017/06/29/timeline-design/\" target=\"_blank\" rel=\"noopener\">朋友圈式的TIMELINE设计方案</a></p>\n<p><a href=\"https://blog.csdn.net/u011035407/article/details/78592787\" target=\"_blank\" rel=\"noopener\">朋友圈的设计及实现</a></p>\n<p><a href=\"https://cloud.tencent.com/developer/article/1350690\" target=\"_blank\" rel=\"noopener\">几个大型网站的Feeds(Timeline)设计简单对比</a></p>\n</blockquote>\n"},{"title":"VirtualBox磁盘扩容","date":"2018-12-05T13:36:46.000Z","_content":"\n## 扩展磁盘文件\n\n### VDI\n\n```\nVBoxManage modifyhd centos.vdi --resize 16000  # 单位M\n```\n\n### VMDK\n\n```\nVBoxManage clonehd \"centos.vmdk\" \"centos.vdi\" --format vdi     # vmdk是转换前的文件，vdi是转换之后的文件\nVBoxManage modifyhd \"centos.vdi\" --resize 16000                # 这里的单位是M\nVBoxManage clonehd \"centos.vdi\" \"resized.vmdk\" --format vmdk   #可以再转回来\n```\n\n## 使用克隆\n\n本人在使用的时候，前面两种方式不能实现，采用第三种方式\n\n```\nVBoxManage createhd -filename centos7-main-64g -size 65536 -format VDI -variant Standard  # 创建一个新的磁盘，磁盘大小为想要的大小\nVBoxManage clonemedium ../centos7-main\\ Clone/centos7-main\\ Clone.vdi centos7-main-64g.vdi --existing  # 将原有的磁盘复制到新磁盘上\n```\n\n## 磁盘扩容\n\n这里可以使用gparted进行磁盘的扩容\n\n1. 下载gparted-live镜像\n2. 设置iso镜像开机启动\n3. 进行分区的修改\n\n## LVM扩容\n\n如果你没有使用逻辑卷就可以跳过这节。如果使用逻辑卷也可以通过添加新磁盘的形式对文件系统进行扩容，这种方式更加简单方便。\n\n### 创建PE、VG\n\n### 扩展LV\n\n```\nsudo vgextend VolGroup /dev/sda4       # 通过新卷的方式扩展到卷组\nlvresize -l +122 /dev/centos/root      # 直接扩容\n```\n\n### 刷新逻辑分区容量\n\n```\nxfs_growfs /devices/centos/root    # resize2fs是不能成功的\n```","source":"_posts/VirtualBox磁盘扩容.md","raw":"---\ntitle: VirtualBox磁盘扩容\ndate: 2018-12-05 21:36:46\ntags: \n- web\n---\n\n## 扩展磁盘文件\n\n### VDI\n\n```\nVBoxManage modifyhd centos.vdi --resize 16000  # 单位M\n```\n\n### VMDK\n\n```\nVBoxManage clonehd \"centos.vmdk\" \"centos.vdi\" --format vdi     # vmdk是转换前的文件，vdi是转换之后的文件\nVBoxManage modifyhd \"centos.vdi\" --resize 16000                # 这里的单位是M\nVBoxManage clonehd \"centos.vdi\" \"resized.vmdk\" --format vmdk   #可以再转回来\n```\n\n## 使用克隆\n\n本人在使用的时候，前面两种方式不能实现，采用第三种方式\n\n```\nVBoxManage createhd -filename centos7-main-64g -size 65536 -format VDI -variant Standard  # 创建一个新的磁盘，磁盘大小为想要的大小\nVBoxManage clonemedium ../centos7-main\\ Clone/centos7-main\\ Clone.vdi centos7-main-64g.vdi --existing  # 将原有的磁盘复制到新磁盘上\n```\n\n## 磁盘扩容\n\n这里可以使用gparted进行磁盘的扩容\n\n1. 下载gparted-live镜像\n2. 设置iso镜像开机启动\n3. 进行分区的修改\n\n## LVM扩容\n\n如果你没有使用逻辑卷就可以跳过这节。如果使用逻辑卷也可以通过添加新磁盘的形式对文件系统进行扩容，这种方式更加简单方便。\n\n### 创建PE、VG\n\n### 扩展LV\n\n```\nsudo vgextend VolGroup /dev/sda4       # 通过新卷的方式扩展到卷组\nlvresize -l +122 /dev/centos/root      # 直接扩容\n```\n\n### 刷新逻辑分区容量\n\n```\nxfs_growfs /devices/centos/root    # resize2fs是不能成功的\n```","slug":"VirtualBox磁盘扩容","published":1,"updated":"2019-07-22T08:16:15.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbljd00034tjei6zywkrm","content":"<h2 id=\"扩展磁盘文件\"><a href=\"#扩展磁盘文件\" class=\"headerlink\" title=\"扩展磁盘文件\"></a>扩展磁盘文件</h2><h3 id=\"VDI\"><a href=\"#VDI\" class=\"headerlink\" title=\"VDI\"></a>VDI</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VBoxManage modifyhd centos.vdi --resize 16000  # 单位M</span><br></pre></td></tr></table></figure>\n<h3 id=\"VMDK\"><a href=\"#VMDK\" class=\"headerlink\" title=\"VMDK\"></a>VMDK</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VBoxManage clonehd &quot;centos.vmdk&quot; &quot;centos.vdi&quot; --format vdi     # vmdk是转换前的文件，vdi是转换之后的文件</span><br><span class=\"line\">VBoxManage modifyhd &quot;centos.vdi&quot; --resize 16000                # 这里的单位是M</span><br><span class=\"line\">VBoxManage clonehd &quot;centos.vdi&quot; &quot;resized.vmdk&quot; --format vmdk   #可以再转回来</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用克隆\"><a href=\"#使用克隆\" class=\"headerlink\" title=\"使用克隆\"></a>使用克隆</h2><p>本人在使用的时候，前面两种方式不能实现，采用第三种方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VBoxManage createhd -filename centos7-main-64g -size 65536 -format VDI -variant Standard  # 创建一个新的磁盘，磁盘大小为想要的大小</span><br><span class=\"line\">VBoxManage clonemedium ../centos7-main\\ Clone/centos7-main\\ Clone.vdi centos7-main-64g.vdi --existing  # 将原有的磁盘复制到新磁盘上</span><br></pre></td></tr></table></figure>\n<h2 id=\"磁盘扩容\"><a href=\"#磁盘扩容\" class=\"headerlink\" title=\"磁盘扩容\"></a>磁盘扩容</h2><p>这里可以使用gparted进行磁盘的扩容</p>\n<ol>\n<li>下载gparted-live镜像</li>\n<li>设置iso镜像开机启动</li>\n<li>进行分区的修改</li>\n</ol>\n<h2 id=\"LVM扩容\"><a href=\"#LVM扩容\" class=\"headerlink\" title=\"LVM扩容\"></a>LVM扩容</h2><p>如果你没有使用逻辑卷就可以跳过这节。如果使用逻辑卷也可以通过添加新磁盘的形式对文件系统进行扩容，这种方式更加简单方便。</p>\n<h3 id=\"创建PE、VG\"><a href=\"#创建PE、VG\" class=\"headerlink\" title=\"创建PE、VG\"></a>创建PE、VG</h3><h3 id=\"扩展LV\"><a href=\"#扩展LV\" class=\"headerlink\" title=\"扩展LV\"></a>扩展LV</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vgextend VolGroup /dev/sda4       # 通过新卷的方式扩展到卷组</span><br><span class=\"line\">lvresize -l +122 /dev/centos/root      # 直接扩容</span><br></pre></td></tr></table></figure>\n<h3 id=\"刷新逻辑分区容量\"><a href=\"#刷新逻辑分区容量\" class=\"headerlink\" title=\"刷新逻辑分区容量\"></a>刷新逻辑分区容量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xfs_growfs /devices/centos/root    # resize2fs是不能成功的</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"扩展磁盘文件\"><a href=\"#扩展磁盘文件\" class=\"headerlink\" title=\"扩展磁盘文件\"></a>扩展磁盘文件</h2><h3 id=\"VDI\"><a href=\"#VDI\" class=\"headerlink\" title=\"VDI\"></a>VDI</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VBoxManage modifyhd centos.vdi --resize 16000  # 单位M</span><br></pre></td></tr></table></figure>\n<h3 id=\"VMDK\"><a href=\"#VMDK\" class=\"headerlink\" title=\"VMDK\"></a>VMDK</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VBoxManage clonehd &quot;centos.vmdk&quot; &quot;centos.vdi&quot; --format vdi     # vmdk是转换前的文件，vdi是转换之后的文件</span><br><span class=\"line\">VBoxManage modifyhd &quot;centos.vdi&quot; --resize 16000                # 这里的单位是M</span><br><span class=\"line\">VBoxManage clonehd &quot;centos.vdi&quot; &quot;resized.vmdk&quot; --format vmdk   #可以再转回来</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用克隆\"><a href=\"#使用克隆\" class=\"headerlink\" title=\"使用克隆\"></a>使用克隆</h2><p>本人在使用的时候，前面两种方式不能实现，采用第三种方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VBoxManage createhd -filename centos7-main-64g -size 65536 -format VDI -variant Standard  # 创建一个新的磁盘，磁盘大小为想要的大小</span><br><span class=\"line\">VBoxManage clonemedium ../centos7-main\\ Clone/centos7-main\\ Clone.vdi centos7-main-64g.vdi --existing  # 将原有的磁盘复制到新磁盘上</span><br></pre></td></tr></table></figure>\n<h2 id=\"磁盘扩容\"><a href=\"#磁盘扩容\" class=\"headerlink\" title=\"磁盘扩容\"></a>磁盘扩容</h2><p>这里可以使用gparted进行磁盘的扩容</p>\n<ol>\n<li>下载gparted-live镜像</li>\n<li>设置iso镜像开机启动</li>\n<li>进行分区的修改</li>\n</ol>\n<h2 id=\"LVM扩容\"><a href=\"#LVM扩容\" class=\"headerlink\" title=\"LVM扩容\"></a>LVM扩容</h2><p>如果你没有使用逻辑卷就可以跳过这节。如果使用逻辑卷也可以通过添加新磁盘的形式对文件系统进行扩容，这种方式更加简单方便。</p>\n<h3 id=\"创建PE、VG\"><a href=\"#创建PE、VG\" class=\"headerlink\" title=\"创建PE、VG\"></a>创建PE、VG</h3><h3 id=\"扩展LV\"><a href=\"#扩展LV\" class=\"headerlink\" title=\"扩展LV\"></a>扩展LV</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vgextend VolGroup /dev/sda4       # 通过新卷的方式扩展到卷组</span><br><span class=\"line\">lvresize -l +122 /dev/centos/root      # 直接扩容</span><br></pre></td></tr></table></figure>\n<h3 id=\"刷新逻辑分区容量\"><a href=\"#刷新逻辑分区容量\" class=\"headerlink\" title=\"刷新逻辑分区容量\"></a>刷新逻辑分区容量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xfs_growfs /devices/centos/root    # resize2fs是不能成功的</span><br></pre></td></tr></table></figure>"},{"title":"Dockerfile中的CMD与ENTRYPOINT","date":"2019-10-29T15:49:07.000Z","_content":"\n<https://www.cnblogs.com/sparkdev/p/8461576.html>\n\n","source":"_posts/Dockerfile中的CMD与ENTRYPOINT.md","raw":"---\ntitle: Dockerfile中的CMD与ENTRYPOINT\ndate: 2019-10-29 23:49:07\ntags:\n- docker\n---\n\n<https://www.cnblogs.com/sparkdev/p/8461576.html>\n\n","slug":"Dockerfile中的CMD与ENTRYPOINT","published":1,"updated":"2019-10-29T15:50:04.034Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbljf00044tjez88s3onl","content":"<p><a href=\"https://www.cnblogs.com/sparkdev/p/8461576.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/sparkdev/p/8461576.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.cnblogs.com/sparkdev/p/8461576.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/sparkdev/p/8461576.html</a></p>\n"},{"title":"babel配置","date":"2019-10-18T03:21:01.000Z","_content":"\n# Babel6\n\nBabel6 现在使用的越来越少了，但是还是做一个笔记，现在基本都使用`babel-preset-env`，不需要写`babel-preset-esxxxx`了，但是`babel-preset-stage-x`还是要自己去加的。\n\n## 安装\n\n```bash\nnpm install -D babel-cli babel-preset-env\n```\n\n## 配置文件\n\nBabel6的配置文件是`.babelrc`\n\n```json\n{\n    //https://juejin.im/post/5a79adeef265da4e93116430\n}\n```\n\n# Babel7\n\nBabel7 相对于babel6有很大的变化，相关的模块的名字有很大的变化，官方舍弃了`babel-preset-esxxxx`和`babel-preset-stage-x`，后者的原因是提案一直在变化。\n\n## 安装\n\n```bash\nnpm install -D @babel/cli @babel/react @babel/plugin-transform-runtime @babel/env\n```\n\n## 配置文件\n\nBabel7有两种配置文件，一个是`.babelrc`，是局部的，另外一个是`babel.config.js`是全局的，具体的可以看下官网。7版本的配置文件解析也变得更加严格。\n\n### ","source":"_posts/babel配置.md","raw":"---\ntitle: babel配置\ndate: 2019-10-18 11:21:01\ntags:\n- babel\n- js\n---\n\n# Babel6\n\nBabel6 现在使用的越来越少了，但是还是做一个笔记，现在基本都使用`babel-preset-env`，不需要写`babel-preset-esxxxx`了，但是`babel-preset-stage-x`还是要自己去加的。\n\n## 安装\n\n```bash\nnpm install -D babel-cli babel-preset-env\n```\n\n## 配置文件\n\nBabel6的配置文件是`.babelrc`\n\n```json\n{\n    //https://juejin.im/post/5a79adeef265da4e93116430\n}\n```\n\n# Babel7\n\nBabel7 相对于babel6有很大的变化，相关的模块的名字有很大的变化，官方舍弃了`babel-preset-esxxxx`和`babel-preset-stage-x`，后者的原因是提案一直在变化。\n\n## 安装\n\n```bash\nnpm install -D @babel/cli @babel/react @babel/plugin-transform-runtime @babel/env\n```\n\n## 配置文件\n\nBabel7有两种配置文件，一个是`.babelrc`，是局部的，另外一个是`babel.config.js`是全局的，具体的可以看下官网。7版本的配置文件解析也变得更加严格。\n\n### ","slug":"babel配置","published":1,"updated":"2020-08-27T15:25:48.707Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbljg00054tje837dz628","content":"<h1 id=\"Babel6\"><a href=\"#Babel6\" class=\"headerlink\" title=\"Babel6\"></a>Babel6</h1><p>Babel6 现在使用的越来越少了，但是还是做一个笔记，现在基本都使用<code>babel-preset-env</code>，不需要写<code>babel-preset-esxxxx</code>了，但是<code>babel-preset-stage-x</code>还是要自己去加的。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D babel-cli babel-preset-env</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>Babel6的配置文件是<code>.babelrc</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    //https://juejin.im/post/5a79adeef265da4e93116430</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Babel7\"><a href=\"#Babel7\" class=\"headerlink\" title=\"Babel7\"></a>Babel7</h1><p>Babel7 相对于babel6有很大的变化，相关的模块的名字有很大的变化，官方舍弃了<code>babel-preset-esxxxx</code>和<code>babel-preset-stage-x</code>，后者的原因是提案一直在变化。</p>\n<h2 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D @babel/cli @babel/react @babel/plugin-transform-runtime @babel/env</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置文件-1\"><a href=\"#配置文件-1\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>Babel7有两种配置文件，一个是<code>.babelrc</code>，是局部的，另外一个是<code>babel.config.js</code>是全局的，具体的可以看下官网。7版本的配置文件解析也变得更加严格。</p>\n<p>### </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Babel6\"><a href=\"#Babel6\" class=\"headerlink\" title=\"Babel6\"></a>Babel6</h1><p>Babel6 现在使用的越来越少了，但是还是做一个笔记，现在基本都使用<code>babel-preset-env</code>，不需要写<code>babel-preset-esxxxx</code>了，但是<code>babel-preset-stage-x</code>还是要自己去加的。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D babel-cli babel-preset-env</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>Babel6的配置文件是<code>.babelrc</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    //https://juejin.im/post/5a79adeef265da4e93116430</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Babel7\"><a href=\"#Babel7\" class=\"headerlink\" title=\"Babel7\"></a>Babel7</h1><p>Babel7 相对于babel6有很大的变化，相关的模块的名字有很大的变化，官方舍弃了<code>babel-preset-esxxxx</code>和<code>babel-preset-stage-x</code>，后者的原因是提案一直在变化。</p>\n<h2 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D @babel/cli @babel/react @babel/plugin-transform-runtime @babel/env</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置文件-1\"><a href=\"#配置文件-1\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>Babel7有两种配置文件，一个是<code>.babelrc</code>，是局部的，另外一个是<code>babel.config.js</code>是全局的，具体的可以看下官网。7版本的配置文件解析也变得更加严格。</p>\n<p>### </p>\n"},{"title":"css动画","date":"2018-12-04T13:36:49.000Z","_content":"\n# transition\n\n1. transition-duration\n2. transition-property\n3. transition-delay\n4. transition-timing-function\n\n# animation\n\n1. @keyframes\n\n2. animation\n\n   1. animation-name\n   2. animation-duration\n   3. animation-timing-function\n   4. animation-delay\n   5. animation-iteration-count\n   6. animation-fill-mode\n   7. animation-direction\n   8. animation-play-state(这个要写在最下面，不然不会生效)\n\n\n# transform\n\n1. none\n2. translate(x,y)/translate3d(x,y,z)\n3. translateX(x)/translateY(y)/translateZ(z)\n4. materix/materix3d\n5. scale/scale3d\n6. scaleX/scaleY/scaleZ\n7. rotate/rotate3d\n8. rotateX/rotateY/rotateZ\n9. skew/skewX/skewY\n10. perspective","source":"_posts/css动画.md","raw":"---\ntitle: css动画\ndate: 2018-12-04 21:36:49\ntags:\n- css\n---\n\n# transition\n\n1. transition-duration\n2. transition-property\n3. transition-delay\n4. transition-timing-function\n\n# animation\n\n1. @keyframes\n\n2. animation\n\n   1. animation-name\n   2. animation-duration\n   3. animation-timing-function\n   4. animation-delay\n   5. animation-iteration-count\n   6. animation-fill-mode\n   7. animation-direction\n   8. animation-play-state(这个要写在最下面，不然不会生效)\n\n\n# transform\n\n1. none\n2. translate(x,y)/translate3d(x,y,z)\n3. translateX(x)/translateY(y)/translateZ(z)\n4. materix/materix3d\n5. scale/scale3d\n6. scaleX/scaleY/scaleZ\n7. rotate/rotate3d\n8. rotateX/rotateY/rotateZ\n9. skew/skewX/skewY\n10. perspective","slug":"css动画","published":1,"updated":"2019-07-22T08:16:14.564Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbljj00084tjeyiwpljxc","content":"<h1 id=\"transition\"><a href=\"#transition\" class=\"headerlink\" title=\"transition\"></a>transition</h1><ol>\n<li>transition-duration</li>\n<li>transition-property</li>\n<li>transition-delay</li>\n<li>transition-timing-function</li>\n</ol>\n<h1 id=\"animation\"><a href=\"#animation\" class=\"headerlink\" title=\"animation\"></a>animation</h1><ol>\n<li><p>@keyframes</p>\n</li>\n<li><p>animation</p>\n<ol>\n<li>animation-name</li>\n<li>animation-duration</li>\n<li>animation-timing-function</li>\n<li>animation-delay</li>\n<li>animation-iteration-count</li>\n<li>animation-fill-mode</li>\n<li>animation-direction</li>\n<li>animation-play-state(这个要写在最下面，不然不会生效)</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"transform\"><a href=\"#transform\" class=\"headerlink\" title=\"transform\"></a>transform</h1><ol>\n<li>none</li>\n<li>translate(x,y)/translate3d(x,y,z)</li>\n<li>translateX(x)/translateY(y)/translateZ(z)</li>\n<li>materix/materix3d</li>\n<li>scale/scale3d</li>\n<li>scaleX/scaleY/scaleZ</li>\n<li>rotate/rotate3d</li>\n<li>rotateX/rotateY/rotateZ</li>\n<li>skew/skewX/skewY</li>\n<li>perspective</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"transition\"><a href=\"#transition\" class=\"headerlink\" title=\"transition\"></a>transition</h1><ol>\n<li>transition-duration</li>\n<li>transition-property</li>\n<li>transition-delay</li>\n<li>transition-timing-function</li>\n</ol>\n<h1 id=\"animation\"><a href=\"#animation\" class=\"headerlink\" title=\"animation\"></a>animation</h1><ol>\n<li><p>@keyframes</p>\n</li>\n<li><p>animation</p>\n<ol>\n<li>animation-name</li>\n<li>animation-duration</li>\n<li>animation-timing-function</li>\n<li>animation-delay</li>\n<li>animation-iteration-count</li>\n<li>animation-fill-mode</li>\n<li>animation-direction</li>\n<li>animation-play-state(这个要写在最下面，不然不会生效)</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"transform\"><a href=\"#transform\" class=\"headerlink\" title=\"transform\"></a>transform</h1><ol>\n<li>none</li>\n<li>translate(x,y)/translate3d(x,y,z)</li>\n<li>translateX(x)/translateY(y)/translateZ(z)</li>\n<li>materix/materix3d</li>\n<li>scale/scale3d</li>\n<li>scaleX/scaleY/scaleZ</li>\n<li>rotate/rotate3d</li>\n<li>rotateX/rotateY/rotateZ</li>\n<li>skew/skewX/skewY</li>\n<li>perspective</li>\n</ol>\n"},{"title":"git基本操作","date":"2019-04-09T05:59:25.000Z","_content":"\n# 简介\n\n在实际开发中，会使用git作为版本控制工具来完成团队协作。因此，对基本的git操作指令进行总结是十分有必要的，本文对一些术语或者理论基础，不重新码字，可以[参考廖雪峰老师的博文](https://link.juejin.im?target=https%3A%2F%2Fwww.liaoxuefeng.com%2Fwiki%2F0013739516305929606dd18361248578c67b8067c8c017b000)，本文只对命令做归纳总结。\n\ngit的通用操作流程如下图（来源于网络）\n\n\n\n![git操作通用流程](https://user-gold-cdn.xitu.io/2018/4/25/162fcc0987bf1c0a)\n\n\n\n主要涉及到四个关键点：\n\n1. 工作区：本地电脑存放项目文件的地方，比如learnGitProject文件夹；\n2. 暂存区（Index/Stage）：在使用git管理项目文件的时候，其本地的项目文件会多出一个.git的文件夹，将这个.git文件夹称之为版本库。其中.git文件夹中包含了两个部分，一个是暂存区（Index或者Stage）,顾名思义就是暂时存放文件的地方，通常使用add命令将工作区的文件添加到暂存区里；\n3. 本地仓库：.git文件夹里还包括git自动创建的master分支，并且将HEAD指针指向master分支。使用commit命令可以将暂存区中的文件添加到本地仓库中；\n4. 远程仓库：不是在本地仓库中，项目代码在远程git服务器上，比如项目放在github上，就是一个远程仓库，通常使用clone命令将远程仓库拷贝到本地仓库中，开发后推送到远程仓库中即可；\n\n更细节的来看：\n\n\n\n![](http://wumu.sciento.cn/img/162fcc0e7e711dc7.png)\n\n\n\n日常开发时代码实际上放置在工作区中，也就是本地的XXX.java这些文件，通过add等这些命令将代码文教提交给暂存区（Index/Stage），也就意味着代码全权交给了git进行管理，之后通过commit等命令将暂存区提交给master分支上，也就是意味打了一个版本，也可以说代码提交到了本地仓库中。另外，团队协作过程中自然而然还涉及到与远程仓库的交互。\n\n因此，经过这样的分析，git命令可以分为这样的逻辑进行理解和记忆：\n\n1. git管理配置的命令；\n\n   **几个核心存储区的交互命令：**\n\n2. 工作区与暂存区的交互；\n\n3. 暂存区与本地仓库（分支）上的交互；\n\n4. 本地仓库与远程仓库的交互。\n\n# 安装\n\n[git安装](https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git)\n\nhttps://git-scm.com/\n\n# 配置\n\n```bash\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"email@example.com\"\n\n$ git config --global core.editor emacs\n$ git config --list\n$ git config user.name\n```\n\n# 快速开始\n\n```bash\n$ git init  # 初始化工程\n$ git add * # 将文件添加到暂存区\n$ git commit -m  # 提交\n$ git clone https://github.com/libgit2/libgit2\n```\n\n# 常用命令\n\n## add\n\n1. git add -A   保存所有的修改\n\n2. git add .     保存新的添加和修改，但是不包括删除\n\n3. git add -u   保存修改和删除，但是不包括新建文件。\n\n## commit\n\n1. git commit -m\n2. git commit -ma   // -a是添加全部修改\n3. git commit --amend\n\n## checkout\n\n1. git checkout — //使用暂缓区替换工作区\n2. git checkout  切换分支\n3. git checkout head — //直接使用本地参考的文件覆盖工作区文件\n\n## rm\n\n1. git rm  // 删除工作区，并且提交\n2. git rm —cached  // 只删除暂存区\n3. git rm -f   // 暂存区和工作区都删除\n\n# reset\n\n**谨慎使用！！！！！**\n\n- --soft – 缓存区和工作目录都不会被改变\n- --mixed – 默认选项。缓存区和你指定的提交同步，但工作目录不受影响\n- --hard – 缓存区和工作目录都同步到你指定的提交\n\n## revert\n\n前提是已经提交，缺点：一次回滚过个记录会出现冲突。","source":"_posts/git基本操作.md","raw":"---\ntitle: git基本操作\ndate: 2019-04-09 13:59:25\ntags:\n- git\n---\n\n# 简介\n\n在实际开发中，会使用git作为版本控制工具来完成团队协作。因此，对基本的git操作指令进行总结是十分有必要的，本文对一些术语或者理论基础，不重新码字，可以[参考廖雪峰老师的博文](https://link.juejin.im?target=https%3A%2F%2Fwww.liaoxuefeng.com%2Fwiki%2F0013739516305929606dd18361248578c67b8067c8c017b000)，本文只对命令做归纳总结。\n\ngit的通用操作流程如下图（来源于网络）\n\n\n\n![git操作通用流程](https://user-gold-cdn.xitu.io/2018/4/25/162fcc0987bf1c0a)\n\n\n\n主要涉及到四个关键点：\n\n1. 工作区：本地电脑存放项目文件的地方，比如learnGitProject文件夹；\n2. 暂存区（Index/Stage）：在使用git管理项目文件的时候，其本地的项目文件会多出一个.git的文件夹，将这个.git文件夹称之为版本库。其中.git文件夹中包含了两个部分，一个是暂存区（Index或者Stage）,顾名思义就是暂时存放文件的地方，通常使用add命令将工作区的文件添加到暂存区里；\n3. 本地仓库：.git文件夹里还包括git自动创建的master分支，并且将HEAD指针指向master分支。使用commit命令可以将暂存区中的文件添加到本地仓库中；\n4. 远程仓库：不是在本地仓库中，项目代码在远程git服务器上，比如项目放在github上，就是一个远程仓库，通常使用clone命令将远程仓库拷贝到本地仓库中，开发后推送到远程仓库中即可；\n\n更细节的来看：\n\n\n\n![](http://wumu.sciento.cn/img/162fcc0e7e711dc7.png)\n\n\n\n日常开发时代码实际上放置在工作区中，也就是本地的XXX.java这些文件，通过add等这些命令将代码文教提交给暂存区（Index/Stage），也就意味着代码全权交给了git进行管理，之后通过commit等命令将暂存区提交给master分支上，也就是意味打了一个版本，也可以说代码提交到了本地仓库中。另外，团队协作过程中自然而然还涉及到与远程仓库的交互。\n\n因此，经过这样的分析，git命令可以分为这样的逻辑进行理解和记忆：\n\n1. git管理配置的命令；\n\n   **几个核心存储区的交互命令：**\n\n2. 工作区与暂存区的交互；\n\n3. 暂存区与本地仓库（分支）上的交互；\n\n4. 本地仓库与远程仓库的交互。\n\n# 安装\n\n[git安装](https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git)\n\nhttps://git-scm.com/\n\n# 配置\n\n```bash\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"email@example.com\"\n\n$ git config --global core.editor emacs\n$ git config --list\n$ git config user.name\n```\n\n# 快速开始\n\n```bash\n$ git init  # 初始化工程\n$ git add * # 将文件添加到暂存区\n$ git commit -m  # 提交\n$ git clone https://github.com/libgit2/libgit2\n```\n\n# 常用命令\n\n## add\n\n1. git add -A   保存所有的修改\n\n2. git add .     保存新的添加和修改，但是不包括删除\n\n3. git add -u   保存修改和删除，但是不包括新建文件。\n\n## commit\n\n1. git commit -m\n2. git commit -ma   // -a是添加全部修改\n3. git commit --amend\n\n## checkout\n\n1. git checkout — //使用暂缓区替换工作区\n2. git checkout  切换分支\n3. git checkout head — //直接使用本地参考的文件覆盖工作区文件\n\n## rm\n\n1. git rm  // 删除工作区，并且提交\n2. git rm —cached  // 只删除暂存区\n3. git rm -f   // 暂存区和工作区都删除\n\n# reset\n\n**谨慎使用！！！！！**\n\n- --soft – 缓存区和工作目录都不会被改变\n- --mixed – 默认选项。缓存区和你指定的提交同步，但工作目录不受影响\n- --hard – 缓存区和工作目录都同步到你指定的提交\n\n## revert\n\n前提是已经提交，缺点：一次回滚过个记录会出现冲突。","slug":"git基本操作","published":1,"updated":"2019-07-22T08:16:14.590Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbljk00094tjeuzhno6un","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>在实际开发中，会使用git作为版本控制工具来完成团队协作。因此，对基本的git操作指令进行总结是十分有必要的，本文对一些术语或者理论基础，不重新码字，可以<a href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.liaoxuefeng.com%2Fwiki%2F0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">参考廖雪峰老师的博文</a>，本文只对命令做归纳总结。</p>\n<p>git的通用操作流程如下图（来源于网络）</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/25/162fcc0987bf1c0a\" alt=\"git操作通用流程\"></p>\n<p>主要涉及到四个关键点：</p>\n<ol>\n<li>工作区：本地电脑存放项目文件的地方，比如learnGitProject文件夹；</li>\n<li>暂存区（Index/Stage）：在使用git管理项目文件的时候，其本地的项目文件会多出一个.git的文件夹，将这个.git文件夹称之为版本库。其中.git文件夹中包含了两个部分，一个是暂存区（Index或者Stage）,顾名思义就是暂时存放文件的地方，通常使用add命令将工作区的文件添加到暂存区里；</li>\n<li>本地仓库：.git文件夹里还包括git自动创建的master分支，并且将HEAD指针指向master分支。使用commit命令可以将暂存区中的文件添加到本地仓库中；</li>\n<li>远程仓库：不是在本地仓库中，项目代码在远程git服务器上，比如项目放在github上，就是一个远程仓库，通常使用clone命令将远程仓库拷贝到本地仓库中，开发后推送到远程仓库中即可；</li>\n</ol>\n<p>更细节的来看：</p>\n<p><img src=\"http://wumu.sciento.cn/img/162fcc0e7e711dc7.png\" alt=\"\"></p>\n<p>日常开发时代码实际上放置在工作区中，也就是本地的XXX.java这些文件，通过add等这些命令将代码文教提交给暂存区（Index/Stage），也就意味着代码全权交给了git进行管理，之后通过commit等命令将暂存区提交给master分支上，也就是意味打了一个版本，也可以说代码提交到了本地仓库中。另外，团队协作过程中自然而然还涉及到与远程仓库的交互。</p>\n<p>因此，经过这样的分析，git命令可以分为这样的逻辑进行理解和记忆：</p>\n<ol>\n<li><p>git管理配置的命令；</p>\n<p><strong>几个核心存储区的交互命令：</strong></p>\n</li>\n<li><p>工作区与暂存区的交互；</p>\n</li>\n<li><p>暂存区与本地仓库（分支）上的交互；</p>\n</li>\n<li><p>本地仓库与远程仓库的交互。</p>\n</li>\n</ol>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p><a href=\"https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git\" target=\"_blank\" rel=\"noopener\">git安装</a></p>\n<p><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/</a></p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"Your Name\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"email@example.com\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ git config --global core.editor emacs</span><br><span class=\"line\">$ git config --list</span><br><span class=\"line\">$ git config user.name</span><br></pre></td></tr></table></figure>\n<h1 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init  <span class=\"comment\"># 初始化工程</span></span><br><span class=\"line\">$ git add * <span class=\"comment\"># 将文件添加到暂存区</span></span><br><span class=\"line\">$ git commit -m  <span class=\"comment\"># 提交</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/libgit2/libgit2</span><br></pre></td></tr></table></figure>\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><h2 id=\"add\"><a href=\"#add\" class=\"headerlink\" title=\"add\"></a>add</h2><ol>\n<li><p>git add -A   保存所有的修改</p>\n</li>\n<li><p>git add .     保存新的添加和修改，但是不包括删除</p>\n</li>\n<li><p>git add -u   保存修改和删除，但是不包括新建文件。</p>\n</li>\n</ol>\n<h2 id=\"commit\"><a href=\"#commit\" class=\"headerlink\" title=\"commit\"></a>commit</h2><ol>\n<li>git commit -m</li>\n<li>git commit -ma   // -a是添加全部修改</li>\n<li>git commit –amend</li>\n</ol>\n<h2 id=\"checkout\"><a href=\"#checkout\" class=\"headerlink\" title=\"checkout\"></a>checkout</h2><ol>\n<li>git checkout — //使用暂缓区替换工作区</li>\n<li>git checkout  切换分支</li>\n<li>git checkout head — //直接使用本地参考的文件覆盖工作区文件</li>\n</ol>\n<h2 id=\"rm\"><a href=\"#rm\" class=\"headerlink\" title=\"rm\"></a>rm</h2><ol>\n<li>git rm  // 删除工作区，并且提交</li>\n<li>git rm —cached  // 只删除暂存区</li>\n<li>git rm -f   // 暂存区和工作区都删除</li>\n</ol>\n<h1 id=\"reset\"><a href=\"#reset\" class=\"headerlink\" title=\"reset\"></a>reset</h1><p><strong>谨慎使用！！！！！</strong></p>\n<ul>\n<li>–soft – 缓存区和工作目录都不会被改变</li>\n<li>–mixed – 默认选项。缓存区和你指定的提交同步，但工作目录不受影响</li>\n<li>–hard – 缓存区和工作目录都同步到你指定的提交</li>\n</ul>\n<h2 id=\"revert\"><a href=\"#revert\" class=\"headerlink\" title=\"revert\"></a>revert</h2><p>前提是已经提交，缺点：一次回滚过个记录会出现冲突。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>在实际开发中，会使用git作为版本控制工具来完成团队协作。因此，对基本的git操作指令进行总结是十分有必要的，本文对一些术语或者理论基础，不重新码字，可以<a href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.liaoxuefeng.com%2Fwiki%2F0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">参考廖雪峰老师的博文</a>，本文只对命令做归纳总结。</p>\n<p>git的通用操作流程如下图（来源于网络）</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/4/25/162fcc0987bf1c0a\" alt=\"git操作通用流程\"></p>\n<p>主要涉及到四个关键点：</p>\n<ol>\n<li>工作区：本地电脑存放项目文件的地方，比如learnGitProject文件夹；</li>\n<li>暂存区（Index/Stage）：在使用git管理项目文件的时候，其本地的项目文件会多出一个.git的文件夹，将这个.git文件夹称之为版本库。其中.git文件夹中包含了两个部分，一个是暂存区（Index或者Stage）,顾名思义就是暂时存放文件的地方，通常使用add命令将工作区的文件添加到暂存区里；</li>\n<li>本地仓库：.git文件夹里还包括git自动创建的master分支，并且将HEAD指针指向master分支。使用commit命令可以将暂存区中的文件添加到本地仓库中；</li>\n<li>远程仓库：不是在本地仓库中，项目代码在远程git服务器上，比如项目放在github上，就是一个远程仓库，通常使用clone命令将远程仓库拷贝到本地仓库中，开发后推送到远程仓库中即可；</li>\n</ol>\n<p>更细节的来看：</p>\n<p><img src=\"http://wumu.sciento.cn/img/162fcc0e7e711dc7.png\" alt=\"\"></p>\n<p>日常开发时代码实际上放置在工作区中，也就是本地的XXX.java这些文件，通过add等这些命令将代码文教提交给暂存区（Index/Stage），也就意味着代码全权交给了git进行管理，之后通过commit等命令将暂存区提交给master分支上，也就是意味打了一个版本，也可以说代码提交到了本地仓库中。另外，团队协作过程中自然而然还涉及到与远程仓库的交互。</p>\n<p>因此，经过这样的分析，git命令可以分为这样的逻辑进行理解和记忆：</p>\n<ol>\n<li><p>git管理配置的命令；</p>\n<p><strong>几个核心存储区的交互命令：</strong></p>\n</li>\n<li><p>工作区与暂存区的交互；</p>\n</li>\n<li><p>暂存区与本地仓库（分支）上的交互；</p>\n</li>\n<li><p>本地仓库与远程仓库的交互。</p>\n</li>\n</ol>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p><a href=\"https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git\" target=\"_blank\" rel=\"noopener\">git安装</a></p>\n<p><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/</a></p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name <span class=\"string\">\"Your Name\"</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">\"email@example.com\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ git config --global core.editor emacs</span><br><span class=\"line\">$ git config --list</span><br><span class=\"line\">$ git config user.name</span><br></pre></td></tr></table></figure>\n<h1 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init  <span class=\"comment\"># 初始化工程</span></span><br><span class=\"line\">$ git add * <span class=\"comment\"># 将文件添加到暂存区</span></span><br><span class=\"line\">$ git commit -m  <span class=\"comment\"># 提交</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/libgit2/libgit2</span><br></pre></td></tr></table></figure>\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><h2 id=\"add\"><a href=\"#add\" class=\"headerlink\" title=\"add\"></a>add</h2><ol>\n<li><p>git add -A   保存所有的修改</p>\n</li>\n<li><p>git add .     保存新的添加和修改，但是不包括删除</p>\n</li>\n<li><p>git add -u   保存修改和删除，但是不包括新建文件。</p>\n</li>\n</ol>\n<h2 id=\"commit\"><a href=\"#commit\" class=\"headerlink\" title=\"commit\"></a>commit</h2><ol>\n<li>git commit -m</li>\n<li>git commit -ma   // -a是添加全部修改</li>\n<li>git commit –amend</li>\n</ol>\n<h2 id=\"checkout\"><a href=\"#checkout\" class=\"headerlink\" title=\"checkout\"></a>checkout</h2><ol>\n<li>git checkout — //使用暂缓区替换工作区</li>\n<li>git checkout  切换分支</li>\n<li>git checkout head — //直接使用本地参考的文件覆盖工作区文件</li>\n</ol>\n<h2 id=\"rm\"><a href=\"#rm\" class=\"headerlink\" title=\"rm\"></a>rm</h2><ol>\n<li>git rm  // 删除工作区，并且提交</li>\n<li>git rm —cached  // 只删除暂存区</li>\n<li>git rm -f   // 暂存区和工作区都删除</li>\n</ol>\n<h1 id=\"reset\"><a href=\"#reset\" class=\"headerlink\" title=\"reset\"></a>reset</h1><p><strong>谨慎使用！！！！！</strong></p>\n<ul>\n<li>–soft – 缓存区和工作目录都不会被改变</li>\n<li>–mixed – 默认选项。缓存区和你指定的提交同步，但工作目录不受影响</li>\n<li>–hard – 缓存区和工作目录都同步到你指定的提交</li>\n</ul>\n<h2 id=\"revert\"><a href=\"#revert\" class=\"headerlink\" title=\"revert\"></a>revert</h2><p>前提是已经提交，缺点：一次回滚过个记录会出现冲突。</p>\n"},{"title":"cordova打包vue","date":"2019-01-02T09:12:09.000Z","_content":"\n\n\n\n\n> https://segmentfault.com/a/1190000013159076\n\n","source":"_posts/cordova打包vue.md","raw":"---\ntitle: cordova打包vue\ndate: 2019-01-02 17:12:09\ntags:\n- vue\n---\n\n\n\n\n\n> https://segmentfault.com/a/1190000013159076\n\n","slug":"cordova打包vue","published":1,"updated":"2019-07-22T08:16:14.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbljm000c4tjeucqxejrc","content":"<blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000013159076\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000013159076</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000013159076\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000013159076</a></p>\n</blockquote>\n"},{"title":"go基本语法","date":"2019-04-10T02:29:55.000Z","_content":"\n# 接口\n\n1. duck typing了解\n\n在[程序设计](https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1)中，**鸭子类型**（英语：**duck typing**）是[动态类型](https://zh.wikipedia.org/wiki/%E9%A1%9E%E5%9E%8B%E7%B3%BB%E7%B5%B1)的一种风格。在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由“当前[方法](https://zh.wikipedia.org/wiki/%E6%96%B9%E6%B3%95_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8))和属性的集合”决定。\n\n# flag\n\n# Sync\n\n### 1. `WaitGroup`\n\n```\nAdd()\nDone()\nWait()\n```\n\n### 2. Context\n\n```\n\n```\n\n## `Regexp`\n\n> https://www.cnblogs.com/golove/p/3269099.html\n\n```\n// MatchString\nmatched, err := regexp.MatchString(\"foo.*\", \"seafood\")\nfmt.Println(matched, err)\nmatched, err = regexp.MatchString(\"bar.*\", \"seafood\")\nfmt.Println(matched, err)\n// false error parsing regexp: missing closing ): `a(b`\nmatched, err = regexp.MatchString(\"a(b\", \"seafood\")\nfmt.Println(matched, err)\n// true <nil>\nmatched, err = regexp.MatchString(`a\\(b`, \"a(b\")\nfmt.Println(matched, err)\n// false error parsing regexp: missing closing ): `a(b`\nmatched, err = regexp.MatchString(`a(b`, \"a(b\")\nfmt.Println(matched, err)\n// true <nil>\nmatched, err = regexp.MatchString(\"a\\\\(b\", \"a(b\")\nfmt.Println(matched, err)\n\n\n// 将所有特殊字符进行转义\nfmt.Println(regexp.QuoteMeta(\"Escaping symbols like: .+*?()|[]{}^$\"))\n\n\n// ExpandString\ncontent := `\n\t# comment line\n\toption1: value1\n\toption2: value2\n\n\t# another comment line\n\toption3: value3\n`\n\n// Regex pattern captures \"key: value\" pair from the content.\npattern := regexp.MustCompile(`(?m)(?P<key>\\w+):\\s+(?P<value>\\w+)$`)\n\n// Template to convert \"key: value\" to \"key=value\" by\n// referencing the values captured by the regex pattern.\ntemplate := \"$key=$value\\n\"\n\nresult := []byte{}\n\n\t// For each match of the regex in the content.\nfor _, submatches := range pattern.FindAllStringSubmatchIndex(content, -1) {\n    // Apply the captured submatches to the template and append the output\n    // to the result.\n    result = pattern.ExpandString(result, template, content, submatches)\n}\nfmt.Println(string(result))\n\n\n// findAllString\nre := regexp.MustCompile(\"a.\")\nfmt.Println(re.FindAllString(\"paranormal\", -1))\nfmt.Println(re.FindAllString(\"paranormal\", 2))\nfmt.Println(re.FindAllString(\"graal\", -1))\nfmt.Println(re.FindAllString(\"none\", -1))\n\n\n// FindAllStringSubmatch\nre := regexp.MustCompile(\"a(x*)b\")\nfmt.Printf(\"%q\\n\", re.FindAllStringSubmatch(\"-ab-\", -1))\nfmt.Printf(\"%q\\n\", re.FindAllStringSubmatch(\"-axxb-\", -1))\nfmt.Printf(\"%q\\n\", re.FindAllStringSubmatch(\"-ab-axb-\", -1))\nfmt.Printf(\"%q\\n\", re.FindAllStringSubmatch(\"-axxb-ab-\", -1))\n\n// findStringSubmatch，只查找第一个\nre := regexp.MustCompile(\"a(x*)b(y|z)c\")\nfmt.Printf(\"%q\\n\", re.FindStringSubmatch(\"-axxxbyc-\"))\nfmt.Printf(\"%q\\n\", re.FindStringSubmatch(\"-abzc-\"))\n```","source":"_posts/go基本语法.md","raw":"---\ntitle: go基本语法\ndate: 2019-04-10 10:29:55\ntags:\n- go\n---\n\n# 接口\n\n1. duck typing了解\n\n在[程序设计](https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1)中，**鸭子类型**（英语：**duck typing**）是[动态类型](https://zh.wikipedia.org/wiki/%E9%A1%9E%E5%9E%8B%E7%B3%BB%E7%B5%B1)的一种风格。在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由“当前[方法](https://zh.wikipedia.org/wiki/%E6%96%B9%E6%B3%95_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8))和属性的集合”决定。\n\n# flag\n\n# Sync\n\n### 1. `WaitGroup`\n\n```\nAdd()\nDone()\nWait()\n```\n\n### 2. Context\n\n```\n\n```\n\n## `Regexp`\n\n> https://www.cnblogs.com/golove/p/3269099.html\n\n```\n// MatchString\nmatched, err := regexp.MatchString(\"foo.*\", \"seafood\")\nfmt.Println(matched, err)\nmatched, err = regexp.MatchString(\"bar.*\", \"seafood\")\nfmt.Println(matched, err)\n// false error parsing regexp: missing closing ): `a(b`\nmatched, err = regexp.MatchString(\"a(b\", \"seafood\")\nfmt.Println(matched, err)\n// true <nil>\nmatched, err = regexp.MatchString(`a\\(b`, \"a(b\")\nfmt.Println(matched, err)\n// false error parsing regexp: missing closing ): `a(b`\nmatched, err = regexp.MatchString(`a(b`, \"a(b\")\nfmt.Println(matched, err)\n// true <nil>\nmatched, err = regexp.MatchString(\"a\\\\(b\", \"a(b\")\nfmt.Println(matched, err)\n\n\n// 将所有特殊字符进行转义\nfmt.Println(regexp.QuoteMeta(\"Escaping symbols like: .+*?()|[]{}^$\"))\n\n\n// ExpandString\ncontent := `\n\t# comment line\n\toption1: value1\n\toption2: value2\n\n\t# another comment line\n\toption3: value3\n`\n\n// Regex pattern captures \"key: value\" pair from the content.\npattern := regexp.MustCompile(`(?m)(?P<key>\\w+):\\s+(?P<value>\\w+)$`)\n\n// Template to convert \"key: value\" to \"key=value\" by\n// referencing the values captured by the regex pattern.\ntemplate := \"$key=$value\\n\"\n\nresult := []byte{}\n\n\t// For each match of the regex in the content.\nfor _, submatches := range pattern.FindAllStringSubmatchIndex(content, -1) {\n    // Apply the captured submatches to the template and append the output\n    // to the result.\n    result = pattern.ExpandString(result, template, content, submatches)\n}\nfmt.Println(string(result))\n\n\n// findAllString\nre := regexp.MustCompile(\"a.\")\nfmt.Println(re.FindAllString(\"paranormal\", -1))\nfmt.Println(re.FindAllString(\"paranormal\", 2))\nfmt.Println(re.FindAllString(\"graal\", -1))\nfmt.Println(re.FindAllString(\"none\", -1))\n\n\n// FindAllStringSubmatch\nre := regexp.MustCompile(\"a(x*)b\")\nfmt.Printf(\"%q\\n\", re.FindAllStringSubmatch(\"-ab-\", -1))\nfmt.Printf(\"%q\\n\", re.FindAllStringSubmatch(\"-axxb-\", -1))\nfmt.Printf(\"%q\\n\", re.FindAllStringSubmatch(\"-ab-axb-\", -1))\nfmt.Printf(\"%q\\n\", re.FindAllStringSubmatch(\"-axxb-ab-\", -1))\n\n// findStringSubmatch，只查找第一个\nre := regexp.MustCompile(\"a(x*)b(y|z)c\")\nfmt.Printf(\"%q\\n\", re.FindStringSubmatch(\"-axxxbyc-\"))\nfmt.Printf(\"%q\\n\", re.FindStringSubmatch(\"-abzc-\"))\n```","slug":"go基本语法","published":1,"updated":"2019-07-22T08:16:14.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbljn000d4tjeqnmiu28v","content":"<h1 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h1><ol>\n<li>duck typing了解</li>\n</ol>\n<p>在<a href=\"https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\" target=\"_blank\" rel=\"noopener\">程序设计</a>中，<strong>鸭子类型</strong>（英语：<strong>duck typing</strong>）是<a href=\"https://zh.wikipedia.org/wiki/%E9%A1%9E%E5%9E%8B%E7%B3%BB%E7%B5%B1\" target=\"_blank\" rel=\"noopener\">动态类型</a>的一种风格。在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由“当前<a href=\"https://zh.wikipedia.org/wiki/%E6%96%B9%E6%B3%95_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8\" target=\"_blank\" rel=\"noopener\">方法</a>)和属性的集合”决定。</p>\n<h1 id=\"flag\"><a href=\"#flag\" class=\"headerlink\" title=\"flag\"></a>flag</h1><h1 id=\"Sync\"><a href=\"#Sync\" class=\"headerlink\" title=\"Sync\"></a>Sync</h1><h3 id=\"1-WaitGroup\"><a href=\"#1-WaitGroup\" class=\"headerlink\" title=\"1. WaitGroup\"></a>1. <code>WaitGroup</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Add()</span><br><span class=\"line\">Done()</span><br><span class=\"line\">Wait()</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-Context\"><a href=\"#2-Context\" class=\"headerlink\" title=\"2. Context\"></a>2. Context</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"Regexp\"><a href=\"#Regexp\" class=\"headerlink\" title=\"Regexp\"></a><code>Regexp</code></h2><blockquote>\n<p><a href=\"https://www.cnblogs.com/golove/p/3269099.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/golove/p/3269099.html</a></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// MatchString</span><br><span class=\"line\">matched, err := regexp.MatchString(&quot;foo.*&quot;, &quot;seafood&quot;)</span><br><span class=\"line\">fmt.Println(matched, err)</span><br><span class=\"line\">matched, err = regexp.MatchString(&quot;bar.*&quot;, &quot;seafood&quot;)</span><br><span class=\"line\">fmt.Println(matched, err)</span><br><span class=\"line\">// false error parsing regexp: missing closing ): `a(b`</span><br><span class=\"line\">matched, err = regexp.MatchString(&quot;a(b&quot;, &quot;seafood&quot;)</span><br><span class=\"line\">fmt.Println(matched, err)</span><br><span class=\"line\">// true &lt;nil&gt;</span><br><span class=\"line\">matched, err = regexp.MatchString(`a\\(b`, &quot;a(b&quot;)</span><br><span class=\"line\">fmt.Println(matched, err)</span><br><span class=\"line\">// false error parsing regexp: missing closing ): `a(b`</span><br><span class=\"line\">matched, err = regexp.MatchString(`a(b`, &quot;a(b&quot;)</span><br><span class=\"line\">fmt.Println(matched, err)</span><br><span class=\"line\">// true &lt;nil&gt;</span><br><span class=\"line\">matched, err = regexp.MatchString(&quot;a\\\\(b&quot;, &quot;a(b&quot;)</span><br><span class=\"line\">fmt.Println(matched, err)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 将所有特殊字符进行转义</span><br><span class=\"line\">fmt.Println(regexp.QuoteMeta(&quot;Escaping symbols like: .+*?()|[]&#123;&#125;^$&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// ExpandString</span><br><span class=\"line\">content := `</span><br><span class=\"line\">\t# comment line</span><br><span class=\"line\">\toption1: value1</span><br><span class=\"line\">\toption2: value2</span><br><span class=\"line\"></span><br><span class=\"line\">\t# another comment line</span><br><span class=\"line\">\toption3: value3</span><br><span class=\"line\">`</span><br><span class=\"line\"></span><br><span class=\"line\">// Regex pattern captures &quot;key: value&quot; pair from the content.</span><br><span class=\"line\">pattern := regexp.MustCompile(`(?m)(?P&lt;key&gt;\\w+):\\s+(?P&lt;value&gt;\\w+)$`)</span><br><span class=\"line\"></span><br><span class=\"line\">// Template to convert &quot;key: value&quot; to &quot;key=value&quot; by</span><br><span class=\"line\">// referencing the values captured by the regex pattern.</span><br><span class=\"line\">template := &quot;$key=$value\\n&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">result := []byte&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// For each match of the regex in the content.</span><br><span class=\"line\">for _, submatches := range pattern.FindAllStringSubmatchIndex(content, -1) &#123;</span><br><span class=\"line\">    // Apply the captured submatches to the template and append the output</span><br><span class=\"line\">    // to the result.</span><br><span class=\"line\">    result = pattern.ExpandString(result, template, content, submatches)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(string(result))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// findAllString</span><br><span class=\"line\">re := regexp.MustCompile(&quot;a.&quot;)</span><br><span class=\"line\">fmt.Println(re.FindAllString(&quot;paranormal&quot;, -1))</span><br><span class=\"line\">fmt.Println(re.FindAllString(&quot;paranormal&quot;, 2))</span><br><span class=\"line\">fmt.Println(re.FindAllString(&quot;graal&quot;, -1))</span><br><span class=\"line\">fmt.Println(re.FindAllString(&quot;none&quot;, -1))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// FindAllStringSubmatch</span><br><span class=\"line\">re := regexp.MustCompile(&quot;a(x*)b&quot;)</span><br><span class=\"line\">fmt.Printf(&quot;%q\\n&quot;, re.FindAllStringSubmatch(&quot;-ab-&quot;, -1))</span><br><span class=\"line\">fmt.Printf(&quot;%q\\n&quot;, re.FindAllStringSubmatch(&quot;-axxb-&quot;, -1))</span><br><span class=\"line\">fmt.Printf(&quot;%q\\n&quot;, re.FindAllStringSubmatch(&quot;-ab-axb-&quot;, -1))</span><br><span class=\"line\">fmt.Printf(&quot;%q\\n&quot;, re.FindAllStringSubmatch(&quot;-axxb-ab-&quot;, -1))</span><br><span class=\"line\"></span><br><span class=\"line\">// findStringSubmatch，只查找第一个</span><br><span class=\"line\">re := regexp.MustCompile(&quot;a(x*)b(y|z)c&quot;)</span><br><span class=\"line\">fmt.Printf(&quot;%q\\n&quot;, re.FindStringSubmatch(&quot;-axxxbyc-&quot;))</span><br><span class=\"line\">fmt.Printf(&quot;%q\\n&quot;, re.FindStringSubmatch(&quot;-abzc-&quot;))</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h1><ol>\n<li>duck typing了解</li>\n</ol>\n<p>在<a href=\"https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\" target=\"_blank\" rel=\"noopener\">程序设计</a>中，<strong>鸭子类型</strong>（英语：<strong>duck typing</strong>）是<a href=\"https://zh.wikipedia.org/wiki/%E9%A1%9E%E5%9E%8B%E7%B3%BB%E7%B5%B1\" target=\"_blank\" rel=\"noopener\">动态类型</a>的一种风格。在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由“当前<a href=\"https://zh.wikipedia.org/wiki/%E6%96%B9%E6%B3%95_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8\" target=\"_blank\" rel=\"noopener\">方法</a>)和属性的集合”决定。</p>\n<h1 id=\"flag\"><a href=\"#flag\" class=\"headerlink\" title=\"flag\"></a>flag</h1><h1 id=\"Sync\"><a href=\"#Sync\" class=\"headerlink\" title=\"Sync\"></a>Sync</h1><h3 id=\"1-WaitGroup\"><a href=\"#1-WaitGroup\" class=\"headerlink\" title=\"1. WaitGroup\"></a>1. <code>WaitGroup</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Add()</span><br><span class=\"line\">Done()</span><br><span class=\"line\">Wait()</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-Context\"><a href=\"#2-Context\" class=\"headerlink\" title=\"2. Context\"></a>2. Context</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"Regexp\"><a href=\"#Regexp\" class=\"headerlink\" title=\"Regexp\"></a><code>Regexp</code></h2><blockquote>\n<p><a href=\"https://www.cnblogs.com/golove/p/3269099.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/golove/p/3269099.html</a></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// MatchString</span><br><span class=\"line\">matched, err := regexp.MatchString(&quot;foo.*&quot;, &quot;seafood&quot;)</span><br><span class=\"line\">fmt.Println(matched, err)</span><br><span class=\"line\">matched, err = regexp.MatchString(&quot;bar.*&quot;, &quot;seafood&quot;)</span><br><span class=\"line\">fmt.Println(matched, err)</span><br><span class=\"line\">// false error parsing regexp: missing closing ): `a(b`</span><br><span class=\"line\">matched, err = regexp.MatchString(&quot;a(b&quot;, &quot;seafood&quot;)</span><br><span class=\"line\">fmt.Println(matched, err)</span><br><span class=\"line\">// true &lt;nil&gt;</span><br><span class=\"line\">matched, err = regexp.MatchString(`a\\(b`, &quot;a(b&quot;)</span><br><span class=\"line\">fmt.Println(matched, err)</span><br><span class=\"line\">// false error parsing regexp: missing closing ): `a(b`</span><br><span class=\"line\">matched, err = regexp.MatchString(`a(b`, &quot;a(b&quot;)</span><br><span class=\"line\">fmt.Println(matched, err)</span><br><span class=\"line\">// true &lt;nil&gt;</span><br><span class=\"line\">matched, err = regexp.MatchString(&quot;a\\\\(b&quot;, &quot;a(b&quot;)</span><br><span class=\"line\">fmt.Println(matched, err)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 将所有特殊字符进行转义</span><br><span class=\"line\">fmt.Println(regexp.QuoteMeta(&quot;Escaping symbols like: .+*?()|[]&#123;&#125;^$&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// ExpandString</span><br><span class=\"line\">content := `</span><br><span class=\"line\">\t# comment line</span><br><span class=\"line\">\toption1: value1</span><br><span class=\"line\">\toption2: value2</span><br><span class=\"line\"></span><br><span class=\"line\">\t# another comment line</span><br><span class=\"line\">\toption3: value3</span><br><span class=\"line\">`</span><br><span class=\"line\"></span><br><span class=\"line\">// Regex pattern captures &quot;key: value&quot; pair from the content.</span><br><span class=\"line\">pattern := regexp.MustCompile(`(?m)(?P&lt;key&gt;\\w+):\\s+(?P&lt;value&gt;\\w+)$`)</span><br><span class=\"line\"></span><br><span class=\"line\">// Template to convert &quot;key: value&quot; to &quot;key=value&quot; by</span><br><span class=\"line\">// referencing the values captured by the regex pattern.</span><br><span class=\"line\">template := &quot;$key=$value\\n&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">result := []byte&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// For each match of the regex in the content.</span><br><span class=\"line\">for _, submatches := range pattern.FindAllStringSubmatchIndex(content, -1) &#123;</span><br><span class=\"line\">    // Apply the captured submatches to the template and append the output</span><br><span class=\"line\">    // to the result.</span><br><span class=\"line\">    result = pattern.ExpandString(result, template, content, submatches)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(string(result))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// findAllString</span><br><span class=\"line\">re := regexp.MustCompile(&quot;a.&quot;)</span><br><span class=\"line\">fmt.Println(re.FindAllString(&quot;paranormal&quot;, -1))</span><br><span class=\"line\">fmt.Println(re.FindAllString(&quot;paranormal&quot;, 2))</span><br><span class=\"line\">fmt.Println(re.FindAllString(&quot;graal&quot;, -1))</span><br><span class=\"line\">fmt.Println(re.FindAllString(&quot;none&quot;, -1))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// FindAllStringSubmatch</span><br><span class=\"line\">re := regexp.MustCompile(&quot;a(x*)b&quot;)</span><br><span class=\"line\">fmt.Printf(&quot;%q\\n&quot;, re.FindAllStringSubmatch(&quot;-ab-&quot;, -1))</span><br><span class=\"line\">fmt.Printf(&quot;%q\\n&quot;, re.FindAllStringSubmatch(&quot;-axxb-&quot;, -1))</span><br><span class=\"line\">fmt.Printf(&quot;%q\\n&quot;, re.FindAllStringSubmatch(&quot;-ab-axb-&quot;, -1))</span><br><span class=\"line\">fmt.Printf(&quot;%q\\n&quot;, re.FindAllStringSubmatch(&quot;-axxb-ab-&quot;, -1))</span><br><span class=\"line\"></span><br><span class=\"line\">// findStringSubmatch，只查找第一个</span><br><span class=\"line\">re := regexp.MustCompile(&quot;a(x*)b(y|z)c&quot;)</span><br><span class=\"line\">fmt.Printf(&quot;%q\\n&quot;, re.FindStringSubmatch(&quot;-axxxbyc-&quot;))</span><br><span class=\"line\">fmt.Printf(&quot;%q\\n&quot;, re.FindStringSubmatch(&quot;-abzc-&quot;))</span><br></pre></td></tr></table></figure>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-07-22T08:16:14.662Z","updated":"2019-07-22T08:16:14.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbljo000f4tjeqa1jgfrg","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"layout":"python-import、reload","title":"__import__在python中的区别","date":"2019-06-01T07:49:16.000Z","_content":"\n### import \n\n作用：导入/引入一个python标准模块，其中包括.py文件、带有__init__.py文件的目录(自定义模块)。\n\nimport module_name[,module1,...]  \n\nfrom module import *|child[,child1,...]  \n\n注意：多次重复使用import语句时，不会重新加载被指定的模块，只是把对该模块的内存地址给引用到本地变量环境。\n\n实例：\n\npythontab.py  \n\n```python\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `os  ``print` `'in pythontab'``,``id``(os)`\n```\n\ntest.py  \n\n```\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `pythontab   ``#第一次会打印pythontab里面的语句  ``import` `os  ``#再次导入os后，其内存地址和pythontab里面的是一样的，因此这里只是对os的本地引用  ``print` `'in c'``,``id``(os)  ``import` `pythontab  ``#第二次不会打印pythontab里面的语句，因为没有重新加载`\n```\n\n### reload\n\n作用：对已经加载的模块进行重新加载，一般用于原模块有变化等特殊情况，reload前该模块必须已经import过。\n\nimport os\n\nreload(os)\n\n\n\n说明：\n\nreload会重新加载已加载的模块，但原来已经使用的实例还是会使用旧的模块，而新生产的实例会使用新的模块；reload后还是用原来的内存地址；不能支持from。。import。。格式的模块进行重新加载。\n\n实例：\n\npythontab.py  \n\n```python\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `os  ``print` `'in pythontab'``,``id``(os)`\n```\n\n\n\ntest.py  \n\n```python\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `pythontab   ``#第一次import会打印pythontab里面的语句  ``print` `id``(pythontab) ``#原来pythontab的内存地址  ``reload``(pythontab)  ``#第二次reload还会打印pythontab里面的语句，因为有重新加载  ``print` `id``(pythontab) ``#reload后pythontab的内存地址，和原来一样`\n```\n\n扩展：\n\n上面说了，在特殊情况的下才会使用reload函数；除了原来模块文件有修改外，还有哪些情况需要使用reload函数呢，这里举个例子。\n\n```python\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys   ``#引用sys模块进来，并不是进行sys的第一次加载  ``reload``(sys)  ``#重新加载sys  ``sys.setdefaultencoding(``'utf8'``)  ``##调用setdefaultencoding函数`\n```\n\n上面的代码是正确的，再测试下面的代码\n\n```python\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys     ``sys.setdefaultencoding(``'utf8'``)`\n```\n\n上面的测试会失败，那么为什么要在调用setdefaultencoding时必须要先reload一次sys模块呢？因为这里的import语句其实并不是sys的第一次导入语句，也就是说这里其实可能是第二、三次进行sys模块的import，这里只是一个对sys的引用，只能reload才能进行重新加载；那么为什么要重新加载，而直接引用过来则不能调用该函数呢？因为setdefaultencoding函数在被系统调用后被删除了，所以通过import引用进来时其实已经没有了，所以必须reload一次sys模块，这样setdefaultencoding才会为可用，才能在代码里修改解释器当前的字符编码。试试下面的代码，同样会报错：\n\n```python\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys    ``reload``(sys)   ``sys.setdefaultencoding(``'utf8'``)    ``del` `sys.setdefaultencoding   ``##删除原来的setdefaultencoding函数     ``sys.setdefaultencoding(``'gb2312'``)`\n```\n\n那么到底是谁在之前就导入sys并且调用了setdefaultencoding函数呢？答案就在python安装目录的Lib文件夹下，有一个叫site.py的文件【python2.6】，在里面可以找到main() --> setencoding()-->sys.setdefaultencoding(encoding),因为这个site.py每次启动python解释器时会自动加载，所以main函数每次都会被执行，setdefaultencoding函数一出来就已经被删除了。\n\n### __import__\n\n作用：\n\n同import语句同样的功能，但__import__是一个函数，并且只接收字符串作为参数，所以它的作用就可想而知了。其实import语句就是调用这个函数进行导入工作的，import sys <==>sys = __import__('sys')\n\n使用：\n\n__import__(module_name[, globals[, locals[, fromlist]]]) #可选参数默认为globals(),locals(),[]\n\n__import__('os')    \n\n__import__('os',globals(),locals(),['path','pip'])  #等价于from os import path, pip\n\n说明：\n\n通常在动态加载时可以使用到这个函数，比如你希望加载某个文件夹下的所用模块，但是其下的模块名称又会经常变化时，就可以使用这个函数动态加载所有模块了，最常见的场景就是插件功能的支持。\n\n扩展：\n\n既然可以通过字符串来动态导入模块，那么是否可以通过字符串动态重新加载模块吗？试试reload('os')直接报错，是不是没有其他方式呢?虽然不能直接reload但是可以先unimport一个模块，然后再__import__来重新加载模块。现在看看unimport操作如何实现，在Python解释里可以通过globals(),locals(),vars(),dir()等函数查看到当前环境下加载的模块及其位置，但是这些都只能看不能删除，所以无法unimport；不过除此之外还有一个地方是专门存放模块的，这就是sys.modules，通过sys.modules可以查看所有的已加载并且成功的模块，而且比globals要多，说明默认会加载一些额外的模块，接下来就是unimport了。\n\n```python\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys  ``__import__``(``'a'``)      ``#第一次导入会打印消息  ``del` `sys.modules[``'a'``]   ``#unimport  ``__import__``(``'a'``)    ``#再次导入还是会打印消息，因为已经unimport一次了  ``__import__``(``'a'``)    ``#这次就不会打印消息了`\n```","source":"_posts/import-在python中的区别.md","raw":"---\nlayout: python-import、reload\ntitle: __import__在python中的区别\ndate: 2019-06-01 15:49:16\ntags:\n- python\n---\n\n### import \n\n作用：导入/引入一个python标准模块，其中包括.py文件、带有__init__.py文件的目录(自定义模块)。\n\nimport module_name[,module1,...]  \n\nfrom module import *|child[,child1,...]  \n\n注意：多次重复使用import语句时，不会重新加载被指定的模块，只是把对该模块的内存地址给引用到本地变量环境。\n\n实例：\n\npythontab.py  \n\n```python\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `os  ``print` `'in pythontab'``,``id``(os)`\n```\n\ntest.py  \n\n```\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `pythontab   ``#第一次会打印pythontab里面的语句  ``import` `os  ``#再次导入os后，其内存地址和pythontab里面的是一样的，因此这里只是对os的本地引用  ``print` `'in c'``,``id``(os)  ``import` `pythontab  ``#第二次不会打印pythontab里面的语句，因为没有重新加载`\n```\n\n### reload\n\n作用：对已经加载的模块进行重新加载，一般用于原模块有变化等特殊情况，reload前该模块必须已经import过。\n\nimport os\n\nreload(os)\n\n\n\n说明：\n\nreload会重新加载已加载的模块，但原来已经使用的实例还是会使用旧的模块，而新生产的实例会使用新的模块；reload后还是用原来的内存地址；不能支持from。。import。。格式的模块进行重新加载。\n\n实例：\n\npythontab.py  \n\n```python\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `os  ``print` `'in pythontab'``,``id``(os)`\n```\n\n\n\ntest.py  \n\n```python\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `pythontab   ``#第一次import会打印pythontab里面的语句  ``print` `id``(pythontab) ``#原来pythontab的内存地址  ``reload``(pythontab)  ``#第二次reload还会打印pythontab里面的语句，因为有重新加载  ``print` `id``(pythontab) ``#reload后pythontab的内存地址，和原来一样`\n```\n\n扩展：\n\n上面说了，在特殊情况的下才会使用reload函数；除了原来模块文件有修改外，还有哪些情况需要使用reload函数呢，这里举个例子。\n\n```python\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys   ``#引用sys模块进来，并不是进行sys的第一次加载  ``reload``(sys)  ``#重新加载sys  ``sys.setdefaultencoding(``'utf8'``)  ``##调用setdefaultencoding函数`\n```\n\n上面的代码是正确的，再测试下面的代码\n\n```python\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys     ``sys.setdefaultencoding(``'utf8'``)`\n```\n\n上面的测试会失败，那么为什么要在调用setdefaultencoding时必须要先reload一次sys模块呢？因为这里的import语句其实并不是sys的第一次导入语句，也就是说这里其实可能是第二、三次进行sys模块的import，这里只是一个对sys的引用，只能reload才能进行重新加载；那么为什么要重新加载，而直接引用过来则不能调用该函数呢？因为setdefaultencoding函数在被系统调用后被删除了，所以通过import引用进来时其实已经没有了，所以必须reload一次sys模块，这样setdefaultencoding才会为可用，才能在代码里修改解释器当前的字符编码。试试下面的代码，同样会报错：\n\n```python\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys    ``reload``(sys)   ``sys.setdefaultencoding(``'utf8'``)    ``del` `sys.setdefaultencoding   ``##删除原来的setdefaultencoding函数     ``sys.setdefaultencoding(``'gb2312'``)`\n```\n\n那么到底是谁在之前就导入sys并且调用了setdefaultencoding函数呢？答案就在python安装目录的Lib文件夹下，有一个叫site.py的文件【python2.6】，在里面可以找到main() --> setencoding()-->sys.setdefaultencoding(encoding),因为这个site.py每次启动python解释器时会自动加载，所以main函数每次都会被执行，setdefaultencoding函数一出来就已经被删除了。\n\n### __import__\n\n作用：\n\n同import语句同样的功能，但__import__是一个函数，并且只接收字符串作为参数，所以它的作用就可想而知了。其实import语句就是调用这个函数进行导入工作的，import sys <==>sys = __import__('sys')\n\n使用：\n\n__import__(module_name[, globals[, locals[, fromlist]]]) #可选参数默认为globals(),locals(),[]\n\n__import__('os')    \n\n__import__('os',globals(),locals(),['path','pip'])  #等价于from os import path, pip\n\n说明：\n\n通常在动态加载时可以使用到这个函数，比如你希望加载某个文件夹下的所用模块，但是其下的模块名称又会经常变化时，就可以使用这个函数动态加载所有模块了，最常见的场景就是插件功能的支持。\n\n扩展：\n\n既然可以通过字符串来动态导入模块，那么是否可以通过字符串动态重新加载模块吗？试试reload('os')直接报错，是不是没有其他方式呢?虽然不能直接reload但是可以先unimport一个模块，然后再__import__来重新加载模块。现在看看unimport操作如何实现，在Python解释里可以通过globals(),locals(),vars(),dir()等函数查看到当前环境下加载的模块及其位置，但是这些都只能看不能删除，所以无法unimport；不过除此之外还有一个地方是专门存放模块的，这就是sys.modules，通过sys.modules可以查看所有的已加载并且成功的模块，而且比globals要多，说明默认会加载一些额外的模块，接下来就是unimport了。\n\n```python\n`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys  ``__import__``(``'a'``)      ``#第一次导入会打印消息  ``del` `sys.modules[``'a'``]   ``#unimport  ``__import__``(``'a'``)    ``#再次导入还是会打印消息，因为已经unimport一次了  ``__import__``(``'a'``)    ``#这次就不会打印消息了`\n```","slug":"import-在python中的区别","published":1,"updated":"2019-07-22T08:16:14.829Z","comments":1,"photos":[],"link":"","_id":"ckgepbljq000h4tjed8jpfofa","content":"<h3 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h3><p>作用：导入/引入一个python标准模块，其中包括.py文件、带有<strong>init</strong>.py文件的目录(自定义模块)。</p>\n<p>import module_name[,module1,…]  </p>\n<p>from module import *|child[,child1,…]  </p>\n<p>注意：多次重复使用import语句时，不会重新加载被指定的模块，只是把对该模块的内存地址给引用到本地变量环境。</p>\n<p>实例：</p>\n<p>pythontab.py  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"comment\">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `os  ``print` `'in pythontab'``,``id``(os)`</span></span><br></pre></td></tr></table></figure>\n<p>test.py  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `pythontab   ``#第一次会打印pythontab里面的语句  ``import` `os  ``#再次导入os后，其内存地址和pythontab里面的是一样的，因此这里只是对os的本地引用  ``print` `&apos;in c&apos;``,``id``(os)  ``import` `pythontab  ``#第二次不会打印pythontab里面的语句，因为没有重新加载`</span><br></pre></td></tr></table></figure>\n<h3 id=\"reload\"><a href=\"#reload\" class=\"headerlink\" title=\"reload\"></a>reload</h3><p>作用：对已经加载的模块进行重新加载，一般用于原模块有变化等特殊情况，reload前该模块必须已经import过。</p>\n<p>import os</p>\n<p>reload(os)</p>\n<p>说明：</p>\n<p>reload会重新加载已加载的模块，但原来已经使用的实例还是会使用旧的模块，而新生产的实例会使用新的模块；reload后还是用原来的内存地址；不能支持from。。import。。格式的模块进行重新加载。</p>\n<p>实例：</p>\n<p>pythontab.py  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"comment\">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `os  ``print` `'in pythontab'``,``id``(os)`</span></span><br></pre></td></tr></table></figure>\n<p>test.py  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"comment\">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `pythontab   ``#第一次import会打印pythontab里面的语句  ``print` `id``(pythontab) ``#原来pythontab的内存地址  ``reload``(pythontab)  ``#第二次reload还会打印pythontab里面的语句，因为有重新加载  ``print` `id``(pythontab) ``#reload后pythontab的内存地址，和原来一样`</span></span><br></pre></td></tr></table></figure>\n<p>扩展：</p>\n<p>上面说了，在特殊情况的下才会使用reload函数；除了原来模块文件有修改外，还有哪些情况需要使用reload函数呢，这里举个例子。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"comment\">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys   ``#引用sys模块进来，并不是进行sys的第一次加载  ``reload``(sys)  ``#重新加载sys  ``sys.setdefaultencoding(``'utf8'``)  ``##调用setdefaultencoding函数`</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码是正确的，再测试下面的代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"comment\">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys     ``sys.setdefaultencoding(``'utf8'``)`</span></span><br></pre></td></tr></table></figure>\n<p>上面的测试会失败，那么为什么要在调用setdefaultencoding时必须要先reload一次sys模块呢？因为这里的import语句其实并不是sys的第一次导入语句，也就是说这里其实可能是第二、三次进行sys模块的import，这里只是一个对sys的引用，只能reload才能进行重新加载；那么为什么要重新加载，而直接引用过来则不能调用该函数呢？因为setdefaultencoding函数在被系统调用后被删除了，所以通过import引用进来时其实已经没有了，所以必须reload一次sys模块，这样setdefaultencoding才会为可用，才能在代码里修改解释器当前的字符编码。试试下面的代码，同样会报错：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"comment\">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys    ``reload``(sys)   ``sys.setdefaultencoding(``'utf8'``)    ``del` `sys.setdefaultencoding   ``##删除原来的setdefaultencoding函数     ``sys.setdefaultencoding(``'gb2312'``)`</span></span><br></pre></td></tr></table></figure>\n<p>那么到底是谁在之前就导入sys并且调用了setdefaultencoding函数呢？答案就在python安装目录的Lib文件夹下，有一个叫site.py的文件【python2.6】，在里面可以找到main() –&gt; setencoding()–&gt;sys.setdefaultencoding(encoding),因为这个site.py每次启动python解释器时会自动加载，所以main函数每次都会被执行，setdefaultencoding函数一出来就已经被删除了。</p>\n<h3 id=\"import-1\"><a href=\"#import-1\" class=\"headerlink\" title=\"import\"></a><strong>import</strong></h3><p>作用：</p>\n<p>同import语句同样的功能，但<strong>import</strong>是一个函数，并且只接收字符串作为参数，所以它的作用就可想而知了。其实import语句就是调用这个函数进行导入工作的，import sys &lt;==&gt;sys = <strong>import</strong>(‘sys’)</p>\n<p>使用：</p>\n<p><strong>import</strong>(module_name[, globals[, locals[, fromlist]]]) #可选参数默认为globals(),locals(),[]</p>\n<p><strong>import</strong>(‘os’)    </p>\n<p><strong>import</strong>(‘os’,globals(),locals(),[‘path’,’pip’])  #等价于from os import path, pip</p>\n<p>说明：</p>\n<p>通常在动态加载时可以使用到这个函数，比如你希望加载某个文件夹下的所用模块，但是其下的模块名称又会经常变化时，就可以使用这个函数动态加载所有模块了，最常见的场景就是插件功能的支持。</p>\n<p>扩展：</p>\n<p>既然可以通过字符串来动态导入模块，那么是否可以通过字符串动态重新加载模块吗？试试reload(‘os’)直接报错，是不是没有其他方式呢?虽然不能直接reload但是可以先unimport一个模块，然后再<strong>import</strong>来重新加载模块。现在看看unimport操作如何实现，在Python解释里可以通过globals(),locals(),vars(),dir()等函数查看到当前环境下加载的模块及其位置，但是这些都只能看不能删除，所以无法unimport；不过除此之外还有一个地方是专门存放模块的，这就是sys.modules，通过sys.modules可以查看所有的已加载并且成功的模块，而且比globals要多，说明默认会加载一些额外的模块，接下来就是unimport了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"comment\">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys  ``__import__``(``'a'``)      ``#第一次导入会打印消息  ``del` `sys.modules[``'a'``]   ``#unimport  ``__import__``(``'a'``)    ``#再次导入还是会打印消息，因为已经unimport一次了  ``__import__``(``'a'``)    ``#这次就不会打印消息了`</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h3><p>作用：导入/引入一个python标准模块，其中包括.py文件、带有<strong>init</strong>.py文件的目录(自定义模块)。</p>\n<p>import module_name[,module1,…]  </p>\n<p>from module import *|child[,child1,…]  </p>\n<p>注意：多次重复使用import语句时，不会重新加载被指定的模块，只是把对该模块的内存地址给引用到本地变量环境。</p>\n<p>实例：</p>\n<p>pythontab.py  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"comment\">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `os  ``print` `'in pythontab'``,``id``(os)`</span></span><br></pre></td></tr></table></figure>\n<p>test.py  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `pythontab   ``#第一次会打印pythontab里面的语句  ``import` `os  ``#再次导入os后，其内存地址和pythontab里面的是一样的，因此这里只是对os的本地引用  ``print` `&apos;in c&apos;``,``id``(os)  ``import` `pythontab  ``#第二次不会打印pythontab里面的语句，因为没有重新加载`</span><br></pre></td></tr></table></figure>\n<h3 id=\"reload\"><a href=\"#reload\" class=\"headerlink\" title=\"reload\"></a>reload</h3><p>作用：对已经加载的模块进行重新加载，一般用于原模块有变化等特殊情况，reload前该模块必须已经import过。</p>\n<p>import os</p>\n<p>reload(os)</p>\n<p>说明：</p>\n<p>reload会重新加载已加载的模块，但原来已经使用的实例还是会使用旧的模块，而新生产的实例会使用新的模块；reload后还是用原来的内存地址；不能支持from。。import。。格式的模块进行重新加载。</p>\n<p>实例：</p>\n<p>pythontab.py  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"comment\">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `os  ``print` `'in pythontab'``,``id``(os)`</span></span><br></pre></td></tr></table></figure>\n<p>test.py  </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"comment\">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `pythontab   ``#第一次import会打印pythontab里面的语句  ``print` `id``(pythontab) ``#原来pythontab的内存地址  ``reload``(pythontab)  ``#第二次reload还会打印pythontab里面的语句，因为有重新加载  ``print` `id``(pythontab) ``#reload后pythontab的内存地址，和原来一样`</span></span><br></pre></td></tr></table></figure>\n<p>扩展：</p>\n<p>上面说了，在特殊情况的下才会使用reload函数；除了原来模块文件有修改外，还有哪些情况需要使用reload函数呢，这里举个例子。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"comment\">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys   ``#引用sys模块进来，并不是进行sys的第一次加载  ``reload``(sys)  ``#重新加载sys  ``sys.setdefaultencoding(``'utf8'``)  ``##调用setdefaultencoding函数`</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码是正确的，再测试下面的代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"comment\">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys     ``sys.setdefaultencoding(``'utf8'``)`</span></span><br></pre></td></tr></table></figure>\n<p>上面的测试会失败，那么为什么要在调用setdefaultencoding时必须要先reload一次sys模块呢？因为这里的import语句其实并不是sys的第一次导入语句，也就是说这里其实可能是第二、三次进行sys模块的import，这里只是一个对sys的引用，只能reload才能进行重新加载；那么为什么要重新加载，而直接引用过来则不能调用该函数呢？因为setdefaultencoding函数在被系统调用后被删除了，所以通过import引用进来时其实已经没有了，所以必须reload一次sys模块，这样setdefaultencoding才会为可用，才能在代码里修改解释器当前的字符编码。试试下面的代码，同样会报错：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"comment\">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys    ``reload``(sys)   ``sys.setdefaultencoding(``'utf8'``)    ``del` `sys.setdefaultencoding   ``##删除原来的setdefaultencoding函数     ``sys.setdefaultencoding(``'gb2312'``)`</span></span><br></pre></td></tr></table></figure>\n<p>那么到底是谁在之前就导入sys并且调用了setdefaultencoding函数呢？答案就在python安装目录的Lib文件夹下，有一个叫site.py的文件【python2.6】，在里面可以找到main() –&gt; setencoding()–&gt;sys.setdefaultencoding(encoding),因为这个site.py每次启动python解释器时会自动加载，所以main函数每次都会被执行，setdefaultencoding函数一出来就已经被删除了。</p>\n<h3 id=\"import-1\"><a href=\"#import-1\" class=\"headerlink\" title=\"import\"></a><strong>import</strong></h3><p>作用：</p>\n<p>同import语句同样的功能，但<strong>import</strong>是一个函数，并且只接收字符串作为参数，所以它的作用就可想而知了。其实import语句就是调用这个函数进行导入工作的，import sys &lt;==&gt;sys = <strong>import</strong>(‘sys’)</p>\n<p>使用：</p>\n<p><strong>import</strong>(module_name[, globals[, locals[, fromlist]]]) #可选参数默认为globals(),locals(),[]</p>\n<p><strong>import</strong>(‘os’)    </p>\n<p><strong>import</strong>(‘os’,globals(),locals(),[‘path’,’pip’])  #等价于from os import path, pip</p>\n<p>说明：</p>\n<p>通常在动态加载时可以使用到这个函数，比如你希望加载某个文件夹下的所用模块，但是其下的模块名称又会经常变化时，就可以使用这个函数动态加载所有模块了，最常见的场景就是插件功能的支持。</p>\n<p>扩展：</p>\n<p>既然可以通过字符串来动态导入模块，那么是否可以通过字符串动态重新加载模块吗？试试reload(‘os’)直接报错，是不是没有其他方式呢?虽然不能直接reload但是可以先unimport一个模块，然后再<strong>import</strong>来重新加载模块。现在看看unimport操作如何实现，在Python解释里可以通过globals(),locals(),vars(),dir()等函数查看到当前环境下加载的模块及其位置，但是这些都只能看不能删除，所以无法unimport；不过除此之外还有一个地方是专门存放模块的，这就是sys.modules，通过sys.modules可以查看所有的已加载并且成功的模块，而且比globals要多，说明默认会加载一些额外的模块，接下来就是unimport了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"comment\">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys  ``__import__``(``'a'``)      ``#第一次导入会打印消息  ``del` `sys.modules[``'a'``]   ``#unimport  ``__import__``(``'a'``)    ``#再次导入还是会打印消息，因为已经unimport一次了  ``__import__``(``'a'``)    ``#这次就不会打印消息了`</span></span><br></pre></td></tr></table></figure>"},{"title":"jquery基本操作","date":"2019-01-12T08:20:45.000Z","_content":"\n# 选择器\n\n```js\n// 基本选择器\n$('#id')\n$('.class')\n$('element')\n$('*')\n$('select1 ,select2')//可以使用css选择器\n\n// 层次选择器\n$('ancestor descendant')\n$('parent >child')\n$('prev+next')\n$('prev~siblings')//获取所有同辈元素\n\n\n\n```\n\n# DOM操作\n\n## 基本操作\n\n```js\n// attr\n$('div').attr(\"background\")//获取属性\n$('div').attr(\"background\",\"white\")\n$('div').attr({\"background\":\"white\",\"height\":\"200px\"})\n\n// css\n$(\"div\").css('background')\n$('div').css(\"background\",\"white\")\n$('div').css({'background':'blue',\"height\":'200px'})\n\n// width height\nwidth()\nheight()\n\n// addClass\n$('div').addClass('className');\n\n// removeAttr\n$('div').removeAttr('background')\n\n// removeClass 没参数删除所有\n\n// hasClass\n\n// 创建节点\nvar p $('<p>hello</p>')\n\n// append() 添加内容\n\n// appendTo()\n\n// prepend() 向元素内部前面添加内容\n// prependTo()\n​``` html\n<p>hello</p>\n​```\n$('<i>hi!</i>').prependTo(\"p\")\n​``` html\n<p><i>hi!</i>hello</p>\n​```\n    \n// 在相应位置添加元素，是在元素的外面\n// after\n// insertAfter\n// before\n//insertBefore\n\n// remove()\n// detach()：和remove()几乎一样，不同的是detach方法不会删除节点所绑定的事件和附加的数据\n// empty() 清空内容\n\n// clone()复制节点，可以有参数true，当有true参数时，将同时复制节点所绑定的事件\n// replaceWith 将匹配的节点替换成指定的节点\n// replaceAll() 只是用一个\n\n// wrap 包裹节点\n// wrapAll\n// wrapInner 将匹配的节点内部的节点或者文本内容用指定的节点包裹起来\n​```\n<p>我是内容</p>\n​```\n$(\"p\").wrapInner(\"<span></span>\");\n​```\n<p><span>我是内容</span></p>\n​```\n// html()\n// text()\n// val()\n\n// children()\n// next()\n// prev()\n// siblings()\n// closest() 获取最近的符合匹配的一个父元素\n​```\n<div>\n<div class=\"div2\">\n<p>我是内容</p>\n</div>\n</div>\n​```\nvar $div=$(\"p\").closest();//返回class为div2的div元素\n\n// parent()\n// parents()\n\n\n// offset()\n// position()\n\n// scrollTop()\n// scrollLeft()\n\n\n\n```\n\n# 事件与动画\n\n```js\n$().ready()\n$('').bind(type,func)\n$('').click()\n$('').mouseover\n\n// 合成事件\nhover(enter,leave)\ntoggle(fn1,fn2)\n       \n// 阻止事件\nevent.stopPropagation();\nevent.preventDefault();\n\n// unbind 移除事件\n// trigger 触发事件\n\n// 动画\nhide();\nshow(time);\nfadeLn();\nfadeOut();\nslideUp();\nslideDown();\nslideToggle();\nfadeTo();\nfadeToggle();\nanimate();\ndelay();\n       \n```\n\n# 参考\n\n> [jQuery简明参考手册——30分钟快速入门jQuery]( https://www.jianshu.com/p/3e2768c8dad4)","source":"_posts/jquery基本操作.md","raw":"---\ntitle: jquery基本操作\ndate: 2019-01-12 16:20:45\ntags:\n- js\n- jquery\n\n---\n\n# 选择器\n\n```js\n// 基本选择器\n$('#id')\n$('.class')\n$('element')\n$('*')\n$('select1 ,select2')//可以使用css选择器\n\n// 层次选择器\n$('ancestor descendant')\n$('parent >child')\n$('prev+next')\n$('prev~siblings')//获取所有同辈元素\n\n\n\n```\n\n# DOM操作\n\n## 基本操作\n\n```js\n// attr\n$('div').attr(\"background\")//获取属性\n$('div').attr(\"background\",\"white\")\n$('div').attr({\"background\":\"white\",\"height\":\"200px\"})\n\n// css\n$(\"div\").css('background')\n$('div').css(\"background\",\"white\")\n$('div').css({'background':'blue',\"height\":'200px'})\n\n// width height\nwidth()\nheight()\n\n// addClass\n$('div').addClass('className');\n\n// removeAttr\n$('div').removeAttr('background')\n\n// removeClass 没参数删除所有\n\n// hasClass\n\n// 创建节点\nvar p $('<p>hello</p>')\n\n// append() 添加内容\n\n// appendTo()\n\n// prepend() 向元素内部前面添加内容\n// prependTo()\n​``` html\n<p>hello</p>\n​```\n$('<i>hi!</i>').prependTo(\"p\")\n​``` html\n<p><i>hi!</i>hello</p>\n​```\n    \n// 在相应位置添加元素，是在元素的外面\n// after\n// insertAfter\n// before\n//insertBefore\n\n// remove()\n// detach()：和remove()几乎一样，不同的是detach方法不会删除节点所绑定的事件和附加的数据\n// empty() 清空内容\n\n// clone()复制节点，可以有参数true，当有true参数时，将同时复制节点所绑定的事件\n// replaceWith 将匹配的节点替换成指定的节点\n// replaceAll() 只是用一个\n\n// wrap 包裹节点\n// wrapAll\n// wrapInner 将匹配的节点内部的节点或者文本内容用指定的节点包裹起来\n​```\n<p>我是内容</p>\n​```\n$(\"p\").wrapInner(\"<span></span>\");\n​```\n<p><span>我是内容</span></p>\n​```\n// html()\n// text()\n// val()\n\n// children()\n// next()\n// prev()\n// siblings()\n// closest() 获取最近的符合匹配的一个父元素\n​```\n<div>\n<div class=\"div2\">\n<p>我是内容</p>\n</div>\n</div>\n​```\nvar $div=$(\"p\").closest();//返回class为div2的div元素\n\n// parent()\n// parents()\n\n\n// offset()\n// position()\n\n// scrollTop()\n// scrollLeft()\n\n\n\n```\n\n# 事件与动画\n\n```js\n$().ready()\n$('').bind(type,func)\n$('').click()\n$('').mouseover\n\n// 合成事件\nhover(enter,leave)\ntoggle(fn1,fn2)\n       \n// 阻止事件\nevent.stopPropagation();\nevent.preventDefault();\n\n// unbind 移除事件\n// trigger 触发事件\n\n// 动画\nhide();\nshow(time);\nfadeLn();\nfadeOut();\nslideUp();\nslideDown();\nslideToggle();\nfadeTo();\nfadeToggle();\nanimate();\ndelay();\n       \n```\n\n# 参考\n\n> [jQuery简明参考手册——30分钟快速入门jQuery]( https://www.jianshu.com/p/3e2768c8dad4)","slug":"jquery基本操作","published":1,"updated":"2019-07-22T08:16:14.870Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbljs000j4tjevgyoyp68","content":"<h1 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基本选择器</span></span><br><span class=\"line\">$(<span class=\"string\">'#id'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'.class'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'element'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'*'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'select1 ,select2'</span>)<span class=\"comment\">//可以使用css选择器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 层次选择器</span></span><br><span class=\"line\">$(<span class=\"string\">'ancestor descendant'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'parent &gt;child'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'prev+next'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'prev~siblings'</span>)<span class=\"comment\">//获取所有同辈元素</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"DOM操作\"><a href=\"#DOM操作\" class=\"headerlink\" title=\"DOM操作\"></a>DOM操作</h1><h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// attr</span></span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).attr(<span class=\"string\">\"background\"</span>)<span class=\"comment\">//获取属性</span></span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).attr(<span class=\"string\">\"background\"</span>,<span class=\"string\">\"white\"</span>)</span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).attr(&#123;<span class=\"string\">\"background\"</span>:<span class=\"string\">\"white\"</span>,<span class=\"string\">\"height\"</span>:<span class=\"string\">\"200px\"</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// css</span></span><br><span class=\"line\">$(<span class=\"string\">\"div\"</span>).css(<span class=\"string\">'background'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).css(<span class=\"string\">\"background\"</span>,<span class=\"string\">\"white\"</span>)</span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).css(&#123;<span class=\"string\">'background'</span>:<span class=\"string\">'blue'</span>,<span class=\"string\">\"height\"</span>:<span class=\"string\">'200px'</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// width height</span></span><br><span class=\"line\">width()</span><br><span class=\"line\">height()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// addClass</span></span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).addClass(<span class=\"string\">'className'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// removeAttr</span></span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).removeAttr(<span class=\"string\">'background'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// removeClass 没参数删除所有</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// hasClass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建节点</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p $(<span class=\"string\">'&lt;p&gt;hello&lt;/p&gt;'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// append() 添加内容</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// appendTo()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// prepend() 向元素内部前面添加内容</span></span><br><span class=\"line\"><span class=\"comment\">// prependTo()</span></span><br><span class=\"line\">​<span class=\"string\">``</span><span class=\"string\">` html</span></span><br><span class=\"line\"><span class=\"string\">&lt;p&gt;hello&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">​</span></span><br></pre></td></tr></table></figure>\n<p>$(‘<i>hi!</i>‘).prependTo(“p”)<br>​<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>hi!<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>// 在相应位置添加元素，是在元素的外面<br>// after<br>// insertAfter<br>// before<br>//insertBefore</p>\n<p>// remove()<br>// detach()：和remove()几乎一样，不同的是detach方法不会删除节点所绑定的事件和附加的数据<br>// empty() 清空内容</p>\n<p>// clone()复制节点，可以有参数true，当有true参数时，将同时复制节点所绑定的事件<br>// replaceWith 将匹配的节点替换成指定的节点<br>// replaceAll() 只是用一个</p>\n<p>// wrap 包裹节点<br>// wrapAll<br>// wrapInner 将匹配的节点内部的节点或者文本内容用指定的节点包裹起来<br>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>$(“p”).wrapInner(“<span></span>“);<br>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;&lt;span&gt;我是内容&lt;/span&gt;&lt;/p&gt;</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>// html()<br>// text()<br>// val()</p>\n<p>// children()<br>// next()<br>// prev()<br>// siblings()<br>// closest() 获取最近的符合匹配的一个父元素<br>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">&lt;div class=&quot;div2&quot;&gt;</span><br><span class=\"line\">&lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>var $div=$(“p”).closest();//返回class为div2的div元素</p>\n<p>// parent()<br>// parents()</p>\n<p>// offset()<br>// position()</p>\n<p>// scrollTop()<br>// scrollLeft()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 事件与动画</span><br><span class=\"line\"></span><br><span class=\"line\">```js</span><br><span class=\"line\">$().ready()</span><br><span class=\"line\">$(&apos;&apos;).bind(type,func)</span><br><span class=\"line\">$(&apos;&apos;).click()</span><br><span class=\"line\">$(&apos;&apos;).mouseover</span><br><span class=\"line\"></span><br><span class=\"line\">// 合成事件</span><br><span class=\"line\">hover(enter,leave)</span><br><span class=\"line\">toggle(fn1,fn2)</span><br><span class=\"line\">       </span><br><span class=\"line\">// 阻止事件</span><br><span class=\"line\">event.stopPropagation();</span><br><span class=\"line\">event.preventDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">// unbind 移除事件</span><br><span class=\"line\">// trigger 触发事件</span><br><span class=\"line\"></span><br><span class=\"line\">// 动画</span><br><span class=\"line\">hide();</span><br><span class=\"line\">show(time);</span><br><span class=\"line\">fadeLn();</span><br><span class=\"line\">fadeOut();</span><br><span class=\"line\">slideUp();</span><br><span class=\"line\">slideDown();</span><br><span class=\"line\">slideToggle();</span><br><span class=\"line\">fadeTo();</span><br><span class=\"line\">fadeToggle();</span><br><span class=\"line\">animate();</span><br><span class=\"line\">delay();</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://www.jianshu.com/p/3e2768c8dad4\" target=\"_blank\" rel=\"noopener\">jQuery简明参考手册——30分钟快速入门jQuery</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基本选择器</span></span><br><span class=\"line\">$(<span class=\"string\">'#id'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'.class'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'element'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'*'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'select1 ,select2'</span>)<span class=\"comment\">//可以使用css选择器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 层次选择器</span></span><br><span class=\"line\">$(<span class=\"string\">'ancestor descendant'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'parent &gt;child'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'prev+next'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'prev~siblings'</span>)<span class=\"comment\">//获取所有同辈元素</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"DOM操作\"><a href=\"#DOM操作\" class=\"headerlink\" title=\"DOM操作\"></a>DOM操作</h1><h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// attr</span></span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).attr(<span class=\"string\">\"background\"</span>)<span class=\"comment\">//获取属性</span></span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).attr(<span class=\"string\">\"background\"</span>,<span class=\"string\">\"white\"</span>)</span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).attr(&#123;<span class=\"string\">\"background\"</span>:<span class=\"string\">\"white\"</span>,<span class=\"string\">\"height\"</span>:<span class=\"string\">\"200px\"</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// css</span></span><br><span class=\"line\">$(<span class=\"string\">\"div\"</span>).css(<span class=\"string\">'background'</span>)</span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).css(<span class=\"string\">\"background\"</span>,<span class=\"string\">\"white\"</span>)</span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).css(&#123;<span class=\"string\">'background'</span>:<span class=\"string\">'blue'</span>,<span class=\"string\">\"height\"</span>:<span class=\"string\">'200px'</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// width height</span></span><br><span class=\"line\">width()</span><br><span class=\"line\">height()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// addClass</span></span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).addClass(<span class=\"string\">'className'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// removeAttr</span></span><br><span class=\"line\">$(<span class=\"string\">'div'</span>).removeAttr(<span class=\"string\">'background'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// removeClass 没参数删除所有</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// hasClass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建节点</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p $(<span class=\"string\">'&lt;p&gt;hello&lt;/p&gt;'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// append() 添加内容</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// appendTo()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// prepend() 向元素内部前面添加内容</span></span><br><span class=\"line\"><span class=\"comment\">// prependTo()</span></span><br><span class=\"line\">​<span class=\"string\">``</span><span class=\"string\">` html</span></span><br><span class=\"line\"><span class=\"string\">&lt;p&gt;hello&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">​</span></span><br></pre></td></tr></table></figure>\n<p>$(‘<i>hi!</i>‘).prependTo(“p”)<br>​<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>hi!<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>// 在相应位置添加元素，是在元素的外面<br>// after<br>// insertAfter<br>// before<br>//insertBefore</p>\n<p>// remove()<br>// detach()：和remove()几乎一样，不同的是detach方法不会删除节点所绑定的事件和附加的数据<br>// empty() 清空内容</p>\n<p>// clone()复制节点，可以有参数true，当有true参数时，将同时复制节点所绑定的事件<br>// replaceWith 将匹配的节点替换成指定的节点<br>// replaceAll() 只是用一个</p>\n<p>// wrap 包裹节点<br>// wrapAll<br>// wrapInner 将匹配的节点内部的节点或者文本内容用指定的节点包裹起来<br>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>$(“p”).wrapInner(“<span></span>“);<br>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;&lt;span&gt;我是内容&lt;/span&gt;&lt;/p&gt;</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>// html()<br>// text()<br>// val()</p>\n<p>// children()<br>// next()<br>// prev()<br>// siblings()<br>// closest() 获取最近的符合匹配的一个父元素<br>​<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">&lt;div class=&quot;div2&quot;&gt;</span><br><span class=\"line\">&lt;p&gt;我是内容&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>var $div=$(“p”).closest();//返回class为div2的div元素</p>\n<p>// parent()<br>// parents()</p>\n<p>// offset()<br>// position()</p>\n<p>// scrollTop()<br>// scrollLeft()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 事件与动画</span><br><span class=\"line\"></span><br><span class=\"line\">```js</span><br><span class=\"line\">$().ready()</span><br><span class=\"line\">$(&apos;&apos;).bind(type,func)</span><br><span class=\"line\">$(&apos;&apos;).click()</span><br><span class=\"line\">$(&apos;&apos;).mouseover</span><br><span class=\"line\"></span><br><span class=\"line\">// 合成事件</span><br><span class=\"line\">hover(enter,leave)</span><br><span class=\"line\">toggle(fn1,fn2)</span><br><span class=\"line\">       </span><br><span class=\"line\">// 阻止事件</span><br><span class=\"line\">event.stopPropagation();</span><br><span class=\"line\">event.preventDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">// unbind 移除事件</span><br><span class=\"line\">// trigger 触发事件</span><br><span class=\"line\"></span><br><span class=\"line\">// 动画</span><br><span class=\"line\">hide();</span><br><span class=\"line\">show(time);</span><br><span class=\"line\">fadeLn();</span><br><span class=\"line\">fadeOut();</span><br><span class=\"line\">slideUp();</span><br><span class=\"line\">slideDown();</span><br><span class=\"line\">slideToggle();</span><br><span class=\"line\">fadeTo();</span><br><span class=\"line\">fadeToggle();</span><br><span class=\"line\">animate();</span><br><span class=\"line\">delay();</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://www.jianshu.com/p/3e2768c8dad4\" target=\"_blank\" rel=\"noopener\">jQuery简明参考手册——30分钟快速入门jQuery</a></p>\n</blockquote>\n"},{"title":"lodash按需加载","date":"2019-10-18T03:48:59.000Z","_content":"\nlodash提供了很多可用的方法供我们使用，绝对是一个很好用且用起来得心应手的工具库。但是同时，lodash的体积也不小，我们项目中使用的大概522K，可能只是使用了几个方法，但是却把整个lodash库引入了。为了吃几条鱼，就承包了整个鱼塘，代价有点大呀！\n\n对于这个问题，有几种方案可供选择。\n\n**一.引入单个函数**\n\n　lodash整个安装完之后，引用方式： lodash/function 格式，单独引入某个函数，如\n\nlet _trim= require('lodash/trim') 或者 import trim from 'lodash/trim' \n\n　或者 lodash 中的每个函数在 NPM 都有一个单独的发布模块，单独安装并引用部分模块，然后按以下方式引用\n\nlet _trim= require('lodash.trim') 或者 import trim from 'lodash.trim' \n\ntrim(' 123123 ')\n\n**二.借助 lodash-webpack-plugin，babel-plugin-lodash插件优化**\n\n　　使用上述两种方式，在使用较多个lodash中方法的情况下，不太美观，且并不方便。那么我们可以借助于lodash-webpack-plugin，去除未引入的模块，需要和babel-plugin-lodash插件配合使用。类似于webpack的tree-shaking。\n\n　　1）安装插件：npm i -S lodash-webpack-plugin babel-plugin-lodash\n\n　　2）webpack.conf.js中\n\n　　var LodashModuleReplacementPlugin = require('lodash-webpack-plugin')\n\n　　plugins: [ new LodashModuleReplacementPlugin()]\n\n3）.babelrc中配置 \"plugins\": [\"transform-runtime\",\"transform-vue-jsx\",\"lodash\"]\n\n　　或者在webpack.conf.js的rules配置\n\n```\n{\n  test: /\\.(js|jsx)$/,\n  loader: 'babel-loader',\n  exclude: /node_modules/,\n  include: [resolve('src'), resolve('test')]\n  options: {plugins: ['lodash']}\n}\n```\n\n**三.lodash-es结合tree-shaking**\n\nlodash-es 是着具备 ES6 模块化的版本，只需要直接引入就可以。\n\nimport {isEmpty,forIn, cloneDeep} from 'lodash-es'\n\ntree-shaking的作用，即移除上下文中未引用的代码（dead code）\n\n只有当函数给定输入后，产生相应的输出，且不修改任何外部的东西，才可以安全做shaking的操作\n\n如何使用tree-shaking？\n\n1）.确保代码是es6格式,即 export，import\n\n2）.package.json中，设置sideEffects\n\n3）.确保tree-shaking的函数没有副作用\n\n4）.babelrc中设置presets [[\"env\", { \"modules\": false }]] 禁止转换模块，交由webpack进行模块化处理\n\n5）.结合uglifyjs-webpack-plugin","source":"_posts/lodash按需加载.md","raw":"---\ntitle: lodash按需加载\ndate: 2019-10-18 11:48:59\ntags:\n- js\n---\n\nlodash提供了很多可用的方法供我们使用，绝对是一个很好用且用起来得心应手的工具库。但是同时，lodash的体积也不小，我们项目中使用的大概522K，可能只是使用了几个方法，但是却把整个lodash库引入了。为了吃几条鱼，就承包了整个鱼塘，代价有点大呀！\n\n对于这个问题，有几种方案可供选择。\n\n**一.引入单个函数**\n\n　lodash整个安装完之后，引用方式： lodash/function 格式，单独引入某个函数，如\n\nlet _trim= require('lodash/trim') 或者 import trim from 'lodash/trim' \n\n　或者 lodash 中的每个函数在 NPM 都有一个单独的发布模块，单独安装并引用部分模块，然后按以下方式引用\n\nlet _trim= require('lodash.trim') 或者 import trim from 'lodash.trim' \n\ntrim(' 123123 ')\n\n**二.借助 lodash-webpack-plugin，babel-plugin-lodash插件优化**\n\n　　使用上述两种方式，在使用较多个lodash中方法的情况下，不太美观，且并不方便。那么我们可以借助于lodash-webpack-plugin，去除未引入的模块，需要和babel-plugin-lodash插件配合使用。类似于webpack的tree-shaking。\n\n　　1）安装插件：npm i -S lodash-webpack-plugin babel-plugin-lodash\n\n　　2）webpack.conf.js中\n\n　　var LodashModuleReplacementPlugin = require('lodash-webpack-plugin')\n\n　　plugins: [ new LodashModuleReplacementPlugin()]\n\n3）.babelrc中配置 \"plugins\": [\"transform-runtime\",\"transform-vue-jsx\",\"lodash\"]\n\n　　或者在webpack.conf.js的rules配置\n\n```\n{\n  test: /\\.(js|jsx)$/,\n  loader: 'babel-loader',\n  exclude: /node_modules/,\n  include: [resolve('src'), resolve('test')]\n  options: {plugins: ['lodash']}\n}\n```\n\n**三.lodash-es结合tree-shaking**\n\nlodash-es 是着具备 ES6 模块化的版本，只需要直接引入就可以。\n\nimport {isEmpty,forIn, cloneDeep} from 'lodash-es'\n\ntree-shaking的作用，即移除上下文中未引用的代码（dead code）\n\n只有当函数给定输入后，产生相应的输出，且不修改任何外部的东西，才可以安全做shaking的操作\n\n如何使用tree-shaking？\n\n1）.确保代码是es6格式,即 export，import\n\n2）.package.json中，设置sideEffects\n\n3）.确保tree-shaking的函数没有副作用\n\n4）.babelrc中设置presets [[\"env\", { \"modules\": false }]] 禁止转换模块，交由webpack进行模块化处理\n\n5）.结合uglifyjs-webpack-plugin","slug":"lodash按需加载","published":1,"updated":"2020-08-27T15:25:48.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbljt000l4tjesd6qrhrh","content":"<p>lodash提供了很多可用的方法供我们使用，绝对是一个很好用且用起来得心应手的工具库。但是同时，lodash的体积也不小，我们项目中使用的大概522K，可能只是使用了几个方法，但是却把整个lodash库引入了。为了吃几条鱼，就承包了整个鱼塘，代价有点大呀！</p>\n<p>对于这个问题，有几种方案可供选择。</p>\n<p><strong>一.引入单个函数</strong></p>\n<p>　lodash整个安装完之后，引用方式： lodash/function 格式，单独引入某个函数，如</p>\n<p>let _trim= require(‘lodash/trim’) 或者 import trim from ‘lodash/trim’ </p>\n<p>　或者 lodash 中的每个函数在 NPM 都有一个单独的发布模块，单独安装并引用部分模块，然后按以下方式引用</p>\n<p>let _trim= require(‘lodash.trim’) 或者 import trim from ‘lodash.trim’ </p>\n<p>trim(‘ 123123 ‘)</p>\n<p><strong>二.借助 lodash-webpack-plugin，babel-plugin-lodash插件优化</strong></p>\n<p>　　使用上述两种方式，在使用较多个lodash中方法的情况下，不太美观，且并不方便。那么我们可以借助于lodash-webpack-plugin，去除未引入的模块，需要和babel-plugin-lodash插件配合使用。类似于webpack的tree-shaking。</p>\n<p>　　1）安装插件：npm i -S lodash-webpack-plugin babel-plugin-lodash</p>\n<p>　　2）webpack.conf.js中</p>\n<p>　　var LodashModuleReplacementPlugin = require(‘lodash-webpack-plugin’)</p>\n<p>　　plugins: [ new LodashModuleReplacementPlugin()]</p>\n<p>3）.babelrc中配置 “plugins”: [“transform-runtime”,”transform-vue-jsx”,”lodash”]</p>\n<p>　　或者在webpack.conf.js的rules配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: /\\.(js|jsx)$/,</span><br><span class=\"line\">  loader: &apos;babel-loader&apos;,</span><br><span class=\"line\">  exclude: /node_modules/,</span><br><span class=\"line\">  include: [resolve(&apos;src&apos;), resolve(&apos;test&apos;)]</span><br><span class=\"line\">  options: &#123;plugins: [&apos;lodash&apos;]&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>三.lodash-es结合tree-shaking</strong></p>\n<p>lodash-es 是着具备 ES6 模块化的版本，只需要直接引入就可以。</p>\n<p>import {isEmpty,forIn, cloneDeep} from ‘lodash-es’</p>\n<p>tree-shaking的作用，即移除上下文中未引用的代码（dead code）</p>\n<p>只有当函数给定输入后，产生相应的输出，且不修改任何外部的东西，才可以安全做shaking的操作</p>\n<p>如何使用tree-shaking？</p>\n<p>1）.确保代码是es6格式,即 export，import</p>\n<p>2）.package.json中，设置sideEffects</p>\n<p>3）.确保tree-shaking的函数没有副作用</p>\n<p>4）.babelrc中设置presets [[“env”, { “modules”: false }]] 禁止转换模块，交由webpack进行模块化处理</p>\n<p>5）.结合uglifyjs-webpack-plugin</p>\n","site":{"data":{}},"excerpt":"","more":"<p>lodash提供了很多可用的方法供我们使用，绝对是一个很好用且用起来得心应手的工具库。但是同时，lodash的体积也不小，我们项目中使用的大概522K，可能只是使用了几个方法，但是却把整个lodash库引入了。为了吃几条鱼，就承包了整个鱼塘，代价有点大呀！</p>\n<p>对于这个问题，有几种方案可供选择。</p>\n<p><strong>一.引入单个函数</strong></p>\n<p>　lodash整个安装完之后，引用方式： lodash/function 格式，单独引入某个函数，如</p>\n<p>let _trim= require(‘lodash/trim’) 或者 import trim from ‘lodash/trim’ </p>\n<p>　或者 lodash 中的每个函数在 NPM 都有一个单独的发布模块，单独安装并引用部分模块，然后按以下方式引用</p>\n<p>let _trim= require(‘lodash.trim’) 或者 import trim from ‘lodash.trim’ </p>\n<p>trim(‘ 123123 ‘)</p>\n<p><strong>二.借助 lodash-webpack-plugin，babel-plugin-lodash插件优化</strong></p>\n<p>　　使用上述两种方式，在使用较多个lodash中方法的情况下，不太美观，且并不方便。那么我们可以借助于lodash-webpack-plugin，去除未引入的模块，需要和babel-plugin-lodash插件配合使用。类似于webpack的tree-shaking。</p>\n<p>　　1）安装插件：npm i -S lodash-webpack-plugin babel-plugin-lodash</p>\n<p>　　2）webpack.conf.js中</p>\n<p>　　var LodashModuleReplacementPlugin = require(‘lodash-webpack-plugin’)</p>\n<p>　　plugins: [ new LodashModuleReplacementPlugin()]</p>\n<p>3）.babelrc中配置 “plugins”: [“transform-runtime”,”transform-vue-jsx”,”lodash”]</p>\n<p>　　或者在webpack.conf.js的rules配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: /\\.(js|jsx)$/,</span><br><span class=\"line\">  loader: &apos;babel-loader&apos;,</span><br><span class=\"line\">  exclude: /node_modules/,</span><br><span class=\"line\">  include: [resolve(&apos;src&apos;), resolve(&apos;test&apos;)]</span><br><span class=\"line\">  options: &#123;plugins: [&apos;lodash&apos;]&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>三.lodash-es结合tree-shaking</strong></p>\n<p>lodash-es 是着具备 ES6 模块化的版本，只需要直接引入就可以。</p>\n<p>import {isEmpty,forIn, cloneDeep} from ‘lodash-es’</p>\n<p>tree-shaking的作用，即移除上下文中未引用的代码（dead code）</p>\n<p>只有当函数给定输入后，产生相应的输出，且不修改任何外部的东西，才可以安全做shaking的操作</p>\n<p>如何使用tree-shaking？</p>\n<p>1）.确保代码是es6格式,即 export，import</p>\n<p>2）.package.json中，设置sideEffects</p>\n<p>3）.确保tree-shaking的函数没有副作用</p>\n<p>4）.babelrc中设置presets [[“env”, { “modules”: false }]] 禁止转换模块，交由webpack进行模块化处理</p>\n<p>5）.结合uglifyjs-webpack-plugin</p>\n"},{"title":"linux压缩","date":"2019-09-02T14:46:45.000Z","_content":"\n# tar\n\n```bash\n# 打包\ntar -cvf xx.tar dirName\n# 解包\ntar -xvf  xx.tar\n\n# .gz\n# 解压\ngunzip fileName.gz\ngzip -d fileName.gz\n# 压缩\ngzip fileName\n\n# .tar.gz 和.tgz\n# 解压\ntar zxvf fileName.tar.gz\n# 压缩\ntar zcvf filename.tar.gz dirName\n\n# bz2\n# 解压\nbzip2 -d fileName.bz\nbunzip2 fileName.bz\n\n# .tar.bz\n# 解压\ntar jxvf fileName.tar.bz\n# 压缩\ntar jcvf fileName.tar.bz dirName\n\n```\n\n# zip\n\n```bash\n# 安装\nyum install zip unzip\n\n# 解压\nunzip mydata.zip -d mydatabak\n\n# 压缩\nzip -r abc123.zip abc 123.txt\n```\n\n# rar\n\n```bash\n# 安装\nwget http://www.rarlab.com/rar/rarlinux-x64-5.3.0.tar.gz\ntar -zxvf rarlinux-x64-5.3.0.tar.gz // 对应64位下载的\ncd rar\nmake\n\n# 解压\nrar x fileName.rar\n\n# 压缩\nrar fileName.rar dirName\n```\n\n# 7z\n\n```bash\n# 安装\nyum install p7zip p7zip-plugins\n\n# 压缩\n7za a 压缩包.7z 被压缩文件或目录\n\n# 解压\n#将压缩包解压到指定目录，注意：指定目录参数-o后面不要有空格\n7za x 压缩包.7z -o解压目录\n#将压缩包解压到当前目录\n7za x 压缩包.7z\n```\n\n","source":"_posts/linux压缩.md","raw":"---\ntitle: linux压缩\ndate: 2019-09-02 22:46:45\ntags: linux\n---\n\n# tar\n\n```bash\n# 打包\ntar -cvf xx.tar dirName\n# 解包\ntar -xvf  xx.tar\n\n# .gz\n# 解压\ngunzip fileName.gz\ngzip -d fileName.gz\n# 压缩\ngzip fileName\n\n# .tar.gz 和.tgz\n# 解压\ntar zxvf fileName.tar.gz\n# 压缩\ntar zcvf filename.tar.gz dirName\n\n# bz2\n# 解压\nbzip2 -d fileName.bz\nbunzip2 fileName.bz\n\n# .tar.bz\n# 解压\ntar jxvf fileName.tar.bz\n# 压缩\ntar jcvf fileName.tar.bz dirName\n\n```\n\n# zip\n\n```bash\n# 安装\nyum install zip unzip\n\n# 解压\nunzip mydata.zip -d mydatabak\n\n# 压缩\nzip -r abc123.zip abc 123.txt\n```\n\n# rar\n\n```bash\n# 安装\nwget http://www.rarlab.com/rar/rarlinux-x64-5.3.0.tar.gz\ntar -zxvf rarlinux-x64-5.3.0.tar.gz // 对应64位下载的\ncd rar\nmake\n\n# 解压\nrar x fileName.rar\n\n# 压缩\nrar fileName.rar dirName\n```\n\n# 7z\n\n```bash\n# 安装\nyum install p7zip p7zip-plugins\n\n# 压缩\n7za a 压缩包.7z 被压缩文件或目录\n\n# 解压\n#将压缩包解压到指定目录，注意：指定目录参数-o后面不要有空格\n7za x 压缩包.7z -o解压目录\n#将压缩包解压到当前目录\n7za x 压缩包.7z\n```\n\n","slug":"linux压缩","published":1,"updated":"2019-09-02T15:13:16.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbljv000n4tjejsdkfby6","content":"<h1 id=\"tar\"><a href=\"#tar\" class=\"headerlink\" title=\"tar\"></a>tar</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打包</span></span><br><span class=\"line\">tar -cvf xx.tar dirName</span><br><span class=\"line\"><span class=\"comment\"># 解包</span></span><br><span class=\"line\">tar -xvf  xx.tar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># .gz</span></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">gunzip fileName.gz</span><br><span class=\"line\">gzip -d fileName.gz</span><br><span class=\"line\"><span class=\"comment\"># 压缩</span></span><br><span class=\"line\">gzip fileName</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># .tar.gz 和.tgz</span></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar zxvf fileName.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 压缩</span></span><br><span class=\"line\">tar zcvf filename.tar.gz dirName</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># bz2</span></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">bzip2 -d fileName.bz</span><br><span class=\"line\">bunzip2 fileName.bz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># .tar.bz</span></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar jxvf fileName.tar.bz</span><br><span class=\"line\"><span class=\"comment\"># 压缩</span></span><br><span class=\"line\">tar jcvf fileName.tar.bz dirName</span><br></pre></td></tr></table></figure>\n<h1 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip\"></a>zip</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">yum install zip unzip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">unzip mydata.zip -d mydatabak</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 压缩</span></span><br><span class=\"line\">zip -r abc123.zip abc 123.txt</span><br></pre></td></tr></table></figure>\n<h1 id=\"rar\"><a href=\"#rar\" class=\"headerlink\" title=\"rar\"></a>rar</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">wget http://www.rarlab.com/rar/rarlinux-x64-5.3.0.tar.gz</span><br><span class=\"line\">tar -zxvf rarlinux-x64-5.3.0.tar.gz // 对应64位下载的</span><br><span class=\"line\"><span class=\"built_in\">cd</span> rar</span><br><span class=\"line\">make</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">rar x fileName.rar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 压缩</span></span><br><span class=\"line\">rar fileName.rar dirName</span><br></pre></td></tr></table></figure>\n<h1 id=\"7z\"><a href=\"#7z\" class=\"headerlink\" title=\"7z\"></a>7z</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">yum install p7zip p7zip-plugins</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 压缩</span></span><br><span class=\"line\">7za a 压缩包.7z 被压缩文件或目录</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\"><span class=\"comment\">#将压缩包解压到指定目录，注意：指定目录参数-o后面不要有空格</span></span><br><span class=\"line\">7za x 压缩包.7z -o解压目录</span><br><span class=\"line\"><span class=\"comment\">#将压缩包解压到当前目录</span></span><br><span class=\"line\">7za x 压缩包.7z</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"tar\"><a href=\"#tar\" class=\"headerlink\" title=\"tar\"></a>tar</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打包</span></span><br><span class=\"line\">tar -cvf xx.tar dirName</span><br><span class=\"line\"><span class=\"comment\"># 解包</span></span><br><span class=\"line\">tar -xvf  xx.tar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># .gz</span></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">gunzip fileName.gz</span><br><span class=\"line\">gzip -d fileName.gz</span><br><span class=\"line\"><span class=\"comment\"># 压缩</span></span><br><span class=\"line\">gzip fileName</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># .tar.gz 和.tgz</span></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar zxvf fileName.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 压缩</span></span><br><span class=\"line\">tar zcvf filename.tar.gz dirName</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># bz2</span></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">bzip2 -d fileName.bz</span><br><span class=\"line\">bunzip2 fileName.bz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># .tar.bz</span></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar jxvf fileName.tar.bz</span><br><span class=\"line\"><span class=\"comment\"># 压缩</span></span><br><span class=\"line\">tar jcvf fileName.tar.bz dirName</span><br></pre></td></tr></table></figure>\n<h1 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip\"></a>zip</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">yum install zip unzip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">unzip mydata.zip -d mydatabak</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 压缩</span></span><br><span class=\"line\">zip -r abc123.zip abc 123.txt</span><br></pre></td></tr></table></figure>\n<h1 id=\"rar\"><a href=\"#rar\" class=\"headerlink\" title=\"rar\"></a>rar</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">wget http://www.rarlab.com/rar/rarlinux-x64-5.3.0.tar.gz</span><br><span class=\"line\">tar -zxvf rarlinux-x64-5.3.0.tar.gz // 对应64位下载的</span><br><span class=\"line\"><span class=\"built_in\">cd</span> rar</span><br><span class=\"line\">make</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">rar x fileName.rar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 压缩</span></span><br><span class=\"line\">rar fileName.rar dirName</span><br></pre></td></tr></table></figure>\n<h1 id=\"7z\"><a href=\"#7z\" class=\"headerlink\" title=\"7z\"></a>7z</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">yum install p7zip p7zip-plugins</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 压缩</span></span><br><span class=\"line\">7za a 压缩包.7z 被压缩文件或目录</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\"><span class=\"comment\">#将压缩包解压到指定目录，注意：指定目录参数-o后面不要有空格</span></span><br><span class=\"line\">7za x 压缩包.7z -o解压目录</span><br><span class=\"line\"><span class=\"comment\">#将压缩包解压到当前目录</span></span><br><span class=\"line\">7za x 压缩包.7z</span><br></pre></td></tr></table></figure>\n"},{"title":"makefile编写","date":"2019-04-10T02:27:53.000Z","_content":"\n# 例子\n\n```\n.PHONY: build clean test package package-deb ui api statics requirements ui-requirements serve update-vendor internal/statics internal/migrations static/swagger/api.swagger.json\nPKGS := $(shell go list ./... | grep -v /vendor |grep -v lora-app-server/api | grep -v /migrations | grep -v /static | grep -v /ui)\nVERSION := $(shell git describe --always |sed -e \"s/^v//\")\n\nbuild: ui/build internal/statics internal/migrations\n\tmkdir -p build\n\tgo build $(GO_EXTRA_BUILD_ARGS) -ldflags \"-s -w -X main.version=$(VERSION)\" -o build/lora-app-server cmd/lora-app-server/main.go\n\nclean:\n\t@echo \"Cleaning up workspace\"\n\t@rm -rf build dist internal/migrations internal/static ui/build static/static\n\t@rm -f static/index.html static/icon.png static/manifest.json static/asset-manifest.json static/service-worker.js\n\t@rm -rf static/logo\n\t@rm -rf docs/public\n\t@rm -rf dist\n\ntest: internal/statics internal/migrations\n\t@echo \"Running tests\"\n\t@for pkg in $(PKGS) ; do \\\n\t\tgolint $$pkg ; \\\n\tdone\n\t@go vet $(PKGS)\n\t@go test -p 1 -v $(PKGS)\n\ndocumentation:\n\t@echo \"Building documentation\"\n\t@mkdir -p dist/docs\n\t@cd docs && hugo\n\t@cd docs/public/ && tar -pczf ../../dist/lora-app-server-documentation.tar.gz .\n\ndist: ui/build internal/statics internal/migrations\n\t@goreleaser\n\nbuild-snapshot: ui/build internal/statics internal/migrations\n\t@goreleaser --snapshot\n\npackage-deb: package\n\t@echo \"Building deb package\"\n\t@cd packaging && TARGET=deb ./package.sh\n\nui/build:\n\t@echo \"Building ui\"\n\t@cd ui && npm run build\n\t@mv ui/build/* static\n\napi:\n\t@echo \"Generating API code from .proto files\"\n\t@go generate api/api.go\n\ninternal/statics internal/migrations: static/swagger/api.swagger.json\n\t@echo \"Generating static files\"\n\t@go generate cmd/lora-app-server/main.go\n\n\nstatic/swagger/api.swagger.json:\n\t@echo \"Generating combined Swagger JSON\"\n\t@GOOS=\"\" GOARCH=\"\" go run api/swagger/main.go api/swagger > static/swagger/api.swagger.json\n\t@cp api/swagger/*.json static/swagger\n\n\n# shortcuts for development\n\nrequirements:\n\techo \"Installing development tools\"\n\tgo get -u github.com/golang/lint/golint\n\tgo get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway\n\tgo get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger\n\tgo get -u github.com/golang/protobuf/protoc-gen-go\n\tgo get -u github.com/elazarl/go-bindata-assetfs/...\n\tgo get -u github.com/jteeuwen/go-bindata/...\n\tgo get -u github.com/kisielk/errcheck\n\tgo get -u github.com/smartystreets/goconvey\n\tgo get -u golang.org/x/tools/cmd/stringer\n\tgo get -u github.com/golang/dep/cmd/dep\n\tgo get -u github.com/goreleaser/goreleaser\n\tdep ensure -v\n\nui-requirements:\n\t@echo \"Installing UI requirements\"\n\t@cd ui && npm install\n\nserve: build\n\t@echo \"Starting Lora App Server\"\n\t./build/lora-app-server\n\nupdate-vendor:\n\t@echo \"Updating vendored packages\"\n\t@govendor update +external\n\nrun-compose-test:\n\tdocker-compose run --rm appserver make test\n```\n\n# 文件格式\n\n```\n<target> : <prerequisites> \n[tab]  <commands>\n```\n\n- target：执行的命令或者文件名。如果只是执行的命令这是`伪指令`，在大部分时候使用`.PHONY`声明伪指令，这样不仅仅提供效率，同时也避免和文件名冲突。\n- prerequisites：前置条件。\n- commands：需要执行的命令，\n  - 前面需要添加`[tab]`，如果想要换成其他的，使用`.RECIPEPREFIX = ？`换成你喜欢的。\n  - 执行命令的时候会打印出相关的命令内容，这个叫做`回显`，如果不想显示出来可以在命令前面添加`@`。\n  - 命令执行的时候，每行命令在不同一个shell中执行，如果想在同一个shell中执行，有下面几个办法。\n  - 将命令写在同一行\n  - 在命令后面添加`\\`，实现命令多行\n  - 使用`.ONESHELL:`\n\n# 内置变量\n\nmakefile可以通过`=、:=、?=、+=`给变量赋值，同时Make命令提供一系列内置变量，比如，\\((CC)指向当前使用的编译器，\\)(MAKE) 指向当前使用的Make工具。这主要是为了跨平台的兼容性，详细的内置变量清单见[手册](https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html)。\n\n# 参考\n\nhttps://blog.csdn.net/u010230971/article/details/80335613\n\nhttps://www.cnblogs.com/wang_yb/p/3990952.html\n\nhttp://www.ruanyifeng.com/blog/2015/02/make.html\n\n","source":"_posts/makefile编写.md","raw":"---\ntitle: makefile编写\ndate: 2019-04-10 10:27:53\ntags:\n- go\n---\n\n# 例子\n\n```\n.PHONY: build clean test package package-deb ui api statics requirements ui-requirements serve update-vendor internal/statics internal/migrations static/swagger/api.swagger.json\nPKGS := $(shell go list ./... | grep -v /vendor |grep -v lora-app-server/api | grep -v /migrations | grep -v /static | grep -v /ui)\nVERSION := $(shell git describe --always |sed -e \"s/^v//\")\n\nbuild: ui/build internal/statics internal/migrations\n\tmkdir -p build\n\tgo build $(GO_EXTRA_BUILD_ARGS) -ldflags \"-s -w -X main.version=$(VERSION)\" -o build/lora-app-server cmd/lora-app-server/main.go\n\nclean:\n\t@echo \"Cleaning up workspace\"\n\t@rm -rf build dist internal/migrations internal/static ui/build static/static\n\t@rm -f static/index.html static/icon.png static/manifest.json static/asset-manifest.json static/service-worker.js\n\t@rm -rf static/logo\n\t@rm -rf docs/public\n\t@rm -rf dist\n\ntest: internal/statics internal/migrations\n\t@echo \"Running tests\"\n\t@for pkg in $(PKGS) ; do \\\n\t\tgolint $$pkg ; \\\n\tdone\n\t@go vet $(PKGS)\n\t@go test -p 1 -v $(PKGS)\n\ndocumentation:\n\t@echo \"Building documentation\"\n\t@mkdir -p dist/docs\n\t@cd docs && hugo\n\t@cd docs/public/ && tar -pczf ../../dist/lora-app-server-documentation.tar.gz .\n\ndist: ui/build internal/statics internal/migrations\n\t@goreleaser\n\nbuild-snapshot: ui/build internal/statics internal/migrations\n\t@goreleaser --snapshot\n\npackage-deb: package\n\t@echo \"Building deb package\"\n\t@cd packaging && TARGET=deb ./package.sh\n\nui/build:\n\t@echo \"Building ui\"\n\t@cd ui && npm run build\n\t@mv ui/build/* static\n\napi:\n\t@echo \"Generating API code from .proto files\"\n\t@go generate api/api.go\n\ninternal/statics internal/migrations: static/swagger/api.swagger.json\n\t@echo \"Generating static files\"\n\t@go generate cmd/lora-app-server/main.go\n\n\nstatic/swagger/api.swagger.json:\n\t@echo \"Generating combined Swagger JSON\"\n\t@GOOS=\"\" GOARCH=\"\" go run api/swagger/main.go api/swagger > static/swagger/api.swagger.json\n\t@cp api/swagger/*.json static/swagger\n\n\n# shortcuts for development\n\nrequirements:\n\techo \"Installing development tools\"\n\tgo get -u github.com/golang/lint/golint\n\tgo get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway\n\tgo get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger\n\tgo get -u github.com/golang/protobuf/protoc-gen-go\n\tgo get -u github.com/elazarl/go-bindata-assetfs/...\n\tgo get -u github.com/jteeuwen/go-bindata/...\n\tgo get -u github.com/kisielk/errcheck\n\tgo get -u github.com/smartystreets/goconvey\n\tgo get -u golang.org/x/tools/cmd/stringer\n\tgo get -u github.com/golang/dep/cmd/dep\n\tgo get -u github.com/goreleaser/goreleaser\n\tdep ensure -v\n\nui-requirements:\n\t@echo \"Installing UI requirements\"\n\t@cd ui && npm install\n\nserve: build\n\t@echo \"Starting Lora App Server\"\n\t./build/lora-app-server\n\nupdate-vendor:\n\t@echo \"Updating vendored packages\"\n\t@govendor update +external\n\nrun-compose-test:\n\tdocker-compose run --rm appserver make test\n```\n\n# 文件格式\n\n```\n<target> : <prerequisites> \n[tab]  <commands>\n```\n\n- target：执行的命令或者文件名。如果只是执行的命令这是`伪指令`，在大部分时候使用`.PHONY`声明伪指令，这样不仅仅提供效率，同时也避免和文件名冲突。\n- prerequisites：前置条件。\n- commands：需要执行的命令，\n  - 前面需要添加`[tab]`，如果想要换成其他的，使用`.RECIPEPREFIX = ？`换成你喜欢的。\n  - 执行命令的时候会打印出相关的命令内容，这个叫做`回显`，如果不想显示出来可以在命令前面添加`@`。\n  - 命令执行的时候，每行命令在不同一个shell中执行，如果想在同一个shell中执行，有下面几个办法。\n  - 将命令写在同一行\n  - 在命令后面添加`\\`，实现命令多行\n  - 使用`.ONESHELL:`\n\n# 内置变量\n\nmakefile可以通过`=、:=、?=、+=`给变量赋值，同时Make命令提供一系列内置变量，比如，\\((CC)指向当前使用的编译器，\\)(MAKE) 指向当前使用的Make工具。这主要是为了跨平台的兼容性，详细的内置变量清单见[手册](https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html)。\n\n# 参考\n\nhttps://blog.csdn.net/u010230971/article/details/80335613\n\nhttps://www.cnblogs.com/wang_yb/p/3990952.html\n\nhttp://www.ruanyifeng.com/blog/2015/02/make.html\n\n","slug":"makefile编写","published":1,"updated":"2019-07-22T08:16:14.916Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbljv000o4tjeah0hqalv","content":"<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.PHONY: build clean test package package-deb ui api statics requirements ui-requirements serve update-vendor internal/statics internal/migrations static/swagger/api.swagger.json</span><br><span class=\"line\">PKGS := $(shell go list ./... | grep -v /vendor |grep -v lora-app-server/api | grep -v /migrations | grep -v /static | grep -v /ui)</span><br><span class=\"line\">VERSION := $(shell git describe --always |sed -e &quot;s/^v//&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">build: ui/build internal/statics internal/migrations</span><br><span class=\"line\">\tmkdir -p build</span><br><span class=\"line\">\tgo build $(GO_EXTRA_BUILD_ARGS) -ldflags &quot;-s -w -X main.version=$(VERSION)&quot; -o build/lora-app-server cmd/lora-app-server/main.go</span><br><span class=\"line\"></span><br><span class=\"line\">clean:</span><br><span class=\"line\">\t@echo &quot;Cleaning up workspace&quot;</span><br><span class=\"line\">\t@rm -rf build dist internal/migrations internal/static ui/build static/static</span><br><span class=\"line\">\t@rm -f static/index.html static/icon.png static/manifest.json static/asset-manifest.json static/service-worker.js</span><br><span class=\"line\">\t@rm -rf static/logo</span><br><span class=\"line\">\t@rm -rf docs/public</span><br><span class=\"line\">\t@rm -rf dist</span><br><span class=\"line\"></span><br><span class=\"line\">test: internal/statics internal/migrations</span><br><span class=\"line\">\t@echo &quot;Running tests&quot;</span><br><span class=\"line\">\t@for pkg in $(PKGS) ; do \\</span><br><span class=\"line\">\t\tgolint $$pkg ; \\</span><br><span class=\"line\">\tdone</span><br><span class=\"line\">\t@go vet $(PKGS)</span><br><span class=\"line\">\t@go test -p 1 -v $(PKGS)</span><br><span class=\"line\"></span><br><span class=\"line\">documentation:</span><br><span class=\"line\">\t@echo &quot;Building documentation&quot;</span><br><span class=\"line\">\t@mkdir -p dist/docs</span><br><span class=\"line\">\t@cd docs &amp;&amp; hugo</span><br><span class=\"line\">\t@cd docs/public/ &amp;&amp; tar -pczf ../../dist/lora-app-server-documentation.tar.gz .</span><br><span class=\"line\"></span><br><span class=\"line\">dist: ui/build internal/statics internal/migrations</span><br><span class=\"line\">\t@goreleaser</span><br><span class=\"line\"></span><br><span class=\"line\">build-snapshot: ui/build internal/statics internal/migrations</span><br><span class=\"line\">\t@goreleaser --snapshot</span><br><span class=\"line\"></span><br><span class=\"line\">package-deb: package</span><br><span class=\"line\">\t@echo &quot;Building deb package&quot;</span><br><span class=\"line\">\t@cd packaging &amp;&amp; TARGET=deb ./package.sh</span><br><span class=\"line\"></span><br><span class=\"line\">ui/build:</span><br><span class=\"line\">\t@echo &quot;Building ui&quot;</span><br><span class=\"line\">\t@cd ui &amp;&amp; npm run build</span><br><span class=\"line\">\t@mv ui/build/* static</span><br><span class=\"line\"></span><br><span class=\"line\">api:</span><br><span class=\"line\">\t@echo &quot;Generating API code from .proto files&quot;</span><br><span class=\"line\">\t@go generate api/api.go</span><br><span class=\"line\"></span><br><span class=\"line\">internal/statics internal/migrations: static/swagger/api.swagger.json</span><br><span class=\"line\">\t@echo &quot;Generating static files&quot;</span><br><span class=\"line\">\t@go generate cmd/lora-app-server/main.go</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">static/swagger/api.swagger.json:</span><br><span class=\"line\">\t@echo &quot;Generating combined Swagger JSON&quot;</span><br><span class=\"line\">\t@GOOS=&quot;&quot; GOARCH=&quot;&quot; go run api/swagger/main.go api/swagger &gt; static/swagger/api.swagger.json</span><br><span class=\"line\">\t@cp api/swagger/*.json static/swagger</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># shortcuts for development</span><br><span class=\"line\"></span><br><span class=\"line\">requirements:</span><br><span class=\"line\">\techo &quot;Installing development tools&quot;</span><br><span class=\"line\">\tgo get -u github.com/golang/lint/golint</span><br><span class=\"line\">\tgo get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway</span><br><span class=\"line\">\tgo get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger</span><br><span class=\"line\">\tgo get -u github.com/golang/protobuf/protoc-gen-go</span><br><span class=\"line\">\tgo get -u github.com/elazarl/go-bindata-assetfs/...</span><br><span class=\"line\">\tgo get -u github.com/jteeuwen/go-bindata/...</span><br><span class=\"line\">\tgo get -u github.com/kisielk/errcheck</span><br><span class=\"line\">\tgo get -u github.com/smartystreets/goconvey</span><br><span class=\"line\">\tgo get -u golang.org/x/tools/cmd/stringer</span><br><span class=\"line\">\tgo get -u github.com/golang/dep/cmd/dep</span><br><span class=\"line\">\tgo get -u github.com/goreleaser/goreleaser</span><br><span class=\"line\">\tdep ensure -v</span><br><span class=\"line\"></span><br><span class=\"line\">ui-requirements:</span><br><span class=\"line\">\t@echo &quot;Installing UI requirements&quot;</span><br><span class=\"line\">\t@cd ui &amp;&amp; npm install</span><br><span class=\"line\"></span><br><span class=\"line\">serve: build</span><br><span class=\"line\">\t@echo &quot;Starting Lora App Server&quot;</span><br><span class=\"line\">\t./build/lora-app-server</span><br><span class=\"line\"></span><br><span class=\"line\">update-vendor:</span><br><span class=\"line\">\t@echo &quot;Updating vendored packages&quot;</span><br><span class=\"line\">\t@govendor update +external</span><br><span class=\"line\"></span><br><span class=\"line\">run-compose-test:</span><br><span class=\"line\">\tdocker-compose run --rm appserver make test</span><br></pre></td></tr></table></figure>\n<h1 id=\"文件格式\"><a href=\"#文件格式\" class=\"headerlink\" title=\"文件格式\"></a>文件格式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;target&gt; : &lt;prerequisites&gt; </span><br><span class=\"line\">[tab]  &lt;commands&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>target：执行的命令或者文件名。如果只是执行的命令这是<code>伪指令</code>，在大部分时候使用<code>.PHONY</code>声明伪指令，这样不仅仅提供效率，同时也避免和文件名冲突。</li>\n<li>prerequisites：前置条件。</li>\n<li>commands：需要执行的命令，<ul>\n<li>前面需要添加<code>[tab]</code>，如果想要换成其他的，使用<code>.RECIPEPREFIX = ？</code>换成你喜欢的。</li>\n<li>执行命令的时候会打印出相关的命令内容，这个叫做<code>回显</code>，如果不想显示出来可以在命令前面添加<code>@</code>。</li>\n<li>命令执行的时候，每行命令在不同一个shell中执行，如果想在同一个shell中执行，有下面几个办法。</li>\n<li>将命令写在同一行</li>\n<li>在命令后面添加<code>\\</code>，实现命令多行</li>\n<li>使用<code>.ONESHELL:</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"内置变量\"><a href=\"#内置变量\" class=\"headerlink\" title=\"内置变量\"></a>内置变量</h1><p>makefile可以通过<code>=、:=、?=、+=</code>给变量赋值，同时Make命令提供一系列内置变量，比如，((CC)指向当前使用的编译器，)(MAKE) 指向当前使用的Make工具。这主要是为了跨平台的兼容性，详细的内置变量清单见<a href=\"https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html\" target=\"_blank\" rel=\"noopener\">手册</a>。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/u010230971/article/details/80335613\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010230971/article/details/80335613</a></p>\n<p><a href=\"https://www.cnblogs.com/wang_yb/p/3990952.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/wang_yb/p/3990952.html</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2015/02/make.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/02/make.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.PHONY: build clean test package package-deb ui api statics requirements ui-requirements serve update-vendor internal/statics internal/migrations static/swagger/api.swagger.json</span><br><span class=\"line\">PKGS := $(shell go list ./... | grep -v /vendor |grep -v lora-app-server/api | grep -v /migrations | grep -v /static | grep -v /ui)</span><br><span class=\"line\">VERSION := $(shell git describe --always |sed -e &quot;s/^v//&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">build: ui/build internal/statics internal/migrations</span><br><span class=\"line\">\tmkdir -p build</span><br><span class=\"line\">\tgo build $(GO_EXTRA_BUILD_ARGS) -ldflags &quot;-s -w -X main.version=$(VERSION)&quot; -o build/lora-app-server cmd/lora-app-server/main.go</span><br><span class=\"line\"></span><br><span class=\"line\">clean:</span><br><span class=\"line\">\t@echo &quot;Cleaning up workspace&quot;</span><br><span class=\"line\">\t@rm -rf build dist internal/migrations internal/static ui/build static/static</span><br><span class=\"line\">\t@rm -f static/index.html static/icon.png static/manifest.json static/asset-manifest.json static/service-worker.js</span><br><span class=\"line\">\t@rm -rf static/logo</span><br><span class=\"line\">\t@rm -rf docs/public</span><br><span class=\"line\">\t@rm -rf dist</span><br><span class=\"line\"></span><br><span class=\"line\">test: internal/statics internal/migrations</span><br><span class=\"line\">\t@echo &quot;Running tests&quot;</span><br><span class=\"line\">\t@for pkg in $(PKGS) ; do \\</span><br><span class=\"line\">\t\tgolint $$pkg ; \\</span><br><span class=\"line\">\tdone</span><br><span class=\"line\">\t@go vet $(PKGS)</span><br><span class=\"line\">\t@go test -p 1 -v $(PKGS)</span><br><span class=\"line\"></span><br><span class=\"line\">documentation:</span><br><span class=\"line\">\t@echo &quot;Building documentation&quot;</span><br><span class=\"line\">\t@mkdir -p dist/docs</span><br><span class=\"line\">\t@cd docs &amp;&amp; hugo</span><br><span class=\"line\">\t@cd docs/public/ &amp;&amp; tar -pczf ../../dist/lora-app-server-documentation.tar.gz .</span><br><span class=\"line\"></span><br><span class=\"line\">dist: ui/build internal/statics internal/migrations</span><br><span class=\"line\">\t@goreleaser</span><br><span class=\"line\"></span><br><span class=\"line\">build-snapshot: ui/build internal/statics internal/migrations</span><br><span class=\"line\">\t@goreleaser --snapshot</span><br><span class=\"line\"></span><br><span class=\"line\">package-deb: package</span><br><span class=\"line\">\t@echo &quot;Building deb package&quot;</span><br><span class=\"line\">\t@cd packaging &amp;&amp; TARGET=deb ./package.sh</span><br><span class=\"line\"></span><br><span class=\"line\">ui/build:</span><br><span class=\"line\">\t@echo &quot;Building ui&quot;</span><br><span class=\"line\">\t@cd ui &amp;&amp; npm run build</span><br><span class=\"line\">\t@mv ui/build/* static</span><br><span class=\"line\"></span><br><span class=\"line\">api:</span><br><span class=\"line\">\t@echo &quot;Generating API code from .proto files&quot;</span><br><span class=\"line\">\t@go generate api/api.go</span><br><span class=\"line\"></span><br><span class=\"line\">internal/statics internal/migrations: static/swagger/api.swagger.json</span><br><span class=\"line\">\t@echo &quot;Generating static files&quot;</span><br><span class=\"line\">\t@go generate cmd/lora-app-server/main.go</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">static/swagger/api.swagger.json:</span><br><span class=\"line\">\t@echo &quot;Generating combined Swagger JSON&quot;</span><br><span class=\"line\">\t@GOOS=&quot;&quot; GOARCH=&quot;&quot; go run api/swagger/main.go api/swagger &gt; static/swagger/api.swagger.json</span><br><span class=\"line\">\t@cp api/swagger/*.json static/swagger</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># shortcuts for development</span><br><span class=\"line\"></span><br><span class=\"line\">requirements:</span><br><span class=\"line\">\techo &quot;Installing development tools&quot;</span><br><span class=\"line\">\tgo get -u github.com/golang/lint/golint</span><br><span class=\"line\">\tgo get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway</span><br><span class=\"line\">\tgo get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger</span><br><span class=\"line\">\tgo get -u github.com/golang/protobuf/protoc-gen-go</span><br><span class=\"line\">\tgo get -u github.com/elazarl/go-bindata-assetfs/...</span><br><span class=\"line\">\tgo get -u github.com/jteeuwen/go-bindata/...</span><br><span class=\"line\">\tgo get -u github.com/kisielk/errcheck</span><br><span class=\"line\">\tgo get -u github.com/smartystreets/goconvey</span><br><span class=\"line\">\tgo get -u golang.org/x/tools/cmd/stringer</span><br><span class=\"line\">\tgo get -u github.com/golang/dep/cmd/dep</span><br><span class=\"line\">\tgo get -u github.com/goreleaser/goreleaser</span><br><span class=\"line\">\tdep ensure -v</span><br><span class=\"line\"></span><br><span class=\"line\">ui-requirements:</span><br><span class=\"line\">\t@echo &quot;Installing UI requirements&quot;</span><br><span class=\"line\">\t@cd ui &amp;&amp; npm install</span><br><span class=\"line\"></span><br><span class=\"line\">serve: build</span><br><span class=\"line\">\t@echo &quot;Starting Lora App Server&quot;</span><br><span class=\"line\">\t./build/lora-app-server</span><br><span class=\"line\"></span><br><span class=\"line\">update-vendor:</span><br><span class=\"line\">\t@echo &quot;Updating vendored packages&quot;</span><br><span class=\"line\">\t@govendor update +external</span><br><span class=\"line\"></span><br><span class=\"line\">run-compose-test:</span><br><span class=\"line\">\tdocker-compose run --rm appserver make test</span><br></pre></td></tr></table></figure>\n<h1 id=\"文件格式\"><a href=\"#文件格式\" class=\"headerlink\" title=\"文件格式\"></a>文件格式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;target&gt; : &lt;prerequisites&gt; </span><br><span class=\"line\">[tab]  &lt;commands&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>target：执行的命令或者文件名。如果只是执行的命令这是<code>伪指令</code>，在大部分时候使用<code>.PHONY</code>声明伪指令，这样不仅仅提供效率，同时也避免和文件名冲突。</li>\n<li>prerequisites：前置条件。</li>\n<li>commands：需要执行的命令，<ul>\n<li>前面需要添加<code>[tab]</code>，如果想要换成其他的，使用<code>.RECIPEPREFIX = ？</code>换成你喜欢的。</li>\n<li>执行命令的时候会打印出相关的命令内容，这个叫做<code>回显</code>，如果不想显示出来可以在命令前面添加<code>@</code>。</li>\n<li>命令执行的时候，每行命令在不同一个shell中执行，如果想在同一个shell中执行，有下面几个办法。</li>\n<li>将命令写在同一行</li>\n<li>在命令后面添加<code>\\</code>，实现命令多行</li>\n<li>使用<code>.ONESHELL:</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"内置变量\"><a href=\"#内置变量\" class=\"headerlink\" title=\"内置变量\"></a>内置变量</h1><p>makefile可以通过<code>=、:=、?=、+=</code>给变量赋值，同时Make命令提供一系列内置变量，比如，((CC)指向当前使用的编译器，)(MAKE) 指向当前使用的Make工具。这主要是为了跨平台的兼容性，详细的内置变量清单见<a href=\"https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html\" target=\"_blank\" rel=\"noopener\">手册</a>。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/u010230971/article/details/80335613\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010230971/article/details/80335613</a></p>\n<p><a href=\"https://www.cnblogs.com/wang_yb/p/3990952.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/wang_yb/p/3990952.html</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2015/02/make.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/02/make.html</a></p>\n"},{"title":"pm2学习","date":"2019-11-02T02:10:05.000Z","_content":"\n# pm2基本命令\n\n```bash\n# 启动程序\npm2 start app.js\npm2 start npm --name pro -- run dev\n\n# 查看程序\npm2 start list\npm2 monit\npm2 logs\n\n# 重启\npm2 restart all\npm2 reload all\npm2 restartt 0\n\n# 停止\npm2 stop all\npm2 stop 0\n\n# 杀死\npm2 delete all\npm2 delete 0\n\n# 集群\npm2 start app.js -i max # 根据cpu数目启动线程\npm2 start app.js -i 3 # 启动3个进程\npm2 start app.js -x  # 使用fork模式启动\npm2 start app.json\n```\n\n# 日志问题\n\n日志系统对于任意应用而言，通常都是必不可少的一个辅助功能。pm2的相关文件默认存放于$HOME/.pm2/目录下，其日志主要有两类：\n\na. pm2自身的日志，存放于$HOME/.pm2/pm2.log；\n\nb. pm2所管理的应用的日志，存放于$HOME/.pm2/logs/目录下，标准谁出日志存放于${APP_NAME}_out.log，标准错误日志存放于${APP_NAME}_error.log；\n\n这里之所以把日志单独说明一下是因为，如果程序开发不严谨，为了调试程序，导致应用产生大量标准输出，使服务器本身记录大量的日志，导致服务磁盘满载问题。一般而言，pm2管理的应用本身都有自己日志系统，所以对于这种不必要的输出内容需禁用日志，重定向到/dev/null。\n\n与crontab比较，也有类似情况，crontab自身日志，与其管理的应用本身的输出。应用脚本输出一定需要重定向到/dev/null，因为该输出内容会以邮件的形式发送给用户，内容存储在邮件文件，会产生意向不到的结果，或会导致脚本压根不被执行；\n\n# 开机启动\n\n```bash\npm2 startup\nsystemctl enable pm2-root\n```\n\n\n\n# 参考\n\n<https://pm2.keymetrics.io/docs/usage/monitoring/>","source":"_posts/pm2学习.md","raw":"---\ntitle: pm2学习\ndate: 2019-11-02 10:10:05\ntags:\n- node\n---\n\n# pm2基本命令\n\n```bash\n# 启动程序\npm2 start app.js\npm2 start npm --name pro -- run dev\n\n# 查看程序\npm2 start list\npm2 monit\npm2 logs\n\n# 重启\npm2 restart all\npm2 reload all\npm2 restartt 0\n\n# 停止\npm2 stop all\npm2 stop 0\n\n# 杀死\npm2 delete all\npm2 delete 0\n\n# 集群\npm2 start app.js -i max # 根据cpu数目启动线程\npm2 start app.js -i 3 # 启动3个进程\npm2 start app.js -x  # 使用fork模式启动\npm2 start app.json\n```\n\n# 日志问题\n\n日志系统对于任意应用而言，通常都是必不可少的一个辅助功能。pm2的相关文件默认存放于$HOME/.pm2/目录下，其日志主要有两类：\n\na. pm2自身的日志，存放于$HOME/.pm2/pm2.log；\n\nb. pm2所管理的应用的日志，存放于$HOME/.pm2/logs/目录下，标准谁出日志存放于${APP_NAME}_out.log，标准错误日志存放于${APP_NAME}_error.log；\n\n这里之所以把日志单独说明一下是因为，如果程序开发不严谨，为了调试程序，导致应用产生大量标准输出，使服务器本身记录大量的日志，导致服务磁盘满载问题。一般而言，pm2管理的应用本身都有自己日志系统，所以对于这种不必要的输出内容需禁用日志，重定向到/dev/null。\n\n与crontab比较，也有类似情况，crontab自身日志，与其管理的应用本身的输出。应用脚本输出一定需要重定向到/dev/null，因为该输出内容会以邮件的形式发送给用户，内容存储在邮件文件，会产生意向不到的结果，或会导致脚本压根不被执行；\n\n# 开机启动\n\n```bash\npm2 startup\nsystemctl enable pm2-root\n```\n\n\n\n# 参考\n\n<https://pm2.keymetrics.io/docs/usage/monitoring/>","slug":"pm2学习","published":1,"updated":"2020-08-27T15:25:48.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbljw000p4tje5ffzc76f","content":"<h1 id=\"pm2基本命令\"><a href=\"#pm2基本命令\" class=\"headerlink\" title=\"pm2基本命令\"></a>pm2基本命令</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动程序</span></span><br><span class=\"line\">pm2 start app.js</span><br><span class=\"line\">pm2 start npm --name pro -- run dev</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看程序</span></span><br><span class=\"line\">pm2 start list</span><br><span class=\"line\">pm2 monit</span><br><span class=\"line\">pm2 logs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">pm2 restart all</span><br><span class=\"line\">pm2 reload all</span><br><span class=\"line\">pm2 restartt 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止</span></span><br><span class=\"line\">pm2 stop all</span><br><span class=\"line\">pm2 stop 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 杀死</span></span><br><span class=\"line\">pm2 delete all</span><br><span class=\"line\">pm2 delete 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 集群</span></span><br><span class=\"line\">pm2 start app.js -i max <span class=\"comment\"># 根据cpu数目启动线程</span></span><br><span class=\"line\">pm2 start app.js -i 3 <span class=\"comment\"># 启动3个进程</span></span><br><span class=\"line\">pm2 start app.js -x  <span class=\"comment\"># 使用fork模式启动</span></span><br><span class=\"line\">pm2 start app.json</span><br></pre></td></tr></table></figure>\n<h1 id=\"日志问题\"><a href=\"#日志问题\" class=\"headerlink\" title=\"日志问题\"></a>日志问题</h1><p>日志系统对于任意应用而言，通常都是必不可少的一个辅助功能。pm2的相关文件默认存放于$HOME/.pm2/目录下，其日志主要有两类：</p>\n<p>a. pm2自身的日志，存放于$HOME/.pm2/pm2.log；</p>\n<p>b. pm2所管理的应用的日志，存放于$HOME/.pm2/logs/目录下，标准谁出日志存放于${APP_NAME}_out.log，标准错误日志存放于${APP_NAME}_error.log；</p>\n<p>这里之所以把日志单独说明一下是因为，如果程序开发不严谨，为了调试程序，导致应用产生大量标准输出，使服务器本身记录大量的日志，导致服务磁盘满载问题。一般而言，pm2管理的应用本身都有自己日志系统，所以对于这种不必要的输出内容需禁用日志，重定向到/dev/null。</p>\n<p>与crontab比较，也有类似情况，crontab自身日志，与其管理的应用本身的输出。应用脚本输出一定需要重定向到/dev/null，因为该输出内容会以邮件的形式发送给用户，内容存储在邮件文件，会产生意向不到的结果，或会导致脚本压根不被执行；</p>\n<h1 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 startup</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> pm2-root</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://pm2.keymetrics.io/docs/usage/monitoring/\" target=\"_blank\" rel=\"noopener\">https://pm2.keymetrics.io/docs/usage/monitoring/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"pm2基本命令\"><a href=\"#pm2基本命令\" class=\"headerlink\" title=\"pm2基本命令\"></a>pm2基本命令</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动程序</span></span><br><span class=\"line\">pm2 start app.js</span><br><span class=\"line\">pm2 start npm --name pro -- run dev</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看程序</span></span><br><span class=\"line\">pm2 start list</span><br><span class=\"line\">pm2 monit</span><br><span class=\"line\">pm2 logs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">pm2 restart all</span><br><span class=\"line\">pm2 reload all</span><br><span class=\"line\">pm2 restartt 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止</span></span><br><span class=\"line\">pm2 stop all</span><br><span class=\"line\">pm2 stop 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 杀死</span></span><br><span class=\"line\">pm2 delete all</span><br><span class=\"line\">pm2 delete 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 集群</span></span><br><span class=\"line\">pm2 start app.js -i max <span class=\"comment\"># 根据cpu数目启动线程</span></span><br><span class=\"line\">pm2 start app.js -i 3 <span class=\"comment\"># 启动3个进程</span></span><br><span class=\"line\">pm2 start app.js -x  <span class=\"comment\"># 使用fork模式启动</span></span><br><span class=\"line\">pm2 start app.json</span><br></pre></td></tr></table></figure>\n<h1 id=\"日志问题\"><a href=\"#日志问题\" class=\"headerlink\" title=\"日志问题\"></a>日志问题</h1><p>日志系统对于任意应用而言，通常都是必不可少的一个辅助功能。pm2的相关文件默认存放于$HOME/.pm2/目录下，其日志主要有两类：</p>\n<p>a. pm2自身的日志，存放于$HOME/.pm2/pm2.log；</p>\n<p>b. pm2所管理的应用的日志，存放于$HOME/.pm2/logs/目录下，标准谁出日志存放于${APP_NAME}_out.log，标准错误日志存放于${APP_NAME}_error.log；</p>\n<p>这里之所以把日志单独说明一下是因为，如果程序开发不严谨，为了调试程序，导致应用产生大量标准输出，使服务器本身记录大量的日志，导致服务磁盘满载问题。一般而言，pm2管理的应用本身都有自己日志系统，所以对于这种不必要的输出内容需禁用日志，重定向到/dev/null。</p>\n<p>与crontab比较，也有类似情况，crontab自身日志，与其管理的应用本身的输出。应用脚本输出一定需要重定向到/dev/null，因为该输出内容会以邮件的形式发送给用户，内容存储在邮件文件，会产生意向不到的结果，或会导致脚本压根不被执行；</p>\n<h1 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 startup</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> pm2-root</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://pm2.keymetrics.io/docs/usage/monitoring/\" target=\"_blank\" rel=\"noopener\">https://pm2.keymetrics.io/docs/usage/monitoring/</a></p>\n"},{"title":"php5环境搭建","date":"2019-09-02T15:14:11.000Z","_content":"\n# 安装nginx\n\n```bash\nyum install epel-release\nyum install nginx\n\n```\n\n# 安装php\n\nremi源可以获取更高的版本，php-fpm是要启动的\n\n```bash\nrpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm\nyum install --enablerepo=remi --enablerepo=remi-php56 php php-fpm\nyum install --enablerepo=remi --enablerepo=remi-php56 php-opcache php-mbstring php-mysql* php-gd php-redis php-mcrypt php-xml php-redis\n```\n\n# nginx配置\n\n```nginx\nserver {\n    listen       80;\n    server_name  www.test.com test.com;\n    root     /data/www/Public;\n    index  index.php index.html;\n\n    location / {\n            try_files $uri $uri/ /index.php?$args;\n    }\n    location ~ index.php {\n        fastcgi_connect_timeout 20s;     # default of 60s is just too long\n        fastcgi_read_timeout 20s;       # default of 60s is just too long\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_pass 127.0.0.1:9000;    # assumes you are running php-fpm locally on port 9000\n        fastcgi_param  PHP_VALUE  \"open_basedir=/data/www/:/data/www/Data:/tmp/\";\n    }\n}\n```\n\n# 开启php的日志\n\n1. 修改 php-fpm.conf 文件，添加（或修改）如下配置：\n\n   ```nginx\n   [global]\n     error_log = log/error_log\n   \n     [www]\n     catch_workers_output = yes\n   ```\n\n2. 修改 php.ini 文件，添加（或修改）如下配置：\n\n   ```\n     log_errors = On\n     error_log = \"/usr/local/lnmp/php/var/log/error_log\"\n     error_reporting=E_ALL&~E_NOTICE\n   ```\n\n3. 重启 php-fpm ","source":"_posts/php5环境搭建.md","raw":"---\ntitle: php5环境搭建\ndate: 2019-09-02 23:14:11\ntags:\n---\n\n# 安装nginx\n\n```bash\nyum install epel-release\nyum install nginx\n\n```\n\n# 安装php\n\nremi源可以获取更高的版本，php-fpm是要启动的\n\n```bash\nrpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm\nyum install --enablerepo=remi --enablerepo=remi-php56 php php-fpm\nyum install --enablerepo=remi --enablerepo=remi-php56 php-opcache php-mbstring php-mysql* php-gd php-redis php-mcrypt php-xml php-redis\n```\n\n# nginx配置\n\n```nginx\nserver {\n    listen       80;\n    server_name  www.test.com test.com;\n    root     /data/www/Public;\n    index  index.php index.html;\n\n    location / {\n            try_files $uri $uri/ /index.php?$args;\n    }\n    location ~ index.php {\n        fastcgi_connect_timeout 20s;     # default of 60s is just too long\n        fastcgi_read_timeout 20s;       # default of 60s is just too long\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_pass 127.0.0.1:9000;    # assumes you are running php-fpm locally on port 9000\n        fastcgi_param  PHP_VALUE  \"open_basedir=/data/www/:/data/www/Data:/tmp/\";\n    }\n}\n```\n\n# 开启php的日志\n\n1. 修改 php-fpm.conf 文件，添加（或修改）如下配置：\n\n   ```nginx\n   [global]\n     error_log = log/error_log\n   \n     [www]\n     catch_workers_output = yes\n   ```\n\n2. 修改 php.ini 文件，添加（或修改）如下配置：\n\n   ```\n     log_errors = On\n     error_log = \"/usr/local/lnmp/php/var/log/error_log\"\n     error_reporting=E_ALL&~E_NOTICE\n   ```\n\n3. 重启 php-fpm ","slug":"php5环境搭建","published":1,"updated":"2019-09-02T15:20:22.393Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbljx000s4tje1rdu0yjy","content":"<h1 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install epel-release</span><br><span class=\"line\">yum install nginx</span><br></pre></td></tr></table></figure>\n<h1 id=\"安装php\"><a href=\"#安装php\" class=\"headerlink\" title=\"安装php\"></a>安装php</h1><p>remi源可以获取更高的版本，php-fpm是要启动的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm</span><br><span class=\"line\">yum install --enablerepo=remi --enablerepo=remi-php56 php php-fpm</span><br><span class=\"line\">yum install --enablerepo=remi --enablerepo=remi-php56 php-opcache php-mbstring php-mysql* php-gd php-redis php-mcrypt php-xml php-redis</span><br></pre></td></tr></table></figure>\n<h1 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h1><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  www.test.com test.com;</span><br><span class=\"line\">    <span class=\"attribute\">root</span>     /data/www/Public;</span><br><span class=\"line\">    <span class=\"attribute\">index</span>  index.php index.html;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">            <span class=\"attribute\">try_files</span> <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ /index.php?<span class=\"variable\">$args</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> <span class=\"regexp\">~ index.php</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_connect_timeout</span> <span class=\"number\">20s</span>;     <span class=\"comment\"># default of 60s is just too long</span></span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_read_timeout</span> <span class=\"number\">20s</span>;       <span class=\"comment\"># default of 60s is just too long</span></span><br><span class=\"line\">        <span class=\"attribute\">include</span> fastcgi_params;</span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_param</span> SCRIPT_FILENAME <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_pass</span> <span class=\"number\">127.0.0.1:9000</span>;    <span class=\"comment\"># assumes you are running php-fpm locally on port 9000</span></span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_param</span>  PHP_VALUE  <span class=\"string\">\"open_basedir=/data/www/:/data/www/Data:/tmp/\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"开启php的日志\"><a href=\"#开启php的日志\" class=\"headerlink\" title=\"开启php的日志\"></a>开启php的日志</h1><ol>\n<li><p>修改 php-fpm.conf 文件，添加（或修改）如下配置：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">  <span class=\"attribute\">error_log</span> = log/error_log</span><br><span class=\"line\"></span><br><span class=\"line\">  [www]</span><br><span class=\"line\">  catch_workers_output = <span class=\"literal\">yes</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改 php.ini 文件，添加（或修改）如下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_errors = On</span><br><span class=\"line\">error_log = &quot;/usr/local/lnmp/php/var/log/error_log&quot;</span><br><span class=\"line\">error_reporting=E_ALL&amp;~E_NOTICE</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启 php-fpm </p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install epel-release</span><br><span class=\"line\">yum install nginx</span><br></pre></td></tr></table></figure>\n<h1 id=\"安装php\"><a href=\"#安装php\" class=\"headerlink\" title=\"安装php\"></a>安装php</h1><p>remi源可以获取更高的版本，php-fpm是要启动的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm</span><br><span class=\"line\">yum install --enablerepo=remi --enablerepo=remi-php56 php php-fpm</span><br><span class=\"line\">yum install --enablerepo=remi --enablerepo=remi-php56 php-opcache php-mbstring php-mysql* php-gd php-redis php-mcrypt php-xml php-redis</span><br></pre></td></tr></table></figure>\n<h1 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h1><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  www.test.com test.com;</span><br><span class=\"line\">    <span class=\"attribute\">root</span>     /data/www/Public;</span><br><span class=\"line\">    <span class=\"attribute\">index</span>  index.php index.html;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">            <span class=\"attribute\">try_files</span> <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ /index.php?<span class=\"variable\">$args</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> <span class=\"regexp\">~ index.php</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_connect_timeout</span> <span class=\"number\">20s</span>;     <span class=\"comment\"># default of 60s is just too long</span></span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_read_timeout</span> <span class=\"number\">20s</span>;       <span class=\"comment\"># default of 60s is just too long</span></span><br><span class=\"line\">        <span class=\"attribute\">include</span> fastcgi_params;</span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_param</span> SCRIPT_FILENAME <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_pass</span> <span class=\"number\">127.0.0.1:9000</span>;    <span class=\"comment\"># assumes you are running php-fpm locally on port 9000</span></span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_param</span>  PHP_VALUE  <span class=\"string\">\"open_basedir=/data/www/:/data/www/Data:/tmp/\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"开启php的日志\"><a href=\"#开启php的日志\" class=\"headerlink\" title=\"开启php的日志\"></a>开启php的日志</h1><ol>\n<li><p>修改 php-fpm.conf 文件，添加（或修改）如下配置：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">  <span class=\"attribute\">error_log</span> = log/error_log</span><br><span class=\"line\"></span><br><span class=\"line\">  [www]</span><br><span class=\"line\">  catch_workers_output = <span class=\"literal\">yes</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改 php.ini 文件，添加（或修改）如下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_errors = On</span><br><span class=\"line\">error_log = &quot;/usr/local/lnmp/php/var/log/error_log&quot;</span><br><span class=\"line\">error_reporting=E_ALL&amp;~E_NOTICE</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启 php-fpm </p>\n</li>\n</ol>\n"},{"title":"protobuf使用","date":"2019-04-10T02:31:04.000Z","_content":"\n# 安装\n\n```\nwget https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protobuf-all-3.6.1.zip\nunzop protobuf-all-3.6.1.zip\ncd protobuf-all-3.6.1\n./configure && make && make install\n```\n\n# 语法规则\n\n```\n// 声明版本，默认是proto2\nsyntax = \"proto3\";\n\n// 声明包名\npackage tutorial\noption java_package = \"com.example.tutorial\";\n// java类名\noption java_outer_classname = \"AddressBookProtos\";\n\nmessage Person {\n    required string name =1;\n    required int32 id = 2;\n    optional string email = 3;\n    \n    enum PhoneType {\n        MOBILE = 0;\n        HOME = 1;\n        WORK = 2;\n    }\n    \n    message PhoneNumber {\n        required string number = 1;\n        optional PhoneType type = 2[default = HOME]; \n    }\n    repeated PhoneNumber phones = 4;\n}\n\nmessage AddressBook {\n    repreated Person people = 1;\n}\n\n// 保留字段，编程过程中某些功能没有想好，可以先把该tag 进行保留，以备以后使用。\nmessage Foo {\n  reserved 2, 15, 9 to 11;\n  reserved \"foo\", \"bar\";\n}\n```\n\n# 编码\n\n> https://blog.csdn.net/zxhoo/article/details/53228303\n\n# 方法\n\n1. Standard Message Methods\n\n- `isInitialized()`: checks if all the required fields have been set.\n- `toString()`: returns a human-readable representation of the message, particularly useful for debugging.\n- `mergeFrom(Message other)`: (builder only) merges the contents of `other` into this message, overwriting singular scalar fields, merging composite fields, and concatenating repeated fields.\n- `clear()`: (builder only) clears all the fields back to the empty state.\n\n1. Parsing and Serialization\n\n- `byte[] toByteArray();`: serializes the message and returns a byte array containing its raw bytes.\n- `static Person parseFrom(byte[] data);`: parses a message from the given byte array.\n- `void writeTo(OutputStream output);`: serializes the message and writes it to an `OutputStream`.\n- `static Person parseFrom(InputStream input);`: reads and parses a message from an `InputStream`.\n\n# 编译\n\n# 注意\n\n1. 升级协议\n\n- you *must not* change the tag numbers of any existing fields.\n- you *must not* add or delete any required fields.\n- you *may* delete optional or repeated fields.\n- you *may* add new optional or repeated fields but you must use fresh tag numbers (i.e. tag numbers that were never used in this protocol buffer, not even by deleted fields).\n\n1. protobuf对repeated压缩不够好，所以尽量在后面加上[packed = true]。\n2. 不要让protobuf对象成为全局变量或者类成员，因为其clear方法只会把占用的内存空间清零，而不会释放，使得进程空间越来越大，可参考[《Protobuf使用不当导致的程序内存上涨问题》](http://www.kuqin.com/shuoit/20141117/343247.html)。\n\n> https://www.jianshu.com/p/27fdf44dd63b","source":"_posts/protobuf使用.md","raw":"---\ntitle: protobuf使用\ndate: 2019-04-10 10:31:04\ntags:\n- go\n---\n\n# 安装\n\n```\nwget https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protobuf-all-3.6.1.zip\nunzop protobuf-all-3.6.1.zip\ncd protobuf-all-3.6.1\n./configure && make && make install\n```\n\n# 语法规则\n\n```\n// 声明版本，默认是proto2\nsyntax = \"proto3\";\n\n// 声明包名\npackage tutorial\noption java_package = \"com.example.tutorial\";\n// java类名\noption java_outer_classname = \"AddressBookProtos\";\n\nmessage Person {\n    required string name =1;\n    required int32 id = 2;\n    optional string email = 3;\n    \n    enum PhoneType {\n        MOBILE = 0;\n        HOME = 1;\n        WORK = 2;\n    }\n    \n    message PhoneNumber {\n        required string number = 1;\n        optional PhoneType type = 2[default = HOME]; \n    }\n    repeated PhoneNumber phones = 4;\n}\n\nmessage AddressBook {\n    repreated Person people = 1;\n}\n\n// 保留字段，编程过程中某些功能没有想好，可以先把该tag 进行保留，以备以后使用。\nmessage Foo {\n  reserved 2, 15, 9 to 11;\n  reserved \"foo\", \"bar\";\n}\n```\n\n# 编码\n\n> https://blog.csdn.net/zxhoo/article/details/53228303\n\n# 方法\n\n1. Standard Message Methods\n\n- `isInitialized()`: checks if all the required fields have been set.\n- `toString()`: returns a human-readable representation of the message, particularly useful for debugging.\n- `mergeFrom(Message other)`: (builder only) merges the contents of `other` into this message, overwriting singular scalar fields, merging composite fields, and concatenating repeated fields.\n- `clear()`: (builder only) clears all the fields back to the empty state.\n\n1. Parsing and Serialization\n\n- `byte[] toByteArray();`: serializes the message and returns a byte array containing its raw bytes.\n- `static Person parseFrom(byte[] data);`: parses a message from the given byte array.\n- `void writeTo(OutputStream output);`: serializes the message and writes it to an `OutputStream`.\n- `static Person parseFrom(InputStream input);`: reads and parses a message from an `InputStream`.\n\n# 编译\n\n# 注意\n\n1. 升级协议\n\n- you *must not* change the tag numbers of any existing fields.\n- you *must not* add or delete any required fields.\n- you *may* delete optional or repeated fields.\n- you *may* add new optional or repeated fields but you must use fresh tag numbers (i.e. tag numbers that were never used in this protocol buffer, not even by deleted fields).\n\n1. protobuf对repeated压缩不够好，所以尽量在后面加上[packed = true]。\n2. 不要让protobuf对象成为全局变量或者类成员，因为其clear方法只会把占用的内存空间清零，而不会释放，使得进程空间越来越大，可参考[《Protobuf使用不当导致的程序内存上涨问题》](http://www.kuqin.com/shuoit/20141117/343247.html)。\n\n> https://www.jianshu.com/p/27fdf44dd63b","slug":"protobuf使用","published":1,"updated":"2019-07-22T08:16:15.225Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblk0000u4tjeq8wyagd0","content":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protobuf-all-3.6.1.zip</span><br><span class=\"line\">unzop protobuf-all-3.6.1.zip</span><br><span class=\"line\">cd protobuf-all-3.6.1</span><br><span class=\"line\">./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<h1 id=\"语法规则\"><a href=\"#语法规则\" class=\"headerlink\" title=\"语法规则\"></a>语法规则</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 声明版本，默认是proto2</span><br><span class=\"line\">syntax = &quot;proto3&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 声明包名</span><br><span class=\"line\">package tutorial</span><br><span class=\"line\">option java_package = &quot;com.example.tutorial&quot;;</span><br><span class=\"line\">// java类名</span><br><span class=\"line\">option java_outer_classname = &quot;AddressBookProtos&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">message Person &#123;</span><br><span class=\"line\">    required string name =1;</span><br><span class=\"line\">    required int32 id = 2;</span><br><span class=\"line\">    optional string email = 3;</span><br><span class=\"line\">    </span><br><span class=\"line\">    enum PhoneType &#123;</span><br><span class=\"line\">        MOBILE = 0;</span><br><span class=\"line\">        HOME = 1;</span><br><span class=\"line\">        WORK = 2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    message PhoneNumber &#123;</span><br><span class=\"line\">        required string number = 1;</span><br><span class=\"line\">        optional PhoneType type = 2[default = HOME]; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    repeated PhoneNumber phones = 4;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">message AddressBook &#123;</span><br><span class=\"line\">    repreated Person people = 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 保留字段，编程过程中某些功能没有想好，可以先把该tag 进行保留，以备以后使用。</span><br><span class=\"line\">message Foo &#123;</span><br><span class=\"line\">  reserved 2, 15, 9 to 11;</span><br><span class=\"line\">  reserved &quot;foo&quot;, &quot;bar&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h1><blockquote>\n<p><a href=\"https://blog.csdn.net/zxhoo/article/details/53228303\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zxhoo/article/details/53228303</a></p>\n</blockquote>\n<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h1><ol>\n<li>Standard Message Methods</li>\n</ol>\n<ul>\n<li><code>isInitialized()</code>: checks if all the required fields have been set.</li>\n<li><code>toString()</code>: returns a human-readable representation of the message, particularly useful for debugging.</li>\n<li><code>mergeFrom(Message other)</code>: (builder only) merges the contents of <code>other</code> into this message, overwriting singular scalar fields, merging composite fields, and concatenating repeated fields.</li>\n<li><code>clear()</code>: (builder only) clears all the fields back to the empty state.</li>\n</ul>\n<ol>\n<li>Parsing and Serialization</li>\n</ol>\n<ul>\n<li><code>byte[] toByteArray();</code>: serializes the message and returns a byte array containing its raw bytes.</li>\n<li><code>static Person parseFrom(byte[] data);</code>: parses a message from the given byte array.</li>\n<li><code>void writeTo(OutputStream output);</code>: serializes the message and writes it to an <code>OutputStream</code>.</li>\n<li><code>static Person parseFrom(InputStream input);</code>: reads and parses a message from an <code>InputStream</code>.</li>\n</ul>\n<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><h1 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h1><ol>\n<li>升级协议</li>\n</ol>\n<ul>\n<li>you <em>must not</em> change the tag numbers of any existing fields.</li>\n<li>you <em>must not</em> add or delete any required fields.</li>\n<li>you <em>may</em> delete optional or repeated fields.</li>\n<li>you <em>may</em> add new optional or repeated fields but you must use fresh tag numbers (i.e. tag numbers that were never used in this protocol buffer, not even by deleted fields).</li>\n</ul>\n<ol>\n<li>protobuf对repeated压缩不够好，所以尽量在后面加上[packed = true]。</li>\n<li>不要让protobuf对象成为全局变量或者类成员，因为其clear方法只会把占用的内存空间清零，而不会释放，使得进程空间越来越大，可参考<a href=\"http://www.kuqin.com/shuoit/20141117/343247.html\" target=\"_blank\" rel=\"noopener\">《Protobuf使用不当导致的程序内存上涨问题》</a>。</li>\n</ol>\n<blockquote>\n<p><a href=\"https://www.jianshu.com/p/27fdf44dd63b\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/27fdf44dd63b</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protobuf-all-3.6.1.zip</span><br><span class=\"line\">unzop protobuf-all-3.6.1.zip</span><br><span class=\"line\">cd protobuf-all-3.6.1</span><br><span class=\"line\">./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<h1 id=\"语法规则\"><a href=\"#语法规则\" class=\"headerlink\" title=\"语法规则\"></a>语法规则</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 声明版本，默认是proto2</span><br><span class=\"line\">syntax = &quot;proto3&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 声明包名</span><br><span class=\"line\">package tutorial</span><br><span class=\"line\">option java_package = &quot;com.example.tutorial&quot;;</span><br><span class=\"line\">// java类名</span><br><span class=\"line\">option java_outer_classname = &quot;AddressBookProtos&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">message Person &#123;</span><br><span class=\"line\">    required string name =1;</span><br><span class=\"line\">    required int32 id = 2;</span><br><span class=\"line\">    optional string email = 3;</span><br><span class=\"line\">    </span><br><span class=\"line\">    enum PhoneType &#123;</span><br><span class=\"line\">        MOBILE = 0;</span><br><span class=\"line\">        HOME = 1;</span><br><span class=\"line\">        WORK = 2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    message PhoneNumber &#123;</span><br><span class=\"line\">        required string number = 1;</span><br><span class=\"line\">        optional PhoneType type = 2[default = HOME]; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    repeated PhoneNumber phones = 4;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">message AddressBook &#123;</span><br><span class=\"line\">    repreated Person people = 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 保留字段，编程过程中某些功能没有想好，可以先把该tag 进行保留，以备以后使用。</span><br><span class=\"line\">message Foo &#123;</span><br><span class=\"line\">  reserved 2, 15, 9 to 11;</span><br><span class=\"line\">  reserved &quot;foo&quot;, &quot;bar&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h1><blockquote>\n<p><a href=\"https://blog.csdn.net/zxhoo/article/details/53228303\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/zxhoo/article/details/53228303</a></p>\n</blockquote>\n<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h1><ol>\n<li>Standard Message Methods</li>\n</ol>\n<ul>\n<li><code>isInitialized()</code>: checks if all the required fields have been set.</li>\n<li><code>toString()</code>: returns a human-readable representation of the message, particularly useful for debugging.</li>\n<li><code>mergeFrom(Message other)</code>: (builder only) merges the contents of <code>other</code> into this message, overwriting singular scalar fields, merging composite fields, and concatenating repeated fields.</li>\n<li><code>clear()</code>: (builder only) clears all the fields back to the empty state.</li>\n</ul>\n<ol>\n<li>Parsing and Serialization</li>\n</ol>\n<ul>\n<li><code>byte[] toByteArray();</code>: serializes the message and returns a byte array containing its raw bytes.</li>\n<li><code>static Person parseFrom(byte[] data);</code>: parses a message from the given byte array.</li>\n<li><code>void writeTo(OutputStream output);</code>: serializes the message and writes it to an <code>OutputStream</code>.</li>\n<li><code>static Person parseFrom(InputStream input);</code>: reads and parses a message from an <code>InputStream</code>.</li>\n</ul>\n<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><h1 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h1><ol>\n<li>升级协议</li>\n</ol>\n<ul>\n<li>you <em>must not</em> change the tag numbers of any existing fields.</li>\n<li>you <em>must not</em> add or delete any required fields.</li>\n<li>you <em>may</em> delete optional or repeated fields.</li>\n<li>you <em>may</em> add new optional or repeated fields but you must use fresh tag numbers (i.e. tag numbers that were never used in this protocol buffer, not even by deleted fields).</li>\n</ul>\n<ol>\n<li>protobuf对repeated压缩不够好，所以尽量在后面加上[packed = true]。</li>\n<li>不要让protobuf对象成为全局变量或者类成员，因为其clear方法只会把占用的内存空间清零，而不会释放，使得进程空间越来越大，可参考<a href=\"http://www.kuqin.com/shuoit/20141117/343247.html\" target=\"_blank\" rel=\"noopener\">《Protobuf使用不当导致的程序内存上涨问题》</a>。</li>\n</ol>\n<blockquote>\n<p><a href=\"https://www.jianshu.com/p/27fdf44dd63b\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/27fdf44dd63b</a></p>\n</blockquote>\n"},{"title":"react-tree-walker学习","date":"2019-10-19T09:02:13.000Z","_content":"\n# `react-tree-walker`\n\n这个主要用于遍历react的dom树，用于在react服务端渲染数据请求的时候。\n\n```js\nimport reactTreeWalker from 'react-tree-walker'\n\nclass DataFetcher extends React.Component {\n  constructor(props) {\n    super(props)\n    this.getData = this.getData.bind(this)\n  }\n\n  getData() {\n    // Supports promises! You could call an API for example to fetch some\n    // data, or do whatever \"bootstrapping\" you desire.\n    return Promise.resolve(this.props.id)\n  }\n\n  render() {\n    return <div>{this.props.children}</div>\n  }\n}\n\nconst app = (\n  <div>\n    <h1>Hello World!</h1>\n    <DataFetcher id={1} />\n    <DataFetcher id={2}>\n      <DataFetcher id={3}>\n        <DataFetcher id={4} />\n      </DataFetcher>\n    </DataFetcher>\n    <DataFetcher id={5} />\n  </div>\n)\n\nconst values = []\n\n// You provide this! See the API docs below for full details.\nfunction visitor(element, instance) {\n  if (instance && typeof instance.getData) {\n    return instance.getData().then(value => {\n      values.push(value)\n      // Return \"false\" to indicate that we do not want to visit \"3\"'s children,\n      // therefore we do not expect \"4\" to make it into our values array.\n      return value !== 3\n    })\n  }\n}\n\nreactTreeWalker(app, visitor)\n  .then(() => {\n    console.log(values) // [1, 2, 3, 5];\n    // Now is a good time to call React's renderToString whilst exposing\n    // whatever values you built up to your app.\n  })\n  // since v3.0.0 you need to do your own error handling!\n  .catch(err => console.error(err))\n```\n\n# `react-ssr-prepass`\n\n这个项目还在维护，是一个不错的选择\n\n## 安装\n\n```bash\nyarn add react-ssr-prepass\n# or\nnpm install --save react-ssr-prepass\n```\n\n## 使用\n\n```js\nimport { createElement } from 'react'\nimport { renderToString } from 'react-dom/server'\n\nimport ssrPrepass from 'react-ssr-prepass'\n\nconst renderApp = async App => {\n  const element = createElement(App)\n  await ssrPrepass(element)\n\n  return renderToString(element)\n}\n\nssrPrepass(<App />, (element, instance) => {\n  if (element.type === SomeData) {\n    return fetchData()\n  } else if (instance && instance.fetchData) {\n    return instance.fetchData()\n  }\n})\n\n```\n\n","source":"_posts/react-tree-walker学习.md","raw":"---\ntitle: react-tree-walker学习\ndate: 2019-10-19 17:02:13\ntags:\n- react\n---\n\n# `react-tree-walker`\n\n这个主要用于遍历react的dom树，用于在react服务端渲染数据请求的时候。\n\n```js\nimport reactTreeWalker from 'react-tree-walker'\n\nclass DataFetcher extends React.Component {\n  constructor(props) {\n    super(props)\n    this.getData = this.getData.bind(this)\n  }\n\n  getData() {\n    // Supports promises! You could call an API for example to fetch some\n    // data, or do whatever \"bootstrapping\" you desire.\n    return Promise.resolve(this.props.id)\n  }\n\n  render() {\n    return <div>{this.props.children}</div>\n  }\n}\n\nconst app = (\n  <div>\n    <h1>Hello World!</h1>\n    <DataFetcher id={1} />\n    <DataFetcher id={2}>\n      <DataFetcher id={3}>\n        <DataFetcher id={4} />\n      </DataFetcher>\n    </DataFetcher>\n    <DataFetcher id={5} />\n  </div>\n)\n\nconst values = []\n\n// You provide this! See the API docs below for full details.\nfunction visitor(element, instance) {\n  if (instance && typeof instance.getData) {\n    return instance.getData().then(value => {\n      values.push(value)\n      // Return \"false\" to indicate that we do not want to visit \"3\"'s children,\n      // therefore we do not expect \"4\" to make it into our values array.\n      return value !== 3\n    })\n  }\n}\n\nreactTreeWalker(app, visitor)\n  .then(() => {\n    console.log(values) // [1, 2, 3, 5];\n    // Now is a good time to call React's renderToString whilst exposing\n    // whatever values you built up to your app.\n  })\n  // since v3.0.0 you need to do your own error handling!\n  .catch(err => console.error(err))\n```\n\n# `react-ssr-prepass`\n\n这个项目还在维护，是一个不错的选择\n\n## 安装\n\n```bash\nyarn add react-ssr-prepass\n# or\nnpm install --save react-ssr-prepass\n```\n\n## 使用\n\n```js\nimport { createElement } from 'react'\nimport { renderToString } from 'react-dom/server'\n\nimport ssrPrepass from 'react-ssr-prepass'\n\nconst renderApp = async App => {\n  const element = createElement(App)\n  await ssrPrepass(element)\n\n  return renderToString(element)\n}\n\nssrPrepass(<App />, (element, instance) => {\n  if (element.type === SomeData) {\n    return fetchData()\n  } else if (instance && instance.fetchData) {\n    return instance.fetchData()\n  }\n})\n\n```\n\n","slug":"react-tree-walker学习","published":1,"updated":"2020-08-27T15:25:48.714Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblk1000w4tjejllxhs1a","content":"<h1 id=\"react-tree-walker\"><a href=\"#react-tree-walker\" class=\"headerlink\" title=\"react-tree-walker\"></a><code>react-tree-walker</code></h1><p>这个主要用于遍历react的dom树，用于在react服务端渲染数据请求的时候。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> reactTreeWalker <span class=\"keyword\">from</span> <span class=\"string\">'react-tree-walker'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataFetcher</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getData = <span class=\"keyword\">this</span>.getData.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getData() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Supports promises! You could call an API for example to fetch some</span></span><br><span class=\"line\">    <span class=\"comment\">// data, or do whatever \"bootstrapping\" you desire.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"keyword\">this</span>.props.id)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;this.props.children&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = (</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;Hello World!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">    &lt;DataFetcher id=&#123;<span class=\"number\">1</span>&#125; /&gt;</span><br><span class=\"line\">    &lt;DataFetcher id=&#123;<span class=\"number\">2</span>&#125;&gt;</span><br><span class=\"line\">      &lt;DataFetcher id=&#123;<span class=\"number\">3</span>&#125;&gt;</span><br><span class=\"line\">        &lt;DataFetcher id=&#123;<span class=\"number\">4</span>&#125; /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/DataFetcher&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>DataFetcher&gt;</span><br><span class=\"line\">    &lt;DataFetcher id=&#123;<span class=\"number\">5</span>&#125; /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">)</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const values = []</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ You provide this! See the API docs below for full details.</span></span><br><span class=\"line\"><span class=\"regexp\">function visitor(element, instance) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  if (instance &amp;&amp; typeof instance.getData) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return instance.getData().then(value =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      values.push(value)</span></span><br><span class=\"line\"><span class=\"regexp\">      /</span><span class=\"regexp\">/ Return \"false\" to indicate that we do not want to visit \"3\"'s children,</span></span><br><span class=\"line\"><span class=\"regexp\">      /</span><span class=\"regexp\">/ therefore we do not expect \"4\" to make it into our values array.</span></span><br><span class=\"line\"><span class=\"regexp\">      return value !== 3</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">reactTreeWalker(app, visitor)</span></span><br><span class=\"line\"><span class=\"regexp\">  .then(() =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    console.log(values) /</span><span class=\"regexp\">/ [1, 2, 3, 5];</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ Now is a good time to call React's renderToString whilst exposing</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ whatever values you built up to your app.</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">  /</span><span class=\"regexp\">/ since v3.0.0 you need to do your own error handling!</span></span><br><span class=\"line\"><span class=\"regexp\">  .catch(err =&gt; console.error(err))</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"react-ssr-prepass\"><a href=\"#react-ssr-prepass\" class=\"headerlink\" title=\"react-ssr-prepass\"></a><code>react-ssr-prepass</code></h1><p>这个项目还在维护，是一个不错的选择</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add react-ssr-prepass</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">npm install --save react-ssr-prepass</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createElement &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; renderToString &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom/server'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ssrPrepass <span class=\"keyword\">from</span> <span class=\"string\">'react-ssr-prepass'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> renderApp = <span class=\"keyword\">async</span> App =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> element = createElement(App)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> ssrPrepass(element)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> renderToString(element)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ssrPrepass(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span>, (element, instance) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"xml\">  if (element.type === SomeData) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    return fetchData()</span></span><br><span class=\"line\"><span class=\"xml\">  &#125; else if (instance &amp;&amp; instance.fetchData) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    return instance.fetchData()</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;)</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"react-tree-walker\"><a href=\"#react-tree-walker\" class=\"headerlink\" title=\"react-tree-walker\"></a><code>react-tree-walker</code></h1><p>这个主要用于遍历react的dom树，用于在react服务端渲染数据请求的时候。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> reactTreeWalker <span class=\"keyword\">from</span> <span class=\"string\">'react-tree-walker'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataFetcher</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getData = <span class=\"keyword\">this</span>.getData.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getData() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Supports promises! You could call an API for example to fetch some</span></span><br><span class=\"line\">    <span class=\"comment\">// data, or do whatever \"bootstrapping\" you desire.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"keyword\">this</span>.props.id)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;this.props.children&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = (</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;Hello World!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">    &lt;DataFetcher id=&#123;<span class=\"number\">1</span>&#125; /&gt;</span><br><span class=\"line\">    &lt;DataFetcher id=&#123;<span class=\"number\">2</span>&#125;&gt;</span><br><span class=\"line\">      &lt;DataFetcher id=&#123;<span class=\"number\">3</span>&#125;&gt;</span><br><span class=\"line\">        &lt;DataFetcher id=&#123;<span class=\"number\">4</span>&#125; /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/DataFetcher&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>DataFetcher&gt;</span><br><span class=\"line\">    &lt;DataFetcher id=&#123;<span class=\"number\">5</span>&#125; /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">)</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const values = []</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ You provide this! See the API docs below for full details.</span></span><br><span class=\"line\"><span class=\"regexp\">function visitor(element, instance) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  if (instance &amp;&amp; typeof instance.getData) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return instance.getData().then(value =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      values.push(value)</span></span><br><span class=\"line\"><span class=\"regexp\">      /</span><span class=\"regexp\">/ Return \"false\" to indicate that we do not want to visit \"3\"'s children,</span></span><br><span class=\"line\"><span class=\"regexp\">      /</span><span class=\"regexp\">/ therefore we do not expect \"4\" to make it into our values array.</span></span><br><span class=\"line\"><span class=\"regexp\">      return value !== 3</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">reactTreeWalker(app, visitor)</span></span><br><span class=\"line\"><span class=\"regexp\">  .then(() =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    console.log(values) /</span><span class=\"regexp\">/ [1, 2, 3, 5];</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ Now is a good time to call React's renderToString whilst exposing</span></span><br><span class=\"line\"><span class=\"regexp\">    /</span><span class=\"regexp\">/ whatever values you built up to your app.</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;)</span></span><br><span class=\"line\"><span class=\"regexp\">  /</span><span class=\"regexp\">/ since v3.0.0 you need to do your own error handling!</span></span><br><span class=\"line\"><span class=\"regexp\">  .catch(err =&gt; console.error(err))</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"react-ssr-prepass\"><a href=\"#react-ssr-prepass\" class=\"headerlink\" title=\"react-ssr-prepass\"></a><code>react-ssr-prepass</code></h1><p>这个项目还在维护，是一个不错的选择</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add react-ssr-prepass</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">npm install --save react-ssr-prepass</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createElement &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; renderToString &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom/server'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ssrPrepass <span class=\"keyword\">from</span> <span class=\"string\">'react-ssr-prepass'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> renderApp = <span class=\"keyword\">async</span> App =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> element = createElement(App)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> ssrPrepass(element)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> renderToString(element)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ssrPrepass(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span>, (element, instance) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"xml\">  if (element.type === SomeData) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    return fetchData()</span></span><br><span class=\"line\"><span class=\"xml\">  &#125; else if (instance &amp;&amp; instance.fetchData) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    return instance.fetchData()</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;)</span></span><br></pre></td></tr></table></figure>\n"},{"title":"react入门教程","date":"2018-12-05T13:56:22.000Z","_content":"\n# webpack4初始化\n\n```\ncnpm i -D webpack\ncnpm i -D webpack-cli  //相关的命令\n```\n\n# 相应包的安装\n\n1. react 专门用于创建组件和虚拟DOM，同事组件的生命周期在这个包中。\n2. react-dom 专门进行dom操作的，最主要的应用场景，就是ReactDom.render()\n\n# babel\n\n1. babel-node 一个命令行工具\n2. babel-register 可以实现动态转换\n3. babel-core 核心包\n4. babel-preset-env 一个套餐\n\n#  jsx使用\n\n## 安装babel插件\n\n```\ncnpm i babel-core babel-loader babel-plugin-transform-runtime -D\ncnpm i babel-preset-env babel-preset-stage-0 -D\ncnpm i babel-preset-react -D\n```\n\n## 添加.babelrc配置文件\n\n```\n{\n    \"presets\":[\"env\",\"stage-0\",\"react\"],\n    \"plugins\":[\"transform-runtime\"]\n}\n```\n\n##添加babel-loader配置项\n\n```\nmodule：{\n    rules:[\n        {test:/\\.js|jsx/,use:'babel-loader',exclude:/node_modules/}\n    ]\n}\n```","source":"_posts/react入门教程.md","raw":"---\ntitle: react入门教程\ndate: 2018-12-05 21:56:22\ntags:\n- react\n---\n\n# webpack4初始化\n\n```\ncnpm i -D webpack\ncnpm i -D webpack-cli  //相关的命令\n```\n\n# 相应包的安装\n\n1. react 专门用于创建组件和虚拟DOM，同事组件的生命周期在这个包中。\n2. react-dom 专门进行dom操作的，最主要的应用场景，就是ReactDom.render()\n\n# babel\n\n1. babel-node 一个命令行工具\n2. babel-register 可以实现动态转换\n3. babel-core 核心包\n4. babel-preset-env 一个套餐\n\n#  jsx使用\n\n## 安装babel插件\n\n```\ncnpm i babel-core babel-loader babel-plugin-transform-runtime -D\ncnpm i babel-preset-env babel-preset-stage-0 -D\ncnpm i babel-preset-react -D\n```\n\n## 添加.babelrc配置文件\n\n```\n{\n    \"presets\":[\"env\",\"stage-0\",\"react\"],\n    \"plugins\":[\"transform-runtime\"]\n}\n```\n\n##添加babel-loader配置项\n\n```\nmodule：{\n    rules:[\n        {test:/\\.js|jsx/,use:'babel-loader',exclude:/node_modules/}\n    ]\n}\n```","slug":"react入门教程","published":1,"updated":"2019-07-22T08:16:15.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblk2000y4tjewf205rng","content":"<h1 id=\"webpack4初始化\"><a href=\"#webpack4初始化\" class=\"headerlink\" title=\"webpack4初始化\"></a>webpack4初始化</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i -D webpack</span><br><span class=\"line\">cnpm i -D webpack-cli  //相关的命令</span><br></pre></td></tr></table></figure>\n<h1 id=\"相应包的安装\"><a href=\"#相应包的安装\" class=\"headerlink\" title=\"相应包的安装\"></a>相应包的安装</h1><ol>\n<li>react 专门用于创建组件和虚拟DOM，同事组件的生命周期在这个包中。</li>\n<li>react-dom 专门进行dom操作的，最主要的应用场景，就是ReactDom.render()</li>\n</ol>\n<h1 id=\"babel\"><a href=\"#babel\" class=\"headerlink\" title=\"babel\"></a>babel</h1><ol>\n<li>babel-node 一个命令行工具</li>\n<li>babel-register 可以实现动态转换</li>\n<li>babel-core 核心包</li>\n<li>babel-preset-env 一个套餐</li>\n</ol>\n<h1 id=\"jsx使用\"><a href=\"#jsx使用\" class=\"headerlink\" title=\"jsx使用\"></a>jsx使用</h1><h2 id=\"安装babel插件\"><a href=\"#安装babel插件\" class=\"headerlink\" title=\"安装babel插件\"></a>安装babel插件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i babel-core babel-loader babel-plugin-transform-runtime -D</span><br><span class=\"line\">cnpm i babel-preset-env babel-preset-stage-0 -D</span><br><span class=\"line\">cnpm i babel-preset-react -D</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加-babelrc配置文件\"><a href=\"#添加-babelrc配置文件\" class=\"headerlink\" title=\"添加.babelrc配置文件\"></a>添加.babelrc配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;presets&quot;:[&quot;env&quot;,&quot;stage-0&quot;,&quot;react&quot;],</span><br><span class=\"line\">    &quot;plugins&quot;:[&quot;transform-runtime&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>##添加babel-loader配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module：&#123;</span><br><span class=\"line\">    rules:[</span><br><span class=\"line\">        &#123;test:/\\.js|jsx/,use:&apos;babel-loader&apos;,exclude:/node_modules/&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"webpack4初始化\"><a href=\"#webpack4初始化\" class=\"headerlink\" title=\"webpack4初始化\"></a>webpack4初始化</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i -D webpack</span><br><span class=\"line\">cnpm i -D webpack-cli  //相关的命令</span><br></pre></td></tr></table></figure>\n<h1 id=\"相应包的安装\"><a href=\"#相应包的安装\" class=\"headerlink\" title=\"相应包的安装\"></a>相应包的安装</h1><ol>\n<li>react 专门用于创建组件和虚拟DOM，同事组件的生命周期在这个包中。</li>\n<li>react-dom 专门进行dom操作的，最主要的应用场景，就是ReactDom.render()</li>\n</ol>\n<h1 id=\"babel\"><a href=\"#babel\" class=\"headerlink\" title=\"babel\"></a>babel</h1><ol>\n<li>babel-node 一个命令行工具</li>\n<li>babel-register 可以实现动态转换</li>\n<li>babel-core 核心包</li>\n<li>babel-preset-env 一个套餐</li>\n</ol>\n<h1 id=\"jsx使用\"><a href=\"#jsx使用\" class=\"headerlink\" title=\"jsx使用\"></a>jsx使用</h1><h2 id=\"安装babel插件\"><a href=\"#安装babel插件\" class=\"headerlink\" title=\"安装babel插件\"></a>安装babel插件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm i babel-core babel-loader babel-plugin-transform-runtime -D</span><br><span class=\"line\">cnpm i babel-preset-env babel-preset-stage-0 -D</span><br><span class=\"line\">cnpm i babel-preset-react -D</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加-babelrc配置文件\"><a href=\"#添加-babelrc配置文件\" class=\"headerlink\" title=\"添加.babelrc配置文件\"></a>添加.babelrc配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;presets&quot;:[&quot;env&quot;,&quot;stage-0&quot;,&quot;react&quot;],</span><br><span class=\"line\">    &quot;plugins&quot;:[&quot;transform-runtime&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>##添加babel-loader配置项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module：&#123;</span><br><span class=\"line\">    rules:[</span><br><span class=\"line\">        &#123;test:/\\.js|jsx/,use:&apos;babel-loader&apos;,exclude:/node_modules/&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"redis开启远程连接","date":"2019-12-16T09:44:28.000Z","_content":"\n#### 1、修改redis服务器的配置文件\n\nvi redis.conf\n\n注释以下绑定的主机地址\n\n\\# bind 127.0.0.1\n\n#### 或\n\nvim  redis.conf\n\nbind  0.0.0.0\n\nprotected-mode   no\n\n#### 2、修改redis服务器的参数配置\n\n修改redis的守护进程为no，不启用\n\n127.0.0.1:6379> config  set   daemonize  \"no\"\n\nOK\n\n修改redis的保护模式为no，不启用\n\n127.0.0.1:6379> config   set   protected-mode\"no\"\n\nOK\n\n或者\n\nconfig set requirepass 123 ->123是密码\n\n#### 注意：开启 6379端口","source":"_posts/redis开启远程连接.md","raw":"---\ntitle: redis开启远程连接\ndate: 2019-12-16 17:44:28\ntags:\n- redis\n---\n\n#### 1、修改redis服务器的配置文件\n\nvi redis.conf\n\n注释以下绑定的主机地址\n\n\\# bind 127.0.0.1\n\n#### 或\n\nvim  redis.conf\n\nbind  0.0.0.0\n\nprotected-mode   no\n\n#### 2、修改redis服务器的参数配置\n\n修改redis的守护进程为no，不启用\n\n127.0.0.1:6379> config  set   daemonize  \"no\"\n\nOK\n\n修改redis的保护模式为no，不启用\n\n127.0.0.1:6379> config   set   protected-mode\"no\"\n\nOK\n\n或者\n\nconfig set requirepass 123 ->123是密码\n\n#### 注意：开启 6379端口","slug":"redis开启远程连接","published":1,"updated":"2020-08-27T15:25:48.714Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblk400104tjeh00n8y44","content":"<h4 id=\"1、修改redis服务器的配置文件\"><a href=\"#1、修改redis服务器的配置文件\" class=\"headerlink\" title=\"1、修改redis服务器的配置文件\"></a>1、修改redis服务器的配置文件</h4><p>vi redis.conf</p>\n<p>注释以下绑定的主机地址</p>\n<p># bind 127.0.0.1</p>\n<h4 id=\"或\"><a href=\"#或\" class=\"headerlink\" title=\"或\"></a>或</h4><p>vim  redis.conf</p>\n<p>bind  0.0.0.0</p>\n<p>protected-mode   no</p>\n<h4 id=\"2、修改redis服务器的参数配置\"><a href=\"#2、修改redis服务器的参数配置\" class=\"headerlink\" title=\"2、修改redis服务器的参数配置\"></a>2、修改redis服务器的参数配置</h4><p>修改redis的守护进程为no，不启用</p>\n<p>127.0.0.1:6379&gt; config  set   daemonize  “no”</p>\n<p>OK</p>\n<p>修改redis的保护模式为no，不启用</p>\n<p>127.0.0.1:6379&gt; config   set   protected-mode”no”</p>\n<p>OK</p>\n<p>或者</p>\n<p>config set requirepass 123 -&gt;123是密码</p>\n<h4 id=\"注意：开启-6379端口\"><a href=\"#注意：开启-6379端口\" class=\"headerlink\" title=\"注意：开启 6379端口\"></a>注意：开启 6379端口</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1、修改redis服务器的配置文件\"><a href=\"#1、修改redis服务器的配置文件\" class=\"headerlink\" title=\"1、修改redis服务器的配置文件\"></a>1、修改redis服务器的配置文件</h4><p>vi redis.conf</p>\n<p>注释以下绑定的主机地址</p>\n<p># bind 127.0.0.1</p>\n<h4 id=\"或\"><a href=\"#或\" class=\"headerlink\" title=\"或\"></a>或</h4><p>vim  redis.conf</p>\n<p>bind  0.0.0.0</p>\n<p>protected-mode   no</p>\n<h4 id=\"2、修改redis服务器的参数配置\"><a href=\"#2、修改redis服务器的参数配置\" class=\"headerlink\" title=\"2、修改redis服务器的参数配置\"></a>2、修改redis服务器的参数配置</h4><p>修改redis的守护进程为no，不启用</p>\n<p>127.0.0.1:6379&gt; config  set   daemonize  “no”</p>\n<p>OK</p>\n<p>修改redis的保护模式为no，不启用</p>\n<p>127.0.0.1:6379&gt; config   set   protected-mode”no”</p>\n<p>OK</p>\n<p>或者</p>\n<p>config set requirepass 123 -&gt;123是密码</p>\n<h4 id=\"注意：开启-6379端口\"><a href=\"#注意：开启-6379端口\" class=\"headerlink\" title=\"注意：开启 6379端口\"></a>注意：开启 6379端口</h4>"},{"title":"redis分布式锁","date":"2019-04-11T09:55:56.000Z","_content":"\n# 单机Redis实现分布式锁\n\n## 获取锁\n\n获取锁的过程很简单，客户端向Redis发送命令：\n\n```\nSET resource_name my_random_value NX PX 30000\n复制代码\n```\n\n`my_random_value`是由客户端生成的一个随机字符串，它要保证在足够长的一段时间内在所有客户端的所有获取锁的请求中都是唯一的。 NX表示只有当`resource_name`对应的key值不存在的时候才能SET成功。这保证了只有第一个请求的客户端才能获得锁，而其它客户端在锁被释放之前都无法获得锁。 PX 30000表示这个锁有一个30秒的自动过期时间。\n\n## 释放锁\n\n```\nif redis.call(\"get\",KEYS[1]) == ARGV[1] then\n    return redis.call(\"del\",KEYS[1])\nelse\n    return 0\nend\n复制代码\n```\n\n之前获取锁的时候生成的`my_random_value` 作为参数传到Lua脚本里面，作为：`ARGV[1]`,而 `resource_name`作为`KEYS[1]`。Lua脚本可以保证操作的原子性。\n\n## 关于单点Redis实现分布式锁的讨论\n\n网络上有文章说用如下命令获取锁:\n\n```\nSETNX resource_name my_random_value\nEXPIRE resource_name 30\n复制代码\n```\n\n由于这两个命令不是原子的。如果客户端在执行完`SETNX`后`crash`了，那么就没有机会执行`EXPIRE`了，导致它一直持有这个锁，其他的客户端就永远获取不到这个锁了。\n\n- 为什么`my_random_value` 要设置成随机值? 保证了一个客户端释放的锁是自己持有的那个锁。如若不然，可能出现锁不安全的情况。\n\n```\n客户端1获取锁成功。\n客户端1在某个操作上阻塞了很长时间。\n过期时间到了，锁自动释放了。\n客户端2获取到了对应同一个资源的锁。\n客户端1从阻塞中恢复过来，释放掉了客户端2持有的锁。\n复制代码\n```\n\n- 用 SETNX获取锁 网上大量文章说用如下命令获取锁：\n\n```\nSETNX lock.foo <current Unix time + lock timeout + 1>\n复制代码\n```\n\n原文在Redis对SETNX的官网说明，Redis官网文档建议用Set命令来代替，主要原因是SETNX不支持超时时间的设置。\n\n[redis.io/commands/se…](https://link.juejin.im?target=https%3A%2F%2Fredis.io%2Fcommands%2Fsetnx)\n\n# Redis集群实现分布式锁\n\n上面的讨论中我们有一个非常重要的假设：Redis是单点的。如果Redis是集群模式，我们考虑如下场景:\n\n```\n客户端1从Master获取了锁。\nMaster宕机了，存储锁的key还没有来得及同步到Slave上。\nSlave升级为Master。\n客户端2从新的Master获取到了对应同一个资源的锁。\n客户端1和客户端2同时持有了同一个资源的锁，锁不再具有安全性。\n复制代码\n```\n\n就此问题，Redis作者antirez写了RedLock算法来解决这种问题。\n\n## RedLock获取锁\n\n- 获取当前时间。\n- 按顺序依次向N个Redis节点执行获取锁的操作。这个获取操作跟前面基于单Redis节点的获取锁的过程相同，包含随机字符串my_random_value，也包含过期时间(比如PX 30000，即锁的有效时间)。为了保证在某个Redis节点不可用的时候算法能够继续运行，这个获取锁的操作还有一个超时时间(time out)，它要远小于锁的有效时间（几十毫秒量级）。客户端在向某个Redis节点获取锁失败以后，应该立即尝试下一个Redis节点。\n- 计算整个获取锁的过程总共消耗了多长时间，计算方法是用当前时间减去第1步记录的时间。如果客户端从大多数Redis节点（>= N/2+1）成功获取到了锁，并且获取锁总共消耗的时间没有超过锁的有效时间(lock validity time)，那么这时客户端才认为最终获取锁成功；否则，认为最终获取锁失败。\n- 如果最终获取锁成功了，那么这个锁的有效时间应该重新计算，它等于最初的锁的有效时间减去第3步计算出来的获取锁消耗的时间。\n- 如果最终获取锁失败了（可能由于获取到锁的Redis节点个数少于N/2+1，或者整个获取锁的过程消耗的时间超过了锁的最初有效时间），那么客户端应该立即向所有Redis节点发起释放锁的操作（即前面介绍的单机Redis Lua脚本释放锁的方法）。\n\n## RedLock释放锁\n\n客户端向所有Redis节点发起释放锁的操作，不管这些节点当时在获取锁的时候成功与否。\n\n## 关于RedLock的问题讨论\n\n- 如果有节点发生崩溃重启 假设一共有5个Redis节点：A, B, C, D, E。设想发生了如下的事件序列：\n\n```\n客户端1成功锁住了A, B, C，获取锁成功（但D和E没有锁住）。\n节点C崩溃重启了，但客户端1在C上加的锁没有持久化下来，丢失了。\n节点C重启后，客户端2锁住了C, D, E，获取锁成功。\n客户端1和客户端2同时获得了锁。\n复制代码\n```\n\n为了应对这一问题，antirez又提出了延迟重启(delayed restarts)的概念。也就是说，一个节点崩溃后，先不立即重启它，而是等待一段时间再重启，这段时间应该大于锁的有效时间(lock validity time)。这样的话，这个节点在重启前所参与的锁都会过期，它在重启后就不会对现有的锁造成影响。\n\n- 如果客户端长期阻塞导致锁过期\n\n  ![](http://wumu.sciento.cn/img/16a07877f982bd5c.png)\n\n解释一下这个时序图，客户端1在获得锁之后发生了很长时间的GC pause，在此期间，它获得的锁过期了，而客户端2获得了锁。当客户端1从GC pause中恢复过来的时候，它不知道自己持有的锁已经过期了，它依然向共享资源（上图中是一个存储服务）发起了写数据请求，而这时锁实际上被客户端2持有，因此两个客户端的写请求就有可能冲突（锁的互斥作用失效了）。\n\n如何解决这个问题呢?引入了fencing token的概念：\n\n![](http://wumu.sciento.cn/img/16a07879db4e469e.png)\n\n客户端1先获取到的锁，因此有一个较小的fencing token，等于33，而客户端2后获取到的锁，有一个较大的fencing token，等于34。客户端1从GC pause中恢复过来之后，依然是向存储服务发送访问请求，但是带了fencing token = 33。存储服务发现它之前已经处理过34的请求，所以会拒绝掉这次33的请求。这样就避免了冲突。\n\n但是其实这已经超出了Redis实现分布式锁的范围，单纯用Redis没有命令来实现生成Token。\n\n- 时钟跳跃问题 假设有5个Redis节点A, B, C, D, E。\n\n```\n客户端1从Redis节点A, B, C成功获取了锁（多数节点）。由于网络问题，与D和E通信失败。\n节点C上的时钟发生了向前跳跃，导致它上面维护的锁快速过期。\n客户端2从Redis节点C, D, E成功获取了同一个资源的锁（多数节点）。\n客户端1和客户端2现在都认为自己持有了锁。\n这个问题用Redis实现分布式锁暂时无解。而生产环境这种情况是存在的。\n复制代码\n```\n\n结论 Redis并不能实现严格意义上的分布式锁。但是这并不意味着上面讨论的方案一无是处。如果你的应用场景为了效率(efficiency)，协调各个客户端避免做重复的工作，即使锁失效了，只是可能把某些操作多做一遍而已，不会产生其它的不良后果。但是如果你的应用场景是为了正确性(correctness)，那么用Redis实现分布式锁并不合适，会存在各种各样的问题，且解决起来就很复杂，为了正确性，需要使用zab、raft共识算法，或者使用带有事务的数据库来实现严格意义上的分布式锁。\n\n参考资料 Distributed locks with Redis 基于Redis的分布式锁到底安全吗（上）？ - 铁蕾的个人博客 [martin.kleppmann.com/2016/02/08/…](https://link.juejin.im?target=https%3A%2F%2Fmartin.kleppmann.com%2F2016%2F02%2F08%2Fhow-to-do-distributed-locking.html)\n\n","source":"_posts/redis分布式锁.md","raw":"---\n\ntitle: redis分布式锁\ndate: 2019-04-11 17:55:56\ntags:\n- redis\n---\n\n# 单机Redis实现分布式锁\n\n## 获取锁\n\n获取锁的过程很简单，客户端向Redis发送命令：\n\n```\nSET resource_name my_random_value NX PX 30000\n复制代码\n```\n\n`my_random_value`是由客户端生成的一个随机字符串，它要保证在足够长的一段时间内在所有客户端的所有获取锁的请求中都是唯一的。 NX表示只有当`resource_name`对应的key值不存在的时候才能SET成功。这保证了只有第一个请求的客户端才能获得锁，而其它客户端在锁被释放之前都无法获得锁。 PX 30000表示这个锁有一个30秒的自动过期时间。\n\n## 释放锁\n\n```\nif redis.call(\"get\",KEYS[1]) == ARGV[1] then\n    return redis.call(\"del\",KEYS[1])\nelse\n    return 0\nend\n复制代码\n```\n\n之前获取锁的时候生成的`my_random_value` 作为参数传到Lua脚本里面，作为：`ARGV[1]`,而 `resource_name`作为`KEYS[1]`。Lua脚本可以保证操作的原子性。\n\n## 关于单点Redis实现分布式锁的讨论\n\n网络上有文章说用如下命令获取锁:\n\n```\nSETNX resource_name my_random_value\nEXPIRE resource_name 30\n复制代码\n```\n\n由于这两个命令不是原子的。如果客户端在执行完`SETNX`后`crash`了，那么就没有机会执行`EXPIRE`了，导致它一直持有这个锁，其他的客户端就永远获取不到这个锁了。\n\n- 为什么`my_random_value` 要设置成随机值? 保证了一个客户端释放的锁是自己持有的那个锁。如若不然，可能出现锁不安全的情况。\n\n```\n客户端1获取锁成功。\n客户端1在某个操作上阻塞了很长时间。\n过期时间到了，锁自动释放了。\n客户端2获取到了对应同一个资源的锁。\n客户端1从阻塞中恢复过来，释放掉了客户端2持有的锁。\n复制代码\n```\n\n- 用 SETNX获取锁 网上大量文章说用如下命令获取锁：\n\n```\nSETNX lock.foo <current Unix time + lock timeout + 1>\n复制代码\n```\n\n原文在Redis对SETNX的官网说明，Redis官网文档建议用Set命令来代替，主要原因是SETNX不支持超时时间的设置。\n\n[redis.io/commands/se…](https://link.juejin.im?target=https%3A%2F%2Fredis.io%2Fcommands%2Fsetnx)\n\n# Redis集群实现分布式锁\n\n上面的讨论中我们有一个非常重要的假设：Redis是单点的。如果Redis是集群模式，我们考虑如下场景:\n\n```\n客户端1从Master获取了锁。\nMaster宕机了，存储锁的key还没有来得及同步到Slave上。\nSlave升级为Master。\n客户端2从新的Master获取到了对应同一个资源的锁。\n客户端1和客户端2同时持有了同一个资源的锁，锁不再具有安全性。\n复制代码\n```\n\n就此问题，Redis作者antirez写了RedLock算法来解决这种问题。\n\n## RedLock获取锁\n\n- 获取当前时间。\n- 按顺序依次向N个Redis节点执行获取锁的操作。这个获取操作跟前面基于单Redis节点的获取锁的过程相同，包含随机字符串my_random_value，也包含过期时间(比如PX 30000，即锁的有效时间)。为了保证在某个Redis节点不可用的时候算法能够继续运行，这个获取锁的操作还有一个超时时间(time out)，它要远小于锁的有效时间（几十毫秒量级）。客户端在向某个Redis节点获取锁失败以后，应该立即尝试下一个Redis节点。\n- 计算整个获取锁的过程总共消耗了多长时间，计算方法是用当前时间减去第1步记录的时间。如果客户端从大多数Redis节点（>= N/2+1）成功获取到了锁，并且获取锁总共消耗的时间没有超过锁的有效时间(lock validity time)，那么这时客户端才认为最终获取锁成功；否则，认为最终获取锁失败。\n- 如果最终获取锁成功了，那么这个锁的有效时间应该重新计算，它等于最初的锁的有效时间减去第3步计算出来的获取锁消耗的时间。\n- 如果最终获取锁失败了（可能由于获取到锁的Redis节点个数少于N/2+1，或者整个获取锁的过程消耗的时间超过了锁的最初有效时间），那么客户端应该立即向所有Redis节点发起释放锁的操作（即前面介绍的单机Redis Lua脚本释放锁的方法）。\n\n## RedLock释放锁\n\n客户端向所有Redis节点发起释放锁的操作，不管这些节点当时在获取锁的时候成功与否。\n\n## 关于RedLock的问题讨论\n\n- 如果有节点发生崩溃重启 假设一共有5个Redis节点：A, B, C, D, E。设想发生了如下的事件序列：\n\n```\n客户端1成功锁住了A, B, C，获取锁成功（但D和E没有锁住）。\n节点C崩溃重启了，但客户端1在C上加的锁没有持久化下来，丢失了。\n节点C重启后，客户端2锁住了C, D, E，获取锁成功。\n客户端1和客户端2同时获得了锁。\n复制代码\n```\n\n为了应对这一问题，antirez又提出了延迟重启(delayed restarts)的概念。也就是说，一个节点崩溃后，先不立即重启它，而是等待一段时间再重启，这段时间应该大于锁的有效时间(lock validity time)。这样的话，这个节点在重启前所参与的锁都会过期，它在重启后就不会对现有的锁造成影响。\n\n- 如果客户端长期阻塞导致锁过期\n\n  ![](http://wumu.sciento.cn/img/16a07877f982bd5c.png)\n\n解释一下这个时序图，客户端1在获得锁之后发生了很长时间的GC pause，在此期间，它获得的锁过期了，而客户端2获得了锁。当客户端1从GC pause中恢复过来的时候，它不知道自己持有的锁已经过期了，它依然向共享资源（上图中是一个存储服务）发起了写数据请求，而这时锁实际上被客户端2持有，因此两个客户端的写请求就有可能冲突（锁的互斥作用失效了）。\n\n如何解决这个问题呢?引入了fencing token的概念：\n\n![](http://wumu.sciento.cn/img/16a07879db4e469e.png)\n\n客户端1先获取到的锁，因此有一个较小的fencing token，等于33，而客户端2后获取到的锁，有一个较大的fencing token，等于34。客户端1从GC pause中恢复过来之后，依然是向存储服务发送访问请求，但是带了fencing token = 33。存储服务发现它之前已经处理过34的请求，所以会拒绝掉这次33的请求。这样就避免了冲突。\n\n但是其实这已经超出了Redis实现分布式锁的范围，单纯用Redis没有命令来实现生成Token。\n\n- 时钟跳跃问题 假设有5个Redis节点A, B, C, D, E。\n\n```\n客户端1从Redis节点A, B, C成功获取了锁（多数节点）。由于网络问题，与D和E通信失败。\n节点C上的时钟发生了向前跳跃，导致它上面维护的锁快速过期。\n客户端2从Redis节点C, D, E成功获取了同一个资源的锁（多数节点）。\n客户端1和客户端2现在都认为自己持有了锁。\n这个问题用Redis实现分布式锁暂时无解。而生产环境这种情况是存在的。\n复制代码\n```\n\n结论 Redis并不能实现严格意义上的分布式锁。但是这并不意味着上面讨论的方案一无是处。如果你的应用场景为了效率(efficiency)，协调各个客户端避免做重复的工作，即使锁失效了，只是可能把某些操作多做一遍而已，不会产生其它的不良后果。但是如果你的应用场景是为了正确性(correctness)，那么用Redis实现分布式锁并不合适，会存在各种各样的问题，且解决起来就很复杂，为了正确性，需要使用zab、raft共识算法，或者使用带有事务的数据库来实现严格意义上的分布式锁。\n\n参考资料 Distributed locks with Redis 基于Redis的分布式锁到底安全吗（上）？ - 铁蕾的个人博客 [martin.kleppmann.com/2016/02/08/…](https://link.juejin.im?target=https%3A%2F%2Fmartin.kleppmann.com%2F2016%2F02%2F08%2Fhow-to-do-distributed-locking.html)\n\n","slug":"redis分布式锁","published":1,"updated":"2019-07-22T08:16:15.245Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblk500124tjeqpsua5rc","content":"<h1 id=\"单机Redis实现分布式锁\"><a href=\"#单机Redis实现分布式锁\" class=\"headerlink\" title=\"单机Redis实现分布式锁\"></a>单机Redis实现分布式锁</h1><h2 id=\"获取锁\"><a href=\"#获取锁\" class=\"headerlink\" title=\"获取锁\"></a>获取锁</h2><p>获取锁的过程很简单，客户端向Redis发送命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET resource_name my_random_value NX PX 30000</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p><code>my_random_value</code>是由客户端生成的一个随机字符串，它要保证在足够长的一段时间内在所有客户端的所有获取锁的请求中都是唯一的。 NX表示只有当<code>resource_name</code>对应的key值不存在的时候才能SET成功。这保证了只有第一个请求的客户端才能获得锁，而其它客户端在锁被释放之前都无法获得锁。 PX 30000表示这个锁有一个30秒的自动过期时间。</p>\n<h2 id=\"释放锁\"><a href=\"#释放锁\" class=\"headerlink\" title=\"释放锁\"></a>释放锁</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if redis.call(&quot;get&quot;,KEYS[1]) == ARGV[1] then</span><br><span class=\"line\">    return redis.call(&quot;del&quot;,KEYS[1])</span><br><span class=\"line\">else</span><br><span class=\"line\">    return 0</span><br><span class=\"line\">end</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>之前获取锁的时候生成的<code>my_random_value</code> 作为参数传到Lua脚本里面，作为：<code>ARGV[1]</code>,而 <code>resource_name</code>作为<code>KEYS[1]</code>。Lua脚本可以保证操作的原子性。</p>\n<h2 id=\"关于单点Redis实现分布式锁的讨论\"><a href=\"#关于单点Redis实现分布式锁的讨论\" class=\"headerlink\" title=\"关于单点Redis实现分布式锁的讨论\"></a>关于单点Redis实现分布式锁的讨论</h2><p>网络上有文章说用如下命令获取锁:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SETNX resource_name my_random_value</span><br><span class=\"line\">EXPIRE resource_name 30</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>由于这两个命令不是原子的。如果客户端在执行完<code>SETNX</code>后<code>crash</code>了，那么就没有机会执行<code>EXPIRE</code>了，导致它一直持有这个锁，其他的客户端就永远获取不到这个锁了。</p>\n<ul>\n<li>为什么<code>my_random_value</code> 要设置成随机值? 保证了一个客户端释放的锁是自己持有的那个锁。如若不然，可能出现锁不安全的情况。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端1获取锁成功。</span><br><span class=\"line\">客户端1在某个操作上阻塞了很长时间。</span><br><span class=\"line\">过期时间到了，锁自动释放了。</span><br><span class=\"line\">客户端2获取到了对应同一个资源的锁。</span><br><span class=\"line\">客户端1从阻塞中恢复过来，释放掉了客户端2持有的锁。</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<ul>\n<li>用 SETNX获取锁 网上大量文章说用如下命令获取锁：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SETNX lock.foo &lt;current Unix time + lock timeout + 1&gt;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>原文在Redis对SETNX的官网说明，Redis官网文档建议用Set命令来代替，主要原因是SETNX不支持超时时间的设置。</p>\n<p><a href=\"https://link.juejin.im?target=https%3A%2F%2Fredis.io%2Fcommands%2Fsetnx\" target=\"_blank\" rel=\"noopener\">redis.io/commands/se…</a></p>\n<h1 id=\"Redis集群实现分布式锁\"><a href=\"#Redis集群实现分布式锁\" class=\"headerlink\" title=\"Redis集群实现分布式锁\"></a>Redis集群实现分布式锁</h1><p>上面的讨论中我们有一个非常重要的假设：Redis是单点的。如果Redis是集群模式，我们考虑如下场景:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端1从Master获取了锁。</span><br><span class=\"line\">Master宕机了，存储锁的key还没有来得及同步到Slave上。</span><br><span class=\"line\">Slave升级为Master。</span><br><span class=\"line\">客户端2从新的Master获取到了对应同一个资源的锁。</span><br><span class=\"line\">客户端1和客户端2同时持有了同一个资源的锁，锁不再具有安全性。</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>就此问题，Redis作者antirez写了RedLock算法来解决这种问题。</p>\n<h2 id=\"RedLock获取锁\"><a href=\"#RedLock获取锁\" class=\"headerlink\" title=\"RedLock获取锁\"></a>RedLock获取锁</h2><ul>\n<li>获取当前时间。</li>\n<li>按顺序依次向N个Redis节点执行获取锁的操作。这个获取操作跟前面基于单Redis节点的获取锁的过程相同，包含随机字符串my_random_value，也包含过期时间(比如PX 30000，即锁的有效时间)。为了保证在某个Redis节点不可用的时候算法能够继续运行，这个获取锁的操作还有一个超时时间(time out)，它要远小于锁的有效时间（几十毫秒量级）。客户端在向某个Redis节点获取锁失败以后，应该立即尝试下一个Redis节点。</li>\n<li>计算整个获取锁的过程总共消耗了多长时间，计算方法是用当前时间减去第1步记录的时间。如果客户端从大多数Redis节点（&gt;= N/2+1）成功获取到了锁，并且获取锁总共消耗的时间没有超过锁的有效时间(lock validity time)，那么这时客户端才认为最终获取锁成功；否则，认为最终获取锁失败。</li>\n<li>如果最终获取锁成功了，那么这个锁的有效时间应该重新计算，它等于最初的锁的有效时间减去第3步计算出来的获取锁消耗的时间。</li>\n<li>如果最终获取锁失败了（可能由于获取到锁的Redis节点个数少于N/2+1，或者整个获取锁的过程消耗的时间超过了锁的最初有效时间），那么客户端应该立即向所有Redis节点发起释放锁的操作（即前面介绍的单机Redis Lua脚本释放锁的方法）。</li>\n</ul>\n<h2 id=\"RedLock释放锁\"><a href=\"#RedLock释放锁\" class=\"headerlink\" title=\"RedLock释放锁\"></a>RedLock释放锁</h2><p>客户端向所有Redis节点发起释放锁的操作，不管这些节点当时在获取锁的时候成功与否。</p>\n<h2 id=\"关于RedLock的问题讨论\"><a href=\"#关于RedLock的问题讨论\" class=\"headerlink\" title=\"关于RedLock的问题讨论\"></a>关于RedLock的问题讨论</h2><ul>\n<li>如果有节点发生崩溃重启 假设一共有5个Redis节点：A, B, C, D, E。设想发生了如下的事件序列：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端1成功锁住了A, B, C，获取锁成功（但D和E没有锁住）。</span><br><span class=\"line\">节点C崩溃重启了，但客户端1在C上加的锁没有持久化下来，丢失了。</span><br><span class=\"line\">节点C重启后，客户端2锁住了C, D, E，获取锁成功。</span><br><span class=\"line\">客户端1和客户端2同时获得了锁。</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>为了应对这一问题，antirez又提出了延迟重启(delayed restarts)的概念。也就是说，一个节点崩溃后，先不立即重启它，而是等待一段时间再重启，这段时间应该大于锁的有效时间(lock validity time)。这样的话，这个节点在重启前所参与的锁都会过期，它在重启后就不会对现有的锁造成影响。</p>\n<ul>\n<li><p>如果客户端长期阻塞导致锁过期</p>\n<p><img src=\"http://wumu.sciento.cn/img/16a07877f982bd5c.png\" alt=\"\"></p>\n</li>\n</ul>\n<p>解释一下这个时序图，客户端1在获得锁之后发生了很长时间的GC pause，在此期间，它获得的锁过期了，而客户端2获得了锁。当客户端1从GC pause中恢复过来的时候，它不知道自己持有的锁已经过期了，它依然向共享资源（上图中是一个存储服务）发起了写数据请求，而这时锁实际上被客户端2持有，因此两个客户端的写请求就有可能冲突（锁的互斥作用失效了）。</p>\n<p>如何解决这个问题呢?引入了fencing token的概念：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://wumu.sciento.cn/img/16a07879db4e469e.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>客户端1先获取到的锁，因此有一个较小的fencing token，等于33，而客户端2后获取到的锁，有一个较大的fencing token，等于34。客户端1从GC pause中恢复过来之后，依然是向存储服务发送访问请求，但是带了fencing token = 33。存储服务发现它之前已经处理过34的请求，所以会拒绝掉这次33的请求。这样就避免了冲突。</p>\n<p>但是其实这已经超出了Redis实现分布式锁的范围，单纯用Redis没有命令来实现生成Token。</p>\n<ul>\n<li>时钟跳跃问题 假设有5个Redis节点A, B, C, D, E。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端1从Redis节点A, B, C成功获取了锁（多数节点）。由于网络问题，与D和E通信失败。</span><br><span class=\"line\">节点C上的时钟发生了向前跳跃，导致它上面维护的锁快速过期。</span><br><span class=\"line\">客户端2从Redis节点C, D, E成功获取了同一个资源的锁（多数节点）。</span><br><span class=\"line\">客户端1和客户端2现在都认为自己持有了锁。</span><br><span class=\"line\">这个问题用Redis实现分布式锁暂时无解。而生产环境这种情况是存在的。</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>结论 Redis并不能实现严格意义上的分布式锁。但是这并不意味着上面讨论的方案一无是处。如果你的应用场景为了效率(efficiency)，协调各个客户端避免做重复的工作，即使锁失效了，只是可能把某些操作多做一遍而已，不会产生其它的不良后果。但是如果你的应用场景是为了正确性(correctness)，那么用Redis实现分布式锁并不合适，会存在各种各样的问题，且解决起来就很复杂，为了正确性，需要使用zab、raft共识算法，或者使用带有事务的数据库来实现严格意义上的分布式锁。</p>\n<p>参考资料 Distributed locks with Redis 基于Redis的分布式锁到底安全吗（上）？ - 铁蕾的个人博客 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fmartin.kleppmann.com%2F2016%2F02%2F08%2Fhow-to-do-distributed-locking.html\" target=\"_blank\" rel=\"noopener\">martin.kleppmann.com/2016/02/08/…</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"单机Redis实现分布式锁\"><a href=\"#单机Redis实现分布式锁\" class=\"headerlink\" title=\"单机Redis实现分布式锁\"></a>单机Redis实现分布式锁</h1><h2 id=\"获取锁\"><a href=\"#获取锁\" class=\"headerlink\" title=\"获取锁\"></a>获取锁</h2><p>获取锁的过程很简单，客户端向Redis发送命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET resource_name my_random_value NX PX 30000</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p><code>my_random_value</code>是由客户端生成的一个随机字符串，它要保证在足够长的一段时间内在所有客户端的所有获取锁的请求中都是唯一的。 NX表示只有当<code>resource_name</code>对应的key值不存在的时候才能SET成功。这保证了只有第一个请求的客户端才能获得锁，而其它客户端在锁被释放之前都无法获得锁。 PX 30000表示这个锁有一个30秒的自动过期时间。</p>\n<h2 id=\"释放锁\"><a href=\"#释放锁\" class=\"headerlink\" title=\"释放锁\"></a>释放锁</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if redis.call(&quot;get&quot;,KEYS[1]) == ARGV[1] then</span><br><span class=\"line\">    return redis.call(&quot;del&quot;,KEYS[1])</span><br><span class=\"line\">else</span><br><span class=\"line\">    return 0</span><br><span class=\"line\">end</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>之前获取锁的时候生成的<code>my_random_value</code> 作为参数传到Lua脚本里面，作为：<code>ARGV[1]</code>,而 <code>resource_name</code>作为<code>KEYS[1]</code>。Lua脚本可以保证操作的原子性。</p>\n<h2 id=\"关于单点Redis实现分布式锁的讨论\"><a href=\"#关于单点Redis实现分布式锁的讨论\" class=\"headerlink\" title=\"关于单点Redis实现分布式锁的讨论\"></a>关于单点Redis实现分布式锁的讨论</h2><p>网络上有文章说用如下命令获取锁:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SETNX resource_name my_random_value</span><br><span class=\"line\">EXPIRE resource_name 30</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>由于这两个命令不是原子的。如果客户端在执行完<code>SETNX</code>后<code>crash</code>了，那么就没有机会执行<code>EXPIRE</code>了，导致它一直持有这个锁，其他的客户端就永远获取不到这个锁了。</p>\n<ul>\n<li>为什么<code>my_random_value</code> 要设置成随机值? 保证了一个客户端释放的锁是自己持有的那个锁。如若不然，可能出现锁不安全的情况。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端1获取锁成功。</span><br><span class=\"line\">客户端1在某个操作上阻塞了很长时间。</span><br><span class=\"line\">过期时间到了，锁自动释放了。</span><br><span class=\"line\">客户端2获取到了对应同一个资源的锁。</span><br><span class=\"line\">客户端1从阻塞中恢复过来，释放掉了客户端2持有的锁。</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<ul>\n<li>用 SETNX获取锁 网上大量文章说用如下命令获取锁：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SETNX lock.foo &lt;current Unix time + lock timeout + 1&gt;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>原文在Redis对SETNX的官网说明，Redis官网文档建议用Set命令来代替，主要原因是SETNX不支持超时时间的设置。</p>\n<p><a href=\"https://link.juejin.im?target=https%3A%2F%2Fredis.io%2Fcommands%2Fsetnx\" target=\"_blank\" rel=\"noopener\">redis.io/commands/se…</a></p>\n<h1 id=\"Redis集群实现分布式锁\"><a href=\"#Redis集群实现分布式锁\" class=\"headerlink\" title=\"Redis集群实现分布式锁\"></a>Redis集群实现分布式锁</h1><p>上面的讨论中我们有一个非常重要的假设：Redis是单点的。如果Redis是集群模式，我们考虑如下场景:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端1从Master获取了锁。</span><br><span class=\"line\">Master宕机了，存储锁的key还没有来得及同步到Slave上。</span><br><span class=\"line\">Slave升级为Master。</span><br><span class=\"line\">客户端2从新的Master获取到了对应同一个资源的锁。</span><br><span class=\"line\">客户端1和客户端2同时持有了同一个资源的锁，锁不再具有安全性。</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>就此问题，Redis作者antirez写了RedLock算法来解决这种问题。</p>\n<h2 id=\"RedLock获取锁\"><a href=\"#RedLock获取锁\" class=\"headerlink\" title=\"RedLock获取锁\"></a>RedLock获取锁</h2><ul>\n<li>获取当前时间。</li>\n<li>按顺序依次向N个Redis节点执行获取锁的操作。这个获取操作跟前面基于单Redis节点的获取锁的过程相同，包含随机字符串my_random_value，也包含过期时间(比如PX 30000，即锁的有效时间)。为了保证在某个Redis节点不可用的时候算法能够继续运行，这个获取锁的操作还有一个超时时间(time out)，它要远小于锁的有效时间（几十毫秒量级）。客户端在向某个Redis节点获取锁失败以后，应该立即尝试下一个Redis节点。</li>\n<li>计算整个获取锁的过程总共消耗了多长时间，计算方法是用当前时间减去第1步记录的时间。如果客户端从大多数Redis节点（&gt;= N/2+1）成功获取到了锁，并且获取锁总共消耗的时间没有超过锁的有效时间(lock validity time)，那么这时客户端才认为最终获取锁成功；否则，认为最终获取锁失败。</li>\n<li>如果最终获取锁成功了，那么这个锁的有效时间应该重新计算，它等于最初的锁的有效时间减去第3步计算出来的获取锁消耗的时间。</li>\n<li>如果最终获取锁失败了（可能由于获取到锁的Redis节点个数少于N/2+1，或者整个获取锁的过程消耗的时间超过了锁的最初有效时间），那么客户端应该立即向所有Redis节点发起释放锁的操作（即前面介绍的单机Redis Lua脚本释放锁的方法）。</li>\n</ul>\n<h2 id=\"RedLock释放锁\"><a href=\"#RedLock释放锁\" class=\"headerlink\" title=\"RedLock释放锁\"></a>RedLock释放锁</h2><p>客户端向所有Redis节点发起释放锁的操作，不管这些节点当时在获取锁的时候成功与否。</p>\n<h2 id=\"关于RedLock的问题讨论\"><a href=\"#关于RedLock的问题讨论\" class=\"headerlink\" title=\"关于RedLock的问题讨论\"></a>关于RedLock的问题讨论</h2><ul>\n<li>如果有节点发生崩溃重启 假设一共有5个Redis节点：A, B, C, D, E。设想发生了如下的事件序列：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端1成功锁住了A, B, C，获取锁成功（但D和E没有锁住）。</span><br><span class=\"line\">节点C崩溃重启了，但客户端1在C上加的锁没有持久化下来，丢失了。</span><br><span class=\"line\">节点C重启后，客户端2锁住了C, D, E，获取锁成功。</span><br><span class=\"line\">客户端1和客户端2同时获得了锁。</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>为了应对这一问题，antirez又提出了延迟重启(delayed restarts)的概念。也就是说，一个节点崩溃后，先不立即重启它，而是等待一段时间再重启，这段时间应该大于锁的有效时间(lock validity time)。这样的话，这个节点在重启前所参与的锁都会过期，它在重启后就不会对现有的锁造成影响。</p>\n<ul>\n<li><p>如果客户端长期阻塞导致锁过期</p>\n<p><img src=\"http://wumu.sciento.cn/img/16a07877f982bd5c.png\" alt=\"\"></p>\n</li>\n</ul>\n<p>解释一下这个时序图，客户端1在获得锁之后发生了很长时间的GC pause，在此期间，它获得的锁过期了，而客户端2获得了锁。当客户端1从GC pause中恢复过来的时候，它不知道自己持有的锁已经过期了，它依然向共享资源（上图中是一个存储服务）发起了写数据请求，而这时锁实际上被客户端2持有，因此两个客户端的写请求就有可能冲突（锁的互斥作用失效了）。</p>\n<p>如何解决这个问题呢?引入了fencing token的概念：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://wumu.sciento.cn/img/16a07879db4e469e.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>客户端1先获取到的锁，因此有一个较小的fencing token，等于33，而客户端2后获取到的锁，有一个较大的fencing token，等于34。客户端1从GC pause中恢复过来之后，依然是向存储服务发送访问请求，但是带了fencing token = 33。存储服务发现它之前已经处理过34的请求，所以会拒绝掉这次33的请求。这样就避免了冲突。</p>\n<p>但是其实这已经超出了Redis实现分布式锁的范围，单纯用Redis没有命令来实现生成Token。</p>\n<ul>\n<li>时钟跳跃问题 假设有5个Redis节点A, B, C, D, E。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">客户端1从Redis节点A, B, C成功获取了锁（多数节点）。由于网络问题，与D和E通信失败。</span><br><span class=\"line\">节点C上的时钟发生了向前跳跃，导致它上面维护的锁快速过期。</span><br><span class=\"line\">客户端2从Redis节点C, D, E成功获取了同一个资源的锁（多数节点）。</span><br><span class=\"line\">客户端1和客户端2现在都认为自己持有了锁。</span><br><span class=\"line\">这个问题用Redis实现分布式锁暂时无解。而生产环境这种情况是存在的。</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>结论 Redis并不能实现严格意义上的分布式锁。但是这并不意味着上面讨论的方案一无是处。如果你的应用场景为了效率(efficiency)，协调各个客户端避免做重复的工作，即使锁失效了，只是可能把某些操作多做一遍而已，不会产生其它的不良后果。但是如果你的应用场景是为了正确性(correctness)，那么用Redis实现分布式锁并不合适，会存在各种各样的问题，且解决起来就很复杂，为了正确性，需要使用zab、raft共识算法，或者使用带有事务的数据库来实现严格意义上的分布式锁。</p>\n<p>参考资料 Distributed locks with Redis 基于Redis的分布式锁到底安全吗（上）？ - 铁蕾的个人博客 <a href=\"https://link.juejin.im?target=https%3A%2F%2Fmartin.kleppmann.com%2F2016%2F02%2F08%2Fhow-to-do-distributed-locking.html\" target=\"_blank\" rel=\"noopener\">martin.kleppmann.com/2016/02/08/…</a></p>\n"},{"title":"springboot-mongodb使用","date":"2019-01-04T01:43:06.000Z","_content":"\n# 基本注解\n\n1. `@id`\n2. `@Document`\n3. `@DBRef`\n4. `$Indexed`\n5. `@CompoundIndex`\n6. `@GenSpatialIndexed`\n7. `@Transient`\n8. `@PersistenceConstructor`\n\n","source":"_posts/springboot-mongodb使用.md","raw":"---\ntitle: springboot-mongodb使用\ndate: 2019-01-04 09:43:06\ntags:\n- springboot\n- mongodb\n---\n\n# 基本注解\n\n1. `@id`\n2. `@Document`\n3. `@DBRef`\n4. `$Indexed`\n5. `@CompoundIndex`\n6. `@GenSpatialIndexed`\n7. `@Transient`\n8. `@PersistenceConstructor`\n\n","slug":"springboot-mongodb使用","published":1,"updated":"2019-07-22T08:16:15.264Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblk600144tje6vn1uc0l","content":"<h1 id=\"基本注解\"><a href=\"#基本注解\" class=\"headerlink\" title=\"基本注解\"></a>基本注解</h1><ol>\n<li><code>@id</code></li>\n<li><code>@Document</code></li>\n<li><code>@DBRef</code></li>\n<li><code>$Indexed</code></li>\n<li><code>@CompoundIndex</code></li>\n<li><code>@GenSpatialIndexed</code></li>\n<li><code>@Transient</code></li>\n<li><code>@PersistenceConstructor</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基本注解\"><a href=\"#基本注解\" class=\"headerlink\" title=\"基本注解\"></a>基本注解</h1><ol>\n<li><code>@id</code></li>\n<li><code>@Document</code></li>\n<li><code>@DBRef</code></li>\n<li><code>$Indexed</code></li>\n<li><code>@CompoundIndex</code></li>\n<li><code>@GenSpatialIndexed</code></li>\n<li><code>@Transient</code></li>\n<li><code>@PersistenceConstructor</code></li>\n</ol>\n"},{"title":"weboack性能优化笔记","date":"2019-10-18T03:52:51.000Z","_content":"\n<https://juejin.im/post/5b652b036fb9a04fa01d616b>\n\n","source":"_posts/weboack性能优化笔记.md","raw":"---\ntitle: weboack性能优化笔记\ndate: 2019-10-18 11:52:51\ntags:\n - js\n---\n\n<https://juejin.im/post/5b652b036fb9a04fa01d616b>\n\n","slug":"weboack性能优化笔记","published":1,"updated":"2020-08-27T15:25:48.715Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblk800164tjeyjjhqa1j","content":"<p><a href=\"https://juejin.im/post/5b652b036fb9a04fa01d616b\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5b652b036fb9a04fa01d616b</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://juejin.im/post/5b652b036fb9a04fa01d616b\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5b652b036fb9a04fa01d616b</a></p>\n"},{"title":"springcloud-eureka","date":"2019-01-06T10:27:25.000Z","_content":"\n# 建立工程\n\n1. 添加依赖\n\n   ```xml\n   <dependency>\n           <groupId>org.springframework.cloud</groupId>\n           <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n           <version>${spring-cloud.version}</version>\n   </dependency>\n   ```\n\n2. 添加`Application`\n\n   ```java\n   @SpringBootApplication\n   @EnableEurekaServer\n   public class EurekaApplication {\n       public static void main(String[] arg){\n           SpringApplication.run(EurekaApplication.class,arg);\n       }\n   }\n   \n   ```\n\n3. 添加配置文件\n\n   ```yaml\n   server:\n     port: 8761\n   \n   eureka:\n     instance:\n       hostname: localhost\n     client:\n       registerWithEureka: false ## 是否注册到eureka server\n       fetchRegistry: false  ## 是否获取Eureka server 注册信息，单机可以设置为false\n       serviceUrl:\n         defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/\n   \t\t## 默认http://localhost:8761/eureka\n   spring:\n     application:\n       name: eurka-server\n   ```\n\n4. 运行工程，访问`127.0.0.1:9761`可以看到web界面。\n\n# 安全\n\n1. 添加依赖\n\n   ```\n    <dependency>\n               <groupId>org.springframework.boot</groupId>\n               <artifactId>spring-boot-starter-security</artifactId>\n           </dependency>\n   ```\n\n2. 添加配置\n\n   - 老版本\n\n   ```yaml\n   security:\n   \tbasic:\n   \t\ttrue\n       user:\n         name: wumu\n         password: wumu \n   ```\n\n   - 新版本\n\n   ```yaml\n   security:\n       user:\n         name: wumu\n         password: wumu\n   ```\n\n\n# 问题\n\n1. 在依赖包中同时添加的`spring-cloud-starter-netflix-eureka-server`与`springb-boot-starter-web`两个依赖会导致tomcat的依赖问题，应用不能启动。\n\n","source":"_posts/springcloud-eureka.md","raw":"---\ntitle: springcloud-eureka\ndate: 2019-01-06 18:27:25\ntags:\n- spring-cloud\n---\n\n# 建立工程\n\n1. 添加依赖\n\n   ```xml\n   <dependency>\n           <groupId>org.springframework.cloud</groupId>\n           <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n           <version>${spring-cloud.version}</version>\n   </dependency>\n   ```\n\n2. 添加`Application`\n\n   ```java\n   @SpringBootApplication\n   @EnableEurekaServer\n   public class EurekaApplication {\n       public static void main(String[] arg){\n           SpringApplication.run(EurekaApplication.class,arg);\n       }\n   }\n   \n   ```\n\n3. 添加配置文件\n\n   ```yaml\n   server:\n     port: 8761\n   \n   eureka:\n     instance:\n       hostname: localhost\n     client:\n       registerWithEureka: false ## 是否注册到eureka server\n       fetchRegistry: false  ## 是否获取Eureka server 注册信息，单机可以设置为false\n       serviceUrl:\n         defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/\n   \t\t## 默认http://localhost:8761/eureka\n   spring:\n     application:\n       name: eurka-server\n   ```\n\n4. 运行工程，访问`127.0.0.1:9761`可以看到web界面。\n\n# 安全\n\n1. 添加依赖\n\n   ```\n    <dependency>\n               <groupId>org.springframework.boot</groupId>\n               <artifactId>spring-boot-starter-security</artifactId>\n           </dependency>\n   ```\n\n2. 添加配置\n\n   - 老版本\n\n   ```yaml\n   security:\n   \tbasic:\n   \t\ttrue\n       user:\n         name: wumu\n         password: wumu \n   ```\n\n   - 新版本\n\n   ```yaml\n   security:\n       user:\n         name: wumu\n         password: wumu\n   ```\n\n\n# 问题\n\n1. 在依赖包中同时添加的`spring-cloud-starter-netflix-eureka-server`与`springb-boot-starter-web`两个依赖会导致tomcat的依赖问题，应用不能启动。\n\n","slug":"springcloud-eureka","published":1,"updated":"2019-07-22T08:16:15.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblk900174tjetaj2vcdq","content":"<h1 id=\"建立工程\"><a href=\"#建立工程\" class=\"headerlink\" title=\"建立工程\"></a>建立工程</h1><ol>\n<li><p>添加依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加<code>Application</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaServer</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EurekaApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] arg)</span></span>&#123;</span><br><span class=\"line\">        SpringApplication.run(EurekaApplication.class,arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8761</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  instance:</span></span><br><span class=\"line\"><span class=\"attr\">    hostname:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    registerWithEureka:</span> <span class=\"literal\">false</span> <span class=\"comment\">## 是否注册到eureka server</span></span><br><span class=\"line\"><span class=\"attr\">    fetchRegistry:</span> <span class=\"literal\">false</span>  <span class=\"comment\">## 是否获取Eureka server 注册信息，单机可以设置为false</span></span><br><span class=\"line\"><span class=\"attr\">    serviceUrl:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class=\"line\">\t\t<span class=\"comment\">## 默认http://localhost:8761/eureka</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  application:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">eurka-server</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行工程，访问<code>127.0.0.1:9761</code>可以看到web界面。</p>\n</li>\n</ol>\n<h1 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h1><ol>\n<li><p>添加依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">           &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class=\"line\">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加配置</p>\n<ul>\n<li>老版本</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">security:</span></span><br><span class=\"line\">\t<span class=\"attr\">basic:</span></span><br><span class=\"line\">\t\t<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    user:</span></span><br><span class=\"line\"><span class=\"attr\">      name:</span> <span class=\"string\">wumu</span></span><br><span class=\"line\"><span class=\"attr\">      password:</span> <span class=\"string\">wumu</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>新版本</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">security:</span></span><br><span class=\"line\"><span class=\"attr\">    user:</span></span><br><span class=\"line\"><span class=\"attr\">      name:</span> <span class=\"string\">wumu</span></span><br><span class=\"line\"><span class=\"attr\">      password:</span> <span class=\"string\">wumu</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><ol>\n<li>在依赖包中同时添加的<code>spring-cloud-starter-netflix-eureka-server</code>与<code>springb-boot-starter-web</code>两个依赖会导致tomcat的依赖问题，应用不能启动。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"建立工程\"><a href=\"#建立工程\" class=\"headerlink\" title=\"建立工程\"></a>建立工程</h1><ol>\n<li><p>添加依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加<code>Application</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaServer</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EurekaApplication</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] arg)</span></span>&#123;</span><br><span class=\"line\">        SpringApplication.run(EurekaApplication.class,arg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\"><span class=\"attr\">  port:</span> <span class=\"number\">8761</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\"><span class=\"attr\">  instance:</span></span><br><span class=\"line\"><span class=\"attr\">    hostname:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\"><span class=\"attr\">  client:</span></span><br><span class=\"line\"><span class=\"attr\">    registerWithEureka:</span> <span class=\"literal\">false</span> <span class=\"comment\">## 是否注册到eureka server</span></span><br><span class=\"line\"><span class=\"attr\">    fetchRegistry:</span> <span class=\"literal\">false</span>  <span class=\"comment\">## 是否获取Eureka server 注册信息，单机可以设置为false</span></span><br><span class=\"line\"><span class=\"attr\">    serviceUrl:</span></span><br><span class=\"line\"><span class=\"attr\">      defaultZone:</span> <span class=\"attr\">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class=\"line\">\t\t<span class=\"comment\">## 默认http://localhost:8761/eureka</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  application:</span></span><br><span class=\"line\"><span class=\"attr\">    name:</span> <span class=\"string\">eurka-server</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行工程，访问<code>127.0.0.1:9761</code>可以看到web界面。</p>\n</li>\n</ol>\n<h1 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h1><ol>\n<li><p>添加依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">           &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class=\"line\">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加配置</p>\n<ul>\n<li>老版本</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">security:</span></span><br><span class=\"line\">\t<span class=\"attr\">basic:</span></span><br><span class=\"line\">\t\t<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">    user:</span></span><br><span class=\"line\"><span class=\"attr\">      name:</span> <span class=\"string\">wumu</span></span><br><span class=\"line\"><span class=\"attr\">      password:</span> <span class=\"string\">wumu</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>新版本</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">security:</span></span><br><span class=\"line\"><span class=\"attr\">    user:</span></span><br><span class=\"line\"><span class=\"attr\">      name:</span> <span class=\"string\">wumu</span></span><br><span class=\"line\"><span class=\"attr\">      password:</span> <span class=\"string\">wumu</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><ol>\n<li>在依赖包中同时添加的<code>spring-cloud-starter-netflix-eureka-server</code>与<code>springb-boot-starter-web</code>两个依赖会导致tomcat的依赖问题，应用不能启动。</li>\n</ol>\n"},{"title":"查找附近的人","date":"2019-01-04T11:46:12.000Z","_content":"\n# GeoHash\n\n比较原始的方法，简单方便\n\n# Mysql\n\n计算公式\n\n```\nC = sin(MLatA)*sin(MLatB)*cos(MLonA-MLonB) + cos(MLatA)*cos(MLatB)\nDistance = R*Arccos(C)*Pi/180\n```\n\n在经纬度小节中我们了解了两个公式用来计算两个位置之间的距离, 该小节我们以测试数据说明如何实现.\n测试需要的表结构和数据:\n\n```\n表结构:\nCREATE TABLE `geotest` (\n  `userid` int(10) NOT NULL,\n  `longitude` decimal(9,6) NOT NULL,\n  `latitude` decimal(9,6) NOT NULL,\n  `create_time` datetime DEFAULT NULL,\n  UNIQUE KEY `unq_uid` (`userid`),\n  KEY `idx_lat_lng` (`longitude`,`latitude`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n\n测试数据:\ninsert geotest values(10000, 116.417480, 40.003033, now());\ninsert geotest values(10001, 116.437480, 40.004033, now());\ninsert geotest values(10002, 116.457480, 40.005033, now());\ninsert geotest values(10003, 116.477480, 40.006033, now());\n......\n......\n```\n\n第一种公式中, google 为我们介绍了如何使用 [sql](https://developers.google.com/maps/articles/phpsqlsearch_v3#findnearsql) 来获取附近的点, 如下所示, 我们选用 6371km 作为地球的半径,根据上述小节的计算公式推断:\n\n```\nC = sin(MLatA)*sin(MLatB)*cos(MLonA-MLonB) + cos(MLatA)*cos(MLatB)\nDistance = R*Arccos(C)*Pi/180\n```\n\ngoogle 地图的计算公式可以参考 [geo_search](http://www.arubin.org/files/geo_search.pdf)\n\n两个位置之间的距离则可以换算成以下公式:\n\n```\nR*arccos( cos( radians(latA)*cos( radians(latB) ) * cos( radians(lonA - lonB) )) + sin( radians(latA)*cos(latB) ))\n```\n\nradians 函数计算出相应的弧度信息, 得到下面的 sql:\n\n```\nSELECT\n  user_id, (\n    6371 * acos (\n      cos ( radians(40.003033) )\n      * cos( radians( latitude ) )\n      * cos( radians( longitude ) - radians(116.417481) )\n      + sin ( radians(40.003033) )\n      * sin( radians( latitude ) )\n    )\n  ) AS distance\nFROM geotest\nHAVING distance < 1\nORDER BY distance\nLIMIT 0 , 20;\n```\n\n上面的 sql 从 geotest 中从 geotest 表中获取到经度(116.417481) 和纬度(40.003033) 位置附近 1km 所有的user_id 信息.\n观察这个 sql, 可以预见到在表数据较大的时候仅建立复合索引 `idx_lat_lng` 肯定会遇到性能瓶颈, 因为每行记录都需要做相关的运算, 才能跑出最后的结果.\n\n所以要提高该 sql 的性能就需要尽量过滤不需要的 longitude 和 latitude 两列的值. 参考 [geo_search](http://www.arubin.org/files/geo_search.pdf) 和 [fastest-way-to-find-distance](http://stackoverflow.com/questions/1006654/fastest-way-to-find-distance-between-two-lat-long-points), 在近距离的情况下我们可以认为当前区域内的所有位置都在一个平面内, 虽然有点误差, 但是比起地球这么大的椭球, 我们完全可以忽略其中的误差. 以经纬度来讲, 1 纬度约等于 69 英里, 大约 111044.736 米, 其中的换算公式为:\n\n```\n1°latitude  ~= 69 miles\n1°longitude ~= cos(latitude)*69 miles\n```\n\n所以对于位置信息(lng, lat), 我们可以计算出以其为中心周边指定距离的四个点, 如下图所示:\n\n```\n  +-------------+\n  |             |\n  |             |\n  |      +      |\n  |             |\n  |             |\n  +-------------+\n```\n\n计算公式如下:\n\n```\nlng1 = lon - dist/abs(cos(radians(lat))*69)\nlng2 = lon + dist/abs(cos(radians(lat))*69)\nlat1 = lat - (dist/69);\nlat2 = lat + (dist/69);\n```\n\n四个点的坐标就分别为 (lng1, lat1), (lng1, lat2), (lng2, lat1), (lng2, lat2), 所以存在于该四个点组成的平面之间的点即可以被认为在(lng, lat) 的 dist 距离内.\n\n基于上述的规则, 修改 sql 为以下:\n\n```\nSELECT\n  user_id, (\n    6371 * acos (\n      cos ( radians(40.003033) )\n      * cos( radians( latitude ) )\n      * cos( radians( longitude ) - radians(116.417481) )\n      + sin ( radians(40.003033) )\n      * sin( radians( latitude ) )\n    )\n  ) AS distance\nFROM geotest\nWHERE longitude BETWEEN lng1 AND lng2\nAND latitude BETWEEN lat1 AND lat2\nHAVING distance < 1\nORDER BY distance\nLIMIT 0 , 20;\n```\n\n这样就能很好的使用索引, 如果还想增加超时设置, 可以在 sql 里加上 create_time 条件进行过滤, 比如只查找最近一天的附近的用户. 另外开发者也可以结合使用 sphinx 或 elasticsearch 得到更好的性能.\n\n下面为根据上面介绍的规则整理成存储过程, 方便开发者调用访问. 这里我们将地球半径的公里数转换为米即为 6371392.89m, 69英里则转为 111044.736m, 如下存储过程返回 user_id 和 距离(米):\n\n```\nDELIMITER $$\ndrop procedure if exists geo_dist$$\ncreate procedure geo_dist(IN lng decimal(9, 6), IN lat decimal(9, 6), IN dist int)\nbegin\n   declare lng1 decimal(9, 6); declare lng2 decimal(16, 13);\n   declare lat1 decimal(9, 6); declare lat1 decimal(16, 13);\n\n   -- calculate lng and lat for the rectangle, in meters unit\n   set lng1 = lng - dist/abs(cos(radians(lat))*111044.736);\n   set lng2 = lng + dist/abs(cos(radians(lat))*111044.736);\n   set lat1 = lat - (dist/111044.736);\n   set lat2 = lat + (dist/111044.736);\n\n   -- run the query\n     select user_id, round((\n        6371392.89 * acos (\n         cos ( radians(lat) )\n         * cos( radians( latitude ) )\n         * cos( radians( longitude ) - radians(lng) )\n         + sin ( radians(lat) )\n         * sin( radians( latitude ) )\n       )\n     ), 0) AS distance\n     from user_position\n     where lng between lng1 and lng2\n     and lat between lat1 and lat2\n     having distance < dist\n     ORDER BY distance\n     LIMIT 0 , 20;\nEND$$\nDELIMITER ;\n```\n\n运行存储过程, 取出该经纬度下附近 5km 的用户和距离(m):\n\n```\nmysql > call geo_dist(116.4174800000000, 40.0030330000000, 5000);\n+---------+----------+\n| user_id | distance |\n+---------+----------+\n|   10000 |        0 |\n|   10001 |     1707 |\n|   10002 |     3414 |\n+---------+----------+\n3 rows in set (0.00 sec)\n\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n10001 用户和指定的经纬度距离为1707米, 我们在 redis 3.2 版本中进行简单测试, 可以看到结果都很相近:\n\n```\n127.0.0.1:6380> geoadd tttt 116.417480 40.003033 t1\n(integer) 0\n127.0.0.1:6380> geoadd tttt 116.437481 40.004034 t2\n(integer) 0\n127.0.0.1:6380> GEODIST tttt t1 t2\n\"1707.5093\"\n```\n\n# mongodb\n\n创建位置索引\n\n\n\n\n\n# 参考\n\n> [使用 MySQL 实现搜索附近的人](https://arstercz.com/%E4%BD%BF%E7%94%A8-mysql-%E5%AE%9E%E7%8E%B0%E6%90%9C%E7%B4%A2%E9%99%84%E8%BF%91%E7%9A%84%E4%BA%BA/)\n>\n> [GeoHash算法学习讲解、解析及原理分析](https://zhuanlan.zhihu.com/p/35940647)","source":"_posts/查找附近的人.md","raw":"---\ntitle: 查找附近的人\ndate: 2019-01-04 19:46:12\ntags:\n- mysql\n- mongodb\n- java\n---\n\n# GeoHash\n\n比较原始的方法，简单方便\n\n# Mysql\n\n计算公式\n\n```\nC = sin(MLatA)*sin(MLatB)*cos(MLonA-MLonB) + cos(MLatA)*cos(MLatB)\nDistance = R*Arccos(C)*Pi/180\n```\n\n在经纬度小节中我们了解了两个公式用来计算两个位置之间的距离, 该小节我们以测试数据说明如何实现.\n测试需要的表结构和数据:\n\n```\n表结构:\nCREATE TABLE `geotest` (\n  `userid` int(10) NOT NULL,\n  `longitude` decimal(9,6) NOT NULL,\n  `latitude` decimal(9,6) NOT NULL,\n  `create_time` datetime DEFAULT NULL,\n  UNIQUE KEY `unq_uid` (`userid`),\n  KEY `idx_lat_lng` (`longitude`,`latitude`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n\n测试数据:\ninsert geotest values(10000, 116.417480, 40.003033, now());\ninsert geotest values(10001, 116.437480, 40.004033, now());\ninsert geotest values(10002, 116.457480, 40.005033, now());\ninsert geotest values(10003, 116.477480, 40.006033, now());\n......\n......\n```\n\n第一种公式中, google 为我们介绍了如何使用 [sql](https://developers.google.com/maps/articles/phpsqlsearch_v3#findnearsql) 来获取附近的点, 如下所示, 我们选用 6371km 作为地球的半径,根据上述小节的计算公式推断:\n\n```\nC = sin(MLatA)*sin(MLatB)*cos(MLonA-MLonB) + cos(MLatA)*cos(MLatB)\nDistance = R*Arccos(C)*Pi/180\n```\n\ngoogle 地图的计算公式可以参考 [geo_search](http://www.arubin.org/files/geo_search.pdf)\n\n两个位置之间的距离则可以换算成以下公式:\n\n```\nR*arccos( cos( radians(latA)*cos( radians(latB) ) * cos( radians(lonA - lonB) )) + sin( radians(latA)*cos(latB) ))\n```\n\nradians 函数计算出相应的弧度信息, 得到下面的 sql:\n\n```\nSELECT\n  user_id, (\n    6371 * acos (\n      cos ( radians(40.003033) )\n      * cos( radians( latitude ) )\n      * cos( radians( longitude ) - radians(116.417481) )\n      + sin ( radians(40.003033) )\n      * sin( radians( latitude ) )\n    )\n  ) AS distance\nFROM geotest\nHAVING distance < 1\nORDER BY distance\nLIMIT 0 , 20;\n```\n\n上面的 sql 从 geotest 中从 geotest 表中获取到经度(116.417481) 和纬度(40.003033) 位置附近 1km 所有的user_id 信息.\n观察这个 sql, 可以预见到在表数据较大的时候仅建立复合索引 `idx_lat_lng` 肯定会遇到性能瓶颈, 因为每行记录都需要做相关的运算, 才能跑出最后的结果.\n\n所以要提高该 sql 的性能就需要尽量过滤不需要的 longitude 和 latitude 两列的值. 参考 [geo_search](http://www.arubin.org/files/geo_search.pdf) 和 [fastest-way-to-find-distance](http://stackoverflow.com/questions/1006654/fastest-way-to-find-distance-between-two-lat-long-points), 在近距离的情况下我们可以认为当前区域内的所有位置都在一个平面内, 虽然有点误差, 但是比起地球这么大的椭球, 我们完全可以忽略其中的误差. 以经纬度来讲, 1 纬度约等于 69 英里, 大约 111044.736 米, 其中的换算公式为:\n\n```\n1°latitude  ~= 69 miles\n1°longitude ~= cos(latitude)*69 miles\n```\n\n所以对于位置信息(lng, lat), 我们可以计算出以其为中心周边指定距离的四个点, 如下图所示:\n\n```\n  +-------------+\n  |             |\n  |             |\n  |      +      |\n  |             |\n  |             |\n  +-------------+\n```\n\n计算公式如下:\n\n```\nlng1 = lon - dist/abs(cos(radians(lat))*69)\nlng2 = lon + dist/abs(cos(radians(lat))*69)\nlat1 = lat - (dist/69);\nlat2 = lat + (dist/69);\n```\n\n四个点的坐标就分别为 (lng1, lat1), (lng1, lat2), (lng2, lat1), (lng2, lat2), 所以存在于该四个点组成的平面之间的点即可以被认为在(lng, lat) 的 dist 距离内.\n\n基于上述的规则, 修改 sql 为以下:\n\n```\nSELECT\n  user_id, (\n    6371 * acos (\n      cos ( radians(40.003033) )\n      * cos( radians( latitude ) )\n      * cos( radians( longitude ) - radians(116.417481) )\n      + sin ( radians(40.003033) )\n      * sin( radians( latitude ) )\n    )\n  ) AS distance\nFROM geotest\nWHERE longitude BETWEEN lng1 AND lng2\nAND latitude BETWEEN lat1 AND lat2\nHAVING distance < 1\nORDER BY distance\nLIMIT 0 , 20;\n```\n\n这样就能很好的使用索引, 如果还想增加超时设置, 可以在 sql 里加上 create_time 条件进行过滤, 比如只查找最近一天的附近的用户. 另外开发者也可以结合使用 sphinx 或 elasticsearch 得到更好的性能.\n\n下面为根据上面介绍的规则整理成存储过程, 方便开发者调用访问. 这里我们将地球半径的公里数转换为米即为 6371392.89m, 69英里则转为 111044.736m, 如下存储过程返回 user_id 和 距离(米):\n\n```\nDELIMITER $$\ndrop procedure if exists geo_dist$$\ncreate procedure geo_dist(IN lng decimal(9, 6), IN lat decimal(9, 6), IN dist int)\nbegin\n   declare lng1 decimal(9, 6); declare lng2 decimal(16, 13);\n   declare lat1 decimal(9, 6); declare lat1 decimal(16, 13);\n\n   -- calculate lng and lat for the rectangle, in meters unit\n   set lng1 = lng - dist/abs(cos(radians(lat))*111044.736);\n   set lng2 = lng + dist/abs(cos(radians(lat))*111044.736);\n   set lat1 = lat - (dist/111044.736);\n   set lat2 = lat + (dist/111044.736);\n\n   -- run the query\n     select user_id, round((\n        6371392.89 * acos (\n         cos ( radians(lat) )\n         * cos( radians( latitude ) )\n         * cos( radians( longitude ) - radians(lng) )\n         + sin ( radians(lat) )\n         * sin( radians( latitude ) )\n       )\n     ), 0) AS distance\n     from user_position\n     where lng between lng1 and lng2\n     and lat between lat1 and lat2\n     having distance < dist\n     ORDER BY distance\n     LIMIT 0 , 20;\nEND$$\nDELIMITER ;\n```\n\n运行存储过程, 取出该经纬度下附近 5km 的用户和距离(m):\n\n```\nmysql > call geo_dist(116.4174800000000, 40.0030330000000, 5000);\n+---------+----------+\n| user_id | distance |\n+---------+----------+\n|   10000 |        0 |\n|   10001 |     1707 |\n|   10002 |     3414 |\n+---------+----------+\n3 rows in set (0.00 sec)\n\nQuery OK, 0 rows affected (0.01 sec)\n```\n\n10001 用户和指定的经纬度距离为1707米, 我们在 redis 3.2 版本中进行简单测试, 可以看到结果都很相近:\n\n```\n127.0.0.1:6380> geoadd tttt 116.417480 40.003033 t1\n(integer) 0\n127.0.0.1:6380> geoadd tttt 116.437481 40.004034 t2\n(integer) 0\n127.0.0.1:6380> GEODIST tttt t1 t2\n\"1707.5093\"\n```\n\n# mongodb\n\n创建位置索引\n\n\n\n\n\n# 参考\n\n> [使用 MySQL 实现搜索附近的人](https://arstercz.com/%E4%BD%BF%E7%94%A8-mysql-%E5%AE%9E%E7%8E%B0%E6%90%9C%E7%B4%A2%E9%99%84%E8%BF%91%E7%9A%84%E4%BA%BA/)\n>\n> [GeoHash算法学习讲解、解析及原理分析](https://zhuanlan.zhihu.com/p/35940647)","slug":"查找附近的人","published":1,"updated":"2019-07-22T08:16:15.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblka001a4tjeh926l1k3","content":"<h1 id=\"GeoHash\"><a href=\"#GeoHash\" class=\"headerlink\" title=\"GeoHash\"></a>GeoHash</h1><p>比较原始的方法，简单方便</p>\n<h1 id=\"Mysql\"><a href=\"#Mysql\" class=\"headerlink\" title=\"Mysql\"></a>Mysql</h1><p>计算公式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C = sin(MLatA)*sin(MLatB)*cos(MLonA-MLonB) + cos(MLatA)*cos(MLatB)</span><br><span class=\"line\">Distance = R*Arccos(C)*Pi/180</span><br></pre></td></tr></table></figure>\n<p>在经纬度小节中我们了解了两个公式用来计算两个位置之间的距离, 该小节我们以测试数据说明如何实现.<br>测试需要的表结构和数据:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表结构:</span><br><span class=\"line\">CREATE TABLE `geotest` (</span><br><span class=\"line\">  `userid` int(10) NOT NULL,</span><br><span class=\"line\">  `longitude` decimal(9,6) NOT NULL,</span><br><span class=\"line\">  `latitude` decimal(9,6) NOT NULL,</span><br><span class=\"line\">  `create_time` datetime DEFAULT NULL,</span><br><span class=\"line\">  UNIQUE KEY `unq_uid` (`userid`),</span><br><span class=\"line\">  KEY `idx_lat_lng` (`longitude`,`latitude`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8</span><br><span class=\"line\"></span><br><span class=\"line\">测试数据:</span><br><span class=\"line\">insert geotest values(10000, 116.417480, 40.003033, now());</span><br><span class=\"line\">insert geotest values(10001, 116.437480, 40.004033, now());</span><br><span class=\"line\">insert geotest values(10002, 116.457480, 40.005033, now());</span><br><span class=\"line\">insert geotest values(10003, 116.477480, 40.006033, now());</span><br><span class=\"line\">......</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<p>第一种公式中, google 为我们介绍了如何使用 <a href=\"https://developers.google.com/maps/articles/phpsqlsearch_v3#findnearsql\" target=\"_blank\" rel=\"noopener\">sql</a> 来获取附近的点, 如下所示, 我们选用 6371km 作为地球的半径,根据上述小节的计算公式推断:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C = sin(MLatA)*sin(MLatB)*cos(MLonA-MLonB) + cos(MLatA)*cos(MLatB)</span><br><span class=\"line\">Distance = R*Arccos(C)*Pi/180</span><br></pre></td></tr></table></figure>\n<p>google 地图的计算公式可以参考 <a href=\"http://www.arubin.org/files/geo_search.pdf\" target=\"_blank\" rel=\"noopener\">geo_search</a></p>\n<p>两个位置之间的距离则可以换算成以下公式:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">R*arccos( cos( radians(latA)*cos( radians(latB) ) * cos( radians(lonA - lonB) )) + sin( radians(latA)*cos(latB) ))</span><br></pre></td></tr></table></figure>\n<p>radians 函数计算出相应的弧度信息, 得到下面的 sql:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">  user_id, (</span><br><span class=\"line\">    6371 * acos (</span><br><span class=\"line\">      cos ( radians(40.003033) )</span><br><span class=\"line\">      * cos( radians( latitude ) )</span><br><span class=\"line\">      * cos( radians( longitude ) - radians(116.417481) )</span><br><span class=\"line\">      + sin ( radians(40.003033) )</span><br><span class=\"line\">      * sin( radians( latitude ) )</span><br><span class=\"line\">    )</span><br><span class=\"line\">  ) AS distance</span><br><span class=\"line\">FROM geotest</span><br><span class=\"line\">HAVING distance &lt; 1</span><br><span class=\"line\">ORDER BY distance</span><br><span class=\"line\">LIMIT 0 , 20;</span><br></pre></td></tr></table></figure>\n<p>上面的 sql 从 geotest 中从 geotest 表中获取到经度(116.417481) 和纬度(40.003033) 位置附近 1km 所有的user_id 信息.<br>观察这个 sql, 可以预见到在表数据较大的时候仅建立复合索引 <code>idx_lat_lng</code> 肯定会遇到性能瓶颈, 因为每行记录都需要做相关的运算, 才能跑出最后的结果.</p>\n<p>所以要提高该 sql 的性能就需要尽量过滤不需要的 longitude 和 latitude 两列的值. 参考 <a href=\"http://www.arubin.org/files/geo_search.pdf\" target=\"_blank\" rel=\"noopener\">geo_search</a> 和 <a href=\"http://stackoverflow.com/questions/1006654/fastest-way-to-find-distance-between-two-lat-long-points\" target=\"_blank\" rel=\"noopener\">fastest-way-to-find-distance</a>, 在近距离的情况下我们可以认为当前区域内的所有位置都在一个平面内, 虽然有点误差, 但是比起地球这么大的椭球, 我们完全可以忽略其中的误差. 以经纬度来讲, 1 纬度约等于 69 英里, 大约 111044.736 米, 其中的换算公式为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1°latitude  ~= 69 miles</span><br><span class=\"line\">1°longitude ~= cos(latitude)*69 miles</span><br></pre></td></tr></table></figure>\n<p>所以对于位置信息(lng, lat), 我们可以计算出以其为中心周边指定距离的四个点, 如下图所示:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-------------+</span><br><span class=\"line\">|             |</span><br><span class=\"line\">|             |</span><br><span class=\"line\">|      +      |</span><br><span class=\"line\">|             |</span><br><span class=\"line\">|             |</span><br><span class=\"line\">+-------------+</span><br></pre></td></tr></table></figure>\n<p>计算公式如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lng1 = lon - dist/abs(cos(radians(lat))*69)</span><br><span class=\"line\">lng2 = lon + dist/abs(cos(radians(lat))*69)</span><br><span class=\"line\">lat1 = lat - (dist/69);</span><br><span class=\"line\">lat2 = lat + (dist/69);</span><br></pre></td></tr></table></figure>\n<p>四个点的坐标就分别为 (lng1, lat1), (lng1, lat2), (lng2, lat1), (lng2, lat2), 所以存在于该四个点组成的平面之间的点即可以被认为在(lng, lat) 的 dist 距离内.</p>\n<p>基于上述的规则, 修改 sql 为以下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">  user_id, (</span><br><span class=\"line\">    6371 * acos (</span><br><span class=\"line\">      cos ( radians(40.003033) )</span><br><span class=\"line\">      * cos( radians( latitude ) )</span><br><span class=\"line\">      * cos( radians( longitude ) - radians(116.417481) )</span><br><span class=\"line\">      + sin ( radians(40.003033) )</span><br><span class=\"line\">      * sin( radians( latitude ) )</span><br><span class=\"line\">    )</span><br><span class=\"line\">  ) AS distance</span><br><span class=\"line\">FROM geotest</span><br><span class=\"line\">WHERE longitude BETWEEN lng1 AND lng2</span><br><span class=\"line\">AND latitude BETWEEN lat1 AND lat2</span><br><span class=\"line\">HAVING distance &lt; 1</span><br><span class=\"line\">ORDER BY distance</span><br><span class=\"line\">LIMIT 0 , 20;</span><br></pre></td></tr></table></figure>\n<p>这样就能很好的使用索引, 如果还想增加超时设置, 可以在 sql 里加上 create_time 条件进行过滤, 比如只查找最近一天的附近的用户. 另外开发者也可以结合使用 sphinx 或 elasticsearch 得到更好的性能.</p>\n<p>下面为根据上面介绍的规则整理成存储过程, 方便开发者调用访问. 这里我们将地球半径的公里数转换为米即为 6371392.89m, 69英里则转为 111044.736m, 如下存储过程返回 user_id 和 距离(米):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER $$</span><br><span class=\"line\">drop procedure if exists geo_dist$$</span><br><span class=\"line\">create procedure geo_dist(IN lng decimal(9, 6), IN lat decimal(9, 6), IN dist int)</span><br><span class=\"line\">begin</span><br><span class=\"line\">   declare lng1 decimal(9, 6); declare lng2 decimal(16, 13);</span><br><span class=\"line\">   declare lat1 decimal(9, 6); declare lat1 decimal(16, 13);</span><br><span class=\"line\"></span><br><span class=\"line\">   -- calculate lng and lat for the rectangle, in meters unit</span><br><span class=\"line\">   set lng1 = lng - dist/abs(cos(radians(lat))*111044.736);</span><br><span class=\"line\">   set lng2 = lng + dist/abs(cos(radians(lat))*111044.736);</span><br><span class=\"line\">   set lat1 = lat - (dist/111044.736);</span><br><span class=\"line\">   set lat2 = lat + (dist/111044.736);</span><br><span class=\"line\"></span><br><span class=\"line\">   -- run the query</span><br><span class=\"line\">     select user_id, round((</span><br><span class=\"line\">        6371392.89 * acos (</span><br><span class=\"line\">         cos ( radians(lat) )</span><br><span class=\"line\">         * cos( radians( latitude ) )</span><br><span class=\"line\">         * cos( radians( longitude ) - radians(lng) )</span><br><span class=\"line\">         + sin ( radians(lat) )</span><br><span class=\"line\">         * sin( radians( latitude ) )</span><br><span class=\"line\">       )</span><br><span class=\"line\">     ), 0) AS distance</span><br><span class=\"line\">     from user_position</span><br><span class=\"line\">     where lng between lng1 and lng2</span><br><span class=\"line\">     and lat between lat1 and lat2</span><br><span class=\"line\">     having distance &lt; dist</span><br><span class=\"line\">     ORDER BY distance</span><br><span class=\"line\">     LIMIT 0 , 20;</span><br><span class=\"line\">END$$</span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n<p>运行存储过程, 取出该经纬度下附近 5km 的用户和距离(m):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; call geo_dist(116.4174800000000, 40.0030330000000, 5000);</span><br><span class=\"line\">+---------+----------+</span><br><span class=\"line\">| user_id | distance |</span><br><span class=\"line\">+---------+----------+</span><br><span class=\"line\">|   10000 |        0 |</span><br><span class=\"line\">|   10001 |     1707 |</span><br><span class=\"line\">|   10002 |     3414 |</span><br><span class=\"line\">+---------+----------+</span><br><span class=\"line\">3 rows in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>\n<p>10001 用户和指定的经纬度距离为1707米, 我们在 redis 3.2 版本中进行简单测试, 可以看到结果都很相近:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6380&gt; geoadd tttt 116.417480 40.003033 t1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6380&gt; geoadd tttt 116.437481 40.004034 t2</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6380&gt; GEODIST tttt t1 t2</span><br><span class=\"line\">&quot;1707.5093&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"mongodb\"><a href=\"#mongodb\" class=\"headerlink\" title=\"mongodb\"></a>mongodb</h1><p>创建位置索引</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://arstercz.com/%E4%BD%BF%E7%94%A8-mysql-%E5%AE%9E%E7%8E%B0%E6%90%9C%E7%B4%A2%E9%99%84%E8%BF%91%E7%9A%84%E4%BA%BA/\" target=\"_blank\" rel=\"noopener\">使用 MySQL 实现搜索附近的人</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/35940647\" target=\"_blank\" rel=\"noopener\">GeoHash算法学习讲解、解析及原理分析</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"GeoHash\"><a href=\"#GeoHash\" class=\"headerlink\" title=\"GeoHash\"></a>GeoHash</h1><p>比较原始的方法，简单方便</p>\n<h1 id=\"Mysql\"><a href=\"#Mysql\" class=\"headerlink\" title=\"Mysql\"></a>Mysql</h1><p>计算公式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C = sin(MLatA)*sin(MLatB)*cos(MLonA-MLonB) + cos(MLatA)*cos(MLatB)</span><br><span class=\"line\">Distance = R*Arccos(C)*Pi/180</span><br></pre></td></tr></table></figure>\n<p>在经纬度小节中我们了解了两个公式用来计算两个位置之间的距离, 该小节我们以测试数据说明如何实现.<br>测试需要的表结构和数据:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">表结构:</span><br><span class=\"line\">CREATE TABLE `geotest` (</span><br><span class=\"line\">  `userid` int(10) NOT NULL,</span><br><span class=\"line\">  `longitude` decimal(9,6) NOT NULL,</span><br><span class=\"line\">  `latitude` decimal(9,6) NOT NULL,</span><br><span class=\"line\">  `create_time` datetime DEFAULT NULL,</span><br><span class=\"line\">  UNIQUE KEY `unq_uid` (`userid`),</span><br><span class=\"line\">  KEY `idx_lat_lng` (`longitude`,`latitude`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8</span><br><span class=\"line\"></span><br><span class=\"line\">测试数据:</span><br><span class=\"line\">insert geotest values(10000, 116.417480, 40.003033, now());</span><br><span class=\"line\">insert geotest values(10001, 116.437480, 40.004033, now());</span><br><span class=\"line\">insert geotest values(10002, 116.457480, 40.005033, now());</span><br><span class=\"line\">insert geotest values(10003, 116.477480, 40.006033, now());</span><br><span class=\"line\">......</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<p>第一种公式中, google 为我们介绍了如何使用 <a href=\"https://developers.google.com/maps/articles/phpsqlsearch_v3#findnearsql\" target=\"_blank\" rel=\"noopener\">sql</a> 来获取附近的点, 如下所示, 我们选用 6371km 作为地球的半径,根据上述小节的计算公式推断:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C = sin(MLatA)*sin(MLatB)*cos(MLonA-MLonB) + cos(MLatA)*cos(MLatB)</span><br><span class=\"line\">Distance = R*Arccos(C)*Pi/180</span><br></pre></td></tr></table></figure>\n<p>google 地图的计算公式可以参考 <a href=\"http://www.arubin.org/files/geo_search.pdf\" target=\"_blank\" rel=\"noopener\">geo_search</a></p>\n<p>两个位置之间的距离则可以换算成以下公式:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">R*arccos( cos( radians(latA)*cos( radians(latB) ) * cos( radians(lonA - lonB) )) + sin( radians(latA)*cos(latB) ))</span><br></pre></td></tr></table></figure>\n<p>radians 函数计算出相应的弧度信息, 得到下面的 sql:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">  user_id, (</span><br><span class=\"line\">    6371 * acos (</span><br><span class=\"line\">      cos ( radians(40.003033) )</span><br><span class=\"line\">      * cos( radians( latitude ) )</span><br><span class=\"line\">      * cos( radians( longitude ) - radians(116.417481) )</span><br><span class=\"line\">      + sin ( radians(40.003033) )</span><br><span class=\"line\">      * sin( radians( latitude ) )</span><br><span class=\"line\">    )</span><br><span class=\"line\">  ) AS distance</span><br><span class=\"line\">FROM geotest</span><br><span class=\"line\">HAVING distance &lt; 1</span><br><span class=\"line\">ORDER BY distance</span><br><span class=\"line\">LIMIT 0 , 20;</span><br></pre></td></tr></table></figure>\n<p>上面的 sql 从 geotest 中从 geotest 表中获取到经度(116.417481) 和纬度(40.003033) 位置附近 1km 所有的user_id 信息.<br>观察这个 sql, 可以预见到在表数据较大的时候仅建立复合索引 <code>idx_lat_lng</code> 肯定会遇到性能瓶颈, 因为每行记录都需要做相关的运算, 才能跑出最后的结果.</p>\n<p>所以要提高该 sql 的性能就需要尽量过滤不需要的 longitude 和 latitude 两列的值. 参考 <a href=\"http://www.arubin.org/files/geo_search.pdf\" target=\"_blank\" rel=\"noopener\">geo_search</a> 和 <a href=\"http://stackoverflow.com/questions/1006654/fastest-way-to-find-distance-between-two-lat-long-points\" target=\"_blank\" rel=\"noopener\">fastest-way-to-find-distance</a>, 在近距离的情况下我们可以认为当前区域内的所有位置都在一个平面内, 虽然有点误差, 但是比起地球这么大的椭球, 我们完全可以忽略其中的误差. 以经纬度来讲, 1 纬度约等于 69 英里, 大约 111044.736 米, 其中的换算公式为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1°latitude  ~= 69 miles</span><br><span class=\"line\">1°longitude ~= cos(latitude)*69 miles</span><br></pre></td></tr></table></figure>\n<p>所以对于位置信息(lng, lat), 我们可以计算出以其为中心周边指定距离的四个点, 如下图所示:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-------------+</span><br><span class=\"line\">|             |</span><br><span class=\"line\">|             |</span><br><span class=\"line\">|      +      |</span><br><span class=\"line\">|             |</span><br><span class=\"line\">|             |</span><br><span class=\"line\">+-------------+</span><br></pre></td></tr></table></figure>\n<p>计算公式如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lng1 = lon - dist/abs(cos(radians(lat))*69)</span><br><span class=\"line\">lng2 = lon + dist/abs(cos(radians(lat))*69)</span><br><span class=\"line\">lat1 = lat - (dist/69);</span><br><span class=\"line\">lat2 = lat + (dist/69);</span><br></pre></td></tr></table></figure>\n<p>四个点的坐标就分别为 (lng1, lat1), (lng1, lat2), (lng2, lat1), (lng2, lat2), 所以存在于该四个点组成的平面之间的点即可以被认为在(lng, lat) 的 dist 距离内.</p>\n<p>基于上述的规则, 修改 sql 为以下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">  user_id, (</span><br><span class=\"line\">    6371 * acos (</span><br><span class=\"line\">      cos ( radians(40.003033) )</span><br><span class=\"line\">      * cos( radians( latitude ) )</span><br><span class=\"line\">      * cos( radians( longitude ) - radians(116.417481) )</span><br><span class=\"line\">      + sin ( radians(40.003033) )</span><br><span class=\"line\">      * sin( radians( latitude ) )</span><br><span class=\"line\">    )</span><br><span class=\"line\">  ) AS distance</span><br><span class=\"line\">FROM geotest</span><br><span class=\"line\">WHERE longitude BETWEEN lng1 AND lng2</span><br><span class=\"line\">AND latitude BETWEEN lat1 AND lat2</span><br><span class=\"line\">HAVING distance &lt; 1</span><br><span class=\"line\">ORDER BY distance</span><br><span class=\"line\">LIMIT 0 , 20;</span><br></pre></td></tr></table></figure>\n<p>这样就能很好的使用索引, 如果还想增加超时设置, 可以在 sql 里加上 create_time 条件进行过滤, 比如只查找最近一天的附近的用户. 另外开发者也可以结合使用 sphinx 或 elasticsearch 得到更好的性能.</p>\n<p>下面为根据上面介绍的规则整理成存储过程, 方便开发者调用访问. 这里我们将地球半径的公里数转换为米即为 6371392.89m, 69英里则转为 111044.736m, 如下存储过程返回 user_id 和 距离(米):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER $$</span><br><span class=\"line\">drop procedure if exists geo_dist$$</span><br><span class=\"line\">create procedure geo_dist(IN lng decimal(9, 6), IN lat decimal(9, 6), IN dist int)</span><br><span class=\"line\">begin</span><br><span class=\"line\">   declare lng1 decimal(9, 6); declare lng2 decimal(16, 13);</span><br><span class=\"line\">   declare lat1 decimal(9, 6); declare lat1 decimal(16, 13);</span><br><span class=\"line\"></span><br><span class=\"line\">   -- calculate lng and lat for the rectangle, in meters unit</span><br><span class=\"line\">   set lng1 = lng - dist/abs(cos(radians(lat))*111044.736);</span><br><span class=\"line\">   set lng2 = lng + dist/abs(cos(radians(lat))*111044.736);</span><br><span class=\"line\">   set lat1 = lat - (dist/111044.736);</span><br><span class=\"line\">   set lat2 = lat + (dist/111044.736);</span><br><span class=\"line\"></span><br><span class=\"line\">   -- run the query</span><br><span class=\"line\">     select user_id, round((</span><br><span class=\"line\">        6371392.89 * acos (</span><br><span class=\"line\">         cos ( radians(lat) )</span><br><span class=\"line\">         * cos( radians( latitude ) )</span><br><span class=\"line\">         * cos( radians( longitude ) - radians(lng) )</span><br><span class=\"line\">         + sin ( radians(lat) )</span><br><span class=\"line\">         * sin( radians( latitude ) )</span><br><span class=\"line\">       )</span><br><span class=\"line\">     ), 0) AS distance</span><br><span class=\"line\">     from user_position</span><br><span class=\"line\">     where lng between lng1 and lng2</span><br><span class=\"line\">     and lat between lat1 and lat2</span><br><span class=\"line\">     having distance &lt; dist</span><br><span class=\"line\">     ORDER BY distance</span><br><span class=\"line\">     LIMIT 0 , 20;</span><br><span class=\"line\">END$$</span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n<p>运行存储过程, 取出该经纬度下附近 5km 的用户和距离(m):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; call geo_dist(116.4174800000000, 40.0030330000000, 5000);</span><br><span class=\"line\">+---------+----------+</span><br><span class=\"line\">| user_id | distance |</span><br><span class=\"line\">+---------+----------+</span><br><span class=\"line\">|   10000 |        0 |</span><br><span class=\"line\">|   10001 |     1707 |</span><br><span class=\"line\">|   10002 |     3414 |</span><br><span class=\"line\">+---------+----------+</span><br><span class=\"line\">3 rows in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>\n<p>10001 用户和指定的经纬度距离为1707米, 我们在 redis 3.2 版本中进行简单测试, 可以看到结果都很相近:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6380&gt; geoadd tttt 116.417480 40.003033 t1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6380&gt; geoadd tttt 116.437481 40.004034 t2</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6380&gt; GEODIST tttt t1 t2</span><br><span class=\"line\">&quot;1707.5093&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"mongodb\"><a href=\"#mongodb\" class=\"headerlink\" title=\"mongodb\"></a>mongodb</h1><p>创建位置索引</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://arstercz.com/%E4%BD%BF%E7%94%A8-mysql-%E5%AE%9E%E7%8E%B0%E6%90%9C%E7%B4%A2%E9%99%84%E8%BF%91%E7%9A%84%E4%BA%BA/\" target=\"_blank\" rel=\"noopener\">使用 MySQL 实现搜索附近的人</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/35940647\" target=\"_blank\" rel=\"noopener\">GeoHash算法学习讲解、解析及原理分析</a></p>\n</blockquote>\n"},{"layout":"springboot+quartz","title":"框架的实现","date":"2020-08-14T10:39:21.000Z","_content":"","source":"_posts/框架的实现.md","raw":"---\nlayout: springboot+quartz\ntitle: 框架的实现\ndate: 2020-08-14 18:39:21\ntags:\n---\n","slug":"框架的实现","published":1,"updated":"2020-08-27T15:25:48.715Z","comments":1,"photos":[],"link":"","_id":"ckgepblkb001c4tjeazeezidu","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"清除inline-block之间的间隙","date":"2018-12-03T11:54:08.000Z","_content":"\n# 原因\n\n两个`inline-block`之间存在间隙，这是因为`html`元素换行导致的（换行和元素之间的空格、tabs、多个空格，结果一样，最后都是一个空格）\n\n# 移除空格\n\n如果我们使用html minimize工具，会清除html之间的空格。如果没有使用就需要我们手动去除。该方法简单但是不推荐使用，阅读不方便。\n\n```html\n<!-- 方法一 -->\n<div>\none</div><div>\ntwo</div><div>\nthree</div>\n\n<!-- 方法二 -->\n<div>one</div\n><div>two</div\n><div>three</div>\n\n<!-- 方法三 -->\n<div>one</div><!--\n--><div>two</div><!--\n--><div>three</div>\n```\n\n# 负值margin\n\n不推荐使用，每个浏览器之间的间隙不同。\n\n```css\nnav a {\n  display: inline-block;\n  margin-right: -4px;\n}\n```\n\n# 父元素font-size设置为0\n\n```css\n.space {\n    font-size: 0;\n}\n.space a {\n    font-size: 12px;\n}\n```\n\n这种方法是推荐使用的，但是在ie和Chrome浏览器(新的浏览器没有问题)上可能出现问题，因为在chrome上有最小字体限制。改进方法如下。\n\n```css\n.space {\n    font-size: 0;\n    -webkit-text-size-adjust:none;\n}\n```\n\n# 使用letter-spacing\n\n`letter-spacing`用于修改字符间的间隙。\n\n```css\n.space {\n    letter-spacing: -3px;\n}\n.space a {\n    letter-spacing: 0;\n}\n```\n\n# 使用word-spacing\n\n`word-spacing`修改单词之间的间隙\n\n```css\n.space {\n    word-spacing: -6px;\n}\n.space a {\n    word-spacing: 0;\n}\n```\n\n# 使用浮动\n\n```css\na{\n    float:left;\n}\n```\n\n# 参考\n\n> https://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/\n\n# 代码\n\n>  https://codepen.io/wumuwumu/pen/WYmKYX","source":"_posts/清除inline-block之间的间隙.md","raw":"---\ntitle: 清除inline-block之间的间隙\ndate: 2018-12-03 19:54:08\ntags:\n- js\n---\n\n# 原因\n\n两个`inline-block`之间存在间隙，这是因为`html`元素换行导致的（换行和元素之间的空格、tabs、多个空格，结果一样，最后都是一个空格）\n\n# 移除空格\n\n如果我们使用html minimize工具，会清除html之间的空格。如果没有使用就需要我们手动去除。该方法简单但是不推荐使用，阅读不方便。\n\n```html\n<!-- 方法一 -->\n<div>\none</div><div>\ntwo</div><div>\nthree</div>\n\n<!-- 方法二 -->\n<div>one</div\n><div>two</div\n><div>three</div>\n\n<!-- 方法三 -->\n<div>one</div><!--\n--><div>two</div><!--\n--><div>three</div>\n```\n\n# 负值margin\n\n不推荐使用，每个浏览器之间的间隙不同。\n\n```css\nnav a {\n  display: inline-block;\n  margin-right: -4px;\n}\n```\n\n# 父元素font-size设置为0\n\n```css\n.space {\n    font-size: 0;\n}\n.space a {\n    font-size: 12px;\n}\n```\n\n这种方法是推荐使用的，但是在ie和Chrome浏览器(新的浏览器没有问题)上可能出现问题，因为在chrome上有最小字体限制。改进方法如下。\n\n```css\n.space {\n    font-size: 0;\n    -webkit-text-size-adjust:none;\n}\n```\n\n# 使用letter-spacing\n\n`letter-spacing`用于修改字符间的间隙。\n\n```css\n.space {\n    letter-spacing: -3px;\n}\n.space a {\n    letter-spacing: 0;\n}\n```\n\n# 使用word-spacing\n\n`word-spacing`修改单词之间的间隙\n\n```css\n.space {\n    word-spacing: -6px;\n}\n.space a {\n    word-spacing: 0;\n}\n```\n\n# 使用浮动\n\n```css\na{\n    float:left;\n}\n```\n\n# 参考\n\n> https://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/\n\n# 代码\n\n>  https://codepen.io/wumuwumu/pen/WYmKYX","slug":"清除inline-block之间的间隙","published":1,"updated":"2019-07-22T08:16:15.332Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblkc001e4tjepktyvphc","content":"<h1 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h1><p>两个<code>inline-block</code>之间存在间隙，这是因为<code>html</code>元素换行导致的（换行和元素之间的空格、tabs、多个空格，结果一样，最后都是一个空格）</p>\n<h1 id=\"移除空格\"><a href=\"#移除空格\" class=\"headerlink\" title=\"移除空格\"></a>移除空格</h1><p>如果我们使用html minimize工具，会清除html之间的空格。如果没有使用就需要我们手动去除。该方法简单但是不推荐使用，阅读不方便。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 方法一 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">one<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">two<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">three<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 方法二 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>one<span class=\"tag\">&lt;/<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>two<span class=\"tag\">&lt;/<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>three<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 方法三 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>one<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>two<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>three<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"负值margin\"><a href=\"#负值margin\" class=\"headerlink\" title=\"负值margin\"></a>负值margin</h1><p>不推荐使用，每个浏览器之间的间隙不同。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: -<span class=\"number\">4px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"父元素font-size设置为0\"><a href=\"#父元素font-size设置为0\" class=\"headerlink\" title=\"父元素font-size设置为0\"></a>父元素font-size设置为0</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.space</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.space</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方法是推荐使用的，但是在ie和Chrome浏览器(新的浏览器没有问题)上可能出现问题，因为在chrome上有最小字体限制。改进方法如下。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.space</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-text-size-adjust</span>:none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用letter-spacing\"><a href=\"#使用letter-spacing\" class=\"headerlink\" title=\"使用letter-spacing\"></a>使用letter-spacing</h1><p><code>letter-spacing</code>用于修改字符间的间隙。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.space</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">letter-spacing</span>: -<span class=\"number\">3px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.space</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">letter-spacing</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用word-spacing\"><a href=\"#使用word-spacing\" class=\"headerlink\" title=\"使用word-spacing\"></a>使用word-spacing</h1><p><code>word-spacing</code>修改单词之间的间隙</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.space</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">word-spacing</span>: -<span class=\"number\">6px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.space</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">word-spacing</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用浮动\"><a href=\"#使用浮动\" class=\"headerlink\" title=\"使用浮动\"></a>使用浮动</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/\" target=\"_blank\" rel=\"noopener\">https://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/</a></p>\n</blockquote>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><blockquote>\n<p> <a href=\"https://codepen.io/wumuwumu/pen/WYmKYX\" target=\"_blank\" rel=\"noopener\">https://codepen.io/wumuwumu/pen/WYmKYX</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h1><p>两个<code>inline-block</code>之间存在间隙，这是因为<code>html</code>元素换行导致的（换行和元素之间的空格、tabs、多个空格，结果一样，最后都是一个空格）</p>\n<h1 id=\"移除空格\"><a href=\"#移除空格\" class=\"headerlink\" title=\"移除空格\"></a>移除空格</h1><p>如果我们使用html minimize工具，会清除html之间的空格。如果没有使用就需要我们手动去除。该方法简单但是不推荐使用，阅读不方便。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 方法一 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">one<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">two<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">three<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 方法二 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>one<span class=\"tag\">&lt;/<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>two<span class=\"tag\">&lt;/<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>three<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 方法三 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>one<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>two<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>three<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"负值margin\"><a href=\"#负值margin\" class=\"headerlink\" title=\"负值margin\"></a>负值margin</h1><p>不推荐使用，每个浏览器之间的间隙不同。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: -<span class=\"number\">4px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"父元素font-size设置为0\"><a href=\"#父元素font-size设置为0\" class=\"headerlink\" title=\"父元素font-size设置为0\"></a>父元素font-size设置为0</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.space</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.space</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方法是推荐使用的，但是在ie和Chrome浏览器(新的浏览器没有问题)上可能出现问题，因为在chrome上有最小字体限制。改进方法如下。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.space</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-text-size-adjust</span>:none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用letter-spacing\"><a href=\"#使用letter-spacing\" class=\"headerlink\" title=\"使用letter-spacing\"></a>使用letter-spacing</h1><p><code>letter-spacing</code>用于修改字符间的间隙。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.space</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">letter-spacing</span>: -<span class=\"number\">3px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.space</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">letter-spacing</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用word-spacing\"><a href=\"#使用word-spacing\" class=\"headerlink\" title=\"使用word-spacing\"></a>使用word-spacing</h1><p><code>word-spacing</code>修改单词之间的间隙</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.space</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">word-spacing</span>: -<span class=\"number\">6px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.space</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">word-spacing</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用浮动\"><a href=\"#使用浮动\" class=\"headerlink\" title=\"使用浮动\"></a>使用浮动</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>:left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/\" target=\"_blank\" rel=\"noopener\">https://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/</a></p>\n</blockquote>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><blockquote>\n<p> <a href=\"https://codepen.io/wumuwumu/pen/WYmKYX\" target=\"_blank\" rel=\"noopener\">https://codepen.io/wumuwumu/pen/WYmKYX</a></p>\n</blockquote>\n"},{"title":"Druid初始化","date":"2019-03-25T10:17:33.000Z","_content":"\n```java\npublic void init() throws SQLException {\n        if (inited) {\n            return;\n        }\n\n        // bug fixed for dead lock, for issue #2980\n        DruidDriver.getInstance();\n\n        final ReentrantLock lock = this.lock;\n        try {\n            lock.lockInterruptibly();\n        } catch (InterruptedException e) {\n            throw new SQLException(\"interrupt\", e);\n        }\n\n        boolean init = false;\n        try {\n            //双重检查\n            if (inited) {\n                return;\n            }\n\n            initStackTrace = Utils.toString(Thread.currentThread().getStackTrace());\n\n            this.id = DruidDriver.createDataSourceId();\n            if (this.id > 1) {\n                long delta = (this.id - 1) * 100000;\n                this.connectionIdSeedUpdater.addAndGet(this, delta);\n                this.statementIdSeedUpdater.addAndGet(this, delta);\n                this.resultSetIdSeedUpdater.addAndGet(this, delta);\n                this.transactionIdSeedUpdater.addAndGet(this, delta);\n            }\n\n            if (this.jdbcUrl != null) {\n                this.jdbcUrl = this.jdbcUrl.trim();\n                initFromWrapDriverUrl();\n            }\n\n            for (Filter filter : filters) {\n                filter.init(this);\n            }\n\n            if (this.dbType == null || this.dbType.length() == 0) {\n                this.dbType = JdbcUtils.getDbType(jdbcUrl, null);\n            }\n\n            if (JdbcConstants.MYSQL.equals(this.dbType)\n                    || JdbcConstants.MARIADB.equals(this.dbType)\n                    || JdbcConstants.ALIYUN_ADS.equals(this.dbType)) {\n                boolean cacheServerConfigurationSet = false;\n                if (this.connectProperties.containsKey(\"cacheServerConfiguration\")) {\n                    cacheServerConfigurationSet = true;\n                } else if (this.jdbcUrl.indexOf(\"cacheServerConfiguration\") != -1) {\n                    cacheServerConfigurationSet = true;\n                }\n                if (cacheServerConfigurationSet) {\n                    this.connectProperties.put(\"cacheServerConfiguration\", \"true\");\n                }\n            }\n\n            if (maxActive <= 0) {\n                throw new IllegalArgumentException(\"illegal maxActive \" + maxActive);\n            }\n\n            if (maxActive < minIdle) {\n                throw new IllegalArgumentException(\"illegal maxActive \" + maxActive);\n            }\n\n            if (getInitialSize() > maxActive) {\n                throw new IllegalArgumentException(\"illegal initialSize \" + this.initialSize + \", maxActive \" + maxActive);\n            }\n\n            if (timeBetweenLogStatsMillis > 0 && useGlobalDataSourceStat) {\n                throw new IllegalArgumentException(\"timeBetweenLogStatsMillis not support useGlobalDataSourceStat=true\");\n            }\n\n            if (maxEvictableIdleTimeMillis < minEvictableIdleTimeMillis) {\n                throw new SQLException(\"maxEvictableIdleTimeMillis must be grater than minEvictableIdleTimeMillis\");\n            }\n\n            if (this.driverClass != null) {\n                this.driverClass = driverClass.trim();\n            }\n\n            initFromSPIServiceLoader();\n\n            // 处理驱动\n            if (this.driver == null) {\n                if (this.driverClass == null || this.driverClass.isEmpty()) {\n                    this.driverClass = JdbcUtils.getDriverClassName(this.jdbcUrl);\n                }\n\n                if (MockDriver.class.getName().equals(driverClass)) {\n                    driver = MockDriver.instance;\n                } else {\n                    if (jdbcUrl == null && (driverClass == null || driverClass.length() == 0)) {\n                        throw new SQLException(\"url not set\");\n                    }\n                   \n                    driver = JdbcUtils.createDriver(driverClassLoader, driverClass);\n                }\n            } else {\n                if (this.driverClass == null) {\n                    this.driverClass = driver.getClass().getName();\n                }\n            }\n\t\t\t// 进行参数的核对，没有什么逻辑\n            initCheck();\n\n            // 为不同的数据库处理异常，这个可以借鉴\n            initExceptionSorter();\n            initValidConnectionChecker();\n            // 做了一些检查，不知道\n            validationQueryCheck();\n\n            // 创建数据统计对象\n            if (isUseGlobalDataSourceStat()) {\n                dataSourceStat = JdbcDataSourceStat.getGlobal();\n                if (dataSourceStat == null) {\n                    dataSourceStat = new JdbcDataSourceStat(\"Global\", \"Global\", this.dbType);\n                    JdbcDataSourceStat.setGlobal(dataSourceStat);\n                }\n                if (dataSourceStat.getDbType() == null) {\n                    dataSourceStat.setDbType(this.dbType);\n                }\n            } else {\n                dataSourceStat = new JdbcDataSourceStat(this.name, this.jdbcUrl, this.dbType, this.connectProperties);\n            }\n            dataSourceStat.setResetStatEnable(this.resetStatEnable);\n\n            // 创建连接池\n            connections = new DruidConnectionHolder[maxActive];\n            evictConnections = new DruidConnectionHolder[maxActive];\n            keepAliveConnections = new DruidConnectionHolder[maxActive];\n\n            SQLException connectError = null;\n\n            // 同步或者异步创建线程池\n            if (createScheduler != null && asyncInit) {\n                for (int i = 0; i < initialSize; ++i) {\n                    createTaskCount++;\n                    CreateConnectionTask task = new CreateConnectionTask(true);\n                    this.createSchedulerFuture = createScheduler.submit(task);\n                }\n            } else if (!asyncInit) {\n                // init connections\n                while (poolingCount < initialSize) {\n                    try {\n                        PhysicalConnectionInfo pyConnectInfo = createPhysicalConnection();\n                        DruidConnectionHolder holder = new DruidConnectionHolder(this, pyConnectInfo);\n                        connections[poolingCount++] = holder;\n                    } catch (SQLException ex) {\n                        LOG.error(\"init datasource error, url: \" + this.getUrl(), ex);\n                        if (initExceptionThrow) {\n                            connectError = ex;\n                            break;\n                        } else {\n                            Thread.sleep(3000);\n                        }\n                    }\n                }\n\n                if (poolingCount > 0) {\n                    poolingPeak = poolingCount;\n                    poolingPeakTime = System.currentTimeMillis();\n                }\n            }\n            \n\t\t\t// 用来打印线程池\n            createAndLogThread();\n            \n            \n            createAndStartCreatorThread();\n            \n            // 停止\n            createAndStartDestroyThread();\n\n            // 等待线程创建完成\n            initedLatch.await();\n            init = true;\n\n            initedTime = new Date();\n            \n            // 注册mbean\n            registerMbean();\n\n            if (connectError != null && poolingCount == 0) {\n                throw connectError;\n            }\n\n            // 检查连接池，防止连接池超出最大连接池\n            if (keepAlive) {\n                // async fill to minIdle\n                if (createScheduler != null) {\n                    for (int i = 0; i < minIdle; ++i) {\n                        createTaskCount++;\n                        CreateConnectionTask task = new CreateConnectionTask(true);\n                        this.createSchedulerFuture = createScheduler.submit(task);\n                    }\n                } else {\n                    this.emptySignal();\n                }\n            }\n\n        } catch (SQLException e) {\n            LOG.error(\"{dataSource-\" + this.getID() + \"} init error\", e);\n            throw e;\n        } catch (InterruptedException e) {\n            throw new SQLException(e.getMessage(), e);\n        } catch (RuntimeException e){\n            LOG.error(\"{dataSource-\" + this.getID() + \"} init error\", e);\n            throw e;\n        } catch (Error e){\n            LOG.error(\"{dataSource-\" + this.getID() + \"} init error\", e);\n            throw e;\n\n        } finally {\n            // 初始化成功\n            inited = true;\n            // 解锁\n            lock.unlock();\n\n            if (init && LOG.isInfoEnabled()) {\n                String msg = \"{dataSource-\" + this.getID();\n\n                if (this.name != null && !this.name.isEmpty()) {\n                    msg += \",\";\n                    msg += this.name;\n                }\n\n                msg += \"} inited\";\n\n                LOG.info(msg);\n            }\n        }\n    }\n```\n\n","source":"_posts/Druid初始化.md","raw":"---\ntitle: Druid初始化\ndate: 2019-03-25 18:17:33\ntags:\n- java\n---\n\n```java\npublic void init() throws SQLException {\n        if (inited) {\n            return;\n        }\n\n        // bug fixed for dead lock, for issue #2980\n        DruidDriver.getInstance();\n\n        final ReentrantLock lock = this.lock;\n        try {\n            lock.lockInterruptibly();\n        } catch (InterruptedException e) {\n            throw new SQLException(\"interrupt\", e);\n        }\n\n        boolean init = false;\n        try {\n            //双重检查\n            if (inited) {\n                return;\n            }\n\n            initStackTrace = Utils.toString(Thread.currentThread().getStackTrace());\n\n            this.id = DruidDriver.createDataSourceId();\n            if (this.id > 1) {\n                long delta = (this.id - 1) * 100000;\n                this.connectionIdSeedUpdater.addAndGet(this, delta);\n                this.statementIdSeedUpdater.addAndGet(this, delta);\n                this.resultSetIdSeedUpdater.addAndGet(this, delta);\n                this.transactionIdSeedUpdater.addAndGet(this, delta);\n            }\n\n            if (this.jdbcUrl != null) {\n                this.jdbcUrl = this.jdbcUrl.trim();\n                initFromWrapDriverUrl();\n            }\n\n            for (Filter filter : filters) {\n                filter.init(this);\n            }\n\n            if (this.dbType == null || this.dbType.length() == 0) {\n                this.dbType = JdbcUtils.getDbType(jdbcUrl, null);\n            }\n\n            if (JdbcConstants.MYSQL.equals(this.dbType)\n                    || JdbcConstants.MARIADB.equals(this.dbType)\n                    || JdbcConstants.ALIYUN_ADS.equals(this.dbType)) {\n                boolean cacheServerConfigurationSet = false;\n                if (this.connectProperties.containsKey(\"cacheServerConfiguration\")) {\n                    cacheServerConfigurationSet = true;\n                } else if (this.jdbcUrl.indexOf(\"cacheServerConfiguration\") != -1) {\n                    cacheServerConfigurationSet = true;\n                }\n                if (cacheServerConfigurationSet) {\n                    this.connectProperties.put(\"cacheServerConfiguration\", \"true\");\n                }\n            }\n\n            if (maxActive <= 0) {\n                throw new IllegalArgumentException(\"illegal maxActive \" + maxActive);\n            }\n\n            if (maxActive < minIdle) {\n                throw new IllegalArgumentException(\"illegal maxActive \" + maxActive);\n            }\n\n            if (getInitialSize() > maxActive) {\n                throw new IllegalArgumentException(\"illegal initialSize \" + this.initialSize + \", maxActive \" + maxActive);\n            }\n\n            if (timeBetweenLogStatsMillis > 0 && useGlobalDataSourceStat) {\n                throw new IllegalArgumentException(\"timeBetweenLogStatsMillis not support useGlobalDataSourceStat=true\");\n            }\n\n            if (maxEvictableIdleTimeMillis < minEvictableIdleTimeMillis) {\n                throw new SQLException(\"maxEvictableIdleTimeMillis must be grater than minEvictableIdleTimeMillis\");\n            }\n\n            if (this.driverClass != null) {\n                this.driverClass = driverClass.trim();\n            }\n\n            initFromSPIServiceLoader();\n\n            // 处理驱动\n            if (this.driver == null) {\n                if (this.driverClass == null || this.driverClass.isEmpty()) {\n                    this.driverClass = JdbcUtils.getDriverClassName(this.jdbcUrl);\n                }\n\n                if (MockDriver.class.getName().equals(driverClass)) {\n                    driver = MockDriver.instance;\n                } else {\n                    if (jdbcUrl == null && (driverClass == null || driverClass.length() == 0)) {\n                        throw new SQLException(\"url not set\");\n                    }\n                   \n                    driver = JdbcUtils.createDriver(driverClassLoader, driverClass);\n                }\n            } else {\n                if (this.driverClass == null) {\n                    this.driverClass = driver.getClass().getName();\n                }\n            }\n\t\t\t// 进行参数的核对，没有什么逻辑\n            initCheck();\n\n            // 为不同的数据库处理异常，这个可以借鉴\n            initExceptionSorter();\n            initValidConnectionChecker();\n            // 做了一些检查，不知道\n            validationQueryCheck();\n\n            // 创建数据统计对象\n            if (isUseGlobalDataSourceStat()) {\n                dataSourceStat = JdbcDataSourceStat.getGlobal();\n                if (dataSourceStat == null) {\n                    dataSourceStat = new JdbcDataSourceStat(\"Global\", \"Global\", this.dbType);\n                    JdbcDataSourceStat.setGlobal(dataSourceStat);\n                }\n                if (dataSourceStat.getDbType() == null) {\n                    dataSourceStat.setDbType(this.dbType);\n                }\n            } else {\n                dataSourceStat = new JdbcDataSourceStat(this.name, this.jdbcUrl, this.dbType, this.connectProperties);\n            }\n            dataSourceStat.setResetStatEnable(this.resetStatEnable);\n\n            // 创建连接池\n            connections = new DruidConnectionHolder[maxActive];\n            evictConnections = new DruidConnectionHolder[maxActive];\n            keepAliveConnections = new DruidConnectionHolder[maxActive];\n\n            SQLException connectError = null;\n\n            // 同步或者异步创建线程池\n            if (createScheduler != null && asyncInit) {\n                for (int i = 0; i < initialSize; ++i) {\n                    createTaskCount++;\n                    CreateConnectionTask task = new CreateConnectionTask(true);\n                    this.createSchedulerFuture = createScheduler.submit(task);\n                }\n            } else if (!asyncInit) {\n                // init connections\n                while (poolingCount < initialSize) {\n                    try {\n                        PhysicalConnectionInfo pyConnectInfo = createPhysicalConnection();\n                        DruidConnectionHolder holder = new DruidConnectionHolder(this, pyConnectInfo);\n                        connections[poolingCount++] = holder;\n                    } catch (SQLException ex) {\n                        LOG.error(\"init datasource error, url: \" + this.getUrl(), ex);\n                        if (initExceptionThrow) {\n                            connectError = ex;\n                            break;\n                        } else {\n                            Thread.sleep(3000);\n                        }\n                    }\n                }\n\n                if (poolingCount > 0) {\n                    poolingPeak = poolingCount;\n                    poolingPeakTime = System.currentTimeMillis();\n                }\n            }\n            \n\t\t\t// 用来打印线程池\n            createAndLogThread();\n            \n            \n            createAndStartCreatorThread();\n            \n            // 停止\n            createAndStartDestroyThread();\n\n            // 等待线程创建完成\n            initedLatch.await();\n            init = true;\n\n            initedTime = new Date();\n            \n            // 注册mbean\n            registerMbean();\n\n            if (connectError != null && poolingCount == 0) {\n                throw connectError;\n            }\n\n            // 检查连接池，防止连接池超出最大连接池\n            if (keepAlive) {\n                // async fill to minIdle\n                if (createScheduler != null) {\n                    for (int i = 0; i < minIdle; ++i) {\n                        createTaskCount++;\n                        CreateConnectionTask task = new CreateConnectionTask(true);\n                        this.createSchedulerFuture = createScheduler.submit(task);\n                    }\n                } else {\n                    this.emptySignal();\n                }\n            }\n\n        } catch (SQLException e) {\n            LOG.error(\"{dataSource-\" + this.getID() + \"} init error\", e);\n            throw e;\n        } catch (InterruptedException e) {\n            throw new SQLException(e.getMessage(), e);\n        } catch (RuntimeException e){\n            LOG.error(\"{dataSource-\" + this.getID() + \"} init error\", e);\n            throw e;\n        } catch (Error e){\n            LOG.error(\"{dataSource-\" + this.getID() + \"} init error\", e);\n            throw e;\n\n        } finally {\n            // 初始化成功\n            inited = true;\n            // 解锁\n            lock.unlock();\n\n            if (init && LOG.isInfoEnabled()) {\n                String msg = \"{dataSource-\" + this.getID();\n\n                if (this.name != null && !this.name.isEmpty()) {\n                    msg += \",\";\n                    msg += this.name;\n                }\n\n                msg += \"} inited\";\n\n                LOG.info(msg);\n            }\n        }\n    }\n```\n\n","slug":"Druid初始化","published":1,"updated":"2019-07-22T08:16:14.580Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbll2002d4tje53ugm9gj","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inited) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// bug fixed for dead lock, for issue #2980</span></span><br><span class=\"line\">        DruidDriver.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> ReentrantLock lock = <span class=\"keyword\">this</span>.lock;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            lock.lockInterruptibly();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SQLException(<span class=\"string\">\"interrupt\"</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> init = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//双重检查</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (inited) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            initStackTrace = Utils.toString(Thread.currentThread().getStackTrace());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.id = DruidDriver.createDataSourceId();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.id &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> delta = (<span class=\"keyword\">this</span>.id - <span class=\"number\">1</span>) * <span class=\"number\">100000</span>;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.connectionIdSeedUpdater.addAndGet(<span class=\"keyword\">this</span>, delta);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.statementIdSeedUpdater.addAndGet(<span class=\"keyword\">this</span>, delta);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.resultSetIdSeedUpdater.addAndGet(<span class=\"keyword\">this</span>, delta);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.transactionIdSeedUpdater.addAndGet(<span class=\"keyword\">this</span>, delta);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.jdbcUrl != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.jdbcUrl = <span class=\"keyword\">this</span>.jdbcUrl.trim();</span><br><span class=\"line\">                initFromWrapDriverUrl();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Filter filter : filters) &#123;</span><br><span class=\"line\">                filter.init(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dbType == <span class=\"keyword\">null</span> || <span class=\"keyword\">this</span>.dbType.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.dbType = JdbcUtils.getDbType(jdbcUrl, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (JdbcConstants.MYSQL.equals(<span class=\"keyword\">this</span>.dbType)</span><br><span class=\"line\">                    || JdbcConstants.MARIADB.equals(<span class=\"keyword\">this</span>.dbType)</span><br><span class=\"line\">                    || JdbcConstants.ALIYUN_ADS.equals(<span class=\"keyword\">this</span>.dbType)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> cacheServerConfigurationSet = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.connectProperties.containsKey(<span class=\"string\">\"cacheServerConfiguration\"</span>)) &#123;</span><br><span class=\"line\">                    cacheServerConfigurationSet = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.jdbcUrl.indexOf(<span class=\"string\">\"cacheServerConfiguration\"</span>) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    cacheServerConfigurationSet = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (cacheServerConfigurationSet) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.connectProperties.put(<span class=\"string\">\"cacheServerConfiguration\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxActive &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"illegal maxActive \"</span> + maxActive);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxActive &lt; minIdle) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"illegal maxActive \"</span> + maxActive);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (getInitialSize() &gt; maxActive) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"illegal initialSize \"</span> + <span class=\"keyword\">this</span>.initialSize + <span class=\"string\">\", maxActive \"</span> + maxActive);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (timeBetweenLogStatsMillis &gt; <span class=\"number\">0</span> &amp;&amp; useGlobalDataSourceStat) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"timeBetweenLogStatsMillis not support useGlobalDataSourceStat=true\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxEvictableIdleTimeMillis &lt; minEvictableIdleTimeMillis) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SQLException(<span class=\"string\">\"maxEvictableIdleTimeMillis must be grater than minEvictableIdleTimeMillis\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.driverClass != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.driverClass = driverClass.trim();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            initFromSPIServiceLoader();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 处理驱动</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.driver == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.driverClass == <span class=\"keyword\">null</span> || <span class=\"keyword\">this</span>.driverClass.isEmpty()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.driverClass = JdbcUtils.getDriverClassName(<span class=\"keyword\">this</span>.jdbcUrl);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (MockDriver.class.getName().equals(driverClass)) &#123;</span><br><span class=\"line\">                    driver = MockDriver.instance;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (jdbcUrl == <span class=\"keyword\">null</span> &amp;&amp; (driverClass == <span class=\"keyword\">null</span> || driverClass.length() == <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SQLException(<span class=\"string\">\"url not set\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                   </span><br><span class=\"line\">                    driver = JdbcUtils.createDriver(driverClassLoader, driverClass);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.driverClass == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.driverClass = driver.getClass().getName();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 进行参数的核对，没有什么逻辑</span></span><br><span class=\"line\">            initCheck();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 为不同的数据库处理异常，这个可以借鉴</span></span><br><span class=\"line\">            initExceptionSorter();</span><br><span class=\"line\">            initValidConnectionChecker();</span><br><span class=\"line\">            <span class=\"comment\">// 做了一些检查，不知道</span></span><br><span class=\"line\">            validationQueryCheck();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 创建数据统计对象</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isUseGlobalDataSourceStat()) &#123;</span><br><span class=\"line\">                dataSourceStat = JdbcDataSourceStat.getGlobal();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dataSourceStat == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    dataSourceStat = <span class=\"keyword\">new</span> JdbcDataSourceStat(<span class=\"string\">\"Global\"</span>, <span class=\"string\">\"Global\"</span>, <span class=\"keyword\">this</span>.dbType);</span><br><span class=\"line\">                    JdbcDataSourceStat.setGlobal(dataSourceStat);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dataSourceStat.getDbType() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    dataSourceStat.setDbType(<span class=\"keyword\">this</span>.dbType);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                dataSourceStat = <span class=\"keyword\">new</span> JdbcDataSourceStat(<span class=\"keyword\">this</span>.name, <span class=\"keyword\">this</span>.jdbcUrl, <span class=\"keyword\">this</span>.dbType, <span class=\"keyword\">this</span>.connectProperties);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dataSourceStat.setResetStatEnable(<span class=\"keyword\">this</span>.resetStatEnable);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 创建连接池</span></span><br><span class=\"line\">            connections = <span class=\"keyword\">new</span> DruidConnectionHolder[maxActive];</span><br><span class=\"line\">            evictConnections = <span class=\"keyword\">new</span> DruidConnectionHolder[maxActive];</span><br><span class=\"line\">            keepAliveConnections = <span class=\"keyword\">new</span> DruidConnectionHolder[maxActive];</span><br><span class=\"line\"></span><br><span class=\"line\">            SQLException connectError = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 同步或者异步创建线程池</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (createScheduler != <span class=\"keyword\">null</span> &amp;&amp; asyncInit) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; initialSize; ++i) &#123;</span><br><span class=\"line\">                    createTaskCount++;</span><br><span class=\"line\">                    CreateConnectionTask task = <span class=\"keyword\">new</span> CreateConnectionTask(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.createSchedulerFuture = createScheduler.submit(task);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!asyncInit) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// init connections</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (poolingCount &lt; initialSize) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        PhysicalConnectionInfo pyConnectInfo = createPhysicalConnection();</span><br><span class=\"line\">                        DruidConnectionHolder holder = <span class=\"keyword\">new</span> DruidConnectionHolder(<span class=\"keyword\">this</span>, pyConnectInfo);</span><br><span class=\"line\">                        connections[poolingCount++] = holder;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (SQLException ex) &#123;</span><br><span class=\"line\">                        LOG.error(<span class=\"string\">\"init datasource error, url: \"</span> + <span class=\"keyword\">this</span>.getUrl(), ex);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (initExceptionThrow) &#123;</span><br><span class=\"line\">                            connectError = ex;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            Thread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (poolingCount &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    poolingPeak = poolingCount;</span><br><span class=\"line\">                    poolingPeakTime = System.currentTimeMillis();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 用来打印线程池</span></span><br><span class=\"line\">            createAndLogThread();</span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\">            createAndStartCreatorThread();</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 停止</span></span><br><span class=\"line\">            createAndStartDestroyThread();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 等待线程创建完成</span></span><br><span class=\"line\">            initedLatch.await();</span><br><span class=\"line\">            init = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            initedTime = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 注册mbean</span></span><br><span class=\"line\">            registerMbean();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (connectError != <span class=\"keyword\">null</span> &amp;&amp; poolingCount == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> connectError;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 检查连接池，防止连接池超出最大连接池</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (keepAlive) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// async fill to minIdle</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (createScheduler != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; minIdle; ++i) &#123;</span><br><span class=\"line\">                        createTaskCount++;</span><br><span class=\"line\">                        CreateConnectionTask task = <span class=\"keyword\">new</span> CreateConnectionTask(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.createSchedulerFuture = createScheduler.submit(task);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.emptySignal();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            LOG.error(<span class=\"string\">\"&#123;dataSource-\"</span> + <span class=\"keyword\">this</span>.getID() + <span class=\"string\">\"&#125; init error\"</span>, e);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SQLException(e.getMessage(), e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException e)&#123;</span><br><span class=\"line\">            LOG.error(<span class=\"string\">\"&#123;dataSource-\"</span> + <span class=\"keyword\">this</span>.getID() + <span class=\"string\">\"&#125; init error\"</span>, e);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Error e)&#123;</span><br><span class=\"line\">            LOG.error(<span class=\"string\">\"&#123;dataSource-\"</span> + <span class=\"keyword\">this</span>.getID() + <span class=\"string\">\"&#125; init error\"</span>, e);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 初始化成功</span></span><br><span class=\"line\">            inited = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 解锁</span></span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (init &amp;&amp; LOG.isInfoEnabled()) &#123;</span><br><span class=\"line\">                String msg = <span class=\"string\">\"&#123;dataSource-\"</span> + <span class=\"keyword\">this</span>.getID();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.name != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"keyword\">this</span>.name.isEmpty()) &#123;</span><br><span class=\"line\">                    msg += <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">                    msg += <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                msg += <span class=\"string\">\"&#125; inited\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                LOG.info(msg);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inited) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// bug fixed for dead lock, for issue #2980</span></span><br><span class=\"line\">        DruidDriver.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> ReentrantLock lock = <span class=\"keyword\">this</span>.lock;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            lock.lockInterruptibly();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SQLException(<span class=\"string\">\"interrupt\"</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> init = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//双重检查</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (inited) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            initStackTrace = Utils.toString(Thread.currentThread().getStackTrace());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.id = DruidDriver.createDataSourceId();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.id &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> delta = (<span class=\"keyword\">this</span>.id - <span class=\"number\">1</span>) * <span class=\"number\">100000</span>;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.connectionIdSeedUpdater.addAndGet(<span class=\"keyword\">this</span>, delta);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.statementIdSeedUpdater.addAndGet(<span class=\"keyword\">this</span>, delta);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.resultSetIdSeedUpdater.addAndGet(<span class=\"keyword\">this</span>, delta);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.transactionIdSeedUpdater.addAndGet(<span class=\"keyword\">this</span>, delta);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.jdbcUrl != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.jdbcUrl = <span class=\"keyword\">this</span>.jdbcUrl.trim();</span><br><span class=\"line\">                initFromWrapDriverUrl();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Filter filter : filters) &#123;</span><br><span class=\"line\">                filter.init(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dbType == <span class=\"keyword\">null</span> || <span class=\"keyword\">this</span>.dbType.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.dbType = JdbcUtils.getDbType(jdbcUrl, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (JdbcConstants.MYSQL.equals(<span class=\"keyword\">this</span>.dbType)</span><br><span class=\"line\">                    || JdbcConstants.MARIADB.equals(<span class=\"keyword\">this</span>.dbType)</span><br><span class=\"line\">                    || JdbcConstants.ALIYUN_ADS.equals(<span class=\"keyword\">this</span>.dbType)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> cacheServerConfigurationSet = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.connectProperties.containsKey(<span class=\"string\">\"cacheServerConfiguration\"</span>)) &#123;</span><br><span class=\"line\">                    cacheServerConfigurationSet = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.jdbcUrl.indexOf(<span class=\"string\">\"cacheServerConfiguration\"</span>) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    cacheServerConfigurationSet = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (cacheServerConfigurationSet) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.connectProperties.put(<span class=\"string\">\"cacheServerConfiguration\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxActive &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"illegal maxActive \"</span> + maxActive);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxActive &lt; minIdle) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"illegal maxActive \"</span> + maxActive);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (getInitialSize() &gt; maxActive) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"illegal initialSize \"</span> + <span class=\"keyword\">this</span>.initialSize + <span class=\"string\">\", maxActive \"</span> + maxActive);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (timeBetweenLogStatsMillis &gt; <span class=\"number\">0</span> &amp;&amp; useGlobalDataSourceStat) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"timeBetweenLogStatsMillis not support useGlobalDataSourceStat=true\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxEvictableIdleTimeMillis &lt; minEvictableIdleTimeMillis) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SQLException(<span class=\"string\">\"maxEvictableIdleTimeMillis must be grater than minEvictableIdleTimeMillis\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.driverClass != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.driverClass = driverClass.trim();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            initFromSPIServiceLoader();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 处理驱动</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.driver == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.driverClass == <span class=\"keyword\">null</span> || <span class=\"keyword\">this</span>.driverClass.isEmpty()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.driverClass = JdbcUtils.getDriverClassName(<span class=\"keyword\">this</span>.jdbcUrl);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (MockDriver.class.getName().equals(driverClass)) &#123;</span><br><span class=\"line\">                    driver = MockDriver.instance;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (jdbcUrl == <span class=\"keyword\">null</span> &amp;&amp; (driverClass == <span class=\"keyword\">null</span> || driverClass.length() == <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SQLException(<span class=\"string\">\"url not set\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                   </span><br><span class=\"line\">                    driver = JdbcUtils.createDriver(driverClassLoader, driverClass);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.driverClass == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.driverClass = driver.getClass().getName();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 进行参数的核对，没有什么逻辑</span></span><br><span class=\"line\">            initCheck();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 为不同的数据库处理异常，这个可以借鉴</span></span><br><span class=\"line\">            initExceptionSorter();</span><br><span class=\"line\">            initValidConnectionChecker();</span><br><span class=\"line\">            <span class=\"comment\">// 做了一些检查，不知道</span></span><br><span class=\"line\">            validationQueryCheck();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 创建数据统计对象</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isUseGlobalDataSourceStat()) &#123;</span><br><span class=\"line\">                dataSourceStat = JdbcDataSourceStat.getGlobal();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dataSourceStat == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    dataSourceStat = <span class=\"keyword\">new</span> JdbcDataSourceStat(<span class=\"string\">\"Global\"</span>, <span class=\"string\">\"Global\"</span>, <span class=\"keyword\">this</span>.dbType);</span><br><span class=\"line\">                    JdbcDataSourceStat.setGlobal(dataSourceStat);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dataSourceStat.getDbType() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    dataSourceStat.setDbType(<span class=\"keyword\">this</span>.dbType);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                dataSourceStat = <span class=\"keyword\">new</span> JdbcDataSourceStat(<span class=\"keyword\">this</span>.name, <span class=\"keyword\">this</span>.jdbcUrl, <span class=\"keyword\">this</span>.dbType, <span class=\"keyword\">this</span>.connectProperties);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dataSourceStat.setResetStatEnable(<span class=\"keyword\">this</span>.resetStatEnable);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 创建连接池</span></span><br><span class=\"line\">            connections = <span class=\"keyword\">new</span> DruidConnectionHolder[maxActive];</span><br><span class=\"line\">            evictConnections = <span class=\"keyword\">new</span> DruidConnectionHolder[maxActive];</span><br><span class=\"line\">            keepAliveConnections = <span class=\"keyword\">new</span> DruidConnectionHolder[maxActive];</span><br><span class=\"line\"></span><br><span class=\"line\">            SQLException connectError = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 同步或者异步创建线程池</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (createScheduler != <span class=\"keyword\">null</span> &amp;&amp; asyncInit) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; initialSize; ++i) &#123;</span><br><span class=\"line\">                    createTaskCount++;</span><br><span class=\"line\">                    CreateConnectionTask task = <span class=\"keyword\">new</span> CreateConnectionTask(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.createSchedulerFuture = createScheduler.submit(task);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!asyncInit) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// init connections</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (poolingCount &lt; initialSize) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        PhysicalConnectionInfo pyConnectInfo = createPhysicalConnection();</span><br><span class=\"line\">                        DruidConnectionHolder holder = <span class=\"keyword\">new</span> DruidConnectionHolder(<span class=\"keyword\">this</span>, pyConnectInfo);</span><br><span class=\"line\">                        connections[poolingCount++] = holder;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (SQLException ex) &#123;</span><br><span class=\"line\">                        LOG.error(<span class=\"string\">\"init datasource error, url: \"</span> + <span class=\"keyword\">this</span>.getUrl(), ex);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (initExceptionThrow) &#123;</span><br><span class=\"line\">                            connectError = ex;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            Thread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (poolingCount &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    poolingPeak = poolingCount;</span><br><span class=\"line\">                    poolingPeakTime = System.currentTimeMillis();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 用来打印线程池</span></span><br><span class=\"line\">            createAndLogThread();</span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\">            createAndStartCreatorThread();</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 停止</span></span><br><span class=\"line\">            createAndStartDestroyThread();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 等待线程创建完成</span></span><br><span class=\"line\">            initedLatch.await();</span><br><span class=\"line\">            init = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            initedTime = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 注册mbean</span></span><br><span class=\"line\">            registerMbean();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (connectError != <span class=\"keyword\">null</span> &amp;&amp; poolingCount == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> connectError;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 检查连接池，防止连接池超出最大连接池</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (keepAlive) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// async fill to minIdle</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (createScheduler != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; minIdle; ++i) &#123;</span><br><span class=\"line\">                        createTaskCount++;</span><br><span class=\"line\">                        CreateConnectionTask task = <span class=\"keyword\">new</span> CreateConnectionTask(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.createSchedulerFuture = createScheduler.submit(task);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.emptySignal();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">            LOG.error(<span class=\"string\">\"&#123;dataSource-\"</span> + <span class=\"keyword\">this</span>.getID() + <span class=\"string\">\"&#125; init error\"</span>, e);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SQLException(e.getMessage(), e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException e)&#123;</span><br><span class=\"line\">            LOG.error(<span class=\"string\">\"&#123;dataSource-\"</span> + <span class=\"keyword\">this</span>.getID() + <span class=\"string\">\"&#125; init error\"</span>, e);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Error e)&#123;</span><br><span class=\"line\">            LOG.error(<span class=\"string\">\"&#123;dataSource-\"</span> + <span class=\"keyword\">this</span>.getID() + <span class=\"string\">\"&#125; init error\"</span>, e);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 初始化成功</span></span><br><span class=\"line\">            inited = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 解锁</span></span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (init &amp;&amp; LOG.isInfoEnabled()) &#123;</span><br><span class=\"line\">                String msg = <span class=\"string\">\"&#123;dataSource-\"</span> + <span class=\"keyword\">this</span>.getID();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.name != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"keyword\">this</span>.name.isEmpty()) &#123;</span><br><span class=\"line\">                    msg += <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">                    msg += <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                msg += <span class=\"string\">\"&#125; inited\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                LOG.info(msg);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"SpringBoot+Quartz框架的实现","date":"2020-08-14T10:39:29.000Z","_content":"\n定时任务 想必做程序的都或多或少的接触过,以便于我们以某个特定的 时间/频率 去执行所需要的程序,Quartz 是一个优秀的框架,可以根据我们的配置将 定时任务的执行 时间/频率 持久化至数据库, 我们通过修改数据库中的任务下次执行时间,达到不需要等到任务配置执行的原始 时间/频率,随时地运行定时任务; 并且可以看到任务的运行状态 WATING BLOCKING等\n\n   1.导入依赖\n\n   quartz自定义配置的数据源会使用C3P0创建连接,所以要引入C3P0依赖\n\n```java\n <!-- Quartz定时任务 -->\n   <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-quartz</artifactId>\n   </dependency>\n<!--C3P0 -->\n   <dependency>\n       <groupId>com.mchange</groupId>\n       <artifactId>c3p0</artifactId>\n       <version>0.9.5.5</version>\n   </dependency>\n```\n\n2.quartz 配置文件,yml方式\n\n创建定时任务表的sql太长,这里就不贴了,我会将sql上传至GitHub,文末我会贴地址\n\n```java\n## quartz定时任务\nspring:\n  quartz:\n    #jdbc 采用数据库方式  memory 采用内存方式\n    job-store-type: jdbc  \n    initialize-schema: embedded\n    #设置自动启动，默认为 true\n    auto-startup: true\n    #启动时更新己存在的Job\n    overwrite-existing-jobs: true\n    properties:\n      org:\n        quartz:\n          scheduler:\n            instanceName: MyScheduler\n            instanceId: AUTO\n          jobStore:\n            #指定使用的JobStore\n            class: org.quartz.impl.jdbcjobstore.JobStoreTX\n            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate\n            #数据库前缀\n            tablePrefix: QRTZ_\n            #是否为集群\n            isClustered: false\n            #检测任务执行时间的间隔  毫秒\n            misfireThreshold: 5000\n            clusterCheckinInterval: 10000\n            #数据源名称\n            dataSource: myDS\n          #线程池配置\n          threadPool:\n            class: org.quartz.simpl.SimpleThreadPool\n            threadCount: 20\n            threadPriority: 5\n            threadsInheritContextClassLoaderOfInitializingThread: true\n          #数据源\n          dataSource:\n            myDS:\n              driver: com.mysql.cj.jdbc.Driver\n              URL: jdbc:mysql://localhost:3306/test?characterEncoding=UTF-8&useUnicode=true&useSSL=false&tinyInt1isBit=false&serverTimezone=Asia/Shanghai\n              user: root\n              password: root\n              maxConnections: 5\n```\n\n有同学可能会问了,配置文件是配置好了,是在哪引用的呢? 别急, 且听我娓娓道来\n\nspring-boot-starter-quartz (为方便诉说,下文中使用 bootquartz代替) 这个包下的QuartzProperties会帮我们自动加载配置文件,且看以下部分截图\n\n![img](https://img-blog.csdnimg.cn/20200617111853517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RlbW9fTGl1,size_16,color_FFFFFF,t_70)\n\n可以看到, QuartzProperties 使用了 @ConfigurationProperties 加载了 spring.quartz 前缀的配置,也就是上面我们的配置文件中的配置;加载之后呢, bootquartz包下有 类 QuartzAutoConfiguration, 看名字就可以知道,这个就是自动配置 quartz的类了.\n\n所以我们不需要再去通过代码去配置 SchedulerFactoryBean 了,这是后话\n\nQuartzAutoConfiguration 类注释\n\n![img](https://img-blog.csdnimg.cn/20200617113632769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RlbW9fTGl1,size_16,color_FFFFFF,t_70)\n\n通过上面的截图我们发现,这里引用了 QuartzProperties\n\n其中的 quartzScheduler()方法帮助我们创建了 SchedulerFactoryBean 并使用了** **QuartzProperties 中的自定义配置,以下是quartzScheduler()部分代码\n\n```java\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic SchedulerFactoryBean quartzScheduler() {\n\t\tSchedulerFactoryBean schedulerFactoryBean = new SchedulerFactoryBean();\n\t\tif (!this.properties.getProperties().isEmpty()) {\n\t\t\tschedulerFactoryBean\n\t.setQuartzProperties(asProperties(this.properties.getProperties()));\n\t\t}\n\t\tcustomize(schedulerFactoryBean);\n\t\treturn schedulerFactoryBean;\n\t}\n```\n\n姑且一提,方法中调用了 customize(SchedulerFactoryBean  schedulerFactoryBean) 方法,这个方法会寻找实现了 SchedulerFactoryBeanCustomizer 接口的配置类,在其实现方法 customize(SchedulerFactoryBean  schedulerFactoryBean)中 可对 SchedulerFactoryBean  使用代码自定义配置\n\n# 坑\n\n那么到这里结束了吗?不! 这里还有本文中最大的一个坑,作者深受其扰,扒了两天的源码才找到这个问题!!!\n\n如果我们的项目中有其它的默认数据源,那么quartz会忽略配置文件中自定义数据源,使用默认数据源,原因看以下源码\n\n首先是 QuartzAutoConfiguration 中的 静态内部类 JdbcStoreTypeConfiguration\n\n```java\n\t@Configuration\n\t@ConditionalOnSingleCandidate(DataSource.class)\n\tprotected static class JdbcStoreTypeConfiguration {\n\t\t@Bean\n\t\t@Order(0)\n\t\tpublic SchedulerFactoryBeanCustomizer dataSourceCustomizer(\n\t\t\t\tQuartzProperties properties, DataSource dataSource,\n\t\t\t\t@QuartzDataSource ObjectProvider<DataSource> quartzDataSource,\n\t\t\t\tObjectProvider<PlatformTransactionManager> transactionManager) {\n\t\t\treturn (schedulerFactoryBean) -> {\n\t\t\t\tif (properties.getJobStoreType() == JobStoreType.JDBC) {\n                              //重点在这里 begin\n\t\t\t\t\tDataSource dataSourceToUse = getDataSource(dataSource,\tquartzDataSource);\n\t\t\t\t\tschedulerFactoryBean.setDataSource(dataSourceToUse);\n                              //重点在这里 end\n\t\t\t\t\tPlatformTransactionManager txManager = transactionManager.getIfUnique();\n\t\t\t\t\tif (txManager != null) {\nschedulerFactoryBean.setTransactionManager(txManager);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n       private DataSource getDataSource(DataSource dataSource,\n\t\t\t\tObjectProvider<DataSource> quartzDataSource) {\n\t\t\tDataSource dataSourceIfAvailable = quartzDataSource.getIfAvailable();\n\t\t\treturn (dataSourceIfAvailable != null) ? dataSourceIfAvailable : dataSource;\n\t\t}\n```\n\n其中的getDataSource 方法判断了我们项目中的 quartzDataSource是否为空,如果为空,那么就使用默认的数据源;quartzDataSource怎么才能不为空呢? 可以看到dataSourceCustomizer 方法参数中有 @QuartzDataSource 注解, 这个注解会去寻找我们项目中使用@QuartzDataSource配置的数据源,但是 我都已经在配置文件中自定义了数据源,再去手动配置一遍不是多此一举吗? 接着往下看\n\n**SchedulerFactoryBean 的初始化方法部分源码▼**\n\n```java\nprivate void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException {\n\t\tProperties mergedProps = new Properties();\n\n\t\tif (this.dataSource != null) {\nmergedProps.setProperty(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName());\n\t\t}\n}\n```\n\n我们在静态内部类设置过了数据源,初始化方法只要发现数据源不为空,那么就使用会使用 LocalDataSourceJobStore 覆盖我们quartz配置文件中设置的  org.quartz.jobStore.class: org.quartz.impl.jdbcjobstore.JobStoreTX\n\n而LocalDataSourceJobStore 中的初始化方法使用的是 SchedulerFactoryBean 中设置的数据源,所以我们quartz配置文件中的数据源才不会生效!!!\n\n怎么解决呢?   我们上面提到了customize(SchedulerFactoryBean  schedulerFactoryBean) 方法,这个方法会寻找实现了 SchedulerFactoryBeanCustomizer 接口的配置类,在其实现方法 customize(SchedulerFactoryBean  schedulerFactoryBean)中 可对 SchedulerFactoryBean  使用代码自定义配置\n\n所以 我们只要在SchedulerFactoryBean 创建后调用初始化方法之前,再将DataSource设置为null,那么SchedulerFactoryBean 初始化时,将会使用我们配置文件中的JobStoreTX去寻找我们配置的数据源了,至此,填坑完毕▼\n\n```java\nimport org.springframework.boot.autoconfigure.quartz.SchedulerFactoryBeanCustomizer;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.scheduling.quartz.SchedulerFactoryBean;\n\n/**\n\n * @author Demo-Liu\n * @create 2020-06-12 11:20\n * @description 配置定时任务\n */\n\n@Configuration\npublic class SchedulerConfig implements SchedulerFactoryBeanCustomizer {\n    /**\n     * @Author Demo-Liu\n     * @Date 20200614 12:44\n     * 自定义 quartz配置\n     * @param schedulerFactoryBean\n     */\n\n\n    @Override\n    public void customize(SchedulerFactoryBean schedulerFactoryBean) {\n        schedulerFactoryBean.setDataSource(null);\n    }\n}\n```\n\n**以上**\n\n**在文末附上我的GitHub小demo,其中包含了quartz的数据库建表sql,并提供了一种可以更加灵活便捷的通过yml文件配置定时任务的方式  地址: GitHub-BootQuartzYml**\n\n**以下是yml配置文件配置定时任务的例子**\n\n```java\n#通过加载此配置文件实现动态创建Job 旨在通过一种更灵活便捷的方式来控制定时任务\n\n#20200611 by Demo-Liu\n\n#jobs:\n#  jobList:\n#    - jobConf:\n#        name: 测试任务                             #任务名 可选\n#        job: com.example.demo.quartz.DemoJob  #任务类包路径 必须\n#        param:                                     #可为job类注入参数(可配置多项)   可选\n#          jtbs: test\n#        cron: 10 * * * * ?                         #任务执行频率 必须\n#        active: true                               #任务激活状态 必须\njobs:\n  jobList:\n    - jobConf:\n        name: 测试任务\n        job: com.example.demo.quartz.DemoJob\n        param:\n          jtbs: test\n          ss: test2\n        cron: 0/10 * * * * ?\n        active: true\n    - jobConf:\n        name: 测试任务2\n        job: com.example.demo.quartz.DemoJob2\n        param:\n          jtbs: test\n          ss: test2\n        cron: 0/10 * * * * ?\n        active: false\n```\n\n ","source":"_posts/SpringBoot-Quartz框架的实现.md","raw":"---\ntitle: SpringBoot+Quartz框架的实现\ndate: 2020-08-14 18:39:29\ntags:\n- springboot\n- quartz\n---\n\n定时任务 想必做程序的都或多或少的接触过,以便于我们以某个特定的 时间/频率 去执行所需要的程序,Quartz 是一个优秀的框架,可以根据我们的配置将 定时任务的执行 时间/频率 持久化至数据库, 我们通过修改数据库中的任务下次执行时间,达到不需要等到任务配置执行的原始 时间/频率,随时地运行定时任务; 并且可以看到任务的运行状态 WATING BLOCKING等\n\n   1.导入依赖\n\n   quartz自定义配置的数据源会使用C3P0创建连接,所以要引入C3P0依赖\n\n```java\n <!-- Quartz定时任务 -->\n   <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-quartz</artifactId>\n   </dependency>\n<!--C3P0 -->\n   <dependency>\n       <groupId>com.mchange</groupId>\n       <artifactId>c3p0</artifactId>\n       <version>0.9.5.5</version>\n   </dependency>\n```\n\n2.quartz 配置文件,yml方式\n\n创建定时任务表的sql太长,这里就不贴了,我会将sql上传至GitHub,文末我会贴地址\n\n```java\n## quartz定时任务\nspring:\n  quartz:\n    #jdbc 采用数据库方式  memory 采用内存方式\n    job-store-type: jdbc  \n    initialize-schema: embedded\n    #设置自动启动，默认为 true\n    auto-startup: true\n    #启动时更新己存在的Job\n    overwrite-existing-jobs: true\n    properties:\n      org:\n        quartz:\n          scheduler:\n            instanceName: MyScheduler\n            instanceId: AUTO\n          jobStore:\n            #指定使用的JobStore\n            class: org.quartz.impl.jdbcjobstore.JobStoreTX\n            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate\n            #数据库前缀\n            tablePrefix: QRTZ_\n            #是否为集群\n            isClustered: false\n            #检测任务执行时间的间隔  毫秒\n            misfireThreshold: 5000\n            clusterCheckinInterval: 10000\n            #数据源名称\n            dataSource: myDS\n          #线程池配置\n          threadPool:\n            class: org.quartz.simpl.SimpleThreadPool\n            threadCount: 20\n            threadPriority: 5\n            threadsInheritContextClassLoaderOfInitializingThread: true\n          #数据源\n          dataSource:\n            myDS:\n              driver: com.mysql.cj.jdbc.Driver\n              URL: jdbc:mysql://localhost:3306/test?characterEncoding=UTF-8&useUnicode=true&useSSL=false&tinyInt1isBit=false&serverTimezone=Asia/Shanghai\n              user: root\n              password: root\n              maxConnections: 5\n```\n\n有同学可能会问了,配置文件是配置好了,是在哪引用的呢? 别急, 且听我娓娓道来\n\nspring-boot-starter-quartz (为方便诉说,下文中使用 bootquartz代替) 这个包下的QuartzProperties会帮我们自动加载配置文件,且看以下部分截图\n\n![img](https://img-blog.csdnimg.cn/20200617111853517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RlbW9fTGl1,size_16,color_FFFFFF,t_70)\n\n可以看到, QuartzProperties 使用了 @ConfigurationProperties 加载了 spring.quartz 前缀的配置,也就是上面我们的配置文件中的配置;加载之后呢, bootquartz包下有 类 QuartzAutoConfiguration, 看名字就可以知道,这个就是自动配置 quartz的类了.\n\n所以我们不需要再去通过代码去配置 SchedulerFactoryBean 了,这是后话\n\nQuartzAutoConfiguration 类注释\n\n![img](https://img-blog.csdnimg.cn/20200617113632769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RlbW9fTGl1,size_16,color_FFFFFF,t_70)\n\n通过上面的截图我们发现,这里引用了 QuartzProperties\n\n其中的 quartzScheduler()方法帮助我们创建了 SchedulerFactoryBean 并使用了** **QuartzProperties 中的自定义配置,以下是quartzScheduler()部分代码\n\n```java\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic SchedulerFactoryBean quartzScheduler() {\n\t\tSchedulerFactoryBean schedulerFactoryBean = new SchedulerFactoryBean();\n\t\tif (!this.properties.getProperties().isEmpty()) {\n\t\t\tschedulerFactoryBean\n\t.setQuartzProperties(asProperties(this.properties.getProperties()));\n\t\t}\n\t\tcustomize(schedulerFactoryBean);\n\t\treturn schedulerFactoryBean;\n\t}\n```\n\n姑且一提,方法中调用了 customize(SchedulerFactoryBean  schedulerFactoryBean) 方法,这个方法会寻找实现了 SchedulerFactoryBeanCustomizer 接口的配置类,在其实现方法 customize(SchedulerFactoryBean  schedulerFactoryBean)中 可对 SchedulerFactoryBean  使用代码自定义配置\n\n# 坑\n\n那么到这里结束了吗?不! 这里还有本文中最大的一个坑,作者深受其扰,扒了两天的源码才找到这个问题!!!\n\n如果我们的项目中有其它的默认数据源,那么quartz会忽略配置文件中自定义数据源,使用默认数据源,原因看以下源码\n\n首先是 QuartzAutoConfiguration 中的 静态内部类 JdbcStoreTypeConfiguration\n\n```java\n\t@Configuration\n\t@ConditionalOnSingleCandidate(DataSource.class)\n\tprotected static class JdbcStoreTypeConfiguration {\n\t\t@Bean\n\t\t@Order(0)\n\t\tpublic SchedulerFactoryBeanCustomizer dataSourceCustomizer(\n\t\t\t\tQuartzProperties properties, DataSource dataSource,\n\t\t\t\t@QuartzDataSource ObjectProvider<DataSource> quartzDataSource,\n\t\t\t\tObjectProvider<PlatformTransactionManager> transactionManager) {\n\t\t\treturn (schedulerFactoryBean) -> {\n\t\t\t\tif (properties.getJobStoreType() == JobStoreType.JDBC) {\n                              //重点在这里 begin\n\t\t\t\t\tDataSource dataSourceToUse = getDataSource(dataSource,\tquartzDataSource);\n\t\t\t\t\tschedulerFactoryBean.setDataSource(dataSourceToUse);\n                              //重点在这里 end\n\t\t\t\t\tPlatformTransactionManager txManager = transactionManager.getIfUnique();\n\t\t\t\t\tif (txManager != null) {\nschedulerFactoryBean.setTransactionManager(txManager);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n       private DataSource getDataSource(DataSource dataSource,\n\t\t\t\tObjectProvider<DataSource> quartzDataSource) {\n\t\t\tDataSource dataSourceIfAvailable = quartzDataSource.getIfAvailable();\n\t\t\treturn (dataSourceIfAvailable != null) ? dataSourceIfAvailable : dataSource;\n\t\t}\n```\n\n其中的getDataSource 方法判断了我们项目中的 quartzDataSource是否为空,如果为空,那么就使用默认的数据源;quartzDataSource怎么才能不为空呢? 可以看到dataSourceCustomizer 方法参数中有 @QuartzDataSource 注解, 这个注解会去寻找我们项目中使用@QuartzDataSource配置的数据源,但是 我都已经在配置文件中自定义了数据源,再去手动配置一遍不是多此一举吗? 接着往下看\n\n**SchedulerFactoryBean 的初始化方法部分源码▼**\n\n```java\nprivate void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException {\n\t\tProperties mergedProps = new Properties();\n\n\t\tif (this.dataSource != null) {\nmergedProps.setProperty(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName());\n\t\t}\n}\n```\n\n我们在静态内部类设置过了数据源,初始化方法只要发现数据源不为空,那么就使用会使用 LocalDataSourceJobStore 覆盖我们quartz配置文件中设置的  org.quartz.jobStore.class: org.quartz.impl.jdbcjobstore.JobStoreTX\n\n而LocalDataSourceJobStore 中的初始化方法使用的是 SchedulerFactoryBean 中设置的数据源,所以我们quartz配置文件中的数据源才不会生效!!!\n\n怎么解决呢?   我们上面提到了customize(SchedulerFactoryBean  schedulerFactoryBean) 方法,这个方法会寻找实现了 SchedulerFactoryBeanCustomizer 接口的配置类,在其实现方法 customize(SchedulerFactoryBean  schedulerFactoryBean)中 可对 SchedulerFactoryBean  使用代码自定义配置\n\n所以 我们只要在SchedulerFactoryBean 创建后调用初始化方法之前,再将DataSource设置为null,那么SchedulerFactoryBean 初始化时,将会使用我们配置文件中的JobStoreTX去寻找我们配置的数据源了,至此,填坑完毕▼\n\n```java\nimport org.springframework.boot.autoconfigure.quartz.SchedulerFactoryBeanCustomizer;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.scheduling.quartz.SchedulerFactoryBean;\n\n/**\n\n * @author Demo-Liu\n * @create 2020-06-12 11:20\n * @description 配置定时任务\n */\n\n@Configuration\npublic class SchedulerConfig implements SchedulerFactoryBeanCustomizer {\n    /**\n     * @Author Demo-Liu\n     * @Date 20200614 12:44\n     * 自定义 quartz配置\n     * @param schedulerFactoryBean\n     */\n\n\n    @Override\n    public void customize(SchedulerFactoryBean schedulerFactoryBean) {\n        schedulerFactoryBean.setDataSource(null);\n    }\n}\n```\n\n**以上**\n\n**在文末附上我的GitHub小demo,其中包含了quartz的数据库建表sql,并提供了一种可以更加灵活便捷的通过yml文件配置定时任务的方式  地址: GitHub-BootQuartzYml**\n\n**以下是yml配置文件配置定时任务的例子**\n\n```java\n#通过加载此配置文件实现动态创建Job 旨在通过一种更灵活便捷的方式来控制定时任务\n\n#20200611 by Demo-Liu\n\n#jobs:\n#  jobList:\n#    - jobConf:\n#        name: 测试任务                             #任务名 可选\n#        job: com.example.demo.quartz.DemoJob  #任务类包路径 必须\n#        param:                                     #可为job类注入参数(可配置多项)   可选\n#          jtbs: test\n#        cron: 10 * * * * ?                         #任务执行频率 必须\n#        active: true                               #任务激活状态 必须\njobs:\n  jobList:\n    - jobConf:\n        name: 测试任务\n        job: com.example.demo.quartz.DemoJob\n        param:\n          jtbs: test\n          ss: test2\n        cron: 0/10 * * * * ?\n        active: true\n    - jobConf:\n        name: 测试任务2\n        job: com.example.demo.quartz.DemoJob2\n        param:\n          jtbs: test\n          ss: test2\n        cron: 0/10 * * * * ?\n        active: false\n```\n\n ","slug":"SpringBoot-Quartz框架的实现","published":1,"updated":"2020-10-17T10:01:55.955Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbll4002f4tjegqen4qoq","content":"<p>定时任务 想必做程序的都或多或少的接触过,以便于我们以某个特定的 时间/频率 去执行所需要的程序,Quartz 是一个优秀的框架,可以根据我们的配置将 定时任务的执行 时间/频率 持久化至数据库, 我们通过修改数据库中的任务下次执行时间,达到不需要等到任务配置执行的原始 时间/频率,随时地运行定时任务; 并且可以看到任务的运行状态 WATING BLOCKING等</p>\n<p>   1.导入依赖</p>\n<p>   quartz自定义配置的数据源会使用C3P0创建连接,所以要引入C3P0依赖</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;!-- Quartz定时任务 --&gt;</span><br><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;spring-boot-starter-quartz&lt;/artifactId&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br><span class=\"line\">&lt;!--C3P0 --&gt;</span><br><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">       &lt;groupId&gt;com.mchange&lt;/groupId&gt;</span><br><span class=\"line\">       &lt;artifactId&gt;c3p0&lt;/artifactId&gt;</span><br><span class=\"line\">       &lt;version&gt;0.9.5.5&lt;/version&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>2.quartz 配置文件,yml方式</p>\n<p>创建定时任务表的sql太长,这里就不贴了,我会将sql上传至GitHub,文末我会贴地址</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## quartz定时任务</span><br><span class=\"line\">spring:</span><br><span class=\"line\">  quartz:</span><br><span class=\"line\">    #jdbc 采用数据库方式  memory 采用内存方式</span><br><span class=\"line\">    job-store-type: jdbc  </span><br><span class=\"line\">    initialize-schema: embedded</span><br><span class=\"line\">    #设置自动启动，默认为 true</span><br><span class=\"line\">    auto-startup: <span class=\"keyword\">true</span></span><br><span class=\"line\">    #启动时更新己存在的Job</span><br><span class=\"line\">    overwrite-existing-jobs: <span class=\"keyword\">true</span></span><br><span class=\"line\">    properties:</span><br><span class=\"line\">      org:</span><br><span class=\"line\">        quartz:</span><br><span class=\"line\">          scheduler:</span><br><span class=\"line\">            instanceName: MyScheduler</span><br><span class=\"line\">            instanceId: AUTO</span><br><span class=\"line\">          jobStore:</span><br><span class=\"line\">            #指定使用的JobStore</span><br><span class=\"line\">            class: org.quartz.impl.jdbcjobstore.JobStoreTX</span><br><span class=\"line\">            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span><br><span class=\"line\">            #数据库前缀</span><br><span class=\"line\">            tablePrefix: QRTZ_</span><br><span class=\"line\">            #是否为集群</span><br><span class=\"line\">            isClustered: <span class=\"keyword\">false</span></span><br><span class=\"line\">            #检测任务执行时间的间隔  毫秒</span><br><span class=\"line\">            misfireThreshold: <span class=\"number\">5000</span></span><br><span class=\"line\">            clusterCheckinInterval: <span class=\"number\">10000</span></span><br><span class=\"line\">            #数据源名称</span><br><span class=\"line\">            dataSource: myDS</span><br><span class=\"line\">          #线程池配置</span><br><span class=\"line\">          threadPool:</span><br><span class=\"line\">            class: org.quartz.simpl.SimpleThreadPool</span><br><span class=\"line\">            threadCount: <span class=\"number\">20</span></span><br><span class=\"line\">            threadPriority: <span class=\"number\">5</span></span><br><span class=\"line\">            threadsInheritContextClassLoaderOfInitializingThread: <span class=\"keyword\">true</span></span><br><span class=\"line\">          #数据源</span><br><span class=\"line\">          dataSource:</span><br><span class=\"line\">            myDS:</span><br><span class=\"line\">              driver: com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">              URL: jdbc:mysql:<span class=\"comment\">//localhost:3306/test?characterEncoding=UTF-8&amp;useUnicode=true&amp;useSSL=false&amp;tinyInt1isBit=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class=\"line\">              user: root</span><br><span class=\"line\">              password: root</span><br><span class=\"line\">              maxConnections: <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<p>有同学可能会问了,配置文件是配置好了,是在哪引用的呢? 别急, 且听我娓娓道来</p>\n<p>spring-boot-starter-quartz (为方便诉说,下文中使用 bootquartz代替) 这个包下的QuartzProperties会帮我们自动加载配置文件,且看以下部分截图</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20200617111853517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RlbW9fTGl1,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>可以看到, QuartzProperties 使用了 @ConfigurationProperties 加载了 spring.quartz 前缀的配置,也就是上面我们的配置文件中的配置;加载之后呢, bootquartz包下有 类 QuartzAutoConfiguration, 看名字就可以知道,这个就是自动配置 quartz的类了.</p>\n<p>所以我们不需要再去通过代码去配置 SchedulerFactoryBean 了,这是后话</p>\n<p>QuartzAutoConfiguration 类注释</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20200617113632769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RlbW9fTGl1,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>通过上面的截图我们发现,这里引用了 QuartzProperties</p>\n<p>其中的 quartzScheduler()方法帮助我们创建了 SchedulerFactoryBean 并使用了<strong> </strong>QuartzProperties 中的自定义配置,以下是quartzScheduler()部分代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> SchedulerFactoryBean <span class=\"title\">quartzScheduler</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tSchedulerFactoryBean schedulerFactoryBean = <span class=\"keyword\">new</span> SchedulerFactoryBean();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.properties.getProperties().isEmpty()) &#123;</span><br><span class=\"line\">\t\tschedulerFactoryBean</span><br><span class=\"line\">.setQuartzProperties(asProperties(<span class=\"keyword\">this</span>.properties.getProperties()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcustomize(schedulerFactoryBean);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> schedulerFactoryBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>姑且一提,方法中调用了 customize(SchedulerFactoryBean  schedulerFactoryBean) 方法,这个方法会寻找实现了 SchedulerFactoryBeanCustomizer 接口的配置类,在其实现方法 customize(SchedulerFactoryBean  schedulerFactoryBean)中 可对 SchedulerFactoryBean  使用代码自定义配置</p>\n<h1 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h1><p>那么到这里结束了吗?不! 这里还有本文中最大的一个坑,作者深受其扰,扒了两天的源码才找到这个问题!!!</p>\n<p>如果我们的项目中有其它的默认数据源,那么quartz会忽略配置文件中自定义数据源,使用默认数据源,原因看以下源码</p>\n<p>首先是 QuartzAutoConfiguration 中的 静态内部类 JdbcStoreTypeConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"meta\">@Configuration</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnSingleCandidate</span>(DataSource.class)</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JdbcStoreTypeConfiguration</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t\t<span class=\"meta\">@Order</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> SchedulerFactoryBeanCustomizer <span class=\"title\">dataSourceCustomizer</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\t\tQuartzProperties properties, DataSource dataSource,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\t\t@QuartzDataSource ObjectProvider&lt;DataSource&gt; quartzDataSource,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\t\tObjectProvider&lt;PlatformTransactionManager&gt; transactionManager)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> (schedulerFactoryBean) -&gt; &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (properties.getJobStoreType() == JobStoreType.JDBC) &#123;</span><br><span class=\"line\">                              <span class=\"comment\">//重点在这里 begin</span></span><br><span class=\"line\">\t\t\t\t\tDataSource dataSourceToUse = getDataSource(dataSource,\tquartzDataSource);</span><br><span class=\"line\">\t\t\t\t\tschedulerFactoryBean.setDataSource(dataSourceToUse);</span><br><span class=\"line\">                              <span class=\"comment\">//重点在这里 end</span></span><br><span class=\"line\">\t\t\t\t\tPlatformTransactionManager txManager = transactionManager.getIfUnique();</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (txManager != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">schedulerFactoryBean.setTransactionManager(txManager);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">private</span> DataSource <span class=\"title\">getDataSource</span><span class=\"params\">(DataSource dataSource,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\t\tObjectProvider&lt;DataSource&gt; quartzDataSource)</span> </span>&#123;</span><br><span class=\"line\">\t\t\tDataSource dataSourceIfAvailable = quartzDataSource.getIfAvailable();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> (dataSourceIfAvailable != <span class=\"keyword\">null</span>) ? dataSourceIfAvailable : dataSource;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<p>其中的getDataSource 方法判断了我们项目中的 quartzDataSource是否为空,如果为空,那么就使用默认的数据源;quartzDataSource怎么才能不为空呢? 可以看到dataSourceCustomizer 方法参数中有 @QuartzDataSource 注解, 这个注解会去寻找我们项目中使用@QuartzDataSource配置的数据源,但是 我都已经在配置文件中自定义了数据源,再去手动配置一遍不是多此一举吗? 接着往下看</p>\n<p><strong>SchedulerFactoryBean 的初始化方法部分源码▼</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initSchedulerFactory</span><span class=\"params\">(StdSchedulerFactory schedulerFactory)</span> <span class=\"keyword\">throws</span> SchedulerException, IOException </span>&#123;</span><br><span class=\"line\">\t\tProperties mergedProps = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dataSource != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">mergedProps.setProperty(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们在静态内部类设置过了数据源,初始化方法只要发现数据源不为空,那么就使用会使用 LocalDataSourceJobStore 覆盖我们quartz配置文件中设置的  org.quartz.jobStore.class: org.quartz.impl.jdbcjobstore.JobStoreTX</p>\n<p>而LocalDataSourceJobStore 中的初始化方法使用的是 SchedulerFactoryBean 中设置的数据源,所以我们quartz配置文件中的数据源才不会生效!!!</p>\n<p>怎么解决呢?   我们上面提到了customize(SchedulerFactoryBean  schedulerFactoryBean) 方法,这个方法会寻找实现了 SchedulerFactoryBeanCustomizer 接口的配置类,在其实现方法 customize(SchedulerFactoryBean  schedulerFactoryBean)中 可对 SchedulerFactoryBean  使用代码自定义配置</p>\n<p>所以 我们只要在SchedulerFactoryBean 创建后调用初始化方法之前,再将DataSource设置为null,那么SchedulerFactoryBean 初始化时,将会使用我们配置文件中的JobStoreTX去寻找我们配置的数据源了,至此,填坑完毕▼</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.quartz.SchedulerFactoryBeanCustomizer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.scheduling.quartz.SchedulerFactoryBean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Demo-Liu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2020-06-12 11:20</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span> 配置定时任务</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SchedulerConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">SchedulerFactoryBeanCustomizer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Author</span> Demo-Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Date</span> 20200614 12:44</span></span><br><span class=\"line\"><span class=\"comment\">     * 自定义 quartz配置</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> schedulerFactoryBean</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">customize</span><span class=\"params\">(SchedulerFactoryBean schedulerFactoryBean)</span> </span>&#123;</span><br><span class=\"line\">        schedulerFactoryBean.setDataSource(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>以上</strong></p>\n<p><strong>在文末附上我的GitHub小demo,其中包含了quartz的数据库建表sql,并提供了一种可以更加灵活便捷的通过yml文件配置定时任务的方式  地址: GitHub-BootQuartzYml</strong></p>\n<p><strong>以下是yml配置文件配置定时任务的例子</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#通过加载此配置文件实现动态创建Job 旨在通过一种更灵活便捷的方式来控制定时任务</span><br><span class=\"line\"></span><br><span class=\"line\">#20200611 by Demo-Liu</span><br><span class=\"line\"></span><br><span class=\"line\">#jobs:</span><br><span class=\"line\">#  jobList:</span><br><span class=\"line\">#    - jobConf:</span><br><span class=\"line\">#        name: 测试任务                             #任务名 可选</span><br><span class=\"line\">#        job: com.example.demo.quartz.DemoJob  #任务类包路径 必须</span><br><span class=\"line\">#        param:                                     #可为job类注入参数(可配置多项)   可选</span><br><span class=\"line\">#          jtbs: test</span><br><span class=\"line\">#        cron: 10 * * * * ?                         #任务执行频率 必须</span><br><span class=\"line\">#        active: true                               #任务激活状态 必须</span><br><span class=\"line\">jobs:</span><br><span class=\"line\">  jobList:</span><br><span class=\"line\">    - jobConf:</span><br><span class=\"line\">        name: 测试任务</span><br><span class=\"line\">        job: com.example.demo.quartz.DemoJob</span><br><span class=\"line\">        param:</span><br><span class=\"line\">          jtbs: test</span><br><span class=\"line\">          ss: test2</span><br><span class=\"line\">        cron: <span class=\"number\">0</span>/<span class=\"number\">10</span> * * * * ?</span><br><span class=\"line\">        active: <span class=\"keyword\">true</span></span><br><span class=\"line\">    - jobConf:</span><br><span class=\"line\">        name: 测试任务<span class=\"number\">2</span></span><br><span class=\"line\">        job: com.example.demo.quartz.DemoJob2</span><br><span class=\"line\">        param:</span><br><span class=\"line\">          jtbs: test</span><br><span class=\"line\">          ss: test2</span><br><span class=\"line\">        cron: <span class=\"number\">0</span>/<span class=\"number\">10</span> * * * * ?</span><br><span class=\"line\">        active: <span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>定时任务 想必做程序的都或多或少的接触过,以便于我们以某个特定的 时间/频率 去执行所需要的程序,Quartz 是一个优秀的框架,可以根据我们的配置将 定时任务的执行 时间/频率 持久化至数据库, 我们通过修改数据库中的任务下次执行时间,达到不需要等到任务配置执行的原始 时间/频率,随时地运行定时任务; 并且可以看到任务的运行状态 WATING BLOCKING等</p>\n<p>   1.导入依赖</p>\n<p>   quartz自定义配置的数据源会使用C3P0创建连接,所以要引入C3P0依赖</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;!-- Quartz定时任务 --&gt;</span><br><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">      &lt;artifactId&gt;spring-boot-starter-quartz&lt;/artifactId&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br><span class=\"line\">&lt;!--C3P0 --&gt;</span><br><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">       &lt;groupId&gt;com.mchange&lt;/groupId&gt;</span><br><span class=\"line\">       &lt;artifactId&gt;c3p0&lt;/artifactId&gt;</span><br><span class=\"line\">       &lt;version&gt;0.9.5.5&lt;/version&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<p>2.quartz 配置文件,yml方式</p>\n<p>创建定时任务表的sql太长,这里就不贴了,我会将sql上传至GitHub,文末我会贴地址</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## quartz定时任务</span><br><span class=\"line\">spring:</span><br><span class=\"line\">  quartz:</span><br><span class=\"line\">    #jdbc 采用数据库方式  memory 采用内存方式</span><br><span class=\"line\">    job-store-type: jdbc  </span><br><span class=\"line\">    initialize-schema: embedded</span><br><span class=\"line\">    #设置自动启动，默认为 true</span><br><span class=\"line\">    auto-startup: <span class=\"keyword\">true</span></span><br><span class=\"line\">    #启动时更新己存在的Job</span><br><span class=\"line\">    overwrite-existing-jobs: <span class=\"keyword\">true</span></span><br><span class=\"line\">    properties:</span><br><span class=\"line\">      org:</span><br><span class=\"line\">        quartz:</span><br><span class=\"line\">          scheduler:</span><br><span class=\"line\">            instanceName: MyScheduler</span><br><span class=\"line\">            instanceId: AUTO</span><br><span class=\"line\">          jobStore:</span><br><span class=\"line\">            #指定使用的JobStore</span><br><span class=\"line\">            class: org.quartz.impl.jdbcjobstore.JobStoreTX</span><br><span class=\"line\">            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span><br><span class=\"line\">            #数据库前缀</span><br><span class=\"line\">            tablePrefix: QRTZ_</span><br><span class=\"line\">            #是否为集群</span><br><span class=\"line\">            isClustered: <span class=\"keyword\">false</span></span><br><span class=\"line\">            #检测任务执行时间的间隔  毫秒</span><br><span class=\"line\">            misfireThreshold: <span class=\"number\">5000</span></span><br><span class=\"line\">            clusterCheckinInterval: <span class=\"number\">10000</span></span><br><span class=\"line\">            #数据源名称</span><br><span class=\"line\">            dataSource: myDS</span><br><span class=\"line\">          #线程池配置</span><br><span class=\"line\">          threadPool:</span><br><span class=\"line\">            class: org.quartz.simpl.SimpleThreadPool</span><br><span class=\"line\">            threadCount: <span class=\"number\">20</span></span><br><span class=\"line\">            threadPriority: <span class=\"number\">5</span></span><br><span class=\"line\">            threadsInheritContextClassLoaderOfInitializingThread: <span class=\"keyword\">true</span></span><br><span class=\"line\">          #数据源</span><br><span class=\"line\">          dataSource:</span><br><span class=\"line\">            myDS:</span><br><span class=\"line\">              driver: com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">              URL: jdbc:mysql:<span class=\"comment\">//localhost:3306/test?characterEncoding=UTF-8&amp;useUnicode=true&amp;useSSL=false&amp;tinyInt1isBit=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class=\"line\">              user: root</span><br><span class=\"line\">              password: root</span><br><span class=\"line\">              maxConnections: <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<p>有同学可能会问了,配置文件是配置好了,是在哪引用的呢? 别急, 且听我娓娓道来</p>\n<p>spring-boot-starter-quartz (为方便诉说,下文中使用 bootquartz代替) 这个包下的QuartzProperties会帮我们自动加载配置文件,且看以下部分截图</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20200617111853517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RlbW9fTGl1,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>可以看到, QuartzProperties 使用了 @ConfigurationProperties 加载了 spring.quartz 前缀的配置,也就是上面我们的配置文件中的配置;加载之后呢, bootquartz包下有 类 QuartzAutoConfiguration, 看名字就可以知道,这个就是自动配置 quartz的类了.</p>\n<p>所以我们不需要再去通过代码去配置 SchedulerFactoryBean 了,这是后话</p>\n<p>QuartzAutoConfiguration 类注释</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20200617113632769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RlbW9fTGl1,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>通过上面的截图我们发现,这里引用了 QuartzProperties</p>\n<p>其中的 quartzScheduler()方法帮助我们创建了 SchedulerFactoryBean 并使用了<strong> </strong>QuartzProperties 中的自定义配置,以下是quartzScheduler()部分代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> SchedulerFactoryBean <span class=\"title\">quartzScheduler</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tSchedulerFactoryBean schedulerFactoryBean = <span class=\"keyword\">new</span> SchedulerFactoryBean();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.properties.getProperties().isEmpty()) &#123;</span><br><span class=\"line\">\t\tschedulerFactoryBean</span><br><span class=\"line\">.setQuartzProperties(asProperties(<span class=\"keyword\">this</span>.properties.getProperties()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcustomize(schedulerFactoryBean);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> schedulerFactoryBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>姑且一提,方法中调用了 customize(SchedulerFactoryBean  schedulerFactoryBean) 方法,这个方法会寻找实现了 SchedulerFactoryBeanCustomizer 接口的配置类,在其实现方法 customize(SchedulerFactoryBean  schedulerFactoryBean)中 可对 SchedulerFactoryBean  使用代码自定义配置</p>\n<h1 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h1><p>那么到这里结束了吗?不! 这里还有本文中最大的一个坑,作者深受其扰,扒了两天的源码才找到这个问题!!!</p>\n<p>如果我们的项目中有其它的默认数据源,那么quartz会忽略配置文件中自定义数据源,使用默认数据源,原因看以下源码</p>\n<p>首先是 QuartzAutoConfiguration 中的 静态内部类 JdbcStoreTypeConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"meta\">@Configuration</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnSingleCandidate</span>(DataSource.class)</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JdbcStoreTypeConfiguration</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t\t<span class=\"meta\">@Order</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> SchedulerFactoryBeanCustomizer <span class=\"title\">dataSourceCustomizer</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\t\tQuartzProperties properties, DataSource dataSource,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\t\t@QuartzDataSource ObjectProvider&lt;DataSource&gt; quartzDataSource,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\t\tObjectProvider&lt;PlatformTransactionManager&gt; transactionManager)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> (schedulerFactoryBean) -&gt; &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (properties.getJobStoreType() == JobStoreType.JDBC) &#123;</span><br><span class=\"line\">                              <span class=\"comment\">//重点在这里 begin</span></span><br><span class=\"line\">\t\t\t\t\tDataSource dataSourceToUse = getDataSource(dataSource,\tquartzDataSource);</span><br><span class=\"line\">\t\t\t\t\tschedulerFactoryBean.setDataSource(dataSourceToUse);</span><br><span class=\"line\">                              <span class=\"comment\">//重点在这里 end</span></span><br><span class=\"line\">\t\t\t\t\tPlatformTransactionManager txManager = transactionManager.getIfUnique();</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (txManager != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">schedulerFactoryBean.setTransactionManager(txManager);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">private</span> DataSource <span class=\"title\">getDataSource</span><span class=\"params\">(DataSource dataSource,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\t\tObjectProvider&lt;DataSource&gt; quartzDataSource)</span> </span>&#123;</span><br><span class=\"line\">\t\t\tDataSource dataSourceIfAvailable = quartzDataSource.getIfAvailable();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> (dataSourceIfAvailable != <span class=\"keyword\">null</span>) ? dataSourceIfAvailable : dataSource;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<p>其中的getDataSource 方法判断了我们项目中的 quartzDataSource是否为空,如果为空,那么就使用默认的数据源;quartzDataSource怎么才能不为空呢? 可以看到dataSourceCustomizer 方法参数中有 @QuartzDataSource 注解, 这个注解会去寻找我们项目中使用@QuartzDataSource配置的数据源,但是 我都已经在配置文件中自定义了数据源,再去手动配置一遍不是多此一举吗? 接着往下看</p>\n<p><strong>SchedulerFactoryBean 的初始化方法部分源码▼</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initSchedulerFactory</span><span class=\"params\">(StdSchedulerFactory schedulerFactory)</span> <span class=\"keyword\">throws</span> SchedulerException, IOException </span>&#123;</span><br><span class=\"line\">\t\tProperties mergedProps = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dataSource != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">mergedProps.setProperty(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们在静态内部类设置过了数据源,初始化方法只要发现数据源不为空,那么就使用会使用 LocalDataSourceJobStore 覆盖我们quartz配置文件中设置的  org.quartz.jobStore.class: org.quartz.impl.jdbcjobstore.JobStoreTX</p>\n<p>而LocalDataSourceJobStore 中的初始化方法使用的是 SchedulerFactoryBean 中设置的数据源,所以我们quartz配置文件中的数据源才不会生效!!!</p>\n<p>怎么解决呢?   我们上面提到了customize(SchedulerFactoryBean  schedulerFactoryBean) 方法,这个方法会寻找实现了 SchedulerFactoryBeanCustomizer 接口的配置类,在其实现方法 customize(SchedulerFactoryBean  schedulerFactoryBean)中 可对 SchedulerFactoryBean  使用代码自定义配置</p>\n<p>所以 我们只要在SchedulerFactoryBean 创建后调用初始化方法之前,再将DataSource设置为null,那么SchedulerFactoryBean 初始化时,将会使用我们配置文件中的JobStoreTX去寻找我们配置的数据源了,至此,填坑完毕▼</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.quartz.SchedulerFactoryBeanCustomizer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.scheduling.quartz.SchedulerFactoryBean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Demo-Liu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2020-06-12 11:20</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span> 配置定时任务</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SchedulerConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">SchedulerFactoryBeanCustomizer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Author</span> Demo-Liu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Date</span> 20200614 12:44</span></span><br><span class=\"line\"><span class=\"comment\">     * 自定义 quartz配置</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> schedulerFactoryBean</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">customize</span><span class=\"params\">(SchedulerFactoryBean schedulerFactoryBean)</span> </span>&#123;</span><br><span class=\"line\">        schedulerFactoryBean.setDataSource(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>以上</strong></p>\n<p><strong>在文末附上我的GitHub小demo,其中包含了quartz的数据库建表sql,并提供了一种可以更加灵活便捷的通过yml文件配置定时任务的方式  地址: GitHub-BootQuartzYml</strong></p>\n<p><strong>以下是yml配置文件配置定时任务的例子</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#通过加载此配置文件实现动态创建Job 旨在通过一种更灵活便捷的方式来控制定时任务</span><br><span class=\"line\"></span><br><span class=\"line\">#20200611 by Demo-Liu</span><br><span class=\"line\"></span><br><span class=\"line\">#jobs:</span><br><span class=\"line\">#  jobList:</span><br><span class=\"line\">#    - jobConf:</span><br><span class=\"line\">#        name: 测试任务                             #任务名 可选</span><br><span class=\"line\">#        job: com.example.demo.quartz.DemoJob  #任务类包路径 必须</span><br><span class=\"line\">#        param:                                     #可为job类注入参数(可配置多项)   可选</span><br><span class=\"line\">#          jtbs: test</span><br><span class=\"line\">#        cron: 10 * * * * ?                         #任务执行频率 必须</span><br><span class=\"line\">#        active: true                               #任务激活状态 必须</span><br><span class=\"line\">jobs:</span><br><span class=\"line\">  jobList:</span><br><span class=\"line\">    - jobConf:</span><br><span class=\"line\">        name: 测试任务</span><br><span class=\"line\">        job: com.example.demo.quartz.DemoJob</span><br><span class=\"line\">        param:</span><br><span class=\"line\">          jtbs: test</span><br><span class=\"line\">          ss: test2</span><br><span class=\"line\">        cron: <span class=\"number\">0</span>/<span class=\"number\">10</span> * * * * ?</span><br><span class=\"line\">        active: <span class=\"keyword\">true</span></span><br><span class=\"line\">    - jobConf:</span><br><span class=\"line\">        name: 测试任务<span class=\"number\">2</span></span><br><span class=\"line\">        job: com.example.demo.quartz.DemoJob2</span><br><span class=\"line\">        param:</span><br><span class=\"line\">          jtbs: test</span><br><span class=\"line\">          ss: test2</span><br><span class=\"line\">        cron: <span class=\"number\">0</span>/<span class=\"number\">10</span> * * * * ?</span><br><span class=\"line\">        active: <span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure>\n"},{"title":"lorawan协议（中文版）","date":"2018-12-05T13:34:09.000Z","_content":"\n# 介绍\n\n网关和服务器之间的协议是有目的的非常基本的，仅用于演示目的，或用于私有和可靠的网络。\n\n这里没有网关或服务器的认证，并且确认仅用于网络质量评估，而不是 纠正UDP数据报丢失（无重试）。\n\n# 系统原理和相关定义\n\n```\n ((( Y )))\n     |\n     |\n+ - -|- - - - - - - - - - - - - +        xxxxxxxxxxxx          +--------+\n| +--+-----------+     +------+ |       xx x  x     xxx        |        |\n| |              |     |      | |      xx  Internet  xx        |        |\n| | Concentrator |<--->| Host |<-------xx     or    xx-------->|        |\n| |              | SPI |      | |      xx  Intranet  xx        | Server |\n| +--------------+     +------+ |       xxxx   x   xxxx        |        |\n|    ^                     ^    |           xxxxxxxx           |        |\n|    | PPS +-------+ NMEA  |    |                              |        |\n|    +-----|  GPS  |-------+    |                              +--------+\n|          | (opt) |            |\n|          +-------+            |\n|                               |\n|             Gateway           |\n+- - - - - - - - - - - - - - - -+\n```\n\n- **网关**：无线电RX / TX板，基于Semtech多通道调制解调器（SX130x），收发器（SX135x）和/或低功耗独立调制解调器（SX127x）。\n- **主机**：运行包转发器的嵌入式计算机。通过SPI链路驱动集中器。 GPS：具有“每秒1脉冲”的GNSS（GPS，伽利略，GLONASS等）接收器 输出和到主机的串行链接，以发送包含时间和地理坐标数据的NMEA帧。可选的。\n- **网关**：由至少一个无线电集中器，主机，一些组成的设备网络连接到互联网或专用网络（以太网，3G，Wifi，微波链路），以及可选的GPS接收器进行同步。\n- **服务器**：一种抽象计算机，它将处理由网关接收和转发的RF数据包，并发出RF数据包以响应网关必须发出的数据包。\n\n假设网关可以在NAT后面或防火墙停止任何传入连接。 假设服务器具有静态IP地址（或通过DNS服务可解决的地址），并且能够接收特定端口上的传入连接。\n\n# 上行协议\n\n3.1 时序图\n\n```\n+---------+                                                    +---------+\n| Gateway |                                                    | Server  |\n+---------+                                                    +---------+\n     | -----------------------------------\\                         |\n     |-| When 1-N RF packets are received |                         |\n     | ------------------------------------                         |\n     |                                                              |\n     | PUSH_DATA (token X, GW MAC, JSON payload)                    |\n     |------------------------------------------------------------->|\n     |                                                              |\n     |                                           PUSH_ACK (token X) |\n     |<-------------------------------------------------------------|\n     |                              ------------------------------\\ |\n     |                              | process packets *after* ack |-|\n     |                              ------------------------------- |\n     |                                                              |\n```\n\n## `PUSH_DATA` 包\n\n网关使用该数据包类型主要是将所接收的RF分组和相关联的元数据转发到服务器。\n\n| 字节    | 功能                    |\n| ------- | ----------------------- |\n| 0       | 协议版本2               |\n| 1-2     | 随机凭证                |\n| 3       | PUSH_DATA标识`0x00`     |\n| 4-11    | 网关唯一标识（MAC地址） |\n| 12-结束 | `JSON`对象，看第4章     |\n\n## `PUSH_ACK`包\n\n服务器使用该数据包类型立即确认收到的所有PUSH_DATA数据包。\n\n| 字节 | 功能                                  |\n| ---- | ------------------------------------- |\n| 0    | 协议版本2                             |\n| 1-2  | 与`PUSH_DATA`包中相同的凭证，用于确认 |\n| 3    | `PUSH_ACK`标识`0x01`                  |\n\n# 上行`JSON`数据结构\n\n根对象包含名为`\"rxpk\"`的数组：\n\n```\n{\n\t\"rxpk\":[ {...}, ...]\n}\n```\n\n该数组包含至少一个`JSON`对象，每个对象包含一个RF数据包以及包含以下字段的关联元数据：\n\n| 名称 | 类别   | 功能                                                        |\n| ---- | ------ | ----------------------------------------------------------- |\n| time | string | UTC time of pkt RX, us precision, ISO 8601 ‘compact’ format |\n| tmst | number | Internal timestamp of “RX finished” event (32b unsigned)    |\n| freq | number | RX central frequency in MHz (unsigned float, Hz precision)  |\n| chan | number | Concentrator “IF” channel used for RX (unsigned integer)    |\n| rfch | number | Concentrator “RF chain” used for RX (unsigned integer)      |\n| stat | number | CRC status: 1 = OK, -1 = fail, 0 = no CRC                   |\n| modu | string | Modulation identifier “LORA” or “FSK”                       |\n| datr | string | LoRa datarate identifier (eg. SF12BW500)                    |\n| datr | number | FSK datarate (unsigned, in bits per second)                 |\n| codr | string | LoRa ECC coding rate identifier                             |\n| rssi | number | RSSI in dBm (signed integer, 1 dB precision)                |\n| lsnr | number | Lora SNR ratio in dB (signed float, 0.1 dB precision)       |\n| size | number | RF packet payload size in bytes (unsigned integer)          |\n| data | string | Base64 encoded RF packet payload, padded                    |\n\n示例（为了便于阅读而添加了空格，缩进和换行符）：\n\n```\n{\"rxpk\":[\n\t{\n\t\t\"time\":\"2013-03-31T16:21:17.528002Z\",\n\t\t\"tmst\":3512348611,\n\t\t\"chan\":2,\n\t\t\"rfch\":0,\n\t\t\"freq\":866.349812,\n\t\t\"stat\":1,\n\t\t\"modu\":\"LORA\",\n\t\t\"datr\":\"SF7BW125\",\n\t\t\"codr\":\"4/6\",\n\t\t\"rssi\":-35,\n\t\t\"lsnr\":5.1,\n\t\t\"size\":32,\n\t\t\"data\":\"-DS4CGaDCdG+48eJNM3Vai-zDpsR71Pn9CPA9uCON84\"\n\t},{\n\t\t\"time\":\"2013-03-31T16:21:17.530974Z\",\n\t\t\"tmst\":3512348514,\n\t\t\"chan\":9,\n\t\t\"rfch\":1,\n\t\t\"freq\":869.1,\n\t\t\"stat\":1,\n\t\t\"modu\":\"FSK\",\n\t\t\"datr\":50000,\n\t\t\"rssi\":-75,\n\t\t\"size\":16,\n\t\t\"data\":\"VEVTVF9QQUNLRVRfMTIzNA==\"\n\t},{\n\t\t\"time\":\"2013-03-31T16:21:17.532038Z\",\n\t\t\"tmst\":3316387610,\n\t\t\"chan\":0,\n\t\t\"rfch\":0,\n\t\t\"freq\":863.00981,\n\t\t\"stat\":1,\n\t\t\"modu\":\"LORA\",\n\t\t\"datr\":\"SF10BW125\",\n\t\t\"codr\":\"4/7\",\n\t\t\"rssi\":-38,\n\t\t\"lsnr\":5.5,\n\t\t\"size\":32,\n\t\t\"data\":\"ysgRl452xNLep9S1NTIg2lomKDxUgn3DJ7DE+b00Ass\"\n\t}\n]}\n```\n\n根对象还可以包含名为`\"stat\"`的对象：\n\n```\n{\n\t\"rxpk\":[ {...}, ...],\n\t\"stat\":{...}\n}\n```\n\n数据包可能不包含`\"rxpk\"`数组而是“stat”对象。\n\n```\n{\n\t\"stat\":{...}\n}\n```\n\n该对象包含网关的状态，包含以下字段：\n\n| 名称 | 类型   | 功能                                                         |\n| ---- | ------ | ------------------------------------------------------------ |\n| time | string | UTC ‘system’ time of the gateway, ISO 8601 ‘expanded’ format |\n| lati | number | GPS latitude of the gateway in degree (float, N is +)        |\n| long | number | GPS latitude of the gateway in degree (float, E is +)        |\n| alti | number | GPS altitude of the gateway in meter RX (integer)            |\n| rxnb | number | Number of radio packets received (unsigned integer)          |\n| rxok | number | Number of radio packets received with a valid PHY CRC        |\n| rxfw | number | Number of radio packets forwarded (unsigned integer)         |\n| ackr | number | Percentage of upstream datagrams that were acknowledged      |\n| dwnb | number | Number of downlink datagrams received (unsigned integer)     |\n| txnb | number | Number of packets emitted (unsigned integer)                 |\n\n示例（为了便于阅读而添加了空格，缩进和换行符）：\n\n```\n{\"stat\":{\n\t\"time\":\"2014-01-12 08:59:28 GMT\",\n\t\"lati\":46.24000,\n\t\"long\":3.25230,\n\t\"alti\":145,\n\t\"rxnb\":2,\n\t\"rxok\":2,\n\t\"rxfw\":2,\n\t\"ackr\":100.0,\n\t\"dwnb\":2,\n\t\"txnb\":2\n}}\n```\n\n# 下行协议\n\n## 时序图\n\n```\n+---------+                                                    +---------+\n| Gateway |                                                    | Server  |\n+---------+                                                    +---------+\n     | -----------------------------------\\                         |\n     |-| Every N seconds (keepalive time) |                         |\n     | ------------------------------------                         |\n     |                                                              |\n     | PULL_DATA (token Y, MAC@)                                    |\n     |------------------------------------------------------------->|\n     |                                                              |\n     |                                           PULL_ACK (token Y) |\n     |<-------------------------------------------------------------|\n     |                                                              |\n\n+---------+                                                    +---------+\n| Gateway |                                                    | Server  |\n+---------+                                                    +---------+\n     |      ------------------------------------------------------\\ |\n     |      | Anytime after first PULL_DATA for each packet to TX |-|\n     |      ------------------------------------------------------- |\n     |                                                              |\n     |                            PULL_RESP (token Z, JSON payload) |\n     |<-------------------------------------------------------------|\n     |                                                              |\n     | TX_ACK (token Z, JSON payload)                               |\n     |------------------------------------------------------------->|\n```\n\n## PULL_DATA包\n\n网关使用该数据包类型来轮询来自服务器的数据。\n\n此数据交换由网关初始化，因为如果网关位于NAT后面，服务器可能无法将数据包发送到网关。 当网关初始化交换机时，将打开通向服务器的网络路由，并允许数据包在两个方向上流动。 网关必须定期发送PULL_DATA数据包，以确保网络路由保持打开状态，以便服务器随时使用。\n\n| Bytes | Function                                |\n| ----- | --------------------------------------- |\n| 0     | protocol version = 2                    |\n| 1-2   | random token                            |\n| 3     | PULL_DATA identifier 0x02               |\n| 4-11  | Gateway unique identifier (MAC address) |\n\n### `PULL_ACK` 包\n\n服务器使用该数据包类型来确认网络路由是否已打开，以及服务器是否可以随时发送PULL_RESP数据包。\n\n| Bytes | Function                                          |\n| ----- | ------------------------------------------------- |\n| 0     | protocol version = 2                              |\n| 1-2   | same token as the PULL_DATA packet to acknowledge |\n| 3     | `PULL_ACK` identifier `0x04`                      |\n\n### PULL_RESP 包\n\n服务器使用该数据包类型来发送必须由网关发出的RF数据包和相关元数据。\n\n| Bytes | Function                                                   |\n| ----- | ---------------------------------------------------------- |\n| 0     | protocol version = 2                                       |\n| 1-2   | random token                                               |\n| 3     | PULL_RESP identifier 0x03                                  |\n| 4-end | JSON object, starting with {, ending with }, see section 6 |\n\n### TX_ACK 包\n\n网关使用该分组类型向服务器发送反馈，以通知网关是否已接受或拒绝下行链路请求。 数据报可以选项包含一个JSON字符串，以提供有关acknoledge的更多详细信息。 如果没有JSON（空字符串），这意味着没有发生错误。\n\n| Bytes  | Function                                                     |\n| ------ | ------------------------------------------------------------ |\n| 0      | protocol version = 2                                         |\n| 1-2    | same token as the PULL_RESP packet to acknowledge            |\n| 3      | TX_ACK identifier 0x05                                       |\n| 4-11   | Gateway unique identifier (MAC address)                      |\n| 12-end | [optional] JSON object, starting with {, ending with }, see section 6 |\n\n## 下行`JSON`数据结构\n\n------\n\nPULL_RESP数据包的根对象必须包含名为“txpk”的对象：\n\n```\n{\n\t\"txpk\": {...}\n}\n```\n\n该对象包含要发出的RF数据包以及与以下字段相关联的元数据：\n\n| Name | Type   | Function                                                     |\n| ---- | ------ | ------------------------------------------------------------ |\n| imme | bool   | Send packet immediately (will ignore tmst & time)            |\n| tmst | number | Send packet on a certain timestamp value (will ignore time)  |\n| time | string | Send packet at a certain time (GPS synchronization required) |\n| freq | number | TX central frequency in MHz (unsigned float, Hz precision)   |\n| rfch | number | Concentrator “RF chain” used for TX (unsigned integer)       |\n| powe | number | TX output power in dBm (unsigned integer, dBm precision)     |\n| modu | string | Modulation identifier “LORA” or “FSK”                        |\n| datr | string | LoRa datarate identifier (eg. SF12BW500)                     |\n| datr | number | FSK datarate (unsigned, in bits per second)                  |\n| codr | string | LoRa ECC coding rate identifier                              |\n| fdev | number | FSK frequency deviation (unsigned integer, in Hz)            |\n| ipol | bool   | Lora modulation polarization inversion                       |\n| prea | number | RF preamble size (unsigned integer)                          |\n| size | number | RF packet payload size in bytes (unsigned integer)           |\n| data | string | Base64 encoded RF packet payload, padding optional           |\n| ncrc | bool   | If true, disable the CRC of the physical layer (optional)    |\n\n大多数字段都是可选的。如果省略字段，将使用默认参数。 示例（为便于阅读而添加了空格，缩进和换行符）：\n\n```\n{\"txpk\":{\n\t\"imme\":true,\n\t\"freq\":864.123456,\n\t\"rfch\":0,\n\t\"powe\":14,\n\t\"modu\":\"LORA\",\n\t\"datr\":\"SF11BW125\",\n\t\"codr\":\"4/6\",\n\t\"ipol\":false,\n\t\"size\":32,\n\t\"data\":\"H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v\"\n}}\n{\"txpk\":{\n\t\"imme\":true,\n\t\"freq\":861.3,\n\t\"rfch\":0,\n\t\"powe\":12,\n\t\"modu\":\"FSK\",\n\t\"datr\":50000,\n\t\"fdev\":3000,\n\t\"size\":32,\n\t\"data\":\"H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v\"\n}}\n```\n\nTX_ACK数据包的根对象必须包含名为“txpk_ack”的对象：\n\n```\n{\n\t\"txpk_ack\": {...}\n}\n```\n\n该对象包含有关相关PULL_RESP数据包的状态信息。\n\n| Name  | Type   | Function                                                     |\n| ----- | ------ | ------------------------------------------------------------ |\n| error | string | Indication about success or type of failure that occured for downlink request. |\n\n可能的错误有：\n\n| Value            | Definition                                                   |\n| ---------------- | ------------------------------------------------------------ |\n| NONE             | Packet has been programmed for downlink                      |\n| TOO_LATE         | Rejected because it was already too late to program this packet for downlink |\n| TOO_EARLY        | Rejected because downlink packet timestamp is too much in advance |\n| COLLISION_PACKET | Rejected because there was already a packet programmed in requested timeframe |\n| COLLISION_BEACON | Rejected because there was already a beacon planned in requested timeframe |\n| TX_FREQ          | Rejected because requested frequency is not supported by TX RF chain |\n| TX_POWER         | Rejected because requested power is not supported by gateway |\n| GPS_UNLOCKED     | Rejected because GPS is unlocked, so GPS timestamp cannot be used |\n\n示例（为便于阅读而添加了空格，缩进和换行符）：\n\n```\n{\"txpk_ack\":{\n\t\"error\":\"COLLISION_PACKET\"\n}}\n```","source":"_posts/lorawan协议（中文版）.md","raw":"---\ntitle: lorawan协议（中文版）\ndate: 2018-12-05 21:34:09\ntags: lorawan\n---\n\n# 介绍\n\n网关和服务器之间的协议是有目的的非常基本的，仅用于演示目的，或用于私有和可靠的网络。\n\n这里没有网关或服务器的认证，并且确认仅用于网络质量评估，而不是 纠正UDP数据报丢失（无重试）。\n\n# 系统原理和相关定义\n\n```\n ((( Y )))\n     |\n     |\n+ - -|- - - - - - - - - - - - - +        xxxxxxxxxxxx          +--------+\n| +--+-----------+     +------+ |       xx x  x     xxx        |        |\n| |              |     |      | |      xx  Internet  xx        |        |\n| | Concentrator |<--->| Host |<-------xx     or    xx-------->|        |\n| |              | SPI |      | |      xx  Intranet  xx        | Server |\n| +--------------+     +------+ |       xxxx   x   xxxx        |        |\n|    ^                     ^    |           xxxxxxxx           |        |\n|    | PPS +-------+ NMEA  |    |                              |        |\n|    +-----|  GPS  |-------+    |                              +--------+\n|          | (opt) |            |\n|          +-------+            |\n|                               |\n|             Gateway           |\n+- - - - - - - - - - - - - - - -+\n```\n\n- **网关**：无线电RX / TX板，基于Semtech多通道调制解调器（SX130x），收发器（SX135x）和/或低功耗独立调制解调器（SX127x）。\n- **主机**：运行包转发器的嵌入式计算机。通过SPI链路驱动集中器。 GPS：具有“每秒1脉冲”的GNSS（GPS，伽利略，GLONASS等）接收器 输出和到主机的串行链接，以发送包含时间和地理坐标数据的NMEA帧。可选的。\n- **网关**：由至少一个无线电集中器，主机，一些组成的设备网络连接到互联网或专用网络（以太网，3G，Wifi，微波链路），以及可选的GPS接收器进行同步。\n- **服务器**：一种抽象计算机，它将处理由网关接收和转发的RF数据包，并发出RF数据包以响应网关必须发出的数据包。\n\n假设网关可以在NAT后面或防火墙停止任何传入连接。 假设服务器具有静态IP地址（或通过DNS服务可解决的地址），并且能够接收特定端口上的传入连接。\n\n# 上行协议\n\n3.1 时序图\n\n```\n+---------+                                                    +---------+\n| Gateway |                                                    | Server  |\n+---------+                                                    +---------+\n     | -----------------------------------\\                         |\n     |-| When 1-N RF packets are received |                         |\n     | ------------------------------------                         |\n     |                                                              |\n     | PUSH_DATA (token X, GW MAC, JSON payload)                    |\n     |------------------------------------------------------------->|\n     |                                                              |\n     |                                           PUSH_ACK (token X) |\n     |<-------------------------------------------------------------|\n     |                              ------------------------------\\ |\n     |                              | process packets *after* ack |-|\n     |                              ------------------------------- |\n     |                                                              |\n```\n\n## `PUSH_DATA` 包\n\n网关使用该数据包类型主要是将所接收的RF分组和相关联的元数据转发到服务器。\n\n| 字节    | 功能                    |\n| ------- | ----------------------- |\n| 0       | 协议版本2               |\n| 1-2     | 随机凭证                |\n| 3       | PUSH_DATA标识`0x00`     |\n| 4-11    | 网关唯一标识（MAC地址） |\n| 12-结束 | `JSON`对象，看第4章     |\n\n## `PUSH_ACK`包\n\n服务器使用该数据包类型立即确认收到的所有PUSH_DATA数据包。\n\n| 字节 | 功能                                  |\n| ---- | ------------------------------------- |\n| 0    | 协议版本2                             |\n| 1-2  | 与`PUSH_DATA`包中相同的凭证，用于确认 |\n| 3    | `PUSH_ACK`标识`0x01`                  |\n\n# 上行`JSON`数据结构\n\n根对象包含名为`\"rxpk\"`的数组：\n\n```\n{\n\t\"rxpk\":[ {...}, ...]\n}\n```\n\n该数组包含至少一个`JSON`对象，每个对象包含一个RF数据包以及包含以下字段的关联元数据：\n\n| 名称 | 类别   | 功能                                                        |\n| ---- | ------ | ----------------------------------------------------------- |\n| time | string | UTC time of pkt RX, us precision, ISO 8601 ‘compact’ format |\n| tmst | number | Internal timestamp of “RX finished” event (32b unsigned)    |\n| freq | number | RX central frequency in MHz (unsigned float, Hz precision)  |\n| chan | number | Concentrator “IF” channel used for RX (unsigned integer)    |\n| rfch | number | Concentrator “RF chain” used for RX (unsigned integer)      |\n| stat | number | CRC status: 1 = OK, -1 = fail, 0 = no CRC                   |\n| modu | string | Modulation identifier “LORA” or “FSK”                       |\n| datr | string | LoRa datarate identifier (eg. SF12BW500)                    |\n| datr | number | FSK datarate (unsigned, in bits per second)                 |\n| codr | string | LoRa ECC coding rate identifier                             |\n| rssi | number | RSSI in dBm (signed integer, 1 dB precision)                |\n| lsnr | number | Lora SNR ratio in dB (signed float, 0.1 dB precision)       |\n| size | number | RF packet payload size in bytes (unsigned integer)          |\n| data | string | Base64 encoded RF packet payload, padded                    |\n\n示例（为了便于阅读而添加了空格，缩进和换行符）：\n\n```\n{\"rxpk\":[\n\t{\n\t\t\"time\":\"2013-03-31T16:21:17.528002Z\",\n\t\t\"tmst\":3512348611,\n\t\t\"chan\":2,\n\t\t\"rfch\":0,\n\t\t\"freq\":866.349812,\n\t\t\"stat\":1,\n\t\t\"modu\":\"LORA\",\n\t\t\"datr\":\"SF7BW125\",\n\t\t\"codr\":\"4/6\",\n\t\t\"rssi\":-35,\n\t\t\"lsnr\":5.1,\n\t\t\"size\":32,\n\t\t\"data\":\"-DS4CGaDCdG+48eJNM3Vai-zDpsR71Pn9CPA9uCON84\"\n\t},{\n\t\t\"time\":\"2013-03-31T16:21:17.530974Z\",\n\t\t\"tmst\":3512348514,\n\t\t\"chan\":9,\n\t\t\"rfch\":1,\n\t\t\"freq\":869.1,\n\t\t\"stat\":1,\n\t\t\"modu\":\"FSK\",\n\t\t\"datr\":50000,\n\t\t\"rssi\":-75,\n\t\t\"size\":16,\n\t\t\"data\":\"VEVTVF9QQUNLRVRfMTIzNA==\"\n\t},{\n\t\t\"time\":\"2013-03-31T16:21:17.532038Z\",\n\t\t\"tmst\":3316387610,\n\t\t\"chan\":0,\n\t\t\"rfch\":0,\n\t\t\"freq\":863.00981,\n\t\t\"stat\":1,\n\t\t\"modu\":\"LORA\",\n\t\t\"datr\":\"SF10BW125\",\n\t\t\"codr\":\"4/7\",\n\t\t\"rssi\":-38,\n\t\t\"lsnr\":5.5,\n\t\t\"size\":32,\n\t\t\"data\":\"ysgRl452xNLep9S1NTIg2lomKDxUgn3DJ7DE+b00Ass\"\n\t}\n]}\n```\n\n根对象还可以包含名为`\"stat\"`的对象：\n\n```\n{\n\t\"rxpk\":[ {...}, ...],\n\t\"stat\":{...}\n}\n```\n\n数据包可能不包含`\"rxpk\"`数组而是“stat”对象。\n\n```\n{\n\t\"stat\":{...}\n}\n```\n\n该对象包含网关的状态，包含以下字段：\n\n| 名称 | 类型   | 功能                                                         |\n| ---- | ------ | ------------------------------------------------------------ |\n| time | string | UTC ‘system’ time of the gateway, ISO 8601 ‘expanded’ format |\n| lati | number | GPS latitude of the gateway in degree (float, N is +)        |\n| long | number | GPS latitude of the gateway in degree (float, E is +)        |\n| alti | number | GPS altitude of the gateway in meter RX (integer)            |\n| rxnb | number | Number of radio packets received (unsigned integer)          |\n| rxok | number | Number of radio packets received with a valid PHY CRC        |\n| rxfw | number | Number of radio packets forwarded (unsigned integer)         |\n| ackr | number | Percentage of upstream datagrams that were acknowledged      |\n| dwnb | number | Number of downlink datagrams received (unsigned integer)     |\n| txnb | number | Number of packets emitted (unsigned integer)                 |\n\n示例（为了便于阅读而添加了空格，缩进和换行符）：\n\n```\n{\"stat\":{\n\t\"time\":\"2014-01-12 08:59:28 GMT\",\n\t\"lati\":46.24000,\n\t\"long\":3.25230,\n\t\"alti\":145,\n\t\"rxnb\":2,\n\t\"rxok\":2,\n\t\"rxfw\":2,\n\t\"ackr\":100.0,\n\t\"dwnb\":2,\n\t\"txnb\":2\n}}\n```\n\n# 下行协议\n\n## 时序图\n\n```\n+---------+                                                    +---------+\n| Gateway |                                                    | Server  |\n+---------+                                                    +---------+\n     | -----------------------------------\\                         |\n     |-| Every N seconds (keepalive time) |                         |\n     | ------------------------------------                         |\n     |                                                              |\n     | PULL_DATA (token Y, MAC@)                                    |\n     |------------------------------------------------------------->|\n     |                                                              |\n     |                                           PULL_ACK (token Y) |\n     |<-------------------------------------------------------------|\n     |                                                              |\n\n+---------+                                                    +---------+\n| Gateway |                                                    | Server  |\n+---------+                                                    +---------+\n     |      ------------------------------------------------------\\ |\n     |      | Anytime after first PULL_DATA for each packet to TX |-|\n     |      ------------------------------------------------------- |\n     |                                                              |\n     |                            PULL_RESP (token Z, JSON payload) |\n     |<-------------------------------------------------------------|\n     |                                                              |\n     | TX_ACK (token Z, JSON payload)                               |\n     |------------------------------------------------------------->|\n```\n\n## PULL_DATA包\n\n网关使用该数据包类型来轮询来自服务器的数据。\n\n此数据交换由网关初始化，因为如果网关位于NAT后面，服务器可能无法将数据包发送到网关。 当网关初始化交换机时，将打开通向服务器的网络路由，并允许数据包在两个方向上流动。 网关必须定期发送PULL_DATA数据包，以确保网络路由保持打开状态，以便服务器随时使用。\n\n| Bytes | Function                                |\n| ----- | --------------------------------------- |\n| 0     | protocol version = 2                    |\n| 1-2   | random token                            |\n| 3     | PULL_DATA identifier 0x02               |\n| 4-11  | Gateway unique identifier (MAC address) |\n\n### `PULL_ACK` 包\n\n服务器使用该数据包类型来确认网络路由是否已打开，以及服务器是否可以随时发送PULL_RESP数据包。\n\n| Bytes | Function                                          |\n| ----- | ------------------------------------------------- |\n| 0     | protocol version = 2                              |\n| 1-2   | same token as the PULL_DATA packet to acknowledge |\n| 3     | `PULL_ACK` identifier `0x04`                      |\n\n### PULL_RESP 包\n\n服务器使用该数据包类型来发送必须由网关发出的RF数据包和相关元数据。\n\n| Bytes | Function                                                   |\n| ----- | ---------------------------------------------------------- |\n| 0     | protocol version = 2                                       |\n| 1-2   | random token                                               |\n| 3     | PULL_RESP identifier 0x03                                  |\n| 4-end | JSON object, starting with {, ending with }, see section 6 |\n\n### TX_ACK 包\n\n网关使用该分组类型向服务器发送反馈，以通知网关是否已接受或拒绝下行链路请求。 数据报可以选项包含一个JSON字符串，以提供有关acknoledge的更多详细信息。 如果没有JSON（空字符串），这意味着没有发生错误。\n\n| Bytes  | Function                                                     |\n| ------ | ------------------------------------------------------------ |\n| 0      | protocol version = 2                                         |\n| 1-2    | same token as the PULL_RESP packet to acknowledge            |\n| 3      | TX_ACK identifier 0x05                                       |\n| 4-11   | Gateway unique identifier (MAC address)                      |\n| 12-end | [optional] JSON object, starting with {, ending with }, see section 6 |\n\n## 下行`JSON`数据结构\n\n------\n\nPULL_RESP数据包的根对象必须包含名为“txpk”的对象：\n\n```\n{\n\t\"txpk\": {...}\n}\n```\n\n该对象包含要发出的RF数据包以及与以下字段相关联的元数据：\n\n| Name | Type   | Function                                                     |\n| ---- | ------ | ------------------------------------------------------------ |\n| imme | bool   | Send packet immediately (will ignore tmst & time)            |\n| tmst | number | Send packet on a certain timestamp value (will ignore time)  |\n| time | string | Send packet at a certain time (GPS synchronization required) |\n| freq | number | TX central frequency in MHz (unsigned float, Hz precision)   |\n| rfch | number | Concentrator “RF chain” used for TX (unsigned integer)       |\n| powe | number | TX output power in dBm (unsigned integer, dBm precision)     |\n| modu | string | Modulation identifier “LORA” or “FSK”                        |\n| datr | string | LoRa datarate identifier (eg. SF12BW500)                     |\n| datr | number | FSK datarate (unsigned, in bits per second)                  |\n| codr | string | LoRa ECC coding rate identifier                              |\n| fdev | number | FSK frequency deviation (unsigned integer, in Hz)            |\n| ipol | bool   | Lora modulation polarization inversion                       |\n| prea | number | RF preamble size (unsigned integer)                          |\n| size | number | RF packet payload size in bytes (unsigned integer)           |\n| data | string | Base64 encoded RF packet payload, padding optional           |\n| ncrc | bool   | If true, disable the CRC of the physical layer (optional)    |\n\n大多数字段都是可选的。如果省略字段，将使用默认参数。 示例（为便于阅读而添加了空格，缩进和换行符）：\n\n```\n{\"txpk\":{\n\t\"imme\":true,\n\t\"freq\":864.123456,\n\t\"rfch\":0,\n\t\"powe\":14,\n\t\"modu\":\"LORA\",\n\t\"datr\":\"SF11BW125\",\n\t\"codr\":\"4/6\",\n\t\"ipol\":false,\n\t\"size\":32,\n\t\"data\":\"H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v\"\n}}\n{\"txpk\":{\n\t\"imme\":true,\n\t\"freq\":861.3,\n\t\"rfch\":0,\n\t\"powe\":12,\n\t\"modu\":\"FSK\",\n\t\"datr\":50000,\n\t\"fdev\":3000,\n\t\"size\":32,\n\t\"data\":\"H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v\"\n}}\n```\n\nTX_ACK数据包的根对象必须包含名为“txpk_ack”的对象：\n\n```\n{\n\t\"txpk_ack\": {...}\n}\n```\n\n该对象包含有关相关PULL_RESP数据包的状态信息。\n\n| Name  | Type   | Function                                                     |\n| ----- | ------ | ------------------------------------------------------------ |\n| error | string | Indication about success or type of failure that occured for downlink request. |\n\n可能的错误有：\n\n| Value            | Definition                                                   |\n| ---------------- | ------------------------------------------------------------ |\n| NONE             | Packet has been programmed for downlink                      |\n| TOO_LATE         | Rejected because it was already too late to program this packet for downlink |\n| TOO_EARLY        | Rejected because downlink packet timestamp is too much in advance |\n| COLLISION_PACKET | Rejected because there was already a packet programmed in requested timeframe |\n| COLLISION_BEACON | Rejected because there was already a beacon planned in requested timeframe |\n| TX_FREQ          | Rejected because requested frequency is not supported by TX RF chain |\n| TX_POWER         | Rejected because requested power is not supported by gateway |\n| GPS_UNLOCKED     | Rejected because GPS is unlocked, so GPS timestamp cannot be used |\n\n示例（为便于阅读而添加了空格，缩进和换行符）：\n\n```\n{\"txpk_ack\":{\n\t\"error\":\"COLLISION_PACKET\"\n}}\n```","slug":"lorawan协议（中文版）","published":1,"updated":"2019-07-22T08:16:14.911Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbll5002i4tjegu5nz4c9","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>网关和服务器之间的协议是有目的的非常基本的，仅用于演示目的，或用于私有和可靠的网络。</p>\n<p>这里没有网关或服务器的认证，并且确认仅用于网络质量评估，而不是 纠正UDP数据报丢失（无重试）。</p>\n<h1 id=\"系统原理和相关定义\"><a href=\"#系统原理和相关定义\" class=\"headerlink\" title=\"系统原理和相关定义\"></a>系统原理和相关定义</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ((( Y )))</span><br><span class=\"line\">     |</span><br><span class=\"line\">     |</span><br><span class=\"line\">+ - -|- - - - - - - - - - - - - +        xxxxxxxxxxxx          +--------+</span><br><span class=\"line\">| +--+-----------+     +------+ |       xx x  x     xxx        |        |</span><br><span class=\"line\">| |              |     |      | |      xx  Internet  xx        |        |</span><br><span class=\"line\">| | Concentrator |&lt;---&gt;| Host |&lt;-------xx     or    xx--------&gt;|        |</span><br><span class=\"line\">| |              | SPI |      | |      xx  Intranet  xx        | Server |</span><br><span class=\"line\">| +--------------+     +------+ |       xxxx   x   xxxx        |        |</span><br><span class=\"line\">|    ^                     ^    |           xxxxxxxx           |        |</span><br><span class=\"line\">|    | PPS +-------+ NMEA  |    |                              |        |</span><br><span class=\"line\">|    +-----|  GPS  |-------+    |                              +--------+</span><br><span class=\"line\">|          | (opt) |            |</span><br><span class=\"line\">|          +-------+            |</span><br><span class=\"line\">|                               |</span><br><span class=\"line\">|             Gateway           |</span><br><span class=\"line\">+- - - - - - - - - - - - - - - -+</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>网关</strong>：无线电RX / TX板，基于Semtech多通道调制解调器（SX130x），收发器（SX135x）和/或低功耗独立调制解调器（SX127x）。</li>\n<li><strong>主机</strong>：运行包转发器的嵌入式计算机。通过SPI链路驱动集中器。 GPS：具有“每秒1脉冲”的GNSS（GPS，伽利略，GLONASS等）接收器 输出和到主机的串行链接，以发送包含时间和地理坐标数据的NMEA帧。可选的。</li>\n<li><strong>网关</strong>：由至少一个无线电集中器，主机，一些组成的设备网络连接到互联网或专用网络（以太网，3G，Wifi，微波链路），以及可选的GPS接收器进行同步。</li>\n<li><strong>服务器</strong>：一种抽象计算机，它将处理由网关接收和转发的RF数据包，并发出RF数据包以响应网关必须发出的数据包。</li>\n</ul>\n<p>假设网关可以在NAT后面或防火墙停止任何传入连接。 假设服务器具有静态IP地址（或通过DNS服务可解决的地址），并且能够接收特定端口上的传入连接。</p>\n<h1 id=\"上行协议\"><a href=\"#上行协议\" class=\"headerlink\" title=\"上行协议\"></a>上行协议</h1><p>3.1 时序图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">| Gateway |                                                    | Server  |</span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">     | -----------------------------------\\                         |</span><br><span class=\"line\">     |-| When 1-N RF packets are received |                         |</span><br><span class=\"line\">     | ------------------------------------                         |</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     | PUSH_DATA (token X, GW MAC, JSON payload)                    |</span><br><span class=\"line\">     |-------------------------------------------------------------&gt;|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     |                                           PUSH_ACK (token X) |</span><br><span class=\"line\">     |&lt;-------------------------------------------------------------|</span><br><span class=\"line\">     |                              ------------------------------\\ |</span><br><span class=\"line\">     |                              | process packets *after* ack |-|</span><br><span class=\"line\">     |                              ------------------------------- |</span><br><span class=\"line\">     |                                                              |</span><br></pre></td></tr></table></figure>\n<h2 id=\"PUSH-DATA-包\"><a href=\"#PUSH-DATA-包\" class=\"headerlink\" title=\"PUSH_DATA 包\"></a><code>PUSH_DATA</code> 包</h2><p>网关使用该数据包类型主要是将所接收的RF分组和相关联的元数据转发到服务器。</p>\n<table>\n<thead>\n<tr>\n<th>字节</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>协议版本2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>随机凭证</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PUSH_DATA标识<code>0x00</code></td>\n</tr>\n<tr>\n<td>4-11</td>\n<td>网关唯一标识（MAC地址）</td>\n</tr>\n<tr>\n<td>12-结束</td>\n<td><code>JSON</code>对象，看第4章</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"PUSH-ACK包\"><a href=\"#PUSH-ACK包\" class=\"headerlink\" title=\"PUSH_ACK包\"></a><code>PUSH_ACK</code>包</h2><p>服务器使用该数据包类型立即确认收到的所有PUSH_DATA数据包。</p>\n<table>\n<thead>\n<tr>\n<th>字节</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>协议版本2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>与<code>PUSH_DATA</code>包中相同的凭证，用于确认</td>\n</tr>\n<tr>\n<td>3</td>\n<td><code>PUSH_ACK</code>标识<code>0x01</code></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"上行JSON数据结构\"><a href=\"#上行JSON数据结构\" class=\"headerlink\" title=\"上行JSON数据结构\"></a>上行<code>JSON</code>数据结构</h1><p>根对象包含名为<code>&quot;rxpk&quot;</code>的数组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;rxpk&quot;:[ &#123;...&#125;, ...]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该数组包含至少一个<code>JSON</code>对象，每个对象包含一个RF数据包以及包含以下字段的关联元数据：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>类别</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>time</td>\n<td>string</td>\n<td>UTC time of pkt RX, us precision, ISO 8601 ‘compact’ format</td>\n</tr>\n<tr>\n<td>tmst</td>\n<td>number</td>\n<td>Internal timestamp of “RX finished” event (32b unsigned)</td>\n</tr>\n<tr>\n<td>freq</td>\n<td>number</td>\n<td>RX central frequency in MHz (unsigned float, Hz precision)</td>\n</tr>\n<tr>\n<td>chan</td>\n<td>number</td>\n<td>Concentrator “IF” channel used for RX (unsigned integer)</td>\n</tr>\n<tr>\n<td>rfch</td>\n<td>number</td>\n<td>Concentrator “RF chain” used for RX (unsigned integer)</td>\n</tr>\n<tr>\n<td>stat</td>\n<td>number</td>\n<td>CRC status: 1 = OK, -1 = fail, 0 = no CRC</td>\n</tr>\n<tr>\n<td>modu</td>\n<td>string</td>\n<td>Modulation identifier “LORA” or “FSK”</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>string</td>\n<td>LoRa datarate identifier (eg. SF12BW500)</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>number</td>\n<td>FSK datarate (unsigned, in bits per second)</td>\n</tr>\n<tr>\n<td>codr</td>\n<td>string</td>\n<td>LoRa ECC coding rate identifier</td>\n</tr>\n<tr>\n<td>rssi</td>\n<td>number</td>\n<td>RSSI in dBm (signed integer, 1 dB precision)</td>\n</tr>\n<tr>\n<td>lsnr</td>\n<td>number</td>\n<td>Lora SNR ratio in dB (signed float, 0.1 dB precision)</td>\n</tr>\n<tr>\n<td>size</td>\n<td>number</td>\n<td>RF packet payload size in bytes (unsigned integer)</td>\n</tr>\n<tr>\n<td>data</td>\n<td>string</td>\n<td>Base64 encoded RF packet payload, padded</td>\n</tr>\n</tbody>\n</table>\n<p>示例（为了便于阅读而添加了空格，缩进和换行符）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;rxpk&quot;:[</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t&quot;time&quot;:&quot;2013-03-31T16:21:17.528002Z&quot;,</span><br><span class=\"line\">\t\t&quot;tmst&quot;:3512348611,</span><br><span class=\"line\">\t\t&quot;chan&quot;:2,</span><br><span class=\"line\">\t\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t\t&quot;freq&quot;:866.349812,</span><br><span class=\"line\">\t\t&quot;stat&quot;:1,</span><br><span class=\"line\">\t\t&quot;modu&quot;:&quot;LORA&quot;,</span><br><span class=\"line\">\t\t&quot;datr&quot;:&quot;SF7BW125&quot;,</span><br><span class=\"line\">\t\t&quot;codr&quot;:&quot;4/6&quot;,</span><br><span class=\"line\">\t\t&quot;rssi&quot;:-35,</span><br><span class=\"line\">\t\t&quot;lsnr&quot;:5.1,</span><br><span class=\"line\">\t\t&quot;size&quot;:32,</span><br><span class=\"line\">\t\t&quot;data&quot;:&quot;-DS4CGaDCdG+48eJNM3Vai-zDpsR71Pn9CPA9uCON84&quot;</span><br><span class=\"line\">\t&#125;,&#123;</span><br><span class=\"line\">\t\t&quot;time&quot;:&quot;2013-03-31T16:21:17.530974Z&quot;,</span><br><span class=\"line\">\t\t&quot;tmst&quot;:3512348514,</span><br><span class=\"line\">\t\t&quot;chan&quot;:9,</span><br><span class=\"line\">\t\t&quot;rfch&quot;:1,</span><br><span class=\"line\">\t\t&quot;freq&quot;:869.1,</span><br><span class=\"line\">\t\t&quot;stat&quot;:1,</span><br><span class=\"line\">\t\t&quot;modu&quot;:&quot;FSK&quot;,</span><br><span class=\"line\">\t\t&quot;datr&quot;:50000,</span><br><span class=\"line\">\t\t&quot;rssi&quot;:-75,</span><br><span class=\"line\">\t\t&quot;size&quot;:16,</span><br><span class=\"line\">\t\t&quot;data&quot;:&quot;VEVTVF9QQUNLRVRfMTIzNA==&quot;</span><br><span class=\"line\">\t&#125;,&#123;</span><br><span class=\"line\">\t\t&quot;time&quot;:&quot;2013-03-31T16:21:17.532038Z&quot;,</span><br><span class=\"line\">\t\t&quot;tmst&quot;:3316387610,</span><br><span class=\"line\">\t\t&quot;chan&quot;:0,</span><br><span class=\"line\">\t\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t\t&quot;freq&quot;:863.00981,</span><br><span class=\"line\">\t\t&quot;stat&quot;:1,</span><br><span class=\"line\">\t\t&quot;modu&quot;:&quot;LORA&quot;,</span><br><span class=\"line\">\t\t&quot;datr&quot;:&quot;SF10BW125&quot;,</span><br><span class=\"line\">\t\t&quot;codr&quot;:&quot;4/7&quot;,</span><br><span class=\"line\">\t\t&quot;rssi&quot;:-38,</span><br><span class=\"line\">\t\t&quot;lsnr&quot;:5.5,</span><br><span class=\"line\">\t\t&quot;size&quot;:32,</span><br><span class=\"line\">\t\t&quot;data&quot;:&quot;ysgRl452xNLep9S1NTIg2lomKDxUgn3DJ7DE+b00Ass&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">]&#125;</span><br></pre></td></tr></table></figure>\n<p>根对象还可以包含名为<code>&quot;stat&quot;</code>的对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;rxpk&quot;:[ &#123;...&#125;, ...],</span><br><span class=\"line\">\t&quot;stat&quot;:&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>数据包可能不包含<code>&quot;rxpk&quot;</code>数组而是“stat”对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;stat&quot;:&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该对象包含网关的状态，包含以下字段：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>类型</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>time</td>\n<td>string</td>\n<td>UTC ‘system’ time of the gateway, ISO 8601 ‘expanded’ format</td>\n</tr>\n<tr>\n<td>lati</td>\n<td>number</td>\n<td>GPS latitude of the gateway in degree (float, N is +)</td>\n</tr>\n<tr>\n<td>long</td>\n<td>number</td>\n<td>GPS latitude of the gateway in degree (float, E is +)</td>\n</tr>\n<tr>\n<td>alti</td>\n<td>number</td>\n<td>GPS altitude of the gateway in meter RX (integer)</td>\n</tr>\n<tr>\n<td>rxnb</td>\n<td>number</td>\n<td>Number of radio packets received (unsigned integer)</td>\n</tr>\n<tr>\n<td>rxok</td>\n<td>number</td>\n<td>Number of radio packets received with a valid PHY CRC</td>\n</tr>\n<tr>\n<td>rxfw</td>\n<td>number</td>\n<td>Number of radio packets forwarded (unsigned integer)</td>\n</tr>\n<tr>\n<td>ackr</td>\n<td>number</td>\n<td>Percentage of upstream datagrams that were acknowledged</td>\n</tr>\n<tr>\n<td>dwnb</td>\n<td>number</td>\n<td>Number of downlink datagrams received (unsigned integer)</td>\n</tr>\n<tr>\n<td>txnb</td>\n<td>number</td>\n<td>Number of packets emitted (unsigned integer)</td>\n</tr>\n</tbody>\n</table>\n<p>示例（为了便于阅读而添加了空格，缩进和换行符）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;stat&quot;:&#123;</span><br><span class=\"line\">\t&quot;time&quot;:&quot;2014-01-12 08:59:28 GMT&quot;,</span><br><span class=\"line\">\t&quot;lati&quot;:46.24000,</span><br><span class=\"line\">\t&quot;long&quot;:3.25230,</span><br><span class=\"line\">\t&quot;alti&quot;:145,</span><br><span class=\"line\">\t&quot;rxnb&quot;:2,</span><br><span class=\"line\">\t&quot;rxok&quot;:2,</span><br><span class=\"line\">\t&quot;rxfw&quot;:2,</span><br><span class=\"line\">\t&quot;ackr&quot;:100.0,</span><br><span class=\"line\">\t&quot;dwnb&quot;:2,</span><br><span class=\"line\">\t&quot;txnb&quot;:2</span><br><span class=\"line\">&#125;&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"下行协议\"><a href=\"#下行协议\" class=\"headerlink\" title=\"下行协议\"></a>下行协议</h1><h2 id=\"时序图\"><a href=\"#时序图\" class=\"headerlink\" title=\"时序图\"></a>时序图</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">| Gateway |                                                    | Server  |</span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">     | -----------------------------------\\                         |</span><br><span class=\"line\">     |-| Every N seconds (keepalive time) |                         |</span><br><span class=\"line\">     | ------------------------------------                         |</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     | PULL_DATA (token Y, MAC@)                                    |</span><br><span class=\"line\">     |-------------------------------------------------------------&gt;|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     |                                           PULL_ACK (token Y) |</span><br><span class=\"line\">     |&lt;-------------------------------------------------------------|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\"></span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">| Gateway |                                                    | Server  |</span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">     |      ------------------------------------------------------\\ |</span><br><span class=\"line\">     |      | Anytime after first PULL_DATA for each packet to TX |-|</span><br><span class=\"line\">     |      ------------------------------------------------------- |</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     |                            PULL_RESP (token Z, JSON payload) |</span><br><span class=\"line\">     |&lt;-------------------------------------------------------------|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     | TX_ACK (token Z, JSON payload)                               |</span><br><span class=\"line\">     |-------------------------------------------------------------&gt;|</span><br></pre></td></tr></table></figure>\n<h2 id=\"PULL-DATA包\"><a href=\"#PULL-DATA包\" class=\"headerlink\" title=\"PULL_DATA包\"></a>PULL_DATA包</h2><p>网关使用该数据包类型来轮询来自服务器的数据。</p>\n<p>此数据交换由网关初始化，因为如果网关位于NAT后面，服务器可能无法将数据包发送到网关。 当网关初始化交换机时，将打开通向服务器的网络路由，并允许数据包在两个方向上流动。 网关必须定期发送PULL_DATA数据包，以确保网络路由保持打开状态，以便服务器随时使用。</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>random token</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PULL_DATA identifier 0x02</td>\n</tr>\n<tr>\n<td>4-11</td>\n<td>Gateway unique identifier (MAC address)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"PULL-ACK-包\"><a href=\"#PULL-ACK-包\" class=\"headerlink\" title=\"PULL_ACK 包\"></a><code>PULL_ACK</code> 包</h3><p>服务器使用该数据包类型来确认网络路由是否已打开，以及服务器是否可以随时发送PULL_RESP数据包。</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>same token as the PULL_DATA packet to acknowledge</td>\n</tr>\n<tr>\n<td>3</td>\n<td><code>PULL_ACK</code> identifier <code>0x04</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"PULL-RESP-包\"><a href=\"#PULL-RESP-包\" class=\"headerlink\" title=\"PULL_RESP 包\"></a>PULL_RESP 包</h3><p>服务器使用该数据包类型来发送必须由网关发出的RF数据包和相关元数据。</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>random token</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PULL_RESP identifier 0x03</td>\n</tr>\n<tr>\n<td>4-end</td>\n<td>JSON object, starting with {, ending with }, see section 6</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"TX-ACK-包\"><a href=\"#TX-ACK-包\" class=\"headerlink\" title=\"TX_ACK 包\"></a>TX_ACK 包</h3><p>网关使用该分组类型向服务器发送反馈，以通知网关是否已接受或拒绝下行链路请求。 数据报可以选项包含一个JSON字符串，以提供有关acknoledge的更多详细信息。 如果没有JSON（空字符串），这意味着没有发生错误。</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>same token as the PULL_RESP packet to acknowledge</td>\n</tr>\n<tr>\n<td>3</td>\n<td>TX_ACK identifier 0x05</td>\n</tr>\n<tr>\n<td>4-11</td>\n<td>Gateway unique identifier (MAC address)</td>\n</tr>\n<tr>\n<td>12-end</td>\n<td>[optional] JSON object, starting with {, ending with }, see section 6</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"下行JSON数据结构\"><a href=\"#下行JSON数据结构\" class=\"headerlink\" title=\"下行JSON数据结构\"></a>下行<code>JSON</code>数据结构</h2><hr>\n<p>PULL_RESP数据包的根对象必须包含名为“txpk”的对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;txpk&quot;: &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该对象包含要发出的RF数据包以及与以下字段相关联的元数据：</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>imme</td>\n<td>bool</td>\n<td>Send packet immediately (will ignore tmst &amp; time)</td>\n</tr>\n<tr>\n<td>tmst</td>\n<td>number</td>\n<td>Send packet on a certain timestamp value (will ignore time)</td>\n</tr>\n<tr>\n<td>time</td>\n<td>string</td>\n<td>Send packet at a certain time (GPS synchronization required)</td>\n</tr>\n<tr>\n<td>freq</td>\n<td>number</td>\n<td>TX central frequency in MHz (unsigned float, Hz precision)</td>\n</tr>\n<tr>\n<td>rfch</td>\n<td>number</td>\n<td>Concentrator “RF chain” used for TX (unsigned integer)</td>\n</tr>\n<tr>\n<td>powe</td>\n<td>number</td>\n<td>TX output power in dBm (unsigned integer, dBm precision)</td>\n</tr>\n<tr>\n<td>modu</td>\n<td>string</td>\n<td>Modulation identifier “LORA” or “FSK”</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>string</td>\n<td>LoRa datarate identifier (eg. SF12BW500)</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>number</td>\n<td>FSK datarate (unsigned, in bits per second)</td>\n</tr>\n<tr>\n<td>codr</td>\n<td>string</td>\n<td>LoRa ECC coding rate identifier</td>\n</tr>\n<tr>\n<td>fdev</td>\n<td>number</td>\n<td>FSK frequency deviation (unsigned integer, in Hz)</td>\n</tr>\n<tr>\n<td>ipol</td>\n<td>bool</td>\n<td>Lora modulation polarization inversion</td>\n</tr>\n<tr>\n<td>prea</td>\n<td>number</td>\n<td>RF preamble size (unsigned integer)</td>\n</tr>\n<tr>\n<td>size</td>\n<td>number</td>\n<td>RF packet payload size in bytes (unsigned integer)</td>\n</tr>\n<tr>\n<td>data</td>\n<td>string</td>\n<td>Base64 encoded RF packet payload, padding optional</td>\n</tr>\n<tr>\n<td>ncrc</td>\n<td>bool</td>\n<td>If true, disable the CRC of the physical layer (optional)</td>\n</tr>\n</tbody>\n</table>\n<p>大多数字段都是可选的。如果省略字段，将使用默认参数。 示例（为便于阅读而添加了空格，缩进和换行符）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;txpk&quot;:&#123;</span><br><span class=\"line\">\t&quot;imme&quot;:true,</span><br><span class=\"line\">\t&quot;freq&quot;:864.123456,</span><br><span class=\"line\">\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t&quot;powe&quot;:14,</span><br><span class=\"line\">\t&quot;modu&quot;:&quot;LORA&quot;,</span><br><span class=\"line\">\t&quot;datr&quot;:&quot;SF11BW125&quot;,</span><br><span class=\"line\">\t&quot;codr&quot;:&quot;4/6&quot;,</span><br><span class=\"line\">\t&quot;ipol&quot;:false,</span><br><span class=\"line\">\t&quot;size&quot;:32,</span><br><span class=\"line\">\t&quot;data&quot;:&quot;H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v&quot;</span><br><span class=\"line\">&#125;&#125;</span><br><span class=\"line\">&#123;&quot;txpk&quot;:&#123;</span><br><span class=\"line\">\t&quot;imme&quot;:true,</span><br><span class=\"line\">\t&quot;freq&quot;:861.3,</span><br><span class=\"line\">\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t&quot;powe&quot;:12,</span><br><span class=\"line\">\t&quot;modu&quot;:&quot;FSK&quot;,</span><br><span class=\"line\">\t&quot;datr&quot;:50000,</span><br><span class=\"line\">\t&quot;fdev&quot;:3000,</span><br><span class=\"line\">\t&quot;size&quot;:32,</span><br><span class=\"line\">\t&quot;data&quot;:&quot;H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v&quot;</span><br><span class=\"line\">&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>TX_ACK数据包的根对象必须包含名为“txpk_ack”的对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;txpk_ack&quot;: &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该对象包含有关相关PULL_RESP数据包的状态信息。</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>error</td>\n<td>string</td>\n<td>Indication about success or type of failure that occured for downlink request.</td>\n</tr>\n</tbody>\n</table>\n<p>可能的错误有：</p>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NONE</td>\n<td>Packet has been programmed for downlink</td>\n</tr>\n<tr>\n<td>TOO_LATE</td>\n<td>Rejected because it was already too late to program this packet for downlink</td>\n</tr>\n<tr>\n<td>TOO_EARLY</td>\n<td>Rejected because downlink packet timestamp is too much in advance</td>\n</tr>\n<tr>\n<td>COLLISION_PACKET</td>\n<td>Rejected because there was already a packet programmed in requested timeframe</td>\n</tr>\n<tr>\n<td>COLLISION_BEACON</td>\n<td>Rejected because there was already a beacon planned in requested timeframe</td>\n</tr>\n<tr>\n<td>TX_FREQ</td>\n<td>Rejected because requested frequency is not supported by TX RF chain</td>\n</tr>\n<tr>\n<td>TX_POWER</td>\n<td>Rejected because requested power is not supported by gateway</td>\n</tr>\n<tr>\n<td>GPS_UNLOCKED</td>\n<td>Rejected because GPS is unlocked, so GPS timestamp cannot be used</td>\n</tr>\n</tbody>\n</table>\n<p>示例（为便于阅读而添加了空格，缩进和换行符）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;txpk_ack&quot;:&#123;</span><br><span class=\"line\">\t&quot;error&quot;:&quot;COLLISION_PACKET&quot;</span><br><span class=\"line\">&#125;&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>网关和服务器之间的协议是有目的的非常基本的，仅用于演示目的，或用于私有和可靠的网络。</p>\n<p>这里没有网关或服务器的认证，并且确认仅用于网络质量评估，而不是 纠正UDP数据报丢失（无重试）。</p>\n<h1 id=\"系统原理和相关定义\"><a href=\"#系统原理和相关定义\" class=\"headerlink\" title=\"系统原理和相关定义\"></a>系统原理和相关定义</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ((( Y )))</span><br><span class=\"line\">     |</span><br><span class=\"line\">     |</span><br><span class=\"line\">+ - -|- - - - - - - - - - - - - +        xxxxxxxxxxxx          +--------+</span><br><span class=\"line\">| +--+-----------+     +------+ |       xx x  x     xxx        |        |</span><br><span class=\"line\">| |              |     |      | |      xx  Internet  xx        |        |</span><br><span class=\"line\">| | Concentrator |&lt;---&gt;| Host |&lt;-------xx     or    xx--------&gt;|        |</span><br><span class=\"line\">| |              | SPI |      | |      xx  Intranet  xx        | Server |</span><br><span class=\"line\">| +--------------+     +------+ |       xxxx   x   xxxx        |        |</span><br><span class=\"line\">|    ^                     ^    |           xxxxxxxx           |        |</span><br><span class=\"line\">|    | PPS +-------+ NMEA  |    |                              |        |</span><br><span class=\"line\">|    +-----|  GPS  |-------+    |                              +--------+</span><br><span class=\"line\">|          | (opt) |            |</span><br><span class=\"line\">|          +-------+            |</span><br><span class=\"line\">|                               |</span><br><span class=\"line\">|             Gateway           |</span><br><span class=\"line\">+- - - - - - - - - - - - - - - -+</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>网关</strong>：无线电RX / TX板，基于Semtech多通道调制解调器（SX130x），收发器（SX135x）和/或低功耗独立调制解调器（SX127x）。</li>\n<li><strong>主机</strong>：运行包转发器的嵌入式计算机。通过SPI链路驱动集中器。 GPS：具有“每秒1脉冲”的GNSS（GPS，伽利略，GLONASS等）接收器 输出和到主机的串行链接，以发送包含时间和地理坐标数据的NMEA帧。可选的。</li>\n<li><strong>网关</strong>：由至少一个无线电集中器，主机，一些组成的设备网络连接到互联网或专用网络（以太网，3G，Wifi，微波链路），以及可选的GPS接收器进行同步。</li>\n<li><strong>服务器</strong>：一种抽象计算机，它将处理由网关接收和转发的RF数据包，并发出RF数据包以响应网关必须发出的数据包。</li>\n</ul>\n<p>假设网关可以在NAT后面或防火墙停止任何传入连接。 假设服务器具有静态IP地址（或通过DNS服务可解决的地址），并且能够接收特定端口上的传入连接。</p>\n<h1 id=\"上行协议\"><a href=\"#上行协议\" class=\"headerlink\" title=\"上行协议\"></a>上行协议</h1><p>3.1 时序图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">| Gateway |                                                    | Server  |</span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">     | -----------------------------------\\                         |</span><br><span class=\"line\">     |-| When 1-N RF packets are received |                         |</span><br><span class=\"line\">     | ------------------------------------                         |</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     | PUSH_DATA (token X, GW MAC, JSON payload)                    |</span><br><span class=\"line\">     |-------------------------------------------------------------&gt;|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     |                                           PUSH_ACK (token X) |</span><br><span class=\"line\">     |&lt;-------------------------------------------------------------|</span><br><span class=\"line\">     |                              ------------------------------\\ |</span><br><span class=\"line\">     |                              | process packets *after* ack |-|</span><br><span class=\"line\">     |                              ------------------------------- |</span><br><span class=\"line\">     |                                                              |</span><br></pre></td></tr></table></figure>\n<h2 id=\"PUSH-DATA-包\"><a href=\"#PUSH-DATA-包\" class=\"headerlink\" title=\"PUSH_DATA 包\"></a><code>PUSH_DATA</code> 包</h2><p>网关使用该数据包类型主要是将所接收的RF分组和相关联的元数据转发到服务器。</p>\n<table>\n<thead>\n<tr>\n<th>字节</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>协议版本2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>随机凭证</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PUSH_DATA标识<code>0x00</code></td>\n</tr>\n<tr>\n<td>4-11</td>\n<td>网关唯一标识（MAC地址）</td>\n</tr>\n<tr>\n<td>12-结束</td>\n<td><code>JSON</code>对象，看第4章</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"PUSH-ACK包\"><a href=\"#PUSH-ACK包\" class=\"headerlink\" title=\"PUSH_ACK包\"></a><code>PUSH_ACK</code>包</h2><p>服务器使用该数据包类型立即确认收到的所有PUSH_DATA数据包。</p>\n<table>\n<thead>\n<tr>\n<th>字节</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>协议版本2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>与<code>PUSH_DATA</code>包中相同的凭证，用于确认</td>\n</tr>\n<tr>\n<td>3</td>\n<td><code>PUSH_ACK</code>标识<code>0x01</code></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"上行JSON数据结构\"><a href=\"#上行JSON数据结构\" class=\"headerlink\" title=\"上行JSON数据结构\"></a>上行<code>JSON</code>数据结构</h1><p>根对象包含名为<code>&quot;rxpk&quot;</code>的数组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;rxpk&quot;:[ &#123;...&#125;, ...]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该数组包含至少一个<code>JSON</code>对象，每个对象包含一个RF数据包以及包含以下字段的关联元数据：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>类别</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>time</td>\n<td>string</td>\n<td>UTC time of pkt RX, us precision, ISO 8601 ‘compact’ format</td>\n</tr>\n<tr>\n<td>tmst</td>\n<td>number</td>\n<td>Internal timestamp of “RX finished” event (32b unsigned)</td>\n</tr>\n<tr>\n<td>freq</td>\n<td>number</td>\n<td>RX central frequency in MHz (unsigned float, Hz precision)</td>\n</tr>\n<tr>\n<td>chan</td>\n<td>number</td>\n<td>Concentrator “IF” channel used for RX (unsigned integer)</td>\n</tr>\n<tr>\n<td>rfch</td>\n<td>number</td>\n<td>Concentrator “RF chain” used for RX (unsigned integer)</td>\n</tr>\n<tr>\n<td>stat</td>\n<td>number</td>\n<td>CRC status: 1 = OK, -1 = fail, 0 = no CRC</td>\n</tr>\n<tr>\n<td>modu</td>\n<td>string</td>\n<td>Modulation identifier “LORA” or “FSK”</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>string</td>\n<td>LoRa datarate identifier (eg. SF12BW500)</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>number</td>\n<td>FSK datarate (unsigned, in bits per second)</td>\n</tr>\n<tr>\n<td>codr</td>\n<td>string</td>\n<td>LoRa ECC coding rate identifier</td>\n</tr>\n<tr>\n<td>rssi</td>\n<td>number</td>\n<td>RSSI in dBm (signed integer, 1 dB precision)</td>\n</tr>\n<tr>\n<td>lsnr</td>\n<td>number</td>\n<td>Lora SNR ratio in dB (signed float, 0.1 dB precision)</td>\n</tr>\n<tr>\n<td>size</td>\n<td>number</td>\n<td>RF packet payload size in bytes (unsigned integer)</td>\n</tr>\n<tr>\n<td>data</td>\n<td>string</td>\n<td>Base64 encoded RF packet payload, padded</td>\n</tr>\n</tbody>\n</table>\n<p>示例（为了便于阅读而添加了空格，缩进和换行符）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;rxpk&quot;:[</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t&quot;time&quot;:&quot;2013-03-31T16:21:17.528002Z&quot;,</span><br><span class=\"line\">\t\t&quot;tmst&quot;:3512348611,</span><br><span class=\"line\">\t\t&quot;chan&quot;:2,</span><br><span class=\"line\">\t\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t\t&quot;freq&quot;:866.349812,</span><br><span class=\"line\">\t\t&quot;stat&quot;:1,</span><br><span class=\"line\">\t\t&quot;modu&quot;:&quot;LORA&quot;,</span><br><span class=\"line\">\t\t&quot;datr&quot;:&quot;SF7BW125&quot;,</span><br><span class=\"line\">\t\t&quot;codr&quot;:&quot;4/6&quot;,</span><br><span class=\"line\">\t\t&quot;rssi&quot;:-35,</span><br><span class=\"line\">\t\t&quot;lsnr&quot;:5.1,</span><br><span class=\"line\">\t\t&quot;size&quot;:32,</span><br><span class=\"line\">\t\t&quot;data&quot;:&quot;-DS4CGaDCdG+48eJNM3Vai-zDpsR71Pn9CPA9uCON84&quot;</span><br><span class=\"line\">\t&#125;,&#123;</span><br><span class=\"line\">\t\t&quot;time&quot;:&quot;2013-03-31T16:21:17.530974Z&quot;,</span><br><span class=\"line\">\t\t&quot;tmst&quot;:3512348514,</span><br><span class=\"line\">\t\t&quot;chan&quot;:9,</span><br><span class=\"line\">\t\t&quot;rfch&quot;:1,</span><br><span class=\"line\">\t\t&quot;freq&quot;:869.1,</span><br><span class=\"line\">\t\t&quot;stat&quot;:1,</span><br><span class=\"line\">\t\t&quot;modu&quot;:&quot;FSK&quot;,</span><br><span class=\"line\">\t\t&quot;datr&quot;:50000,</span><br><span class=\"line\">\t\t&quot;rssi&quot;:-75,</span><br><span class=\"line\">\t\t&quot;size&quot;:16,</span><br><span class=\"line\">\t\t&quot;data&quot;:&quot;VEVTVF9QQUNLRVRfMTIzNA==&quot;</span><br><span class=\"line\">\t&#125;,&#123;</span><br><span class=\"line\">\t\t&quot;time&quot;:&quot;2013-03-31T16:21:17.532038Z&quot;,</span><br><span class=\"line\">\t\t&quot;tmst&quot;:3316387610,</span><br><span class=\"line\">\t\t&quot;chan&quot;:0,</span><br><span class=\"line\">\t\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t\t&quot;freq&quot;:863.00981,</span><br><span class=\"line\">\t\t&quot;stat&quot;:1,</span><br><span class=\"line\">\t\t&quot;modu&quot;:&quot;LORA&quot;,</span><br><span class=\"line\">\t\t&quot;datr&quot;:&quot;SF10BW125&quot;,</span><br><span class=\"line\">\t\t&quot;codr&quot;:&quot;4/7&quot;,</span><br><span class=\"line\">\t\t&quot;rssi&quot;:-38,</span><br><span class=\"line\">\t\t&quot;lsnr&quot;:5.5,</span><br><span class=\"line\">\t\t&quot;size&quot;:32,</span><br><span class=\"line\">\t\t&quot;data&quot;:&quot;ysgRl452xNLep9S1NTIg2lomKDxUgn3DJ7DE+b00Ass&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">]&#125;</span><br></pre></td></tr></table></figure>\n<p>根对象还可以包含名为<code>&quot;stat&quot;</code>的对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;rxpk&quot;:[ &#123;...&#125;, ...],</span><br><span class=\"line\">\t&quot;stat&quot;:&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>数据包可能不包含<code>&quot;rxpk&quot;</code>数组而是“stat”对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;stat&quot;:&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该对象包含网关的状态，包含以下字段：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>类型</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>time</td>\n<td>string</td>\n<td>UTC ‘system’ time of the gateway, ISO 8601 ‘expanded’ format</td>\n</tr>\n<tr>\n<td>lati</td>\n<td>number</td>\n<td>GPS latitude of the gateway in degree (float, N is +)</td>\n</tr>\n<tr>\n<td>long</td>\n<td>number</td>\n<td>GPS latitude of the gateway in degree (float, E is +)</td>\n</tr>\n<tr>\n<td>alti</td>\n<td>number</td>\n<td>GPS altitude of the gateway in meter RX (integer)</td>\n</tr>\n<tr>\n<td>rxnb</td>\n<td>number</td>\n<td>Number of radio packets received (unsigned integer)</td>\n</tr>\n<tr>\n<td>rxok</td>\n<td>number</td>\n<td>Number of radio packets received with a valid PHY CRC</td>\n</tr>\n<tr>\n<td>rxfw</td>\n<td>number</td>\n<td>Number of radio packets forwarded (unsigned integer)</td>\n</tr>\n<tr>\n<td>ackr</td>\n<td>number</td>\n<td>Percentage of upstream datagrams that were acknowledged</td>\n</tr>\n<tr>\n<td>dwnb</td>\n<td>number</td>\n<td>Number of downlink datagrams received (unsigned integer)</td>\n</tr>\n<tr>\n<td>txnb</td>\n<td>number</td>\n<td>Number of packets emitted (unsigned integer)</td>\n</tr>\n</tbody>\n</table>\n<p>示例（为了便于阅读而添加了空格，缩进和换行符）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;stat&quot;:&#123;</span><br><span class=\"line\">\t&quot;time&quot;:&quot;2014-01-12 08:59:28 GMT&quot;,</span><br><span class=\"line\">\t&quot;lati&quot;:46.24000,</span><br><span class=\"line\">\t&quot;long&quot;:3.25230,</span><br><span class=\"line\">\t&quot;alti&quot;:145,</span><br><span class=\"line\">\t&quot;rxnb&quot;:2,</span><br><span class=\"line\">\t&quot;rxok&quot;:2,</span><br><span class=\"line\">\t&quot;rxfw&quot;:2,</span><br><span class=\"line\">\t&quot;ackr&quot;:100.0,</span><br><span class=\"line\">\t&quot;dwnb&quot;:2,</span><br><span class=\"line\">\t&quot;txnb&quot;:2</span><br><span class=\"line\">&#125;&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"下行协议\"><a href=\"#下行协议\" class=\"headerlink\" title=\"下行协议\"></a>下行协议</h1><h2 id=\"时序图\"><a href=\"#时序图\" class=\"headerlink\" title=\"时序图\"></a>时序图</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">| Gateway |                                                    | Server  |</span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">     | -----------------------------------\\                         |</span><br><span class=\"line\">     |-| Every N seconds (keepalive time) |                         |</span><br><span class=\"line\">     | ------------------------------------                         |</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     | PULL_DATA (token Y, MAC@)                                    |</span><br><span class=\"line\">     |-------------------------------------------------------------&gt;|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     |                                           PULL_ACK (token Y) |</span><br><span class=\"line\">     |&lt;-------------------------------------------------------------|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\"></span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">| Gateway |                                                    | Server  |</span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">     |      ------------------------------------------------------\\ |</span><br><span class=\"line\">     |      | Anytime after first PULL_DATA for each packet to TX |-|</span><br><span class=\"line\">     |      ------------------------------------------------------- |</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     |                            PULL_RESP (token Z, JSON payload) |</span><br><span class=\"line\">     |&lt;-------------------------------------------------------------|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     | TX_ACK (token Z, JSON payload)                               |</span><br><span class=\"line\">     |-------------------------------------------------------------&gt;|</span><br></pre></td></tr></table></figure>\n<h2 id=\"PULL-DATA包\"><a href=\"#PULL-DATA包\" class=\"headerlink\" title=\"PULL_DATA包\"></a>PULL_DATA包</h2><p>网关使用该数据包类型来轮询来自服务器的数据。</p>\n<p>此数据交换由网关初始化，因为如果网关位于NAT后面，服务器可能无法将数据包发送到网关。 当网关初始化交换机时，将打开通向服务器的网络路由，并允许数据包在两个方向上流动。 网关必须定期发送PULL_DATA数据包，以确保网络路由保持打开状态，以便服务器随时使用。</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>random token</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PULL_DATA identifier 0x02</td>\n</tr>\n<tr>\n<td>4-11</td>\n<td>Gateway unique identifier (MAC address)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"PULL-ACK-包\"><a href=\"#PULL-ACK-包\" class=\"headerlink\" title=\"PULL_ACK 包\"></a><code>PULL_ACK</code> 包</h3><p>服务器使用该数据包类型来确认网络路由是否已打开，以及服务器是否可以随时发送PULL_RESP数据包。</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>same token as the PULL_DATA packet to acknowledge</td>\n</tr>\n<tr>\n<td>3</td>\n<td><code>PULL_ACK</code> identifier <code>0x04</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"PULL-RESP-包\"><a href=\"#PULL-RESP-包\" class=\"headerlink\" title=\"PULL_RESP 包\"></a>PULL_RESP 包</h3><p>服务器使用该数据包类型来发送必须由网关发出的RF数据包和相关元数据。</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>random token</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PULL_RESP identifier 0x03</td>\n</tr>\n<tr>\n<td>4-end</td>\n<td>JSON object, starting with {, ending with }, see section 6</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"TX-ACK-包\"><a href=\"#TX-ACK-包\" class=\"headerlink\" title=\"TX_ACK 包\"></a>TX_ACK 包</h3><p>网关使用该分组类型向服务器发送反馈，以通知网关是否已接受或拒绝下行链路请求。 数据报可以选项包含一个JSON字符串，以提供有关acknoledge的更多详细信息。 如果没有JSON（空字符串），这意味着没有发生错误。</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>same token as the PULL_RESP packet to acknowledge</td>\n</tr>\n<tr>\n<td>3</td>\n<td>TX_ACK identifier 0x05</td>\n</tr>\n<tr>\n<td>4-11</td>\n<td>Gateway unique identifier (MAC address)</td>\n</tr>\n<tr>\n<td>12-end</td>\n<td>[optional] JSON object, starting with {, ending with }, see section 6</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"下行JSON数据结构\"><a href=\"#下行JSON数据结构\" class=\"headerlink\" title=\"下行JSON数据结构\"></a>下行<code>JSON</code>数据结构</h2><hr>\n<p>PULL_RESP数据包的根对象必须包含名为“txpk”的对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;txpk&quot;: &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该对象包含要发出的RF数据包以及与以下字段相关联的元数据：</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>imme</td>\n<td>bool</td>\n<td>Send packet immediately (will ignore tmst &amp; time)</td>\n</tr>\n<tr>\n<td>tmst</td>\n<td>number</td>\n<td>Send packet on a certain timestamp value (will ignore time)</td>\n</tr>\n<tr>\n<td>time</td>\n<td>string</td>\n<td>Send packet at a certain time (GPS synchronization required)</td>\n</tr>\n<tr>\n<td>freq</td>\n<td>number</td>\n<td>TX central frequency in MHz (unsigned float, Hz precision)</td>\n</tr>\n<tr>\n<td>rfch</td>\n<td>number</td>\n<td>Concentrator “RF chain” used for TX (unsigned integer)</td>\n</tr>\n<tr>\n<td>powe</td>\n<td>number</td>\n<td>TX output power in dBm (unsigned integer, dBm precision)</td>\n</tr>\n<tr>\n<td>modu</td>\n<td>string</td>\n<td>Modulation identifier “LORA” or “FSK”</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>string</td>\n<td>LoRa datarate identifier (eg. SF12BW500)</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>number</td>\n<td>FSK datarate (unsigned, in bits per second)</td>\n</tr>\n<tr>\n<td>codr</td>\n<td>string</td>\n<td>LoRa ECC coding rate identifier</td>\n</tr>\n<tr>\n<td>fdev</td>\n<td>number</td>\n<td>FSK frequency deviation (unsigned integer, in Hz)</td>\n</tr>\n<tr>\n<td>ipol</td>\n<td>bool</td>\n<td>Lora modulation polarization inversion</td>\n</tr>\n<tr>\n<td>prea</td>\n<td>number</td>\n<td>RF preamble size (unsigned integer)</td>\n</tr>\n<tr>\n<td>size</td>\n<td>number</td>\n<td>RF packet payload size in bytes (unsigned integer)</td>\n</tr>\n<tr>\n<td>data</td>\n<td>string</td>\n<td>Base64 encoded RF packet payload, padding optional</td>\n</tr>\n<tr>\n<td>ncrc</td>\n<td>bool</td>\n<td>If true, disable the CRC of the physical layer (optional)</td>\n</tr>\n</tbody>\n</table>\n<p>大多数字段都是可选的。如果省略字段，将使用默认参数。 示例（为便于阅读而添加了空格，缩进和换行符）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;txpk&quot;:&#123;</span><br><span class=\"line\">\t&quot;imme&quot;:true,</span><br><span class=\"line\">\t&quot;freq&quot;:864.123456,</span><br><span class=\"line\">\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t&quot;powe&quot;:14,</span><br><span class=\"line\">\t&quot;modu&quot;:&quot;LORA&quot;,</span><br><span class=\"line\">\t&quot;datr&quot;:&quot;SF11BW125&quot;,</span><br><span class=\"line\">\t&quot;codr&quot;:&quot;4/6&quot;,</span><br><span class=\"line\">\t&quot;ipol&quot;:false,</span><br><span class=\"line\">\t&quot;size&quot;:32,</span><br><span class=\"line\">\t&quot;data&quot;:&quot;H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v&quot;</span><br><span class=\"line\">&#125;&#125;</span><br><span class=\"line\">&#123;&quot;txpk&quot;:&#123;</span><br><span class=\"line\">\t&quot;imme&quot;:true,</span><br><span class=\"line\">\t&quot;freq&quot;:861.3,</span><br><span class=\"line\">\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t&quot;powe&quot;:12,</span><br><span class=\"line\">\t&quot;modu&quot;:&quot;FSK&quot;,</span><br><span class=\"line\">\t&quot;datr&quot;:50000,</span><br><span class=\"line\">\t&quot;fdev&quot;:3000,</span><br><span class=\"line\">\t&quot;size&quot;:32,</span><br><span class=\"line\">\t&quot;data&quot;:&quot;H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v&quot;</span><br><span class=\"line\">&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>TX_ACK数据包的根对象必须包含名为“txpk_ack”的对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;txpk_ack&quot;: &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该对象包含有关相关PULL_RESP数据包的状态信息。</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>error</td>\n<td>string</td>\n<td>Indication about success or type of failure that occured for downlink request.</td>\n</tr>\n</tbody>\n</table>\n<p>可能的错误有：</p>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NONE</td>\n<td>Packet has been programmed for downlink</td>\n</tr>\n<tr>\n<td>TOO_LATE</td>\n<td>Rejected because it was already too late to program this packet for downlink</td>\n</tr>\n<tr>\n<td>TOO_EARLY</td>\n<td>Rejected because downlink packet timestamp is too much in advance</td>\n</tr>\n<tr>\n<td>COLLISION_PACKET</td>\n<td>Rejected because there was already a packet programmed in requested timeframe</td>\n</tr>\n<tr>\n<td>COLLISION_BEACON</td>\n<td>Rejected because there was already a beacon planned in requested timeframe</td>\n</tr>\n<tr>\n<td>TX_FREQ</td>\n<td>Rejected because requested frequency is not supported by TX RF chain</td>\n</tr>\n<tr>\n<td>TX_POWER</td>\n<td>Rejected because requested power is not supported by gateway</td>\n</tr>\n<tr>\n<td>GPS_UNLOCKED</td>\n<td>Rejected because GPS is unlocked, so GPS timestamp cannot be used</td>\n</tr>\n</tbody>\n</table>\n<p>示例（为便于阅读而添加了空格，缩进和换行符）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;txpk_ack&quot;:&#123;</span><br><span class=\"line\">\t&quot;error&quot;:&quot;COLLISION_PACKET&quot;</span><br><span class=\"line\">&#125;&#125;</span><br></pre></td></tr></table></figure>"},{"title":"npm版本管理","date":"2019-10-29T06:08:30.000Z","_content":"\n在打包项目的时候，我们都要更新package.json的版本号，接着给给代码添加tag，最后push代码，这样的流程泰国麻烦有什么方法简化。\n\n```\n1. package.json`中修改递增`version\n2. git add -A\n3. git commit -m \"update version\"\n4. git push\n5. git tag <tag version>\n6. git push --tag\n7. npm publish\n```\n\n# 解决方法\n\n我们可以使用`npm version`命令，从[文档](https://docs.npmjs.com/cli/version)上我们可以看到其依据[semver](https://semver.org/lang/zh-CN/)支持了大部分alias：\n\n```bash\nnpm version [<newversion> | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]\n```\n\n> 例：初始版本为1.0.0\n>\n> `npm version prepatch`  //预备补丁版本号 v1.0.1-0\n>\n> `npm version prerelease`  //预发布版本号 v1.0.1-1\n>\n> `npm version patch` //补丁版本号 v1.0.2\n>\n> `npm version preminor` //预备次版本号 v1.1.0-0\n>\n> `npm version minor` //次版本号 v1.1.0\n>\n> `npm version premajor` //预备主版本号 v2.0.0-0\n>\n> `npm version major` //主版本号 v2.0.0\n\n当在仓库中执行`npm version时`，会自动提交`git commit`并打上`git tag`。\n\n> 当使用`-m`参数时，就可以自定义发布版本的信息，其中`%s`可以用来代替当前版本号\n>\n> ```\n> npm version patch -m \"upgrade to %s for reasons\"\n> 复制代码\n> ```\n\n这样以后版本迭代只需要以下步骤\n\n- `npm version patch | minor | major | ...etc`\n- `git push`\n- `git push --tag`\n- `npm publish`\n\nnpm version会同时创建时 `v版本号` 形式的tag，将tag push上去就可以自动触发构建了。\n\n也可以简化这步操作，在npm version操作后自动 push\n\n在 package.json中加入下面的代码，即可实现npm version操作后，自动push代码及tag，也就自动触发了 npm 发布操作。\n\n```json\n  \"scripts\": {\n    \"postversion\": \"git push --follow-tags\"\n  }\n```\n\n# 衍生问题\n\n> 如何发布beta，rc，alpha版本呢？如果发布了，应该如何安装？\n\n#### 解决方案\n\n首先我们要理解这些版本的含义\n\n- alpha：内部测试版本\n- beta： 公开测试版本\n- rc： 候选版本（Release Candidate）\n\n然后将`package.json`的`version`改成`x.x.x-beta`\n\n配合`npm publish --tag <tag>`，我们可以发布对应的`dist-tag`\n\n> 举个例子：\n>\n> 使用`npm publish --tag beta`发布后，然后就可以使用`npm install <pkg>@beta`安装对应版本的包。\n\n我们可以通过`npm dist-tag ls <pkg>`来查看包的`dist-tag`\n\n```json\n{\n    latest: 1.0.1, // 这就是npm publish默认发布的tag\n    beta: 1.0.1-beta\n}\n```\n\n当我们的beta版本稳定后，可以使用`npm dist-tag add x.x.x-beta latest`设置为稳定版本。\n\n# npm version与npm dist-tag\n\n关于npm version prerelease的作用我这里不再赘述，你可以查看[这个文章](https://github.com/liangklfangl/npm-dist-tag/blob/master/NPM%E6%A8%A1%E5%9D%97%E7%9A%84TAG%E7%AE%A1%E7%90%86)。我只是记录一下关于npm version与npm dist-tag的使用：\n\n第一步：发布第一个稳定版本\n\n```\n npm publish//1.0.0\n```\n\n第二步：修改文件继续发布第二个版本\n\n```\ngit add -A && git commit -m \"c\"\nnpm version patch\nnpm publish//1.0.1\n```\n\n第三步：继续修改文件发布一个prerelease版本\n\n```\n git add -A && git commit -m \"c\"\n npm version prerelease\n npm publish --tag -beta//版本n-n-n-n@1.0.2-0\n```\n\n第四步：继续修改发布第二个prerelease版本\n\n```\ngit add -A && git commit -m \"c\"\nnpm version prerelease\nnpm publish --tag -beta//版本n-n-n-n@1.0.2-1\n```\n\n第五步：npm info查看我们的版本信息\n\n```json\n{ name: 'n-n-n-n',\n  'dist-tags': { latest: '1.0.1', '-beta': '1.0.2-1' },\n  versions: [ '1.0.0', '1.0.1', '1.0.2-0', '1.0.2-1' ],\n  maintainers: [ 'liangklfang <liangklfang@163.com>' ],\n  time:\n   { modified: '2017-04-01T12:17:56.755Z',\n     created: '2017-04-01T12:15:23.605Z',\n     '1.0.0': '2017-04-01T12:15:23.605Z',\n     '1.0.1': '2017-04-01T12:16:24.916Z',\n     '1.0.2-0': '2017-04-01T12:17:23.354Z',\n     '1.0.2-1': '2017-04-01T12:17:56.755Z' },\n  homepage: 'https://github.com/liangklfang/n#readme',\n  repository: { type: 'git', url: 'git+https://github.com/liangklfang/n.git' },\n  bugs: { url: 'https://github.com/liangklfang/n/issues' },\n  license: 'ISC',\n  readmeFilename: 'README.md',\n  version: '1.0.1',\n  description: '',\n  main: 'index.js',\n  scripts: { test: 'echo \"Error: no test specified\" && exit 1' },\n  author: '',\n  gitHead: '8123b8addf6fed83c4c5edead1dc2614241a4479',\n  dist:\n   { shasum: 'a60d8b02222e4cae74e91b69b316a5b173d2ac9d',\n     tarball: 'https://registry.npmjs.org/n-n-n-n/-/n-n-n-n-1.0.1.tgz' },\n  directories: {} }\n```\n\n我们只要注意下面者两个部分：\n\n```\n 'dist-tags': { latest: '1.0.1', '-beta': '1.0.2-1' },\n  versions: [ '1.0.0', '1.0.1', '1.0.2-0', '1.0.2-1' ],\n```\n\n其中最新的稳定版本和最新的beta版本可以在dist-tags中看到，而versions数组中存储的是所有的版本。\n\n第六步：npm dist-tag命令\n\n```\nnpm dist-tag ls n-n-n-n\n```\n\n即npm dist-tag获取到所有的最新的版本，包括prerelease与稳定版本，得到下面结果：\n\n```\n-beta: 1.0.2-1\nlatest: 1.0.1\n```\n\n第七步：当我们的prerelease版本已经稳定了，重新设置为稳定版本\n\n```\nnpm dist-tag add n-n-n-n@1.0.2-1 latest\n```\n\n此时你通过npm info查看可以知道：\n\n```json\n{ name: 'n-n-n-n',\n  'dist-tags': { latest: '1.0.2-1', '-beta': '1.0.2-1' },\n  versions: [ '1.0.0', '1.0.1', '1.0.2-0', '1.0.2-1' ],\n  maintainers: [ 'liangklfang <liangklfang@163.com>' ],\n  time:\n   { modified: '2017-04-01T12:24:55.800Z',\n     created: '2017-04-01T12:15:23.605Z',\n     '1.0.0': '2017-04-01T12:15:23.605Z',\n     '1.0.1': '2017-04-01T12:16:24.916Z',\n     '1.0.2-0': '2017-04-01T12:17:23.354Z',\n     '1.0.2-1': '2017-04-01T12:17:56.755Z' },\n  homepage: 'https://github.com/liangklfang/n#readme',\n  repository: { type: 'git', url: 'git+https://github.com/liangklfang/n.git' },\n  bugs: { url: 'https://github.com/liangklfang/n/issues' },\n  license: 'ISC',\n  readmeFilename: 'README.md',\n  version: '1.0.2-1',\n  description: '',\n  main: 'index.js',\n  scripts: { test: 'echo \"Error: no test specified\" && exit 1' },\n  author: '',\n  gitHead: '03189d2cc61604aa05f4b93e429d3caa3b637f8c',\n  dist:\n   { shasum: '41ea170a6b155c8d61658cd4c309f0d5d1b12ced',\n     tarball: 'https://registry.npmjs.org/n-n-n-n/-/n-n-n-n-1.0.2-1.tgz' },\n  directories: {} }\n```\n\n主要关注如下:\n\n```\n 'dist-tags': { latest: '1.0.2-1', '-beta': '1.0.2-1' },\n  versions: [ '1.0.0', '1.0.1', '1.0.2-0', '1.0.2-1' ]\n```\n\n此时latest版本已经是prerelease版本\"1.0.2-1\"了！此时用户如果直接运行npm install就会安装我们的prerelease版本了，因为版本已经更新了！\n\n当然，我们的npm publish可以有很多tag的，比如上面是beta，也可以是stable, dev, canary等，比如下面你继续运行：\n\n```\n git add -A && git commit -m \"c\"\n npm version prerelease\n npm publish --tag -dev\n```\n\n此时你运行npm info就会得到下面的信息：\n\n```\n{ name: 'n-n-n-n',\n  'dist-tags': { latest: '1.0.2-1', '-beta': '1.0.2-1', '-dev': '1.0.2-2' },\n  versions: [ '1.0.0', '1.0.1', '1.0.2-0', '1.0.2-1', '1.0.2-2' ],\n  maintainers: [ 'liangklfang <liangklfang@163.com>' ],\n  time:\n   { modified: '2017-04-01T13:01:17.106Z',\n     created: '2017-04-01T12:15:23.605Z',\n     '1.0.0': '2017-04-01T12:15:23.605Z',\n     '1.0.1': '2017-04-01T12:16:24.916Z',\n     '1.0.2-0': '2017-04-01T12:17:23.354Z',\n     '1.0.2-1': '2017-04-01T12:17:56.755Z',\n     '1.0.2-2': '2017-04-01T13:01:17.106Z' },\n  homepage: 'https://github.com/liangklfang/n#readme',\n  repository: { type: 'git', url: 'git+https://github.com/liangklfang/n.git' },\n  bugs: { url: 'https://github.com/liangklfang/n/issues' },\n  license: 'ISC',\n  readmeFilename: 'README.md',\n  version: '1.0.2-1',\n  description: '',\n  main: 'index.js',\n  scripts: { test: 'echo \"Error: no test specified\" && exit 1' },\n  author: '',\n  gitHead: '03189d2cc61604aa05f4b93e429d3caa3b637f8c',\n  dist:\n   { shasum: '41ea170a6b155c8d61658cd4c309f0d5d1b12ced',\n     tarball: 'https://registry.npmjs.org/n-n-n-n/-/n-n-n-n-1.0.2-1.tgz' },\n  directories: {} }\n```\n\n重点关注如下内容\n\n```\n 'dist-tags': { latest: '1.0.2-1', '-beta': '1.0.2-1', '-dev': '1.0.2-2' },\n  versions: [ '1.0.0', '1.0.1', '1.0.2-0', '1.0.2-1', '1.0.2-2' ],\n```\n\n此时你会看到-beta版本最新是1.0.2-1，而-dev版本最新是1.0.2-2\n\n# 参考\n\n> <https://github.com/liangklfangl/npm-dist-tag>\n>\n> <https://juejin.im/post/5b624d42f265da0fa1223ffa>\n>\n> <https://docs.npmjs.com/cli/version>\n\n","source":"_posts/npm版本管理.md","raw":"---\ntitle: npm版本管理\ndate: 2019-10-29 14:08:30\ntags:\n- node\n---\n\n在打包项目的时候，我们都要更新package.json的版本号，接着给给代码添加tag，最后push代码，这样的流程泰国麻烦有什么方法简化。\n\n```\n1. package.json`中修改递增`version\n2. git add -A\n3. git commit -m \"update version\"\n4. git push\n5. git tag <tag version>\n6. git push --tag\n7. npm publish\n```\n\n# 解决方法\n\n我们可以使用`npm version`命令，从[文档](https://docs.npmjs.com/cli/version)上我们可以看到其依据[semver](https://semver.org/lang/zh-CN/)支持了大部分alias：\n\n```bash\nnpm version [<newversion> | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]\n```\n\n> 例：初始版本为1.0.0\n>\n> `npm version prepatch`  //预备补丁版本号 v1.0.1-0\n>\n> `npm version prerelease`  //预发布版本号 v1.0.1-1\n>\n> `npm version patch` //补丁版本号 v1.0.2\n>\n> `npm version preminor` //预备次版本号 v1.1.0-0\n>\n> `npm version minor` //次版本号 v1.1.0\n>\n> `npm version premajor` //预备主版本号 v2.0.0-0\n>\n> `npm version major` //主版本号 v2.0.0\n\n当在仓库中执行`npm version时`，会自动提交`git commit`并打上`git tag`。\n\n> 当使用`-m`参数时，就可以自定义发布版本的信息，其中`%s`可以用来代替当前版本号\n>\n> ```\n> npm version patch -m \"upgrade to %s for reasons\"\n> 复制代码\n> ```\n\n这样以后版本迭代只需要以下步骤\n\n- `npm version patch | minor | major | ...etc`\n- `git push`\n- `git push --tag`\n- `npm publish`\n\nnpm version会同时创建时 `v版本号` 形式的tag，将tag push上去就可以自动触发构建了。\n\n也可以简化这步操作，在npm version操作后自动 push\n\n在 package.json中加入下面的代码，即可实现npm version操作后，自动push代码及tag，也就自动触发了 npm 发布操作。\n\n```json\n  \"scripts\": {\n    \"postversion\": \"git push --follow-tags\"\n  }\n```\n\n# 衍生问题\n\n> 如何发布beta，rc，alpha版本呢？如果发布了，应该如何安装？\n\n#### 解决方案\n\n首先我们要理解这些版本的含义\n\n- alpha：内部测试版本\n- beta： 公开测试版本\n- rc： 候选版本（Release Candidate）\n\n然后将`package.json`的`version`改成`x.x.x-beta`\n\n配合`npm publish --tag <tag>`，我们可以发布对应的`dist-tag`\n\n> 举个例子：\n>\n> 使用`npm publish --tag beta`发布后，然后就可以使用`npm install <pkg>@beta`安装对应版本的包。\n\n我们可以通过`npm dist-tag ls <pkg>`来查看包的`dist-tag`\n\n```json\n{\n    latest: 1.0.1, // 这就是npm publish默认发布的tag\n    beta: 1.0.1-beta\n}\n```\n\n当我们的beta版本稳定后，可以使用`npm dist-tag add x.x.x-beta latest`设置为稳定版本。\n\n# npm version与npm dist-tag\n\n关于npm version prerelease的作用我这里不再赘述，你可以查看[这个文章](https://github.com/liangklfangl/npm-dist-tag/blob/master/NPM%E6%A8%A1%E5%9D%97%E7%9A%84TAG%E7%AE%A1%E7%90%86)。我只是记录一下关于npm version与npm dist-tag的使用：\n\n第一步：发布第一个稳定版本\n\n```\n npm publish//1.0.0\n```\n\n第二步：修改文件继续发布第二个版本\n\n```\ngit add -A && git commit -m \"c\"\nnpm version patch\nnpm publish//1.0.1\n```\n\n第三步：继续修改文件发布一个prerelease版本\n\n```\n git add -A && git commit -m \"c\"\n npm version prerelease\n npm publish --tag -beta//版本n-n-n-n@1.0.2-0\n```\n\n第四步：继续修改发布第二个prerelease版本\n\n```\ngit add -A && git commit -m \"c\"\nnpm version prerelease\nnpm publish --tag -beta//版本n-n-n-n@1.0.2-1\n```\n\n第五步：npm info查看我们的版本信息\n\n```json\n{ name: 'n-n-n-n',\n  'dist-tags': { latest: '1.0.1', '-beta': '1.0.2-1' },\n  versions: [ '1.0.0', '1.0.1', '1.0.2-0', '1.0.2-1' ],\n  maintainers: [ 'liangklfang <liangklfang@163.com>' ],\n  time:\n   { modified: '2017-04-01T12:17:56.755Z',\n     created: '2017-04-01T12:15:23.605Z',\n     '1.0.0': '2017-04-01T12:15:23.605Z',\n     '1.0.1': '2017-04-01T12:16:24.916Z',\n     '1.0.2-0': '2017-04-01T12:17:23.354Z',\n     '1.0.2-1': '2017-04-01T12:17:56.755Z' },\n  homepage: 'https://github.com/liangklfang/n#readme',\n  repository: { type: 'git', url: 'git+https://github.com/liangklfang/n.git' },\n  bugs: { url: 'https://github.com/liangklfang/n/issues' },\n  license: 'ISC',\n  readmeFilename: 'README.md',\n  version: '1.0.1',\n  description: '',\n  main: 'index.js',\n  scripts: { test: 'echo \"Error: no test specified\" && exit 1' },\n  author: '',\n  gitHead: '8123b8addf6fed83c4c5edead1dc2614241a4479',\n  dist:\n   { shasum: 'a60d8b02222e4cae74e91b69b316a5b173d2ac9d',\n     tarball: 'https://registry.npmjs.org/n-n-n-n/-/n-n-n-n-1.0.1.tgz' },\n  directories: {} }\n```\n\n我们只要注意下面者两个部分：\n\n```\n 'dist-tags': { latest: '1.0.1', '-beta': '1.0.2-1' },\n  versions: [ '1.0.0', '1.0.1', '1.0.2-0', '1.0.2-1' ],\n```\n\n其中最新的稳定版本和最新的beta版本可以在dist-tags中看到，而versions数组中存储的是所有的版本。\n\n第六步：npm dist-tag命令\n\n```\nnpm dist-tag ls n-n-n-n\n```\n\n即npm dist-tag获取到所有的最新的版本，包括prerelease与稳定版本，得到下面结果：\n\n```\n-beta: 1.0.2-1\nlatest: 1.0.1\n```\n\n第七步：当我们的prerelease版本已经稳定了，重新设置为稳定版本\n\n```\nnpm dist-tag add n-n-n-n@1.0.2-1 latest\n```\n\n此时你通过npm info查看可以知道：\n\n```json\n{ name: 'n-n-n-n',\n  'dist-tags': { latest: '1.0.2-1', '-beta': '1.0.2-1' },\n  versions: [ '1.0.0', '1.0.1', '1.0.2-0', '1.0.2-1' ],\n  maintainers: [ 'liangklfang <liangklfang@163.com>' ],\n  time:\n   { modified: '2017-04-01T12:24:55.800Z',\n     created: '2017-04-01T12:15:23.605Z',\n     '1.0.0': '2017-04-01T12:15:23.605Z',\n     '1.0.1': '2017-04-01T12:16:24.916Z',\n     '1.0.2-0': '2017-04-01T12:17:23.354Z',\n     '1.0.2-1': '2017-04-01T12:17:56.755Z' },\n  homepage: 'https://github.com/liangklfang/n#readme',\n  repository: { type: 'git', url: 'git+https://github.com/liangklfang/n.git' },\n  bugs: { url: 'https://github.com/liangklfang/n/issues' },\n  license: 'ISC',\n  readmeFilename: 'README.md',\n  version: '1.0.2-1',\n  description: '',\n  main: 'index.js',\n  scripts: { test: 'echo \"Error: no test specified\" && exit 1' },\n  author: '',\n  gitHead: '03189d2cc61604aa05f4b93e429d3caa3b637f8c',\n  dist:\n   { shasum: '41ea170a6b155c8d61658cd4c309f0d5d1b12ced',\n     tarball: 'https://registry.npmjs.org/n-n-n-n/-/n-n-n-n-1.0.2-1.tgz' },\n  directories: {} }\n```\n\n主要关注如下:\n\n```\n 'dist-tags': { latest: '1.0.2-1', '-beta': '1.0.2-1' },\n  versions: [ '1.0.0', '1.0.1', '1.0.2-0', '1.0.2-1' ]\n```\n\n此时latest版本已经是prerelease版本\"1.0.2-1\"了！此时用户如果直接运行npm install就会安装我们的prerelease版本了，因为版本已经更新了！\n\n当然，我们的npm publish可以有很多tag的，比如上面是beta，也可以是stable, dev, canary等，比如下面你继续运行：\n\n```\n git add -A && git commit -m \"c\"\n npm version prerelease\n npm publish --tag -dev\n```\n\n此时你运行npm info就会得到下面的信息：\n\n```\n{ name: 'n-n-n-n',\n  'dist-tags': { latest: '1.0.2-1', '-beta': '1.0.2-1', '-dev': '1.0.2-2' },\n  versions: [ '1.0.0', '1.0.1', '1.0.2-0', '1.0.2-1', '1.0.2-2' ],\n  maintainers: [ 'liangklfang <liangklfang@163.com>' ],\n  time:\n   { modified: '2017-04-01T13:01:17.106Z',\n     created: '2017-04-01T12:15:23.605Z',\n     '1.0.0': '2017-04-01T12:15:23.605Z',\n     '1.0.1': '2017-04-01T12:16:24.916Z',\n     '1.0.2-0': '2017-04-01T12:17:23.354Z',\n     '1.0.2-1': '2017-04-01T12:17:56.755Z',\n     '1.0.2-2': '2017-04-01T13:01:17.106Z' },\n  homepage: 'https://github.com/liangklfang/n#readme',\n  repository: { type: 'git', url: 'git+https://github.com/liangklfang/n.git' },\n  bugs: { url: 'https://github.com/liangklfang/n/issues' },\n  license: 'ISC',\n  readmeFilename: 'README.md',\n  version: '1.0.2-1',\n  description: '',\n  main: 'index.js',\n  scripts: { test: 'echo \"Error: no test specified\" && exit 1' },\n  author: '',\n  gitHead: '03189d2cc61604aa05f4b93e429d3caa3b637f8c',\n  dist:\n   { shasum: '41ea170a6b155c8d61658cd4c309f0d5d1b12ced',\n     tarball: 'https://registry.npmjs.org/n-n-n-n/-/n-n-n-n-1.0.2-1.tgz' },\n  directories: {} }\n```\n\n重点关注如下内容\n\n```\n 'dist-tags': { latest: '1.0.2-1', '-beta': '1.0.2-1', '-dev': '1.0.2-2' },\n  versions: [ '1.0.0', '1.0.1', '1.0.2-0', '1.0.2-1', '1.0.2-2' ],\n```\n\n此时你会看到-beta版本最新是1.0.2-1，而-dev版本最新是1.0.2-2\n\n# 参考\n\n> <https://github.com/liangklfangl/npm-dist-tag>\n>\n> <https://juejin.im/post/5b624d42f265da0fa1223ffa>\n>\n> <https://docs.npmjs.com/cli/version>\n\n","slug":"npm版本管理","published":1,"updated":"2020-08-27T15:25:48.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbll6002k4tjef358r2pv","content":"<p>在打包项目的时候，我们都要更新package.json的版本号，接着给给代码添加tag，最后push代码，这样的流程泰国麻烦有什么方法简化。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. package.json`中修改递增`version</span><br><span class=\"line\">2. git add -A</span><br><span class=\"line\">3. git commit -m &quot;update version&quot;</span><br><span class=\"line\">4. git push</span><br><span class=\"line\">5. git tag &lt;tag version&gt;</span><br><span class=\"line\">6. git push --tag</span><br><span class=\"line\">7. npm publish</span><br></pre></td></tr></table></figure>\n<h1 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h1><p>我们可以使用<code>npm version</code>命令，从<a href=\"https://docs.npmjs.com/cli/version\" target=\"_blank\" rel=\"noopener\">文档</a>上我们可以看到其依据<a href=\"https://semver.org/lang/zh-CN/\" target=\"_blank\" rel=\"noopener\">semver</a>支持了大部分alias：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm version [&lt;newversion&gt; | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>例：初始版本为1.0.0</p>\n<p><code>npm version prepatch</code>  //预备补丁版本号 v1.0.1-0</p>\n<p><code>npm version prerelease</code>  //预发布版本号 v1.0.1-1</p>\n<p><code>npm version patch</code> //补丁版本号 v1.0.2</p>\n<p><code>npm version preminor</code> //预备次版本号 v1.1.0-0</p>\n<p><code>npm version minor</code> //次版本号 v1.1.0</p>\n<p><code>npm version premajor</code> //预备主版本号 v2.0.0-0</p>\n<p><code>npm version major</code> //主版本号 v2.0.0</p>\n</blockquote>\n<p>当在仓库中执行<code>npm version时</code>，会自动提交<code>git commit</code>并打上<code>git tag</code>。</p>\n<blockquote>\n<p>当使用<code>-m</code>参数时，就可以自定义发布版本的信息，其中<code>%s</code>可以用来代替当前版本号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm version patch -m &quot;upgrade to %s for reasons&quot;</span><br><span class=\"line\">&gt; 复制代码</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>这样以后版本迭代只需要以下步骤</p>\n<ul>\n<li><code>npm version patch | minor | major | ...etc</code></li>\n<li><code>git push</code></li>\n<li><code>git push --tag</code></li>\n<li><code>npm publish</code></li>\n</ul>\n<p>npm version会同时创建时 <code>v版本号</code> 形式的tag，将tag push上去就可以自动触发构建了。</p>\n<p>也可以简化这步操作，在npm version操作后自动 push</p>\n<p>在 package.json中加入下面的代码，即可实现npm version操作后，自动push代码及tag，也就自动触发了 npm 发布操作。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"postversion\": \"git push --follow-tags\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"衍生问题\"><a href=\"#衍生问题\" class=\"headerlink\" title=\"衍生问题\"></a>衍生问题</h1><blockquote>\n<p>如何发布beta，rc，alpha版本呢？如果发布了，应该如何安装？</p>\n</blockquote>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>首先我们要理解这些版本的含义</p>\n<ul>\n<li>alpha：内部测试版本</li>\n<li>beta： 公开测试版本</li>\n<li>rc： 候选版本（Release Candidate）</li>\n</ul>\n<p>然后将<code>package.json</code>的<code>version</code>改成<code>x.x.x-beta</code></p>\n<p>配合<code>npm publish --tag &lt;tag&gt;</code>，我们可以发布对应的<code>dist-tag</code></p>\n<blockquote>\n<p>举个例子：</p>\n<p>使用<code>npm publish --tag beta</code>发布后，然后就可以使用<code>npm install &lt;pkg&gt;@beta</code>安装对应版本的包。</p>\n</blockquote>\n<p>我们可以通过<code>npm dist-tag ls &lt;pkg&gt;</code>来查看包的<code>dist-tag</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    latest: 1.0.1, // 这就是npm publish默认发布的tag</span><br><span class=\"line\">    beta: 1.0.1-beta</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们的beta版本稳定后，可以使用<code>npm dist-tag add x.x.x-beta latest</code>设置为稳定版本。</p>\n<h1 id=\"npm-version与npm-dist-tag\"><a href=\"#npm-version与npm-dist-tag\" class=\"headerlink\" title=\"npm version与npm dist-tag\"></a>npm version与npm dist-tag</h1><p>关于npm version prerelease的作用我这里不再赘述，你可以查看<a href=\"https://github.com/liangklfangl/npm-dist-tag/blob/master/NPM%E6%A8%A1%E5%9D%97%E7%9A%84TAG%E7%AE%A1%E7%90%86\" target=\"_blank\" rel=\"noopener\">这个文章</a>。我只是记录一下关于npm version与npm dist-tag的使用：</p>\n<p>第一步：发布第一个稳定版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish//1.0.0</span><br></pre></td></tr></table></figure>\n<p>第二步：修改文件继续发布第二个版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -A &amp;&amp; git commit -m &quot;c&quot;</span><br><span class=\"line\">npm version patch</span><br><span class=\"line\">npm publish//1.0.1</span><br></pre></td></tr></table></figure>\n<p>第三步：继续修改文件发布一个prerelease版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -A &amp;&amp; git commit -m &quot;c&quot;</span><br><span class=\"line\">npm version prerelease</span><br><span class=\"line\">npm publish --tag -beta//版本n-n-n-n@1.0.2-0</span><br></pre></td></tr></table></figure>\n<p>第四步：继续修改发布第二个prerelease版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -A &amp;&amp; git commit -m &quot;c&quot;</span><br><span class=\"line\">npm version prerelease</span><br><span class=\"line\">npm publish --tag -beta//版本n-n-n-n@1.0.2-1</span><br></pre></td></tr></table></figure>\n<p>第五步：npm info查看我们的版本信息</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; name: 'n-n-n-n',</span><br><span class=\"line\">  'dist-tags': &#123; latest: '1.0.1', '-beta': '1.0.2-1' &#125;,</span><br><span class=\"line\">  versions: [ '1.0.0', '1.0.1', '1.0.2-0', '1.0.2-1' ],</span><br><span class=\"line\">  maintainers: [ 'liangklfang &lt;liangklfang@163.com&gt;' ],</span><br><span class=\"line\">  time:</span><br><span class=\"line\">   &#123; modified: '2017-04-01T12:17:56.755Z',</span><br><span class=\"line\">     created: '2017-04-01T12:15:23.605Z',</span><br><span class=\"line\">     '1.0.0': '2017-04-01T12:15:23.605Z',</span><br><span class=\"line\">     '1.0.1': '2017-04-01T12:16:24.916Z',</span><br><span class=\"line\">     '1.0.2-0': '2017-04-01T12:17:23.354Z',</span><br><span class=\"line\">     '1.0.2-1': '2017-04-01T12:17:56.755Z' &#125;,</span><br><span class=\"line\">  homepage: 'https://github.com/liangklfang/n#readme',</span><br><span class=\"line\">  repository: &#123; type: 'git', url: 'git+https://github.com/liangklfang/n.git' &#125;,</span><br><span class=\"line\">  bugs: &#123; url: 'https://github.com/liangklfang/n/issues' &#125;,</span><br><span class=\"line\">  license: 'ISC',</span><br><span class=\"line\">  readmeFilename: 'README.md',</span><br><span class=\"line\">  version: '1.0.1',</span><br><span class=\"line\">  description: '',</span><br><span class=\"line\">  main: 'index.js',</span><br><span class=\"line\">  scripts: &#123; test: 'echo \"Error: no test specified\" &amp;&amp; exit 1' &#125;,</span><br><span class=\"line\">  author: '',</span><br><span class=\"line\">  gitHead: '8123b8addf6fed83c4c5edead1dc2614241a4479',</span><br><span class=\"line\">  dist:</span><br><span class=\"line\">   &#123; shasum: 'a60d8b02222e4cae74e91b69b316a5b173d2ac9d',</span><br><span class=\"line\">     tarball: 'https://registry.npmjs.org/n-n-n-n/-/n-n-n-n-1.0.1.tgz' &#125;,</span><br><span class=\"line\">  directories: &#123;&#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>我们只要注意下面者两个部分：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;dist-tags&apos;: &#123; latest: &apos;1.0.1&apos;, &apos;-beta&apos;: &apos;1.0.2-1&apos; &#125;,</span><br><span class=\"line\"> versions: [ &apos;1.0.0&apos;, &apos;1.0.1&apos;, &apos;1.0.2-0&apos;, &apos;1.0.2-1&apos; ],</span><br></pre></td></tr></table></figure>\n<p>其中最新的稳定版本和最新的beta版本可以在dist-tags中看到，而versions数组中存储的是所有的版本。</p>\n<p>第六步：npm dist-tag命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm dist-tag ls n-n-n-n</span><br></pre></td></tr></table></figure>\n<p>即npm dist-tag获取到所有的最新的版本，包括prerelease与稳定版本，得到下面结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-beta: 1.0.2-1</span><br><span class=\"line\">latest: 1.0.1</span><br></pre></td></tr></table></figure>\n<p>第七步：当我们的prerelease版本已经稳定了，重新设置为稳定版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm dist-tag add n-n-n-n@1.0.2-1 latest</span><br></pre></td></tr></table></figure>\n<p>此时你通过npm info查看可以知道：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; name: 'n-n-n-n',</span><br><span class=\"line\">  'dist-tags': &#123; latest: '1.0.2-1', '-beta': '1.0.2-1' &#125;,</span><br><span class=\"line\">  versions: [ '1.0.0', '1.0.1', '1.0.2-0', '1.0.2-1' ],</span><br><span class=\"line\">  maintainers: [ 'liangklfang &lt;liangklfang@163.com&gt;' ],</span><br><span class=\"line\">  time:</span><br><span class=\"line\">   &#123; modified: '2017-04-01T12:24:55.800Z',</span><br><span class=\"line\">     created: '2017-04-01T12:15:23.605Z',</span><br><span class=\"line\">     '1.0.0': '2017-04-01T12:15:23.605Z',</span><br><span class=\"line\">     '1.0.1': '2017-04-01T12:16:24.916Z',</span><br><span class=\"line\">     '1.0.2-0': '2017-04-01T12:17:23.354Z',</span><br><span class=\"line\">     '1.0.2-1': '2017-04-01T12:17:56.755Z' &#125;,</span><br><span class=\"line\">  homepage: 'https://github.com/liangklfang/n#readme',</span><br><span class=\"line\">  repository: &#123; type: 'git', url: 'git+https://github.com/liangklfang/n.git' &#125;,</span><br><span class=\"line\">  bugs: &#123; url: 'https://github.com/liangklfang/n/issues' &#125;,</span><br><span class=\"line\">  license: 'ISC',</span><br><span class=\"line\">  readmeFilename: 'README.md',</span><br><span class=\"line\">  version: '1.0.2-1',</span><br><span class=\"line\">  description: '',</span><br><span class=\"line\">  main: 'index.js',</span><br><span class=\"line\">  scripts: &#123; test: 'echo \"Error: no test specified\" &amp;&amp; exit 1' &#125;,</span><br><span class=\"line\">  author: '',</span><br><span class=\"line\">  gitHead: '03189d2cc61604aa05f4b93e429d3caa3b637f8c',</span><br><span class=\"line\">  dist:</span><br><span class=\"line\">   &#123; shasum: '41ea170a6b155c8d61658cd4c309f0d5d1b12ced',</span><br><span class=\"line\">     tarball: 'https://registry.npmjs.org/n-n-n-n/-/n-n-n-n-1.0.2-1.tgz' &#125;,</span><br><span class=\"line\">  directories: &#123;&#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>主要关注如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;dist-tags&apos;: &#123; latest: &apos;1.0.2-1&apos;, &apos;-beta&apos;: &apos;1.0.2-1&apos; &#125;,</span><br><span class=\"line\"> versions: [ &apos;1.0.0&apos;, &apos;1.0.1&apos;, &apos;1.0.2-0&apos;, &apos;1.0.2-1&apos; ]</span><br></pre></td></tr></table></figure>\n<p>此时latest版本已经是prerelease版本”1.0.2-1”了！此时用户如果直接运行npm install就会安装我们的prerelease版本了，因为版本已经更新了！</p>\n<p>当然，我们的npm publish可以有很多tag的，比如上面是beta，也可以是stable, dev, canary等，比如下面你继续运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -A &amp;&amp; git commit -m &quot;c&quot;</span><br><span class=\"line\">npm version prerelease</span><br><span class=\"line\">npm publish --tag -dev</span><br></pre></td></tr></table></figure>\n<p>此时你运行npm info就会得到下面的信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; name: &apos;n-n-n-n&apos;,</span><br><span class=\"line\">  &apos;dist-tags&apos;: &#123; latest: &apos;1.0.2-1&apos;, &apos;-beta&apos;: &apos;1.0.2-1&apos;, &apos;-dev&apos;: &apos;1.0.2-2&apos; &#125;,</span><br><span class=\"line\">  versions: [ &apos;1.0.0&apos;, &apos;1.0.1&apos;, &apos;1.0.2-0&apos;, &apos;1.0.2-1&apos;, &apos;1.0.2-2&apos; ],</span><br><span class=\"line\">  maintainers: [ &apos;liangklfang &lt;liangklfang@163.com&gt;&apos; ],</span><br><span class=\"line\">  time:</span><br><span class=\"line\">   &#123; modified: &apos;2017-04-01T13:01:17.106Z&apos;,</span><br><span class=\"line\">     created: &apos;2017-04-01T12:15:23.605Z&apos;,</span><br><span class=\"line\">     &apos;1.0.0&apos;: &apos;2017-04-01T12:15:23.605Z&apos;,</span><br><span class=\"line\">     &apos;1.0.1&apos;: &apos;2017-04-01T12:16:24.916Z&apos;,</span><br><span class=\"line\">     &apos;1.0.2-0&apos;: &apos;2017-04-01T12:17:23.354Z&apos;,</span><br><span class=\"line\">     &apos;1.0.2-1&apos;: &apos;2017-04-01T12:17:56.755Z&apos;,</span><br><span class=\"line\">     &apos;1.0.2-2&apos;: &apos;2017-04-01T13:01:17.106Z&apos; &#125;,</span><br><span class=\"line\">  homepage: &apos;https://github.com/liangklfang/n#readme&apos;,</span><br><span class=\"line\">  repository: &#123; type: &apos;git&apos;, url: &apos;git+https://github.com/liangklfang/n.git&apos; &#125;,</span><br><span class=\"line\">  bugs: &#123; url: &apos;https://github.com/liangklfang/n/issues&apos; &#125;,</span><br><span class=\"line\">  license: &apos;ISC&apos;,</span><br><span class=\"line\">  readmeFilename: &apos;README.md&apos;,</span><br><span class=\"line\">  version: &apos;1.0.2-1&apos;,</span><br><span class=\"line\">  description: &apos;&apos;,</span><br><span class=\"line\">  main: &apos;index.js&apos;,</span><br><span class=\"line\">  scripts: &#123; test: &apos;echo &quot;Error: no test specified&quot; &amp;&amp; exit 1&apos; &#125;,</span><br><span class=\"line\">  author: &apos;&apos;,</span><br><span class=\"line\">  gitHead: &apos;03189d2cc61604aa05f4b93e429d3caa3b637f8c&apos;,</span><br><span class=\"line\">  dist:</span><br><span class=\"line\">   &#123; shasum: &apos;41ea170a6b155c8d61658cd4c309f0d5d1b12ced&apos;,</span><br><span class=\"line\">     tarball: &apos;https://registry.npmjs.org/n-n-n-n/-/n-n-n-n-1.0.2-1.tgz&apos; &#125;,</span><br><span class=\"line\">  directories: &#123;&#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>重点关注如下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;dist-tags&apos;: &#123; latest: &apos;1.0.2-1&apos;, &apos;-beta&apos;: &apos;1.0.2-1&apos;, &apos;-dev&apos;: &apos;1.0.2-2&apos; &#125;,</span><br><span class=\"line\"> versions: [ &apos;1.0.0&apos;, &apos;1.0.1&apos;, &apos;1.0.2-0&apos;, &apos;1.0.2-1&apos;, &apos;1.0.2-2&apos; ],</span><br></pre></td></tr></table></figure>\n<p>此时你会看到-beta版本最新是1.0.2-1，而-dev版本最新是1.0.2-2</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://github.com/liangklfangl/npm-dist-tag\" target=\"_blank\" rel=\"noopener\">https://github.com/liangklfangl/npm-dist-tag</a></p>\n<p><a href=\"https://juejin.im/post/5b624d42f265da0fa1223ffa\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5b624d42f265da0fa1223ffa</a></p>\n<p><a href=\"https://docs.npmjs.com/cli/version\" target=\"_blank\" rel=\"noopener\">https://docs.npmjs.com/cli/version</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>在打包项目的时候，我们都要更新package.json的版本号，接着给给代码添加tag，最后push代码，这样的流程泰国麻烦有什么方法简化。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. package.json`中修改递增`version</span><br><span class=\"line\">2. git add -A</span><br><span class=\"line\">3. git commit -m &quot;update version&quot;</span><br><span class=\"line\">4. git push</span><br><span class=\"line\">5. git tag &lt;tag version&gt;</span><br><span class=\"line\">6. git push --tag</span><br><span class=\"line\">7. npm publish</span><br></pre></td></tr></table></figure>\n<h1 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h1><p>我们可以使用<code>npm version</code>命令，从<a href=\"https://docs.npmjs.com/cli/version\" target=\"_blank\" rel=\"noopener\">文档</a>上我们可以看到其依据<a href=\"https://semver.org/lang/zh-CN/\" target=\"_blank\" rel=\"noopener\">semver</a>支持了大部分alias：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm version [&lt;newversion&gt; | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>例：初始版本为1.0.0</p>\n<p><code>npm version prepatch</code>  //预备补丁版本号 v1.0.1-0</p>\n<p><code>npm version prerelease</code>  //预发布版本号 v1.0.1-1</p>\n<p><code>npm version patch</code> //补丁版本号 v1.0.2</p>\n<p><code>npm version preminor</code> //预备次版本号 v1.1.0-0</p>\n<p><code>npm version minor</code> //次版本号 v1.1.0</p>\n<p><code>npm version premajor</code> //预备主版本号 v2.0.0-0</p>\n<p><code>npm version major</code> //主版本号 v2.0.0</p>\n</blockquote>\n<p>当在仓库中执行<code>npm version时</code>，会自动提交<code>git commit</code>并打上<code>git tag</code>。</p>\n<blockquote>\n<p>当使用<code>-m</code>参数时，就可以自定义发布版本的信息，其中<code>%s</code>可以用来代替当前版本号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm version patch -m &quot;upgrade to %s for reasons&quot;</span><br><span class=\"line\">&gt; 复制代码</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>这样以后版本迭代只需要以下步骤</p>\n<ul>\n<li><code>npm version patch | minor | major | ...etc</code></li>\n<li><code>git push</code></li>\n<li><code>git push --tag</code></li>\n<li><code>npm publish</code></li>\n</ul>\n<p>npm version会同时创建时 <code>v版本号</code> 形式的tag，将tag push上去就可以自动触发构建了。</p>\n<p>也可以简化这步操作，在npm version操作后自动 push</p>\n<p>在 package.json中加入下面的代码，即可实现npm version操作后，自动push代码及tag，也就自动触发了 npm 发布操作。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"postversion\": \"git push --follow-tags\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"衍生问题\"><a href=\"#衍生问题\" class=\"headerlink\" title=\"衍生问题\"></a>衍生问题</h1><blockquote>\n<p>如何发布beta，rc，alpha版本呢？如果发布了，应该如何安装？</p>\n</blockquote>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>首先我们要理解这些版本的含义</p>\n<ul>\n<li>alpha：内部测试版本</li>\n<li>beta： 公开测试版本</li>\n<li>rc： 候选版本（Release Candidate）</li>\n</ul>\n<p>然后将<code>package.json</code>的<code>version</code>改成<code>x.x.x-beta</code></p>\n<p>配合<code>npm publish --tag &lt;tag&gt;</code>，我们可以发布对应的<code>dist-tag</code></p>\n<blockquote>\n<p>举个例子：</p>\n<p>使用<code>npm publish --tag beta</code>发布后，然后就可以使用<code>npm install &lt;pkg&gt;@beta</code>安装对应版本的包。</p>\n</blockquote>\n<p>我们可以通过<code>npm dist-tag ls &lt;pkg&gt;</code>来查看包的<code>dist-tag</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    latest: 1.0.1, // 这就是npm publish默认发布的tag</span><br><span class=\"line\">    beta: 1.0.1-beta</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们的beta版本稳定后，可以使用<code>npm dist-tag add x.x.x-beta latest</code>设置为稳定版本。</p>\n<h1 id=\"npm-version与npm-dist-tag\"><a href=\"#npm-version与npm-dist-tag\" class=\"headerlink\" title=\"npm version与npm dist-tag\"></a>npm version与npm dist-tag</h1><p>关于npm version prerelease的作用我这里不再赘述，你可以查看<a href=\"https://github.com/liangklfangl/npm-dist-tag/blob/master/NPM%E6%A8%A1%E5%9D%97%E7%9A%84TAG%E7%AE%A1%E7%90%86\" target=\"_blank\" rel=\"noopener\">这个文章</a>。我只是记录一下关于npm version与npm dist-tag的使用：</p>\n<p>第一步：发布第一个稳定版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish//1.0.0</span><br></pre></td></tr></table></figure>\n<p>第二步：修改文件继续发布第二个版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -A &amp;&amp; git commit -m &quot;c&quot;</span><br><span class=\"line\">npm version patch</span><br><span class=\"line\">npm publish//1.0.1</span><br></pre></td></tr></table></figure>\n<p>第三步：继续修改文件发布一个prerelease版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -A &amp;&amp; git commit -m &quot;c&quot;</span><br><span class=\"line\">npm version prerelease</span><br><span class=\"line\">npm publish --tag -beta//版本n-n-n-n@1.0.2-0</span><br></pre></td></tr></table></figure>\n<p>第四步：继续修改发布第二个prerelease版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -A &amp;&amp; git commit -m &quot;c&quot;</span><br><span class=\"line\">npm version prerelease</span><br><span class=\"line\">npm publish --tag -beta//版本n-n-n-n@1.0.2-1</span><br></pre></td></tr></table></figure>\n<p>第五步：npm info查看我们的版本信息</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; name: 'n-n-n-n',</span><br><span class=\"line\">  'dist-tags': &#123; latest: '1.0.1', '-beta': '1.0.2-1' &#125;,</span><br><span class=\"line\">  versions: [ '1.0.0', '1.0.1', '1.0.2-0', '1.0.2-1' ],</span><br><span class=\"line\">  maintainers: [ 'liangklfang &lt;liangklfang@163.com&gt;' ],</span><br><span class=\"line\">  time:</span><br><span class=\"line\">   &#123; modified: '2017-04-01T12:17:56.755Z',</span><br><span class=\"line\">     created: '2017-04-01T12:15:23.605Z',</span><br><span class=\"line\">     '1.0.0': '2017-04-01T12:15:23.605Z',</span><br><span class=\"line\">     '1.0.1': '2017-04-01T12:16:24.916Z',</span><br><span class=\"line\">     '1.0.2-0': '2017-04-01T12:17:23.354Z',</span><br><span class=\"line\">     '1.0.2-1': '2017-04-01T12:17:56.755Z' &#125;,</span><br><span class=\"line\">  homepage: 'https://github.com/liangklfang/n#readme',</span><br><span class=\"line\">  repository: &#123; type: 'git', url: 'git+https://github.com/liangklfang/n.git' &#125;,</span><br><span class=\"line\">  bugs: &#123; url: 'https://github.com/liangklfang/n/issues' &#125;,</span><br><span class=\"line\">  license: 'ISC',</span><br><span class=\"line\">  readmeFilename: 'README.md',</span><br><span class=\"line\">  version: '1.0.1',</span><br><span class=\"line\">  description: '',</span><br><span class=\"line\">  main: 'index.js',</span><br><span class=\"line\">  scripts: &#123; test: 'echo \"Error: no test specified\" &amp;&amp; exit 1' &#125;,</span><br><span class=\"line\">  author: '',</span><br><span class=\"line\">  gitHead: '8123b8addf6fed83c4c5edead1dc2614241a4479',</span><br><span class=\"line\">  dist:</span><br><span class=\"line\">   &#123; shasum: 'a60d8b02222e4cae74e91b69b316a5b173d2ac9d',</span><br><span class=\"line\">     tarball: 'https://registry.npmjs.org/n-n-n-n/-/n-n-n-n-1.0.1.tgz' &#125;,</span><br><span class=\"line\">  directories: &#123;&#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>我们只要注意下面者两个部分：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;dist-tags&apos;: &#123; latest: &apos;1.0.1&apos;, &apos;-beta&apos;: &apos;1.0.2-1&apos; &#125;,</span><br><span class=\"line\"> versions: [ &apos;1.0.0&apos;, &apos;1.0.1&apos;, &apos;1.0.2-0&apos;, &apos;1.0.2-1&apos; ],</span><br></pre></td></tr></table></figure>\n<p>其中最新的稳定版本和最新的beta版本可以在dist-tags中看到，而versions数组中存储的是所有的版本。</p>\n<p>第六步：npm dist-tag命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm dist-tag ls n-n-n-n</span><br></pre></td></tr></table></figure>\n<p>即npm dist-tag获取到所有的最新的版本，包括prerelease与稳定版本，得到下面结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-beta: 1.0.2-1</span><br><span class=\"line\">latest: 1.0.1</span><br></pre></td></tr></table></figure>\n<p>第七步：当我们的prerelease版本已经稳定了，重新设置为稳定版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm dist-tag add n-n-n-n@1.0.2-1 latest</span><br></pre></td></tr></table></figure>\n<p>此时你通过npm info查看可以知道：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; name: 'n-n-n-n',</span><br><span class=\"line\">  'dist-tags': &#123; latest: '1.0.2-1', '-beta': '1.0.2-1' &#125;,</span><br><span class=\"line\">  versions: [ '1.0.0', '1.0.1', '1.0.2-0', '1.0.2-1' ],</span><br><span class=\"line\">  maintainers: [ 'liangklfang &lt;liangklfang@163.com&gt;' ],</span><br><span class=\"line\">  time:</span><br><span class=\"line\">   &#123; modified: '2017-04-01T12:24:55.800Z',</span><br><span class=\"line\">     created: '2017-04-01T12:15:23.605Z',</span><br><span class=\"line\">     '1.0.0': '2017-04-01T12:15:23.605Z',</span><br><span class=\"line\">     '1.0.1': '2017-04-01T12:16:24.916Z',</span><br><span class=\"line\">     '1.0.2-0': '2017-04-01T12:17:23.354Z',</span><br><span class=\"line\">     '1.0.2-1': '2017-04-01T12:17:56.755Z' &#125;,</span><br><span class=\"line\">  homepage: 'https://github.com/liangklfang/n#readme',</span><br><span class=\"line\">  repository: &#123; type: 'git', url: 'git+https://github.com/liangklfang/n.git' &#125;,</span><br><span class=\"line\">  bugs: &#123; url: 'https://github.com/liangklfang/n/issues' &#125;,</span><br><span class=\"line\">  license: 'ISC',</span><br><span class=\"line\">  readmeFilename: 'README.md',</span><br><span class=\"line\">  version: '1.0.2-1',</span><br><span class=\"line\">  description: '',</span><br><span class=\"line\">  main: 'index.js',</span><br><span class=\"line\">  scripts: &#123; test: 'echo \"Error: no test specified\" &amp;&amp; exit 1' &#125;,</span><br><span class=\"line\">  author: '',</span><br><span class=\"line\">  gitHead: '03189d2cc61604aa05f4b93e429d3caa3b637f8c',</span><br><span class=\"line\">  dist:</span><br><span class=\"line\">   &#123; shasum: '41ea170a6b155c8d61658cd4c309f0d5d1b12ced',</span><br><span class=\"line\">     tarball: 'https://registry.npmjs.org/n-n-n-n/-/n-n-n-n-1.0.2-1.tgz' &#125;,</span><br><span class=\"line\">  directories: &#123;&#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>主要关注如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;dist-tags&apos;: &#123; latest: &apos;1.0.2-1&apos;, &apos;-beta&apos;: &apos;1.0.2-1&apos; &#125;,</span><br><span class=\"line\"> versions: [ &apos;1.0.0&apos;, &apos;1.0.1&apos;, &apos;1.0.2-0&apos;, &apos;1.0.2-1&apos; ]</span><br></pre></td></tr></table></figure>\n<p>此时latest版本已经是prerelease版本”1.0.2-1”了！此时用户如果直接运行npm install就会安装我们的prerelease版本了，因为版本已经更新了！</p>\n<p>当然，我们的npm publish可以有很多tag的，比如上面是beta，也可以是stable, dev, canary等，比如下面你继续运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -A &amp;&amp; git commit -m &quot;c&quot;</span><br><span class=\"line\">npm version prerelease</span><br><span class=\"line\">npm publish --tag -dev</span><br></pre></td></tr></table></figure>\n<p>此时你运行npm info就会得到下面的信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; name: &apos;n-n-n-n&apos;,</span><br><span class=\"line\">  &apos;dist-tags&apos;: &#123; latest: &apos;1.0.2-1&apos;, &apos;-beta&apos;: &apos;1.0.2-1&apos;, &apos;-dev&apos;: &apos;1.0.2-2&apos; &#125;,</span><br><span class=\"line\">  versions: [ &apos;1.0.0&apos;, &apos;1.0.1&apos;, &apos;1.0.2-0&apos;, &apos;1.0.2-1&apos;, &apos;1.0.2-2&apos; ],</span><br><span class=\"line\">  maintainers: [ &apos;liangklfang &lt;liangklfang@163.com&gt;&apos; ],</span><br><span class=\"line\">  time:</span><br><span class=\"line\">   &#123; modified: &apos;2017-04-01T13:01:17.106Z&apos;,</span><br><span class=\"line\">     created: &apos;2017-04-01T12:15:23.605Z&apos;,</span><br><span class=\"line\">     &apos;1.0.0&apos;: &apos;2017-04-01T12:15:23.605Z&apos;,</span><br><span class=\"line\">     &apos;1.0.1&apos;: &apos;2017-04-01T12:16:24.916Z&apos;,</span><br><span class=\"line\">     &apos;1.0.2-0&apos;: &apos;2017-04-01T12:17:23.354Z&apos;,</span><br><span class=\"line\">     &apos;1.0.2-1&apos;: &apos;2017-04-01T12:17:56.755Z&apos;,</span><br><span class=\"line\">     &apos;1.0.2-2&apos;: &apos;2017-04-01T13:01:17.106Z&apos; &#125;,</span><br><span class=\"line\">  homepage: &apos;https://github.com/liangklfang/n#readme&apos;,</span><br><span class=\"line\">  repository: &#123; type: &apos;git&apos;, url: &apos;git+https://github.com/liangklfang/n.git&apos; &#125;,</span><br><span class=\"line\">  bugs: &#123; url: &apos;https://github.com/liangklfang/n/issues&apos; &#125;,</span><br><span class=\"line\">  license: &apos;ISC&apos;,</span><br><span class=\"line\">  readmeFilename: &apos;README.md&apos;,</span><br><span class=\"line\">  version: &apos;1.0.2-1&apos;,</span><br><span class=\"line\">  description: &apos;&apos;,</span><br><span class=\"line\">  main: &apos;index.js&apos;,</span><br><span class=\"line\">  scripts: &#123; test: &apos;echo &quot;Error: no test specified&quot; &amp;&amp; exit 1&apos; &#125;,</span><br><span class=\"line\">  author: &apos;&apos;,</span><br><span class=\"line\">  gitHead: &apos;03189d2cc61604aa05f4b93e429d3caa3b637f8c&apos;,</span><br><span class=\"line\">  dist:</span><br><span class=\"line\">   &#123; shasum: &apos;41ea170a6b155c8d61658cd4c309f0d5d1b12ced&apos;,</span><br><span class=\"line\">     tarball: &apos;https://registry.npmjs.org/n-n-n-n/-/n-n-n-n-1.0.2-1.tgz&apos; &#125;,</span><br><span class=\"line\">  directories: &#123;&#125; &#125;</span><br></pre></td></tr></table></figure>\n<p>重点关注如下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;dist-tags&apos;: &#123; latest: &apos;1.0.2-1&apos;, &apos;-beta&apos;: &apos;1.0.2-1&apos;, &apos;-dev&apos;: &apos;1.0.2-2&apos; &#125;,</span><br><span class=\"line\"> versions: [ &apos;1.0.0&apos;, &apos;1.0.1&apos;, &apos;1.0.2-0&apos;, &apos;1.0.2-1&apos;, &apos;1.0.2-2&apos; ],</span><br></pre></td></tr></table></figure>\n<p>此时你会看到-beta版本最新是1.0.2-1，而-dev版本最新是1.0.2-2</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://github.com/liangklfangl/npm-dist-tag\" target=\"_blank\" rel=\"noopener\">https://github.com/liangklfangl/npm-dist-tag</a></p>\n<p><a href=\"https://juejin.im/post/5b624d42f265da0fa1223ffa\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5b624d42f265da0fa1223ffa</a></p>\n<p><a href=\"https://docs.npmjs.com/cli/version\" target=\"_blank\" rel=\"noopener\">https://docs.npmjs.com/cli/version</a></p>\n</blockquote>\n"},{"title":"spring数据库事务","date":"2019-09-01T12:22:24.000Z","_content":"\n# 接口\n\n## PlatformTransactionManager\n\nPlatformTransactionManager接口中定义了三个方法：\n\n```java\nPublic interface PlatformTransactionManager()...{  \n    // Return a currently active transaction or create a new one, according to the specified propagation behavior（根据指定的传播行为，返回当前活动的事务或创建一个新事务。）\n    TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException; \n    // Commit the given transaction, with regard to its status（使用事务目前的状态提交事务）\n    Void commit(TransactionStatus status) throws TransactionException;  \n    // Perform a rollback of the given transaction（对执行的事务进行回滚）\n    Void rollback(TransactionStatus status) throws TransactionException;  \n    } \n复制代码\n```\n\n我们刚刚也说了Spring中PlatformTransactionManager根据不同持久层框架所对应的接口实现类,几个比较常见的如下图所示\n\n\n\n![PlatformTransactionManager根据不同持久层框架所对应的接口实现](http://wumu.sciento.cn/20190901203705.png)\n\n\n\n比如我们在使用JDBC或者iBatis（就是Mybatis）进行数据持久化操作时,我们的xml配置通常如下：\n\n```xml\n\t<!-- 事务管理器 -->\n\t<bean id=\"transactionManager\"\n\t\tclass=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n\t\t<!-- 数据源 -->\n\t\t<property name=\"dataSource\" ref=\"dataSource\" />\n\t</bean>\n```\n\n## TransactionDefinition\n\n事务管理器接口 **PlatformTransactionManager** 通过 **getTransaction(TransactionDefinition definition)** 方法来得到一个事务，这个方法里面的参数是 **TransactionDefinition类** ，这个类就定义了一些基本的事务属性。\n\n**那么什么是事务属性呢？**\n\n事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。事务属性包含了5个方面。 \n\n![](http://wumu.sciento.cn/20190901203901.png)\n\n\n\n### TransactionDefinition接口中的方法如下：\n\nTransactionDefinition接口中定义了5个方法以及一些表示事务属性的常量比如隔离级别、传播行为等等的常量。\n\n我下面只是列出了TransactionDefinition接口中的方法而没有给出接口中定义的常量，该接口中的常量信息会在后面依次介绍到。\n\n```java\npublic interface TransactionDefinition {\n    // 返回事务的传播行为\n    int getPropagationBehavior(); \n    // 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据\n    int getIsolationLevel(); \n    // 返回事务必须在多少秒内完成\n    //返回事务的名字\n    String getName()；\n    int getTimeout();  \n    // 返回是否优化为只读事务。\n    boolean isReadOnly();\n} \n```\n\n## TransactionStatus\n\nPlatformTransactionManager.getTransaction(…) 方法返回一个 TransactionStatus 对象。返回的TransactionStatus 对象可能代表一个新的或已经存在的事务（如果在当前调用堆栈有一个符合条件的事务）。TransactionStatus 接口提供了一个简单的控制事务执行和查询事务状态的方法。该接口定义如清单3所示：\n\n##### 清单3. TransactionStatus 接口中定义的主要方法\n\n```java\n`public  interface TransactionStatus{``   ``boolean isNewTransaction();``   ``void setRollbackOnly();``   ``boolean isRollbackOnly();``}`\n```\n\n# 事务管理API分析\n\n## 事务隔离级别\n\n隔离级别是指若干个并发的事务之间的隔离程度。TransactionDefinition 接口中定义了五个表示隔离级别的常量：\n\n- TransactionDefinition.ISOLATION_DEFAULT：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是TransactionDefinition.ISOLATION_READ_COMMITTED。\n\n- TransactionDefinition.ISOLATION_READ_UNCOMMITTED：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读和不可重复读，因此很少使用该隔离级别。\n\n- TransactionDefinition.ISOLATION_READ_COMMITTED：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。\n\n- TransactionDefinition.ISOLATION_REPEATABLE_READ：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。即使在多次查询之间有新增的数据满足该查询，这些新增的记录也会被忽略。该级别可以防止脏读和不可重复读。\n\n- TransactionDefinition.ISOLATION_SERIALIZABLE：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。\n\n## 事务传播行为\n\n所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：\n\n- TransactionDefinition.PROPAGATION_REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。\n- TransactionDefinition.PROPAGATION_REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起。\n- TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。\n- TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。\n- TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。\n- TransactionDefinition.PROPAGATION_MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。\n- TransactionDefinition.PROPAGATION_NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。\n\n这里需要指出的是，前面的六种事务传播行为是 Spring 从 EJB 中引入的，他们共享相同的概念。而 PROPAGATION_NESTED是 Spring 所特有的。以 PROPAGATION_NESTED 启动的事务内嵌于外部事务中（如果存在外部事务的话），此时，内嵌事务并不是一个独立的事务，它依赖于外部事务的存在，只有通过外部的事务提交，才能引起内部事务的提交，嵌套的子事务不能单独提交。如果熟悉 JDBC 中的保存点（SavePoint）的概念，那嵌套事务就很容易理解了，其实嵌套的子事务就是保存点的一个应用，一个事务中可以包括多个保存点，每一个嵌套子事务。另外，外部事务的回滚也会导致嵌套子事务的回滚。\n\n## 事务超时\n\n所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。\n\n## 事务的只读属性\n\n事务的只读属性是指，对事务性资源进行只读操作或者是读写操作。所谓事务性资源就是指那些被事务管理的资源，比如数据源、 JMS 资源，以及自定义的事务性资源等等。如果确定只对事务性资源进行只读操作，那么我们可以将事务标志为只读的，以提高事务处理的性能。在 TransactionDefinition 中以 boolean 类型来表示该事务是否只读。\n\n应用场合：\n\n如果你一次执行单条查询语句，则没有必要启用事务支持，数据库默认支持SQL执行期间的读一致性； \n如果你一次执行多条查询语句，例如统计查询，报表查询，在这种场景下，多条查询SQL必须保证整体的读一致性，否则，在前条SQL查询之后，后条SQL查询之前，数据被其他用户改变，则该次整体的统计查询将会出现读数据不一致的状态，此时，应该启用事务支持。\n【注意是一次执行多次查询来统计某些信息，这时为了保证数据整体的一致性，要用只读事务】\n\n怎样设置：\n\n对于只读查询，可以指定事务类型为readonly，即只读事务。\n由于只读事务不存在数据的修改，因此数据库将会为只读事务提供一些优化手段，例如Oracle对于只读事务，不启动回滚段，不记录回滚log。\n\n（1）在JDBC中，指定只读事务的办法为： connection.setReadOnly(true);\n\n（2）在Hibernate中，指定只读事务的办法为： session.setFlushMode(FlushMode.NEVER); \n此时，Hibernate也会为只读事务提供Session方面的一些优化手段\n\n（3）在Spring的Hibernate封装中，指定只读事务的办法为： bean配置文件中，prop属性增加“readOnly”\n或者用注解方式@Transactional(readOnly=true)\n【 if the transaction is marked as read-only, Spring will set the Hibernate Session’s flush mode to FLUSH_NEVER, \nand will set the JDBC transaction to read-only】也就是说在Spring中设置只读事务是利用上面两种方式\n\n## 事务的回滚规则\n\n通常情况下，如果在事务中抛出了未检查异常（继承自 RuntimeException 的异常），则默认将回滚事务。如果没有抛出任何异常，或者抛出了已检查异常，则仍然提交事务。这通常也是大多数开发者希望的处理方式，也是 EJB 中的默认处理方式。但是，我们可以根据需要人为控制事务在抛出某些未检查异常时任然提交事务，或者在抛出某些已检查异常时回滚事务。","source":"_posts/spring数据库事务.md","raw":"---\ntitle: spring数据库事务\ndate: 2019-09-01 20:22:24\ntags: \n- mysql\n- spring\n---\n\n# 接口\n\n## PlatformTransactionManager\n\nPlatformTransactionManager接口中定义了三个方法：\n\n```java\nPublic interface PlatformTransactionManager()...{  \n    // Return a currently active transaction or create a new one, according to the specified propagation behavior（根据指定的传播行为，返回当前活动的事务或创建一个新事务。）\n    TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException; \n    // Commit the given transaction, with regard to its status（使用事务目前的状态提交事务）\n    Void commit(TransactionStatus status) throws TransactionException;  \n    // Perform a rollback of the given transaction（对执行的事务进行回滚）\n    Void rollback(TransactionStatus status) throws TransactionException;  \n    } \n复制代码\n```\n\n我们刚刚也说了Spring中PlatformTransactionManager根据不同持久层框架所对应的接口实现类,几个比较常见的如下图所示\n\n\n\n![PlatformTransactionManager根据不同持久层框架所对应的接口实现](http://wumu.sciento.cn/20190901203705.png)\n\n\n\n比如我们在使用JDBC或者iBatis（就是Mybatis）进行数据持久化操作时,我们的xml配置通常如下：\n\n```xml\n\t<!-- 事务管理器 -->\n\t<bean id=\"transactionManager\"\n\t\tclass=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n\t\t<!-- 数据源 -->\n\t\t<property name=\"dataSource\" ref=\"dataSource\" />\n\t</bean>\n```\n\n## TransactionDefinition\n\n事务管理器接口 **PlatformTransactionManager** 通过 **getTransaction(TransactionDefinition definition)** 方法来得到一个事务，这个方法里面的参数是 **TransactionDefinition类** ，这个类就定义了一些基本的事务属性。\n\n**那么什么是事务属性呢？**\n\n事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。事务属性包含了5个方面。 \n\n![](http://wumu.sciento.cn/20190901203901.png)\n\n\n\n### TransactionDefinition接口中的方法如下：\n\nTransactionDefinition接口中定义了5个方法以及一些表示事务属性的常量比如隔离级别、传播行为等等的常量。\n\n我下面只是列出了TransactionDefinition接口中的方法而没有给出接口中定义的常量，该接口中的常量信息会在后面依次介绍到。\n\n```java\npublic interface TransactionDefinition {\n    // 返回事务的传播行为\n    int getPropagationBehavior(); \n    // 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据\n    int getIsolationLevel(); \n    // 返回事务必须在多少秒内完成\n    //返回事务的名字\n    String getName()；\n    int getTimeout();  \n    // 返回是否优化为只读事务。\n    boolean isReadOnly();\n} \n```\n\n## TransactionStatus\n\nPlatformTransactionManager.getTransaction(…) 方法返回一个 TransactionStatus 对象。返回的TransactionStatus 对象可能代表一个新的或已经存在的事务（如果在当前调用堆栈有一个符合条件的事务）。TransactionStatus 接口提供了一个简单的控制事务执行和查询事务状态的方法。该接口定义如清单3所示：\n\n##### 清单3. TransactionStatus 接口中定义的主要方法\n\n```java\n`public  interface TransactionStatus{``   ``boolean isNewTransaction();``   ``void setRollbackOnly();``   ``boolean isRollbackOnly();``}`\n```\n\n# 事务管理API分析\n\n## 事务隔离级别\n\n隔离级别是指若干个并发的事务之间的隔离程度。TransactionDefinition 接口中定义了五个表示隔离级别的常量：\n\n- TransactionDefinition.ISOLATION_DEFAULT：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是TransactionDefinition.ISOLATION_READ_COMMITTED。\n\n- TransactionDefinition.ISOLATION_READ_UNCOMMITTED：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读和不可重复读，因此很少使用该隔离级别。\n\n- TransactionDefinition.ISOLATION_READ_COMMITTED：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。\n\n- TransactionDefinition.ISOLATION_REPEATABLE_READ：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。即使在多次查询之间有新增的数据满足该查询，这些新增的记录也会被忽略。该级别可以防止脏读和不可重复读。\n\n- TransactionDefinition.ISOLATION_SERIALIZABLE：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。\n\n## 事务传播行为\n\n所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：\n\n- TransactionDefinition.PROPAGATION_REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。\n- TransactionDefinition.PROPAGATION_REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起。\n- TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。\n- TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。\n- TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。\n- TransactionDefinition.PROPAGATION_MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。\n- TransactionDefinition.PROPAGATION_NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。\n\n这里需要指出的是，前面的六种事务传播行为是 Spring 从 EJB 中引入的，他们共享相同的概念。而 PROPAGATION_NESTED是 Spring 所特有的。以 PROPAGATION_NESTED 启动的事务内嵌于外部事务中（如果存在外部事务的话），此时，内嵌事务并不是一个独立的事务，它依赖于外部事务的存在，只有通过外部的事务提交，才能引起内部事务的提交，嵌套的子事务不能单独提交。如果熟悉 JDBC 中的保存点（SavePoint）的概念，那嵌套事务就很容易理解了，其实嵌套的子事务就是保存点的一个应用，一个事务中可以包括多个保存点，每一个嵌套子事务。另外，外部事务的回滚也会导致嵌套子事务的回滚。\n\n## 事务超时\n\n所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。\n\n## 事务的只读属性\n\n事务的只读属性是指，对事务性资源进行只读操作或者是读写操作。所谓事务性资源就是指那些被事务管理的资源，比如数据源、 JMS 资源，以及自定义的事务性资源等等。如果确定只对事务性资源进行只读操作，那么我们可以将事务标志为只读的，以提高事务处理的性能。在 TransactionDefinition 中以 boolean 类型来表示该事务是否只读。\n\n应用场合：\n\n如果你一次执行单条查询语句，则没有必要启用事务支持，数据库默认支持SQL执行期间的读一致性； \n如果你一次执行多条查询语句，例如统计查询，报表查询，在这种场景下，多条查询SQL必须保证整体的读一致性，否则，在前条SQL查询之后，后条SQL查询之前，数据被其他用户改变，则该次整体的统计查询将会出现读数据不一致的状态，此时，应该启用事务支持。\n【注意是一次执行多次查询来统计某些信息，这时为了保证数据整体的一致性，要用只读事务】\n\n怎样设置：\n\n对于只读查询，可以指定事务类型为readonly，即只读事务。\n由于只读事务不存在数据的修改，因此数据库将会为只读事务提供一些优化手段，例如Oracle对于只读事务，不启动回滚段，不记录回滚log。\n\n（1）在JDBC中，指定只读事务的办法为： connection.setReadOnly(true);\n\n（2）在Hibernate中，指定只读事务的办法为： session.setFlushMode(FlushMode.NEVER); \n此时，Hibernate也会为只读事务提供Session方面的一些优化手段\n\n（3）在Spring的Hibernate封装中，指定只读事务的办法为： bean配置文件中，prop属性增加“readOnly”\n或者用注解方式@Transactional(readOnly=true)\n【 if the transaction is marked as read-only, Spring will set the Hibernate Session’s flush mode to FLUSH_NEVER, \nand will set the JDBC transaction to read-only】也就是说在Spring中设置只读事务是利用上面两种方式\n\n## 事务的回滚规则\n\n通常情况下，如果在事务中抛出了未检查异常（继承自 RuntimeException 的异常），则默认将回滚事务。如果没有抛出任何异常，或者抛出了已检查异常，则仍然提交事务。这通常也是大多数开发者希望的处理方式，也是 EJB 中的默认处理方式。但是，我们可以根据需要人为控制事务在抛出某些未检查异常时任然提交事务，或者在抛出某些已检查异常时回滚事务。","slug":"spring数据库事务","published":1,"updated":"2019-09-01T14:22:38.858Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbll7002l4tjesu66tuzl","content":"<h1 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h1><h2 id=\"PlatformTransactionManager\"><a href=\"#PlatformTransactionManager\" class=\"headerlink\" title=\"PlatformTransactionManager\"></a>PlatformTransactionManager</h2><p>PlatformTransactionManager接口中定义了三个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Public interface <span class=\"title\">PlatformTransactionManager</span><span class=\"params\">()</span>...</span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">// Return a currently active transaction or create a new one, according to the specified propagation behavior（根据指定的传播行为，返回当前活动的事务或创建一个新事务。）</span></span><br><span class=\"line\">    <span class=\"function\">TransactionStatus <span class=\"title\">getTransaction</span><span class=\"params\">(TransactionDefinition definition)</span> <span class=\"keyword\">throws</span> TransactionException</span>; </span><br><span class=\"line\">    <span class=\"comment\">// Commit the given transaction, with regard to its status（使用事务目前的状态提交事务）</span></span><br><span class=\"line\">    <span class=\"function\">Void <span class=\"title\">commit</span><span class=\"params\">(TransactionStatus status)</span> <span class=\"keyword\">throws</span> TransactionException</span>;  </span><br><span class=\"line\">    <span class=\"comment\">// Perform a rollback of the given transaction（对执行的事务进行回滚）</span></span><br><span class=\"line\">    <span class=\"function\">Void <span class=\"title\">rollback</span><span class=\"params\">(TransactionStatus status)</span> <span class=\"keyword\">throws</span> TransactionException</span>;  </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>我们刚刚也说了Spring中PlatformTransactionManager根据不同持久层框架所对应的接口实现类,几个比较常见的如下图所示</p>\n<p><img src=\"http://wumu.sciento.cn/20190901203705.png\" alt=\"PlatformTransactionManager根据不同持久层框架所对应的接口实现\"></p>\n<p>比如我们在使用JDBC或者iBatis（就是Mybatis）进行数据持久化操作时,我们的xml配置通常如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 事务管理器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 数据源 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"TransactionDefinition\"><a href=\"#TransactionDefinition\" class=\"headerlink\" title=\"TransactionDefinition\"></a>TransactionDefinition</h2><p>事务管理器接口 <strong>PlatformTransactionManager</strong> 通过 <strong>getTransaction(TransactionDefinition definition)</strong> 方法来得到一个事务，这个方法里面的参数是 <strong>TransactionDefinition类</strong> ，这个类就定义了一些基本的事务属性。</p>\n<p><strong>那么什么是事务属性呢？</strong></p>\n<p>事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。事务属性包含了5个方面。 </p>\n<p><img src=\"http://wumu.sciento.cn/20190901203901.png\" alt=\"\"></p>\n<h3 id=\"TransactionDefinition接口中的方法如下：\"><a href=\"#TransactionDefinition接口中的方法如下：\" class=\"headerlink\" title=\"TransactionDefinition接口中的方法如下：\"></a>TransactionDefinition接口中的方法如下：</h3><p>TransactionDefinition接口中定义了5个方法以及一些表示事务属性的常量比如隔离级别、传播行为等等的常量。</p>\n<p>我下面只是列出了TransactionDefinition接口中的方法而没有给出接口中定义的常量，该接口中的常量信息会在后面依次介绍到。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TransactionDefinition</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回事务的传播行为</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPropagationBehavior</span><span class=\"params\">()</span></span>; </span><br><span class=\"line\">    <span class=\"comment\">// 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getIsolationLevel</span><span class=\"params\">()</span></span>; </span><br><span class=\"line\">    <span class=\"comment\">// 返回事务必须在多少秒内完成</span></span><br><span class=\"line\">    <span class=\"comment\">//返回事务的名字</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getName</span><span class=\"params\">()</span>；</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">int</span> <span class=\"title\">getTimeout</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">    <span class=\"comment\">// 返回是否优化为只读事务。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isReadOnly</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"TransactionStatus\"><a href=\"#TransactionStatus\" class=\"headerlink\" title=\"TransactionStatus\"></a>TransactionStatus</h2><p>PlatformTransactionManager.getTransaction(…) 方法返回一个 TransactionStatus 对象。返回的TransactionStatus 对象可能代表一个新的或已经存在的事务（如果在当前调用堆栈有一个符合条件的事务）。TransactionStatus 接口提供了一个简单的控制事务执行和查询事务状态的方法。该接口定义如清单3所示：</p>\n<h5 id=\"清单3-TransactionStatus-接口中定义的主要方法\"><a href=\"#清单3-TransactionStatus-接口中定义的主要方法\" class=\"headerlink\" title=\"清单3. TransactionStatus 接口中定义的主要方法\"></a>清单3. TransactionStatus 接口中定义的主要方法</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"keyword\">public</span>  <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TransactionStatus</span></span>&#123;``   ``<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isNewTransaction</span><span class=\"params\">()</span></span>;``   ``<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setRollbackOnly</span><span class=\"params\">()</span></span>;``   ``<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isRollbackOnly</span><span class=\"params\">()</span></span>;``&#125;`</span><br></pre></td></tr></table></figure>\n<h1 id=\"事务管理API分析\"><a href=\"#事务管理API分析\" class=\"headerlink\" title=\"事务管理API分析\"></a>事务管理API分析</h1><h2 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h2><p>隔离级别是指若干个并发的事务之间的隔离程度。TransactionDefinition 接口中定义了五个表示隔离级别的常量：</p>\n<ul>\n<li><p>TransactionDefinition.ISOLATION_DEFAULT：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是TransactionDefinition.ISOLATION_READ_COMMITTED。</p>\n</li>\n<li><p>TransactionDefinition.ISOLATION_READ_UNCOMMITTED：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读和不可重复读，因此很少使用该隔离级别。</p>\n</li>\n<li><p>TransactionDefinition.ISOLATION_READ_COMMITTED：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。</p>\n</li>\n<li><p>TransactionDefinition.ISOLATION_REPEATABLE_READ：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。即使在多次查询之间有新增的数据满足该查询，这些新增的记录也会被忽略。该级别可以防止脏读和不可重复读。</p>\n</li>\n<li><p>TransactionDefinition.ISOLATION_SERIALIZABLE：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</p>\n</li>\n</ul>\n<h2 id=\"事务传播行为\"><a href=\"#事务传播行为\" class=\"headerlink\" title=\"事务传播行为\"></a>事务传播行为</h2><p>所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：</p>\n<ul>\n<li>TransactionDefinition.PROPAGATION_REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li>\n<li>TransactionDefinition.PROPAGATION_REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li>\n<li>TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li>\n<li>TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li>\n<li>TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。</li>\n<li>TransactionDefinition.PROPAGATION_MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</li>\n<li>TransactionDefinition.PROPAGATION_NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</li>\n</ul>\n<p>这里需要指出的是，前面的六种事务传播行为是 Spring 从 EJB 中引入的，他们共享相同的概念。而 PROPAGATION_NESTED是 Spring 所特有的。以 PROPAGATION_NESTED 启动的事务内嵌于外部事务中（如果存在外部事务的话），此时，内嵌事务并不是一个独立的事务，它依赖于外部事务的存在，只有通过外部的事务提交，才能引起内部事务的提交，嵌套的子事务不能单独提交。如果熟悉 JDBC 中的保存点（SavePoint）的概念，那嵌套事务就很容易理解了，其实嵌套的子事务就是保存点的一个应用，一个事务中可以包括多个保存点，每一个嵌套子事务。另外，外部事务的回滚也会导致嵌套子事务的回滚。</p>\n<h2 id=\"事务超时\"><a href=\"#事务超时\" class=\"headerlink\" title=\"事务超时\"></a>事务超时</h2><p>所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。</p>\n<h2 id=\"事务的只读属性\"><a href=\"#事务的只读属性\" class=\"headerlink\" title=\"事务的只读属性\"></a>事务的只读属性</h2><p>事务的只读属性是指，对事务性资源进行只读操作或者是读写操作。所谓事务性资源就是指那些被事务管理的资源，比如数据源、 JMS 资源，以及自定义的事务性资源等等。如果确定只对事务性资源进行只读操作，那么我们可以将事务标志为只读的，以提高事务处理的性能。在 TransactionDefinition 中以 boolean 类型来表示该事务是否只读。</p>\n<p>应用场合：</p>\n<p>如果你一次执行单条查询语句，则没有必要启用事务支持，数据库默认支持SQL执行期间的读一致性；<br>如果你一次执行多条查询语句，例如统计查询，报表查询，在这种场景下，多条查询SQL必须保证整体的读一致性，否则，在前条SQL查询之后，后条SQL查询之前，数据被其他用户改变，则该次整体的统计查询将会出现读数据不一致的状态，此时，应该启用事务支持。<br>【注意是一次执行多次查询来统计某些信息，这时为了保证数据整体的一致性，要用只读事务】</p>\n<p>怎样设置：</p>\n<p>对于只读查询，可以指定事务类型为readonly，即只读事务。<br>由于只读事务不存在数据的修改，因此数据库将会为只读事务提供一些优化手段，例如Oracle对于只读事务，不启动回滚段，不记录回滚log。</p>\n<p>（1）在JDBC中，指定只读事务的办法为： connection.setReadOnly(true);</p>\n<p>（2）在Hibernate中，指定只读事务的办法为： session.setFlushMode(FlushMode.NEVER);<br>此时，Hibernate也会为只读事务提供Session方面的一些优化手段</p>\n<p>（3）在Spring的Hibernate封装中，指定只读事务的办法为： bean配置文件中，prop属性增加“readOnly”<br>或者用注解方式@Transactional(readOnly=true)<br>【 if the transaction is marked as read-only, Spring will set the Hibernate Session’s flush mode to FLUSH_NEVER,<br>and will set the JDBC transaction to read-only】也就是说在Spring中设置只读事务是利用上面两种方式</p>\n<h2 id=\"事务的回滚规则\"><a href=\"#事务的回滚规则\" class=\"headerlink\" title=\"事务的回滚规则\"></a>事务的回滚规则</h2><p>通常情况下，如果在事务中抛出了未检查异常（继承自 RuntimeException 的异常），则默认将回滚事务。如果没有抛出任何异常，或者抛出了已检查异常，则仍然提交事务。这通常也是大多数开发者希望的处理方式，也是 EJB 中的默认处理方式。但是，我们可以根据需要人为控制事务在抛出某些未检查异常时任然提交事务，或者在抛出某些已检查异常时回滚事务。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h1><h2 id=\"PlatformTransactionManager\"><a href=\"#PlatformTransactionManager\" class=\"headerlink\" title=\"PlatformTransactionManager\"></a>PlatformTransactionManager</h2><p>PlatformTransactionManager接口中定义了三个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Public interface <span class=\"title\">PlatformTransactionManager</span><span class=\"params\">()</span>...</span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">// Return a currently active transaction or create a new one, according to the specified propagation behavior（根据指定的传播行为，返回当前活动的事务或创建一个新事务。）</span></span><br><span class=\"line\">    <span class=\"function\">TransactionStatus <span class=\"title\">getTransaction</span><span class=\"params\">(TransactionDefinition definition)</span> <span class=\"keyword\">throws</span> TransactionException</span>; </span><br><span class=\"line\">    <span class=\"comment\">// Commit the given transaction, with regard to its status（使用事务目前的状态提交事务）</span></span><br><span class=\"line\">    <span class=\"function\">Void <span class=\"title\">commit</span><span class=\"params\">(TransactionStatus status)</span> <span class=\"keyword\">throws</span> TransactionException</span>;  </span><br><span class=\"line\">    <span class=\"comment\">// Perform a rollback of the given transaction（对执行的事务进行回滚）</span></span><br><span class=\"line\">    <span class=\"function\">Void <span class=\"title\">rollback</span><span class=\"params\">(TransactionStatus status)</span> <span class=\"keyword\">throws</span> TransactionException</span>;  </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>我们刚刚也说了Spring中PlatformTransactionManager根据不同持久层框架所对应的接口实现类,几个比较常见的如下图所示</p>\n<p><img src=\"http://wumu.sciento.cn/20190901203705.png\" alt=\"PlatformTransactionManager根据不同持久层框架所对应的接口实现\"></p>\n<p>比如我们在使用JDBC或者iBatis（就是Mybatis）进行数据持久化操作时,我们的xml配置通常如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 事务管理器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 数据源 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"TransactionDefinition\"><a href=\"#TransactionDefinition\" class=\"headerlink\" title=\"TransactionDefinition\"></a>TransactionDefinition</h2><p>事务管理器接口 <strong>PlatformTransactionManager</strong> 通过 <strong>getTransaction(TransactionDefinition definition)</strong> 方法来得到一个事务，这个方法里面的参数是 <strong>TransactionDefinition类</strong> ，这个类就定义了一些基本的事务属性。</p>\n<p><strong>那么什么是事务属性呢？</strong></p>\n<p>事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。事务属性包含了5个方面。 </p>\n<p><img src=\"http://wumu.sciento.cn/20190901203901.png\" alt=\"\"></p>\n<h3 id=\"TransactionDefinition接口中的方法如下：\"><a href=\"#TransactionDefinition接口中的方法如下：\" class=\"headerlink\" title=\"TransactionDefinition接口中的方法如下：\"></a>TransactionDefinition接口中的方法如下：</h3><p>TransactionDefinition接口中定义了5个方法以及一些表示事务属性的常量比如隔离级别、传播行为等等的常量。</p>\n<p>我下面只是列出了TransactionDefinition接口中的方法而没有给出接口中定义的常量，该接口中的常量信息会在后面依次介绍到。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TransactionDefinition</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回事务的传播行为</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPropagationBehavior</span><span class=\"params\">()</span></span>; </span><br><span class=\"line\">    <span class=\"comment\">// 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getIsolationLevel</span><span class=\"params\">()</span></span>; </span><br><span class=\"line\">    <span class=\"comment\">// 返回事务必须在多少秒内完成</span></span><br><span class=\"line\">    <span class=\"comment\">//返回事务的名字</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getName</span><span class=\"params\">()</span>；</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">int</span> <span class=\"title\">getTimeout</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">    <span class=\"comment\">// 返回是否优化为只读事务。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isReadOnly</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"TransactionStatus\"><a href=\"#TransactionStatus\" class=\"headerlink\" title=\"TransactionStatus\"></a>TransactionStatus</h2><p>PlatformTransactionManager.getTransaction(…) 方法返回一个 TransactionStatus 对象。返回的TransactionStatus 对象可能代表一个新的或已经存在的事务（如果在当前调用堆栈有一个符合条件的事务）。TransactionStatus 接口提供了一个简单的控制事务执行和查询事务状态的方法。该接口定义如清单3所示：</p>\n<h5 id=\"清单3-TransactionStatus-接口中定义的主要方法\"><a href=\"#清单3-TransactionStatus-接口中定义的主要方法\" class=\"headerlink\" title=\"清单3. TransactionStatus 接口中定义的主要方法\"></a>清单3. TransactionStatus 接口中定义的主要方法</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`<span class=\"keyword\">public</span>  <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TransactionStatus</span></span>&#123;``   ``<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isNewTransaction</span><span class=\"params\">()</span></span>;``   ``<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setRollbackOnly</span><span class=\"params\">()</span></span>;``   ``<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isRollbackOnly</span><span class=\"params\">()</span></span>;``&#125;`</span><br></pre></td></tr></table></figure>\n<h1 id=\"事务管理API分析\"><a href=\"#事务管理API分析\" class=\"headerlink\" title=\"事务管理API分析\"></a>事务管理API分析</h1><h2 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h2><p>隔离级别是指若干个并发的事务之间的隔离程度。TransactionDefinition 接口中定义了五个表示隔离级别的常量：</p>\n<ul>\n<li><p>TransactionDefinition.ISOLATION_DEFAULT：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是TransactionDefinition.ISOLATION_READ_COMMITTED。</p>\n</li>\n<li><p>TransactionDefinition.ISOLATION_READ_UNCOMMITTED：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读和不可重复读，因此很少使用该隔离级别。</p>\n</li>\n<li><p>TransactionDefinition.ISOLATION_READ_COMMITTED：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。</p>\n</li>\n<li><p>TransactionDefinition.ISOLATION_REPEATABLE_READ：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。即使在多次查询之间有新增的数据满足该查询，这些新增的记录也会被忽略。该级别可以防止脏读和不可重复读。</p>\n</li>\n<li><p>TransactionDefinition.ISOLATION_SERIALIZABLE：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</p>\n</li>\n</ul>\n<h2 id=\"事务传播行为\"><a href=\"#事务传播行为\" class=\"headerlink\" title=\"事务传播行为\"></a>事务传播行为</h2><p>所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：</p>\n<ul>\n<li>TransactionDefinition.PROPAGATION_REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li>\n<li>TransactionDefinition.PROPAGATION_REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li>\n<li>TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li>\n<li>TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li>\n<li>TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。</li>\n<li>TransactionDefinition.PROPAGATION_MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</li>\n<li>TransactionDefinition.PROPAGATION_NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</li>\n</ul>\n<p>这里需要指出的是，前面的六种事务传播行为是 Spring 从 EJB 中引入的，他们共享相同的概念。而 PROPAGATION_NESTED是 Spring 所特有的。以 PROPAGATION_NESTED 启动的事务内嵌于外部事务中（如果存在外部事务的话），此时，内嵌事务并不是一个独立的事务，它依赖于外部事务的存在，只有通过外部的事务提交，才能引起内部事务的提交，嵌套的子事务不能单独提交。如果熟悉 JDBC 中的保存点（SavePoint）的概念，那嵌套事务就很容易理解了，其实嵌套的子事务就是保存点的一个应用，一个事务中可以包括多个保存点，每一个嵌套子事务。另外，外部事务的回滚也会导致嵌套子事务的回滚。</p>\n<h2 id=\"事务超时\"><a href=\"#事务超时\" class=\"headerlink\" title=\"事务超时\"></a>事务超时</h2><p>所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。</p>\n<h2 id=\"事务的只读属性\"><a href=\"#事务的只读属性\" class=\"headerlink\" title=\"事务的只读属性\"></a>事务的只读属性</h2><p>事务的只读属性是指，对事务性资源进行只读操作或者是读写操作。所谓事务性资源就是指那些被事务管理的资源，比如数据源、 JMS 资源，以及自定义的事务性资源等等。如果确定只对事务性资源进行只读操作，那么我们可以将事务标志为只读的，以提高事务处理的性能。在 TransactionDefinition 中以 boolean 类型来表示该事务是否只读。</p>\n<p>应用场合：</p>\n<p>如果你一次执行单条查询语句，则没有必要启用事务支持，数据库默认支持SQL执行期间的读一致性；<br>如果你一次执行多条查询语句，例如统计查询，报表查询，在这种场景下，多条查询SQL必须保证整体的读一致性，否则，在前条SQL查询之后，后条SQL查询之前，数据被其他用户改变，则该次整体的统计查询将会出现读数据不一致的状态，此时，应该启用事务支持。<br>【注意是一次执行多次查询来统计某些信息，这时为了保证数据整体的一致性，要用只读事务】</p>\n<p>怎样设置：</p>\n<p>对于只读查询，可以指定事务类型为readonly，即只读事务。<br>由于只读事务不存在数据的修改，因此数据库将会为只读事务提供一些优化手段，例如Oracle对于只读事务，不启动回滚段，不记录回滚log。</p>\n<p>（1）在JDBC中，指定只读事务的办法为： connection.setReadOnly(true);</p>\n<p>（2）在Hibernate中，指定只读事务的办法为： session.setFlushMode(FlushMode.NEVER);<br>此时，Hibernate也会为只读事务提供Session方面的一些优化手段</p>\n<p>（3）在Spring的Hibernate封装中，指定只读事务的办法为： bean配置文件中，prop属性增加“readOnly”<br>或者用注解方式@Transactional(readOnly=true)<br>【 if the transaction is marked as read-only, Spring will set the Hibernate Session’s flush mode to FLUSH_NEVER,<br>and will set the JDBC transaction to read-only】也就是说在Spring中设置只读事务是利用上面两种方式</p>\n<h2 id=\"事务的回滚规则\"><a href=\"#事务的回滚规则\" class=\"headerlink\" title=\"事务的回滚规则\"></a>事务的回滚规则</h2><p>通常情况下，如果在事务中抛出了未检查异常（继承自 RuntimeException 的异常），则默认将回滚事务。如果没有抛出任何异常，或者抛出了已检查异常，则仍然提交事务。这通常也是大多数开发者希望的处理方式，也是 EJB 中的默认处理方式。但是，我们可以根据需要人为控制事务在抛出某些未检查异常时任然提交事务，或者在抛出某些已检查异常时回滚事务。</p>\n"},{"_content":"","source":"_posts/java/Untitled.md","raw":"","slug":"java/Untitled","published":1,"date":"2020-10-18T05:13:05.222Z","updated":"2020-10-18T05:13:05.222Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbll8002n4tjexzv8an3y","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"lorawan协议","date":"2018-12-05T13:32:24.000Z","_content":"\n## Introduction\n\n------\n\nThe protocol between the gateway and the server is purposefully very basic and for demonstration purpose only, or for use on private and reliable networks.\n\nThere is no authentication of the gateway or the server, and the acknowledges are only used for network quality assessment, not to correct UDP datagrams losses (no retries).\n\n## System schematic and definitions\n\n------\n\n```\n ((( Y )))\n     |\n     |\n+ - -|- - - - - - - - - - - - - +        xxxxxxxxxxxx          +--------+\n| +--+-----------+     +------+ |       xx x  x     xxx        |        |\n| |              |     |      | |      xx  Internet  xx        |        |\n| | Concentrator |<--->| Host |<-------xx     or    xx-------->|        |\n| |              | SPI |      | |      xx  Intranet  xx        | Server |\n| +--------------+     +------+ |       xxxx   x   xxxx        |        |\n|    ^                     ^    |           xxxxxxxx           |        |\n|    | PPS +-------+ NMEA  |    |                              |        |\n|    +-----|  GPS  |-------+    |                              +--------+\n|          | (opt) |            |\n|          +-------+            |\n|                               |\n|             Gateway           |\n+- - - - - - - - - - - - - - - -+\n```\n\n**Concentrator**: radio RX/TX board, based on Semtech multichannel modems (SX130x), transceivers (SX135x) and/or low-power stand-alone modems (SX127x).\n\n**Host**: embedded computer on which the packet forwarder is run. Drives the concentrator through a SPI link.\n\n**GPS**: GNSS (GPS, Galileo, GLONASS, etc) receiver with a “1 Pulse Per Second” output and a serial link to the host to send NMEA frames containing time and geographical coordinates data. Optional.\n\n**Gateway**: a device composed of at least one radio concentrator, a host, some network connection to the internet or a private network (Ethernet, 3G, Wifi, microwave link), and optionally a GPS receiver for synchronization.\n\n**Server**: an abstract computer that will process the RF packets received and forwarded by the gateway, and issue RF packets in response that the gateway will have to emit.\n\nIt is assumed that the gateway can be behind a NAT or a firewall stopping any incoming connection. It is assumed that the server has an static IP address (or an address solvable through a DNS service) and is able to receive incoming connections on a specific port.\n\n## Upstream protocol\n\n------\n\n### Sequence diagram\n\n```\n+---------+                                                    +---------+\n| Gateway |                                                    | Server  |\n+---------+                                                    +---------+\n     | -----------------------------------\\                         |\n     |-| When 1-N RF packets are received |                         |\n     | ------------------------------------                         |\n     |                                                              |\n     | PUSH_DATA (token X, GW MAC, JSON payload)                    |\n     |------------------------------------------------------------->|\n     |                                                              |\n     |                                           PUSH_ACK (token X) |\n     |<-------------------------------------------------------------|\n     |                              ------------------------------\\ |\n     |                              | process packets *after* ack |-|\n     |                              ------------------------------- |\n     |                                                              |\n```\n\n### PUSH_DATA packet\n\nThat packet type is used by the gateway mainly to forward the RF packets received, and associated metadata, to the server.\n\n| Bytes  | Function                                                   |\n| ------ | ---------------------------------------------------------- |\n| 0      | protocol version = 2                                       |\n| 1-2    | random token                                               |\n| 3      | PUSH_DATA identifier 0x00                                  |\n| 4-11   | Gateway unique identifier (MAC address)                    |\n| 12-end | JSON object, starting with {, ending with }, see section 4 |\n\n### PUSH_ACK packet\n\nThat packet type is used by the server to acknowledge immediately all the PUSH_DATA packets received.\n\n| Bytes | Function                                          |\n| ----- | ------------------------------------------------- |\n| 0     | protocol version = 2                              |\n| 1-2   | same token as the PUSH_DATA packet to acknowledge |\n| 3     | PUSH_ACK identifier 0x01                          |\n\n## Upstream JSON data structure\n\n------\n\nThe root object can contain an array named “rxpk”:\n\n```\n{\n\t\"rxpk\":[ {...}, ...]\n}\n```\n\nThat array contains at least one JSON object, each object contain a RF packet and associated metadata with the following fields:\n\n| Name | Type   | Function                                                    |\n| ---- | ------ | ----------------------------------------------------------- |\n| time | string | UTC time of pkt RX, us precision, ISO 8601 ‘compact’ format |\n| tmst | number | Internal timestamp of “RX finished” event (32b unsigned)    |\n| freq | number | RX central frequency in MHz (unsigned float, Hz precision)  |\n| chan | number | Concentrator “IF” channel used for RX (unsigned integer)    |\n| rfch | number | Concentrator “RF chain” used for RX (unsigned integer)      |\n| stat | number | CRC status: 1 = OK, -1 = fail, 0 = no CRC                   |\n| modu | string | Modulation identifier “LORA” or “FSK”                       |\n| datr | string | LoRa datarate identifier (eg. SF12BW500)                    |\n| datr | number | FSK datarate (unsigned, in bits per second)                 |\n| codr | string | LoRa ECC coding rate identifier                             |\n| rssi | number | RSSI in dBm (signed integer, 1 dB precision)                |\n| lsnr | number | Lora SNR ratio in dB (signed float, 0.1 dB precision)       |\n| size | number | RF packet payload size in bytes (unsigned integer)          |\n| data | string | Base64 encoded RF packet payload, padded                    |\n\nExample (white-spaces, indentation and newlines added for readability):\n\n```\n{\"rxpk\":[\n\t{\n\t\t\"time\":\"2013-03-31T16:21:17.528002Z\",\n\t\t\"tmst\":3512348611,\n\t\t\"chan\":2,\n\t\t\"rfch\":0,\n\t\t\"freq\":866.349812,\n\t\t\"stat\":1,\n\t\t\"modu\":\"LORA\",\n\t\t\"datr\":\"SF7BW125\",\n\t\t\"codr\":\"4/6\",\n\t\t\"rssi\":-35,\n\t\t\"lsnr\":5.1,\n\t\t\"size\":32,\n\t\t\"data\":\"-DS4CGaDCdG+48eJNM3Vai-zDpsR71Pn9CPA9uCON84\"\n\t},{\n\t\t\"time\":\"2013-03-31T16:21:17.530974Z\",\n\t\t\"tmst\":3512348514,\n\t\t\"chan\":9,\n\t\t\"rfch\":1,\n\t\t\"freq\":869.1,\n\t\t\"stat\":1,\n\t\t\"modu\":\"FSK\",\n\t\t\"datr\":50000,\n\t\t\"rssi\":-75,\n\t\t\"size\":16,\n\t\t\"data\":\"VEVTVF9QQUNLRVRfMTIzNA==\"\n\t},{\n\t\t\"time\":\"2013-03-31T16:21:17.532038Z\",\n\t\t\"tmst\":3316387610,\n\t\t\"chan\":0,\n\t\t\"rfch\":0,\n\t\t\"freq\":863.00981,\n\t\t\"stat\":1,\n\t\t\"modu\":\"LORA\",\n\t\t\"datr\":\"SF10BW125\",\n\t\t\"codr\":\"4/7\",\n\t\t\"rssi\":-38,\n\t\t\"lsnr\":5.5,\n\t\t\"size\":32,\n\t\t\"data\":\"ysgRl452xNLep9S1NTIg2lomKDxUgn3DJ7DE+b00Ass\"\n\t}\n]}\n```\n\nThe root object can also contain an object named “stat” :\n\n```\n{\n\t\"rxpk\":[ {...}, ...],\n\t\"stat\":{...}\n}\n```\n\nIt is possible for a packet to contain no “rxpk” array but a “stat” object.\n\n```\n{\n\t\"stat\":{...}\n}\n```\n\nThat object contains the status of the gateway, with the following fields:\n\n| Name | Type   | Function                                                     |\n| ---- | ------ | ------------------------------------------------------------ |\n| time | string | UTC ‘system’ time of the gateway, ISO 8601 ‘expanded’ format |\n| lati | number | GPS latitude of the gateway in degree (float, N is +)        |\n| long | number | GPS latitude of the gateway in degree (float, E is +)        |\n| alti | number | GPS altitude of the gateway in meter RX (integer)            |\n| rxnb | number | Number of radio packets received (unsigned integer)          |\n| rxok | number | Number of radio packets received with a valid PHY CRC        |\n| rxfw | number | Number of radio packets forwarded (unsigned integer)         |\n| ackr | number | Percentage of upstream datagrams that were acknowledged      |\n| dwnb | number | Number of downlink datagrams received (unsigned integer)     |\n| txnb | number | Number of packets emitted (unsigned integer)                 |\n\nExample (white-spaces, indentation and newlines added for readability):\n\n```\n{\"stat\":{\n\t\"time\":\"2014-01-12 08:59:28 GMT\",\n\t\"lati\":46.24000,\n\t\"long\":3.25230,\n\t\"alti\":145,\n\t\"rxnb\":2,\n\t\"rxok\":2,\n\t\"rxfw\":2,\n\t\"ackr\":100.0,\n\t\"dwnb\":2,\n\t\"txnb\":2\n}}\n```\n\n## Downstream protocol\n\n------\n\n### Sequence diagram\n\n```\n+---------+                                                    +---------+\n| Gateway |                                                    | Server  |\n+---------+                                                    +---------+\n     | -----------------------------------\\                         |\n     |-| Every N seconds (keepalive time) |                         |\n     | ------------------------------------                         |\n     |                                                              |\n     | PULL_DATA (token Y, MAC@)                                    |\n     |------------------------------------------------------------->|\n     |                                                              |\n     |                                           PULL_ACK (token Y) |\n     |<-------------------------------------------------------------|\n     |                                                              |\n\n+---------+                                                    +---------+\n| Gateway |                                                    | Server  |\n+---------+                                                    +---------+\n     |      ------------------------------------------------------\\ |\n     |      | Anytime after first PULL_DATA for each packet to TX |-|\n     |      ------------------------------------------------------- |\n     |                                                              |\n     |                            PULL_RESP (token Z, JSON payload) |\n     |<-------------------------------------------------------------|\n     |                                                              |\n     | TX_ACK (token Z, JSON payload)                               |\n     |------------------------------------------------------------->|\n```\n\n### PULL_DATA packet\n\nThat packet type is used by the gateway to poll data from the server.\n\nThis data exchange is initialized by the gateway because it might be impossible for the server to send packets to the gateway if the gateway is behind a NAT.\n\nWhen the gateway initialize the exchange, the network route towards the server will open and will allow for packets to flow both directions. The gateway must periodically send PULL_DATA packets to be sure the network route stays open for the server to be used at any time.\n\n| Bytes | Function                                |\n| ----- | --------------------------------------- |\n| 0     | protocol version = 2                    |\n| 1-2   | random token                            |\n| 3     | PULL_DATA identifier 0x02               |\n| 4-11  | Gateway unique identifier (MAC address) |\n\n###  PULL_ACK packet\n\nThat packet type is used by the server to confirm that the network route is open and that the server can send PULL_RESP packets at any time.\n\n| Bytes | Function                                          |\n| ----- | ------------------------------------------------- |\n| 0     | protocol version = 2                              |\n| 1-2   | same token as the PULL_DATA packet to acknowledge |\n| 3     | PULL_ACK identifier 0x04                          |\n\n### PULL_RESP packet\n\nThat packet type is used by the server to send RF packets and associated metadata that will have to be emitted by the gateway.\n\n| Bytes | Function                                                   |\n| ----- | ---------------------------------------------------------- |\n| 0     | protocol version = 2                                       |\n| 1-2   | random token                                               |\n| 3     | PULL_RESP identifier 0x03                                  |\n| 4-end | JSON object, starting with {, ending with }, see section 6 |\n\n### TX_ACK packet\n\nThat packet type is used by the gateway to send a feedback to the server to inform if a downlink request has been accepted or rejected by the gateway. The datagram may optionnaly contain a JSON string to give more details on acknoledge. If no JSON is present (empty string), this means than no error occured.\n\n| Bytes  | Function                                                     |\n| ------ | ------------------------------------------------------------ |\n| 0      | protocol version = 2                                         |\n| 1-2    | same token as the PULL_RESP packet to acknowledge            |\n| 3      | TX_ACK identifier 0x05                                       |\n| 4-11   | Gateway unique identifier (MAC address)                      |\n| 12-end | [optional] JSON object, starting with {, ending with }, see section 6 |\n\n## Downstream JSON data structure\n\n------\n\nThe root object of PULL_RESP packet must contain an object named “txpk”:\n\n```\n{\n\t\"txpk\": {...}\n}\n```\n\nThat object contain a RF packet to be emitted and associated metadata with the following fields:\n\n| Name | Type   | Function                                                     |\n| ---- | ------ | ------------------------------------------------------------ |\n| imme | bool   | Send packet immediately (will ignore tmst & time)            |\n| tmst | number | Send packet on a certain timestamp value (will ignore time)  |\n| time | string | Send packet at a certain time (GPS synchronization required) |\n| freq | number | TX central frequency in MHz (unsigned float, Hz precision)   |\n| rfch | number | Concentrator “RF chain” used for TX (unsigned integer)       |\n| powe | number | TX output power in dBm (unsigned integer, dBm precision)     |\n| modu | string | Modulation identifier “LORA” or “FSK”                        |\n| datr | string | LoRa datarate identifier (eg. SF12BW500)                     |\n| datr | number | FSK datarate (unsigned, in bits per second)                  |\n| codr | string | LoRa ECC coding rate identifier                              |\n| fdev | number | FSK frequency deviation (unsigned integer, in Hz)            |\n| ipol | bool   | Lora modulation polarization inversion                       |\n| prea | number | RF preamble size (unsigned integer)                          |\n| size | number | RF packet payload size in bytes (unsigned integer)           |\n| data | string | Base64 encoded RF packet payload, padding optional           |\n| ncrc | bool   | If true, disable the CRC of the physical layer (optional)    |\n\nMost fields are optional. If a field is omitted, default parameters will be used.\n\nExamples (white-spaces, indentation and newlines added for readability):\n\n```\n{\"txpk\":{\n\t\"imme\":true,\n\t\"freq\":864.123456,\n\t\"rfch\":0,\n\t\"powe\":14,\n\t\"modu\":\"LORA\",\n\t\"datr\":\"SF11BW125\",\n\t\"codr\":\"4/6\",\n\t\"ipol\":false,\n\t\"size\":32,\n\t\"data\":\"H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v\"\n}}\n{\"txpk\":{\n\t\"imme\":true,\n\t\"freq\":861.3,\n\t\"rfch\":0,\n\t\"powe\":12,\n\t\"modu\":\"FSK\",\n\t\"datr\":50000,\n\t\"fdev\":3000,\n\t\"size\":32,\n\t\"data\":\"H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v\"\n}}\n```\n\nThe root object of TX_ACK packet must contain an object named “txpk_ack”:\n\n```\n{\n\t\"txpk_ack\": {...}\n}\n```\n\nThat object contain status information concerning the associated PULL_RESP packet.\n\n| Name  | Type   | Function                                                     |\n| ----- | ------ | ------------------------------------------------------------ |\n| error | string | Indication about success or type of failure that occured for downlink request. |\n\nThe possible values of “error” field are:\n\n| Value            | Definition                                                   |\n| ---------------- | ------------------------------------------------------------ |\n| NONE             | Packet has been programmed for downlink                      |\n| TOO_LATE         | Rejected because it was already too late to program this packet for downlink |\n| TOO_EARLY        | Rejected because downlink packet timestamp is too much in advance |\n| COLLISION_PACKET | Rejected because there was already a packet programmed in requested timeframe |\n| COLLISION_BEACON | Rejected because there was already a beacon planned in requested timeframe |\n| TX_FREQ          | Rejected because requested frequency is not supported by TX RF chain |\n| TX_POWER         | Rejected because requested power is not supported by gateway |\n| GPS_UNLOCKED     | Rejected because GPS is unlocked, so GPS timestamp cannot be used |\n\nExamples (white-spaces, indentation and newlines added for readability):\n\n```\n{\"txpk_ack\":{\n\t\"error\":\"COLLISION_PACKET\"\n}}\n```\n\n## Revisions\n\n------\n\n### v1.3\n\n- Added downlink feedback from gateway to server (PULL_RESP -> TX_ACK)\n\n### v1.2\n\n- Added value of FSK bitrate for upstream.\n- Added parameters for FSK bitrate and frequency deviation for downstream.\n\n### v1.1\n\n- Added syntax for status report JSON object on upstream.\n\n### v1.0\n\n- Initial version.","source":"_posts/lorawan协议.md","raw":"---\ntitle: lorawan协议\ndate: 2018-12-05 21:32:24\ntags:\n- lorawan\n---\n\n## Introduction\n\n------\n\nThe protocol between the gateway and the server is purposefully very basic and for demonstration purpose only, or for use on private and reliable networks.\n\nThere is no authentication of the gateway or the server, and the acknowledges are only used for network quality assessment, not to correct UDP datagrams losses (no retries).\n\n## System schematic and definitions\n\n------\n\n```\n ((( Y )))\n     |\n     |\n+ - -|- - - - - - - - - - - - - +        xxxxxxxxxxxx          +--------+\n| +--+-----------+     +------+ |       xx x  x     xxx        |        |\n| |              |     |      | |      xx  Internet  xx        |        |\n| | Concentrator |<--->| Host |<-------xx     or    xx-------->|        |\n| |              | SPI |      | |      xx  Intranet  xx        | Server |\n| +--------------+     +------+ |       xxxx   x   xxxx        |        |\n|    ^                     ^    |           xxxxxxxx           |        |\n|    | PPS +-------+ NMEA  |    |                              |        |\n|    +-----|  GPS  |-------+    |                              +--------+\n|          | (opt) |            |\n|          +-------+            |\n|                               |\n|             Gateway           |\n+- - - - - - - - - - - - - - - -+\n```\n\n**Concentrator**: radio RX/TX board, based on Semtech multichannel modems (SX130x), transceivers (SX135x) and/or low-power stand-alone modems (SX127x).\n\n**Host**: embedded computer on which the packet forwarder is run. Drives the concentrator through a SPI link.\n\n**GPS**: GNSS (GPS, Galileo, GLONASS, etc) receiver with a “1 Pulse Per Second” output and a serial link to the host to send NMEA frames containing time and geographical coordinates data. Optional.\n\n**Gateway**: a device composed of at least one radio concentrator, a host, some network connection to the internet or a private network (Ethernet, 3G, Wifi, microwave link), and optionally a GPS receiver for synchronization.\n\n**Server**: an abstract computer that will process the RF packets received and forwarded by the gateway, and issue RF packets in response that the gateway will have to emit.\n\nIt is assumed that the gateway can be behind a NAT or a firewall stopping any incoming connection. It is assumed that the server has an static IP address (or an address solvable through a DNS service) and is able to receive incoming connections on a specific port.\n\n## Upstream protocol\n\n------\n\n### Sequence diagram\n\n```\n+---------+                                                    +---------+\n| Gateway |                                                    | Server  |\n+---------+                                                    +---------+\n     | -----------------------------------\\                         |\n     |-| When 1-N RF packets are received |                         |\n     | ------------------------------------                         |\n     |                                                              |\n     | PUSH_DATA (token X, GW MAC, JSON payload)                    |\n     |------------------------------------------------------------->|\n     |                                                              |\n     |                                           PUSH_ACK (token X) |\n     |<-------------------------------------------------------------|\n     |                              ------------------------------\\ |\n     |                              | process packets *after* ack |-|\n     |                              ------------------------------- |\n     |                                                              |\n```\n\n### PUSH_DATA packet\n\nThat packet type is used by the gateway mainly to forward the RF packets received, and associated metadata, to the server.\n\n| Bytes  | Function                                                   |\n| ------ | ---------------------------------------------------------- |\n| 0      | protocol version = 2                                       |\n| 1-2    | random token                                               |\n| 3      | PUSH_DATA identifier 0x00                                  |\n| 4-11   | Gateway unique identifier (MAC address)                    |\n| 12-end | JSON object, starting with {, ending with }, see section 4 |\n\n### PUSH_ACK packet\n\nThat packet type is used by the server to acknowledge immediately all the PUSH_DATA packets received.\n\n| Bytes | Function                                          |\n| ----- | ------------------------------------------------- |\n| 0     | protocol version = 2                              |\n| 1-2   | same token as the PUSH_DATA packet to acknowledge |\n| 3     | PUSH_ACK identifier 0x01                          |\n\n## Upstream JSON data structure\n\n------\n\nThe root object can contain an array named “rxpk”:\n\n```\n{\n\t\"rxpk\":[ {...}, ...]\n}\n```\n\nThat array contains at least one JSON object, each object contain a RF packet and associated metadata with the following fields:\n\n| Name | Type   | Function                                                    |\n| ---- | ------ | ----------------------------------------------------------- |\n| time | string | UTC time of pkt RX, us precision, ISO 8601 ‘compact’ format |\n| tmst | number | Internal timestamp of “RX finished” event (32b unsigned)    |\n| freq | number | RX central frequency in MHz (unsigned float, Hz precision)  |\n| chan | number | Concentrator “IF” channel used for RX (unsigned integer)    |\n| rfch | number | Concentrator “RF chain” used for RX (unsigned integer)      |\n| stat | number | CRC status: 1 = OK, -1 = fail, 0 = no CRC                   |\n| modu | string | Modulation identifier “LORA” or “FSK”                       |\n| datr | string | LoRa datarate identifier (eg. SF12BW500)                    |\n| datr | number | FSK datarate (unsigned, in bits per second)                 |\n| codr | string | LoRa ECC coding rate identifier                             |\n| rssi | number | RSSI in dBm (signed integer, 1 dB precision)                |\n| lsnr | number | Lora SNR ratio in dB (signed float, 0.1 dB precision)       |\n| size | number | RF packet payload size in bytes (unsigned integer)          |\n| data | string | Base64 encoded RF packet payload, padded                    |\n\nExample (white-spaces, indentation and newlines added for readability):\n\n```\n{\"rxpk\":[\n\t{\n\t\t\"time\":\"2013-03-31T16:21:17.528002Z\",\n\t\t\"tmst\":3512348611,\n\t\t\"chan\":2,\n\t\t\"rfch\":0,\n\t\t\"freq\":866.349812,\n\t\t\"stat\":1,\n\t\t\"modu\":\"LORA\",\n\t\t\"datr\":\"SF7BW125\",\n\t\t\"codr\":\"4/6\",\n\t\t\"rssi\":-35,\n\t\t\"lsnr\":5.1,\n\t\t\"size\":32,\n\t\t\"data\":\"-DS4CGaDCdG+48eJNM3Vai-zDpsR71Pn9CPA9uCON84\"\n\t},{\n\t\t\"time\":\"2013-03-31T16:21:17.530974Z\",\n\t\t\"tmst\":3512348514,\n\t\t\"chan\":9,\n\t\t\"rfch\":1,\n\t\t\"freq\":869.1,\n\t\t\"stat\":1,\n\t\t\"modu\":\"FSK\",\n\t\t\"datr\":50000,\n\t\t\"rssi\":-75,\n\t\t\"size\":16,\n\t\t\"data\":\"VEVTVF9QQUNLRVRfMTIzNA==\"\n\t},{\n\t\t\"time\":\"2013-03-31T16:21:17.532038Z\",\n\t\t\"tmst\":3316387610,\n\t\t\"chan\":0,\n\t\t\"rfch\":0,\n\t\t\"freq\":863.00981,\n\t\t\"stat\":1,\n\t\t\"modu\":\"LORA\",\n\t\t\"datr\":\"SF10BW125\",\n\t\t\"codr\":\"4/7\",\n\t\t\"rssi\":-38,\n\t\t\"lsnr\":5.5,\n\t\t\"size\":32,\n\t\t\"data\":\"ysgRl452xNLep9S1NTIg2lomKDxUgn3DJ7DE+b00Ass\"\n\t}\n]}\n```\n\nThe root object can also contain an object named “stat” :\n\n```\n{\n\t\"rxpk\":[ {...}, ...],\n\t\"stat\":{...}\n}\n```\n\nIt is possible for a packet to contain no “rxpk” array but a “stat” object.\n\n```\n{\n\t\"stat\":{...}\n}\n```\n\nThat object contains the status of the gateway, with the following fields:\n\n| Name | Type   | Function                                                     |\n| ---- | ------ | ------------------------------------------------------------ |\n| time | string | UTC ‘system’ time of the gateway, ISO 8601 ‘expanded’ format |\n| lati | number | GPS latitude of the gateway in degree (float, N is +)        |\n| long | number | GPS latitude of the gateway in degree (float, E is +)        |\n| alti | number | GPS altitude of the gateway in meter RX (integer)            |\n| rxnb | number | Number of radio packets received (unsigned integer)          |\n| rxok | number | Number of radio packets received with a valid PHY CRC        |\n| rxfw | number | Number of radio packets forwarded (unsigned integer)         |\n| ackr | number | Percentage of upstream datagrams that were acknowledged      |\n| dwnb | number | Number of downlink datagrams received (unsigned integer)     |\n| txnb | number | Number of packets emitted (unsigned integer)                 |\n\nExample (white-spaces, indentation and newlines added for readability):\n\n```\n{\"stat\":{\n\t\"time\":\"2014-01-12 08:59:28 GMT\",\n\t\"lati\":46.24000,\n\t\"long\":3.25230,\n\t\"alti\":145,\n\t\"rxnb\":2,\n\t\"rxok\":2,\n\t\"rxfw\":2,\n\t\"ackr\":100.0,\n\t\"dwnb\":2,\n\t\"txnb\":2\n}}\n```\n\n## Downstream protocol\n\n------\n\n### Sequence diagram\n\n```\n+---------+                                                    +---------+\n| Gateway |                                                    | Server  |\n+---------+                                                    +---------+\n     | -----------------------------------\\                         |\n     |-| Every N seconds (keepalive time) |                         |\n     | ------------------------------------                         |\n     |                                                              |\n     | PULL_DATA (token Y, MAC@)                                    |\n     |------------------------------------------------------------->|\n     |                                                              |\n     |                                           PULL_ACK (token Y) |\n     |<-------------------------------------------------------------|\n     |                                                              |\n\n+---------+                                                    +---------+\n| Gateway |                                                    | Server  |\n+---------+                                                    +---------+\n     |      ------------------------------------------------------\\ |\n     |      | Anytime after first PULL_DATA for each packet to TX |-|\n     |      ------------------------------------------------------- |\n     |                                                              |\n     |                            PULL_RESP (token Z, JSON payload) |\n     |<-------------------------------------------------------------|\n     |                                                              |\n     | TX_ACK (token Z, JSON payload)                               |\n     |------------------------------------------------------------->|\n```\n\n### PULL_DATA packet\n\nThat packet type is used by the gateway to poll data from the server.\n\nThis data exchange is initialized by the gateway because it might be impossible for the server to send packets to the gateway if the gateway is behind a NAT.\n\nWhen the gateway initialize the exchange, the network route towards the server will open and will allow for packets to flow both directions. The gateway must periodically send PULL_DATA packets to be sure the network route stays open for the server to be used at any time.\n\n| Bytes | Function                                |\n| ----- | --------------------------------------- |\n| 0     | protocol version = 2                    |\n| 1-2   | random token                            |\n| 3     | PULL_DATA identifier 0x02               |\n| 4-11  | Gateway unique identifier (MAC address) |\n\n###  PULL_ACK packet\n\nThat packet type is used by the server to confirm that the network route is open and that the server can send PULL_RESP packets at any time.\n\n| Bytes | Function                                          |\n| ----- | ------------------------------------------------- |\n| 0     | protocol version = 2                              |\n| 1-2   | same token as the PULL_DATA packet to acknowledge |\n| 3     | PULL_ACK identifier 0x04                          |\n\n### PULL_RESP packet\n\nThat packet type is used by the server to send RF packets and associated metadata that will have to be emitted by the gateway.\n\n| Bytes | Function                                                   |\n| ----- | ---------------------------------------------------------- |\n| 0     | protocol version = 2                                       |\n| 1-2   | random token                                               |\n| 3     | PULL_RESP identifier 0x03                                  |\n| 4-end | JSON object, starting with {, ending with }, see section 6 |\n\n### TX_ACK packet\n\nThat packet type is used by the gateway to send a feedback to the server to inform if a downlink request has been accepted or rejected by the gateway. The datagram may optionnaly contain a JSON string to give more details on acknoledge. If no JSON is present (empty string), this means than no error occured.\n\n| Bytes  | Function                                                     |\n| ------ | ------------------------------------------------------------ |\n| 0      | protocol version = 2                                         |\n| 1-2    | same token as the PULL_RESP packet to acknowledge            |\n| 3      | TX_ACK identifier 0x05                                       |\n| 4-11   | Gateway unique identifier (MAC address)                      |\n| 12-end | [optional] JSON object, starting with {, ending with }, see section 6 |\n\n## Downstream JSON data structure\n\n------\n\nThe root object of PULL_RESP packet must contain an object named “txpk”:\n\n```\n{\n\t\"txpk\": {...}\n}\n```\n\nThat object contain a RF packet to be emitted and associated metadata with the following fields:\n\n| Name | Type   | Function                                                     |\n| ---- | ------ | ------------------------------------------------------------ |\n| imme | bool   | Send packet immediately (will ignore tmst & time)            |\n| tmst | number | Send packet on a certain timestamp value (will ignore time)  |\n| time | string | Send packet at a certain time (GPS synchronization required) |\n| freq | number | TX central frequency in MHz (unsigned float, Hz precision)   |\n| rfch | number | Concentrator “RF chain” used for TX (unsigned integer)       |\n| powe | number | TX output power in dBm (unsigned integer, dBm precision)     |\n| modu | string | Modulation identifier “LORA” or “FSK”                        |\n| datr | string | LoRa datarate identifier (eg. SF12BW500)                     |\n| datr | number | FSK datarate (unsigned, in bits per second)                  |\n| codr | string | LoRa ECC coding rate identifier                              |\n| fdev | number | FSK frequency deviation (unsigned integer, in Hz)            |\n| ipol | bool   | Lora modulation polarization inversion                       |\n| prea | number | RF preamble size (unsigned integer)                          |\n| size | number | RF packet payload size in bytes (unsigned integer)           |\n| data | string | Base64 encoded RF packet payload, padding optional           |\n| ncrc | bool   | If true, disable the CRC of the physical layer (optional)    |\n\nMost fields are optional. If a field is omitted, default parameters will be used.\n\nExamples (white-spaces, indentation and newlines added for readability):\n\n```\n{\"txpk\":{\n\t\"imme\":true,\n\t\"freq\":864.123456,\n\t\"rfch\":0,\n\t\"powe\":14,\n\t\"modu\":\"LORA\",\n\t\"datr\":\"SF11BW125\",\n\t\"codr\":\"4/6\",\n\t\"ipol\":false,\n\t\"size\":32,\n\t\"data\":\"H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v\"\n}}\n{\"txpk\":{\n\t\"imme\":true,\n\t\"freq\":861.3,\n\t\"rfch\":0,\n\t\"powe\":12,\n\t\"modu\":\"FSK\",\n\t\"datr\":50000,\n\t\"fdev\":3000,\n\t\"size\":32,\n\t\"data\":\"H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v\"\n}}\n```\n\nThe root object of TX_ACK packet must contain an object named “txpk_ack”:\n\n```\n{\n\t\"txpk_ack\": {...}\n}\n```\n\nThat object contain status information concerning the associated PULL_RESP packet.\n\n| Name  | Type   | Function                                                     |\n| ----- | ------ | ------------------------------------------------------------ |\n| error | string | Indication about success or type of failure that occured for downlink request. |\n\nThe possible values of “error” field are:\n\n| Value            | Definition                                                   |\n| ---------------- | ------------------------------------------------------------ |\n| NONE             | Packet has been programmed for downlink                      |\n| TOO_LATE         | Rejected because it was already too late to program this packet for downlink |\n| TOO_EARLY        | Rejected because downlink packet timestamp is too much in advance |\n| COLLISION_PACKET | Rejected because there was already a packet programmed in requested timeframe |\n| COLLISION_BEACON | Rejected because there was already a beacon planned in requested timeframe |\n| TX_FREQ          | Rejected because requested frequency is not supported by TX RF chain |\n| TX_POWER         | Rejected because requested power is not supported by gateway |\n| GPS_UNLOCKED     | Rejected because GPS is unlocked, so GPS timestamp cannot be used |\n\nExamples (white-spaces, indentation and newlines added for readability):\n\n```\n{\"txpk_ack\":{\n\t\"error\":\"COLLISION_PACKET\"\n}}\n```\n\n## Revisions\n\n------\n\n### v1.3\n\n- Added downlink feedback from gateway to server (PULL_RESP -> TX_ACK)\n\n### v1.2\n\n- Added value of FSK bitrate for upstream.\n- Added parameters for FSK bitrate and frequency deviation for downstream.\n\n### v1.1\n\n- Added syntax for status report JSON object on upstream.\n\n### v1.0\n\n- Initial version.","slug":"lorawan协议","published":1,"updated":"2019-07-22T08:16:14.901Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblmd002v4tjeas01c1r8","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><hr>\n<p>The protocol between the gateway and the server is purposefully very basic and for demonstration purpose only, or for use on private and reliable networks.</p>\n<p>There is no authentication of the gateway or the server, and the acknowledges are only used for network quality assessment, not to correct UDP datagrams losses (no retries).</p>\n<h2 id=\"System-schematic-and-definitions\"><a href=\"#System-schematic-and-definitions\" class=\"headerlink\" title=\"System schematic and definitions\"></a>System schematic and definitions</h2><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ((( Y )))</span><br><span class=\"line\">     |</span><br><span class=\"line\">     |</span><br><span class=\"line\">+ - -|- - - - - - - - - - - - - +        xxxxxxxxxxxx          +--------+</span><br><span class=\"line\">| +--+-----------+     +------+ |       xx x  x     xxx        |        |</span><br><span class=\"line\">| |              |     |      | |      xx  Internet  xx        |        |</span><br><span class=\"line\">| | Concentrator |&lt;---&gt;| Host |&lt;-------xx     or    xx--------&gt;|        |</span><br><span class=\"line\">| |              | SPI |      | |      xx  Intranet  xx        | Server |</span><br><span class=\"line\">| +--------------+     +------+ |       xxxx   x   xxxx        |        |</span><br><span class=\"line\">|    ^                     ^    |           xxxxxxxx           |        |</span><br><span class=\"line\">|    | PPS +-------+ NMEA  |    |                              |        |</span><br><span class=\"line\">|    +-----|  GPS  |-------+    |                              +--------+</span><br><span class=\"line\">|          | (opt) |            |</span><br><span class=\"line\">|          +-------+            |</span><br><span class=\"line\">|                               |</span><br><span class=\"line\">|             Gateway           |</span><br><span class=\"line\">+- - - - - - - - - - - - - - - -+</span><br></pre></td></tr></table></figure>\n<p><strong>Concentrator</strong>: radio RX/TX board, based on Semtech multichannel modems (SX130x), transceivers (SX135x) and/or low-power stand-alone modems (SX127x).</p>\n<p><strong>Host</strong>: embedded computer on which the packet forwarder is run. Drives the concentrator through a SPI link.</p>\n<p><strong>GPS</strong>: GNSS (GPS, Galileo, GLONASS, etc) receiver with a “1 Pulse Per Second” output and a serial link to the host to send NMEA frames containing time and geographical coordinates data. Optional.</p>\n<p><strong>Gateway</strong>: a device composed of at least one radio concentrator, a host, some network connection to the internet or a private network (Ethernet, 3G, Wifi, microwave link), and optionally a GPS receiver for synchronization.</p>\n<p><strong>Server</strong>: an abstract computer that will process the RF packets received and forwarded by the gateway, and issue RF packets in response that the gateway will have to emit.</p>\n<p>It is assumed that the gateway can be behind a NAT or a firewall stopping any incoming connection. It is assumed that the server has an static IP address (or an address solvable through a DNS service) and is able to receive incoming connections on a specific port.</p>\n<h2 id=\"Upstream-protocol\"><a href=\"#Upstream-protocol\" class=\"headerlink\" title=\"Upstream protocol\"></a>Upstream protocol</h2><hr>\n<h3 id=\"Sequence-diagram\"><a href=\"#Sequence-diagram\" class=\"headerlink\" title=\"Sequence diagram\"></a>Sequence diagram</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">| Gateway |                                                    | Server  |</span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">     | -----------------------------------\\                         |</span><br><span class=\"line\">     |-| When 1-N RF packets are received |                         |</span><br><span class=\"line\">     | ------------------------------------                         |</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     | PUSH_DATA (token X, GW MAC, JSON payload)                    |</span><br><span class=\"line\">     |-------------------------------------------------------------&gt;|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     |                                           PUSH_ACK (token X) |</span><br><span class=\"line\">     |&lt;-------------------------------------------------------------|</span><br><span class=\"line\">     |                              ------------------------------\\ |</span><br><span class=\"line\">     |                              | process packets *after* ack |-|</span><br><span class=\"line\">     |                              ------------------------------- |</span><br><span class=\"line\">     |                                                              |</span><br></pre></td></tr></table></figure>\n<h3 id=\"PUSH-DATA-packet\"><a href=\"#PUSH-DATA-packet\" class=\"headerlink\" title=\"PUSH_DATA packet\"></a>PUSH_DATA packet</h3><p>That packet type is used by the gateway mainly to forward the RF packets received, and associated metadata, to the server.</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>random token</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PUSH_DATA identifier 0x00</td>\n</tr>\n<tr>\n<td>4-11</td>\n<td>Gateway unique identifier (MAC address)</td>\n</tr>\n<tr>\n<td>12-end</td>\n<td>JSON object, starting with {, ending with }, see section 4</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"PUSH-ACK-packet\"><a href=\"#PUSH-ACK-packet\" class=\"headerlink\" title=\"PUSH_ACK packet\"></a>PUSH_ACK packet</h3><p>That packet type is used by the server to acknowledge immediately all the PUSH_DATA packets received.</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>same token as the PUSH_DATA packet to acknowledge</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PUSH_ACK identifier 0x01</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Upstream-JSON-data-structure\"><a href=\"#Upstream-JSON-data-structure\" class=\"headerlink\" title=\"Upstream JSON data structure\"></a>Upstream JSON data structure</h2><hr>\n<p>The root object can contain an array named “rxpk”:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;rxpk&quot;:[ &#123;...&#125;, ...]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>That array contains at least one JSON object, each object contain a RF packet and associated metadata with the following fields:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>time</td>\n<td>string</td>\n<td>UTC time of pkt RX, us precision, ISO 8601 ‘compact’ format</td>\n</tr>\n<tr>\n<td>tmst</td>\n<td>number</td>\n<td>Internal timestamp of “RX finished” event (32b unsigned)</td>\n</tr>\n<tr>\n<td>freq</td>\n<td>number</td>\n<td>RX central frequency in MHz (unsigned float, Hz precision)</td>\n</tr>\n<tr>\n<td>chan</td>\n<td>number</td>\n<td>Concentrator “IF” channel used for RX (unsigned integer)</td>\n</tr>\n<tr>\n<td>rfch</td>\n<td>number</td>\n<td>Concentrator “RF chain” used for RX (unsigned integer)</td>\n</tr>\n<tr>\n<td>stat</td>\n<td>number</td>\n<td>CRC status: 1 = OK, -1 = fail, 0 = no CRC</td>\n</tr>\n<tr>\n<td>modu</td>\n<td>string</td>\n<td>Modulation identifier “LORA” or “FSK”</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>string</td>\n<td>LoRa datarate identifier (eg. SF12BW500)</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>number</td>\n<td>FSK datarate (unsigned, in bits per second)</td>\n</tr>\n<tr>\n<td>codr</td>\n<td>string</td>\n<td>LoRa ECC coding rate identifier</td>\n</tr>\n<tr>\n<td>rssi</td>\n<td>number</td>\n<td>RSSI in dBm (signed integer, 1 dB precision)</td>\n</tr>\n<tr>\n<td>lsnr</td>\n<td>number</td>\n<td>Lora SNR ratio in dB (signed float, 0.1 dB precision)</td>\n</tr>\n<tr>\n<td>size</td>\n<td>number</td>\n<td>RF packet payload size in bytes (unsigned integer)</td>\n</tr>\n<tr>\n<td>data</td>\n<td>string</td>\n<td>Base64 encoded RF packet payload, padded</td>\n</tr>\n</tbody>\n</table>\n<p>Example (white-spaces, indentation and newlines added for readability):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;rxpk&quot;:[</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t&quot;time&quot;:&quot;2013-03-31T16:21:17.528002Z&quot;,</span><br><span class=\"line\">\t\t&quot;tmst&quot;:3512348611,</span><br><span class=\"line\">\t\t&quot;chan&quot;:2,</span><br><span class=\"line\">\t\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t\t&quot;freq&quot;:866.349812,</span><br><span class=\"line\">\t\t&quot;stat&quot;:1,</span><br><span class=\"line\">\t\t&quot;modu&quot;:&quot;LORA&quot;,</span><br><span class=\"line\">\t\t&quot;datr&quot;:&quot;SF7BW125&quot;,</span><br><span class=\"line\">\t\t&quot;codr&quot;:&quot;4/6&quot;,</span><br><span class=\"line\">\t\t&quot;rssi&quot;:-35,</span><br><span class=\"line\">\t\t&quot;lsnr&quot;:5.1,</span><br><span class=\"line\">\t\t&quot;size&quot;:32,</span><br><span class=\"line\">\t\t&quot;data&quot;:&quot;-DS4CGaDCdG+48eJNM3Vai-zDpsR71Pn9CPA9uCON84&quot;</span><br><span class=\"line\">\t&#125;,&#123;</span><br><span class=\"line\">\t\t&quot;time&quot;:&quot;2013-03-31T16:21:17.530974Z&quot;,</span><br><span class=\"line\">\t\t&quot;tmst&quot;:3512348514,</span><br><span class=\"line\">\t\t&quot;chan&quot;:9,</span><br><span class=\"line\">\t\t&quot;rfch&quot;:1,</span><br><span class=\"line\">\t\t&quot;freq&quot;:869.1,</span><br><span class=\"line\">\t\t&quot;stat&quot;:1,</span><br><span class=\"line\">\t\t&quot;modu&quot;:&quot;FSK&quot;,</span><br><span class=\"line\">\t\t&quot;datr&quot;:50000,</span><br><span class=\"line\">\t\t&quot;rssi&quot;:-75,</span><br><span class=\"line\">\t\t&quot;size&quot;:16,</span><br><span class=\"line\">\t\t&quot;data&quot;:&quot;VEVTVF9QQUNLRVRfMTIzNA==&quot;</span><br><span class=\"line\">\t&#125;,&#123;</span><br><span class=\"line\">\t\t&quot;time&quot;:&quot;2013-03-31T16:21:17.532038Z&quot;,</span><br><span class=\"line\">\t\t&quot;tmst&quot;:3316387610,</span><br><span class=\"line\">\t\t&quot;chan&quot;:0,</span><br><span class=\"line\">\t\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t\t&quot;freq&quot;:863.00981,</span><br><span class=\"line\">\t\t&quot;stat&quot;:1,</span><br><span class=\"line\">\t\t&quot;modu&quot;:&quot;LORA&quot;,</span><br><span class=\"line\">\t\t&quot;datr&quot;:&quot;SF10BW125&quot;,</span><br><span class=\"line\">\t\t&quot;codr&quot;:&quot;4/7&quot;,</span><br><span class=\"line\">\t\t&quot;rssi&quot;:-38,</span><br><span class=\"line\">\t\t&quot;lsnr&quot;:5.5,</span><br><span class=\"line\">\t\t&quot;size&quot;:32,</span><br><span class=\"line\">\t\t&quot;data&quot;:&quot;ysgRl452xNLep9S1NTIg2lomKDxUgn3DJ7DE+b00Ass&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">]&#125;</span><br></pre></td></tr></table></figure>\n<p>The root object can also contain an object named “stat” :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;rxpk&quot;:[ &#123;...&#125;, ...],</span><br><span class=\"line\">\t&quot;stat&quot;:&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>It is possible for a packet to contain no “rxpk” array but a “stat” object.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;stat&quot;:&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>That object contains the status of the gateway, with the following fields:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>time</td>\n<td>string</td>\n<td>UTC ‘system’ time of the gateway, ISO 8601 ‘expanded’ format</td>\n</tr>\n<tr>\n<td>lati</td>\n<td>number</td>\n<td>GPS latitude of the gateway in degree (float, N is +)</td>\n</tr>\n<tr>\n<td>long</td>\n<td>number</td>\n<td>GPS latitude of the gateway in degree (float, E is +)</td>\n</tr>\n<tr>\n<td>alti</td>\n<td>number</td>\n<td>GPS altitude of the gateway in meter RX (integer)</td>\n</tr>\n<tr>\n<td>rxnb</td>\n<td>number</td>\n<td>Number of radio packets received (unsigned integer)</td>\n</tr>\n<tr>\n<td>rxok</td>\n<td>number</td>\n<td>Number of radio packets received with a valid PHY CRC</td>\n</tr>\n<tr>\n<td>rxfw</td>\n<td>number</td>\n<td>Number of radio packets forwarded (unsigned integer)</td>\n</tr>\n<tr>\n<td>ackr</td>\n<td>number</td>\n<td>Percentage of upstream datagrams that were acknowledged</td>\n</tr>\n<tr>\n<td>dwnb</td>\n<td>number</td>\n<td>Number of downlink datagrams received (unsigned integer)</td>\n</tr>\n<tr>\n<td>txnb</td>\n<td>number</td>\n<td>Number of packets emitted (unsigned integer)</td>\n</tr>\n</tbody>\n</table>\n<p>Example (white-spaces, indentation and newlines added for readability):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;stat&quot;:&#123;</span><br><span class=\"line\">\t&quot;time&quot;:&quot;2014-01-12 08:59:28 GMT&quot;,</span><br><span class=\"line\">\t&quot;lati&quot;:46.24000,</span><br><span class=\"line\">\t&quot;long&quot;:3.25230,</span><br><span class=\"line\">\t&quot;alti&quot;:145,</span><br><span class=\"line\">\t&quot;rxnb&quot;:2,</span><br><span class=\"line\">\t&quot;rxok&quot;:2,</span><br><span class=\"line\">\t&quot;rxfw&quot;:2,</span><br><span class=\"line\">\t&quot;ackr&quot;:100.0,</span><br><span class=\"line\">\t&quot;dwnb&quot;:2,</span><br><span class=\"line\">\t&quot;txnb&quot;:2</span><br><span class=\"line\">&#125;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Downstream-protocol\"><a href=\"#Downstream-protocol\" class=\"headerlink\" title=\"Downstream protocol\"></a>Downstream protocol</h2><hr>\n<h3 id=\"Sequence-diagram-1\"><a href=\"#Sequence-diagram-1\" class=\"headerlink\" title=\"Sequence diagram\"></a>Sequence diagram</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">| Gateway |                                                    | Server  |</span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">     | -----------------------------------\\                         |</span><br><span class=\"line\">     |-| Every N seconds (keepalive time) |                         |</span><br><span class=\"line\">     | ------------------------------------                         |</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     | PULL_DATA (token Y, MAC@)                                    |</span><br><span class=\"line\">     |-------------------------------------------------------------&gt;|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     |                                           PULL_ACK (token Y) |</span><br><span class=\"line\">     |&lt;-------------------------------------------------------------|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\"></span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">| Gateway |                                                    | Server  |</span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">     |      ------------------------------------------------------\\ |</span><br><span class=\"line\">     |      | Anytime after first PULL_DATA for each packet to TX |-|</span><br><span class=\"line\">     |      ------------------------------------------------------- |</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     |                            PULL_RESP (token Z, JSON payload) |</span><br><span class=\"line\">     |&lt;-------------------------------------------------------------|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     | TX_ACK (token Z, JSON payload)                               |</span><br><span class=\"line\">     |-------------------------------------------------------------&gt;|</span><br></pre></td></tr></table></figure>\n<h3 id=\"PULL-DATA-packet\"><a href=\"#PULL-DATA-packet\" class=\"headerlink\" title=\"PULL_DATA packet\"></a>PULL_DATA packet</h3><p>That packet type is used by the gateway to poll data from the server.</p>\n<p>This data exchange is initialized by the gateway because it might be impossible for the server to send packets to the gateway if the gateway is behind a NAT.</p>\n<p>When the gateway initialize the exchange, the network route towards the server will open and will allow for packets to flow both directions. The gateway must periodically send PULL_DATA packets to be sure the network route stays open for the server to be used at any time.</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>random token</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PULL_DATA identifier 0x02</td>\n</tr>\n<tr>\n<td>4-11</td>\n<td>Gateway unique identifier (MAC address)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"PULL-ACK-packet\"><a href=\"#PULL-ACK-packet\" class=\"headerlink\" title=\"PULL_ACK packet\"></a>PULL_ACK packet</h3><p>That packet type is used by the server to confirm that the network route is open and that the server can send PULL_RESP packets at any time.</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>same token as the PULL_DATA packet to acknowledge</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PULL_ACK identifier 0x04</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"PULL-RESP-packet\"><a href=\"#PULL-RESP-packet\" class=\"headerlink\" title=\"PULL_RESP packet\"></a>PULL_RESP packet</h3><p>That packet type is used by the server to send RF packets and associated metadata that will have to be emitted by the gateway.</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>random token</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PULL_RESP identifier 0x03</td>\n</tr>\n<tr>\n<td>4-end</td>\n<td>JSON object, starting with {, ending with }, see section 6</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"TX-ACK-packet\"><a href=\"#TX-ACK-packet\" class=\"headerlink\" title=\"TX_ACK packet\"></a>TX_ACK packet</h3><p>That packet type is used by the gateway to send a feedback to the server to inform if a downlink request has been accepted or rejected by the gateway. The datagram may optionnaly contain a JSON string to give more details on acknoledge. If no JSON is present (empty string), this means than no error occured.</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>same token as the PULL_RESP packet to acknowledge</td>\n</tr>\n<tr>\n<td>3</td>\n<td>TX_ACK identifier 0x05</td>\n</tr>\n<tr>\n<td>4-11</td>\n<td>Gateway unique identifier (MAC address)</td>\n</tr>\n<tr>\n<td>12-end</td>\n<td>[optional] JSON object, starting with {, ending with }, see section 6</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Downstream-JSON-data-structure\"><a href=\"#Downstream-JSON-data-structure\" class=\"headerlink\" title=\"Downstream JSON data structure\"></a>Downstream JSON data structure</h2><hr>\n<p>The root object of PULL_RESP packet must contain an object named “txpk”:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;txpk&quot;: &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>That object contain a RF packet to be emitted and associated metadata with the following fields:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>imme</td>\n<td>bool</td>\n<td>Send packet immediately (will ignore tmst &amp; time)</td>\n</tr>\n<tr>\n<td>tmst</td>\n<td>number</td>\n<td>Send packet on a certain timestamp value (will ignore time)</td>\n</tr>\n<tr>\n<td>time</td>\n<td>string</td>\n<td>Send packet at a certain time (GPS synchronization required)</td>\n</tr>\n<tr>\n<td>freq</td>\n<td>number</td>\n<td>TX central frequency in MHz (unsigned float, Hz precision)</td>\n</tr>\n<tr>\n<td>rfch</td>\n<td>number</td>\n<td>Concentrator “RF chain” used for TX (unsigned integer)</td>\n</tr>\n<tr>\n<td>powe</td>\n<td>number</td>\n<td>TX output power in dBm (unsigned integer, dBm precision)</td>\n</tr>\n<tr>\n<td>modu</td>\n<td>string</td>\n<td>Modulation identifier “LORA” or “FSK”</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>string</td>\n<td>LoRa datarate identifier (eg. SF12BW500)</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>number</td>\n<td>FSK datarate (unsigned, in bits per second)</td>\n</tr>\n<tr>\n<td>codr</td>\n<td>string</td>\n<td>LoRa ECC coding rate identifier</td>\n</tr>\n<tr>\n<td>fdev</td>\n<td>number</td>\n<td>FSK frequency deviation (unsigned integer, in Hz)</td>\n</tr>\n<tr>\n<td>ipol</td>\n<td>bool</td>\n<td>Lora modulation polarization inversion</td>\n</tr>\n<tr>\n<td>prea</td>\n<td>number</td>\n<td>RF preamble size (unsigned integer)</td>\n</tr>\n<tr>\n<td>size</td>\n<td>number</td>\n<td>RF packet payload size in bytes (unsigned integer)</td>\n</tr>\n<tr>\n<td>data</td>\n<td>string</td>\n<td>Base64 encoded RF packet payload, padding optional</td>\n</tr>\n<tr>\n<td>ncrc</td>\n<td>bool</td>\n<td>If true, disable the CRC of the physical layer (optional)</td>\n</tr>\n</tbody>\n</table>\n<p>Most fields are optional. If a field is omitted, default parameters will be used.</p>\n<p>Examples (white-spaces, indentation and newlines added for readability):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;txpk&quot;:&#123;</span><br><span class=\"line\">\t&quot;imme&quot;:true,</span><br><span class=\"line\">\t&quot;freq&quot;:864.123456,</span><br><span class=\"line\">\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t&quot;powe&quot;:14,</span><br><span class=\"line\">\t&quot;modu&quot;:&quot;LORA&quot;,</span><br><span class=\"line\">\t&quot;datr&quot;:&quot;SF11BW125&quot;,</span><br><span class=\"line\">\t&quot;codr&quot;:&quot;4/6&quot;,</span><br><span class=\"line\">\t&quot;ipol&quot;:false,</span><br><span class=\"line\">\t&quot;size&quot;:32,</span><br><span class=\"line\">\t&quot;data&quot;:&quot;H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v&quot;</span><br><span class=\"line\">&#125;&#125;</span><br><span class=\"line\">&#123;&quot;txpk&quot;:&#123;</span><br><span class=\"line\">\t&quot;imme&quot;:true,</span><br><span class=\"line\">\t&quot;freq&quot;:861.3,</span><br><span class=\"line\">\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t&quot;powe&quot;:12,</span><br><span class=\"line\">\t&quot;modu&quot;:&quot;FSK&quot;,</span><br><span class=\"line\">\t&quot;datr&quot;:50000,</span><br><span class=\"line\">\t&quot;fdev&quot;:3000,</span><br><span class=\"line\">\t&quot;size&quot;:32,</span><br><span class=\"line\">\t&quot;data&quot;:&quot;H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v&quot;</span><br><span class=\"line\">&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>The root object of TX_ACK packet must contain an object named “txpk_ack”:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;txpk_ack&quot;: &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>That object contain status information concerning the associated PULL_RESP packet.</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>error</td>\n<td>string</td>\n<td>Indication about success or type of failure that occured for downlink request.</td>\n</tr>\n</tbody>\n</table>\n<p>The possible values of “error” field are:</p>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NONE</td>\n<td>Packet has been programmed for downlink</td>\n</tr>\n<tr>\n<td>TOO_LATE</td>\n<td>Rejected because it was already too late to program this packet for downlink</td>\n</tr>\n<tr>\n<td>TOO_EARLY</td>\n<td>Rejected because downlink packet timestamp is too much in advance</td>\n</tr>\n<tr>\n<td>COLLISION_PACKET</td>\n<td>Rejected because there was already a packet programmed in requested timeframe</td>\n</tr>\n<tr>\n<td>COLLISION_BEACON</td>\n<td>Rejected because there was already a beacon planned in requested timeframe</td>\n</tr>\n<tr>\n<td>TX_FREQ</td>\n<td>Rejected because requested frequency is not supported by TX RF chain</td>\n</tr>\n<tr>\n<td>TX_POWER</td>\n<td>Rejected because requested power is not supported by gateway</td>\n</tr>\n<tr>\n<td>GPS_UNLOCKED</td>\n<td>Rejected because GPS is unlocked, so GPS timestamp cannot be used</td>\n</tr>\n</tbody>\n</table>\n<p>Examples (white-spaces, indentation and newlines added for readability):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;txpk_ack&quot;:&#123;</span><br><span class=\"line\">\t&quot;error&quot;:&quot;COLLISION_PACKET&quot;</span><br><span class=\"line\">&#125;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Revisions\"><a href=\"#Revisions\" class=\"headerlink\" title=\"Revisions\"></a>Revisions</h2><hr>\n<h3 id=\"v1-3\"><a href=\"#v1-3\" class=\"headerlink\" title=\"v1.3\"></a>v1.3</h3><ul>\n<li>Added downlink feedback from gateway to server (PULL_RESP -&gt; TX_ACK)</li>\n</ul>\n<h3 id=\"v1-2\"><a href=\"#v1-2\" class=\"headerlink\" title=\"v1.2\"></a>v1.2</h3><ul>\n<li>Added value of FSK bitrate for upstream.</li>\n<li>Added parameters for FSK bitrate and frequency deviation for downstream.</li>\n</ul>\n<h3 id=\"v1-1\"><a href=\"#v1-1\" class=\"headerlink\" title=\"v1.1\"></a>v1.1</h3><ul>\n<li>Added syntax for status report JSON object on upstream.</li>\n</ul>\n<h3 id=\"v1-0\"><a href=\"#v1-0\" class=\"headerlink\" title=\"v1.0\"></a>v1.0</h3><ul>\n<li>Initial version.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><hr>\n<p>The protocol between the gateway and the server is purposefully very basic and for demonstration purpose only, or for use on private and reliable networks.</p>\n<p>There is no authentication of the gateway or the server, and the acknowledges are only used for network quality assessment, not to correct UDP datagrams losses (no retries).</p>\n<h2 id=\"System-schematic-and-definitions\"><a href=\"#System-schematic-and-definitions\" class=\"headerlink\" title=\"System schematic and definitions\"></a>System schematic and definitions</h2><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ((( Y )))</span><br><span class=\"line\">     |</span><br><span class=\"line\">     |</span><br><span class=\"line\">+ - -|- - - - - - - - - - - - - +        xxxxxxxxxxxx          +--------+</span><br><span class=\"line\">| +--+-----------+     +------+ |       xx x  x     xxx        |        |</span><br><span class=\"line\">| |              |     |      | |      xx  Internet  xx        |        |</span><br><span class=\"line\">| | Concentrator |&lt;---&gt;| Host |&lt;-------xx     or    xx--------&gt;|        |</span><br><span class=\"line\">| |              | SPI |      | |      xx  Intranet  xx        | Server |</span><br><span class=\"line\">| +--------------+     +------+ |       xxxx   x   xxxx        |        |</span><br><span class=\"line\">|    ^                     ^    |           xxxxxxxx           |        |</span><br><span class=\"line\">|    | PPS +-------+ NMEA  |    |                              |        |</span><br><span class=\"line\">|    +-----|  GPS  |-------+    |                              +--------+</span><br><span class=\"line\">|          | (opt) |            |</span><br><span class=\"line\">|          +-------+            |</span><br><span class=\"line\">|                               |</span><br><span class=\"line\">|             Gateway           |</span><br><span class=\"line\">+- - - - - - - - - - - - - - - -+</span><br></pre></td></tr></table></figure>\n<p><strong>Concentrator</strong>: radio RX/TX board, based on Semtech multichannel modems (SX130x), transceivers (SX135x) and/or low-power stand-alone modems (SX127x).</p>\n<p><strong>Host</strong>: embedded computer on which the packet forwarder is run. Drives the concentrator through a SPI link.</p>\n<p><strong>GPS</strong>: GNSS (GPS, Galileo, GLONASS, etc) receiver with a “1 Pulse Per Second” output and a serial link to the host to send NMEA frames containing time and geographical coordinates data. Optional.</p>\n<p><strong>Gateway</strong>: a device composed of at least one radio concentrator, a host, some network connection to the internet or a private network (Ethernet, 3G, Wifi, microwave link), and optionally a GPS receiver for synchronization.</p>\n<p><strong>Server</strong>: an abstract computer that will process the RF packets received and forwarded by the gateway, and issue RF packets in response that the gateway will have to emit.</p>\n<p>It is assumed that the gateway can be behind a NAT or a firewall stopping any incoming connection. It is assumed that the server has an static IP address (or an address solvable through a DNS service) and is able to receive incoming connections on a specific port.</p>\n<h2 id=\"Upstream-protocol\"><a href=\"#Upstream-protocol\" class=\"headerlink\" title=\"Upstream protocol\"></a>Upstream protocol</h2><hr>\n<h3 id=\"Sequence-diagram\"><a href=\"#Sequence-diagram\" class=\"headerlink\" title=\"Sequence diagram\"></a>Sequence diagram</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">| Gateway |                                                    | Server  |</span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">     | -----------------------------------\\                         |</span><br><span class=\"line\">     |-| When 1-N RF packets are received |                         |</span><br><span class=\"line\">     | ------------------------------------                         |</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     | PUSH_DATA (token X, GW MAC, JSON payload)                    |</span><br><span class=\"line\">     |-------------------------------------------------------------&gt;|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     |                                           PUSH_ACK (token X) |</span><br><span class=\"line\">     |&lt;-------------------------------------------------------------|</span><br><span class=\"line\">     |                              ------------------------------\\ |</span><br><span class=\"line\">     |                              | process packets *after* ack |-|</span><br><span class=\"line\">     |                              ------------------------------- |</span><br><span class=\"line\">     |                                                              |</span><br></pre></td></tr></table></figure>\n<h3 id=\"PUSH-DATA-packet\"><a href=\"#PUSH-DATA-packet\" class=\"headerlink\" title=\"PUSH_DATA packet\"></a>PUSH_DATA packet</h3><p>That packet type is used by the gateway mainly to forward the RF packets received, and associated metadata, to the server.</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>random token</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PUSH_DATA identifier 0x00</td>\n</tr>\n<tr>\n<td>4-11</td>\n<td>Gateway unique identifier (MAC address)</td>\n</tr>\n<tr>\n<td>12-end</td>\n<td>JSON object, starting with {, ending with }, see section 4</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"PUSH-ACK-packet\"><a href=\"#PUSH-ACK-packet\" class=\"headerlink\" title=\"PUSH_ACK packet\"></a>PUSH_ACK packet</h3><p>That packet type is used by the server to acknowledge immediately all the PUSH_DATA packets received.</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>same token as the PUSH_DATA packet to acknowledge</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PUSH_ACK identifier 0x01</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Upstream-JSON-data-structure\"><a href=\"#Upstream-JSON-data-structure\" class=\"headerlink\" title=\"Upstream JSON data structure\"></a>Upstream JSON data structure</h2><hr>\n<p>The root object can contain an array named “rxpk”:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;rxpk&quot;:[ &#123;...&#125;, ...]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>That array contains at least one JSON object, each object contain a RF packet and associated metadata with the following fields:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>time</td>\n<td>string</td>\n<td>UTC time of pkt RX, us precision, ISO 8601 ‘compact’ format</td>\n</tr>\n<tr>\n<td>tmst</td>\n<td>number</td>\n<td>Internal timestamp of “RX finished” event (32b unsigned)</td>\n</tr>\n<tr>\n<td>freq</td>\n<td>number</td>\n<td>RX central frequency in MHz (unsigned float, Hz precision)</td>\n</tr>\n<tr>\n<td>chan</td>\n<td>number</td>\n<td>Concentrator “IF” channel used for RX (unsigned integer)</td>\n</tr>\n<tr>\n<td>rfch</td>\n<td>number</td>\n<td>Concentrator “RF chain” used for RX (unsigned integer)</td>\n</tr>\n<tr>\n<td>stat</td>\n<td>number</td>\n<td>CRC status: 1 = OK, -1 = fail, 0 = no CRC</td>\n</tr>\n<tr>\n<td>modu</td>\n<td>string</td>\n<td>Modulation identifier “LORA” or “FSK”</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>string</td>\n<td>LoRa datarate identifier (eg. SF12BW500)</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>number</td>\n<td>FSK datarate (unsigned, in bits per second)</td>\n</tr>\n<tr>\n<td>codr</td>\n<td>string</td>\n<td>LoRa ECC coding rate identifier</td>\n</tr>\n<tr>\n<td>rssi</td>\n<td>number</td>\n<td>RSSI in dBm (signed integer, 1 dB precision)</td>\n</tr>\n<tr>\n<td>lsnr</td>\n<td>number</td>\n<td>Lora SNR ratio in dB (signed float, 0.1 dB precision)</td>\n</tr>\n<tr>\n<td>size</td>\n<td>number</td>\n<td>RF packet payload size in bytes (unsigned integer)</td>\n</tr>\n<tr>\n<td>data</td>\n<td>string</td>\n<td>Base64 encoded RF packet payload, padded</td>\n</tr>\n</tbody>\n</table>\n<p>Example (white-spaces, indentation and newlines added for readability):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;rxpk&quot;:[</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t&quot;time&quot;:&quot;2013-03-31T16:21:17.528002Z&quot;,</span><br><span class=\"line\">\t\t&quot;tmst&quot;:3512348611,</span><br><span class=\"line\">\t\t&quot;chan&quot;:2,</span><br><span class=\"line\">\t\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t\t&quot;freq&quot;:866.349812,</span><br><span class=\"line\">\t\t&quot;stat&quot;:1,</span><br><span class=\"line\">\t\t&quot;modu&quot;:&quot;LORA&quot;,</span><br><span class=\"line\">\t\t&quot;datr&quot;:&quot;SF7BW125&quot;,</span><br><span class=\"line\">\t\t&quot;codr&quot;:&quot;4/6&quot;,</span><br><span class=\"line\">\t\t&quot;rssi&quot;:-35,</span><br><span class=\"line\">\t\t&quot;lsnr&quot;:5.1,</span><br><span class=\"line\">\t\t&quot;size&quot;:32,</span><br><span class=\"line\">\t\t&quot;data&quot;:&quot;-DS4CGaDCdG+48eJNM3Vai-zDpsR71Pn9CPA9uCON84&quot;</span><br><span class=\"line\">\t&#125;,&#123;</span><br><span class=\"line\">\t\t&quot;time&quot;:&quot;2013-03-31T16:21:17.530974Z&quot;,</span><br><span class=\"line\">\t\t&quot;tmst&quot;:3512348514,</span><br><span class=\"line\">\t\t&quot;chan&quot;:9,</span><br><span class=\"line\">\t\t&quot;rfch&quot;:1,</span><br><span class=\"line\">\t\t&quot;freq&quot;:869.1,</span><br><span class=\"line\">\t\t&quot;stat&quot;:1,</span><br><span class=\"line\">\t\t&quot;modu&quot;:&quot;FSK&quot;,</span><br><span class=\"line\">\t\t&quot;datr&quot;:50000,</span><br><span class=\"line\">\t\t&quot;rssi&quot;:-75,</span><br><span class=\"line\">\t\t&quot;size&quot;:16,</span><br><span class=\"line\">\t\t&quot;data&quot;:&quot;VEVTVF9QQUNLRVRfMTIzNA==&quot;</span><br><span class=\"line\">\t&#125;,&#123;</span><br><span class=\"line\">\t\t&quot;time&quot;:&quot;2013-03-31T16:21:17.532038Z&quot;,</span><br><span class=\"line\">\t\t&quot;tmst&quot;:3316387610,</span><br><span class=\"line\">\t\t&quot;chan&quot;:0,</span><br><span class=\"line\">\t\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t\t&quot;freq&quot;:863.00981,</span><br><span class=\"line\">\t\t&quot;stat&quot;:1,</span><br><span class=\"line\">\t\t&quot;modu&quot;:&quot;LORA&quot;,</span><br><span class=\"line\">\t\t&quot;datr&quot;:&quot;SF10BW125&quot;,</span><br><span class=\"line\">\t\t&quot;codr&quot;:&quot;4/7&quot;,</span><br><span class=\"line\">\t\t&quot;rssi&quot;:-38,</span><br><span class=\"line\">\t\t&quot;lsnr&quot;:5.5,</span><br><span class=\"line\">\t\t&quot;size&quot;:32,</span><br><span class=\"line\">\t\t&quot;data&quot;:&quot;ysgRl452xNLep9S1NTIg2lomKDxUgn3DJ7DE+b00Ass&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">]&#125;</span><br></pre></td></tr></table></figure>\n<p>The root object can also contain an object named “stat” :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;rxpk&quot;:[ &#123;...&#125;, ...],</span><br><span class=\"line\">\t&quot;stat&quot;:&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>It is possible for a packet to contain no “rxpk” array but a “stat” object.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;stat&quot;:&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>That object contains the status of the gateway, with the following fields:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>time</td>\n<td>string</td>\n<td>UTC ‘system’ time of the gateway, ISO 8601 ‘expanded’ format</td>\n</tr>\n<tr>\n<td>lati</td>\n<td>number</td>\n<td>GPS latitude of the gateway in degree (float, N is +)</td>\n</tr>\n<tr>\n<td>long</td>\n<td>number</td>\n<td>GPS latitude of the gateway in degree (float, E is +)</td>\n</tr>\n<tr>\n<td>alti</td>\n<td>number</td>\n<td>GPS altitude of the gateway in meter RX (integer)</td>\n</tr>\n<tr>\n<td>rxnb</td>\n<td>number</td>\n<td>Number of radio packets received (unsigned integer)</td>\n</tr>\n<tr>\n<td>rxok</td>\n<td>number</td>\n<td>Number of radio packets received with a valid PHY CRC</td>\n</tr>\n<tr>\n<td>rxfw</td>\n<td>number</td>\n<td>Number of radio packets forwarded (unsigned integer)</td>\n</tr>\n<tr>\n<td>ackr</td>\n<td>number</td>\n<td>Percentage of upstream datagrams that were acknowledged</td>\n</tr>\n<tr>\n<td>dwnb</td>\n<td>number</td>\n<td>Number of downlink datagrams received (unsigned integer)</td>\n</tr>\n<tr>\n<td>txnb</td>\n<td>number</td>\n<td>Number of packets emitted (unsigned integer)</td>\n</tr>\n</tbody>\n</table>\n<p>Example (white-spaces, indentation and newlines added for readability):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;stat&quot;:&#123;</span><br><span class=\"line\">\t&quot;time&quot;:&quot;2014-01-12 08:59:28 GMT&quot;,</span><br><span class=\"line\">\t&quot;lati&quot;:46.24000,</span><br><span class=\"line\">\t&quot;long&quot;:3.25230,</span><br><span class=\"line\">\t&quot;alti&quot;:145,</span><br><span class=\"line\">\t&quot;rxnb&quot;:2,</span><br><span class=\"line\">\t&quot;rxok&quot;:2,</span><br><span class=\"line\">\t&quot;rxfw&quot;:2,</span><br><span class=\"line\">\t&quot;ackr&quot;:100.0,</span><br><span class=\"line\">\t&quot;dwnb&quot;:2,</span><br><span class=\"line\">\t&quot;txnb&quot;:2</span><br><span class=\"line\">&#125;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Downstream-protocol\"><a href=\"#Downstream-protocol\" class=\"headerlink\" title=\"Downstream protocol\"></a>Downstream protocol</h2><hr>\n<h3 id=\"Sequence-diagram-1\"><a href=\"#Sequence-diagram-1\" class=\"headerlink\" title=\"Sequence diagram\"></a>Sequence diagram</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">| Gateway |                                                    | Server  |</span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">     | -----------------------------------\\                         |</span><br><span class=\"line\">     |-| Every N seconds (keepalive time) |                         |</span><br><span class=\"line\">     | ------------------------------------                         |</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     | PULL_DATA (token Y, MAC@)                                    |</span><br><span class=\"line\">     |-------------------------------------------------------------&gt;|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     |                                           PULL_ACK (token Y) |</span><br><span class=\"line\">     |&lt;-------------------------------------------------------------|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\"></span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">| Gateway |                                                    | Server  |</span><br><span class=\"line\">+---------+                                                    +---------+</span><br><span class=\"line\">     |      ------------------------------------------------------\\ |</span><br><span class=\"line\">     |      | Anytime after first PULL_DATA for each packet to TX |-|</span><br><span class=\"line\">     |      ------------------------------------------------------- |</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     |                            PULL_RESP (token Z, JSON payload) |</span><br><span class=\"line\">     |&lt;-------------------------------------------------------------|</span><br><span class=\"line\">     |                                                              |</span><br><span class=\"line\">     | TX_ACK (token Z, JSON payload)                               |</span><br><span class=\"line\">     |-------------------------------------------------------------&gt;|</span><br></pre></td></tr></table></figure>\n<h3 id=\"PULL-DATA-packet\"><a href=\"#PULL-DATA-packet\" class=\"headerlink\" title=\"PULL_DATA packet\"></a>PULL_DATA packet</h3><p>That packet type is used by the gateway to poll data from the server.</p>\n<p>This data exchange is initialized by the gateway because it might be impossible for the server to send packets to the gateway if the gateway is behind a NAT.</p>\n<p>When the gateway initialize the exchange, the network route towards the server will open and will allow for packets to flow both directions. The gateway must periodically send PULL_DATA packets to be sure the network route stays open for the server to be used at any time.</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>random token</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PULL_DATA identifier 0x02</td>\n</tr>\n<tr>\n<td>4-11</td>\n<td>Gateway unique identifier (MAC address)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"PULL-ACK-packet\"><a href=\"#PULL-ACK-packet\" class=\"headerlink\" title=\"PULL_ACK packet\"></a>PULL_ACK packet</h3><p>That packet type is used by the server to confirm that the network route is open and that the server can send PULL_RESP packets at any time.</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>same token as the PULL_DATA packet to acknowledge</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PULL_ACK identifier 0x04</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"PULL-RESP-packet\"><a href=\"#PULL-RESP-packet\" class=\"headerlink\" title=\"PULL_RESP packet\"></a>PULL_RESP packet</h3><p>That packet type is used by the server to send RF packets and associated metadata that will have to be emitted by the gateway.</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>random token</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PULL_RESP identifier 0x03</td>\n</tr>\n<tr>\n<td>4-end</td>\n<td>JSON object, starting with {, ending with }, see section 6</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"TX-ACK-packet\"><a href=\"#TX-ACK-packet\" class=\"headerlink\" title=\"TX_ACK packet\"></a>TX_ACK packet</h3><p>That packet type is used by the gateway to send a feedback to the server to inform if a downlink request has been accepted or rejected by the gateway. The datagram may optionnaly contain a JSON string to give more details on acknoledge. If no JSON is present (empty string), this means than no error occured.</p>\n<table>\n<thead>\n<tr>\n<th>Bytes</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>protocol version = 2</td>\n</tr>\n<tr>\n<td>1-2</td>\n<td>same token as the PULL_RESP packet to acknowledge</td>\n</tr>\n<tr>\n<td>3</td>\n<td>TX_ACK identifier 0x05</td>\n</tr>\n<tr>\n<td>4-11</td>\n<td>Gateway unique identifier (MAC address)</td>\n</tr>\n<tr>\n<td>12-end</td>\n<td>[optional] JSON object, starting with {, ending with }, see section 6</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Downstream-JSON-data-structure\"><a href=\"#Downstream-JSON-data-structure\" class=\"headerlink\" title=\"Downstream JSON data structure\"></a>Downstream JSON data structure</h2><hr>\n<p>The root object of PULL_RESP packet must contain an object named “txpk”:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;txpk&quot;: &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>That object contain a RF packet to be emitted and associated metadata with the following fields:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>imme</td>\n<td>bool</td>\n<td>Send packet immediately (will ignore tmst &amp; time)</td>\n</tr>\n<tr>\n<td>tmst</td>\n<td>number</td>\n<td>Send packet on a certain timestamp value (will ignore time)</td>\n</tr>\n<tr>\n<td>time</td>\n<td>string</td>\n<td>Send packet at a certain time (GPS synchronization required)</td>\n</tr>\n<tr>\n<td>freq</td>\n<td>number</td>\n<td>TX central frequency in MHz (unsigned float, Hz precision)</td>\n</tr>\n<tr>\n<td>rfch</td>\n<td>number</td>\n<td>Concentrator “RF chain” used for TX (unsigned integer)</td>\n</tr>\n<tr>\n<td>powe</td>\n<td>number</td>\n<td>TX output power in dBm (unsigned integer, dBm precision)</td>\n</tr>\n<tr>\n<td>modu</td>\n<td>string</td>\n<td>Modulation identifier “LORA” or “FSK”</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>string</td>\n<td>LoRa datarate identifier (eg. SF12BW500)</td>\n</tr>\n<tr>\n<td>datr</td>\n<td>number</td>\n<td>FSK datarate (unsigned, in bits per second)</td>\n</tr>\n<tr>\n<td>codr</td>\n<td>string</td>\n<td>LoRa ECC coding rate identifier</td>\n</tr>\n<tr>\n<td>fdev</td>\n<td>number</td>\n<td>FSK frequency deviation (unsigned integer, in Hz)</td>\n</tr>\n<tr>\n<td>ipol</td>\n<td>bool</td>\n<td>Lora modulation polarization inversion</td>\n</tr>\n<tr>\n<td>prea</td>\n<td>number</td>\n<td>RF preamble size (unsigned integer)</td>\n</tr>\n<tr>\n<td>size</td>\n<td>number</td>\n<td>RF packet payload size in bytes (unsigned integer)</td>\n</tr>\n<tr>\n<td>data</td>\n<td>string</td>\n<td>Base64 encoded RF packet payload, padding optional</td>\n</tr>\n<tr>\n<td>ncrc</td>\n<td>bool</td>\n<td>If true, disable the CRC of the physical layer (optional)</td>\n</tr>\n</tbody>\n</table>\n<p>Most fields are optional. If a field is omitted, default parameters will be used.</p>\n<p>Examples (white-spaces, indentation and newlines added for readability):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;txpk&quot;:&#123;</span><br><span class=\"line\">\t&quot;imme&quot;:true,</span><br><span class=\"line\">\t&quot;freq&quot;:864.123456,</span><br><span class=\"line\">\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t&quot;powe&quot;:14,</span><br><span class=\"line\">\t&quot;modu&quot;:&quot;LORA&quot;,</span><br><span class=\"line\">\t&quot;datr&quot;:&quot;SF11BW125&quot;,</span><br><span class=\"line\">\t&quot;codr&quot;:&quot;4/6&quot;,</span><br><span class=\"line\">\t&quot;ipol&quot;:false,</span><br><span class=\"line\">\t&quot;size&quot;:32,</span><br><span class=\"line\">\t&quot;data&quot;:&quot;H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v&quot;</span><br><span class=\"line\">&#125;&#125;</span><br><span class=\"line\">&#123;&quot;txpk&quot;:&#123;</span><br><span class=\"line\">\t&quot;imme&quot;:true,</span><br><span class=\"line\">\t&quot;freq&quot;:861.3,</span><br><span class=\"line\">\t&quot;rfch&quot;:0,</span><br><span class=\"line\">\t&quot;powe&quot;:12,</span><br><span class=\"line\">\t&quot;modu&quot;:&quot;FSK&quot;,</span><br><span class=\"line\">\t&quot;datr&quot;:50000,</span><br><span class=\"line\">\t&quot;fdev&quot;:3000,</span><br><span class=\"line\">\t&quot;size&quot;:32,</span><br><span class=\"line\">\t&quot;data&quot;:&quot;H3P3N2i9qc4yt7rK7ldqoeCVJGBybzPY5h1Dd7P7p8v&quot;</span><br><span class=\"line\">&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>The root object of TX_ACK packet must contain an object named “txpk_ack”:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;txpk_ack&quot;: &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>That object contain status information concerning the associated PULL_RESP packet.</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>error</td>\n<td>string</td>\n<td>Indication about success or type of failure that occured for downlink request.</td>\n</tr>\n</tbody>\n</table>\n<p>The possible values of “error” field are:</p>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NONE</td>\n<td>Packet has been programmed for downlink</td>\n</tr>\n<tr>\n<td>TOO_LATE</td>\n<td>Rejected because it was already too late to program this packet for downlink</td>\n</tr>\n<tr>\n<td>TOO_EARLY</td>\n<td>Rejected because downlink packet timestamp is too much in advance</td>\n</tr>\n<tr>\n<td>COLLISION_PACKET</td>\n<td>Rejected because there was already a packet programmed in requested timeframe</td>\n</tr>\n<tr>\n<td>COLLISION_BEACON</td>\n<td>Rejected because there was already a beacon planned in requested timeframe</td>\n</tr>\n<tr>\n<td>TX_FREQ</td>\n<td>Rejected because requested frequency is not supported by TX RF chain</td>\n</tr>\n<tr>\n<td>TX_POWER</td>\n<td>Rejected because requested power is not supported by gateway</td>\n</tr>\n<tr>\n<td>GPS_UNLOCKED</td>\n<td>Rejected because GPS is unlocked, so GPS timestamp cannot be used</td>\n</tr>\n</tbody>\n</table>\n<p>Examples (white-spaces, indentation and newlines added for readability):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;txpk_ack&quot;:&#123;</span><br><span class=\"line\">\t&quot;error&quot;:&quot;COLLISION_PACKET&quot;</span><br><span class=\"line\">&#125;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Revisions\"><a href=\"#Revisions\" class=\"headerlink\" title=\"Revisions\"></a>Revisions</h2><hr>\n<h3 id=\"v1-3\"><a href=\"#v1-3\" class=\"headerlink\" title=\"v1.3\"></a>v1.3</h3><ul>\n<li>Added downlink feedback from gateway to server (PULL_RESP -&gt; TX_ACK)</li>\n</ul>\n<h3 id=\"v1-2\"><a href=\"#v1-2\" class=\"headerlink\" title=\"v1.2\"></a>v1.2</h3><ul>\n<li>Added value of FSK bitrate for upstream.</li>\n<li>Added parameters for FSK bitrate and frequency deviation for downstream.</li>\n</ul>\n<h3 id=\"v1-1\"><a href=\"#v1-1\" class=\"headerlink\" title=\"v1.1\"></a>v1.1</h3><ul>\n<li>Added syntax for status report JSON object on upstream.</li>\n</ul>\n<h3 id=\"v1-0\"><a href=\"#v1-0\" class=\"headerlink\" title=\"v1.0\"></a>v1.0</h3><ul>\n<li>Initial version.</li>\n</ul>\n"},{"title":"Seata TCC模式","date":"2020-10-17T06:00:00.000Z","_content":"\n# 事务\n\n单机的事务我们一般使用事务，其中就包括ACID特性。\n\nA:atomic 原子性\n\nC:Consistency 一致性\n\nI: Isolation 隔离性\n\nD:Durability 持久性\n\n## 事务的隔离级别\n\n**SQL 标准定义了四个隔离级别：**\n\n- **READ-UNCOMMITTED(读取未提交)：** 最低的隔离级别，允许读取尚未提交的数据变更，**可能会导致脏读、幻读或不可重复读**。\n- **READ-COMMITTED(读取已提交)：** 允许读取并发事务已经提交的数据，**可以阻止脏读，但是幻读或不可重复读仍有可能发生**。\n- **REPEATABLE-READ(可重复读)：** 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，**可以阻止脏读和不可重复读，但幻读仍有可能发生**。\n- **SERIALIZABLE(可串行化)：** 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，**该级别可以防止脏读、不可重复读以及幻读**。\n\n------\n\n| 隔离级别         | 脏读 | 不可重复读 | 幻影读 |\n| ---------------- | ---- | ---------- | ------ |\n| READ-UNCOMMITTED | √    | √          | √      |\n| READ-COMMITTED   | ×    | √          | √      |\n| REPEATABLE-READ  | ×    | ×          | √      |\n| SERIALIZABLE     | ×    | ×          | ×      |\n\n# AT模式\n\n","source":"_posts/SpringCloud/Seata TCC模式.md","raw":"---\ntitle: Seata TCC模式\ndate: 2020-10-17 14:00:00\n---\n\n# 事务\n\n单机的事务我们一般使用事务，其中就包括ACID特性。\n\nA:atomic 原子性\n\nC:Consistency 一致性\n\nI: Isolation 隔离性\n\nD:Durability 持久性\n\n## 事务的隔离级别\n\n**SQL 标准定义了四个隔离级别：**\n\n- **READ-UNCOMMITTED(读取未提交)：** 最低的隔离级别，允许读取尚未提交的数据变更，**可能会导致脏读、幻读或不可重复读**。\n- **READ-COMMITTED(读取已提交)：** 允许读取并发事务已经提交的数据，**可以阻止脏读，但是幻读或不可重复读仍有可能发生**。\n- **REPEATABLE-READ(可重复读)：** 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，**可以阻止脏读和不可重复读，但幻读仍有可能发生**。\n- **SERIALIZABLE(可串行化)：** 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，**该级别可以防止脏读、不可重复读以及幻读**。\n\n------\n\n| 隔离级别         | 脏读 | 不可重复读 | 幻影读 |\n| ---------------- | ---- | ---------- | ------ |\n| READ-UNCOMMITTED | √    | √          | √      |\n| READ-COMMITTED   | ×    | √          | √      |\n| REPEATABLE-READ  | ×    | ×          | √      |\n| SERIALIZABLE     | ×    | ×          | ×      |\n\n# AT模式\n\n","slug":"SpringCloud/Seata TCC模式","published":1,"updated":"2020-10-18T05:10:45.408Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblmf002w4tje4femlo5o","content":"<h1 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h1><p>单机的事务我们一般使用事务，其中就包括ACID特性。</p>\n<p>A:atomic 原子性</p>\n<p>C:Consistency 一致性</p>\n<p>I: Isolation 隔离性</p>\n<p>D:Durability 持久性</p>\n<h2 id=\"事务的隔离级别\"><a href=\"#事务的隔离级别\" class=\"headerlink\" title=\"事务的隔离级别\"></a>事务的隔离级别</h2><p><strong>SQL 标准定义了四个隔离级别：</strong></p>\n<ul>\n<li><strong>READ-UNCOMMITTED(读取未提交)：</strong> 最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能会导致脏读、幻读或不可重复读</strong>。</li>\n<li><strong>READ-COMMITTED(读取已提交)：</strong> 允许读取并发事务已经提交的数据，<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong>。</li>\n<li><strong>REPEATABLE-READ(可重复读)：</strong> 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生</strong>。</li>\n<li><strong>SERIALIZABLE(可串行化)：</strong> 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读</strong>。</li>\n</ul>\n<hr>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻影读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>READ-UNCOMMITTED</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>READ-COMMITTED</td>\n<td>×</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>REPEATABLE-READ</td>\n<td>×</td>\n<td>×</td>\n<td>√</td>\n</tr>\n<tr>\n<td>SERIALIZABLE</td>\n<td>×</td>\n<td>×</td>\n<td>×</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"AT模式\"><a href=\"#AT模式\" class=\"headerlink\" title=\"AT模式\"></a>AT模式</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h1><p>单机的事务我们一般使用事务，其中就包括ACID特性。</p>\n<p>A:atomic 原子性</p>\n<p>C:Consistency 一致性</p>\n<p>I: Isolation 隔离性</p>\n<p>D:Durability 持久性</p>\n<h2 id=\"事务的隔离级别\"><a href=\"#事务的隔离级别\" class=\"headerlink\" title=\"事务的隔离级别\"></a>事务的隔离级别</h2><p><strong>SQL 标准定义了四个隔离级别：</strong></p>\n<ul>\n<li><strong>READ-UNCOMMITTED(读取未提交)：</strong> 最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能会导致脏读、幻读或不可重复读</strong>。</li>\n<li><strong>READ-COMMITTED(读取已提交)：</strong> 允许读取并发事务已经提交的数据，<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong>。</li>\n<li><strong>REPEATABLE-READ(可重复读)：</strong> 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生</strong>。</li>\n<li><strong>SERIALIZABLE(可串行化)：</strong> 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读</strong>。</li>\n</ul>\n<hr>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻影读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>READ-UNCOMMITTED</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>READ-COMMITTED</td>\n<td>×</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>REPEATABLE-READ</td>\n<td>×</td>\n<td>×</td>\n<td>√</td>\n</tr>\n<tr>\n<td>SERIALIZABLE</td>\n<td>×</td>\n<td>×</td>\n<td>×</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"AT模式\"><a href=\"#AT模式\" class=\"headerlink\" title=\"AT模式\"></a>AT模式</h1>"},{"title":"spring cloud zipkin链路追踪","date":"2020-10-17T10:00:00.000Z","_content":"\n# 下载zipkin\n\n```bash\ndocker run -d -p 9411:9411 openzipkin/zipkin\n\n\ncurl -sSL https://zipkin.io/quickstart.sh | bash -s\njava -jar zipkin.jar\n```\n\n# 依赖\n\n```\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-zipkin</artifactId>\n</dependency>\n```\n\n# 配置\n\n- spring.zipkin.base-url指定了Zipkin服务器的地址\n- spring.sleuth.sampler.percentage将采样比例设置为1.0，说明全部都需要。\n\n```\nspring:\n  zipkin:\n    base-url: http://localhost:9000\n  sleuth:\n    sampler:\n      percentage: 1.0\n```\n\n","source":"_posts/SpringCloud/spring cloud zipkin链路追踪.md","raw":"---\ntitle: spring cloud zipkin链路追踪\ndate: 2020-10-17 18:00:00\n---\n\n# 下载zipkin\n\n```bash\ndocker run -d -p 9411:9411 openzipkin/zipkin\n\n\ncurl -sSL https://zipkin.io/quickstart.sh | bash -s\njava -jar zipkin.jar\n```\n\n# 依赖\n\n```\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-zipkin</artifactId>\n</dependency>\n```\n\n# 配置\n\n- spring.zipkin.base-url指定了Zipkin服务器的地址\n- spring.sleuth.sampler.percentage将采样比例设置为1.0，说明全部都需要。\n\n```\nspring:\n  zipkin:\n    base-url: http://localhost:9000\n  sleuth:\n    sampler:\n      percentage: 1.0\n```\n\n","slug":"SpringCloud/spring cloud zipkin链路追踪","published":1,"updated":"2020-10-17T13:04:31.378Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblmg002y4tjeh2tejnv9","content":"<h1 id=\"下载zipkin\"><a href=\"#下载zipkin\" class=\"headerlink\" title=\"下载zipkin\"></a>下载zipkin</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 9411:9411 openzipkin/zipkin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">curl -sSL https://zipkin.io/quickstart.sh | bash -s</span><br><span class=\"line\">java -jar zipkin.jar</span><br></pre></td></tr></table></figure>\n<h1 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><ul>\n<li>spring.zipkin.base-url指定了Zipkin服务器的地址</li>\n<li>spring.sleuth.sampler.percentage将采样比例设置为1.0，说明全部都需要。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  zipkin:</span><br><span class=\"line\">    base-url: http://localhost:9000</span><br><span class=\"line\">  sleuth:</span><br><span class=\"line\">    sampler:</span><br><span class=\"line\">      percentage: 1.0</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"下载zipkin\"><a href=\"#下载zipkin\" class=\"headerlink\" title=\"下载zipkin\"></a>下载zipkin</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 9411:9411 openzipkin/zipkin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">curl -sSL https://zipkin.io/quickstart.sh | bash -s</span><br><span class=\"line\">java -jar zipkin.jar</span><br></pre></td></tr></table></figure>\n<h1 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><ul>\n<li>spring.zipkin.base-url指定了Zipkin服务器的地址</li>\n<li>spring.sleuth.sampler.percentage将采样比例设置为1.0，说明全部都需要。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  zipkin:</span><br><span class=\"line\">    base-url: http://localhost:9000</span><br><span class=\"line\">  sleuth:</span><br><span class=\"line\">    sampler:</span><br><span class=\"line\">      percentage: 1.0</span><br></pre></td></tr></table></figure>\n"},{"title":"手动创建FeignCliet","date":"2020-09-29T16:00:00.000Z","_content":"\n## 前言\n\n在[Feign-请求不同注册中心的服务](https://my.oschina.net/wuxinshui/blog/3058490)中，提到，如果需要请求不同注册中心的服务，可以设置`@FeignClient`的`url`属性。\n\n这种做法有个缺点，需要服务消费者，配置各个环境的`url`。\n\n如果服务提供方`url`变更，需要通知到服务消费者，如果消费者很多，变更通知也是件麻烦事。\n\n基于java的封装特性，作为独立的服务提供者，如果能封装`url`，岂不是更好？\n\n## 解决方案\n\n### 服务提供者\n\n```java\n//@FeignClient(name = \"feign-provider\")\npublic interface CustomizeFeignApi {\n\n    @RequestMapping(value = \"/customize\", method = RequestMethod.GET)\n    String queryCustomize();\n}\n```\n\n`@FeignClient`，不需要。加上的话，会自动创建对应bean，达不到手动创建的目的。\n\n自定义配置\n\n```java\n@Configuration\n@Import(FeignClientsConfiguration.class)\npublic class FeignClientConfig {\n    @Bean\n    public CustomizeFeignApi customizeFeignApi(Contract contract, Decoder decoder, Encoder encoder) {\n        return Feign.builder().contract(contract).encoder(encoder).decoder(decoder).target(CustomizeFeignApi.class, \"http://localhost:8004\");\n    }\n\n}\n```\n\n`@Configuration`：需要被消费者应用扫描到。\n\n`@Import(FeignClientsConfiguration.class)`：如果消费者上下文不存在`Contract`, `Decoder`, `Encoder`，由`FeignClientsConfiguration`提供默认bean。\n\n以上，可封装为`jar`，上传到公司nexus私服，有消费者下载使用。\n\n![img](https://oscimg.oschina.net/oscnet/6732c4c0da2ed2f6e16796cc9ea54e426ca.jpg)\n\n## 服务消费者\n\n依赖上文的jar。\n\n```xml\n\t\t<!--服务提供者-->\n\t\t<dependency>\n\t\t\t<groupId>com.wxs.springcloud</groupId>\n\t\t\t<artifactId>springcloud-sample-feign-provider-spi</artifactId>\n\t\t\t<version>0.0.1-SNAPSHOT</version>\n\t\t</dependency>\n```\n\n注入使用。\n\n```java\n@RestController\npublic class CustomizeFeignTestController {\n    @Autowired\n    private CustomizeFeignApi customizeFeignApi;\n\n    @GetMapping(\"/customize\")\n    public String query() {\n        return customizeFeignApi.queryCustomize();\n    }\n}\n```\n\n启动类，添加扫描。 `@ComponentScan(\"com.wxs.feign.provider.api\")`\n\n验证\n\n## 遇到的问题\n\n```\nMethod not annotated with HTTP method type (ex. GET, POST)\nCaused by: java.lang.IllegalStateException: Method queryCustomize not annotated with HTTP method type (ex. GET, POST)\n\tat feign.Util.checkState(Util.java:128) ~[feign-core-9.5.0.jar:na]\n\tat feign.Contract$BaseContract.parseAndValidateMetadata(Contract.java:97) ~[feign-core-9.5.0.jar:na]\n\tat feign.Contract$BaseContract.parseAndValidatateMetadata(Contract.java:64) ~[feign-core-9.5.0.jar:na]\n\tat feign.ReflectiveFeign$ParseHandlersByName.apply(ReflectiveFeign.java:146) ~[feign-core-9.5.0.jar:na]\n\tat feign.ReflectiveFeign.newInstance(ReflectiveFeign.java:53) ~[feign-core-9.5.0.jar:na]\n\tat feign.Feign$Builder.target(Feign.java:218) ~[feign-core-9.5.0.jar:na]\n\tat feign.Feign$Builder.target(Feign.java:214) ~[feign-core-9.5.0.jar:na]\n\tat com.wxs.feign.consumer.config.FeignClientConfig.customizeFeignApi(FeignClientConfig.java:38) ~[classes/:na]\n```\n\n`feign.Feign.Builder`默认提供的是：`new Contract.Default()`。\n\n需要指定`Contract`为`SpringMvcContract`。\n\n```\nFeign.builder().contract(new SpringMvcContract()).target(CustomizeFeignApi.class, \"http://localhost:8004\")\n```\n\n## 参考\n\n[Creating Feign Clients Manually](https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-feign.html)\n\n[Feign: Method not annotated with HTTP method type (ex. GET, POST)](https://github.com/spring-cloud/spring-cloud-netflix/issues/760)","source":"_posts/SpringCloud/手动创建FeignClient.md","raw":"---\ntitle: 手动创建FeignCliet\ndate: 2020-09-30\n---\n\n## 前言\n\n在[Feign-请求不同注册中心的服务](https://my.oschina.net/wuxinshui/blog/3058490)中，提到，如果需要请求不同注册中心的服务，可以设置`@FeignClient`的`url`属性。\n\n这种做法有个缺点，需要服务消费者，配置各个环境的`url`。\n\n如果服务提供方`url`变更，需要通知到服务消费者，如果消费者很多，变更通知也是件麻烦事。\n\n基于java的封装特性，作为独立的服务提供者，如果能封装`url`，岂不是更好？\n\n## 解决方案\n\n### 服务提供者\n\n```java\n//@FeignClient(name = \"feign-provider\")\npublic interface CustomizeFeignApi {\n\n    @RequestMapping(value = \"/customize\", method = RequestMethod.GET)\n    String queryCustomize();\n}\n```\n\n`@FeignClient`，不需要。加上的话，会自动创建对应bean，达不到手动创建的目的。\n\n自定义配置\n\n```java\n@Configuration\n@Import(FeignClientsConfiguration.class)\npublic class FeignClientConfig {\n    @Bean\n    public CustomizeFeignApi customizeFeignApi(Contract contract, Decoder decoder, Encoder encoder) {\n        return Feign.builder().contract(contract).encoder(encoder).decoder(decoder).target(CustomizeFeignApi.class, \"http://localhost:8004\");\n    }\n\n}\n```\n\n`@Configuration`：需要被消费者应用扫描到。\n\n`@Import(FeignClientsConfiguration.class)`：如果消费者上下文不存在`Contract`, `Decoder`, `Encoder`，由`FeignClientsConfiguration`提供默认bean。\n\n以上，可封装为`jar`，上传到公司nexus私服，有消费者下载使用。\n\n![img](https://oscimg.oschina.net/oscnet/6732c4c0da2ed2f6e16796cc9ea54e426ca.jpg)\n\n## 服务消费者\n\n依赖上文的jar。\n\n```xml\n\t\t<!--服务提供者-->\n\t\t<dependency>\n\t\t\t<groupId>com.wxs.springcloud</groupId>\n\t\t\t<artifactId>springcloud-sample-feign-provider-spi</artifactId>\n\t\t\t<version>0.0.1-SNAPSHOT</version>\n\t\t</dependency>\n```\n\n注入使用。\n\n```java\n@RestController\npublic class CustomizeFeignTestController {\n    @Autowired\n    private CustomizeFeignApi customizeFeignApi;\n\n    @GetMapping(\"/customize\")\n    public String query() {\n        return customizeFeignApi.queryCustomize();\n    }\n}\n```\n\n启动类，添加扫描。 `@ComponentScan(\"com.wxs.feign.provider.api\")`\n\n验证\n\n## 遇到的问题\n\n```\nMethod not annotated with HTTP method type (ex. GET, POST)\nCaused by: java.lang.IllegalStateException: Method queryCustomize not annotated with HTTP method type (ex. GET, POST)\n\tat feign.Util.checkState(Util.java:128) ~[feign-core-9.5.0.jar:na]\n\tat feign.Contract$BaseContract.parseAndValidateMetadata(Contract.java:97) ~[feign-core-9.5.0.jar:na]\n\tat feign.Contract$BaseContract.parseAndValidatateMetadata(Contract.java:64) ~[feign-core-9.5.0.jar:na]\n\tat feign.ReflectiveFeign$ParseHandlersByName.apply(ReflectiveFeign.java:146) ~[feign-core-9.5.0.jar:na]\n\tat feign.ReflectiveFeign.newInstance(ReflectiveFeign.java:53) ~[feign-core-9.5.0.jar:na]\n\tat feign.Feign$Builder.target(Feign.java:218) ~[feign-core-9.5.0.jar:na]\n\tat feign.Feign$Builder.target(Feign.java:214) ~[feign-core-9.5.0.jar:na]\n\tat com.wxs.feign.consumer.config.FeignClientConfig.customizeFeignApi(FeignClientConfig.java:38) ~[classes/:na]\n```\n\n`feign.Feign.Builder`默认提供的是：`new Contract.Default()`。\n\n需要指定`Contract`为`SpringMvcContract`。\n\n```\nFeign.builder().contract(new SpringMvcContract()).target(CustomizeFeignApi.class, \"http://localhost:8004\")\n```\n\n## 参考\n\n[Creating Feign Clients Manually](https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-feign.html)\n\n[Feign: Method not annotated with HTTP method type (ex. GET, POST)](https://github.com/spring-cloud/spring-cloud-netflix/issues/760)","slug":"SpringCloud/手动创建FeignClient","published":1,"updated":"2020-10-17T10:01:55.955Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblmg002z4tje8tni7l6m","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在<a href=\"https://my.oschina.net/wuxinshui/blog/3058490\" target=\"_blank\" rel=\"noopener\">Feign-请求不同注册中心的服务</a>中，提到，如果需要请求不同注册中心的服务，可以设置<code>@FeignClient</code>的<code>url</code>属性。</p>\n<p>这种做法有个缺点，需要服务消费者，配置各个环境的<code>url</code>。</p>\n<p>如果服务提供方<code>url</code>变更，需要通知到服务消费者，如果消费者很多，变更通知也是件麻烦事。</p>\n<p>基于java的封装特性，作为独立的服务提供者，如果能封装<code>url</code>，岂不是更好？</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"服务提供者\"><a href=\"#服务提供者\" class=\"headerlink\" title=\"服务提供者\"></a>服务提供者</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//@FeignClient(name = \"feign-provider\")</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CustomizeFeignApi</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/customize\"</span>, method = RequestMethod.GET)</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">queryCustomize</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>@FeignClient</code>，不需要。加上的话，会自动创建对应bean，达不到手动创建的目的。</p>\n<p>自定义配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@Import</span>(FeignClientsConfiguration.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FeignClientConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> CustomizeFeignApi <span class=\"title\">customizeFeignApi</span><span class=\"params\">(Contract contract, Decoder decoder, Encoder encoder)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Feign.builder().contract(contract).encoder(encoder).decoder(decoder).target(CustomizeFeignApi.class, <span class=\"string\">\"http://localhost:8004\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>@Configuration</code>：需要被消费者应用扫描到。</p>\n<p><code>@Import(FeignClientsConfiguration.class)</code>：如果消费者上下文不存在<code>Contract</code>, <code>Decoder</code>, <code>Encoder</code>，由<code>FeignClientsConfiguration</code>提供默认bean。</p>\n<p>以上，可封装为<code>jar</code>，上传到公司nexus私服，有消费者下载使用。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://oscimg.oschina.net/oscnet/6732c4c0da2ed2f6e16796cc9ea54e426ca.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<h2 id=\"服务消费者\"><a href=\"#服务消费者\" class=\"headerlink\" title=\"服务消费者\"></a>服务消费者</h2><p>依赖上文的jar。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--服务提供者--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.wxs.springcloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springcloud-sample-feign-provider-spi<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注入使用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomizeFeignTestController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> CustomizeFeignApi customizeFeignApi;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/customize\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">query</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> customizeFeignApi.queryCustomize();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动类，添加扫描。 <code>@ComponentScan(&quot;com.wxs.feign.provider.api&quot;)</code></p>\n<p>验证</p>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Method not annotated with HTTP method type (ex. GET, POST)</span><br><span class=\"line\">Caused by: java.lang.IllegalStateException: Method queryCustomize not annotated with HTTP method type (ex. GET, POST)</span><br><span class=\"line\">\tat feign.Util.checkState(Util.java:128) ~[feign-core-9.5.0.jar:na]</span><br><span class=\"line\">\tat feign.Contract$BaseContract.parseAndValidateMetadata(Contract.java:97) ~[feign-core-9.5.0.jar:na]</span><br><span class=\"line\">\tat feign.Contract$BaseContract.parseAndValidatateMetadata(Contract.java:64) ~[feign-core-9.5.0.jar:na]</span><br><span class=\"line\">\tat feign.ReflectiveFeign$ParseHandlersByName.apply(ReflectiveFeign.java:146) ~[feign-core-9.5.0.jar:na]</span><br><span class=\"line\">\tat feign.ReflectiveFeign.newInstance(ReflectiveFeign.java:53) ~[feign-core-9.5.0.jar:na]</span><br><span class=\"line\">\tat feign.Feign$Builder.target(Feign.java:218) ~[feign-core-9.5.0.jar:na]</span><br><span class=\"line\">\tat feign.Feign$Builder.target(Feign.java:214) ~[feign-core-9.5.0.jar:na]</span><br><span class=\"line\">\tat com.wxs.feign.consumer.config.FeignClientConfig.customizeFeignApi(FeignClientConfig.java:38) ~[classes/:na]</span><br></pre></td></tr></table></figure>\n<p><code>feign.Feign.Builder</code>默认提供的是：<code>new Contract.Default()</code>。</p>\n<p>需要指定<code>Contract</code>为<code>SpringMvcContract</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Feign.builder().contract(new SpringMvcContract()).target(CustomizeFeignApi.class, &quot;http://localhost:8004&quot;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-feign.html\" target=\"_blank\" rel=\"noopener\">Creating Feign Clients Manually</a></p>\n<p><a href=\"https://github.com/spring-cloud/spring-cloud-netflix/issues/760\" target=\"_blank\" rel=\"noopener\">Feign: Method not annotated with HTTP method type (ex. GET, POST)</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在<a href=\"https://my.oschina.net/wuxinshui/blog/3058490\" target=\"_blank\" rel=\"noopener\">Feign-请求不同注册中心的服务</a>中，提到，如果需要请求不同注册中心的服务，可以设置<code>@FeignClient</code>的<code>url</code>属性。</p>\n<p>这种做法有个缺点，需要服务消费者，配置各个环境的<code>url</code>。</p>\n<p>如果服务提供方<code>url</code>变更，需要通知到服务消费者，如果消费者很多，变更通知也是件麻烦事。</p>\n<p>基于java的封装特性，作为独立的服务提供者，如果能封装<code>url</code>，岂不是更好？</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"服务提供者\"><a href=\"#服务提供者\" class=\"headerlink\" title=\"服务提供者\"></a>服务提供者</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//@FeignClient(name = \"feign-provider\")</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CustomizeFeignApi</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/customize\"</span>, method = RequestMethod.GET)</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">queryCustomize</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>@FeignClient</code>，不需要。加上的话，会自动创建对应bean，达不到手动创建的目的。</p>\n<p>自定义配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@Import</span>(FeignClientsConfiguration.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FeignClientConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> CustomizeFeignApi <span class=\"title\">customizeFeignApi</span><span class=\"params\">(Contract contract, Decoder decoder, Encoder encoder)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Feign.builder().contract(contract).encoder(encoder).decoder(decoder).target(CustomizeFeignApi.class, <span class=\"string\">\"http://localhost:8004\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>@Configuration</code>：需要被消费者应用扫描到。</p>\n<p><code>@Import(FeignClientsConfiguration.class)</code>：如果消费者上下文不存在<code>Contract</code>, <code>Decoder</code>, <code>Encoder</code>，由<code>FeignClientsConfiguration</code>提供默认bean。</p>\n<p>以上，可封装为<code>jar</code>，上传到公司nexus私服，有消费者下载使用。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://oscimg.oschina.net/oscnet/6732c4c0da2ed2f6e16796cc9ea54e426ca.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<h2 id=\"服务消费者\"><a href=\"#服务消费者\" class=\"headerlink\" title=\"服务消费者\"></a>服务消费者</h2><p>依赖上文的jar。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--服务提供者--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.wxs.springcloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springcloud-sample-feign-provider-spi<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注入使用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomizeFeignTestController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> CustomizeFeignApi customizeFeignApi;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/customize\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">query</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> customizeFeignApi.queryCustomize();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动类，添加扫描。 <code>@ComponentScan(&quot;com.wxs.feign.provider.api&quot;)</code></p>\n<p>验证</p>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Method not annotated with HTTP method type (ex. GET, POST)</span><br><span class=\"line\">Caused by: java.lang.IllegalStateException: Method queryCustomize not annotated with HTTP method type (ex. GET, POST)</span><br><span class=\"line\">\tat feign.Util.checkState(Util.java:128) ~[feign-core-9.5.0.jar:na]</span><br><span class=\"line\">\tat feign.Contract$BaseContract.parseAndValidateMetadata(Contract.java:97) ~[feign-core-9.5.0.jar:na]</span><br><span class=\"line\">\tat feign.Contract$BaseContract.parseAndValidatateMetadata(Contract.java:64) ~[feign-core-9.5.0.jar:na]</span><br><span class=\"line\">\tat feign.ReflectiveFeign$ParseHandlersByName.apply(ReflectiveFeign.java:146) ~[feign-core-9.5.0.jar:na]</span><br><span class=\"line\">\tat feign.ReflectiveFeign.newInstance(ReflectiveFeign.java:53) ~[feign-core-9.5.0.jar:na]</span><br><span class=\"line\">\tat feign.Feign$Builder.target(Feign.java:218) ~[feign-core-9.5.0.jar:na]</span><br><span class=\"line\">\tat feign.Feign$Builder.target(Feign.java:214) ~[feign-core-9.5.0.jar:na]</span><br><span class=\"line\">\tat com.wxs.feign.consumer.config.FeignClientConfig.customizeFeignApi(FeignClientConfig.java:38) ~[classes/:na]</span><br></pre></td></tr></table></figure>\n<p><code>feign.Feign.Builder</code>默认提供的是：<code>new Contract.Default()</code>。</p>\n<p>需要指定<code>Contract</code>为<code>SpringMvcContract</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Feign.builder().contract(new SpringMvcContract()).target(CustomizeFeignApi.class, &quot;http://localhost:8004&quot;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-feign.html\" target=\"_blank\" rel=\"noopener\">Creating Feign Clients Manually</a></p>\n<p><a href=\"https://github.com/spring-cloud/spring-cloud-netflix/issues/760\" target=\"_blank\" rel=\"noopener\">Feign: Method not annotated with HTTP method type (ex. GET, POST)</a></p>\n"},{"title":"docker-compose文件编写","date":"2020-08-27T10:10:37.000Z","_content":"","source":"_posts/docker/docker-compose文件编写.md","raw":"---\ntitle: docker-compose文件编写\ndate: 2020-08-27 18:10:37\ntags:\n---\n","slug":"docker/docker-compose文件编写","published":1,"updated":"2020-09-20T03:22:55.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblmh00304tje0ek94n6r","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"网络配置三种模式对比（桥接模式，主机模式，网络地址转换）","date":"2020-08-27T10:29:58.000Z","_content":"\n# VMware三种网络模式简介\n\n​    VMWare提供了三种工作模式，它们是bridged(桥接模式)、NAT(网络地址转换模式)和host-only(主机模式)。安装好虚拟机以后，在网络连接里面可以看到多了两块网卡。如下图。\n\n# 1 bridged(桥接模式)\n\n## 1.1 模式简介\n\n　　在这种模式下，VMWare虚拟出来的操作系统就像是局域网中的一台独立的主机，它可以访问网内任何一台机器。  　　在桥接模式下，你需要手工为虚拟系统配置IP地址、子网掩码，而且还要和[宿主机](https://cloud.tencent.com/product/cdh?from=10680)器处于同一网段，这样虚拟系统才能和宿主机器进行通信。同时，由 于这个虚拟系统是局域网中的一个独立的主机系统，那么就可以手工配置它的TCP/IP配置信息，以实现通过局域网的网关或路由器访问互联网。  　　使用桥接模式的虚拟系统和宿主机器的关系，就像连接在同一个Hub上的两台电脑。想让它们相互通讯，你就需要为虚拟系统配置IP地址和子网掩码，否则就无法通信。    \n\n## 1.2 工作的虚拟网卡\n\n​    bridged模式下的VMnet0虚拟网络    \n\n## 1.3 架构图\n\n1）使用VMnet0虚拟交换机，此时虚拟机相当与网络上的一台独立计算机与主机一样，拥有一个独立的IP地址。使用**桥接方式**，A，A1，A2，B可互访。\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5jxbkbk6j30ir0a00ta.jpg)\n\n2）虚拟机就像一台真正的计算机一样，直接连接到实际的网络上，可以理解为与宿主机没有任何联系。\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5jzb54q3j30ig08caam.jpg)\n\n## 1.4 使用范围\n\n​    1）如果你想利用VMWare在局域网内新建一个虚拟服务器，为局域网用户提供网络服务，就应该选择桥接模式。      2）如果你有路由器的话，那么就可以使用桥接方式上网，因为此时你申请的IP地址是写在了路由器上，而不是你的机器上，这样包括你的主机，虚拟机，也包括 连在路由器上的其他人的机器，都将可以上网，使用着由路由器分配的IP地址。  \n\n# 2 host-only(主机模式)\n\n## 2.1 模式简介\n\n​    在某些特殊的网络调试环境中，要求将真实环境和虚拟环境隔离开，这时你就可采用host-only模式。在host-only模式中，所有的虚拟系统是可以相互通信的，但虚拟系统和真实的网络是被隔离开的。  　　提示：在host-only模式下，虚拟系统和宿主机器系统是可以相互通信的，相当于这两台机器通过双绞线互连。  　　在host-only模式下，虚拟系统的TCP/IP配置信息(如IP地址、网关地址、DNS服务器等)，都是由VMnet1(host-only)虚拟网络的DHCP服务器来动态分配的。  　　如果你想利用VMWare创建一个与网内其他机器相隔离的虚拟系统，进行某些特殊的网络调试工作，可以选择host-only模式。    [Linux虚拟机实现Host-only方式上网](http://blog.csdn.net/suneqing/article/details/51787336)\n\n## 2.2 工作的虚拟网卡\n\n   host-only模式下的 VMnet1虚拟网络  \n\n## 2.3 架构图\n\n1）使用Vmnet1虚拟交换机，此时虚拟机只能与虚拟机、主机互访。也就是不能上Internet。使用Host方式，A，A1，A2可以互访，但A1，A2不能访问B，也不能被B访问。\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5jzy56yqj30h709ajs1.jpg)\n\n2）这种方式下，虚拟机的网卡连接到宿主的 VMnet1 上，但系统并不为虚拟机提供任何路由服务，因此虚拟机只能和宿主机进行通信，而不能连接到实际网络上。\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5k09nm0nj30hb086dgg.jpg)\n\n## 2.4 使用范围\n\n   如果你想利用VMWare创建一个与网内其他机器相隔离的虚拟系统，进行某些特殊的网络调试工作，可以选择host-only模式。  \n\n# 3 NAT(网络地址转换模式)\n\n## 3.1 模式简介\n\n​    使用NAT模式，就是让虚拟系统借助NAT(网络地址转换)功能，通过宿主机器所在的网络来访问公网。也就是说，使用NAT模式可以实现在虚拟 系统里访问互联网。NAT模式下的虚拟系统的TCP/IP配置信息是由VMnet8(NAT)虚拟网络的DHCP服务器提供的，无法进行手工修改，因此虚拟系统也就无法和本局域网中的其他真实主机进行通讯。采用NAT模式最大的优势是虚拟系统接入互联网非常简单，你不需要进行任何其他的配置，只需要宿主机 器能访问互联网即可。    \n\n## 3.2 工作的虚拟网卡\n\n   NAT模式下的VMnet8虚拟网络    \n\n## 3.3 架构图\n\n1） 使用Vmnet8虚拟交换机，此时虚拟机可以通过主机单向网络上的其他工作站，其他工作站不能访问虚拟机。用NAT方式，A1，A2可以访问B，但B不可以访问A1，A2。但A，A1，A2可以互访。\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5k0pewx6j30i909gaav.jpg)\n\n2） 这种方式下，虚拟机的网卡连接到宿主的 VMnet8 上。此时系统的 VMWare NAT Service 服务就充当了路由器的作用，负责将虚拟机发到 VMnet8 的包进行地址转换之后发到实际的网络上，再将实际网络上返回的包进行地址转换后通过 VMnet8 发送给虚拟机。VMWare DHCP Service 负责为虚拟机提供 DHCP 服务。\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5k0w2pqrj30hm0863z4.jpg)\n\n## 3.4 使用范围\n\n​    如果你想利用VMWare安装一个新的虚拟系统，在虚拟系统中不用进行任何手工配置就能直接访问互联网，建议你采用NAT模式。\n\n# 参考\n\n<https://blog.csdn.net/CleverCode/article/details/45934233>\n\n","source":"_posts/docker/网络配置三种模式对比（桥接模式，主机模式，网络地址转换）.md","raw":"---\ntitle: 网络配置三种模式对比（桥接模式，主机模式，网络地址转换）\ndate: 2020-08-27 18:29:58\ntags:\n- linux\n---\n\n# VMware三种网络模式简介\n\n​    VMWare提供了三种工作模式，它们是bridged(桥接模式)、NAT(网络地址转换模式)和host-only(主机模式)。安装好虚拟机以后，在网络连接里面可以看到多了两块网卡。如下图。\n\n# 1 bridged(桥接模式)\n\n## 1.1 模式简介\n\n　　在这种模式下，VMWare虚拟出来的操作系统就像是局域网中的一台独立的主机，它可以访问网内任何一台机器。  　　在桥接模式下，你需要手工为虚拟系统配置IP地址、子网掩码，而且还要和[宿主机](https://cloud.tencent.com/product/cdh?from=10680)器处于同一网段，这样虚拟系统才能和宿主机器进行通信。同时，由 于这个虚拟系统是局域网中的一个独立的主机系统，那么就可以手工配置它的TCP/IP配置信息，以实现通过局域网的网关或路由器访问互联网。  　　使用桥接模式的虚拟系统和宿主机器的关系，就像连接在同一个Hub上的两台电脑。想让它们相互通讯，你就需要为虚拟系统配置IP地址和子网掩码，否则就无法通信。    \n\n## 1.2 工作的虚拟网卡\n\n​    bridged模式下的VMnet0虚拟网络    \n\n## 1.3 架构图\n\n1）使用VMnet0虚拟交换机，此时虚拟机相当与网络上的一台独立计算机与主机一样，拥有一个独立的IP地址。使用**桥接方式**，A，A1，A2，B可互访。\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5jxbkbk6j30ir0a00ta.jpg)\n\n2）虚拟机就像一台真正的计算机一样，直接连接到实际的网络上，可以理解为与宿主机没有任何联系。\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5jzb54q3j30ig08caam.jpg)\n\n## 1.4 使用范围\n\n​    1）如果你想利用VMWare在局域网内新建一个虚拟服务器，为局域网用户提供网络服务，就应该选择桥接模式。      2）如果你有路由器的话，那么就可以使用桥接方式上网，因为此时你申请的IP地址是写在了路由器上，而不是你的机器上，这样包括你的主机，虚拟机，也包括 连在路由器上的其他人的机器，都将可以上网，使用着由路由器分配的IP地址。  \n\n# 2 host-only(主机模式)\n\n## 2.1 模式简介\n\n​    在某些特殊的网络调试环境中，要求将真实环境和虚拟环境隔离开，这时你就可采用host-only模式。在host-only模式中，所有的虚拟系统是可以相互通信的，但虚拟系统和真实的网络是被隔离开的。  　　提示：在host-only模式下，虚拟系统和宿主机器系统是可以相互通信的，相当于这两台机器通过双绞线互连。  　　在host-only模式下，虚拟系统的TCP/IP配置信息(如IP地址、网关地址、DNS服务器等)，都是由VMnet1(host-only)虚拟网络的DHCP服务器来动态分配的。  　　如果你想利用VMWare创建一个与网内其他机器相隔离的虚拟系统，进行某些特殊的网络调试工作，可以选择host-only模式。    [Linux虚拟机实现Host-only方式上网](http://blog.csdn.net/suneqing/article/details/51787336)\n\n## 2.2 工作的虚拟网卡\n\n   host-only模式下的 VMnet1虚拟网络  \n\n## 2.3 架构图\n\n1）使用Vmnet1虚拟交换机，此时虚拟机只能与虚拟机、主机互访。也就是不能上Internet。使用Host方式，A，A1，A2可以互访，但A1，A2不能访问B，也不能被B访问。\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5jzy56yqj30h709ajs1.jpg)\n\n2）这种方式下，虚拟机的网卡连接到宿主的 VMnet1 上，但系统并不为虚拟机提供任何路由服务，因此虚拟机只能和宿主机进行通信，而不能连接到实际网络上。\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5k09nm0nj30hb086dgg.jpg)\n\n## 2.4 使用范围\n\n   如果你想利用VMWare创建一个与网内其他机器相隔离的虚拟系统，进行某些特殊的网络调试工作，可以选择host-only模式。  \n\n# 3 NAT(网络地址转换模式)\n\n## 3.1 模式简介\n\n​    使用NAT模式，就是让虚拟系统借助NAT(网络地址转换)功能，通过宿主机器所在的网络来访问公网。也就是说，使用NAT模式可以实现在虚拟 系统里访问互联网。NAT模式下的虚拟系统的TCP/IP配置信息是由VMnet8(NAT)虚拟网络的DHCP服务器提供的，无法进行手工修改，因此虚拟系统也就无法和本局域网中的其他真实主机进行通讯。采用NAT模式最大的优势是虚拟系统接入互联网非常简单，你不需要进行任何其他的配置，只需要宿主机 器能访问互联网即可。    \n\n## 3.2 工作的虚拟网卡\n\n   NAT模式下的VMnet8虚拟网络    \n\n## 3.3 架构图\n\n1） 使用Vmnet8虚拟交换机，此时虚拟机可以通过主机单向网络上的其他工作站，其他工作站不能访问虚拟机。用NAT方式，A1，A2可以访问B，但B不可以访问A1，A2。但A，A1，A2可以互访。\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5k0pewx6j30i909gaav.jpg)\n\n2） 这种方式下，虚拟机的网卡连接到宿主的 VMnet8 上。此时系统的 VMWare NAT Service 服务就充当了路由器的作用，负责将虚拟机发到 VMnet8 的包进行地址转换之后发到实际的网络上，再将实际网络上返回的包进行地址转换后通过 VMnet8 发送给虚拟机。VMWare DHCP Service 负责为虚拟机提供 DHCP 服务。\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5k0w2pqrj30hm0863z4.jpg)\n\n## 3.4 使用范围\n\n​    如果你想利用VMWare安装一个新的虚拟系统，在虚拟系统中不用进行任何手工配置就能直接访问互联网，建议你采用NAT模式。\n\n# 参考\n\n<https://blog.csdn.net/CleverCode/article/details/45934233>\n\n","slug":"docker/网络配置三种模式对比（桥接模式，主机模式，网络地址转换）","published":1,"updated":"2020-09-20T03:22:55.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblmi00314tjef8qytq6m","content":"<h1 id=\"VMware三种网络模式简介\"><a href=\"#VMware三种网络模式简介\" class=\"headerlink\" title=\"VMware三种网络模式简介\"></a>VMware三种网络模式简介</h1><p>​    VMWare提供了三种工作模式，它们是bridged(桥接模式)、NAT(网络地址转换模式)和host-only(主机模式)。安装好虚拟机以后，在网络连接里面可以看到多了两块网卡。如下图。</p>\n<h1 id=\"1-bridged-桥接模式\"><a href=\"#1-bridged-桥接模式\" class=\"headerlink\" title=\"1 bridged(桥接模式)\"></a>1 bridged(桥接模式)</h1><h2 id=\"1-1-模式简介\"><a href=\"#1-1-模式简介\" class=\"headerlink\" title=\"1.1 模式简介\"></a>1.1 模式简介</h2><p>　　在这种模式下，VMWare虚拟出来的操作系统就像是局域网中的一台独立的主机，它可以访问网内任何一台机器。  　　在桥接模式下，你需要手工为虚拟系统配置IP地址、子网掩码，而且还要和<a href=\"https://cloud.tencent.com/product/cdh?from=10680\" target=\"_blank\" rel=\"noopener\">宿主机</a>器处于同一网段，这样虚拟系统才能和宿主机器进行通信。同时，由 于这个虚拟系统是局域网中的一个独立的主机系统，那么就可以手工配置它的TCP/IP配置信息，以实现通过局域网的网关或路由器访问互联网。  　　使用桥接模式的虚拟系统和宿主机器的关系，就像连接在同一个Hub上的两台电脑。想让它们相互通讯，你就需要为虚拟系统配置IP地址和子网掩码，否则就无法通信。    </p>\n<h2 id=\"1-2-工作的虚拟网卡\"><a href=\"#1-2-工作的虚拟网卡\" class=\"headerlink\" title=\"1.2 工作的虚拟网卡\"></a>1.2 工作的虚拟网卡</h2><p>​    bridged模式下的VMnet0虚拟网络    </p>\n<h2 id=\"1-3-架构图\"><a href=\"#1-3-架构图\" class=\"headerlink\" title=\"1.3 架构图\"></a>1.3 架构图</h2><p>1）使用VMnet0虚拟交换机，此时虚拟机相当与网络上的一台独立计算机与主机一样，拥有一个独立的IP地址。使用<strong>桥接方式</strong>，A，A1，A2，B可互访。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5jxbkbk6j30ir0a00ta.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>2）虚拟机就像一台真正的计算机一样，直接连接到实际的网络上，可以理解为与宿主机没有任何联系。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5jzb54q3j30ig08caam.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"1-4-使用范围\"><a href=\"#1-4-使用范围\" class=\"headerlink\" title=\"1.4 使用范围\"></a>1.4 使用范围</h2><p>​    1）如果你想利用VMWare在局域网内新建一个虚拟服务器，为局域网用户提供网络服务，就应该选择桥接模式。      2）如果你有路由器的话，那么就可以使用桥接方式上网，因为此时你申请的IP地址是写在了路由器上，而不是你的机器上，这样包括你的主机，虚拟机，也包括 连在路由器上的其他人的机器，都将可以上网，使用着由路由器分配的IP地址。  </p>\n<h1 id=\"2-host-only-主机模式\"><a href=\"#2-host-only-主机模式\" class=\"headerlink\" title=\"2 host-only(主机模式)\"></a>2 host-only(主机模式)</h1><h2 id=\"2-1-模式简介\"><a href=\"#2-1-模式简介\" class=\"headerlink\" title=\"2.1 模式简介\"></a>2.1 模式简介</h2><p>​    在某些特殊的网络调试环境中，要求将真实环境和虚拟环境隔离开，这时你就可采用host-only模式。在host-only模式中，所有的虚拟系统是可以相互通信的，但虚拟系统和真实的网络是被隔离开的。  　　提示：在host-only模式下，虚拟系统和宿主机器系统是可以相互通信的，相当于这两台机器通过双绞线互连。  　　在host-only模式下，虚拟系统的TCP/IP配置信息(如IP地址、网关地址、DNS服务器等)，都是由VMnet1(host-only)虚拟网络的DHCP服务器来动态分配的。  　　如果你想利用VMWare创建一个与网内其他机器相隔离的虚拟系统，进行某些特殊的网络调试工作，可以选择host-only模式。    <a href=\"http://blog.csdn.net/suneqing/article/details/51787336\" target=\"_blank\" rel=\"noopener\">Linux虚拟机实现Host-only方式上网</a></p>\n<h2 id=\"2-2-工作的虚拟网卡\"><a href=\"#2-2-工作的虚拟网卡\" class=\"headerlink\" title=\"2.2 工作的虚拟网卡\"></a>2.2 工作的虚拟网卡</h2><p>   host-only模式下的 VMnet1虚拟网络  </p>\n<h2 id=\"2-3-架构图\"><a href=\"#2-3-架构图\" class=\"headerlink\" title=\"2.3 架构图\"></a>2.3 架构图</h2><p>1）使用Vmnet1虚拟交换机，此时虚拟机只能与虚拟机、主机互访。也就是不能上Internet。使用Host方式，A，A1，A2可以互访，但A1，A2不能访问B，也不能被B访问。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5jzy56yqj30h709ajs1.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>2）这种方式下，虚拟机的网卡连接到宿主的 VMnet1 上，但系统并不为虚拟机提供任何路由服务，因此虚拟机只能和宿主机进行通信，而不能连接到实际网络上。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5k09nm0nj30hb086dgg.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"2-4-使用范围\"><a href=\"#2-4-使用范围\" class=\"headerlink\" title=\"2.4 使用范围\"></a>2.4 使用范围</h2><p>   如果你想利用VMWare创建一个与网内其他机器相隔离的虚拟系统，进行某些特殊的网络调试工作，可以选择host-only模式。  </p>\n<h1 id=\"3-NAT-网络地址转换模式\"><a href=\"#3-NAT-网络地址转换模式\" class=\"headerlink\" title=\"3 NAT(网络地址转换模式)\"></a>3 NAT(网络地址转换模式)</h1><h2 id=\"3-1-模式简介\"><a href=\"#3-1-模式简介\" class=\"headerlink\" title=\"3.1 模式简介\"></a>3.1 模式简介</h2><p>​    使用NAT模式，就是让虚拟系统借助NAT(网络地址转换)功能，通过宿主机器所在的网络来访问公网。也就是说，使用NAT模式可以实现在虚拟 系统里访问互联网。NAT模式下的虚拟系统的TCP/IP配置信息是由VMnet8(NAT)虚拟网络的DHCP服务器提供的，无法进行手工修改，因此虚拟系统也就无法和本局域网中的其他真实主机进行通讯。采用NAT模式最大的优势是虚拟系统接入互联网非常简单，你不需要进行任何其他的配置，只需要宿主机 器能访问互联网即可。    </p>\n<h2 id=\"3-2-工作的虚拟网卡\"><a href=\"#3-2-工作的虚拟网卡\" class=\"headerlink\" title=\"3.2 工作的虚拟网卡\"></a>3.2 工作的虚拟网卡</h2><p>   NAT模式下的VMnet8虚拟网络    </p>\n<h2 id=\"3-3-架构图\"><a href=\"#3-3-架构图\" class=\"headerlink\" title=\"3.3 架构图\"></a>3.3 架构图</h2><p>1） 使用Vmnet8虚拟交换机，此时虚拟机可以通过主机单向网络上的其他工作站，其他工作站不能访问虚拟机。用NAT方式，A1，A2可以访问B，但B不可以访问A1，A2。但A，A1，A2可以互访。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5k0pewx6j30i909gaav.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>2） 这种方式下，虚拟机的网卡连接到宿主的 VMnet8 上。此时系统的 VMWare NAT Service 服务就充当了路由器的作用，负责将虚拟机发到 VMnet8 的包进行地址转换之后发到实际的网络上，再将实际网络上返回的包进行地址转换后通过 VMnet8 发送给虚拟机。VMWare DHCP Service 负责为虚拟机提供 DHCP 服务。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5k0w2pqrj30hm0863z4.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"3-4-使用范围\"><a href=\"#3-4-使用范围\" class=\"headerlink\" title=\"3.4 使用范围\"></a>3.4 使用范围</h2><p>​    如果你想利用VMWare安装一个新的虚拟系统，在虚拟系统中不用进行任何手工配置就能直接访问互联网，建议你采用NAT模式。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/CleverCode/article/details/45934233\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/CleverCode/article/details/45934233</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"VMware三种网络模式简介\"><a href=\"#VMware三种网络模式简介\" class=\"headerlink\" title=\"VMware三种网络模式简介\"></a>VMware三种网络模式简介</h1><p>​    VMWare提供了三种工作模式，它们是bridged(桥接模式)、NAT(网络地址转换模式)和host-only(主机模式)。安装好虚拟机以后，在网络连接里面可以看到多了两块网卡。如下图。</p>\n<h1 id=\"1-bridged-桥接模式\"><a href=\"#1-bridged-桥接模式\" class=\"headerlink\" title=\"1 bridged(桥接模式)\"></a>1 bridged(桥接模式)</h1><h2 id=\"1-1-模式简介\"><a href=\"#1-1-模式简介\" class=\"headerlink\" title=\"1.1 模式简介\"></a>1.1 模式简介</h2><p>　　在这种模式下，VMWare虚拟出来的操作系统就像是局域网中的一台独立的主机，它可以访问网内任何一台机器。  　　在桥接模式下，你需要手工为虚拟系统配置IP地址、子网掩码，而且还要和<a href=\"https://cloud.tencent.com/product/cdh?from=10680\" target=\"_blank\" rel=\"noopener\">宿主机</a>器处于同一网段，这样虚拟系统才能和宿主机器进行通信。同时，由 于这个虚拟系统是局域网中的一个独立的主机系统，那么就可以手工配置它的TCP/IP配置信息，以实现通过局域网的网关或路由器访问互联网。  　　使用桥接模式的虚拟系统和宿主机器的关系，就像连接在同一个Hub上的两台电脑。想让它们相互通讯，你就需要为虚拟系统配置IP地址和子网掩码，否则就无法通信。    </p>\n<h2 id=\"1-2-工作的虚拟网卡\"><a href=\"#1-2-工作的虚拟网卡\" class=\"headerlink\" title=\"1.2 工作的虚拟网卡\"></a>1.2 工作的虚拟网卡</h2><p>​    bridged模式下的VMnet0虚拟网络    </p>\n<h2 id=\"1-3-架构图\"><a href=\"#1-3-架构图\" class=\"headerlink\" title=\"1.3 架构图\"></a>1.3 架构图</h2><p>1）使用VMnet0虚拟交换机，此时虚拟机相当与网络上的一台独立计算机与主机一样，拥有一个独立的IP地址。使用<strong>桥接方式</strong>，A，A1，A2，B可互访。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5jxbkbk6j30ir0a00ta.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>2）虚拟机就像一台真正的计算机一样，直接连接到实际的网络上，可以理解为与宿主机没有任何联系。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5jzb54q3j30ig08caam.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"1-4-使用范围\"><a href=\"#1-4-使用范围\" class=\"headerlink\" title=\"1.4 使用范围\"></a>1.4 使用范围</h2><p>​    1）如果你想利用VMWare在局域网内新建一个虚拟服务器，为局域网用户提供网络服务，就应该选择桥接模式。      2）如果你有路由器的话，那么就可以使用桥接方式上网，因为此时你申请的IP地址是写在了路由器上，而不是你的机器上，这样包括你的主机，虚拟机，也包括 连在路由器上的其他人的机器，都将可以上网，使用着由路由器分配的IP地址。  </p>\n<h1 id=\"2-host-only-主机模式\"><a href=\"#2-host-only-主机模式\" class=\"headerlink\" title=\"2 host-only(主机模式)\"></a>2 host-only(主机模式)</h1><h2 id=\"2-1-模式简介\"><a href=\"#2-1-模式简介\" class=\"headerlink\" title=\"2.1 模式简介\"></a>2.1 模式简介</h2><p>​    在某些特殊的网络调试环境中，要求将真实环境和虚拟环境隔离开，这时你就可采用host-only模式。在host-only模式中，所有的虚拟系统是可以相互通信的，但虚拟系统和真实的网络是被隔离开的。  　　提示：在host-only模式下，虚拟系统和宿主机器系统是可以相互通信的，相当于这两台机器通过双绞线互连。  　　在host-only模式下，虚拟系统的TCP/IP配置信息(如IP地址、网关地址、DNS服务器等)，都是由VMnet1(host-only)虚拟网络的DHCP服务器来动态分配的。  　　如果你想利用VMWare创建一个与网内其他机器相隔离的虚拟系统，进行某些特殊的网络调试工作，可以选择host-only模式。    <a href=\"http://blog.csdn.net/suneqing/article/details/51787336\" target=\"_blank\" rel=\"noopener\">Linux虚拟机实现Host-only方式上网</a></p>\n<h2 id=\"2-2-工作的虚拟网卡\"><a href=\"#2-2-工作的虚拟网卡\" class=\"headerlink\" title=\"2.2 工作的虚拟网卡\"></a>2.2 工作的虚拟网卡</h2><p>   host-only模式下的 VMnet1虚拟网络  </p>\n<h2 id=\"2-3-架构图\"><a href=\"#2-3-架构图\" class=\"headerlink\" title=\"2.3 架构图\"></a>2.3 架构图</h2><p>1）使用Vmnet1虚拟交换机，此时虚拟机只能与虚拟机、主机互访。也就是不能上Internet。使用Host方式，A，A1，A2可以互访，但A1，A2不能访问B，也不能被B访问。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5jzy56yqj30h709ajs1.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>2）这种方式下，虚拟机的网卡连接到宿主的 VMnet1 上，但系统并不为虚拟机提供任何路由服务，因此虚拟机只能和宿主机进行通信，而不能连接到实际网络上。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5k09nm0nj30hb086dgg.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"2-4-使用范围\"><a href=\"#2-4-使用范围\" class=\"headerlink\" title=\"2.4 使用范围\"></a>2.4 使用范围</h2><p>   如果你想利用VMWare创建一个与网内其他机器相隔离的虚拟系统，进行某些特殊的网络调试工作，可以选择host-only模式。  </p>\n<h1 id=\"3-NAT-网络地址转换模式\"><a href=\"#3-NAT-网络地址转换模式\" class=\"headerlink\" title=\"3 NAT(网络地址转换模式)\"></a>3 NAT(网络地址转换模式)</h1><h2 id=\"3-1-模式简介\"><a href=\"#3-1-模式简介\" class=\"headerlink\" title=\"3.1 模式简介\"></a>3.1 模式简介</h2><p>​    使用NAT模式，就是让虚拟系统借助NAT(网络地址转换)功能，通过宿主机器所在的网络来访问公网。也就是说，使用NAT模式可以实现在虚拟 系统里访问互联网。NAT模式下的虚拟系统的TCP/IP配置信息是由VMnet8(NAT)虚拟网络的DHCP服务器提供的，无法进行手工修改，因此虚拟系统也就无法和本局域网中的其他真实主机进行通讯。采用NAT模式最大的优势是虚拟系统接入互联网非常简单，你不需要进行任何其他的配置，只需要宿主机 器能访问互联网即可。    </p>\n<h2 id=\"3-2-工作的虚拟网卡\"><a href=\"#3-2-工作的虚拟网卡\" class=\"headerlink\" title=\"3.2 工作的虚拟网卡\"></a>3.2 工作的虚拟网卡</h2><p>   NAT模式下的VMnet8虚拟网络    </p>\n<h2 id=\"3-3-架构图\"><a href=\"#3-3-架构图\" class=\"headerlink\" title=\"3.3 架构图\"></a>3.3 架构图</h2><p>1） 使用Vmnet8虚拟交换机，此时虚拟机可以通过主机单向网络上的其他工作站，其他工作站不能访问虚拟机。用NAT方式，A1，A2可以访问B，但B不可以访问A1，A2。但A，A1，A2可以互访。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5k0pewx6j30i909gaav.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>2） 这种方式下，虚拟机的网卡连接到宿主的 VMnet8 上。此时系统的 VMWare NAT Service 服务就充当了路由器的作用，负责将虚拟机发到 VMnet8 的包进行地址转换之后发到实际的网络上，再将实际网络上返回的包进行地址转换后通过 VMnet8 发送给虚拟机。VMWare DHCP Service 负责为虚拟机提供 DHCP 服务。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5k0w2pqrj30hm0863z4.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"3-4-使用范围\"><a href=\"#3-4-使用范围\" class=\"headerlink\" title=\"3.4 使用范围\"></a>3.4 使用范围</h2><p>​    如果你想利用VMWare安装一个新的虚拟系统，在虚拟系统中不用进行任何手工配置就能直接访问互联网，建议你采用NAT模式。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/CleverCode/article/details/45934233\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/CleverCode/article/details/45934233</a></p>\n"},{"title":"go工程搭建","date":"2019-04-09T01:26:21.000Z","_content":"\n# 工程基本结构\n\n","source":"_posts/go/go工程搭建.md","raw":"---\ntitle: go工程搭建\ndate: 2019-04-09 09:26:21\ntags:\n- go\n---\n\n# 工程基本结构\n\n","slug":"go/go工程搭建","published":1,"updated":"2019-07-22T08:16:14.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblmi00324tjet5r68myb","content":"<h1 id=\"工程基本结构\"><a href=\"#工程基本结构\" class=\"headerlink\" title=\"工程基本结构\"></a>工程基本结构</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"工程基本结构\"><a href=\"#工程基本结构\" class=\"headerlink\" title=\"工程基本结构\"></a>工程基本结构</h1>"},{"title":"sqlx基本使用","date":"2019-02-13T08:15:58.000Z","_content":"\n# 安装\n\n```bash\ngo get github.com/jmoiron/sqlx\n```\n\n# 连接数据库\n\n```go\nvar db *sqlx.DB\n \n// exactly the same as the built-in\ndb = sqlx.Open(\"sqlite3\", \":memory:\")\n \n// from a pre-existing sql.DB; note the required driverName\ndb = sqlx.NewDb(sql.Open(\"sqlite3\", \":memory:\"), \"sqlite3\")\n \n// force a connection and test that it worked\nerr = db.Ping()\n```\n\n# 查询\n\n## Exec\n\n直接执行，适合add,update,delete\n\n```go\nschema := `CREATE TABLE place (\n    country text,\n    city text NULL,\n    telcode integer);`\n \n// execute a query on the server\nresult, err := db.Exec(schema)\n \n// or, you can use MustExec, which panics on error\ncityState := `INSERT INTO place (country, telcode) VALUES (?, ?)`\ncountryCity := `INSERT INTO place (country, city, telcode) VALUES (?, ?, ?)`\ndb.MustExec(cityState, \"Hong Kong\", 852)\ndb.MustExec(cityState, \"Singapore\", 65)\ndb.MustExec(countryCity, \"South Africa\", \"Johannesburg\", 27)\n```\n\n## Query\n\n查询数据库，适合select\n\n```go\n// fetch all places from the db\nrows, err := db.Query(\"SELECT country, city, telcode FROM place\")\n \n// iterate over each row\nfor rows.Next() {\n    var country string\n    // note that city can be NULL, so we use the NullString type\n    var city    sql.NullString\n    var telcode int\n    err = rows.Scan(&country, &city, &telcode)\n}\n\n// queryx 可以对结果转换成结构体\nvar person2 User\n\trowxs,err :=db.Queryx(\"SELECT * FROM sys_user LIMIT 1\")\n\tif err != nil{\n\t\tpanic(err)\n\t}\n\tfor rowxs.Next(){\n\t\trowxs.StructScan(&person2)\n\t\tfmt.Println(person2)\n\t}\n```\n\n## Select\n\n```go\np := Place{}\npp := []Place{}\n \n// this will pull the first place directly into p\nerr = db.Get(&p, \"SELECT * FROM place LIMIT 1\")\n \n// this will pull places with telcode > 50 into the slice pp\nerr = db.Select(&pp, \"SELECT * FROM place WHERE telcode > ?\", 50)\n \n// they work with regular types as well\nvar id int\nerr = db.Get(&id, \"SELECT count(*) FROM place\")\n \n// fetch at most 10 place names\nvar names []string\nerr = db.Select(&names, \"SELECT name FROM place LIMIT 10\")\n```\n\n# 事务\n\n```go\n// this will not work if connection pool > 1\ndb.MustExec(\"BEGIN;\")\ndb.MustExec(...)\ndb.MustExec(\"COMMIT;\")\n```\n\n# 预编译\n\n```go\nstmt, err := db.Prepare(`SELECT * FROM place WHERE telcode=?`)\nrow = stmt.QueryRow(65)\n \ntx, err := db.Begin()\ntxStmt, err := tx.Prepare(`SELECT * FROM place WHERE telcode=?`)\nrow = txStmt.QueryRow(852)\n```\n\n# Named Queries\n\n```go\n// named query with a struct\np := Place{Country: \"South Africa\"}\nrows, err := db.NamedQuery(`SELECT * FROM place WHERE country=:country`, p)\n \n// named query with a map\nm := map[string]interface{}{\"city\": \"Johannesburg\"}\nresult, err := db.NamedExec(`SELECT * FROM place WHERE city=:city`, m)\n\n\np := Place{TelephoneCode: 50}\npp := []Place{}\n \n// select all telcodes > 50\nnstmt, err := db.PrepareNamed(`SELECT * FROM place WHERE telcode > :telcode`)\nerr = nstmt.Select(&pp, p)\n\n\narg := map[string]interface{}{\n    \"published\": true,\n    \"authors\": []{8, 19, 32, 44},\n}\nquery, args, err := sqlx.Named(\"SELECT * FROM articles WHERE published=:published AND author_id IN (:authors)\", arg)\nquery, args, err := sqlx.In(query, args...)\nquery = db.Rebind(query)\ndb.Query(query, args...)\n```\n\n\n\n# 参考\n\n> http://jmoiron.github.io/sqlx/\n\n","source":"_posts/go/sqlx基本使用.md","raw":"---\ntitle: sqlx基本使用\ndate: 2019-02-13 16:15:58\ntags:\n- go\n---\n\n# 安装\n\n```bash\ngo get github.com/jmoiron/sqlx\n```\n\n# 连接数据库\n\n```go\nvar db *sqlx.DB\n \n// exactly the same as the built-in\ndb = sqlx.Open(\"sqlite3\", \":memory:\")\n \n// from a pre-existing sql.DB; note the required driverName\ndb = sqlx.NewDb(sql.Open(\"sqlite3\", \":memory:\"), \"sqlite3\")\n \n// force a connection and test that it worked\nerr = db.Ping()\n```\n\n# 查询\n\n## Exec\n\n直接执行，适合add,update,delete\n\n```go\nschema := `CREATE TABLE place (\n    country text,\n    city text NULL,\n    telcode integer);`\n \n// execute a query on the server\nresult, err := db.Exec(schema)\n \n// or, you can use MustExec, which panics on error\ncityState := `INSERT INTO place (country, telcode) VALUES (?, ?)`\ncountryCity := `INSERT INTO place (country, city, telcode) VALUES (?, ?, ?)`\ndb.MustExec(cityState, \"Hong Kong\", 852)\ndb.MustExec(cityState, \"Singapore\", 65)\ndb.MustExec(countryCity, \"South Africa\", \"Johannesburg\", 27)\n```\n\n## Query\n\n查询数据库，适合select\n\n```go\n// fetch all places from the db\nrows, err := db.Query(\"SELECT country, city, telcode FROM place\")\n \n// iterate over each row\nfor rows.Next() {\n    var country string\n    // note that city can be NULL, so we use the NullString type\n    var city    sql.NullString\n    var telcode int\n    err = rows.Scan(&country, &city, &telcode)\n}\n\n// queryx 可以对结果转换成结构体\nvar person2 User\n\trowxs,err :=db.Queryx(\"SELECT * FROM sys_user LIMIT 1\")\n\tif err != nil{\n\t\tpanic(err)\n\t}\n\tfor rowxs.Next(){\n\t\trowxs.StructScan(&person2)\n\t\tfmt.Println(person2)\n\t}\n```\n\n## Select\n\n```go\np := Place{}\npp := []Place{}\n \n// this will pull the first place directly into p\nerr = db.Get(&p, \"SELECT * FROM place LIMIT 1\")\n \n// this will pull places with telcode > 50 into the slice pp\nerr = db.Select(&pp, \"SELECT * FROM place WHERE telcode > ?\", 50)\n \n// they work with regular types as well\nvar id int\nerr = db.Get(&id, \"SELECT count(*) FROM place\")\n \n// fetch at most 10 place names\nvar names []string\nerr = db.Select(&names, \"SELECT name FROM place LIMIT 10\")\n```\n\n# 事务\n\n```go\n// this will not work if connection pool > 1\ndb.MustExec(\"BEGIN;\")\ndb.MustExec(...)\ndb.MustExec(\"COMMIT;\")\n```\n\n# 预编译\n\n```go\nstmt, err := db.Prepare(`SELECT * FROM place WHERE telcode=?`)\nrow = stmt.QueryRow(65)\n \ntx, err := db.Begin()\ntxStmt, err := tx.Prepare(`SELECT * FROM place WHERE telcode=?`)\nrow = txStmt.QueryRow(852)\n```\n\n# Named Queries\n\n```go\n// named query with a struct\np := Place{Country: \"South Africa\"}\nrows, err := db.NamedQuery(`SELECT * FROM place WHERE country=:country`, p)\n \n// named query with a map\nm := map[string]interface{}{\"city\": \"Johannesburg\"}\nresult, err := db.NamedExec(`SELECT * FROM place WHERE city=:city`, m)\n\n\np := Place{TelephoneCode: 50}\npp := []Place{}\n \n// select all telcodes > 50\nnstmt, err := db.PrepareNamed(`SELECT * FROM place WHERE telcode > :telcode`)\nerr = nstmt.Select(&pp, p)\n\n\narg := map[string]interface{}{\n    \"published\": true,\n    \"authors\": []{8, 19, 32, 44},\n}\nquery, args, err := sqlx.Named(\"SELECT * FROM articles WHERE published=:published AND author_id IN (:authors)\", arg)\nquery, args, err := sqlx.In(query, args...)\nquery = db.Rebind(query)\ndb.Query(query, args...)\n```\n\n\n\n# 参考\n\n> http://jmoiron.github.io/sqlx/\n\n","slug":"go/sqlx基本使用","published":1,"updated":"2019-07-22T08:16:14.642Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblmj00344tjerokxob2s","content":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/jmoiron/sqlx</span><br></pre></td></tr></table></figure>\n<h1 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> db *sqlx.DB</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// exactly the same as the built-in</span></span><br><span class=\"line\">db = sqlx.Open(<span class=\"string\">\"sqlite3\"</span>, <span class=\"string\">\":memory:\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// from a pre-existing sql.DB; note the required driverName</span></span><br><span class=\"line\">db = sqlx.NewDb(sql.Open(<span class=\"string\">\"sqlite3\"</span>, <span class=\"string\">\":memory:\"</span>), <span class=\"string\">\"sqlite3\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// force a connection and test that it worked</span></span><br><span class=\"line\">err = db.Ping()</span><br></pre></td></tr></table></figure>\n<h1 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h1><h2 id=\"Exec\"><a href=\"#Exec\" class=\"headerlink\" title=\"Exec\"></a>Exec</h2><p>直接执行，适合add,update,delete</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schema := <span class=\"string\">`CREATE TABLE place (</span></span><br><span class=\"line\"><span class=\"string\">    country text,</span></span><br><span class=\"line\"><span class=\"string\">    city text NULL,</span></span><br><span class=\"line\"><span class=\"string\">    telcode integer);`</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// execute a query on the server</span></span><br><span class=\"line\">result, err := db.Exec(schema)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// or, you can use MustExec, which panics on error</span></span><br><span class=\"line\">cityState := <span class=\"string\">`INSERT INTO place (country, telcode) VALUES (?, ?)`</span></span><br><span class=\"line\">countryCity := <span class=\"string\">`INSERT INTO place (country, city, telcode) VALUES (?, ?, ?)`</span></span><br><span class=\"line\">db.MustExec(cityState, <span class=\"string\">\"Hong Kong\"</span>, <span class=\"number\">852</span>)</span><br><span class=\"line\">db.MustExec(cityState, <span class=\"string\">\"Singapore\"</span>, <span class=\"number\">65</span>)</span><br><span class=\"line\">db.MustExec(countryCity, <span class=\"string\">\"South Africa\"</span>, <span class=\"string\">\"Johannesburg\"</span>, <span class=\"number\">27</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Query\"><a href=\"#Query\" class=\"headerlink\" title=\"Query\"></a>Query</h2><p>查询数据库，适合select</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// fetch all places from the db</span></span><br><span class=\"line\">rows, err := db.Query(<span class=\"string\">\"SELECT country, city, telcode FROM place\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// iterate over each row</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> rows.Next() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> country <span class=\"keyword\">string</span></span><br><span class=\"line\">    <span class=\"comment\">// note that city can be NULL, so we use the NullString type</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> city    sql.NullString</span><br><span class=\"line\">    <span class=\"keyword\">var</span> telcode <span class=\"keyword\">int</span></span><br><span class=\"line\">    err = rows.Scan(&amp;country, &amp;city, &amp;telcode)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// queryx 可以对结果转换成结构体</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 User</span><br><span class=\"line\">\trowxs,err :=db.Queryx(<span class=\"string\">\"SELECT * FROM sys_user LIMIT 1\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> rowxs.Next()&#123;</span><br><span class=\"line\">\t\trowxs.StructScan(&amp;person2)</span><br><span class=\"line\">\t\tfmt.Println(person2)</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Select\"><a href=\"#Select\" class=\"headerlink\" title=\"Select\"></a>Select</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p := Place&#123;&#125;</span><br><span class=\"line\">pp := []Place&#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// this will pull the first place directly into p</span></span><br><span class=\"line\">err = db.Get(&amp;p, <span class=\"string\">\"SELECT * FROM place LIMIT 1\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// this will pull places with telcode &gt; 50 into the slice pp</span></span><br><span class=\"line\">err = db.Select(&amp;pp, <span class=\"string\">\"SELECT * FROM place WHERE telcode &gt; ?\"</span>, <span class=\"number\">50</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// they work with regular types as well</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> id <span class=\"keyword\">int</span></span><br><span class=\"line\">err = db.Get(&amp;id, <span class=\"string\">\"SELECT count(*) FROM place\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// fetch at most 10 place names</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> names []<span class=\"keyword\">string</span></span><br><span class=\"line\">err = db.Select(&amp;names, <span class=\"string\">\"SELECT name FROM place LIMIT 10\"</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// this will not work if connection pool &gt; 1</span></span><br><span class=\"line\">db.MustExec(<span class=\"string\">\"BEGIN;\"</span>)</span><br><span class=\"line\">db.MustExec(...)</span><br><span class=\"line\">db.MustExec(<span class=\"string\">\"COMMIT;\"</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"预编译\"><a href=\"#预编译\" class=\"headerlink\" title=\"预编译\"></a>预编译</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stmt, err := db.Prepare(<span class=\"string\">`SELECT * FROM place WHERE telcode=?`</span>)</span><br><span class=\"line\">row = stmt.QueryRow(<span class=\"number\">65</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">tx, err := db.Begin()</span><br><span class=\"line\">txStmt, err := tx.Prepare(<span class=\"string\">`SELECT * FROM place WHERE telcode=?`</span>)</span><br><span class=\"line\">row = txStmt.QueryRow(<span class=\"number\">852</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"Named-Queries\"><a href=\"#Named-Queries\" class=\"headerlink\" title=\"Named Queries\"></a>Named Queries</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// named query with a struct</span></span><br><span class=\"line\">p := Place&#123;Country: <span class=\"string\">\"South Africa\"</span>&#125;</span><br><span class=\"line\">rows, err := db.NamedQuery(<span class=\"string\">`SELECT * FROM place WHERE country=:country`</span>, p)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// named query with a map</span></span><br><span class=\"line\">m := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">\"city\"</span>: <span class=\"string\">\"Johannesburg\"</span>&#125;</span><br><span class=\"line\">result, err := db.NamedExec(<span class=\"string\">`SELECT * FROM place WHERE city=:city`</span>, m)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p := Place&#123;TelephoneCode: <span class=\"number\">50</span>&#125;</span><br><span class=\"line\">pp := []Place&#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// select all telcodes &gt; 50</span></span><br><span class=\"line\">nstmt, err := db.PrepareNamed(<span class=\"string\">`SELECT * FROM place WHERE telcode &gt; :telcode`</span>)</span><br><span class=\"line\">err = nstmt.Select(&amp;pp, p)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">arg := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;</span><br><span class=\"line\">    <span class=\"string\">\"published\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"authors\"</span>: []&#123;<span class=\"number\">8</span>, <span class=\"number\">19</span>, <span class=\"number\">32</span>, <span class=\"number\">44</span>&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">query, args, err := sqlx.Named(<span class=\"string\">\"SELECT * FROM articles WHERE published=:published AND author_id IN (:authors)\"</span>, arg)</span><br><span class=\"line\">query, args, err := sqlx.In(query, args...)</span><br><span class=\"line\">query = db.Rebind(query)</span><br><span class=\"line\">db.Query(query, args...)</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"http://jmoiron.github.io/sqlx/\" target=\"_blank\" rel=\"noopener\">http://jmoiron.github.io/sqlx/</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/jmoiron/sqlx</span><br></pre></td></tr></table></figure>\n<h1 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> db *sqlx.DB</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// exactly the same as the built-in</span></span><br><span class=\"line\">db = sqlx.Open(<span class=\"string\">\"sqlite3\"</span>, <span class=\"string\">\":memory:\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// from a pre-existing sql.DB; note the required driverName</span></span><br><span class=\"line\">db = sqlx.NewDb(sql.Open(<span class=\"string\">\"sqlite3\"</span>, <span class=\"string\">\":memory:\"</span>), <span class=\"string\">\"sqlite3\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// force a connection and test that it worked</span></span><br><span class=\"line\">err = db.Ping()</span><br></pre></td></tr></table></figure>\n<h1 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h1><h2 id=\"Exec\"><a href=\"#Exec\" class=\"headerlink\" title=\"Exec\"></a>Exec</h2><p>直接执行，适合add,update,delete</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schema := <span class=\"string\">`CREATE TABLE place (</span></span><br><span class=\"line\"><span class=\"string\">    country text,</span></span><br><span class=\"line\"><span class=\"string\">    city text NULL,</span></span><br><span class=\"line\"><span class=\"string\">    telcode integer);`</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// execute a query on the server</span></span><br><span class=\"line\">result, err := db.Exec(schema)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// or, you can use MustExec, which panics on error</span></span><br><span class=\"line\">cityState := <span class=\"string\">`INSERT INTO place (country, telcode) VALUES (?, ?)`</span></span><br><span class=\"line\">countryCity := <span class=\"string\">`INSERT INTO place (country, city, telcode) VALUES (?, ?, ?)`</span></span><br><span class=\"line\">db.MustExec(cityState, <span class=\"string\">\"Hong Kong\"</span>, <span class=\"number\">852</span>)</span><br><span class=\"line\">db.MustExec(cityState, <span class=\"string\">\"Singapore\"</span>, <span class=\"number\">65</span>)</span><br><span class=\"line\">db.MustExec(countryCity, <span class=\"string\">\"South Africa\"</span>, <span class=\"string\">\"Johannesburg\"</span>, <span class=\"number\">27</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Query\"><a href=\"#Query\" class=\"headerlink\" title=\"Query\"></a>Query</h2><p>查询数据库，适合select</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// fetch all places from the db</span></span><br><span class=\"line\">rows, err := db.Query(<span class=\"string\">\"SELECT country, city, telcode FROM place\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// iterate over each row</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> rows.Next() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> country <span class=\"keyword\">string</span></span><br><span class=\"line\">    <span class=\"comment\">// note that city can be NULL, so we use the NullString type</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> city    sql.NullString</span><br><span class=\"line\">    <span class=\"keyword\">var</span> telcode <span class=\"keyword\">int</span></span><br><span class=\"line\">    err = rows.Scan(&amp;country, &amp;city, &amp;telcode)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// queryx 可以对结果转换成结构体</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 User</span><br><span class=\"line\">\trowxs,err :=db.Queryx(<span class=\"string\">\"SELECT * FROM sys_user LIMIT 1\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> rowxs.Next()&#123;</span><br><span class=\"line\">\t\trowxs.StructScan(&amp;person2)</span><br><span class=\"line\">\t\tfmt.Println(person2)</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Select\"><a href=\"#Select\" class=\"headerlink\" title=\"Select\"></a>Select</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p := Place&#123;&#125;</span><br><span class=\"line\">pp := []Place&#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// this will pull the first place directly into p</span></span><br><span class=\"line\">err = db.Get(&amp;p, <span class=\"string\">\"SELECT * FROM place LIMIT 1\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// this will pull places with telcode &gt; 50 into the slice pp</span></span><br><span class=\"line\">err = db.Select(&amp;pp, <span class=\"string\">\"SELECT * FROM place WHERE telcode &gt; ?\"</span>, <span class=\"number\">50</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// they work with regular types as well</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> id <span class=\"keyword\">int</span></span><br><span class=\"line\">err = db.Get(&amp;id, <span class=\"string\">\"SELECT count(*) FROM place\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// fetch at most 10 place names</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> names []<span class=\"keyword\">string</span></span><br><span class=\"line\">err = db.Select(&amp;names, <span class=\"string\">\"SELECT name FROM place LIMIT 10\"</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// this will not work if connection pool &gt; 1</span></span><br><span class=\"line\">db.MustExec(<span class=\"string\">\"BEGIN;\"</span>)</span><br><span class=\"line\">db.MustExec(...)</span><br><span class=\"line\">db.MustExec(<span class=\"string\">\"COMMIT;\"</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"预编译\"><a href=\"#预编译\" class=\"headerlink\" title=\"预编译\"></a>预编译</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stmt, err := db.Prepare(<span class=\"string\">`SELECT * FROM place WHERE telcode=?`</span>)</span><br><span class=\"line\">row = stmt.QueryRow(<span class=\"number\">65</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">tx, err := db.Begin()</span><br><span class=\"line\">txStmt, err := tx.Prepare(<span class=\"string\">`SELECT * FROM place WHERE telcode=?`</span>)</span><br><span class=\"line\">row = txStmt.QueryRow(<span class=\"number\">852</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"Named-Queries\"><a href=\"#Named-Queries\" class=\"headerlink\" title=\"Named Queries\"></a>Named Queries</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// named query with a struct</span></span><br><span class=\"line\">p := Place&#123;Country: <span class=\"string\">\"South Africa\"</span>&#125;</span><br><span class=\"line\">rows, err := db.NamedQuery(<span class=\"string\">`SELECT * FROM place WHERE country=:country`</span>, p)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// named query with a map</span></span><br><span class=\"line\">m := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"string\">\"city\"</span>: <span class=\"string\">\"Johannesburg\"</span>&#125;</span><br><span class=\"line\">result, err := db.NamedExec(<span class=\"string\">`SELECT * FROM place WHERE city=:city`</span>, m)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p := Place&#123;TelephoneCode: <span class=\"number\">50</span>&#125;</span><br><span class=\"line\">pp := []Place&#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// select all telcodes &gt; 50</span></span><br><span class=\"line\">nstmt, err := db.PrepareNamed(<span class=\"string\">`SELECT * FROM place WHERE telcode &gt; :telcode`</span>)</span><br><span class=\"line\">err = nstmt.Select(&amp;pp, p)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">arg := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;&#123;</span><br><span class=\"line\">    <span class=\"string\">\"published\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"authors\"</span>: []&#123;<span class=\"number\">8</span>, <span class=\"number\">19</span>, <span class=\"number\">32</span>, <span class=\"number\">44</span>&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">query, args, err := sqlx.Named(<span class=\"string\">\"SELECT * FROM articles WHERE published=:published AND author_id IN (:authors)\"</span>, arg)</span><br><span class=\"line\">query, args, err := sqlx.In(query, args...)</span><br><span class=\"line\">query = db.Rebind(query)</span><br><span class=\"line\">db.Query(query, args...)</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"http://jmoiron.github.io/sqlx/\" target=\"_blank\" rel=\"noopener\">http://jmoiron.github.io/sqlx/</a></p>\n</blockquote>\n"},{"title":"hibernate使用hbm2ddl.auto=在生产环境更新.md","date":"2019-11-16T06:22:56.000Z","_content":"\n<https://www.codenong.com/221379/>","source":"_posts/java/hibernate使用hbm2ddl.auto=在生产环境更新.md","raw":"---\ntitle: hibernate使用hbm2ddl.auto=在生产环境更新.md\ndate: 2019-11-16 14:22:56\ntags:\n- java\n---\n\n<https://www.codenong.com/221379/>","slug":"java/hibernate使用hbm2ddl.auto=在生产环境更新","published":1,"updated":"2020-08-27T15:25:48.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblmk00364tje930h8c94","content":"<p><a href=\"https://www.codenong.com/221379/\" target=\"_blank\" rel=\"noopener\">https://www.codenong.com/221379/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.codenong.com/221379/\" target=\"_blank\" rel=\"noopener\">https://www.codenong.com/221379/</a></p>\n"},{"title":"java多线程自问","date":"2019-04-15T02:31:35.000Z","_content":"\n1. java创建线程的方式\n2. java的线程的类型\n3. Timer与TimerTask的区别\n4. 怎么启动、停止、加入、礼让线程\n5. 线程的生命周期以及其切换\n6. CountDownLatch、CyclicBarrier和Semaphore\n7. 什么是线程安全？Vector是一个线程安全类吗？ \n8. ","source":"_posts/java/java多线程自问.md","raw":"---\ntitle: java多线程自问\ndate: 2019-04-15 10:31:35\ntags:\n- java\n---\n\n1. java创建线程的方式\n2. java的线程的类型\n3. Timer与TimerTask的区别\n4. 怎么启动、停止、加入、礼让线程\n5. 线程的生命周期以及其切换\n6. CountDownLatch、CyclicBarrier和Semaphore\n7. 什么是线程安全？Vector是一个线程安全类吗？ \n8. ","slug":"java/java多线程自问","published":1,"updated":"2020-08-27T15:25:49.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblml00384tje8853h5ir","content":"<ol>\n<li>java创建线程的方式</li>\n<li>java的线程的类型</li>\n<li>Timer与TimerTask的区别</li>\n<li>怎么启动、停止、加入、礼让线程</li>\n<li>线程的生命周期以及其切换</li>\n<li>CountDownLatch、CyclicBarrier和Semaphore</li>\n<li>什么是线程安全？Vector是一个线程安全类吗？ </li>\n<li></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>java创建线程的方式</li>\n<li>java的线程的类型</li>\n<li>Timer与TimerTask的区别</li>\n<li>怎么启动、停止、加入、礼让线程</li>\n<li>线程的生命周期以及其切换</li>\n<li>CountDownLatch、CyclicBarrier和Semaphore</li>\n<li>什么是线程安全？Vector是一个线程安全类吗？ </li>\n<li></li>\n</ol>\n"},{"title":"java多线程","date":"2019-02-15T08:37:30.000Z","_content":"\n# 相关的类\n\n1. Runnable\n2. Thread\n3. Callable:比Runnable有个返回值\n4. Future\n5. FutureTask\n\n","source":"_posts/java/java多线程.md","raw":"---\ntitle: java多线程\ndate: 2019-02-15 16:37:30\ntags:\n- java\n---\n\n# 相关的类\n\n1. Runnable\n2. Thread\n3. Callable:比Runnable有个返回值\n4. Future\n5. FutureTask\n\n","slug":"java/java多线程","published":1,"updated":"2020-08-27T15:25:49.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblmm003a4tjejasqeix4","content":"<h1 id=\"相关的类\"><a href=\"#相关的类\" class=\"headerlink\" title=\"相关的类\"></a>相关的类</h1><ol>\n<li>Runnable</li>\n<li>Thread</li>\n<li>Callable:比Runnable有个返回值</li>\n<li>Future</li>\n<li>FutureTask</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"相关的类\"><a href=\"#相关的类\" class=\"headerlink\" title=\"相关的类\"></a>相关的类</h1><ol>\n<li>Runnable</li>\n<li>Thread</li>\n<li>Callable:比Runnable有个返回值</li>\n<li>Future</li>\n<li>FutureTask</li>\n</ol>\n"},{"title":"maven修改默认的jdk版本","date":"2020-10-09T17:00:00.000Z","_content":"\n> 当系统中装有多个 JDK 版本时，如果控制 Maven 能够指定到正确的版本\n\n## 出现的问题\n\n1. 在使用 `mvn clean package -Dmaven.test.skip=true` 对项目进行打包时\n2. 发现进度一直卡在编译无法继续执行\n3. 待编译项目 **pom.xml** 中指定的 JDK 版本是 1.8\n4. 通过 `mvn -version` 发现 Maven 获取的 JDK 版本是 11\n5. 这就是导致 Maven 无法顺利编译项目的根本原因\n\n## 查看当前 Maven 版本\n\n1. 下图中可以看到，Maven 当前指定的是 JDK 11\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj22t62pjj30hx02vaaq.jpg)\n\n## 查看当前 JDK 版本\n\n1. 下图中可以看到，当前 JDK 版本是 1.8 ，很明显和上图 Maven 获取到的版本不一致\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj23j7g3yj30cy020zkg.jpg)\n\n\n## 查看当前系统配置的所有 JDK 版本\n\n1. 下图中可以看到，当前系统配置了三个版本的 JDK ，而系统默认的是 JDK 11 ，与 Maven 获取到的一致\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj23v44u8j30e003fdgd.jpg)\n\n## 查看通过 JENV 管理的 JDK 版本\n\n1. 下图中可以看到，通过 JENV 切换到的 JDK 版本是 1.8 ，与 `java -version` 获取到的一致\n\n2. 这就说明 JENV \n\n   虽然可以管理当前 JDK 版本，但是无法切换当前系统的默认 JDK\n\n\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj244e81dj30cm02g74e.jpg)\n\n## 终极解决方案\n\n1. 在终端输入以下脚本，强制指定 \n\n   ```\n   JAVA_HOME\n   ```\n\n    的默认版本是 1.8 \n\n   - 这样虽然无法改变当前系统的默认 JDK 版本\n   -  **但是可以控制其他软件获取到的 JDK 版本**，这就已经满足需求了\n\n```sh\necho export \"JAVA_HOME=\\$(/usr/libexec/java_home -v 1.8)\" >> ~/.bash_profile\nsource ~/.bash_profile\n```\n\n### 再次查看当前 Maven 版本\n\n1. 下图中可以看到，Maven 当前指定的 JDK 已经替换成了 1.8\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj24erfomj30he02xjs2.jpg)\n\n### 再次查看当前系统配置的所有 JDK 版本\n\n1. 下图中可以看到，当前系统默认的 JDK 版本依旧是 11\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj24n80daj30dr03dq3h.jpg)\n\n","source":"_posts/java/maven修改默认的jdk版本.md","raw":"---\ntitle: maven修改默认的jdk版本\ndate: 2020-10-09 25:00:00\n---\n\n> 当系统中装有多个 JDK 版本时，如果控制 Maven 能够指定到正确的版本\n\n## 出现的问题\n\n1. 在使用 `mvn clean package -Dmaven.test.skip=true` 对项目进行打包时\n2. 发现进度一直卡在编译无法继续执行\n3. 待编译项目 **pom.xml** 中指定的 JDK 版本是 1.8\n4. 通过 `mvn -version` 发现 Maven 获取的 JDK 版本是 11\n5. 这就是导致 Maven 无法顺利编译项目的根本原因\n\n## 查看当前 Maven 版本\n\n1. 下图中可以看到，Maven 当前指定的是 JDK 11\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj22t62pjj30hx02vaaq.jpg)\n\n## 查看当前 JDK 版本\n\n1. 下图中可以看到，当前 JDK 版本是 1.8 ，很明显和上图 Maven 获取到的版本不一致\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj23j7g3yj30cy020zkg.jpg)\n\n\n## 查看当前系统配置的所有 JDK 版本\n\n1. 下图中可以看到，当前系统配置了三个版本的 JDK ，而系统默认的是 JDK 11 ，与 Maven 获取到的一致\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj23v44u8j30e003fdgd.jpg)\n\n## 查看通过 JENV 管理的 JDK 版本\n\n1. 下图中可以看到，通过 JENV 切换到的 JDK 版本是 1.8 ，与 `java -version` 获取到的一致\n\n2. 这就说明 JENV \n\n   虽然可以管理当前 JDK 版本，但是无法切换当前系统的默认 JDK\n\n\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj244e81dj30cm02g74e.jpg)\n\n## 终极解决方案\n\n1. 在终端输入以下脚本，强制指定 \n\n   ```\n   JAVA_HOME\n   ```\n\n    的默认版本是 1.8 \n\n   - 这样虽然无法改变当前系统的默认 JDK 版本\n   -  **但是可以控制其他软件获取到的 JDK 版本**，这就已经满足需求了\n\n```sh\necho export \"JAVA_HOME=\\$(/usr/libexec/java_home -v 1.8)\" >> ~/.bash_profile\nsource ~/.bash_profile\n```\n\n### 再次查看当前 Maven 版本\n\n1. 下图中可以看到，Maven 当前指定的 JDK 已经替换成了 1.8\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj24erfomj30he02xjs2.jpg)\n\n### 再次查看当前系统配置的所有 JDK 版本\n\n1. 下图中可以看到，当前系统默认的 JDK 版本依旧是 11\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj24n80daj30dr03dq3h.jpg)\n\n","slug":"java/maven修改默认的jdk版本","published":1,"updated":"2020-10-17T10:01:55.955Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblmm003c4tje26x418vb","content":"<blockquote>\n<p>当系统中装有多个 JDK 版本时，如果控制 Maven 能够指定到正确的版本</p>\n</blockquote>\n<h2 id=\"出现的问题\"><a href=\"#出现的问题\" class=\"headerlink\" title=\"出现的问题\"></a>出现的问题</h2><ol>\n<li>在使用 <code>mvn clean package -Dmaven.test.skip=true</code> 对项目进行打包时</li>\n<li>发现进度一直卡在编译无法继续执行</li>\n<li>待编译项目 <strong>pom.xml</strong> 中指定的 JDK 版本是 1.8</li>\n<li>通过 <code>mvn -version</code> 发现 Maven 获取的 JDK 版本是 11</li>\n<li>这就是导致 Maven 无法顺利编译项目的根本原因</li>\n</ol>\n<h2 id=\"查看当前-Maven-版本\"><a href=\"#查看当前-Maven-版本\" class=\"headerlink\" title=\"查看当前 Maven 版本\"></a>查看当前 Maven 版本</h2><ol>\n<li>下图中可以看到，Maven 当前指定的是 JDK 11</li>\n</ol>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj22t62pjj30hx02vaaq.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"查看当前-JDK-版本\"><a href=\"#查看当前-JDK-版本\" class=\"headerlink\" title=\"查看当前 JDK 版本\"></a>查看当前 JDK 版本</h2><ol>\n<li>下图中可以看到，当前 JDK 版本是 1.8 ，很明显和上图 Maven 获取到的版本不一致<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj23j7g3yj30cy020zkg.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n</li>\n</ol>\n<h2 id=\"查看当前系统配置的所有-JDK-版本\"><a href=\"#查看当前系统配置的所有-JDK-版本\" class=\"headerlink\" title=\"查看当前系统配置的所有 JDK 版本\"></a>查看当前系统配置的所有 JDK 版本</h2><ol>\n<li>下图中可以看到，当前系统配置了三个版本的 JDK ，而系统默认的是 JDK 11 ，与 Maven 获取到的一致</li>\n</ol>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj23v44u8j30e003fdgd.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"查看通过-JENV-管理的-JDK-版本\"><a href=\"#查看通过-JENV-管理的-JDK-版本\" class=\"headerlink\" title=\"查看通过 JENV 管理的 JDK 版本\"></a>查看通过 JENV 管理的 JDK 版本</h2><ol>\n<li><p>下图中可以看到，通过 JENV 切换到的 JDK 版本是 1.8 ，与 <code>java -version</code> 获取到的一致</p>\n</li>\n<li><p>这就说明 JENV </p>\n<p>虽然可以管理当前 JDK 版本，但是无法切换当前系统的默认 JDK</p>\n</li>\n</ol>\n<p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj244e81dj30cm02g74e.jpg\" alt=\"\"></p>\n<h2 id=\"终极解决方案\"><a href=\"#终极解决方案\" class=\"headerlink\" title=\"终极解决方案\"></a>终极解决方案</h2><ol>\n<li><p>在终端输入以下脚本，强制指定 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_HOME</span><br></pre></td></tr></table></figure>\n<p> 的默认版本是 1.8 </p>\n<ul>\n<li>这样虽然无法改变当前系统的默认 JDK 版本</li>\n<li><strong>但是可以控制其他软件获取到的 JDK 版本</strong>，这就已经满足需求了</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">export</span> <span class=\"string\">\"JAVA_HOME=\\$(/usr/libexec/java_home -v 1.8)\"</span> &gt;&gt; ~/.bash_profile</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<h3 id=\"再次查看当前-Maven-版本\"><a href=\"#再次查看当前-Maven-版本\" class=\"headerlink\" title=\"再次查看当前 Maven 版本\"></a>再次查看当前 Maven 版本</h3><ol>\n<li>下图中可以看到，Maven 当前指定的 JDK 已经替换成了 1.8</li>\n</ol>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj24erfomj30he02xjs2.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"再次查看当前系统配置的所有-JDK-版本\"><a href=\"#再次查看当前系统配置的所有-JDK-版本\" class=\"headerlink\" title=\"再次查看当前系统配置的所有 JDK 版本\"></a>再次查看当前系统配置的所有 JDK 版本</h3><ol>\n<li>下图中可以看到，当前系统默认的 JDK 版本依旧是 11</li>\n</ol>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj24n80daj30dr03dq3h.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>当系统中装有多个 JDK 版本时，如果控制 Maven 能够指定到正确的版本</p>\n</blockquote>\n<h2 id=\"出现的问题\"><a href=\"#出现的问题\" class=\"headerlink\" title=\"出现的问题\"></a>出现的问题</h2><ol>\n<li>在使用 <code>mvn clean package -Dmaven.test.skip=true</code> 对项目进行打包时</li>\n<li>发现进度一直卡在编译无法继续执行</li>\n<li>待编译项目 <strong>pom.xml</strong> 中指定的 JDK 版本是 1.8</li>\n<li>通过 <code>mvn -version</code> 发现 Maven 获取的 JDK 版本是 11</li>\n<li>这就是导致 Maven 无法顺利编译项目的根本原因</li>\n</ol>\n<h2 id=\"查看当前-Maven-版本\"><a href=\"#查看当前-Maven-版本\" class=\"headerlink\" title=\"查看当前 Maven 版本\"></a>查看当前 Maven 版本</h2><ol>\n<li>下图中可以看到，Maven 当前指定的是 JDK 11</li>\n</ol>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj22t62pjj30hx02vaaq.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"查看当前-JDK-版本\"><a href=\"#查看当前-JDK-版本\" class=\"headerlink\" title=\"查看当前 JDK 版本\"></a>查看当前 JDK 版本</h2><ol>\n<li>下图中可以看到，当前 JDK 版本是 1.8 ，很明显和上图 Maven 获取到的版本不一致<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj23j7g3yj30cy020zkg.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n</li>\n</ol>\n<h2 id=\"查看当前系统配置的所有-JDK-版本\"><a href=\"#查看当前系统配置的所有-JDK-版本\" class=\"headerlink\" title=\"查看当前系统配置的所有 JDK 版本\"></a>查看当前系统配置的所有 JDK 版本</h2><ol>\n<li>下图中可以看到，当前系统配置了三个版本的 JDK ，而系统默认的是 JDK 11 ，与 Maven 获取到的一致</li>\n</ol>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj23v44u8j30e003fdgd.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"查看通过-JENV-管理的-JDK-版本\"><a href=\"#查看通过-JENV-管理的-JDK-版本\" class=\"headerlink\" title=\"查看通过 JENV 管理的 JDK 版本\"></a>查看通过 JENV 管理的 JDK 版本</h2><ol>\n<li><p>下图中可以看到，通过 JENV 切换到的 JDK 版本是 1.8 ，与 <code>java -version</code> 获取到的一致</p>\n</li>\n<li><p>这就说明 JENV </p>\n<p>虽然可以管理当前 JDK 版本，但是无法切换当前系统的默认 JDK</p>\n</li>\n</ol>\n<p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj244e81dj30cm02g74e.jpg\" alt=\"\"></p>\n<h2 id=\"终极解决方案\"><a href=\"#终极解决方案\" class=\"headerlink\" title=\"终极解决方案\"></a>终极解决方案</h2><ol>\n<li><p>在终端输入以下脚本，强制指定 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_HOME</span><br></pre></td></tr></table></figure>\n<p> 的默认版本是 1.8 </p>\n<ul>\n<li>这样虽然无法改变当前系统的默认 JDK 版本</li>\n<li><strong>但是可以控制其他软件获取到的 JDK 版本</strong>，这就已经满足需求了</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">export</span> <span class=\"string\">\"JAVA_HOME=\\$(/usr/libexec/java_home -v 1.8)\"</span> &gt;&gt; ~/.bash_profile</span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<h3 id=\"再次查看当前-Maven-版本\"><a href=\"#再次查看当前-Maven-版本\" class=\"headerlink\" title=\"再次查看当前 Maven 版本\"></a>再次查看当前 Maven 版本</h3><ol>\n<li>下图中可以看到，Maven 当前指定的 JDK 已经替换成了 1.8</li>\n</ol>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj24erfomj30he02xjs2.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"再次查看当前系统配置的所有-JDK-版本\"><a href=\"#再次查看当前系统配置的所有-JDK-版本\" class=\"headerlink\" title=\"再次查看当前系统配置的所有 JDK 版本\"></a>再次查看当前系统配置的所有 JDK 版本</h3><ol>\n<li>下图中可以看到，当前系统默认的 JDK 版本依旧是 11</li>\n</ol>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gjj24n80daj30dr03dq3h.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n"},{"title":"nexus仓库分类","date":"2020-10-09T07:00:00.000Z","_content":"\n### Nexus仓库分类\n\nNexus包含了各种类型的仓库类型。在登录后的Nexus界面，单击左边的“Repositories”链接\n\n四种仓库类型：\n\n1）group（仓库组）\n\n2）hosted（宿主）\n\n3）proxy（代理）\n\n4）virtual（虚拟）\n\n说明：\n\n1）每种类型的Format有Maven1或者Maven2，maven1是老版本，现在一般使用maven2。\n\n2）仓库的Policy（策略）表示该仓库为发布（Release）版本还是快照（Snapshot）版本仓库。\n\n3）虚拟仓库其实也是为maven1服务的，所以意义不大。\n\n4）宿主仓库指的就是我们自己项目所构建组成的仓库。\n\n5）代理仓库指的是远程仓库，比如中央仓库等，因为私服需要完全替代中央仓库，那么他必须拥有中央仓库的功能，所以nexus的仓库会有各种代理仓库\n\n6）仓库组，他是整合以上所有的仓库于一体，那么他就是我们项目私服的地址，因为他把所有仓库都容纳为一个个体，所以我们下载资源时，他都能在对应的仓库中找到。\n\nhttp://localhost:8081/nexus/content/groups/public/\n\n![img](http://static.oschina.net/uploads/space/2015/0604/191316_hhia_1989321.png)\n\nNexus列出了默认的几个仓库：\n\n1）Public Repositories：仓库组，将所有策略为Release的仓库聚合并通过一致的地址提供服务。\n\n2）3rd party：一个策略为Release的宿主类型仓库，用来部署无法从公共仓库获得的第三方发布版本构件。\n\n3）Apache Snapshots：策略为Snapshots的代理仓库，用来代理Apache Maven仓库的快照版本构件。\n\n4）Central：该仓库代理Maven的中央仓库，策略为Release，只会下载和缓存中央仓库中的发布版本构件。\n\n5）Central M1 shadow：maven1格式的虚拟类型仓库。\n\n6）Codehaus Snapshots：代理Codehaus Maven仓库快照版本的代理仓库。\n\n7）Release：策略为Release的宿主类型仓库，用来部署组织内部的发布版本构件。\n\n8）Snapshots：策略为Snapshots的宿主类型仓库，用来部署组织内部的快照版本构件。\n\n![img](http://static.oschina.net/uploads/space/2015/0604/191357_Rrwh_1989321.png)\n\n仓库之间的关系\n\n![img](http://static.oschina.net/uploads/space/2015/0604/191445_kmKi_1989321.jpeg)\n\n\n\n\n\n### 2、Nexus的索引与构件搜索\n\n点击列表上的“Central”行，在下方的“Configuration”中我们可以看到，在“Ordered Group Repositories”中包含了Release、Snapshots、3rd party、Central等仓库。为了构建Nexus的Maven中央库索引，首先需要设置Nexus中Maven Cencal代理仓库下载远程索引，将“Download Remote Indexes”的值从默认值false改为true。然而，由于其他索引库，因为他们要么依赖中央库，要么是本地库，所以，只需要右键update index即可。\n\n![img](http://static.oschina.net/uploads/space/2015/0604/191532_xf3l_1989321.jpeg)\n\n点击“Save”后，点击update now 更新索引，Nexus后台在下载Maven中央仓库的索引。\n\n![img](http://static.oschina.net/uploads/space/2015/0604/191615_JXjl_1989321.png)\n\n保存过后点击Browser Remote 然后看看远程索引库是否更新下来了\n\n![img](http://static.oschina.net/uploads/space/2015/0604/191644_ybMm_1989321.png)\n\n如果没有出现远程索引信息，那么要在“Public Repositories”行右击，点击“Update Index”\n\n![img](http://static.oschina.net/uploads/space/2015/0604/191731_e2Xb_1989321.jpeg)","source":"_posts/java/nexus仓库分类.md","raw":"---\ntitle: nexus仓库分类\ndate: 2020-10-09 15:00:00\n---\n\n### Nexus仓库分类\n\nNexus包含了各种类型的仓库类型。在登录后的Nexus界面，单击左边的“Repositories”链接\n\n四种仓库类型：\n\n1）group（仓库组）\n\n2）hosted（宿主）\n\n3）proxy（代理）\n\n4）virtual（虚拟）\n\n说明：\n\n1）每种类型的Format有Maven1或者Maven2，maven1是老版本，现在一般使用maven2。\n\n2）仓库的Policy（策略）表示该仓库为发布（Release）版本还是快照（Snapshot）版本仓库。\n\n3）虚拟仓库其实也是为maven1服务的，所以意义不大。\n\n4）宿主仓库指的就是我们自己项目所构建组成的仓库。\n\n5）代理仓库指的是远程仓库，比如中央仓库等，因为私服需要完全替代中央仓库，那么他必须拥有中央仓库的功能，所以nexus的仓库会有各种代理仓库\n\n6）仓库组，他是整合以上所有的仓库于一体，那么他就是我们项目私服的地址，因为他把所有仓库都容纳为一个个体，所以我们下载资源时，他都能在对应的仓库中找到。\n\nhttp://localhost:8081/nexus/content/groups/public/\n\n![img](http://static.oschina.net/uploads/space/2015/0604/191316_hhia_1989321.png)\n\nNexus列出了默认的几个仓库：\n\n1）Public Repositories：仓库组，将所有策略为Release的仓库聚合并通过一致的地址提供服务。\n\n2）3rd party：一个策略为Release的宿主类型仓库，用来部署无法从公共仓库获得的第三方发布版本构件。\n\n3）Apache Snapshots：策略为Snapshots的代理仓库，用来代理Apache Maven仓库的快照版本构件。\n\n4）Central：该仓库代理Maven的中央仓库，策略为Release，只会下载和缓存中央仓库中的发布版本构件。\n\n5）Central M1 shadow：maven1格式的虚拟类型仓库。\n\n6）Codehaus Snapshots：代理Codehaus Maven仓库快照版本的代理仓库。\n\n7）Release：策略为Release的宿主类型仓库，用来部署组织内部的发布版本构件。\n\n8）Snapshots：策略为Snapshots的宿主类型仓库，用来部署组织内部的快照版本构件。\n\n![img](http://static.oschina.net/uploads/space/2015/0604/191357_Rrwh_1989321.png)\n\n仓库之间的关系\n\n![img](http://static.oschina.net/uploads/space/2015/0604/191445_kmKi_1989321.jpeg)\n\n\n\n\n\n### 2、Nexus的索引与构件搜索\n\n点击列表上的“Central”行，在下方的“Configuration”中我们可以看到，在“Ordered Group Repositories”中包含了Release、Snapshots、3rd party、Central等仓库。为了构建Nexus的Maven中央库索引，首先需要设置Nexus中Maven Cencal代理仓库下载远程索引，将“Download Remote Indexes”的值从默认值false改为true。然而，由于其他索引库，因为他们要么依赖中央库，要么是本地库，所以，只需要右键update index即可。\n\n![img](http://static.oschina.net/uploads/space/2015/0604/191532_xf3l_1989321.jpeg)\n\n点击“Save”后，点击update now 更新索引，Nexus后台在下载Maven中央仓库的索引。\n\n![img](http://static.oschina.net/uploads/space/2015/0604/191615_JXjl_1989321.png)\n\n保存过后点击Browser Remote 然后看看远程索引库是否更新下来了\n\n![img](http://static.oschina.net/uploads/space/2015/0604/191644_ybMm_1989321.png)\n\n如果没有出现远程索引信息，那么要在“Public Repositories”行右击，点击“Update Index”\n\n![img](http://static.oschina.net/uploads/space/2015/0604/191731_e2Xb_1989321.jpeg)","slug":"java/nexus仓库分类","published":1,"updated":"2020-10-17T10:01:55.956Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblmn003e4tjev74pu3nk","content":"<h3 id=\"Nexus仓库分类\"><a href=\"#Nexus仓库分类\" class=\"headerlink\" title=\"Nexus仓库分类\"></a>Nexus仓库分类</h3><p>Nexus包含了各种类型的仓库类型。在登录后的Nexus界面，单击左边的“Repositories”链接</p>\n<p>四种仓库类型：</p>\n<p>1）group（仓库组）</p>\n<p>2）hosted（宿主）</p>\n<p>3）proxy（代理）</p>\n<p>4）virtual（虚拟）</p>\n<p>说明：</p>\n<p>1）每种类型的Format有Maven1或者Maven2，maven1是老版本，现在一般使用maven2。</p>\n<p>2）仓库的Policy（策略）表示该仓库为发布（Release）版本还是快照（Snapshot）版本仓库。</p>\n<p>3）虚拟仓库其实也是为maven1服务的，所以意义不大。</p>\n<p>4）宿主仓库指的就是我们自己项目所构建组成的仓库。</p>\n<p>5）代理仓库指的是远程仓库，比如中央仓库等，因为私服需要完全替代中央仓库，那么他必须拥有中央仓库的功能，所以nexus的仓库会有各种代理仓库</p>\n<p>6）仓库组，他是整合以上所有的仓库于一体，那么他就是我们项目私服的地址，因为他把所有仓库都容纳为一个个体，所以我们下载资源时，他都能在对应的仓库中找到。</p>\n<p><a href=\"http://localhost:8081/nexus/content/groups/public/\" target=\"_blank\" rel=\"noopener\">http://localhost:8081/nexus/content/groups/public/</a></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://static.oschina.net/uploads/space/2015/0604/191316_hhia_1989321.png\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>Nexus列出了默认的几个仓库：</p>\n<p>1）Public Repositories：仓库组，将所有策略为Release的仓库聚合并通过一致的地址提供服务。</p>\n<p>2）3rd party：一个策略为Release的宿主类型仓库，用来部署无法从公共仓库获得的第三方发布版本构件。</p>\n<p>3）Apache Snapshots：策略为Snapshots的代理仓库，用来代理Apache Maven仓库的快照版本构件。</p>\n<p>4）Central：该仓库代理Maven的中央仓库，策略为Release，只会下载和缓存中央仓库中的发布版本构件。</p>\n<p>5）Central M1 shadow：maven1格式的虚拟类型仓库。</p>\n<p>6）Codehaus Snapshots：代理Codehaus Maven仓库快照版本的代理仓库。</p>\n<p>7）Release：策略为Release的宿主类型仓库，用来部署组织内部的发布版本构件。</p>\n<p>8）Snapshots：策略为Snapshots的宿主类型仓库，用来部署组织内部的快照版本构件。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://static.oschina.net/uploads/space/2015/0604/191357_Rrwh_1989321.png\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>仓库之间的关系</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://static.oschina.net/uploads/space/2015/0604/191445_kmKi_1989321.jpeg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<h3 id=\"2、Nexus的索引与构件搜索\"><a href=\"#2、Nexus的索引与构件搜索\" class=\"headerlink\" title=\"2、Nexus的索引与构件搜索\"></a>2、Nexus的索引与构件搜索</h3><p>点击列表上的“Central”行，在下方的“Configuration”中我们可以看到，在“Ordered Group Repositories”中包含了Release、Snapshots、3rd party、Central等仓库。为了构建Nexus的Maven中央库索引，首先需要设置Nexus中Maven Cencal代理仓库下载远程索引，将“Download Remote Indexes”的值从默认值false改为true。然而，由于其他索引库，因为他们要么依赖中央库，要么是本地库，所以，只需要右键update index即可。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://static.oschina.net/uploads/space/2015/0604/191532_xf3l_1989321.jpeg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>点击“Save”后，点击update now 更新索引，Nexus后台在下载Maven中央仓库的索引。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://static.oschina.net/uploads/space/2015/0604/191615_JXjl_1989321.png\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>保存过后点击Browser Remote 然后看看远程索引库是否更新下来了</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://static.oschina.net/uploads/space/2015/0604/191644_ybMm_1989321.png\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>如果没有出现远程索引信息，那么要在“Public Repositories”行右击，点击“Update Index”</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://static.oschina.net/uploads/space/2015/0604/191731_e2Xb_1989321.jpeg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Nexus仓库分类\"><a href=\"#Nexus仓库分类\" class=\"headerlink\" title=\"Nexus仓库分类\"></a>Nexus仓库分类</h3><p>Nexus包含了各种类型的仓库类型。在登录后的Nexus界面，单击左边的“Repositories”链接</p>\n<p>四种仓库类型：</p>\n<p>1）group（仓库组）</p>\n<p>2）hosted（宿主）</p>\n<p>3）proxy（代理）</p>\n<p>4）virtual（虚拟）</p>\n<p>说明：</p>\n<p>1）每种类型的Format有Maven1或者Maven2，maven1是老版本，现在一般使用maven2。</p>\n<p>2）仓库的Policy（策略）表示该仓库为发布（Release）版本还是快照（Snapshot）版本仓库。</p>\n<p>3）虚拟仓库其实也是为maven1服务的，所以意义不大。</p>\n<p>4）宿主仓库指的就是我们自己项目所构建组成的仓库。</p>\n<p>5）代理仓库指的是远程仓库，比如中央仓库等，因为私服需要完全替代中央仓库，那么他必须拥有中央仓库的功能，所以nexus的仓库会有各种代理仓库</p>\n<p>6）仓库组，他是整合以上所有的仓库于一体，那么他就是我们项目私服的地址，因为他把所有仓库都容纳为一个个体，所以我们下载资源时，他都能在对应的仓库中找到。</p>\n<p><a href=\"http://localhost:8081/nexus/content/groups/public/\" target=\"_blank\" rel=\"noopener\">http://localhost:8081/nexus/content/groups/public/</a></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://static.oschina.net/uploads/space/2015/0604/191316_hhia_1989321.png\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>Nexus列出了默认的几个仓库：</p>\n<p>1）Public Repositories：仓库组，将所有策略为Release的仓库聚合并通过一致的地址提供服务。</p>\n<p>2）3rd party：一个策略为Release的宿主类型仓库，用来部署无法从公共仓库获得的第三方发布版本构件。</p>\n<p>3）Apache Snapshots：策略为Snapshots的代理仓库，用来代理Apache Maven仓库的快照版本构件。</p>\n<p>4）Central：该仓库代理Maven的中央仓库，策略为Release，只会下载和缓存中央仓库中的发布版本构件。</p>\n<p>5）Central M1 shadow：maven1格式的虚拟类型仓库。</p>\n<p>6）Codehaus Snapshots：代理Codehaus Maven仓库快照版本的代理仓库。</p>\n<p>7）Release：策略为Release的宿主类型仓库，用来部署组织内部的发布版本构件。</p>\n<p>8）Snapshots：策略为Snapshots的宿主类型仓库，用来部署组织内部的快照版本构件。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://static.oschina.net/uploads/space/2015/0604/191357_Rrwh_1989321.png\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>仓库之间的关系</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://static.oschina.net/uploads/space/2015/0604/191445_kmKi_1989321.jpeg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<h3 id=\"2、Nexus的索引与构件搜索\"><a href=\"#2、Nexus的索引与构件搜索\" class=\"headerlink\" title=\"2、Nexus的索引与构件搜索\"></a>2、Nexus的索引与构件搜索</h3><p>点击列表上的“Central”行，在下方的“Configuration”中我们可以看到，在“Ordered Group Repositories”中包含了Release、Snapshots、3rd party、Central等仓库。为了构建Nexus的Maven中央库索引，首先需要设置Nexus中Maven Cencal代理仓库下载远程索引，将“Download Remote Indexes”的值从默认值false改为true。然而，由于其他索引库，因为他们要么依赖中央库，要么是本地库，所以，只需要右键update index即可。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://static.oschina.net/uploads/space/2015/0604/191532_xf3l_1989321.jpeg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>点击“Save”后，点击update now 更新索引，Nexus后台在下载Maven中央仓库的索引。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://static.oschina.net/uploads/space/2015/0604/191615_JXjl_1989321.png\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>保存过后点击Browser Remote 然后看看远程索引库是否更新下来了</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://static.oschina.net/uploads/space/2015/0604/191644_ybMm_1989321.png\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>如果没有出现远程索引信息，那么要在“Public Repositories”行右击，点击“Update Index”</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://static.oschina.net/uploads/space/2015/0604/191731_e2Xb_1989321.jpeg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>"},{"title":"nexus 使用","date":"2020-10-09T07:00:00.000Z","_content":"\n# 使用\n\n## 账号密码\n\n```xml\n<!-- 在servers标签下配置server, 包括: 私服的用户名和密码, 在deploy项目时需要用到 -->\n    <server>\n        <id>releases</id>\n        <username>admin</username>\n        <password>admin123</password>\n    </server>\n    <server>\n        <id>snapshots</id>\n        <username>admin</username>\n        <password>admin123</password>\n    </server>\n```\n\n## 使用\n\n```xml\n<repository>\n            <id>StongPublic</id>\n            <name>StongCentral</name>\n            <url>http://xxxx/repository/maven-public/</url>\n            <releases>\n                <enabled>true</enabled>\n            </releases>\n            <snapshots>\n                <enabled>true</enabled>\n            </snapshots>\n        </repository>\n```\n\n\n\n# 发布\n\n## 1.查看当前正在使用的settings.xml\n\n```bash\nmvn help:effective-settings\n```\n\n在pom文件中加入如下配置：\n\n```xml\n    <!--使用分发上传将项目打成jar包，上传到nexus私服上-->\n    <distributionManagement>\n        <!--发布版本仓库-->\n        <repository>\n            <!--nexus服务器中用户名：在settings.xml中和<server>的id一致-->\n            <id>releases</id>\n            <!--自定义名称-->\n            <name>RELEASES PUBLISH</name>\n            <!--仓库地址-->\n            <url>http://xx.xx.xx.xx:xxxx/repository/maven-releases/</url>\n        </repository>\n        <!--快照版本仓库-->\n        <snapshotRepository>\n            <!--nexus服务器中用户名：在settings.xml中和<server>的id一致-->\n            <id>snapshots</id>\n            <!--自定义名称-->\n            <name>SNAPSHOTS PUBLISH</name>\n            <!--仓库地址-->\n            <url>http://xx.xx.xx.xx:xxxx/repository/maven-snapshots/</url>\n        </snapshotRepository>\n    </distributionManagement>\n\n```\n\n## 2.在settings.xml文件中加入如下配置：\n\n```xml\n\t<servers>\n\t <server>\n\t  <id>releases</id>\n\t  <username>admin</username>\t\n\t  <password>####@123</password>\n\t </server>\n\t <server>\n\t  <id>snapshots</id>\n\t  <username>admin</username>\n\t  <password>####@123</password>\n\t </server>\n  </servers>\n123456789101112\n```\n\n## 3.发生如下错误可能是配置的账号信息有误的原因：\n\n```\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.7:deploy (default-deploy) on project demo-childA: Failed to deploy artifacts: Could not transfer artifact com.ecp:demo-childA:jar:1.0-20190625.082808-\n1 from/to maven-snapshots (http://xx.xxx.xx.xx:xxxx/repository/maven-snapshots/): Failed to transfer file http://xx.xxx.xx.xx:xxxx/repository/maven-snapshots/com/ecp/demo-childA/1.0-SNAPSHOT/demo-childA-1.0-20190625.082808-1\n.jar with status code 401 -> [Help 1]\n123\n```\n\n可以使用：mvn help:effective-settings命令查看settings.xml配置文件查看配置信息\n\n## 4.将本地项目发布到Nexus私服：\n\n```bash\nmvn clean deploy\n\n## 跳过javadoc\nmvn deploy  -Dmaven.javadoc.skip=true\n\n```\n\n","source":"_posts/java/nexus使用.md","raw":"---\ntitle: nexus 使用\ndate: 2020-10-09 15:00:00\n---\n\n# 使用\n\n## 账号密码\n\n```xml\n<!-- 在servers标签下配置server, 包括: 私服的用户名和密码, 在deploy项目时需要用到 -->\n    <server>\n        <id>releases</id>\n        <username>admin</username>\n        <password>admin123</password>\n    </server>\n    <server>\n        <id>snapshots</id>\n        <username>admin</username>\n        <password>admin123</password>\n    </server>\n```\n\n## 使用\n\n```xml\n<repository>\n            <id>StongPublic</id>\n            <name>StongCentral</name>\n            <url>http://xxxx/repository/maven-public/</url>\n            <releases>\n                <enabled>true</enabled>\n            </releases>\n            <snapshots>\n                <enabled>true</enabled>\n            </snapshots>\n        </repository>\n```\n\n\n\n# 发布\n\n## 1.查看当前正在使用的settings.xml\n\n```bash\nmvn help:effective-settings\n```\n\n在pom文件中加入如下配置：\n\n```xml\n    <!--使用分发上传将项目打成jar包，上传到nexus私服上-->\n    <distributionManagement>\n        <!--发布版本仓库-->\n        <repository>\n            <!--nexus服务器中用户名：在settings.xml中和<server>的id一致-->\n            <id>releases</id>\n            <!--自定义名称-->\n            <name>RELEASES PUBLISH</name>\n            <!--仓库地址-->\n            <url>http://xx.xx.xx.xx:xxxx/repository/maven-releases/</url>\n        </repository>\n        <!--快照版本仓库-->\n        <snapshotRepository>\n            <!--nexus服务器中用户名：在settings.xml中和<server>的id一致-->\n            <id>snapshots</id>\n            <!--自定义名称-->\n            <name>SNAPSHOTS PUBLISH</name>\n            <!--仓库地址-->\n            <url>http://xx.xx.xx.xx:xxxx/repository/maven-snapshots/</url>\n        </snapshotRepository>\n    </distributionManagement>\n\n```\n\n## 2.在settings.xml文件中加入如下配置：\n\n```xml\n\t<servers>\n\t <server>\n\t  <id>releases</id>\n\t  <username>admin</username>\t\n\t  <password>####@123</password>\n\t </server>\n\t <server>\n\t  <id>snapshots</id>\n\t  <username>admin</username>\n\t  <password>####@123</password>\n\t </server>\n  </servers>\n123456789101112\n```\n\n## 3.发生如下错误可能是配置的账号信息有误的原因：\n\n```\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.7:deploy (default-deploy) on project demo-childA: Failed to deploy artifacts: Could not transfer artifact com.ecp:demo-childA:jar:1.0-20190625.082808-\n1 from/to maven-snapshots (http://xx.xxx.xx.xx:xxxx/repository/maven-snapshots/): Failed to transfer file http://xx.xxx.xx.xx:xxxx/repository/maven-snapshots/com/ecp/demo-childA/1.0-SNAPSHOT/demo-childA-1.0-20190625.082808-1\n.jar with status code 401 -> [Help 1]\n123\n```\n\n可以使用：mvn help:effective-settings命令查看settings.xml配置文件查看配置信息\n\n## 4.将本地项目发布到Nexus私服：\n\n```bash\nmvn clean deploy\n\n## 跳过javadoc\nmvn deploy  -Dmaven.javadoc.skip=true\n\n```\n\n","slug":"java/nexus使用","published":1,"updated":"2020-10-17T10:01:55.956Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblmo003f4tjequ8fgu7x","content":"<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><h2 id=\"账号密码\"><a href=\"#账号密码\" class=\"headerlink\" title=\"账号密码\"></a>账号密码</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 在servers标签下配置server, 包括: 私服的用户名和密码, 在deploy项目时需要用到 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>releases<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>admin123<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>snapshots<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>admin123<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>StongPublic<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>StongCentral<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://xxxx/repository/maven-public/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h1><h2 id=\"1-查看当前正在使用的settings-xml\"><a href=\"#1-查看当前正在使用的settings-xml\" class=\"headerlink\" title=\"1.查看当前正在使用的settings.xml\"></a>1.查看当前正在使用的settings.xml</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn <span class=\"built_in\">help</span>:effective-settings</span><br></pre></td></tr></table></figure>\n<p>在pom文件中加入如下配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--使用分发上传将项目打成jar包，上传到nexus私服上--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">distributionManagement</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--发布版本仓库--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--nexus服务器中用户名：在settings.xml中和&lt;server&gt;的id一致--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>releases<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--自定义名称--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>RELEASES PUBLISH<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--仓库地址--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://xx.xx.xx.xx:xxxx/repository/maven-releases/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--快照版本仓库--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">snapshotRepository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--nexus服务器中用户名：在settings.xml中和&lt;server&gt;的id一致--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>snapshots<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--自定义名称--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>SNAPSHOTS PUBLISH<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--仓库地址--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://xx.xx.xx.xx:xxxx/repository/maven-snapshots/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">snapshotRepository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-在settings-xml文件中加入如下配置：\"><a href=\"#2-在settings-xml文件中加入如下配置：\" class=\"headerlink\" title=\"2.在settings.xml文件中加入如下配置：\"></a>2.在settings.xml文件中加入如下配置：</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>releases<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span>\t</span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>####@123<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>snapshots<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>####@123<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\">123456789101112</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-发生如下错误可能是配置的账号信息有误的原因：\"><a href=\"#3-发生如下错误可能是配置的账号信息有误的原因：\" class=\"headerlink\" title=\"3.发生如下错误可能是配置的账号信息有误的原因：\"></a>3.发生如下错误可能是配置的账号信息有误的原因：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.7:deploy (default-deploy) on project demo-childA: Failed to deploy artifacts: Could not transfer artifact com.ecp:demo-childA:jar:1.0-20190625.082808-</span><br><span class=\"line\">1 from/to maven-snapshots (http://xx.xxx.xx.xx:xxxx/repository/maven-snapshots/): Failed to transfer file http://xx.xxx.xx.xx:xxxx/repository/maven-snapshots/com/ecp/demo-childA/1.0-SNAPSHOT/demo-childA-1.0-20190625.082808-1</span><br><span class=\"line\">.jar with status code 401 -&gt; [Help 1]</span><br><span class=\"line\">123</span><br></pre></td></tr></table></figure>\n<p>可以使用：mvn help:effective-settings命令查看settings.xml配置文件查看配置信息</p>\n<h2 id=\"4-将本地项目发布到Nexus私服：\"><a href=\"#4-将本地项目发布到Nexus私服：\" class=\"headerlink\" title=\"4.将本地项目发布到Nexus私服：\"></a>4.将本地项目发布到Nexus私服：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean deploy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 跳过javadoc</span></span><br><span class=\"line\">mvn deploy  -Dmaven.javadoc.skip=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><h2 id=\"账号密码\"><a href=\"#账号密码\" class=\"headerlink\" title=\"账号密码\"></a>账号密码</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 在servers标签下配置server, 包括: 私服的用户名和密码, 在deploy项目时需要用到 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>releases<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>admin123<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>snapshots<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>admin123<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>StongPublic<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>StongCentral<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://xxxx/repository/maven-public/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h1><h2 id=\"1-查看当前正在使用的settings-xml\"><a href=\"#1-查看当前正在使用的settings-xml\" class=\"headerlink\" title=\"1.查看当前正在使用的settings.xml\"></a>1.查看当前正在使用的settings.xml</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn <span class=\"built_in\">help</span>:effective-settings</span><br></pre></td></tr></table></figure>\n<p>在pom文件中加入如下配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--使用分发上传将项目打成jar包，上传到nexus私服上--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">distributionManagement</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--发布版本仓库--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--nexus服务器中用户名：在settings.xml中和&lt;server&gt;的id一致--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>releases<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--自定义名称--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>RELEASES PUBLISH<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--仓库地址--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://xx.xx.xx.xx:xxxx/repository/maven-releases/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--快照版本仓库--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">snapshotRepository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--nexus服务器中用户名：在settings.xml中和&lt;server&gt;的id一致--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>snapshots<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--自定义名称--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>SNAPSHOTS PUBLISH<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--仓库地址--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://xx.xx.xx.xx:xxxx/repository/maven-snapshots/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">snapshotRepository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-在settings-xml文件中加入如下配置：\"><a href=\"#2-在settings-xml文件中加入如下配置：\" class=\"headerlink\" title=\"2.在settings.xml文件中加入如下配置：\"></a>2.在settings.xml文件中加入如下配置：</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>releases<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span>\t</span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>####@123<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>snapshots<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">username</span>&gt;</span>admin<span class=\"tag\">&lt;/<span class=\"name\">username</span>&gt;</span></span><br><span class=\"line\">\t  <span class=\"tag\">&lt;<span class=\"name\">password</span>&gt;</span>####@123<span class=\"tag\">&lt;/<span class=\"name\">password</span>&gt;</span></span><br><span class=\"line\">\t <span class=\"tag\">&lt;/<span class=\"name\">server</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servers</span>&gt;</span></span><br><span class=\"line\">123456789101112</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-发生如下错误可能是配置的账号信息有误的原因：\"><a href=\"#3-发生如下错误可能是配置的账号信息有误的原因：\" class=\"headerlink\" title=\"3.发生如下错误可能是配置的账号信息有误的原因：\"></a>3.发生如下错误可能是配置的账号信息有误的原因：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.7:deploy (default-deploy) on project demo-childA: Failed to deploy artifacts: Could not transfer artifact com.ecp:demo-childA:jar:1.0-20190625.082808-</span><br><span class=\"line\">1 from/to maven-snapshots (http://xx.xxx.xx.xx:xxxx/repository/maven-snapshots/): Failed to transfer file http://xx.xxx.xx.xx:xxxx/repository/maven-snapshots/com/ecp/demo-childA/1.0-SNAPSHOT/demo-childA-1.0-20190625.082808-1</span><br><span class=\"line\">.jar with status code 401 -&gt; [Help 1]</span><br><span class=\"line\">123</span><br></pre></td></tr></table></figure>\n<p>可以使用：mvn help:effective-settings命令查看settings.xml配置文件查看配置信息</p>\n<h2 id=\"4-将本地项目发布到Nexus私服：\"><a href=\"#4-将本地项目发布到Nexus私服：\" class=\"headerlink\" title=\"4.将本地项目发布到Nexus私服：\"></a>4.将本地项目发布到Nexus私服：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean deploy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 跳过javadoc</span></span><br><span class=\"line\">mvn deploy  -Dmaven.javadoc.skip=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n"},{"title":"使用jenv对java多版本管理","date":"2019-10-25T02:42:43.000Z","_content":"\n- 配置JDK环境变量\n\n打开 vim ~/.bash_profile 文件 进行添加\n\n```bash\nexport JAVA_8_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home\nexport JAVA_7_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home\n# 默认激活 jdk8\nexport JAVA_HOME=$JAVA_8_HOME\n```\n\n\n\n\n\n编辑完成，重新加载 .bash_profile\n\n```\n$ source ~/.bash_profile\n```\n\n#### jEnv安装\n\n- 安装\n\n```\n$ brew install jenv\n```\n\n- 配置\n\n安装了zsh，配置如下\n\n```\n$ echo 'export PATH=\"$HOME/.jenv/bin:$PATH\"' >> ~/.zshrc\n$ echo 'eval \"$(jenv init -)\"' >> ~/.zshrc\n```\n\n\n\n如果是默认的bash\n\n```\n$ echo 'export PATH=\"$HOME/.jenv/bin:$PATH\"' >> ~/.bash_profile\n$ echo 'eval \"$(jenv init -)\"' >> ~/.bash_profilec\n```\n\n#### jEnv配置JDK\n\n查看安装的java版本，如果我们一开始未添加jdk，执行jenv versions 应该是空的，* 号位置表示当前的jdk版本\n\n```bash\n$ jenv versions\n  system\n  1.7\n* 1.7.0.80 (set by /Users/gulj/.java-version)\n  1.8\n  1.8.0.112\n  oracle64-1.7.0.80\n  oracle64-1.8.0.112\n```\n\n重启下terminal，为jEnv添加java版本\n\n```\n添加jdk7\n$ jenv add /Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home\n添加jdk8\n$ jenv add /Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home\n```\n\n> 添加完jdk7和jdk8之后，再执行 **jenv versions** 命令就会看到我们添加的jdk\n\n#### jEnv常用命令\n\n- 移除指定版本jdk\n\n```\n$ jenv remove 1.8.0.111\n```\n\n- 选择一个jdk版本\n\n```\n$ jenv local 1.8.0.111\n```\n\n- 设置默认的jdk版本\n\n```\n$ jenv global 1.8.0.111\n```\n\n- 查看当前版本jdk的路径\n\n```\njenv which java\n```","source":"_posts/java/使用jenv对java多版本管理.md","raw":"---\ntitle: 使用jenv对java多版本管理\ndate: 2019-10-25 10:42:43\ntags:\n- java\n---\n\n- 配置JDK环境变量\n\n打开 vim ~/.bash_profile 文件 进行添加\n\n```bash\nexport JAVA_8_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home\nexport JAVA_7_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home\n# 默认激活 jdk8\nexport JAVA_HOME=$JAVA_8_HOME\n```\n\n\n\n\n\n编辑完成，重新加载 .bash_profile\n\n```\n$ source ~/.bash_profile\n```\n\n#### jEnv安装\n\n- 安装\n\n```\n$ brew install jenv\n```\n\n- 配置\n\n安装了zsh，配置如下\n\n```\n$ echo 'export PATH=\"$HOME/.jenv/bin:$PATH\"' >> ~/.zshrc\n$ echo 'eval \"$(jenv init -)\"' >> ~/.zshrc\n```\n\n\n\n如果是默认的bash\n\n```\n$ echo 'export PATH=\"$HOME/.jenv/bin:$PATH\"' >> ~/.bash_profile\n$ echo 'eval \"$(jenv init -)\"' >> ~/.bash_profilec\n```\n\n#### jEnv配置JDK\n\n查看安装的java版本，如果我们一开始未添加jdk，执行jenv versions 应该是空的，* 号位置表示当前的jdk版本\n\n```bash\n$ jenv versions\n  system\n  1.7\n* 1.7.0.80 (set by /Users/gulj/.java-version)\n  1.8\n  1.8.0.112\n  oracle64-1.7.0.80\n  oracle64-1.8.0.112\n```\n\n重启下terminal，为jEnv添加java版本\n\n```\n添加jdk7\n$ jenv add /Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home\n添加jdk8\n$ jenv add /Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home\n```\n\n> 添加完jdk7和jdk8之后，再执行 **jenv versions** 命令就会看到我们添加的jdk\n\n#### jEnv常用命令\n\n- 移除指定版本jdk\n\n```\n$ jenv remove 1.8.0.111\n```\n\n- 选择一个jdk版本\n\n```\n$ jenv local 1.8.0.111\n```\n\n- 设置默认的jdk版本\n\n```\n$ jenv global 1.8.0.111\n```\n\n- 查看当前版本jdk的路径\n\n```\njenv which java\n```","slug":"java/使用jenv对java多版本管理","published":1,"updated":"2020-08-27T15:25:48.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblmo003g4tjexufmowrw","content":"<ul>\n<li>配置JDK环境变量</li>\n</ul>\n<p>打开 vim ~/.bash_profile 文件 进行添加</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> JAVA_8_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home</span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_7_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home</span><br><span class=\"line\"><span class=\"comment\"># 默认激活 jdk8</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=<span class=\"variable\">$JAVA_8_HOME</span></span><br></pre></td></tr></table></figure>\n<p>编辑完成，重新加载 .bash_profile</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<h4 id=\"jEnv安装\"><a href=\"#jEnv安装\" class=\"headerlink\" title=\"jEnv安装\"></a>jEnv安装</h4><ul>\n<li>安装</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install jenv</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置</li>\n</ul>\n<p>安装了zsh，配置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &apos;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrc</span><br><span class=\"line\">$ echo &apos;eval &quot;$(jenv init -)&quot;&apos; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure>\n<p>如果是默认的bash</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &apos;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&apos; &gt;&gt; ~/.bash_profile</span><br><span class=\"line\">$ echo &apos;eval &quot;$(jenv init -)&quot;&apos; &gt;&gt; ~/.bash_profilec</span><br></pre></td></tr></table></figure>\n<h4 id=\"jEnv配置JDK\"><a href=\"#jEnv配置JDK\" class=\"headerlink\" title=\"jEnv配置JDK\"></a>jEnv配置JDK</h4><p>查看安装的java版本，如果我们一开始未添加jdk，执行jenv versions 应该是空的，* 号位置表示当前的jdk版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jenv versions</span><br><span class=\"line\">  system</span><br><span class=\"line\">  1.7</span><br><span class=\"line\">* 1.7.0.80 (<span class=\"built_in\">set</span> by /Users/gulj/.java-version)</span><br><span class=\"line\">  1.8</span><br><span class=\"line\">  1.8.0.112</span><br><span class=\"line\">  oracle64-1.7.0.80</span><br><span class=\"line\">  oracle64-1.8.0.112</span><br></pre></td></tr></table></figure>\n<p>重启下terminal，为jEnv添加java版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">添加jdk7</span><br><span class=\"line\">$ jenv add /Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home</span><br><span class=\"line\">添加jdk8</span><br><span class=\"line\">$ jenv add /Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>添加完jdk7和jdk8之后，再执行 <strong>jenv versions</strong> 命令就会看到我们添加的jdk</p>\n</blockquote>\n<h4 id=\"jEnv常用命令\"><a href=\"#jEnv常用命令\" class=\"headerlink\" title=\"jEnv常用命令\"></a>jEnv常用命令</h4><ul>\n<li>移除指定版本jdk</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jenv remove 1.8.0.111</span><br></pre></td></tr></table></figure>\n<ul>\n<li>选择一个jdk版本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jenv local 1.8.0.111</span><br></pre></td></tr></table></figure>\n<ul>\n<li>设置默认的jdk版本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jenv global 1.8.0.111</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看当前版本jdk的路径</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jenv which java</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>配置JDK环境变量</li>\n</ul>\n<p>打开 vim ~/.bash_profile 文件 进行添加</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> JAVA_8_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home</span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_7_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home</span><br><span class=\"line\"><span class=\"comment\"># 默认激活 jdk8</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=<span class=\"variable\">$JAVA_8_HOME</span></span><br></pre></td></tr></table></figure>\n<p>编辑完成，重新加载 .bash_profile</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<h4 id=\"jEnv安装\"><a href=\"#jEnv安装\" class=\"headerlink\" title=\"jEnv安装\"></a>jEnv安装</h4><ul>\n<li>安装</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew install jenv</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置</li>\n</ul>\n<p>安装了zsh，配置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &apos;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrc</span><br><span class=\"line\">$ echo &apos;eval &quot;$(jenv init -)&quot;&apos; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure>\n<p>如果是默认的bash</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &apos;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&apos; &gt;&gt; ~/.bash_profile</span><br><span class=\"line\">$ echo &apos;eval &quot;$(jenv init -)&quot;&apos; &gt;&gt; ~/.bash_profilec</span><br></pre></td></tr></table></figure>\n<h4 id=\"jEnv配置JDK\"><a href=\"#jEnv配置JDK\" class=\"headerlink\" title=\"jEnv配置JDK\"></a>jEnv配置JDK</h4><p>查看安装的java版本，如果我们一开始未添加jdk，执行jenv versions 应该是空的，* 号位置表示当前的jdk版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jenv versions</span><br><span class=\"line\">  system</span><br><span class=\"line\">  1.7</span><br><span class=\"line\">* 1.7.0.80 (<span class=\"built_in\">set</span> by /Users/gulj/.java-version)</span><br><span class=\"line\">  1.8</span><br><span class=\"line\">  1.8.0.112</span><br><span class=\"line\">  oracle64-1.7.0.80</span><br><span class=\"line\">  oracle64-1.8.0.112</span><br></pre></td></tr></table></figure>\n<p>重启下terminal，为jEnv添加java版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">添加jdk7</span><br><span class=\"line\">$ jenv add /Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home</span><br><span class=\"line\">添加jdk8</span><br><span class=\"line\">$ jenv add /Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>添加完jdk7和jdk8之后，再执行 <strong>jenv versions</strong> 命令就会看到我们添加的jdk</p>\n</blockquote>\n<h4 id=\"jEnv常用命令\"><a href=\"#jEnv常用命令\" class=\"headerlink\" title=\"jEnv常用命令\"></a>jEnv常用命令</h4><ul>\n<li>移除指定版本jdk</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jenv remove 1.8.0.111</span><br></pre></td></tr></table></figure>\n<ul>\n<li>选择一个jdk版本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jenv local 1.8.0.111</span><br></pre></td></tr></table></figure>\n<ul>\n<li>设置默认的jdk版本</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jenv global 1.8.0.111</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看当前版本jdk的路径</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jenv which java</span><br></pre></td></tr></table></figure>"},{"title":"spring的jms事务","date":"2019-08-03T07:05:17.000Z","_content":"\n","source":"_posts/java/spring的jms事务.md","raw":"---\ntitle: spring的jms事务\ndate: 2019-08-03 15:05:17\ntags:\n- java\n- spring\n---\n\n","slug":"java/spring的jms事务","published":1,"updated":"2019-09-01T12:22:36.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblmo003h4tjebdxsb9ag","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"编写自己的Springboot-starter","date":"2020-04-18T07:53:46.000Z","_content":"\n## 前言\n\n我们都知道可以使用SpringBoot快速的开发基于Spring框架的项目。由于围绕SpringBoot存在很多开箱即用的Starter依赖，使得我们在开发业务代码时能够非常方便的、不需要过多关注框架的配置，而只需要关注业务即可。\n\n例如我想要在SpringBoot项目中集成Redis，那么我只需要加入spring-data-redis-starter的依赖，并简单配置一下连接信息以及Jedis连接池配置就可以。这为我们省去了之前很多的配置操作。甚至有些功能的开启只需要在启动类或配置类上增加一个注解即可完成。\n\n那么如果我们想要自己实现自己的Starter需要做些什么呢？下面就开始介绍如何实现自己的SpringBoot-xxx-starter。\n\n## 原理\n\n首先说说原理，我们知道使用一个公用的starter的时候，只需要将相应的依赖添加的Maven的配置文件当中即可，免去了自己需要引用很多依赖类，并且SpringBoot会自动进行类的自动配置。那么 SpringBoot 是如何知道要实例化哪些类，并进行自动配置的呢？ 下面简单说一下。\n\n首先，SpringBoot 在启动时会去依赖的starter包中寻找 `resources/META-INF/spring.factories `文件，然后根据文件中配置的Jar包去扫描项目所依赖的Jar包，这类似于 Java 的 **SPI** 机制。\n\n第二步，根据 `spring.factories`配置加载`AutoConfigure`类。\n\n最后，根据 `@Conditional`注解的条件，进行自动配置并将Bean注入Spring Context 上下文当中。\n\n我们也可以使用`@ImportAutoConfiguration({MyServiceAutoConfiguration.class})` 指定自动配置哪些类。\n\n## 实现\n\n终于到了代码实现的步骤，接下来就开始编码我们自己的SpringBoot-starter。\n\n#### 第一步创建一个SpringBoot 项目，并添加下面两个依赖到pom.xml文件当中\n\n```XML\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-configuration-processor</artifactId>\n        <optional>true</optional>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-autoconfigure</artifactId>\n    </dependency>\n</dependencies>\n```\n\n其中 `spring-boot-configuration-processor `的作用是编译时生成 `spring-configuration-metadata.json `，此文件主要给IDE使用。如当配置此jar相关配置属性在 `application.yml `，你可以用ctlr+鼠标左键点击属性名，IDE会跳转到你配置此属性的类中。\n\n我们日常使用的Spring官方的Starter一般采取`spring-boot-starter-{name} `的命名方式，如 `spring-boot-starter-web `。\n\n而非官方的Starter，官方建议 `artifactId` 命名应遵循`{name}-spring-boot-starter `的格式。 例如：`ysc-spring-boot-starter ` 。\n\n```XML\n<groupId>com.ysc</groupId>\n<artifactId>simple-spring-boot-starter</artifactId>\n<version>1.0.0-SNAPSHOT</version>\n<packaging>jar</packaging>\n```\n\n#### 第二步编写我们的Service类\n\n这里讲一下我们的Starter要实现的功能，很简单，提供一个`Service`，包含一个能够将配置文件中配置的字符串根据传入的字符进行分割的方法`String[] split(String separatorChar)`。\n\n```JAVA\npublic class StarterService {\n    private String config;\n\n    public StarterService(String config) {\n        this.config = config;\n    }\n    \n    public String[] split(String separatorChar) {\n        return StringUtils.split(this.config, separatorChar);\n    }\n    \n}\n```\n\n#### 第三步编写配置文件读取类\n\n```java\n@ConfigurationProperties(\"example.service\")\npublic class StarterServiceProperties {\n    private String config;\n    \n    public void setConfig(String config) {\n        this.config = config;\n    }\n    \n    public String getConfig() {\n        return config;\n    }\n }\n```\n\n#### 第四步，编写`AutoConfigure`类 ，这步是关键点\n\n```java\n@Configuration\n@ConditionalOnClass(StarterService.class)\n@EnableConfigurationProperties(StarterServiceProperties.class)\npublic class StarterAutoConfigure {\n\n    @Autowired\n    private StarterServiceProperties properties;\n\n    @Bean\n    @ConditionalOnMissingBean\n    @ConditionalOnProperty(prefix = \"example.service\", value = \"enabled\", havingValue = \"true\")\n    StarterService starterService (){\n        return new StarterService(properties.getConfig());\n    }\n\n}\n```\n\n解释一下代码中用到的几个注解：\n\n- `@ConditionalOnClass`，当`classpath`下发现该类的情况下进行自动配置。\n- `@ConditionalOnMissingBean`，当`Spring Context`中不存在该`Bean`时。\n- `@ConditionalOnProperty(prefix = \"example.service\",value = \"enabled\",havingValue = \"true\")`，当配置文件中`example.service.enabled=true`时。\n\n##### 下面列举SpringBoot中的所有@Conditional注解及作用\n\n```\n@ConditionalOnBean:当容器中有指定的Bean的条件下  \n@ConditionalOnClass：当类路径下有指定的类的条件下  \n@ConditionalOnExpression:基于SpEL表达式作为判断条件  \n@ConditionalOnJava:基于JVM版本作为判断条件  \n@ConditionalOnJndi:在JNDI存在的条件下查找指定的位置  \n@ConditionalOnMissingBean:当容器中没有指定Bean的情况下  \n@ConditionalOnMissingClass:当类路径下没有指定的类的条件下  \n@ConditionalOnNotWebApplication:当前项目不是Web项目的条件下  \n@ConditionalOnProperty:指定的属性是否有指定的值  \n@ConditionalOnResource:类路径下是否有指定的资源  \n@ConditionalOnSingleCandidate:当指定的Bean在容器中只有一个，或者在有多个Bean的情况下，用来指定首选的Bean @ConditionalOnWebApplication:当前项目是Web项目的条件下  \n```\n\n#### 最后一步，在`resources/META-INF/`下创建`spring.factories`文件，并添加如下内容：\n\n```properties\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=com.example.autocinfigure.StarterAutoConfigure\n```\n\n至此，我们的一个Starter代码部分就是完成了，下面将项目安装到本地Maven仓库中。\n\n## 发布\n\n在项目根目录执行 `mvn install` 进行打包安装。\n\n## 测试\n\n将Starter项目的依赖添加到我们自己的SpringBoot项目中\n\n```xml\n<dependency>\n    <groupId>com.ysc</groupId>\n\t<artifactId>simple-spring-boot-starter</artifactId>\n    <version>1.0-SNAPSHOT</version>\n </dependency>\n```\n\n在`application.yml` 配置文件中添加配置信息：\n\n```\nexample\n  service\n    enabled: true\n    config： abc-des-dde,SSS-DRS-RE,SDR-SDFR-XXX\n```\n\n在本地使用`JUnit`进行代码测试\n\n```java\n@Autowired\nprivate StarterService starterService;\n\n@Test\npublic void starterTest() {\n    String[] splitArray = starterService.split(\",\");\n    System.out.println(splitArray);\n}\n```","source":"_posts/java/编写自己的Springboot-starter.md","raw":"---\ntitle: 编写自己的Springboot-starter\ndate: 2020-04-18 15:53:46\ntags:\n- java\n- sprintboot\n---\n\n## 前言\n\n我们都知道可以使用SpringBoot快速的开发基于Spring框架的项目。由于围绕SpringBoot存在很多开箱即用的Starter依赖，使得我们在开发业务代码时能够非常方便的、不需要过多关注框架的配置，而只需要关注业务即可。\n\n例如我想要在SpringBoot项目中集成Redis，那么我只需要加入spring-data-redis-starter的依赖，并简单配置一下连接信息以及Jedis连接池配置就可以。这为我们省去了之前很多的配置操作。甚至有些功能的开启只需要在启动类或配置类上增加一个注解即可完成。\n\n那么如果我们想要自己实现自己的Starter需要做些什么呢？下面就开始介绍如何实现自己的SpringBoot-xxx-starter。\n\n## 原理\n\n首先说说原理，我们知道使用一个公用的starter的时候，只需要将相应的依赖添加的Maven的配置文件当中即可，免去了自己需要引用很多依赖类，并且SpringBoot会自动进行类的自动配置。那么 SpringBoot 是如何知道要实例化哪些类，并进行自动配置的呢？ 下面简单说一下。\n\n首先，SpringBoot 在启动时会去依赖的starter包中寻找 `resources/META-INF/spring.factories `文件，然后根据文件中配置的Jar包去扫描项目所依赖的Jar包，这类似于 Java 的 **SPI** 机制。\n\n第二步，根据 `spring.factories`配置加载`AutoConfigure`类。\n\n最后，根据 `@Conditional`注解的条件，进行自动配置并将Bean注入Spring Context 上下文当中。\n\n我们也可以使用`@ImportAutoConfiguration({MyServiceAutoConfiguration.class})` 指定自动配置哪些类。\n\n## 实现\n\n终于到了代码实现的步骤，接下来就开始编码我们自己的SpringBoot-starter。\n\n#### 第一步创建一个SpringBoot 项目，并添加下面两个依赖到pom.xml文件当中\n\n```XML\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-configuration-processor</artifactId>\n        <optional>true</optional>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-autoconfigure</artifactId>\n    </dependency>\n</dependencies>\n```\n\n其中 `spring-boot-configuration-processor `的作用是编译时生成 `spring-configuration-metadata.json `，此文件主要给IDE使用。如当配置此jar相关配置属性在 `application.yml `，你可以用ctlr+鼠标左键点击属性名，IDE会跳转到你配置此属性的类中。\n\n我们日常使用的Spring官方的Starter一般采取`spring-boot-starter-{name} `的命名方式，如 `spring-boot-starter-web `。\n\n而非官方的Starter，官方建议 `artifactId` 命名应遵循`{name}-spring-boot-starter `的格式。 例如：`ysc-spring-boot-starter ` 。\n\n```XML\n<groupId>com.ysc</groupId>\n<artifactId>simple-spring-boot-starter</artifactId>\n<version>1.0.0-SNAPSHOT</version>\n<packaging>jar</packaging>\n```\n\n#### 第二步编写我们的Service类\n\n这里讲一下我们的Starter要实现的功能，很简单，提供一个`Service`，包含一个能够将配置文件中配置的字符串根据传入的字符进行分割的方法`String[] split(String separatorChar)`。\n\n```JAVA\npublic class StarterService {\n    private String config;\n\n    public StarterService(String config) {\n        this.config = config;\n    }\n    \n    public String[] split(String separatorChar) {\n        return StringUtils.split(this.config, separatorChar);\n    }\n    \n}\n```\n\n#### 第三步编写配置文件读取类\n\n```java\n@ConfigurationProperties(\"example.service\")\npublic class StarterServiceProperties {\n    private String config;\n    \n    public void setConfig(String config) {\n        this.config = config;\n    }\n    \n    public String getConfig() {\n        return config;\n    }\n }\n```\n\n#### 第四步，编写`AutoConfigure`类 ，这步是关键点\n\n```java\n@Configuration\n@ConditionalOnClass(StarterService.class)\n@EnableConfigurationProperties(StarterServiceProperties.class)\npublic class StarterAutoConfigure {\n\n    @Autowired\n    private StarterServiceProperties properties;\n\n    @Bean\n    @ConditionalOnMissingBean\n    @ConditionalOnProperty(prefix = \"example.service\", value = \"enabled\", havingValue = \"true\")\n    StarterService starterService (){\n        return new StarterService(properties.getConfig());\n    }\n\n}\n```\n\n解释一下代码中用到的几个注解：\n\n- `@ConditionalOnClass`，当`classpath`下发现该类的情况下进行自动配置。\n- `@ConditionalOnMissingBean`，当`Spring Context`中不存在该`Bean`时。\n- `@ConditionalOnProperty(prefix = \"example.service\",value = \"enabled\",havingValue = \"true\")`，当配置文件中`example.service.enabled=true`时。\n\n##### 下面列举SpringBoot中的所有@Conditional注解及作用\n\n```\n@ConditionalOnBean:当容器中有指定的Bean的条件下  \n@ConditionalOnClass：当类路径下有指定的类的条件下  \n@ConditionalOnExpression:基于SpEL表达式作为判断条件  \n@ConditionalOnJava:基于JVM版本作为判断条件  \n@ConditionalOnJndi:在JNDI存在的条件下查找指定的位置  \n@ConditionalOnMissingBean:当容器中没有指定Bean的情况下  \n@ConditionalOnMissingClass:当类路径下没有指定的类的条件下  \n@ConditionalOnNotWebApplication:当前项目不是Web项目的条件下  \n@ConditionalOnProperty:指定的属性是否有指定的值  \n@ConditionalOnResource:类路径下是否有指定的资源  \n@ConditionalOnSingleCandidate:当指定的Bean在容器中只有一个，或者在有多个Bean的情况下，用来指定首选的Bean @ConditionalOnWebApplication:当前项目是Web项目的条件下  \n```\n\n#### 最后一步，在`resources/META-INF/`下创建`spring.factories`文件，并添加如下内容：\n\n```properties\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=com.example.autocinfigure.StarterAutoConfigure\n```\n\n至此，我们的一个Starter代码部分就是完成了，下面将项目安装到本地Maven仓库中。\n\n## 发布\n\n在项目根目录执行 `mvn install` 进行打包安装。\n\n## 测试\n\n将Starter项目的依赖添加到我们自己的SpringBoot项目中\n\n```xml\n<dependency>\n    <groupId>com.ysc</groupId>\n\t<artifactId>simple-spring-boot-starter</artifactId>\n    <version>1.0-SNAPSHOT</version>\n </dependency>\n```\n\n在`application.yml` 配置文件中添加配置信息：\n\n```\nexample\n  service\n    enabled: true\n    config： abc-des-dde,SSS-DRS-RE,SDR-SDFR-XXX\n```\n\n在本地使用`JUnit`进行代码测试\n\n```java\n@Autowired\nprivate StarterService starterService;\n\n@Test\npublic void starterTest() {\n    String[] splitArray = starterService.split(\",\");\n    System.out.println(splitArray);\n}\n```","slug":"java/编写自己的Springboot-starter","published":1,"updated":"2020-08-27T15:25:48.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblmp003j4tjev6q3hd83","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我们都知道可以使用SpringBoot快速的开发基于Spring框架的项目。由于围绕SpringBoot存在很多开箱即用的Starter依赖，使得我们在开发业务代码时能够非常方便的、不需要过多关注框架的配置，而只需要关注业务即可。</p>\n<p>例如我想要在SpringBoot项目中集成Redis，那么我只需要加入spring-data-redis-starter的依赖，并简单配置一下连接信息以及Jedis连接池配置就可以。这为我们省去了之前很多的配置操作。甚至有些功能的开启只需要在启动类或配置类上增加一个注解即可完成。</p>\n<p>那么如果我们想要自己实现自己的Starter需要做些什么呢？下面就开始介绍如何实现自己的SpringBoot-xxx-starter。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>首先说说原理，我们知道使用一个公用的starter的时候，只需要将相应的依赖添加的Maven的配置文件当中即可，免去了自己需要引用很多依赖类，并且SpringBoot会自动进行类的自动配置。那么 SpringBoot 是如何知道要实例化哪些类，并进行自动配置的呢？ 下面简单说一下。</p>\n<p>首先，SpringBoot 在启动时会去依赖的starter包中寻找 <code>resources/META-INF/spring.factories</code>文件，然后根据文件中配置的Jar包去扫描项目所依赖的Jar包，这类似于 Java 的 <strong>SPI</strong> 机制。</p>\n<p>第二步，根据 <code>spring.factories</code>配置加载<code>AutoConfigure</code>类。</p>\n<p>最后，根据 <code>@Conditional</code>注解的条件，进行自动配置并将Bean注入Spring Context 上下文当中。</p>\n<p>我们也可以使用<code>@ImportAutoConfiguration({MyServiceAutoConfiguration.class})</code> 指定自动配置哪些类。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>终于到了代码实现的步骤，接下来就开始编码我们自己的SpringBoot-starter。</p>\n<h4 id=\"第一步创建一个SpringBoot-项目，并添加下面两个依赖到pom-xml文件当中\"><a href=\"#第一步创建一个SpringBoot-项目，并添加下面两个依赖到pom-xml文件当中\" class=\"headerlink\" title=\"第一步创建一个SpringBoot 项目，并添加下面两个依赖到pom.xml文件当中\"></a>第一步创建一个SpringBoot 项目，并添加下面两个依赖到pom.xml文件当中</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其中 <code>spring-boot-configuration-processor</code>的作用是编译时生成 <code>spring-configuration-metadata.json</code>，此文件主要给IDE使用。如当配置此jar相关配置属性在 <code>application.yml</code>，你可以用ctlr+鼠标左键点击属性名，IDE会跳转到你配置此属性的类中。</p>\n<p>我们日常使用的Spring官方的Starter一般采取<code>spring-boot-starter-{name}</code>的命名方式，如 <code>spring-boot-starter-web</code>。</p>\n<p>而非官方的Starter，官方建议 <code>artifactId</code> 命名应遵循<code>{name}-spring-boot-starter</code>的格式。 例如：<code>ysc-spring-boot-starter</code> 。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.ysc<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>simple-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"第二步编写我们的Service类\"><a href=\"#第二步编写我们的Service类\" class=\"headerlink\" title=\"第二步编写我们的Service类\"></a>第二步编写我们的Service类</h4><p>这里讲一下我们的Starter要实现的功能，很简单，提供一个<code>Service</code>，包含一个能够将配置文件中配置的字符串根据传入的字符进行分割的方法<code>String[] split(String separatorChar)</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StarterService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String config;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StarterService</span><span class=\"params\">(String config)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.config = config;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] split(String separatorChar) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> StringUtils.split(<span class=\"keyword\">this</span>.config, separatorChar);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"第三步编写配置文件读取类\"><a href=\"#第三步编写配置文件读取类\" class=\"headerlink\" title=\"第三步编写配置文件读取类\"></a>第三步编写配置文件读取类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span>(<span class=\"string\">\"example.service\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StarterServiceProperties</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String config;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setConfig</span><span class=\"params\">(String config)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.config = config;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getConfig</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"第四步，编写AutoConfigure类-，这步是关键点\"><a href=\"#第四步，编写AutoConfigure类-，这步是关键点\" class=\"headerlink\" title=\"第四步，编写AutoConfigure类 ，这步是关键点\"></a>第四步，编写<code>AutoConfigure</code>类 ，这步是关键点</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass</span>(StarterService.class)</span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties</span>(StarterServiceProperties.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StarterAutoConfigure</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> StarterServiceProperties properties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnProperty</span>(prefix = <span class=\"string\">\"example.service\"</span>, value = <span class=\"string\">\"enabled\"</span>, havingValue = <span class=\"string\">\"true\"</span>)</span><br><span class=\"line\">    <span class=\"function\">StarterService <span class=\"title\">starterService</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> StarterService(properties.getConfig());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解释一下代码中用到的几个注解：</p>\n<ul>\n<li><code>@ConditionalOnClass</code>，当<code>classpath</code>下发现该类的情况下进行自动配置。</li>\n<li><code>@ConditionalOnMissingBean</code>，当<code>Spring Context</code>中不存在该<code>Bean</code>时。</li>\n<li><code>@ConditionalOnProperty(prefix = &quot;example.service&quot;,value = &quot;enabled&quot;,havingValue = &quot;true&quot;)</code>，当配置文件中<code>example.service.enabled=true</code>时。</li>\n</ul>\n<h5 id=\"下面列举SpringBoot中的所有-Conditional注解及作用\"><a href=\"#下面列举SpringBoot中的所有-Conditional注解及作用\" class=\"headerlink\" title=\"下面列举SpringBoot中的所有@Conditional注解及作用\"></a>下面列举SpringBoot中的所有@Conditional注解及作用</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ConditionalOnBean:当容器中有指定的Bean的条件下  </span><br><span class=\"line\">@ConditionalOnClass：当类路径下有指定的类的条件下  </span><br><span class=\"line\">@ConditionalOnExpression:基于SpEL表达式作为判断条件  </span><br><span class=\"line\">@ConditionalOnJava:基于JVM版本作为判断条件  </span><br><span class=\"line\">@ConditionalOnJndi:在JNDI存在的条件下查找指定的位置  </span><br><span class=\"line\">@ConditionalOnMissingBean:当容器中没有指定Bean的情况下  </span><br><span class=\"line\">@ConditionalOnMissingClass:当类路径下没有指定的类的条件下  </span><br><span class=\"line\">@ConditionalOnNotWebApplication:当前项目不是Web项目的条件下  </span><br><span class=\"line\">@ConditionalOnProperty:指定的属性是否有指定的值  </span><br><span class=\"line\">@ConditionalOnResource:类路径下是否有指定的资源  </span><br><span class=\"line\">@ConditionalOnSingleCandidate:当指定的Bean在容器中只有一个，或者在有多个Bean的情况下，用来指定首选的Bean @ConditionalOnWebApplication:当前项目是Web项目的条件下</span><br></pre></td></tr></table></figure>\n<h4 id=\"最后一步，在resources-META-INF-下创建spring-factories文件，并添加如下内容：\"><a href=\"#最后一步，在resources-META-INF-下创建spring-factories文件，并添加如下内容：\" class=\"headerlink\" title=\"最后一步，在resources/META-INF/下创建spring.factories文件，并添加如下内容：\"></a>最后一步，在<code>resources/META-INF/</code>下创建<code>spring.factories</code>文件，并添加如下内容：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.example.autocinfigure.StarterAutoConfigure</span><br></pre></td></tr></table></figure>\n<p>至此，我们的一个Starter代码部分就是完成了，下面将项目安装到本地Maven仓库中。</p>\n<h2 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h2><p>在项目根目录执行 <code>mvn install</code> 进行打包安装。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>将Starter项目的依赖添加到我们自己的SpringBoot项目中</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.ysc<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>simple-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在<code>application.yml</code> 配置文件中添加配置信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example</span><br><span class=\"line\">  service</span><br><span class=\"line\">    enabled: true</span><br><span class=\"line\">    config： abc-des-dde,SSS-DRS-RE,SDR-SDFR-XXX</span><br></pre></td></tr></table></figure>\n<p>在本地使用<code>JUnit</code>进行代码测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> StarterService starterService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">starterTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String[] splitArray = starterService.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">    System.out.println(splitArray);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我们都知道可以使用SpringBoot快速的开发基于Spring框架的项目。由于围绕SpringBoot存在很多开箱即用的Starter依赖，使得我们在开发业务代码时能够非常方便的、不需要过多关注框架的配置，而只需要关注业务即可。</p>\n<p>例如我想要在SpringBoot项目中集成Redis，那么我只需要加入spring-data-redis-starter的依赖，并简单配置一下连接信息以及Jedis连接池配置就可以。这为我们省去了之前很多的配置操作。甚至有些功能的开启只需要在启动类或配置类上增加一个注解即可完成。</p>\n<p>那么如果我们想要自己实现自己的Starter需要做些什么呢？下面就开始介绍如何实现自己的SpringBoot-xxx-starter。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>首先说说原理，我们知道使用一个公用的starter的时候，只需要将相应的依赖添加的Maven的配置文件当中即可，免去了自己需要引用很多依赖类，并且SpringBoot会自动进行类的自动配置。那么 SpringBoot 是如何知道要实例化哪些类，并进行自动配置的呢？ 下面简单说一下。</p>\n<p>首先，SpringBoot 在启动时会去依赖的starter包中寻找 <code>resources/META-INF/spring.factories</code>文件，然后根据文件中配置的Jar包去扫描项目所依赖的Jar包，这类似于 Java 的 <strong>SPI</strong> 机制。</p>\n<p>第二步，根据 <code>spring.factories</code>配置加载<code>AutoConfigure</code>类。</p>\n<p>最后，根据 <code>@Conditional</code>注解的条件，进行自动配置并将Bean注入Spring Context 上下文当中。</p>\n<p>我们也可以使用<code>@ImportAutoConfiguration({MyServiceAutoConfiguration.class})</code> 指定自动配置哪些类。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>终于到了代码实现的步骤，接下来就开始编码我们自己的SpringBoot-starter。</p>\n<h4 id=\"第一步创建一个SpringBoot-项目，并添加下面两个依赖到pom-xml文件当中\"><a href=\"#第一步创建一个SpringBoot-项目，并添加下面两个依赖到pom-xml文件当中\" class=\"headerlink\" title=\"第一步创建一个SpringBoot 项目，并添加下面两个依赖到pom.xml文件当中\"></a>第一步创建一个SpringBoot 项目，并添加下面两个依赖到pom.xml文件当中</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其中 <code>spring-boot-configuration-processor</code>的作用是编译时生成 <code>spring-configuration-metadata.json</code>，此文件主要给IDE使用。如当配置此jar相关配置属性在 <code>application.yml</code>，你可以用ctlr+鼠标左键点击属性名，IDE会跳转到你配置此属性的类中。</p>\n<p>我们日常使用的Spring官方的Starter一般采取<code>spring-boot-starter-{name}</code>的命名方式，如 <code>spring-boot-starter-web</code>。</p>\n<p>而非官方的Starter，官方建议 <code>artifactId</code> 命名应遵循<code>{name}-spring-boot-starter</code>的格式。 例如：<code>ysc-spring-boot-starter</code> 。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.ysc<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>simple-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"第二步编写我们的Service类\"><a href=\"#第二步编写我们的Service类\" class=\"headerlink\" title=\"第二步编写我们的Service类\"></a>第二步编写我们的Service类</h4><p>这里讲一下我们的Starter要实现的功能，很简单，提供一个<code>Service</code>，包含一个能够将配置文件中配置的字符串根据传入的字符进行分割的方法<code>String[] split(String separatorChar)</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StarterService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String config;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StarterService</span><span class=\"params\">(String config)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.config = config;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] split(String separatorChar) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> StringUtils.split(<span class=\"keyword\">this</span>.config, separatorChar);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"第三步编写配置文件读取类\"><a href=\"#第三步编写配置文件读取类\" class=\"headerlink\" title=\"第三步编写配置文件读取类\"></a>第三步编写配置文件读取类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties</span>(<span class=\"string\">\"example.service\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StarterServiceProperties</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String config;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setConfig</span><span class=\"params\">(String config)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.config = config;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getConfig</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"第四步，编写AutoConfigure类-，这步是关键点\"><a href=\"#第四步，编写AutoConfigure类-，这步是关键点\" class=\"headerlink\" title=\"第四步，编写AutoConfigure类 ，这步是关键点\"></a>第四步，编写<code>AutoConfigure</code>类 ，这步是关键点</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass</span>(StarterService.class)</span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties</span>(StarterServiceProperties.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StarterAutoConfigure</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> StarterServiceProperties properties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnProperty</span>(prefix = <span class=\"string\">\"example.service\"</span>, value = <span class=\"string\">\"enabled\"</span>, havingValue = <span class=\"string\">\"true\"</span>)</span><br><span class=\"line\">    <span class=\"function\">StarterService <span class=\"title\">starterService</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> StarterService(properties.getConfig());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解释一下代码中用到的几个注解：</p>\n<ul>\n<li><code>@ConditionalOnClass</code>，当<code>classpath</code>下发现该类的情况下进行自动配置。</li>\n<li><code>@ConditionalOnMissingBean</code>，当<code>Spring Context</code>中不存在该<code>Bean</code>时。</li>\n<li><code>@ConditionalOnProperty(prefix = &quot;example.service&quot;,value = &quot;enabled&quot;,havingValue = &quot;true&quot;)</code>，当配置文件中<code>example.service.enabled=true</code>时。</li>\n</ul>\n<h5 id=\"下面列举SpringBoot中的所有-Conditional注解及作用\"><a href=\"#下面列举SpringBoot中的所有-Conditional注解及作用\" class=\"headerlink\" title=\"下面列举SpringBoot中的所有@Conditional注解及作用\"></a>下面列举SpringBoot中的所有@Conditional注解及作用</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ConditionalOnBean:当容器中有指定的Bean的条件下  </span><br><span class=\"line\">@ConditionalOnClass：当类路径下有指定的类的条件下  </span><br><span class=\"line\">@ConditionalOnExpression:基于SpEL表达式作为判断条件  </span><br><span class=\"line\">@ConditionalOnJava:基于JVM版本作为判断条件  </span><br><span class=\"line\">@ConditionalOnJndi:在JNDI存在的条件下查找指定的位置  </span><br><span class=\"line\">@ConditionalOnMissingBean:当容器中没有指定Bean的情况下  </span><br><span class=\"line\">@ConditionalOnMissingClass:当类路径下没有指定的类的条件下  </span><br><span class=\"line\">@ConditionalOnNotWebApplication:当前项目不是Web项目的条件下  </span><br><span class=\"line\">@ConditionalOnProperty:指定的属性是否有指定的值  </span><br><span class=\"line\">@ConditionalOnResource:类路径下是否有指定的资源  </span><br><span class=\"line\">@ConditionalOnSingleCandidate:当指定的Bean在容器中只有一个，或者在有多个Bean的情况下，用来指定首选的Bean @ConditionalOnWebApplication:当前项目是Web项目的条件下</span><br></pre></td></tr></table></figure>\n<h4 id=\"最后一步，在resources-META-INF-下创建spring-factories文件，并添加如下内容：\"><a href=\"#最后一步，在resources-META-INF-下创建spring-factories文件，并添加如下内容：\" class=\"headerlink\" title=\"最后一步，在resources/META-INF/下创建spring.factories文件，并添加如下内容：\"></a>最后一步，在<code>resources/META-INF/</code>下创建<code>spring.factories</code>文件，并添加如下内容：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.example.autocinfigure.StarterAutoConfigure</span><br></pre></td></tr></table></figure>\n<p>至此，我们的一个Starter代码部分就是完成了，下面将项目安装到本地Maven仓库中。</p>\n<h2 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h2><p>在项目根目录执行 <code>mvn install</code> 进行打包安装。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>将Starter项目的依赖添加到我们自己的SpringBoot项目中</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.ysc<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>simple-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在<code>application.yml</code> 配置文件中添加配置信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example</span><br><span class=\"line\">  service</span><br><span class=\"line\">    enabled: true</span><br><span class=\"line\">    config： abc-des-dde,SSS-DRS-RE,SDR-SDFR-XXX</span><br></pre></td></tr></table></figure>\n<p>在本地使用<code>JUnit</code>进行代码测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> StarterService starterService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">starterTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String[] splitArray = starterService.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">    System.out.println(splitArray);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"mybatis-sessions","date":"2019-04-10T02:25:51.000Z","_content":"\n\n\n# SqlSessionFactory\n\n`sqlSessionFactory`是工厂类的接口，默认实现是`DefaultSqlSessionFactory`，通过`sqlSessionFactoryBuilder`创建，我们不具体讨论配置文件的具体解析，主要分析mybatis的运行流程。\n\n`SqlSessionFactory`主要是用来创建`SqlSession`，`SqlSession`是线程不安全的，因此每次操作都要重新创建。\n\n```java\n// 通过数据源创建SqlSession，是我们比较常用的一种方式\nprivate SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {\n    Transaction tx = null;\n    try {\n      final Environment environment = configuration.getEnvironment();\n      final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);\n      //通过事务工厂来产生一个事务\n      tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);\n      //生成一个执行器(事务包含在执行器里)\n      final Executor executor = configuration.newExecutor(tx, execType);\n      //然后产生一个DefaultSqlSession\n      return new DefaultSqlSession(configuration, executor, autoCommit);\n    } catch (Exception e) {\n      //如果打开事务出错，则关闭它\n      closeTransaction(tx); // may have fetched a connection so lets call close()\n      throw ExceptionFactory.wrapException(\"Error opening session.  Cause: \" + e, e);\n    } finally {\n      //最后清空错误上下文\n      ErrorContext.instance().reset();\n    }\n  }\nSqlSession\n```\n\n`SqlSession`有两方式调用方法，第一种方式是通过命名空间调用，第二种方式是`JavaBean`调用，也就是通过我们常用的Mapper接口进行调用。现在`Myabtis3`我们基本使用第二种方式。\n\n通过Mapper接口进行调用，核心是 获取Mapper接口，并通过动态代理，进行方法拦截。\n\n`SqlSession`通过`getMapper`获取相应的Mapper接口。`SqlSession`的的数据库操作是调用Executor的相关方法。\n\n在`getMapper`调用的时候，有几个核心的类\n\n1. `MapperProxyFactory`:用于创建`MapperProxyd`的工厂方法\n2. `MapperProxy`:动态代理的`InvocationHandler`的实现，实际中就是执行sql语句\n3. `MapperRegistry`\n4. `MapperMethood`:调用`SqlSession`的方法","source":"_posts/mybatis/mybatis-sessions.md","raw":"---\ntitle: mybatis-sessions\ndate: 2019-04-10 10:25:51\ntags:\n- mybatis\n- java\n---\n\n\n\n# SqlSessionFactory\n\n`sqlSessionFactory`是工厂类的接口，默认实现是`DefaultSqlSessionFactory`，通过`sqlSessionFactoryBuilder`创建，我们不具体讨论配置文件的具体解析，主要分析mybatis的运行流程。\n\n`SqlSessionFactory`主要是用来创建`SqlSession`，`SqlSession`是线程不安全的，因此每次操作都要重新创建。\n\n```java\n// 通过数据源创建SqlSession，是我们比较常用的一种方式\nprivate SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) {\n    Transaction tx = null;\n    try {\n      final Environment environment = configuration.getEnvironment();\n      final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);\n      //通过事务工厂来产生一个事务\n      tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);\n      //生成一个执行器(事务包含在执行器里)\n      final Executor executor = configuration.newExecutor(tx, execType);\n      //然后产生一个DefaultSqlSession\n      return new DefaultSqlSession(configuration, executor, autoCommit);\n    } catch (Exception e) {\n      //如果打开事务出错，则关闭它\n      closeTransaction(tx); // may have fetched a connection so lets call close()\n      throw ExceptionFactory.wrapException(\"Error opening session.  Cause: \" + e, e);\n    } finally {\n      //最后清空错误上下文\n      ErrorContext.instance().reset();\n    }\n  }\nSqlSession\n```\n\n`SqlSession`有两方式调用方法，第一种方式是通过命名空间调用，第二种方式是`JavaBean`调用，也就是通过我们常用的Mapper接口进行调用。现在`Myabtis3`我们基本使用第二种方式。\n\n通过Mapper接口进行调用，核心是 获取Mapper接口，并通过动态代理，进行方法拦截。\n\n`SqlSession`通过`getMapper`获取相应的Mapper接口。`SqlSession`的的数据库操作是调用Executor的相关方法。\n\n在`getMapper`调用的时候，有几个核心的类\n\n1. `MapperProxyFactory`:用于创建`MapperProxyd`的工厂方法\n2. `MapperProxy`:动态代理的`InvocationHandler`的实现，实际中就是执行sql语句\n3. `MapperRegistry`\n4. `MapperMethood`:调用`SqlSession`的方法","slug":"mybatis/mybatis-sessions","published":1,"updated":"2020-09-20T03:22:55.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblmq003l4tjev36roqii","content":"<h1 id=\"SqlSessionFactory\"><a href=\"#SqlSessionFactory\" class=\"headerlink\" title=\"SqlSessionFactory\"></a>SqlSessionFactory</h1><p><code>sqlSessionFactory</code>是工厂类的接口，默认实现是<code>DefaultSqlSessionFactory</code>，通过<code>sqlSessionFactoryBuilder</code>创建，我们不具体讨论配置文件的具体解析，主要分析mybatis的运行流程。</p>\n<p><code>SqlSessionFactory</code>主要是用来创建<code>SqlSession</code>，<code>SqlSession</code>是线程不安全的，因此每次操作都要重新创建。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过数据源创建SqlSession，是我们比较常用的一种方式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> SqlSession <span class=\"title\">openSessionFromDataSource</span><span class=\"params\">(ExecutorType execType, TransactionIsolationLevel level, <span class=\"keyword\">boolean</span> autoCommit)</span> </span>&#123;</span><br><span class=\"line\">    Transaction tx = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> Environment environment = configuration.getEnvironment();</span><br><span class=\"line\">      <span class=\"keyword\">final</span> TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);</span><br><span class=\"line\">      <span class=\"comment\">//通过事务工厂来产生一个事务</span></span><br><span class=\"line\">      tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);</span><br><span class=\"line\">      <span class=\"comment\">//生成一个执行器(事务包含在执行器里)</span></span><br><span class=\"line\">      <span class=\"keyword\">final</span> Executor executor = configuration.newExecutor(tx, execType);</span><br><span class=\"line\">      <span class=\"comment\">//然后产生一个DefaultSqlSession</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DefaultSqlSession(configuration, executor, autoCommit);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//如果打开事务出错，则关闭它</span></span><br><span class=\"line\">      closeTransaction(tx); <span class=\"comment\">// may have fetched a connection so lets call close()</span></span><br><span class=\"line\">      <span class=\"keyword\">throw</span> ExceptionFactory.wrapException(<span class=\"string\">\"Error opening session.  Cause: \"</span> + e, e);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//最后清空错误上下文</span></span><br><span class=\"line\">      ErrorContext.instance().reset();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">SqlSession</span><br></pre></td></tr></table></figure>\n<p><code>SqlSession</code>有两方式调用方法，第一种方式是通过命名空间调用，第二种方式是<code>JavaBean</code>调用，也就是通过我们常用的Mapper接口进行调用。现在<code>Myabtis3</code>我们基本使用第二种方式。</p>\n<p>通过Mapper接口进行调用，核心是 获取Mapper接口，并通过动态代理，进行方法拦截。</p>\n<p><code>SqlSession</code>通过<code>getMapper</code>获取相应的Mapper接口。<code>SqlSession</code>的的数据库操作是调用Executor的相关方法。</p>\n<p>在<code>getMapper</code>调用的时候，有几个核心的类</p>\n<ol>\n<li><code>MapperProxyFactory</code>:用于创建<code>MapperProxyd</code>的工厂方法</li>\n<li><code>MapperProxy</code>:动态代理的<code>InvocationHandler</code>的实现，实际中就是执行sql语句</li>\n<li><code>MapperRegistry</code></li>\n<li><code>MapperMethood</code>:调用<code>SqlSession</code>的方法</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SqlSessionFactory\"><a href=\"#SqlSessionFactory\" class=\"headerlink\" title=\"SqlSessionFactory\"></a>SqlSessionFactory</h1><p><code>sqlSessionFactory</code>是工厂类的接口，默认实现是<code>DefaultSqlSessionFactory</code>，通过<code>sqlSessionFactoryBuilder</code>创建，我们不具体讨论配置文件的具体解析，主要分析mybatis的运行流程。</p>\n<p><code>SqlSessionFactory</code>主要是用来创建<code>SqlSession</code>，<code>SqlSession</code>是线程不安全的，因此每次操作都要重新创建。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过数据源创建SqlSession，是我们比较常用的一种方式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> SqlSession <span class=\"title\">openSessionFromDataSource</span><span class=\"params\">(ExecutorType execType, TransactionIsolationLevel level, <span class=\"keyword\">boolean</span> autoCommit)</span> </span>&#123;</span><br><span class=\"line\">    Transaction tx = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> Environment environment = configuration.getEnvironment();</span><br><span class=\"line\">      <span class=\"keyword\">final</span> TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);</span><br><span class=\"line\">      <span class=\"comment\">//通过事务工厂来产生一个事务</span></span><br><span class=\"line\">      tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);</span><br><span class=\"line\">      <span class=\"comment\">//生成一个执行器(事务包含在执行器里)</span></span><br><span class=\"line\">      <span class=\"keyword\">final</span> Executor executor = configuration.newExecutor(tx, execType);</span><br><span class=\"line\">      <span class=\"comment\">//然后产生一个DefaultSqlSession</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DefaultSqlSession(configuration, executor, autoCommit);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//如果打开事务出错，则关闭它</span></span><br><span class=\"line\">      closeTransaction(tx); <span class=\"comment\">// may have fetched a connection so lets call close()</span></span><br><span class=\"line\">      <span class=\"keyword\">throw</span> ExceptionFactory.wrapException(<span class=\"string\">\"Error opening session.  Cause: \"</span> + e, e);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//最后清空错误上下文</span></span><br><span class=\"line\">      ErrorContext.instance().reset();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">SqlSession</span><br></pre></td></tr></table></figure>\n<p><code>SqlSession</code>有两方式调用方法，第一种方式是通过命名空间调用，第二种方式是<code>JavaBean</code>调用，也就是通过我们常用的Mapper接口进行调用。现在<code>Myabtis3</code>我们基本使用第二种方式。</p>\n<p>通过Mapper接口进行调用，核心是 获取Mapper接口，并通过动态代理，进行方法拦截。</p>\n<p><code>SqlSession</code>通过<code>getMapper</code>获取相应的Mapper接口。<code>SqlSession</code>的的数据库操作是调用Executor的相关方法。</p>\n<p>在<code>getMapper</code>调用的时候，有几个核心的类</p>\n<ol>\n<li><code>MapperProxyFactory</code>:用于创建<code>MapperProxyd</code>的工厂方法</li>\n<li><code>MapperProxy</code>:动态代理的<code>InvocationHandler</code>的实现，实际中就是执行sql语句</li>\n<li><code>MapperRegistry</code></li>\n<li><code>MapperMethood</code>:调用<code>SqlSession</code>的方法</li>\n</ol>\n"},{"title":"centos8安装mysql","date":"2020-09-17T08:55:17.000Z","_content":"\n以root身份或[具有sudo特权的用户身份使用CentOS软件包管理器安装MySQL 8.0服务器](https://www.myfreax.com/create-a-sudo-user-on-centos/)：\n\n```bash\nsudo dnf install @mysql\n```\n\n`@mysql`模块安装MySQL及其所有依赖项。\n\n安装完成后，通过运行以下命令来启动MySQL服务并使其在启动时自动启动：\n\n```bash\nsudo systemctl enable --now mysqld\n```\n\n要检查MySQL服务器是否正在运行，请输入：\n\n```bash\nsudo systemctl status mysqld\n```\n\n```bash\n● mysqld.service - MySQL 8.0 database server\n   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)\n   Active: active (running) since Thu 2019-10-17 22:09:39 UTC; 15s ago\n   ...\n```\n\n## 保护MySQL\n\n运行`mysql_secure_installation`脚本，该脚本执行一些与安全性相关的操作并设置MySQL根密码：\n\n```bash\nsudo mysql_secure_installation\n```\n\n将要求您配置[ `VALIDATE PASSWORD PLUGIN` ](https://dev.mysql.com/doc/refman/8.0/en/validate-password.html)，该工具用于测试MySQL用户密码的强度并提高安全性。密码验证策略分为三个级别：低，中和强。如果您不想设置验证密码插件，请按`ENTER`。\n\n在下一个提示符下，将要求您为MySQL根用户设置密码。完成此操作后，脚本还将要求您删除匿名用户，限制root用户对本地计算机的访问，并删除测试数据库。您应该对所有问题回答“是”。\n\n要从命令行与MySQL服务器进行交互，请使用MySQL客户端实用程序，它作为依赖项安装。通过键入以下内容测试根访问权限：\n\n```bash\nmysql -u root -p\n```\n\n出现提示时输入[ root密码](https://www.myfreax.com/how-to-reset-a-mysql-root-password/)，将为您提供MySQL shell，如下所示：\n\n```bash\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 12\nServer version: 8.0.17 Source distribution\n```\n\n就是这样！您已经在CentOS服务器上安装并保护了MySQL 8.0，并准备使用它。\n\n## 身份验证方法\n\n由于CentOS 8中的某些客户端工具和库与`caching_sha2_password`方法不兼容，CentOS 8存储库中包含的MySQL 8.0服务器被设置为使用旧的`mysql_native_password`身份验证插件。上游MySQL 8.0版本。\n\n`mysql_native_password`方法适用于大多数设置。但是，如果您想将默认身份验证插件更改为`caching_sha2_password`，这会更快并提供更好的安全性，请打开以下配置文件：\n\n```bash\nsudo vim /etc/my.cnf.d/mysql-default-authentication-plugin.cnf\n```\n\n将`default_authentication_plugin`的值更改为`caching_sha2_password`：\n\n```bash\n[mysqld]\ndefault_authentication_plugin=caching_sha2_password\n```\n\n[关闭并保存文件](https://www.myfreax.com/how-to-save-file-in-vim-quit-editor/)，然后重新启动MySQL服务器以使更改生效：\n\n```bash\nsudo systemctl restart mysqld\n```","source":"_posts/mysql/centos8安装mysql.md","raw":"---\ntitle: centos8安装mysql\ndate: 2020-09-17 16:55:17\ntags:\n- mysql\n---\n\n以root身份或[具有sudo特权的用户身份使用CentOS软件包管理器安装MySQL 8.0服务器](https://www.myfreax.com/create-a-sudo-user-on-centos/)：\n\n```bash\nsudo dnf install @mysql\n```\n\n`@mysql`模块安装MySQL及其所有依赖项。\n\n安装完成后，通过运行以下命令来启动MySQL服务并使其在启动时自动启动：\n\n```bash\nsudo systemctl enable --now mysqld\n```\n\n要检查MySQL服务器是否正在运行，请输入：\n\n```bash\nsudo systemctl status mysqld\n```\n\n```bash\n● mysqld.service - MySQL 8.0 database server\n   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)\n   Active: active (running) since Thu 2019-10-17 22:09:39 UTC; 15s ago\n   ...\n```\n\n## 保护MySQL\n\n运行`mysql_secure_installation`脚本，该脚本执行一些与安全性相关的操作并设置MySQL根密码：\n\n```bash\nsudo mysql_secure_installation\n```\n\n将要求您配置[ `VALIDATE PASSWORD PLUGIN` ](https://dev.mysql.com/doc/refman/8.0/en/validate-password.html)，该工具用于测试MySQL用户密码的强度并提高安全性。密码验证策略分为三个级别：低，中和强。如果您不想设置验证密码插件，请按`ENTER`。\n\n在下一个提示符下，将要求您为MySQL根用户设置密码。完成此操作后，脚本还将要求您删除匿名用户，限制root用户对本地计算机的访问，并删除测试数据库。您应该对所有问题回答“是”。\n\n要从命令行与MySQL服务器进行交互，请使用MySQL客户端实用程序，它作为依赖项安装。通过键入以下内容测试根访问权限：\n\n```bash\nmysql -u root -p\n```\n\n出现提示时输入[ root密码](https://www.myfreax.com/how-to-reset-a-mysql-root-password/)，将为您提供MySQL shell，如下所示：\n\n```bash\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 12\nServer version: 8.0.17 Source distribution\n```\n\n就是这样！您已经在CentOS服务器上安装并保护了MySQL 8.0，并准备使用它。\n\n## 身份验证方法\n\n由于CentOS 8中的某些客户端工具和库与`caching_sha2_password`方法不兼容，CentOS 8存储库中包含的MySQL 8.0服务器被设置为使用旧的`mysql_native_password`身份验证插件。上游MySQL 8.0版本。\n\n`mysql_native_password`方法适用于大多数设置。但是，如果您想将默认身份验证插件更改为`caching_sha2_password`，这会更快并提供更好的安全性，请打开以下配置文件：\n\n```bash\nsudo vim /etc/my.cnf.d/mysql-default-authentication-plugin.cnf\n```\n\n将`default_authentication_plugin`的值更改为`caching_sha2_password`：\n\n```bash\n[mysqld]\ndefault_authentication_plugin=caching_sha2_password\n```\n\n[关闭并保存文件](https://www.myfreax.com/how-to-save-file-in-vim-quit-editor/)，然后重新启动MySQL服务器以使更改生效：\n\n```bash\nsudo systemctl restart mysqld\n```","slug":"mysql/centos8安装mysql","published":1,"updated":"2020-09-20T03:22:55.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblmq003o4tje6kn0jc0x","content":"<p>以root身份或<a href=\"https://www.myfreax.com/create-a-sudo-user-on-centos/\" target=\"_blank\" rel=\"noopener\">具有sudo特权的用户身份使用CentOS软件包管理器安装MySQL 8.0服务器</a>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dnf install @mysql</span><br></pre></td></tr></table></figure>\n<p><code>@mysql</code>模块安装MySQL及其所有依赖项。</p>\n<p>安装完成后，通过运行以下命令来启动MySQL服务并使其在启动时自动启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> --now mysqld</span><br></pre></td></tr></table></figure>\n<p>要检查MySQL服务器是否正在运行，请输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl status mysqld</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">● mysqld.service - MySQL 8.0 database server</span><br><span class=\"line\">   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Thu 2019-10-17 22:09:39 UTC; 15s ago</span><br><span class=\"line\">   ...</span><br></pre></td></tr></table></figure>\n<h2 id=\"保护MySQL\"><a href=\"#保护MySQL\" class=\"headerlink\" title=\"保护MySQL\"></a>保护MySQL</h2><p>运行<code>mysql_secure_installation</code>脚本，该脚本执行一些与安全性相关的操作并设置MySQL根密码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure>\n<p>将要求您配置<a href=\"https://dev.mysql.com/doc/refman/8.0/en/validate-password.html\" target=\"_blank\" rel=\"noopener\"> <code>VALIDATE PASSWORD PLUGIN</code> </a>，该工具用于测试MySQL用户密码的强度并提高安全性。密码验证策略分为三个级别：低，中和强。如果您不想设置验证密码插件，请按<code>ENTER</code>。</p>\n<p>在下一个提示符下，将要求您为MySQL根用户设置密码。完成此操作后，脚本还将要求您删除匿名用户，限制root用户对本地计算机的访问，并删除测试数据库。您应该对所有问题回答“是”。</p>\n<p>要从命令行与MySQL服务器进行交互，请使用MySQL客户端实用程序，它作为依赖项安装。通过键入以下内容测试根访问权限：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n<p>出现提示时输入<a href=\"https://www.myfreax.com/how-to-reset-a-mysql-root-password/\" target=\"_blank\" rel=\"noopener\"> root密码</a>，将为您提供MySQL shell，如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Welcome to the MySQL monitor.  Commands end with ; or \\g.</span><br><span class=\"line\">Your MySQL connection id is 12</span><br><span class=\"line\">Server version: 8.0.17 Source distribution</span><br></pre></td></tr></table></figure>\n<p>就是这样！您已经在CentOS服务器上安装并保护了MySQL 8.0，并准备使用它。</p>\n<h2 id=\"身份验证方法\"><a href=\"#身份验证方法\" class=\"headerlink\" title=\"身份验证方法\"></a>身份验证方法</h2><p>由于CentOS 8中的某些客户端工具和库与<code>caching_sha2_password</code>方法不兼容，CentOS 8存储库中包含的MySQL 8.0服务器被设置为使用旧的<code>mysql_native_password</code>身份验证插件。上游MySQL 8.0版本。</p>\n<p><code>mysql_native_password</code>方法适用于大多数设置。但是，如果您想将默认身份验证插件更改为<code>caching_sha2_password</code>，这会更快并提供更好的安全性，请打开以下配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/my.cnf.d/mysql-default-authentication-plugin.cnf</span><br></pre></td></tr></table></figure>\n<p>将<code>default_authentication_plugin</code>的值更改为<code>caching_sha2_password</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">default_authentication_plugin=caching_sha2_password</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.myfreax.com/how-to-save-file-in-vim-quit-editor/\" target=\"_blank\" rel=\"noopener\">关闭并保存文件</a>，然后重新启动MySQL服务器以使更改生效：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart mysqld</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>以root身份或<a href=\"https://www.myfreax.com/create-a-sudo-user-on-centos/\" target=\"_blank\" rel=\"noopener\">具有sudo特权的用户身份使用CentOS软件包管理器安装MySQL 8.0服务器</a>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dnf install @mysql</span><br></pre></td></tr></table></figure>\n<p><code>@mysql</code>模块安装MySQL及其所有依赖项。</p>\n<p>安装完成后，通过运行以下命令来启动MySQL服务并使其在启动时自动启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> --now mysqld</span><br></pre></td></tr></table></figure>\n<p>要检查MySQL服务器是否正在运行，请输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl status mysqld</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">● mysqld.service - MySQL 8.0 database server</span><br><span class=\"line\">   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Thu 2019-10-17 22:09:39 UTC; 15s ago</span><br><span class=\"line\">   ...</span><br></pre></td></tr></table></figure>\n<h2 id=\"保护MySQL\"><a href=\"#保护MySQL\" class=\"headerlink\" title=\"保护MySQL\"></a>保护MySQL</h2><p>运行<code>mysql_secure_installation</code>脚本，该脚本执行一些与安全性相关的操作并设置MySQL根密码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure>\n<p>将要求您配置<a href=\"https://dev.mysql.com/doc/refman/8.0/en/validate-password.html\" target=\"_blank\" rel=\"noopener\"> <code>VALIDATE PASSWORD PLUGIN</code> </a>，该工具用于测试MySQL用户密码的强度并提高安全性。密码验证策略分为三个级别：低，中和强。如果您不想设置验证密码插件，请按<code>ENTER</code>。</p>\n<p>在下一个提示符下，将要求您为MySQL根用户设置密码。完成此操作后，脚本还将要求您删除匿名用户，限制root用户对本地计算机的访问，并删除测试数据库。您应该对所有问题回答“是”。</p>\n<p>要从命令行与MySQL服务器进行交互，请使用MySQL客户端实用程序，它作为依赖项安装。通过键入以下内容测试根访问权限：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n<p>出现提示时输入<a href=\"https://www.myfreax.com/how-to-reset-a-mysql-root-password/\" target=\"_blank\" rel=\"noopener\"> root密码</a>，将为您提供MySQL shell，如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Welcome to the MySQL monitor.  Commands end with ; or \\g.</span><br><span class=\"line\">Your MySQL connection id is 12</span><br><span class=\"line\">Server version: 8.0.17 Source distribution</span><br></pre></td></tr></table></figure>\n<p>就是这样！您已经在CentOS服务器上安装并保护了MySQL 8.0，并准备使用它。</p>\n<h2 id=\"身份验证方法\"><a href=\"#身份验证方法\" class=\"headerlink\" title=\"身份验证方法\"></a>身份验证方法</h2><p>由于CentOS 8中的某些客户端工具和库与<code>caching_sha2_password</code>方法不兼容，CentOS 8存储库中包含的MySQL 8.0服务器被设置为使用旧的<code>mysql_native_password</code>身份验证插件。上游MySQL 8.0版本。</p>\n<p><code>mysql_native_password</code>方法适用于大多数设置。但是，如果您想将默认身份验证插件更改为<code>caching_sha2_password</code>，这会更快并提供更好的安全性，请打开以下配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/my.cnf.d/mysql-default-authentication-plugin.cnf</span><br></pre></td></tr></table></figure>\n<p>将<code>default_authentication_plugin</code>的值更改为<code>caching_sha2_password</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">default_authentication_plugin=caching_sha2_password</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.myfreax.com/how-to-save-file-in-vim-quit-editor/\" target=\"_blank\" rel=\"noopener\">关闭并保存文件</a>，然后重新启动MySQL服务器以使更改生效：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart mysqld</span><br></pre></td></tr></table></figure>"},{"title":"centos安装mysql","date":"2019-03-29T07:45:32.000Z","_content":"\n# 添加 MySQL YUM 源\n\n```bash\n$wget 'https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm'\n$sudo rpm -Uvh mysql57-community-release-el7-11.noarch.rpm\n$yum repolist all | grep mysql\nmysql-connectors-community/x86_64 MySQL Connectors Community                  36\nmysql-tools-community/x86_64      MySQL Tools Community                       47\nmysql57-community/x86_64          MySQL 5.7 Community Server                 187\n```\n\n# 安装MySQL\n\n```\n## 安装最新版\n$sudo yum install mysql-community-server\n$ sudo yum install mysql   ## 安装客户端\n## 安装老版本\n## 1. yum-config-manager\n$ sudo dnf config-manager --disable mysql57-community\n$ sudo dnf config-manager --enable mysql56-community\n$ yum repolist | grep mysql\nmysql-connectors-community/x86_64 MySQL Connectors Community                  36\nmysql-tools-community/x86_64      MySQL Tools Community                       47\nmysql56-community/x86_64          MySQL 5.6 Community Server                 327\n## 2. 直接修改 /etc/yum.repos.d/mysql-community.repo\n# Enable to use MySQL 5.6\n[mysql56-community]\nname=MySQL 5.6 Community Server\nbaseurl=http://repo.mysql.com/yum/mysql-5.6-community/el/7/$basearch/\nenabled=1 #表示当前版本是安装\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql\n[mysql57-community]\nname=MySQL 5.7 Community Server\nbaseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/\nenabled=0 #默认这个是 1\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql\n```\n\n# 启动Mysql\n\n```\n$sudo service mysqld start \n$sudo systemctl start mysqld #CentOS 7\n$sudo systemctl status mysqld\n● mysqld.service - MySQL Community Server\n   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)\n   Active: active (running) since Sat 2017-05-27 12:56:26 CST; 15s ago\n  Process: 2482 ExecStartPost=/usr/bin/mysql-systemd-start post (code=exited, status=0/SUCCESS)\n  Process: 2421 ExecStartPre=/usr/bin/mysql-systemd-start pre (code=exited, status=0/SUCCESS)\n Main PID: 2481 (mysqld_safe)\n   CGroup: /system.slice/mysqld.service\n           ├─2481 /bin/sh /usr/bin/mysqld_safe --basedir=/usr\n           └─2647 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql --plugin-dir=/usr/...\n```\n\n## 修改密码\n\n```\n## 获取临时密码\nsudo grep 'temporary password' /var/log/mysqld.log\n$ mysql -uroot -p  #输入查看到的密码\nmysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass4!';\n```\n\nmysql的密码存在安全等级\n\n```\nshell> mysql_secure_installation\n```\n\n```\nmysql> SHOW VARIABLES LIKE 'validate_password%';\n```\n\n**validate_password_number_count**参数是密码中至少含有的数字个数，当密码策略是MEDIUM或以上时生效。\n\n**validate_password_special_char_count**参数是密码中非英文数字等特殊字符的个数，当密码策略是MEDIUM或以上时生效。\n\n**validate_password_mixed_case_count**参数是密码中英文字符大小写的个数，当密码策略是MEDIUM或以上时生效。\n\n**validate_password_length**参数是密码的长度，这个参数由下面的公式生成\n\nvalidate_password_number_count+ validate_password_special_char_count+ (2 * validate_password_mixed_case_count)\n\n**validate_password_dictionary_file**参数是指定密码验证的字典文件路径。\n\n**validate_password_policy**这个参数可以设为0、1、2，分别代表从低到高的密码强度，此参数的默认值为1，如果想将密码强度改弱，则更改此参数为0。\n\n\n\n## 修改密码策略\n\n更改密码策略为LOW  \n\n```\nmysql> set global validate_password_policy=0;\n```\n\n更改密码长度  \n\n```\nmysql> set global validate_password_length=0;\n```\n\n## 安全设置\n\n```\n## 会提示设置5个关键位置\n## 设置 root 密码\n## 禁止 root 账号远程登录\n## 禁止匿名账号（anonymous）登录\n## 删除测试库\n## 是否确认修改\n$ mysql_secure_installation\n```\n\n# 安装三方插件\n\n```\nyum --disablerepo=\\* --enablerepo='mysql*-community*' list available\n```\n\n# 修改编码\n\n```\n## /etc/my.cnf\n[client]\ndefault-character-set = utf8\n[mysqld]\ndefault-storage-engine = INNODB\ncharacter-set-server = utf8\ncollation-server = utf8_general_ci #不区分大小写\ncollation-server =  utf8_bin #区分大小写\ncollation-server = utf8_unicode_ci #比 utf8_general_ci 更准确\n```\n\n# 修改服务器时间\n\n```\n## mysql 中默认的时间戳是 UTC 时间，需要改为服务器时间的话官网提供了 3 种方式\n$ mysql_tzinfo_to_sql tz_dir\n$ mysql_tzinfo_to_sql tz_file tz_name\n$ mysql_tzinfo_to_sql --leap tz_file\n## tz_dir 代表服务器时间数据库，CentOS 7 中默认的目录为 /usr/share/zoneinfo ，tz_name 为具体的时区。如果设置的时区需要闰秒，则使用 --leap，具体的用法如下：\n$ mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root -p mysql\n$ mysql_tzinfo_to_sql tz_file tz_name | mysql -u root mysql\n$ mysql_tzinfo_to_sql --leap tz_file | mysql -u root mysql\n> set global time_zone = '+8:00';  ##修改mysql全局时区为北京时间，即我们所在的东8区\n> set time_zone = '+8:00';  ##修改当前会话时区\n> flush privileges;  #立即生效\n## 通过修改my.cnf配置文件来修改时区\n# vim /etc/my.cnf  ##在[mysqld]区域中加上\ndefault-time_zone = '+8:00'\n# /etc/init.d/mysqld restart  ##重启mysql使新时区生效\n```\n\n","source":"_posts/mysql/mysql安装.md","raw":"---\ntitle: centos安装mysql\ndate: 2019-03-29 15:45:32\ntags:\n- linux\n---\n\n# 添加 MySQL YUM 源\n\n```bash\n$wget 'https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm'\n$sudo rpm -Uvh mysql57-community-release-el7-11.noarch.rpm\n$yum repolist all | grep mysql\nmysql-connectors-community/x86_64 MySQL Connectors Community                  36\nmysql-tools-community/x86_64      MySQL Tools Community                       47\nmysql57-community/x86_64          MySQL 5.7 Community Server                 187\n```\n\n# 安装MySQL\n\n```\n## 安装最新版\n$sudo yum install mysql-community-server\n$ sudo yum install mysql   ## 安装客户端\n## 安装老版本\n## 1. yum-config-manager\n$ sudo dnf config-manager --disable mysql57-community\n$ sudo dnf config-manager --enable mysql56-community\n$ yum repolist | grep mysql\nmysql-connectors-community/x86_64 MySQL Connectors Community                  36\nmysql-tools-community/x86_64      MySQL Tools Community                       47\nmysql56-community/x86_64          MySQL 5.6 Community Server                 327\n## 2. 直接修改 /etc/yum.repos.d/mysql-community.repo\n# Enable to use MySQL 5.6\n[mysql56-community]\nname=MySQL 5.6 Community Server\nbaseurl=http://repo.mysql.com/yum/mysql-5.6-community/el/7/$basearch/\nenabled=1 #表示当前版本是安装\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql\n[mysql57-community]\nname=MySQL 5.7 Community Server\nbaseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/\nenabled=0 #默认这个是 1\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql\n```\n\n# 启动Mysql\n\n```\n$sudo service mysqld start \n$sudo systemctl start mysqld #CentOS 7\n$sudo systemctl status mysqld\n● mysqld.service - MySQL Community Server\n   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)\n   Active: active (running) since Sat 2017-05-27 12:56:26 CST; 15s ago\n  Process: 2482 ExecStartPost=/usr/bin/mysql-systemd-start post (code=exited, status=0/SUCCESS)\n  Process: 2421 ExecStartPre=/usr/bin/mysql-systemd-start pre (code=exited, status=0/SUCCESS)\n Main PID: 2481 (mysqld_safe)\n   CGroup: /system.slice/mysqld.service\n           ├─2481 /bin/sh /usr/bin/mysqld_safe --basedir=/usr\n           └─2647 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql --plugin-dir=/usr/...\n```\n\n## 修改密码\n\n```\n## 获取临时密码\nsudo grep 'temporary password' /var/log/mysqld.log\n$ mysql -uroot -p  #输入查看到的密码\nmysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass4!';\n```\n\nmysql的密码存在安全等级\n\n```\nshell> mysql_secure_installation\n```\n\n```\nmysql> SHOW VARIABLES LIKE 'validate_password%';\n```\n\n**validate_password_number_count**参数是密码中至少含有的数字个数，当密码策略是MEDIUM或以上时生效。\n\n**validate_password_special_char_count**参数是密码中非英文数字等特殊字符的个数，当密码策略是MEDIUM或以上时生效。\n\n**validate_password_mixed_case_count**参数是密码中英文字符大小写的个数，当密码策略是MEDIUM或以上时生效。\n\n**validate_password_length**参数是密码的长度，这个参数由下面的公式生成\n\nvalidate_password_number_count+ validate_password_special_char_count+ (2 * validate_password_mixed_case_count)\n\n**validate_password_dictionary_file**参数是指定密码验证的字典文件路径。\n\n**validate_password_policy**这个参数可以设为0、1、2，分别代表从低到高的密码强度，此参数的默认值为1，如果想将密码强度改弱，则更改此参数为0。\n\n\n\n## 修改密码策略\n\n更改密码策略为LOW  \n\n```\nmysql> set global validate_password_policy=0;\n```\n\n更改密码长度  \n\n```\nmysql> set global validate_password_length=0;\n```\n\n## 安全设置\n\n```\n## 会提示设置5个关键位置\n## 设置 root 密码\n## 禁止 root 账号远程登录\n## 禁止匿名账号（anonymous）登录\n## 删除测试库\n## 是否确认修改\n$ mysql_secure_installation\n```\n\n# 安装三方插件\n\n```\nyum --disablerepo=\\* --enablerepo='mysql*-community*' list available\n```\n\n# 修改编码\n\n```\n## /etc/my.cnf\n[client]\ndefault-character-set = utf8\n[mysqld]\ndefault-storage-engine = INNODB\ncharacter-set-server = utf8\ncollation-server = utf8_general_ci #不区分大小写\ncollation-server =  utf8_bin #区分大小写\ncollation-server = utf8_unicode_ci #比 utf8_general_ci 更准确\n```\n\n# 修改服务器时间\n\n```\n## mysql 中默认的时间戳是 UTC 时间，需要改为服务器时间的话官网提供了 3 种方式\n$ mysql_tzinfo_to_sql tz_dir\n$ mysql_tzinfo_to_sql tz_file tz_name\n$ mysql_tzinfo_to_sql --leap tz_file\n## tz_dir 代表服务器时间数据库，CentOS 7 中默认的目录为 /usr/share/zoneinfo ，tz_name 为具体的时区。如果设置的时区需要闰秒，则使用 --leap，具体的用法如下：\n$ mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root -p mysql\n$ mysql_tzinfo_to_sql tz_file tz_name | mysql -u root mysql\n$ mysql_tzinfo_to_sql --leap tz_file | mysql -u root mysql\n> set global time_zone = '+8:00';  ##修改mysql全局时区为北京时间，即我们所在的东8区\n> set time_zone = '+8:00';  ##修改当前会话时区\n> flush privileges;  #立即生效\n## 通过修改my.cnf配置文件来修改时区\n# vim /etc/my.cnf  ##在[mysqld]区域中加上\ndefault-time_zone = '+8:00'\n# /etc/init.d/mysqld restart  ##重启mysql使新时区生效\n```\n\n","slug":"mysql/mysql安装","published":1,"updated":"2020-09-20T03:22:55.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblmr003p4tje5eoqkc08","content":"<h1 id=\"添加-MySQL-YUM-源\"><a href=\"#添加-MySQL-YUM-源\" class=\"headerlink\" title=\"添加 MySQL YUM 源\"></a>添加 MySQL YUM 源</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$wget</span> <span class=\"string\">'https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm'</span></span><br><span class=\"line\"><span class=\"variable\">$sudo</span> rpm -Uvh mysql57-community-release-el7-11.noarch.rpm</span><br><span class=\"line\"><span class=\"variable\">$yum</span> repolist all | grep mysql</span><br><span class=\"line\">mysql-connectors-community/x86_64 MySQL Connectors Community                  36</span><br><span class=\"line\">mysql-tools-community/x86_64      MySQL Tools Community                       47</span><br><span class=\"line\">mysql57-community/x86_64          MySQL 5.7 Community Server                 187</span><br></pre></td></tr></table></figure>\n<h1 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 安装最新版</span><br><span class=\"line\">$sudo yum install mysql-community-server</span><br><span class=\"line\">$ sudo yum install mysql   ## 安装客户端</span><br><span class=\"line\">## 安装老版本</span><br><span class=\"line\">## 1. yum-config-manager</span><br><span class=\"line\">$ sudo dnf config-manager --disable mysql57-community</span><br><span class=\"line\">$ sudo dnf config-manager --enable mysql56-community</span><br><span class=\"line\">$ yum repolist | grep mysql</span><br><span class=\"line\">mysql-connectors-community/x86_64 MySQL Connectors Community                  36</span><br><span class=\"line\">mysql-tools-community/x86_64      MySQL Tools Community                       47</span><br><span class=\"line\">mysql56-community/x86_64          MySQL 5.6 Community Server                 327</span><br><span class=\"line\">## 2. 直接修改 /etc/yum.repos.d/mysql-community.repo</span><br><span class=\"line\"># Enable to use MySQL 5.6</span><br><span class=\"line\">[mysql56-community]</span><br><span class=\"line\">name=MySQL 5.6 Community Server</span><br><span class=\"line\">baseurl=http://repo.mysql.com/yum/mysql-5.6-community/el/7/$basearch/</span><br><span class=\"line\">enabled=1 #表示当前版本是安装</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br><span class=\"line\">[mysql57-community]</span><br><span class=\"line\">name=MySQL 5.7 Community Server</span><br><span class=\"line\">baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/</span><br><span class=\"line\">enabled=0 #默认这个是 1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></table></figure>\n<h1 id=\"启动Mysql\"><a href=\"#启动Mysql\" class=\"headerlink\" title=\"启动Mysql\"></a>启动Mysql</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sudo service mysqld start </span><br><span class=\"line\">$sudo systemctl start mysqld #CentOS 7</span><br><span class=\"line\">$sudo systemctl status mysqld</span><br><span class=\"line\">● mysqld.service - MySQL Community Server</span><br><span class=\"line\">   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Sat 2017-05-27 12:56:26 CST; 15s ago</span><br><span class=\"line\">  Process: 2482 ExecStartPost=/usr/bin/mysql-systemd-start post (code=exited, status=0/SUCCESS)</span><br><span class=\"line\">  Process: 2421 ExecStartPre=/usr/bin/mysql-systemd-start pre (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 2481 (mysqld_safe)</span><br><span class=\"line\">   CGroup: /system.slice/mysqld.service</span><br><span class=\"line\">           ├─2481 /bin/sh /usr/bin/mysqld_safe --basedir=/usr</span><br><span class=\"line\">           └─2647 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql --plugin-dir=/usr/...</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 获取临时密码</span><br><span class=\"line\">sudo grep &apos;temporary password&apos; /var/log/mysqld.log</span><br><span class=\"line\">$ mysql -uroot -p  #输入查看到的密码</span><br><span class=\"line\">mysql&gt; ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;MyNewPass4!&apos;;</span><br></pre></td></tr></table></figure>\n<p>mysql的密码存在安全等级</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; mysql_secure_installation</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SHOW VARIABLES LIKE &apos;validate_password%&apos;;</span><br></pre></td></tr></table></figure>\n<p><strong>validate_password_number_count</strong>参数是密码中至少含有的数字个数，当密码策略是MEDIUM或以上时生效。</p>\n<p><strong>validate_password_special_char_count</strong>参数是密码中非英文数字等特殊字符的个数，当密码策略是MEDIUM或以上时生效。</p>\n<p><strong>validate_password_mixed_case_count</strong>参数是密码中英文字符大小写的个数，当密码策略是MEDIUM或以上时生效。</p>\n<p><strong>validate_password_length</strong>参数是密码的长度，这个参数由下面的公式生成</p>\n<p>validate_password_number_count+ validate_password_special_char_count+ (2 * validate_password_mixed_case_count)</p>\n<p><strong>validate_password_dictionary_file</strong>参数是指定密码验证的字典文件路径。</p>\n<p><strong>validate_password_policy</strong>这个参数可以设为0、1、2，分别代表从低到高的密码强度，此参数的默认值为1，如果想将密码强度改弱，则更改此参数为0。</p>\n<h2 id=\"修改密码策略\"><a href=\"#修改密码策略\" class=\"headerlink\" title=\"修改密码策略\"></a>修改密码策略</h2><p>更改密码策略为LOW  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; set global validate_password_policy=0;</span><br></pre></td></tr></table></figure>\n<p>更改密码长度  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; set global validate_password_length=0;</span><br></pre></td></tr></table></figure>\n<h2 id=\"安全设置\"><a href=\"#安全设置\" class=\"headerlink\" title=\"安全设置\"></a>安全设置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 会提示设置5个关键位置</span><br><span class=\"line\">## 设置 root 密码</span><br><span class=\"line\">## 禁止 root 账号远程登录</span><br><span class=\"line\">## 禁止匿名账号（anonymous）登录</span><br><span class=\"line\">## 删除测试库</span><br><span class=\"line\">## 是否确认修改</span><br><span class=\"line\">$ mysql_secure_installation</span><br></pre></td></tr></table></figure>\n<h1 id=\"安装三方插件\"><a href=\"#安装三方插件\" class=\"headerlink\" title=\"安装三方插件\"></a>安装三方插件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum --disablerepo=\\* --enablerepo=&apos;mysql*-community*&apos; list available</span><br></pre></td></tr></table></figure>\n<h1 id=\"修改编码\"><a href=\"#修改编码\" class=\"headerlink\" title=\"修改编码\"></a>修改编码</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## /etc/my.cnf</span><br><span class=\"line\">[client]</span><br><span class=\"line\">default-character-set = utf8</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">default-storage-engine = INNODB</span><br><span class=\"line\">character-set-server = utf8</span><br><span class=\"line\">collation-server = utf8_general_ci #不区分大小写</span><br><span class=\"line\">collation-server =  utf8_bin #区分大小写</span><br><span class=\"line\">collation-server = utf8_unicode_ci #比 utf8_general_ci 更准确</span><br></pre></td></tr></table></figure>\n<h1 id=\"修改服务器时间\"><a href=\"#修改服务器时间\" class=\"headerlink\" title=\"修改服务器时间\"></a>修改服务器时间</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## mysql 中默认的时间戳是 UTC 时间，需要改为服务器时间的话官网提供了 3 种方式</span><br><span class=\"line\">$ mysql_tzinfo_to_sql tz_dir</span><br><span class=\"line\">$ mysql_tzinfo_to_sql tz_file tz_name</span><br><span class=\"line\">$ mysql_tzinfo_to_sql --leap tz_file</span><br><span class=\"line\">## tz_dir 代表服务器时间数据库，CentOS 7 中默认的目录为 /usr/share/zoneinfo ，tz_name 为具体的时区。如果设置的时区需要闰秒，则使用 --leap，具体的用法如下：</span><br><span class=\"line\">$ mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root -p mysql</span><br><span class=\"line\">$ mysql_tzinfo_to_sql tz_file tz_name | mysql -u root mysql</span><br><span class=\"line\">$ mysql_tzinfo_to_sql --leap tz_file | mysql -u root mysql</span><br><span class=\"line\">&gt; set global time_zone = &apos;+8:00&apos;;  ##修改mysql全局时区为北京时间，即我们所在的东8区</span><br><span class=\"line\">&gt; set time_zone = &apos;+8:00&apos;;  ##修改当前会话时区</span><br><span class=\"line\">&gt; flush privileges;  #立即生效</span><br><span class=\"line\">## 通过修改my.cnf配置文件来修改时区</span><br><span class=\"line\"># vim /etc/my.cnf  ##在[mysqld]区域中加上</span><br><span class=\"line\">default-time_zone = &apos;+8:00&apos;</span><br><span class=\"line\"># /etc/init.d/mysqld restart  ##重启mysql使新时区生效</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"添加-MySQL-YUM-源\"><a href=\"#添加-MySQL-YUM-源\" class=\"headerlink\" title=\"添加 MySQL YUM 源\"></a>添加 MySQL YUM 源</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$wget</span> <span class=\"string\">'https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm'</span></span><br><span class=\"line\"><span class=\"variable\">$sudo</span> rpm -Uvh mysql57-community-release-el7-11.noarch.rpm</span><br><span class=\"line\"><span class=\"variable\">$yum</span> repolist all | grep mysql</span><br><span class=\"line\">mysql-connectors-community/x86_64 MySQL Connectors Community                  36</span><br><span class=\"line\">mysql-tools-community/x86_64      MySQL Tools Community                       47</span><br><span class=\"line\">mysql57-community/x86_64          MySQL 5.7 Community Server                 187</span><br></pre></td></tr></table></figure>\n<h1 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 安装最新版</span><br><span class=\"line\">$sudo yum install mysql-community-server</span><br><span class=\"line\">$ sudo yum install mysql   ## 安装客户端</span><br><span class=\"line\">## 安装老版本</span><br><span class=\"line\">## 1. yum-config-manager</span><br><span class=\"line\">$ sudo dnf config-manager --disable mysql57-community</span><br><span class=\"line\">$ sudo dnf config-manager --enable mysql56-community</span><br><span class=\"line\">$ yum repolist | grep mysql</span><br><span class=\"line\">mysql-connectors-community/x86_64 MySQL Connectors Community                  36</span><br><span class=\"line\">mysql-tools-community/x86_64      MySQL Tools Community                       47</span><br><span class=\"line\">mysql56-community/x86_64          MySQL 5.6 Community Server                 327</span><br><span class=\"line\">## 2. 直接修改 /etc/yum.repos.d/mysql-community.repo</span><br><span class=\"line\"># Enable to use MySQL 5.6</span><br><span class=\"line\">[mysql56-community]</span><br><span class=\"line\">name=MySQL 5.6 Community Server</span><br><span class=\"line\">baseurl=http://repo.mysql.com/yum/mysql-5.6-community/el/7/$basearch/</span><br><span class=\"line\">enabled=1 #表示当前版本是安装</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br><span class=\"line\">[mysql57-community]</span><br><span class=\"line\">name=MySQL 5.7 Community Server</span><br><span class=\"line\">baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/</span><br><span class=\"line\">enabled=0 #默认这个是 1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></table></figure>\n<h1 id=\"启动Mysql\"><a href=\"#启动Mysql\" class=\"headerlink\" title=\"启动Mysql\"></a>启动Mysql</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sudo service mysqld start </span><br><span class=\"line\">$sudo systemctl start mysqld #CentOS 7</span><br><span class=\"line\">$sudo systemctl status mysqld</span><br><span class=\"line\">● mysqld.service - MySQL Community Server</span><br><span class=\"line\">   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Sat 2017-05-27 12:56:26 CST; 15s ago</span><br><span class=\"line\">  Process: 2482 ExecStartPost=/usr/bin/mysql-systemd-start post (code=exited, status=0/SUCCESS)</span><br><span class=\"line\">  Process: 2421 ExecStartPre=/usr/bin/mysql-systemd-start pre (code=exited, status=0/SUCCESS)</span><br><span class=\"line\"> Main PID: 2481 (mysqld_safe)</span><br><span class=\"line\">   CGroup: /system.slice/mysqld.service</span><br><span class=\"line\">           ├─2481 /bin/sh /usr/bin/mysqld_safe --basedir=/usr</span><br><span class=\"line\">           └─2647 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql --plugin-dir=/usr/...</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 获取临时密码</span><br><span class=\"line\">sudo grep &apos;temporary password&apos; /var/log/mysqld.log</span><br><span class=\"line\">$ mysql -uroot -p  #输入查看到的密码</span><br><span class=\"line\">mysql&gt; ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;MyNewPass4!&apos;;</span><br></pre></td></tr></table></figure>\n<p>mysql的密码存在安全等级</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; mysql_secure_installation</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SHOW VARIABLES LIKE &apos;validate_password%&apos;;</span><br></pre></td></tr></table></figure>\n<p><strong>validate_password_number_count</strong>参数是密码中至少含有的数字个数，当密码策略是MEDIUM或以上时生效。</p>\n<p><strong>validate_password_special_char_count</strong>参数是密码中非英文数字等特殊字符的个数，当密码策略是MEDIUM或以上时生效。</p>\n<p><strong>validate_password_mixed_case_count</strong>参数是密码中英文字符大小写的个数，当密码策略是MEDIUM或以上时生效。</p>\n<p><strong>validate_password_length</strong>参数是密码的长度，这个参数由下面的公式生成</p>\n<p>validate_password_number_count+ validate_password_special_char_count+ (2 * validate_password_mixed_case_count)</p>\n<p><strong>validate_password_dictionary_file</strong>参数是指定密码验证的字典文件路径。</p>\n<p><strong>validate_password_policy</strong>这个参数可以设为0、1、2，分别代表从低到高的密码强度，此参数的默认值为1，如果想将密码强度改弱，则更改此参数为0。</p>\n<h2 id=\"修改密码策略\"><a href=\"#修改密码策略\" class=\"headerlink\" title=\"修改密码策略\"></a>修改密码策略</h2><p>更改密码策略为LOW  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; set global validate_password_policy=0;</span><br></pre></td></tr></table></figure>\n<p>更改密码长度  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; set global validate_password_length=0;</span><br></pre></td></tr></table></figure>\n<h2 id=\"安全设置\"><a href=\"#安全设置\" class=\"headerlink\" title=\"安全设置\"></a>安全设置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 会提示设置5个关键位置</span><br><span class=\"line\">## 设置 root 密码</span><br><span class=\"line\">## 禁止 root 账号远程登录</span><br><span class=\"line\">## 禁止匿名账号（anonymous）登录</span><br><span class=\"line\">## 删除测试库</span><br><span class=\"line\">## 是否确认修改</span><br><span class=\"line\">$ mysql_secure_installation</span><br></pre></td></tr></table></figure>\n<h1 id=\"安装三方插件\"><a href=\"#安装三方插件\" class=\"headerlink\" title=\"安装三方插件\"></a>安装三方插件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum --disablerepo=\\* --enablerepo=&apos;mysql*-community*&apos; list available</span><br></pre></td></tr></table></figure>\n<h1 id=\"修改编码\"><a href=\"#修改编码\" class=\"headerlink\" title=\"修改编码\"></a>修改编码</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## /etc/my.cnf</span><br><span class=\"line\">[client]</span><br><span class=\"line\">default-character-set = utf8</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">default-storage-engine = INNODB</span><br><span class=\"line\">character-set-server = utf8</span><br><span class=\"line\">collation-server = utf8_general_ci #不区分大小写</span><br><span class=\"line\">collation-server =  utf8_bin #区分大小写</span><br><span class=\"line\">collation-server = utf8_unicode_ci #比 utf8_general_ci 更准确</span><br></pre></td></tr></table></figure>\n<h1 id=\"修改服务器时间\"><a href=\"#修改服务器时间\" class=\"headerlink\" title=\"修改服务器时间\"></a>修改服务器时间</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## mysql 中默认的时间戳是 UTC 时间，需要改为服务器时间的话官网提供了 3 种方式</span><br><span class=\"line\">$ mysql_tzinfo_to_sql tz_dir</span><br><span class=\"line\">$ mysql_tzinfo_to_sql tz_file tz_name</span><br><span class=\"line\">$ mysql_tzinfo_to_sql --leap tz_file</span><br><span class=\"line\">## tz_dir 代表服务器时间数据库，CentOS 7 中默认的目录为 /usr/share/zoneinfo ，tz_name 为具体的时区。如果设置的时区需要闰秒，则使用 --leap，具体的用法如下：</span><br><span class=\"line\">$ mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root -p mysql</span><br><span class=\"line\">$ mysql_tzinfo_to_sql tz_file tz_name | mysql -u root mysql</span><br><span class=\"line\">$ mysql_tzinfo_to_sql --leap tz_file | mysql -u root mysql</span><br><span class=\"line\">&gt; set global time_zone = &apos;+8:00&apos;;  ##修改mysql全局时区为北京时间，即我们所在的东8区</span><br><span class=\"line\">&gt; set time_zone = &apos;+8:00&apos;;  ##修改当前会话时区</span><br><span class=\"line\">&gt; flush privileges;  #立即生效</span><br><span class=\"line\">## 通过修改my.cnf配置文件来修改时区</span><br><span class=\"line\"># vim /etc/my.cnf  ##在[mysqld]区域中加上</span><br><span class=\"line\">default-time_zone = &apos;+8:00&apos;</span><br><span class=\"line\"># /etc/init.d/mysqld restart  ##重启mysql使新时区生效</span><br></pre></td></tr></table></figure>\n"},{"title":"java动态代理","date":"2020-09-20T04:00:00.000Z","_content":"\n# 自己的基本理解\n\n1、mybtis的核心代理类是MapperProxy,这是mybatis的代理类，具体的逻辑可以从这里看下去，前面是相关配置文件的读取。\n\n```java\n@Override\n  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n    try {\n      if (Object.class.equals(method.getDeclaringClass())) {\n        return method.invoke(this, args);\n      } else {\n     //调用XxxMapper接口自定义的方法，进行代理\n    //首先将当前被调用的方法Method构造成一个MapperMethod对象，然后掉用其execute方法真正的开始执行。\n        return cachedInvoker(method).invoke(proxy, method, args, sqlSession);\n      }\n    } catch (Throwable t) {\n      throw ExceptionUtil.unwrapThrowable(t);\n    }\n  }\n```\n\n2、接着使用MethodInvoker的实现类去执行，核心是实现类中的一个变量就是MapperMethod，真正执行的是这个类，他包含我们需要的所有内容\n\n```java\nprivate static class PlainMethodInvoker implements MapperMethodInvoker {\n    private final MapperMethod mapperMethod;\n\n    public PlainMethodInvoker(MapperMethod mapperMethod) {\n      super();\n      this.mapperMethod = mapperMethod;\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args, SqlSession sqlSession) throws Throwable {\n      return mapperMethod.execute(sqlSession, args);\n    }\n  }\n```\n\n3、执行MapperMethod的execute方法就开始执行我们的的相关逻辑,获取statement,使用sqlSession去执行相关的sql。\n\n```java\n  public Object execute(SqlSession sqlSession, Object[] args) {\n    Object result;\n    switch (command.getType()) {\n      case INSERT: {\n        Object param = method.convertArgsToSqlCommandParam(args);\n        result = rowCountResult(sqlSession.insert(command.getName(), param));\n        break;\n      }\n      case UPDATE: {\n        Object param = method.convertArgsToSqlCommandParam(args);\n        result = rowCountResult(sqlSession.update(command.getName(), param));\n        break;\n      }\n      case DELETE: {\n        Object param = method.convertArgsToSqlCommandParam(args);\n        result = rowCountResult(sqlSession.delete(command.getName(), param));\n        break;\n      }\n      case SELECT:\n        if (method.returnsVoid() && method.hasResultHandler()) {\n          executeWithResultHandler(sqlSession, args);\n          result = null;\n        } else if (method.returnsMany()) {\n          result = executeForMany(sqlSession, args);\n        } else if (method.returnsMap()) {\n          result = executeForMap(sqlSession, args);\n        } else if (method.returnsCursor()) {\n          result = executeForCursor(sqlSession, args);\n        } else {\n          Object param = method.convertArgsToSqlCommandParam(args);\n          result = sqlSession.selectOne(command.getName(), param);\n          if (method.returnsOptional()\n              && (result == null || !method.getReturnType().equals(result.getClass()))) {\n            result = Optional.ofNullable(result);\n          }\n        }\n        break;\n      case FLUSH:\n        result = sqlSession.flushStatements();\n        break;\n      default:\n        throw new BindingException(\"Unknown execution method for: \" + command.getName());\n    }\n    if (result == null && method.getReturnType().isPrimitive() && !method.returnsVoid()) {\n      throw new BindingException(\"Mapper method '\" + command.getName()\n          + \" attempted to return null from a method with a primitive return type (\" + method.getReturnType() + \").\");\n    }\n    return result;\n  }\n```\n\n","source":"_posts/mybatis/mybatis源码阅读.md","raw":"---\ntitle: java动态代理\ndate: 2020-9-20 12:00:00\n---\n\n# 自己的基本理解\n\n1、mybtis的核心代理类是MapperProxy,这是mybatis的代理类，具体的逻辑可以从这里看下去，前面是相关配置文件的读取。\n\n```java\n@Override\n  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n    try {\n      if (Object.class.equals(method.getDeclaringClass())) {\n        return method.invoke(this, args);\n      } else {\n     //调用XxxMapper接口自定义的方法，进行代理\n    //首先将当前被调用的方法Method构造成一个MapperMethod对象，然后掉用其execute方法真正的开始执行。\n        return cachedInvoker(method).invoke(proxy, method, args, sqlSession);\n      }\n    } catch (Throwable t) {\n      throw ExceptionUtil.unwrapThrowable(t);\n    }\n  }\n```\n\n2、接着使用MethodInvoker的实现类去执行，核心是实现类中的一个变量就是MapperMethod，真正执行的是这个类，他包含我们需要的所有内容\n\n```java\nprivate static class PlainMethodInvoker implements MapperMethodInvoker {\n    private final MapperMethod mapperMethod;\n\n    public PlainMethodInvoker(MapperMethod mapperMethod) {\n      super();\n      this.mapperMethod = mapperMethod;\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args, SqlSession sqlSession) throws Throwable {\n      return mapperMethod.execute(sqlSession, args);\n    }\n  }\n```\n\n3、执行MapperMethod的execute方法就开始执行我们的的相关逻辑,获取statement,使用sqlSession去执行相关的sql。\n\n```java\n  public Object execute(SqlSession sqlSession, Object[] args) {\n    Object result;\n    switch (command.getType()) {\n      case INSERT: {\n        Object param = method.convertArgsToSqlCommandParam(args);\n        result = rowCountResult(sqlSession.insert(command.getName(), param));\n        break;\n      }\n      case UPDATE: {\n        Object param = method.convertArgsToSqlCommandParam(args);\n        result = rowCountResult(sqlSession.update(command.getName(), param));\n        break;\n      }\n      case DELETE: {\n        Object param = method.convertArgsToSqlCommandParam(args);\n        result = rowCountResult(sqlSession.delete(command.getName(), param));\n        break;\n      }\n      case SELECT:\n        if (method.returnsVoid() && method.hasResultHandler()) {\n          executeWithResultHandler(sqlSession, args);\n          result = null;\n        } else if (method.returnsMany()) {\n          result = executeForMany(sqlSession, args);\n        } else if (method.returnsMap()) {\n          result = executeForMap(sqlSession, args);\n        } else if (method.returnsCursor()) {\n          result = executeForCursor(sqlSession, args);\n        } else {\n          Object param = method.convertArgsToSqlCommandParam(args);\n          result = sqlSession.selectOne(command.getName(), param);\n          if (method.returnsOptional()\n              && (result == null || !method.getReturnType().equals(result.getClass()))) {\n            result = Optional.ofNullable(result);\n          }\n        }\n        break;\n      case FLUSH:\n        result = sqlSession.flushStatements();\n        break;\n      default:\n        throw new BindingException(\"Unknown execution method for: \" + command.getName());\n    }\n    if (result == null && method.getReturnType().isPrimitive() && !method.returnsVoid()) {\n      throw new BindingException(\"Mapper method '\" + command.getName()\n          + \" attempted to return null from a method with a primitive return type (\" + method.getReturnType() + \").\");\n    }\n    return result;\n  }\n```\n\n","slug":"mybatis/mybatis源码阅读","published":1,"updated":"2020-09-20T04:16:45.304Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblms003r4tjebh5k9vnv","content":"<h1 id=\"自己的基本理解\"><a href=\"#自己的基本理解\" class=\"headerlink\" title=\"自己的基本理解\"></a>自己的基本理解</h1><p>1、mybtis的核心代理类是MapperProxy,这是mybatis的代理类，具体的逻辑可以从这里看下去，前面是相关配置文件的读取。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> method.invoke(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">//调用XxxMapper接口自定义的方法，进行代理</span></span><br><span class=\"line\">    <span class=\"comment\">//首先将当前被调用的方法Method构造成一个MapperMethod对象，然后掉用其execute方法真正的开始执行。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cachedInvoker(method).invoke(proxy, method, args, sqlSession);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> ExceptionUtil.unwrapThrowable(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>2、接着使用MethodInvoker的实现类去执行，核心是实现类中的一个变量就是MapperMethod，真正执行的是这个类，他包含我们需要的所有内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlainMethodInvoker</span> <span class=\"keyword\">implements</span> <span class=\"title\">MapperMethodInvoker</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MapperMethod mapperMethod;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PlainMethodInvoker</span><span class=\"params\">(MapperMethod mapperMethod)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>();</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.mapperMethod = mapperMethod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args, SqlSession sqlSession)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mapperMethod.execute(sqlSession, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>3、执行MapperMethod的execute方法就开始执行我们的的相关逻辑,获取statement,使用sqlSession去执行相关的sql。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">execute</span><span class=\"params\">(SqlSession sqlSession, Object[] args)</span> </span>&#123;</span><br><span class=\"line\">  Object result;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (command.getType()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> INSERT: &#123;</span><br><span class=\"line\">      Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class=\"line\">      result = rowCountResult(sqlSession.insert(command.getName(), param));</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> UPDATE: &#123;</span><br><span class=\"line\">      Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class=\"line\">      result = rowCountResult(sqlSession.update(command.getName(), param));</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DELETE: &#123;</span><br><span class=\"line\">      Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class=\"line\">      result = rowCountResult(sqlSession.delete(command.getName(), param));</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> SELECT:</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (method.returnsVoid() &amp;&amp; method.hasResultHandler()) &#123;</span><br><span class=\"line\">        executeWithResultHandler(sqlSession, args);</span><br><span class=\"line\">        result = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.returnsMany()) &#123;</span><br><span class=\"line\">        result = executeForMany(sqlSession, args);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.returnsMap()) &#123;</span><br><span class=\"line\">        result = executeForMap(sqlSession, args);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.returnsCursor()) &#123;</span><br><span class=\"line\">        result = executeForCursor(sqlSession, args);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class=\"line\">        result = sqlSession.selectOne(command.getName(), param);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (method.returnsOptional()</span><br><span class=\"line\">            &amp;&amp; (result == <span class=\"keyword\">null</span> || !method.getReturnType().equals(result.getClass()))) &#123;</span><br><span class=\"line\">          result = Optional.ofNullable(result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> FLUSH:</span><br><span class=\"line\">      result = sqlSession.flushStatements();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BindingException(<span class=\"string\">\"Unknown execution method for: \"</span> + command.getName());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (result == <span class=\"keyword\">null</span> &amp;&amp; method.getReturnType().isPrimitive() &amp;&amp; !method.returnsVoid()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BindingException(<span class=\"string\">\"Mapper method '\"</span> + command.getName()</span><br><span class=\"line\">        + <span class=\"string\">\" attempted to return null from a method with a primitive return type (\"</span> + method.getReturnType() + <span class=\"string\">\").\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"自己的基本理解\"><a href=\"#自己的基本理解\" class=\"headerlink\" title=\"自己的基本理解\"></a>自己的基本理解</h1><p>1、mybtis的核心代理类是MapperProxy,这是mybatis的代理类，具体的逻辑可以从这里看下去，前面是相关配置文件的读取。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> method.invoke(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">//调用XxxMapper接口自定义的方法，进行代理</span></span><br><span class=\"line\">    <span class=\"comment\">//首先将当前被调用的方法Method构造成一个MapperMethod对象，然后掉用其execute方法真正的开始执行。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cachedInvoker(method).invoke(proxy, method, args, sqlSession);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> ExceptionUtil.unwrapThrowable(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>2、接着使用MethodInvoker的实现类去执行，核心是实现类中的一个变量就是MapperMethod，真正执行的是这个类，他包含我们需要的所有内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlainMethodInvoker</span> <span class=\"keyword\">implements</span> <span class=\"title\">MapperMethodInvoker</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MapperMethod mapperMethod;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PlainMethodInvoker</span><span class=\"params\">(MapperMethod mapperMethod)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>();</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.mapperMethod = mapperMethod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args, SqlSession sqlSession)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mapperMethod.execute(sqlSession, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>3、执行MapperMethod的execute方法就开始执行我们的的相关逻辑,获取statement,使用sqlSession去执行相关的sql。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">execute</span><span class=\"params\">(SqlSession sqlSession, Object[] args)</span> </span>&#123;</span><br><span class=\"line\">  Object result;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (command.getType()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> INSERT: &#123;</span><br><span class=\"line\">      Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class=\"line\">      result = rowCountResult(sqlSession.insert(command.getName(), param));</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> UPDATE: &#123;</span><br><span class=\"line\">      Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class=\"line\">      result = rowCountResult(sqlSession.update(command.getName(), param));</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DELETE: &#123;</span><br><span class=\"line\">      Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class=\"line\">      result = rowCountResult(sqlSession.delete(command.getName(), param));</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> SELECT:</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (method.returnsVoid() &amp;&amp; method.hasResultHandler()) &#123;</span><br><span class=\"line\">        executeWithResultHandler(sqlSession, args);</span><br><span class=\"line\">        result = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.returnsMany()) &#123;</span><br><span class=\"line\">        result = executeForMany(sqlSession, args);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.returnsMap()) &#123;</span><br><span class=\"line\">        result = executeForMap(sqlSession, args);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.returnsCursor()) &#123;</span><br><span class=\"line\">        result = executeForCursor(sqlSession, args);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class=\"line\">        result = sqlSession.selectOne(command.getName(), param);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (method.returnsOptional()</span><br><span class=\"line\">            &amp;&amp; (result == <span class=\"keyword\">null</span> || !method.getReturnType().equals(result.getClass()))) &#123;</span><br><span class=\"line\">          result = Optional.ofNullable(result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> FLUSH:</span><br><span class=\"line\">      result = sqlSession.flushStatements();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BindingException(<span class=\"string\">\"Unknown execution method for: \"</span> + command.getName());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (result == <span class=\"keyword\">null</span> &amp;&amp; method.getReturnType().isPrimitive() &amp;&amp; !method.returnsVoid()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BindingException(<span class=\"string\">\"Mapper method '\"</span> + command.getName()</span><br><span class=\"line\">        + <span class=\"string\">\" attempted to return null from a method with a primitive return type (\"</span> + method.getReturnType() + <span class=\"string\">\").\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"mysql自带的数据库","date":"2019-07-27T10:06:05.000Z","_content":"\n#  information_schema\n\n1. SCHEMATA表：提供了当前mysql实例中所有数据库的信息。是show databases的结果取之此表。\n\n2. TABLES表：提供了关于数据库中的表的信息（包括视图）。详细表述了某个表属于哪个schema，表类型，表引擎，创建时间等信息。是show tables from schemaname的　　结果取之此表。\n\n3. COLUMNS表：提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息。是show columns from schemaname.tablename的结果取之此表。\n\n4. STATISTICS表：提供了关于表索引的信息。是show index from schemaname.tablename的结果取之此表。\n\n5. USER_PRIVILEGES（用户权限）表：给出了关于全程权限的信息。该信息源自mysql.user授权表。是非标准表。\n\n6. SCHEMA_PRIVILEGES（方案权限）表：给出了关于方案（数据库）权限的信息。该信息来自mysql.db授权表。是非标准表。\n\n7. TABLE_PRIVILEGES（表权限）表：给出了关于表权限的信息。该信息源自mysql.tables_priv授权表。是非标准表。\n\n8. COLUMN_PRIVILEGES（列权限）表：给出了关于列权限的信息。该信息源自mysql.columns_priv授权表。是非标准表。\n\n9. CHARACTER_SETS（字符集）表：提供了mysql实例可用字符集的信息。是SHOW CHARACTER SET结果集取之此表。\n\n10. COLLATIONS表：提供了关于各字符集的对照信息。\n\n11. COLLATION_CHARACTER_SET_APPLICABILITY表：指明了可用于校对的字符集。这些列等效于SHOW COLLATION的前两个显示字段。\n\n12. TABLE_CONSTRAINTS表：描述了存在约束的表。以及表的约束类型。\n\n13. KEY_COLUMN_USAGE表：描述了具有约束的键列。\n\n14. ROUTINES表：提供了关于存储子程序（存储程序和函数）的信息。此时，ROUTINES表不包含自定义函数（UDF）。名为“mysql.proc name”的列指明了对应于　　　　　　　INFORMATION_SCHEMA.ROUTINES表的mysql.proc表列。\n\n15. VIEWS表：给出了关于数据库中的视图的信息。需要有show views权限，否则无法查看视图信息。\n\n16. TRIGGERS表：提供了关于触发程序的信息。必须有super权限才能查看该表。\n\n# mysql\n\n\n\n# performance_schema\n\n 需要设置参数： performance_schema 才可以启动该功能\n\n按照相关的标准对进行的事件统计表, 表也是只读的，只能turcate\n\n　　events_waits_summary_by_instance             \n\n　　events_waits_summary_by_thread_by_event_name \n\n　　events_waits_summary_global_by_event_name    \n\n　　file_summary_by_event_name                   \n\n　　file_summary_by_instance   \n\n- setup_consumers 描述各种事件\n\n- setup_instruments 描述这个数据库下的表名以及是否开启监控。\n\n- setup_timers   描述 监控选项已经采样频率的时间间隔\n\n- events_waits_current  记录当前正在发生的等待事件，这个表是只读的表，不能update ，delete ，但是可以truncate\n\n- 性能历史表 ：events_waits_history  只保留每个线程（thread） 的最近的10个事件\n\n- 性能历史表 ：events_waits_history_long 记录最近的10000个事件  标准的先进先出（FIFO) 这俩表也是只读表，只能truncate\n\n# sakila\n\n　　这是一个MySQL的一个样本数据库，里边都是一些例子表。\n\n","source":"_posts/mysql/mysql自带的数据库.md","raw":"---\ntitle: mysql自带的数据库\ndate: 2019-07-27 18:06:05\ntags:\n- mysql\n---\n\n#  information_schema\n\n1. SCHEMATA表：提供了当前mysql实例中所有数据库的信息。是show databases的结果取之此表。\n\n2. TABLES表：提供了关于数据库中的表的信息（包括视图）。详细表述了某个表属于哪个schema，表类型，表引擎，创建时间等信息。是show tables from schemaname的　　结果取之此表。\n\n3. COLUMNS表：提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息。是show columns from schemaname.tablename的结果取之此表。\n\n4. STATISTICS表：提供了关于表索引的信息。是show index from schemaname.tablename的结果取之此表。\n\n5. USER_PRIVILEGES（用户权限）表：给出了关于全程权限的信息。该信息源自mysql.user授权表。是非标准表。\n\n6. SCHEMA_PRIVILEGES（方案权限）表：给出了关于方案（数据库）权限的信息。该信息来自mysql.db授权表。是非标准表。\n\n7. TABLE_PRIVILEGES（表权限）表：给出了关于表权限的信息。该信息源自mysql.tables_priv授权表。是非标准表。\n\n8. COLUMN_PRIVILEGES（列权限）表：给出了关于列权限的信息。该信息源自mysql.columns_priv授权表。是非标准表。\n\n9. CHARACTER_SETS（字符集）表：提供了mysql实例可用字符集的信息。是SHOW CHARACTER SET结果集取之此表。\n\n10. COLLATIONS表：提供了关于各字符集的对照信息。\n\n11. COLLATION_CHARACTER_SET_APPLICABILITY表：指明了可用于校对的字符集。这些列等效于SHOW COLLATION的前两个显示字段。\n\n12. TABLE_CONSTRAINTS表：描述了存在约束的表。以及表的约束类型。\n\n13. KEY_COLUMN_USAGE表：描述了具有约束的键列。\n\n14. ROUTINES表：提供了关于存储子程序（存储程序和函数）的信息。此时，ROUTINES表不包含自定义函数（UDF）。名为“mysql.proc name”的列指明了对应于　　　　　　　INFORMATION_SCHEMA.ROUTINES表的mysql.proc表列。\n\n15. VIEWS表：给出了关于数据库中的视图的信息。需要有show views权限，否则无法查看视图信息。\n\n16. TRIGGERS表：提供了关于触发程序的信息。必须有super权限才能查看该表。\n\n# mysql\n\n\n\n# performance_schema\n\n 需要设置参数： performance_schema 才可以启动该功能\n\n按照相关的标准对进行的事件统计表, 表也是只读的，只能turcate\n\n　　events_waits_summary_by_instance             \n\n　　events_waits_summary_by_thread_by_event_name \n\n　　events_waits_summary_global_by_event_name    \n\n　　file_summary_by_event_name                   \n\n　　file_summary_by_instance   \n\n- setup_consumers 描述各种事件\n\n- setup_instruments 描述这个数据库下的表名以及是否开启监控。\n\n- setup_timers   描述 监控选项已经采样频率的时间间隔\n\n- events_waits_current  记录当前正在发生的等待事件，这个表是只读的表，不能update ，delete ，但是可以truncate\n\n- 性能历史表 ：events_waits_history  只保留每个线程（thread） 的最近的10个事件\n\n- 性能历史表 ：events_waits_history_long 记录最近的10000个事件  标准的先进先出（FIFO) 这俩表也是只读表，只能truncate\n\n# sakila\n\n　　这是一个MySQL的一个样本数据库，里边都是一些例子表。\n\n","slug":"mysql/mysql自带的数据库","published":1,"updated":"2019-07-31T02:45:43.965Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblmt003u4tje6wye4jjn","content":"<h1 id=\"information-schema\"><a href=\"#information-schema\" class=\"headerlink\" title=\"information_schema\"></a>information_schema</h1><ol>\n<li><p>SCHEMATA表：提供了当前mysql实例中所有数据库的信息。是show databases的结果取之此表。</p>\n</li>\n<li><p>TABLES表：提供了关于数据库中的表的信息（包括视图）。详细表述了某个表属于哪个schema，表类型，表引擎，创建时间等信息。是show tables from schemaname的　　结果取之此表。</p>\n</li>\n<li><p>COLUMNS表：提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息。是show columns from schemaname.tablename的结果取之此表。</p>\n</li>\n<li><p>STATISTICS表：提供了关于表索引的信息。是show index from schemaname.tablename的结果取之此表。</p>\n</li>\n<li><p>USER_PRIVILEGES（用户权限）表：给出了关于全程权限的信息。该信息源自mysql.user授权表。是非标准表。</p>\n</li>\n<li><p>SCHEMA_PRIVILEGES（方案权限）表：给出了关于方案（数据库）权限的信息。该信息来自mysql.db授权表。是非标准表。</p>\n</li>\n<li><p>TABLE_PRIVILEGES（表权限）表：给出了关于表权限的信息。该信息源自mysql.tables_priv授权表。是非标准表。</p>\n</li>\n<li><p>COLUMN_PRIVILEGES（列权限）表：给出了关于列权限的信息。该信息源自mysql.columns_priv授权表。是非标准表。</p>\n</li>\n<li><p>CHARACTER_SETS（字符集）表：提供了mysql实例可用字符集的信息。是SHOW CHARACTER SET结果集取之此表。</p>\n</li>\n<li><p>COLLATIONS表：提供了关于各字符集的对照信息。</p>\n</li>\n<li><p>COLLATION_CHARACTER_SET_APPLICABILITY表：指明了可用于校对的字符集。这些列等效于SHOW COLLATION的前两个显示字段。</p>\n</li>\n<li><p>TABLE_CONSTRAINTS表：描述了存在约束的表。以及表的约束类型。</p>\n</li>\n<li><p>KEY_COLUMN_USAGE表：描述了具有约束的键列。</p>\n</li>\n<li><p>ROUTINES表：提供了关于存储子程序（存储程序和函数）的信息。此时，ROUTINES表不包含自定义函数（UDF）。名为“mysql.proc name”的列指明了对应于　　　　　　　INFORMATION_SCHEMA.ROUTINES表的mysql.proc表列。</p>\n</li>\n<li><p>VIEWS表：给出了关于数据库中的视图的信息。需要有show views权限，否则无法查看视图信息。</p>\n</li>\n<li><p>TRIGGERS表：提供了关于触发程序的信息。必须有super权限才能查看该表。</p>\n</li>\n</ol>\n<h1 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h1><h1 id=\"performance-schema\"><a href=\"#performance-schema\" class=\"headerlink\" title=\"performance_schema\"></a>performance_schema</h1><p> 需要设置参数： performance_schema 才可以启动该功能</p>\n<p>按照相关的标准对进行的事件统计表, 表也是只读的，只能turcate</p>\n<p>　　events_waits_summary_by_instance             </p>\n<p>　　events_waits_summary_by_thread_by_event_name </p>\n<p>　　events_waits_summary_global_by_event_name    </p>\n<p>　　file_summary_by_event_name                   </p>\n<p>　　file_summary_by_instance   </p>\n<ul>\n<li><p>setup_consumers 描述各种事件</p>\n</li>\n<li><p>setup_instruments 描述这个数据库下的表名以及是否开启监控。</p>\n</li>\n<li><p>setup_timers   描述 监控选项已经采样频率的时间间隔</p>\n</li>\n<li><p>events_waits_current  记录当前正在发生的等待事件，这个表是只读的表，不能update ，delete ，但是可以truncate</p>\n</li>\n<li><p>性能历史表 ：events_waits_history  只保留每个线程（thread） 的最近的10个事件</p>\n</li>\n<li><p>性能历史表 ：events_waits_history_long 记录最近的10000个事件  标准的先进先出（FIFO) 这俩表也是只读表，只能truncate</p>\n</li>\n</ul>\n<h1 id=\"sakila\"><a href=\"#sakila\" class=\"headerlink\" title=\"sakila\"></a>sakila</h1><p>　　这是一个MySQL的一个样本数据库，里边都是一些例子表。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"information-schema\"><a href=\"#information-schema\" class=\"headerlink\" title=\"information_schema\"></a>information_schema</h1><ol>\n<li><p>SCHEMATA表：提供了当前mysql实例中所有数据库的信息。是show databases的结果取之此表。</p>\n</li>\n<li><p>TABLES表：提供了关于数据库中的表的信息（包括视图）。详细表述了某个表属于哪个schema，表类型，表引擎，创建时间等信息。是show tables from schemaname的　　结果取之此表。</p>\n</li>\n<li><p>COLUMNS表：提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息。是show columns from schemaname.tablename的结果取之此表。</p>\n</li>\n<li><p>STATISTICS表：提供了关于表索引的信息。是show index from schemaname.tablename的结果取之此表。</p>\n</li>\n<li><p>USER_PRIVILEGES（用户权限）表：给出了关于全程权限的信息。该信息源自mysql.user授权表。是非标准表。</p>\n</li>\n<li><p>SCHEMA_PRIVILEGES（方案权限）表：给出了关于方案（数据库）权限的信息。该信息来自mysql.db授权表。是非标准表。</p>\n</li>\n<li><p>TABLE_PRIVILEGES（表权限）表：给出了关于表权限的信息。该信息源自mysql.tables_priv授权表。是非标准表。</p>\n</li>\n<li><p>COLUMN_PRIVILEGES（列权限）表：给出了关于列权限的信息。该信息源自mysql.columns_priv授权表。是非标准表。</p>\n</li>\n<li><p>CHARACTER_SETS（字符集）表：提供了mysql实例可用字符集的信息。是SHOW CHARACTER SET结果集取之此表。</p>\n</li>\n<li><p>COLLATIONS表：提供了关于各字符集的对照信息。</p>\n</li>\n<li><p>COLLATION_CHARACTER_SET_APPLICABILITY表：指明了可用于校对的字符集。这些列等效于SHOW COLLATION的前两个显示字段。</p>\n</li>\n<li><p>TABLE_CONSTRAINTS表：描述了存在约束的表。以及表的约束类型。</p>\n</li>\n<li><p>KEY_COLUMN_USAGE表：描述了具有约束的键列。</p>\n</li>\n<li><p>ROUTINES表：提供了关于存储子程序（存储程序和函数）的信息。此时，ROUTINES表不包含自定义函数（UDF）。名为“mysql.proc name”的列指明了对应于　　　　　　　INFORMATION_SCHEMA.ROUTINES表的mysql.proc表列。</p>\n</li>\n<li><p>VIEWS表：给出了关于数据库中的视图的信息。需要有show views权限，否则无法查看视图信息。</p>\n</li>\n<li><p>TRIGGERS表：提供了关于触发程序的信息。必须有super权限才能查看该表。</p>\n</li>\n</ol>\n<h1 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h1><h1 id=\"performance-schema\"><a href=\"#performance-schema\" class=\"headerlink\" title=\"performance_schema\"></a>performance_schema</h1><p> 需要设置参数： performance_schema 才可以启动该功能</p>\n<p>按照相关的标准对进行的事件统计表, 表也是只读的，只能turcate</p>\n<p>　　events_waits_summary_by_instance             </p>\n<p>　　events_waits_summary_by_thread_by_event_name </p>\n<p>　　events_waits_summary_global_by_event_name    </p>\n<p>　　file_summary_by_event_name                   </p>\n<p>　　file_summary_by_instance   </p>\n<ul>\n<li><p>setup_consumers 描述各种事件</p>\n</li>\n<li><p>setup_instruments 描述这个数据库下的表名以及是否开启监控。</p>\n</li>\n<li><p>setup_timers   描述 监控选项已经采样频率的时间间隔</p>\n</li>\n<li><p>events_waits_current  记录当前正在发生的等待事件，这个表是只读的表，不能update ，delete ，但是可以truncate</p>\n</li>\n<li><p>性能历史表 ：events_waits_history  只保留每个线程（thread） 的最近的10个事件</p>\n</li>\n<li><p>性能历史表 ：events_waits_history_long 记录最近的10000个事件  标准的先进先出（FIFO) 这俩表也是只读表，只能truncate</p>\n</li>\n</ul>\n<h1 id=\"sakila\"><a href=\"#sakila\" class=\"headerlink\" title=\"sakila\"></a>sakila</h1><p>　　这是一个MySQL的一个样本数据库，里边都是一些例子表。</p>\n"},{"title":"mysql权限管理","date":"2019-03-29T08:55:22.000Z","_content":"\n# 用户管理\n\n# 基本操作\n\n```sql\ncreate user zhangsan identified by 'zhangsan';\n\nSELECT current_user();                                        ← 查看当前用户\nSELECT user,host FROM mysql.user;                    ← 查看用户信息\nSHOW GRANTS;                                                  ← 当前用户权限，会生成SQL语句\nCREATE USER 'user'@'host' IDENTIFIED BY 'password';           ← 创建用户\nDROP USER 'user'@'host';                                      ← 删除用户\nRENAME USER 'user'@'host' TO 'fool'@'host';        \n```\n\n## 修改密码\n\n```sql\nmysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'new-password';   ← 修改密码(recommand)\nmysql> SET PASSWORD FOR 'root'@'localhost'=PASSWORD('new-password'); ← 修改密码\nmysql> UPDATE mysql.user SET password=PASSWORD('new-password')\n       WHERE USER='root' AND Host='127.0.0.1';\nmysql> UPDATE mysql.user SET password='' WHERE user='root';          ← 清除密码\nmysql> FLUSH PRIVILEGES;\n$ mysqladmin -uROOT -pOLD_PASSWD password NEW_PASSWD                 ← 通过mysqladmin修改\n$ mysqladmin -uROOT -p flush-privileges\n```\n\n## 权限管理\n\n```sql\nmysql> GRANT ALL ON *.* TO 'user'@'%' [IDENTIFIED BY 'password'];\nmysql> GRANT ALL  ON [TABLE | DATABASE] student,course TO user1,user2;\nmysql> GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, CREATE TEMPORARY, ALTER,\n       DROP, REFERENCES, INDEX, CREATE VIEW, SHOW VIEW, CREATE ROUTINE,\n       ALTER ROUTINE, EXECUTE\n       ON db.tbl TO 'user'@'host' [IDENTIFIED BY 'password'];\nmysql> GRANT ALL ON sampdb.* TO PUBLIC WITH GRANT OPTION;            ← 所有人，可以授权给其他人\nmysql> GRANT UPDATE(col),SELECT ON TABLE tbl TO user;                ← 针对列赋值\nmysql> SHOW GRANTS [FOR 'user'@'host'];                              ← 查看权限信息\nmysql> REVOKE ALL ON *.* FROM 'user'@'host';                         ← 撤销权限\nmysql> REVOKE SELECT(user, host), UPDATE(host) ON db.tbl FROM 'user'@'%';\n\n```\n\n# 权限\n\n##  admin\n\n```\nmysql> CREATE USER 'admin'@'IP' IDENTIFIED BY 'password';\nmysql> GRANT ALL PRIVILEGES ON *.* TO 'admin'@'IP';\n\nmysql> REVOKE ALL PRIVILEGES ON *.* FROM 'admin'@'IP';\nmysql> DROP USER 'admin'@'IP';\n```\n\n## root\n\n```sql\nmysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION;\n```\n\n# 其他\n\n## 重置root密码\n\n```sql\n----- 1. 停止mysql服务器\n# systemctl stop mysqld\n# /opt/mysql-5.7/bin/mysqladmin -uroot -p'init-password' shutdown\nShutting down MySQL..     done\n\n----- 2. 获取跳过认证的启动参数\n# mysqld --help --verbose | grep 'skip-grant-tables' -A1\n    --skip-grant-tables Start without grant tables. This gives all users FULL\n                          ACCESS to all tables.\n\n----- 3. 启动服务器，跳过认证\n# mysqld --skip-grant-tables --user=mysql &\n[1] 10209\n\n----- 4. 取消密码\nmysql> UPDATE mysql.user SET password='' WHERE user='root';\nQuery OK, 2 rows affected (0.00 sec)\nRows matched: 2  Changed: 2  Warnings: 0\n```\n\n## 密码策略\n\n### 参数解释\n\nvalidate_password_dictionary_file\n插件用于验证密码强度的字典文件路径。\n\nvalidate_password_length\n密码最小长度，参数默认为8，它有最小值的限制，最小值为：validate_password_number_count + validate_password_special_char_count + (2 * validate_password_mixed_case_count)\n\nvalidate_password_mixed_case_count\n密码至少要包含的小写字母个数和大写字母个数。\n\nvalidate_password_number_count\n密码至少要包含的数字个数。\n\nvalidate_password_policy\n密码强度检查等级，0/LOW、1/MEDIUM、2/STRONG。有以下取值：\nPolicy                 Tests Performed                                                                                                        \n0 or LOW               Length                                                                                                                      \n1 or MEDIUM         Length; numeric, lowercase/uppercase, and special characters                             \n2 or STRONG        Length; numeric, lowercase/uppercase, and special characters; dictionary file      \n默认是1，即MEDIUM，所以刚开始设置的密码必须符合长度，且必须含有数字，小写或大写字母，特殊字符。\n\nvalidate_password_special_char_count\n密码至少要包含的特殊字符数。\n\n### 修改mysql参数配置\n\n```mysql\nmysql> set global validate_password_policy=0;\nQuery OK, 0 rows affected (0.05 sec)\n\nmysql> set global validate_password_mixed_case_count=0;\nQuery OK, 0 rows affected (0.00 sec)\n \nmysql> set global validate_password_number_count=3;\nQuery OK, 0 rows affected (0.00 sec)\n \nmysql> set global validate_password_special_char_count=0;\nQuery OK, 0 rows affected (0.00 sec)\n \nmysql> set global validate_password_length=3;\nQuery OK, 0 rows affected (0.00 sec)\n \nmysql> SHOW VARIABLES LIKE 'validate_password%';\n+--------------------------------------+-------+\n| Variable_name                        | Value |\n+--------------------------------------+-------+\n| validate_password_dictionary_file    |       |\n| validate_password_length             | 3     |\n| validate_password_mixed_case_count   | 0     |\n| validate_password_number_count       | 3     |\n| validate_password_policy             | LOW   |\n| validate_password_special_char_count | 0     |\n+--------------------------------------+-------+\n6 rows in set (0.00 sec)\n```\n\n\n\n## MySQL 中 localhost 127.0.0.1 区别\n\n`%` 是一个通配符，用以匹配所有的 IP 地址，但是不能匹配到 `locahost` 这个特殊的域名。\n\n也就是说，如果要允许本地登录，单纯只配置一个 `%` 是不够的 (应该是说对这种方式是不够的)，需要同时配置一个 `locahost` 的账号。\n\n```sql\nmysql> GRANT ALL ON *.* TO 'foobar'@'%' IDENTIFIED BY '123456';\nQuery OK, 0 rows affected (0.01 sec)\nmysql> SELECT user, host, password FROM mysql.user WHERE user like 'foobar%';\n+--------+------+-------------------------------------------+\n| user   | host | password                                  |\n+--------+------+-------------------------------------------+\n| foobar | %    | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |\n+--------+------+-------------------------------------------+\n1 row in set (0.00 sec)\n\n$ mysql -ufoobar -h127.0.0.1 -P3307 -p'123456'\nERROR 1045 (28000): Access denied for user 'foobar'@'localhost' (using password: YES)\n```\n\nhttps://jin-yang.github.io/post/mysql-localhost-vs-127.0.0.1-introduce.html\n\n# 参考\n\nhttps://jin-yang.github.io/post/mysql-users.html\n\nhttps://www.cnblogs.com/Richardzhu/p/3318595.html","source":"_posts/mysql/mysql权限管理.md","raw":"---\ntitle: mysql权限管理\ndate: 2019-03-29 16:55:22\ntags:\n- linux\n---\n\n# 用户管理\n\n# 基本操作\n\n```sql\ncreate user zhangsan identified by 'zhangsan';\n\nSELECT current_user();                                        ← 查看当前用户\nSELECT user,host FROM mysql.user;                    ← 查看用户信息\nSHOW GRANTS;                                                  ← 当前用户权限，会生成SQL语句\nCREATE USER 'user'@'host' IDENTIFIED BY 'password';           ← 创建用户\nDROP USER 'user'@'host';                                      ← 删除用户\nRENAME USER 'user'@'host' TO 'fool'@'host';        \n```\n\n## 修改密码\n\n```sql\nmysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'new-password';   ← 修改密码(recommand)\nmysql> SET PASSWORD FOR 'root'@'localhost'=PASSWORD('new-password'); ← 修改密码\nmysql> UPDATE mysql.user SET password=PASSWORD('new-password')\n       WHERE USER='root' AND Host='127.0.0.1';\nmysql> UPDATE mysql.user SET password='' WHERE user='root';          ← 清除密码\nmysql> FLUSH PRIVILEGES;\n$ mysqladmin -uROOT -pOLD_PASSWD password NEW_PASSWD                 ← 通过mysqladmin修改\n$ mysqladmin -uROOT -p flush-privileges\n```\n\n## 权限管理\n\n```sql\nmysql> GRANT ALL ON *.* TO 'user'@'%' [IDENTIFIED BY 'password'];\nmysql> GRANT ALL  ON [TABLE | DATABASE] student,course TO user1,user2;\nmysql> GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, CREATE TEMPORARY, ALTER,\n       DROP, REFERENCES, INDEX, CREATE VIEW, SHOW VIEW, CREATE ROUTINE,\n       ALTER ROUTINE, EXECUTE\n       ON db.tbl TO 'user'@'host' [IDENTIFIED BY 'password'];\nmysql> GRANT ALL ON sampdb.* TO PUBLIC WITH GRANT OPTION;            ← 所有人，可以授权给其他人\nmysql> GRANT UPDATE(col),SELECT ON TABLE tbl TO user;                ← 针对列赋值\nmysql> SHOW GRANTS [FOR 'user'@'host'];                              ← 查看权限信息\nmysql> REVOKE ALL ON *.* FROM 'user'@'host';                         ← 撤销权限\nmysql> REVOKE SELECT(user, host), UPDATE(host) ON db.tbl FROM 'user'@'%';\n\n```\n\n# 权限\n\n##  admin\n\n```\nmysql> CREATE USER 'admin'@'IP' IDENTIFIED BY 'password';\nmysql> GRANT ALL PRIVILEGES ON *.* TO 'admin'@'IP';\n\nmysql> REVOKE ALL PRIVILEGES ON *.* FROM 'admin'@'IP';\nmysql> DROP USER 'admin'@'IP';\n```\n\n## root\n\n```sql\nmysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION;\n```\n\n# 其他\n\n## 重置root密码\n\n```sql\n----- 1. 停止mysql服务器\n# systemctl stop mysqld\n# /opt/mysql-5.7/bin/mysqladmin -uroot -p'init-password' shutdown\nShutting down MySQL..     done\n\n----- 2. 获取跳过认证的启动参数\n# mysqld --help --verbose | grep 'skip-grant-tables' -A1\n    --skip-grant-tables Start without grant tables. This gives all users FULL\n                          ACCESS to all tables.\n\n----- 3. 启动服务器，跳过认证\n# mysqld --skip-grant-tables --user=mysql &\n[1] 10209\n\n----- 4. 取消密码\nmysql> UPDATE mysql.user SET password='' WHERE user='root';\nQuery OK, 2 rows affected (0.00 sec)\nRows matched: 2  Changed: 2  Warnings: 0\n```\n\n## 密码策略\n\n### 参数解释\n\nvalidate_password_dictionary_file\n插件用于验证密码强度的字典文件路径。\n\nvalidate_password_length\n密码最小长度，参数默认为8，它有最小值的限制，最小值为：validate_password_number_count + validate_password_special_char_count + (2 * validate_password_mixed_case_count)\n\nvalidate_password_mixed_case_count\n密码至少要包含的小写字母个数和大写字母个数。\n\nvalidate_password_number_count\n密码至少要包含的数字个数。\n\nvalidate_password_policy\n密码强度检查等级，0/LOW、1/MEDIUM、2/STRONG。有以下取值：\nPolicy                 Tests Performed                                                                                                        \n0 or LOW               Length                                                                                                                      \n1 or MEDIUM         Length; numeric, lowercase/uppercase, and special characters                             \n2 or STRONG        Length; numeric, lowercase/uppercase, and special characters; dictionary file      \n默认是1，即MEDIUM，所以刚开始设置的密码必须符合长度，且必须含有数字，小写或大写字母，特殊字符。\n\nvalidate_password_special_char_count\n密码至少要包含的特殊字符数。\n\n### 修改mysql参数配置\n\n```mysql\nmysql> set global validate_password_policy=0;\nQuery OK, 0 rows affected (0.05 sec)\n\nmysql> set global validate_password_mixed_case_count=0;\nQuery OK, 0 rows affected (0.00 sec)\n \nmysql> set global validate_password_number_count=3;\nQuery OK, 0 rows affected (0.00 sec)\n \nmysql> set global validate_password_special_char_count=0;\nQuery OK, 0 rows affected (0.00 sec)\n \nmysql> set global validate_password_length=3;\nQuery OK, 0 rows affected (0.00 sec)\n \nmysql> SHOW VARIABLES LIKE 'validate_password%';\n+--------------------------------------+-------+\n| Variable_name                        | Value |\n+--------------------------------------+-------+\n| validate_password_dictionary_file    |       |\n| validate_password_length             | 3     |\n| validate_password_mixed_case_count   | 0     |\n| validate_password_number_count       | 3     |\n| validate_password_policy             | LOW   |\n| validate_password_special_char_count | 0     |\n+--------------------------------------+-------+\n6 rows in set (0.00 sec)\n```\n\n\n\n## MySQL 中 localhost 127.0.0.1 区别\n\n`%` 是一个通配符，用以匹配所有的 IP 地址，但是不能匹配到 `locahost` 这个特殊的域名。\n\n也就是说，如果要允许本地登录，单纯只配置一个 `%` 是不够的 (应该是说对这种方式是不够的)，需要同时配置一个 `locahost` 的账号。\n\n```sql\nmysql> GRANT ALL ON *.* TO 'foobar'@'%' IDENTIFIED BY '123456';\nQuery OK, 0 rows affected (0.01 sec)\nmysql> SELECT user, host, password FROM mysql.user WHERE user like 'foobar%';\n+--------+------+-------------------------------------------+\n| user   | host | password                                  |\n+--------+------+-------------------------------------------+\n| foobar | %    | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |\n+--------+------+-------------------------------------------+\n1 row in set (0.00 sec)\n\n$ mysql -ufoobar -h127.0.0.1 -P3307 -p'123456'\nERROR 1045 (28000): Access denied for user 'foobar'@'localhost' (using password: YES)\n```\n\nhttps://jin-yang.github.io/post/mysql-localhost-vs-127.0.0.1-introduce.html\n\n# 参考\n\nhttps://jin-yang.github.io/post/mysql-users.html\n\nhttps://www.cnblogs.com/Richardzhu/p/3318595.html","slug":"mysql/mysql权限管理","published":1,"updated":"2020-08-27T15:25:48.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblmu003w4tje5q3bfc33","content":"<h1 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h1><h1 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> zhangsan <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"string\">'zhangsan'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">current_user</span>();                                        ← 查看当前用户</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">user</span>,host <span class=\"keyword\">FROM</span> mysql.user;                    ← 查看用户信息</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">GRANTS</span>;                                                  ← 当前用户权限，会生成SQL语句</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> <span class=\"string\">'user'</span>@<span class=\"string\">'host'</span> <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">BY</span> <span class=\"string\">'password'</span>;           ← 创建用户</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">USER</span> <span class=\"string\">'user'</span>@<span class=\"string\">'host'</span>;                                      ← 删除用户</span><br><span class=\"line\"><span class=\"keyword\">RENAME</span> <span class=\"keyword\">USER</span> <span class=\"string\">'user'</span>@<span class=\"string\">'host'</span> <span class=\"keyword\">TO</span> <span class=\"string\">'fool'</span>@<span class=\"string\">'host'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; ALTER USER 'root'@'localhost' IDENTIFIED BY 'new-password';   ← 修改密码(recommand)</span><br><span class=\"line\">mysql&gt; SET PASSWORD FOR 'root'@'localhost'=PASSWORD('new-password'); ← 修改密码</span><br><span class=\"line\">mysql&gt; UPDATE mysql.user SET password=PASSWORD('new-password')</span><br><span class=\"line\">       WHERE USER='root' AND Host='127.0.0.1';</span><br><span class=\"line\">mysql&gt; UPDATE mysql.user SET password='' WHERE user='root';          ← 清除密码</span><br><span class=\"line\">mysql&gt; FLUSH PRIVILEGES;</span><br><span class=\"line\">$ mysqladmin -uROOT -pOLD_PASSWD password NEW_PASSWD                 ← 通过mysqladmin修改</span><br><span class=\"line\">$ mysqladmin -uROOT -p <span class=\"keyword\">flush</span>-<span class=\"keyword\">privileges</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"权限管理\"><a href=\"#权限管理\" class=\"headerlink\" title=\"权限管理\"></a>权限管理</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; GRANT ALL ON *.* TO 'user'@'%' [IDENTIFIED BY 'password'];</span><br><span class=\"line\">mysql&gt; GRANT ALL  ON [TABLE | DATABASE] student,course TO user1,user2;</span><br><span class=\"line\">mysql&gt; GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, CREATE TEMPORARY, ALTER,</span><br><span class=\"line\">       <span class=\"keyword\">DROP</span>, <span class=\"keyword\">REFERENCES</span>, <span class=\"keyword\">INDEX</span>, <span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span>, <span class=\"keyword\">SHOW</span> <span class=\"keyword\">VIEW</span>, <span class=\"keyword\">CREATE</span> ROUTINE,</span><br><span class=\"line\">       <span class=\"keyword\">ALTER</span> ROUTINE, <span class=\"keyword\">EXECUTE</span></span><br><span class=\"line\">       <span class=\"keyword\">ON</span> db.tbl <span class=\"keyword\">TO</span> <span class=\"string\">'user'</span>@<span class=\"string\">'host'</span> [<span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">BY</span> <span class=\"string\">'password'</span>];</span><br><span class=\"line\">mysql&gt; GRANT ALL ON sampdb.* TO PUBLIC WITH GRANT OPTION;            ← 所有人，可以授权给其他人</span><br><span class=\"line\">mysql&gt; GRANT UPDATE(col),SELECT ON TABLE tbl TO user;                ← 针对列赋值</span><br><span class=\"line\">mysql&gt; SHOW GRANTS [FOR 'user'@'host'];                              ← 查看权限信息</span><br><span class=\"line\">mysql&gt; REVOKE ALL ON *.* FROM 'user'@'host';                         ← 撤销权限</span><br><span class=\"line\">mysql&gt; REVOKE SELECT(user, host), UPDATE(host) ON db.tbl FROM 'user'@'%';</span><br></pre></td></tr></table></figure>\n<h1 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h1><h2 id=\"admin\"><a href=\"#admin\" class=\"headerlink\" title=\"admin\"></a>admin</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE USER &apos;admin&apos;@&apos;IP&apos; IDENTIFIED BY &apos;password&apos;;</span><br><span class=\"line\">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;admin&apos;@&apos;IP&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; REVOKE ALL PRIVILEGES ON *.* FROM &apos;admin&apos;@&apos;IP&apos;;</span><br><span class=\"line\">mysql&gt; DROP USER &apos;admin&apos;@&apos;IP&apos;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"root\"><a href=\"#root\" class=\"headerlink\" title=\"root\"></a>root</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"重置root密码\"><a href=\"#重置root密码\" class=\"headerlink\" title=\"重置root密码\"></a>重置root密码</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">----- 1. 停止mysql服务器</span></span><br><span class=\"line\"><span class=\"comment\"># systemctl stop mysqld</span></span><br><span class=\"line\"><span class=\"comment\"># /opt/mysql-5.7/bin/mysqladmin -uroot -p'init-password' shutdown</span></span><br><span class=\"line\">Shutting down MySQL..     done</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">----- 2. 获取跳过认证的启动参数</span></span><br><span class=\"line\"><span class=\"comment\"># mysqld --help --verbose | grep 'skip-grant-tables' -A1</span></span><br><span class=\"line\">    <span class=\"comment\">--skip-grant-tables Start without grant tables. This gives all users FULL</span></span><br><span class=\"line\">                          ACCESS to all tables.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">----- 3. 启动服务器，跳过认证</span></span><br><span class=\"line\"><span class=\"comment\"># mysqld --skip-grant-tables --user=mysql &amp;</span></span><br><span class=\"line\">[1] 10209</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">----- 4. 取消密码</span></span><br><span class=\"line\">mysql&gt; UPDATE mysql.user SET password='' WHERE user='root';</span><br><span class=\"line\">Query OK, 2 rows affected (0.00 sec)</span><br><span class=\"line\">Rows matched: 2  Changed: 2  Warnings: 0</span><br></pre></td></tr></table></figure>\n<h2 id=\"密码策略\"><a href=\"#密码策略\" class=\"headerlink\" title=\"密码策略\"></a>密码策略</h2><h3 id=\"参数解释\"><a href=\"#参数解释\" class=\"headerlink\" title=\"参数解释\"></a>参数解释</h3><p>validate_password_dictionary_file<br>插件用于验证密码强度的字典文件路径。</p>\n<p>validate_password_length<br>密码最小长度，参数默认为8，它有最小值的限制，最小值为：validate_password_number_count + validate_password_special_char_count + (2 * validate_password_mixed_case_count)</p>\n<p>validate_password_mixed_case_count<br>密码至少要包含的小写字母个数和大写字母个数。</p>\n<p>validate_password_number_count<br>密码至少要包含的数字个数。</p>\n<p>validate_password_policy<br>密码强度检查等级，0/LOW、1/MEDIUM、2/STRONG。有以下取值：<br>Policy                 Tests Performed<br>0 or LOW               Length<br>1 or MEDIUM         Length; numeric, lowercase/uppercase, and special characters<br>2 or STRONG        Length; numeric, lowercase/uppercase, and special characters; dictionary file<br>默认是1，即MEDIUM，所以刚开始设置的密码必须符合长度，且必须含有数字，小写或大写字母，特殊字符。</p>\n<p>validate_password_special_char_count<br>密码至少要包含的特殊字符数。</p>\n<h3 id=\"修改mysql参数配置\"><a href=\"#修改mysql参数配置\" class=\"headerlink\" title=\"修改mysql参数配置\"></a>修改mysql参数配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; set global validate_password_policy=0;</span><br><span class=\"line\">Query OK, 0 rows affected (0.05 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; set global validate_password_mixed_case_count=0;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"> </span><br><span class=\"line\">mysql&gt; set global validate_password_number_count=3;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"> </span><br><span class=\"line\">mysql&gt; set global validate_password_special_char_count=0;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"> </span><br><span class=\"line\">mysql&gt; set global validate_password_length=3;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"> </span><br><span class=\"line\">mysql&gt; SHOW VARIABLES LIKE &apos;validate_password%&apos;;</span><br><span class=\"line\">+--------------------------------------+-------+</span><br><span class=\"line\">| Variable_name                        | Value |</span><br><span class=\"line\">+--------------------------------------+-------+</span><br><span class=\"line\">| validate_password_dictionary_file    |       |</span><br><span class=\"line\">| validate_password_length             | 3     |</span><br><span class=\"line\">| validate_password_mixed_case_count   | 0     |</span><br><span class=\"line\">| validate_password_number_count       | 3     |</span><br><span class=\"line\">| validate_password_policy             | LOW   |</span><br><span class=\"line\">| validate_password_special_char_count | 0     |</span><br><span class=\"line\">+--------------------------------------+-------+</span><br><span class=\"line\">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-中-localhost-127-0-0-1-区别\"><a href=\"#MySQL-中-localhost-127-0-0-1-区别\" class=\"headerlink\" title=\"MySQL 中 localhost 127.0.0.1 区别\"></a>MySQL 中 localhost 127.0.0.1 区别</h2><p><code>%</code> 是一个通配符，用以匹配所有的 IP 地址，但是不能匹配到 <code>locahost</code> 这个特殊的域名。</p>\n<p>也就是说，如果要允许本地登录，单纯只配置一个 <code>%</code> 是不够的 (应该是说对这种方式是不够的)，需要同时配置一个 <code>locahost</code> 的账号。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; GRANT ALL ON *.* TO 'foobar'@'%' IDENTIFIED BY '123456';</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br><span class=\"line\">mysql&gt; SELECT user, host, password FROM mysql.user WHERE user like 'foobar%';</span><br><span class=\"line\">+<span class=\"comment\">--------+------+-------------------------------------------+</span></span><br><span class=\"line\">| user   | host | password                                  |</span><br><span class=\"line\">+<span class=\"comment\">--------+------+-------------------------------------------+</span></span><br><span class=\"line\">| foobar | %    | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |</span><br><span class=\"line\">+<span class=\"comment\">--------+------+-------------------------------------------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">$ mysql -ufoobar -h127<span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> -P3307 -p<span class=\"string\">'123456'</span></span><br><span class=\"line\"><span class=\"keyword\">ERROR</span> <span class=\"number\">1045</span> (<span class=\"number\">28000</span>): <span class=\"keyword\">Access</span> denied <span class=\"keyword\">for</span> <span class=\"keyword\">user</span> <span class=\"string\">'foobar'</span>@<span class=\"string\">'localhost'</span> (<span class=\"keyword\">using</span> <span class=\"keyword\">password</span>: YES)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://jin-yang.github.io/post/mysql-localhost-vs-127.0.0.1-introduce.html\" target=\"_blank\" rel=\"noopener\">https://jin-yang.github.io/post/mysql-localhost-vs-127.0.0.1-introduce.html</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://jin-yang.github.io/post/mysql-users.html\" target=\"_blank\" rel=\"noopener\">https://jin-yang.github.io/post/mysql-users.html</a></p>\n<p><a href=\"https://www.cnblogs.com/Richardzhu/p/3318595.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Richardzhu/p/3318595.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h1><h1 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> zhangsan <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"string\">'zhangsan'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">current_user</span>();                                        ← 查看当前用户</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">user</span>,host <span class=\"keyword\">FROM</span> mysql.user;                    ← 查看用户信息</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">GRANTS</span>;                                                  ← 当前用户权限，会生成SQL语句</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> <span class=\"string\">'user'</span>@<span class=\"string\">'host'</span> <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">BY</span> <span class=\"string\">'password'</span>;           ← 创建用户</span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">USER</span> <span class=\"string\">'user'</span>@<span class=\"string\">'host'</span>;                                      ← 删除用户</span><br><span class=\"line\"><span class=\"keyword\">RENAME</span> <span class=\"keyword\">USER</span> <span class=\"string\">'user'</span>@<span class=\"string\">'host'</span> <span class=\"keyword\">TO</span> <span class=\"string\">'fool'</span>@<span class=\"string\">'host'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; ALTER USER 'root'@'localhost' IDENTIFIED BY 'new-password';   ← 修改密码(recommand)</span><br><span class=\"line\">mysql&gt; SET PASSWORD FOR 'root'@'localhost'=PASSWORD('new-password'); ← 修改密码</span><br><span class=\"line\">mysql&gt; UPDATE mysql.user SET password=PASSWORD('new-password')</span><br><span class=\"line\">       WHERE USER='root' AND Host='127.0.0.1';</span><br><span class=\"line\">mysql&gt; UPDATE mysql.user SET password='' WHERE user='root';          ← 清除密码</span><br><span class=\"line\">mysql&gt; FLUSH PRIVILEGES;</span><br><span class=\"line\">$ mysqladmin -uROOT -pOLD_PASSWD password NEW_PASSWD                 ← 通过mysqladmin修改</span><br><span class=\"line\">$ mysqladmin -uROOT -p <span class=\"keyword\">flush</span>-<span class=\"keyword\">privileges</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"权限管理\"><a href=\"#权限管理\" class=\"headerlink\" title=\"权限管理\"></a>权限管理</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; GRANT ALL ON *.* TO 'user'@'%' [IDENTIFIED BY 'password'];</span><br><span class=\"line\">mysql&gt; GRANT ALL  ON [TABLE | DATABASE] student,course TO user1,user2;</span><br><span class=\"line\">mysql&gt; GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, CREATE TEMPORARY, ALTER,</span><br><span class=\"line\">       <span class=\"keyword\">DROP</span>, <span class=\"keyword\">REFERENCES</span>, <span class=\"keyword\">INDEX</span>, <span class=\"keyword\">CREATE</span> <span class=\"keyword\">VIEW</span>, <span class=\"keyword\">SHOW</span> <span class=\"keyword\">VIEW</span>, <span class=\"keyword\">CREATE</span> ROUTINE,</span><br><span class=\"line\">       <span class=\"keyword\">ALTER</span> ROUTINE, <span class=\"keyword\">EXECUTE</span></span><br><span class=\"line\">       <span class=\"keyword\">ON</span> db.tbl <span class=\"keyword\">TO</span> <span class=\"string\">'user'</span>@<span class=\"string\">'host'</span> [<span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">BY</span> <span class=\"string\">'password'</span>];</span><br><span class=\"line\">mysql&gt; GRANT ALL ON sampdb.* TO PUBLIC WITH GRANT OPTION;            ← 所有人，可以授权给其他人</span><br><span class=\"line\">mysql&gt; GRANT UPDATE(col),SELECT ON TABLE tbl TO user;                ← 针对列赋值</span><br><span class=\"line\">mysql&gt; SHOW GRANTS [FOR 'user'@'host'];                              ← 查看权限信息</span><br><span class=\"line\">mysql&gt; REVOKE ALL ON *.* FROM 'user'@'host';                         ← 撤销权限</span><br><span class=\"line\">mysql&gt; REVOKE SELECT(user, host), UPDATE(host) ON db.tbl FROM 'user'@'%';</span><br></pre></td></tr></table></figure>\n<h1 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h1><h2 id=\"admin\"><a href=\"#admin\" class=\"headerlink\" title=\"admin\"></a>admin</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE USER &apos;admin&apos;@&apos;IP&apos; IDENTIFIED BY &apos;password&apos;;</span><br><span class=\"line\">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;admin&apos;@&apos;IP&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; REVOKE ALL PRIVILEGES ON *.* FROM &apos;admin&apos;@&apos;IP&apos;;</span><br><span class=\"line\">mysql&gt; DROP USER &apos;admin&apos;@&apos;IP&apos;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"root\"><a href=\"#root\" class=\"headerlink\" title=\"root\"></a>root</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"重置root密码\"><a href=\"#重置root密码\" class=\"headerlink\" title=\"重置root密码\"></a>重置root密码</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">----- 1. 停止mysql服务器</span></span><br><span class=\"line\"><span class=\"comment\"># systemctl stop mysqld</span></span><br><span class=\"line\"><span class=\"comment\"># /opt/mysql-5.7/bin/mysqladmin -uroot -p'init-password' shutdown</span></span><br><span class=\"line\">Shutting down MySQL..     done</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">----- 2. 获取跳过认证的启动参数</span></span><br><span class=\"line\"><span class=\"comment\"># mysqld --help --verbose | grep 'skip-grant-tables' -A1</span></span><br><span class=\"line\">    <span class=\"comment\">--skip-grant-tables Start without grant tables. This gives all users FULL</span></span><br><span class=\"line\">                          ACCESS to all tables.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">----- 3. 启动服务器，跳过认证</span></span><br><span class=\"line\"><span class=\"comment\"># mysqld --skip-grant-tables --user=mysql &amp;</span></span><br><span class=\"line\">[1] 10209</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">----- 4. 取消密码</span></span><br><span class=\"line\">mysql&gt; UPDATE mysql.user SET password='' WHERE user='root';</span><br><span class=\"line\">Query OK, 2 rows affected (0.00 sec)</span><br><span class=\"line\">Rows matched: 2  Changed: 2  Warnings: 0</span><br></pre></td></tr></table></figure>\n<h2 id=\"密码策略\"><a href=\"#密码策略\" class=\"headerlink\" title=\"密码策略\"></a>密码策略</h2><h3 id=\"参数解释\"><a href=\"#参数解释\" class=\"headerlink\" title=\"参数解释\"></a>参数解释</h3><p>validate_password_dictionary_file<br>插件用于验证密码强度的字典文件路径。</p>\n<p>validate_password_length<br>密码最小长度，参数默认为8，它有最小值的限制，最小值为：validate_password_number_count + validate_password_special_char_count + (2 * validate_password_mixed_case_count)</p>\n<p>validate_password_mixed_case_count<br>密码至少要包含的小写字母个数和大写字母个数。</p>\n<p>validate_password_number_count<br>密码至少要包含的数字个数。</p>\n<p>validate_password_policy<br>密码强度检查等级，0/LOW、1/MEDIUM、2/STRONG。有以下取值：<br>Policy                 Tests Performed<br>0 or LOW               Length<br>1 or MEDIUM         Length; numeric, lowercase/uppercase, and special characters<br>2 or STRONG        Length; numeric, lowercase/uppercase, and special characters; dictionary file<br>默认是1，即MEDIUM，所以刚开始设置的密码必须符合长度，且必须含有数字，小写或大写字母，特殊字符。</p>\n<p>validate_password_special_char_count<br>密码至少要包含的特殊字符数。</p>\n<h3 id=\"修改mysql参数配置\"><a href=\"#修改mysql参数配置\" class=\"headerlink\" title=\"修改mysql参数配置\"></a>修改mysql参数配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; set global validate_password_policy=0;</span><br><span class=\"line\">Query OK, 0 rows affected (0.05 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; set global validate_password_mixed_case_count=0;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"> </span><br><span class=\"line\">mysql&gt; set global validate_password_number_count=3;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"> </span><br><span class=\"line\">mysql&gt; set global validate_password_special_char_count=0;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"> </span><br><span class=\"line\">mysql&gt; set global validate_password_length=3;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"> </span><br><span class=\"line\">mysql&gt; SHOW VARIABLES LIKE &apos;validate_password%&apos;;</span><br><span class=\"line\">+--------------------------------------+-------+</span><br><span class=\"line\">| Variable_name                        | Value |</span><br><span class=\"line\">+--------------------------------------+-------+</span><br><span class=\"line\">| validate_password_dictionary_file    |       |</span><br><span class=\"line\">| validate_password_length             | 3     |</span><br><span class=\"line\">| validate_password_mixed_case_count   | 0     |</span><br><span class=\"line\">| validate_password_number_count       | 3     |</span><br><span class=\"line\">| validate_password_policy             | LOW   |</span><br><span class=\"line\">| validate_password_special_char_count | 0     |</span><br><span class=\"line\">+--------------------------------------+-------+</span><br><span class=\"line\">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-中-localhost-127-0-0-1-区别\"><a href=\"#MySQL-中-localhost-127-0-0-1-区别\" class=\"headerlink\" title=\"MySQL 中 localhost 127.0.0.1 区别\"></a>MySQL 中 localhost 127.0.0.1 区别</h2><p><code>%</code> 是一个通配符，用以匹配所有的 IP 地址，但是不能匹配到 <code>locahost</code> 这个特殊的域名。</p>\n<p>也就是说，如果要允许本地登录，单纯只配置一个 <code>%</code> 是不够的 (应该是说对这种方式是不够的)，需要同时配置一个 <code>locahost</code> 的账号。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; GRANT ALL ON *.* TO 'foobar'@'%' IDENTIFIED BY '123456';</span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec)</span><br><span class=\"line\">mysql&gt; SELECT user, host, password FROM mysql.user WHERE user like 'foobar%';</span><br><span class=\"line\">+<span class=\"comment\">--------+------+-------------------------------------------+</span></span><br><span class=\"line\">| user   | host | password                                  |</span><br><span class=\"line\">+<span class=\"comment\">--------+------+-------------------------------------------+</span></span><br><span class=\"line\">| foobar | %    | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |</span><br><span class=\"line\">+<span class=\"comment\">--------+------+-------------------------------------------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.00</span> sec)</span><br><span class=\"line\"></span><br><span class=\"line\">$ mysql -ufoobar -h127<span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> -P3307 -p<span class=\"string\">'123456'</span></span><br><span class=\"line\"><span class=\"keyword\">ERROR</span> <span class=\"number\">1045</span> (<span class=\"number\">28000</span>): <span class=\"keyword\">Access</span> denied <span class=\"keyword\">for</span> <span class=\"keyword\">user</span> <span class=\"string\">'foobar'</span>@<span class=\"string\">'localhost'</span> (<span class=\"keyword\">using</span> <span class=\"keyword\">password</span>: YES)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://jin-yang.github.io/post/mysql-localhost-vs-127.0.0.1-introduce.html\" target=\"_blank\" rel=\"noopener\">https://jin-yang.github.io/post/mysql-localhost-vs-127.0.0.1-introduce.html</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://jin-yang.github.io/post/mysql-users.html\" target=\"_blank\" rel=\"noopener\">https://jin-yang.github.io/post/mysql-users.html</a></p>\n<p><a href=\"https://www.cnblogs.com/Richardzhu/p/3318595.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Richardzhu/p/3318595.html</a></p>\n"},{"title":"mysql性能检测","date":"2019-08-31T15:26:45.000Z","_content":"\n# 性能检测蝉蛹命令\n\n1. show status\n2. show processlist\n3. show variables\n\n# 瓶颈分析常用命令\n\n## 获取mysql用户下的进程总数\n\n```shell\nps -ef | awk '{print $1}' | grep \"mysql\" | grep -v \"grep\" | wc -l\n```\n\n## 主机性能状态\n\n```shell\nuptime\n```\n\n## CPU使用率\n\n```shell\ntop\nvmstat\n```\n\n## 磁盘IO量\n\n```shell\nvmstat\niostat\n```\n\n## swap进出量\n\n```shell\nfree -m\n```\n\n# 数据库性能状态\n\n## QPS\n\n**方法一 基于 questions  计算qps,基于  com_commit  com_rollback 计算tps**\n\n```sql\nquestions = show global status like 'questions';\n\nuptime = show global status like 'uptime';\n\nqps=questions/uptime\n```\n\n```sql\ncom_commit = show global status like 'com_commit';\n\ncom_rollback = show global status like 'com_rollback';\n\nuptime = show global status like 'uptime';\n\ntps=(com_commit + com_rollback)/uptime\n```\n\n**方法二  基于 com_\\* 的status 变量计算tps ,qps**\n\n使用如下命令：\n\n```sql\nshow global status where variable_name in('com_select','com_insert','com_delete','com_update');\n\n获取间隔1s 的 com_*的值，并作差值运算\n\ndel_diff = (int(mystat2['com_delete'])   - int(mystat1['com_delete']) ) / diff\n\nins_diff = (int(mystat2['com_insert'])    - int(mystat1['com_insert']) ) / diff\n\nsel_diff = (int(mystat2['com_select'])    - int(mystat1['com_select']) ) / diff\n\nupd_diff = (int(mystat2['com_update'])   - int(mystat1['com_update']) ) / diff\n\n\n```\n\n**总结：**\n\nQuestions 是记录了从mysqld启动以来所有的select，dml 次数包括show 命令的查询的次数。这样多少有失准确性，比如很多数据库有监控系统在运行，每5秒对数据库进行一次show 查询来获取当前数据库的状态，而这些查询就被记录到QPS,TPS统计中，造成一定的\"数据污染\".\n\n如果数据库中存在比较多的myisam表，则计算还是questions 比较合适。\n\n如果数据库中存在比较多的innodb表，则计算以com_*数据来源比较合适\n\n## TPS\n\nTPS = (Com_commit + Com_rollback) / seconds \n\n```sql\nshow status like 'Com_commit'; \nshow status like 'Com_rollback';\n```\n\n## key Buffer 命中率\n\nkey_buffer_read_hits = (1-key_reads / key_read_requests) * 100% \nkey_buffer_write_hits = (1-key_writes / key_write_requests) * 100%\n\n```sql\nshow status like 'Key%';\n```\n\n## InnoDB Buffer命中率\n\ninnodb_buffer_read_hits = (1 - innodb_buffer_pool_reads / innodb_buffer_pool_read_requests) * 100%\n\n```sql\nshow status like 'innodb_buffer_pool_read%';\n```\n\n## Query Cache命中率\n\nQuery_cache_hits = (Qcahce_hits / (Qcache_hits + Qcache_inserts )) * 100%;\n\n```sql\n show status like 'Qcache%';\n```\n\n## Table Cache状态量\n\n```sql\nshow status like 'open%';\n```\n\n## Thread Cache 命中率\n\nThread_cache_hits = (1 - Threads_created / connections ) * 100%\n\n```sql\nshow status like 'Thread%';\nshow status like 'Connections';\n```\n\n## 锁定状态\n\n```sql\nshow status like '%lock%';\n```\n\n## 复制延时量\n\n```sql\nshow slave status;\n```\n\n## Tmp Table 状况(临时表状况)\n\n```sql\nshow status like 'Create_tmp%';\n```\n\n## Binlog Cache 使用状况 \n\n```sql\nshow status like 'Binlog_cache%';\n```\n\n## Innodb_log_waits\n\n```SQL\nshow status like 'innodb_log_waits';\n```\n\n\n\n\n\n\n\n# 参考\n\n<https://blog.csdn.net/li_adou/article/details/78791972>\n\n","source":"_posts/mysql/mysql性能检测.md","raw":"---\ntitle: mysql性能检测\ndate: 2019-08-31 23:26:45\ntags: mysql\n---\n\n# 性能检测蝉蛹命令\n\n1. show status\n2. show processlist\n3. show variables\n\n# 瓶颈分析常用命令\n\n## 获取mysql用户下的进程总数\n\n```shell\nps -ef | awk '{print $1}' | grep \"mysql\" | grep -v \"grep\" | wc -l\n```\n\n## 主机性能状态\n\n```shell\nuptime\n```\n\n## CPU使用率\n\n```shell\ntop\nvmstat\n```\n\n## 磁盘IO量\n\n```shell\nvmstat\niostat\n```\n\n## swap进出量\n\n```shell\nfree -m\n```\n\n# 数据库性能状态\n\n## QPS\n\n**方法一 基于 questions  计算qps,基于  com_commit  com_rollback 计算tps**\n\n```sql\nquestions = show global status like 'questions';\n\nuptime = show global status like 'uptime';\n\nqps=questions/uptime\n```\n\n```sql\ncom_commit = show global status like 'com_commit';\n\ncom_rollback = show global status like 'com_rollback';\n\nuptime = show global status like 'uptime';\n\ntps=(com_commit + com_rollback)/uptime\n```\n\n**方法二  基于 com_\\* 的status 变量计算tps ,qps**\n\n使用如下命令：\n\n```sql\nshow global status where variable_name in('com_select','com_insert','com_delete','com_update');\n\n获取间隔1s 的 com_*的值，并作差值运算\n\ndel_diff = (int(mystat2['com_delete'])   - int(mystat1['com_delete']) ) / diff\n\nins_diff = (int(mystat2['com_insert'])    - int(mystat1['com_insert']) ) / diff\n\nsel_diff = (int(mystat2['com_select'])    - int(mystat1['com_select']) ) / diff\n\nupd_diff = (int(mystat2['com_update'])   - int(mystat1['com_update']) ) / diff\n\n\n```\n\n**总结：**\n\nQuestions 是记录了从mysqld启动以来所有的select，dml 次数包括show 命令的查询的次数。这样多少有失准确性，比如很多数据库有监控系统在运行，每5秒对数据库进行一次show 查询来获取当前数据库的状态，而这些查询就被记录到QPS,TPS统计中，造成一定的\"数据污染\".\n\n如果数据库中存在比较多的myisam表，则计算还是questions 比较合适。\n\n如果数据库中存在比较多的innodb表，则计算以com_*数据来源比较合适\n\n## TPS\n\nTPS = (Com_commit + Com_rollback) / seconds \n\n```sql\nshow status like 'Com_commit'; \nshow status like 'Com_rollback';\n```\n\n## key Buffer 命中率\n\nkey_buffer_read_hits = (1-key_reads / key_read_requests) * 100% \nkey_buffer_write_hits = (1-key_writes / key_write_requests) * 100%\n\n```sql\nshow status like 'Key%';\n```\n\n## InnoDB Buffer命中率\n\ninnodb_buffer_read_hits = (1 - innodb_buffer_pool_reads / innodb_buffer_pool_read_requests) * 100%\n\n```sql\nshow status like 'innodb_buffer_pool_read%';\n```\n\n## Query Cache命中率\n\nQuery_cache_hits = (Qcahce_hits / (Qcache_hits + Qcache_inserts )) * 100%;\n\n```sql\n show status like 'Qcache%';\n```\n\n## Table Cache状态量\n\n```sql\nshow status like 'open%';\n```\n\n## Thread Cache 命中率\n\nThread_cache_hits = (1 - Threads_created / connections ) * 100%\n\n```sql\nshow status like 'Thread%';\nshow status like 'Connections';\n```\n\n## 锁定状态\n\n```sql\nshow status like '%lock%';\n```\n\n## 复制延时量\n\n```sql\nshow slave status;\n```\n\n## Tmp Table 状况(临时表状况)\n\n```sql\nshow status like 'Create_tmp%';\n```\n\n## Binlog Cache 使用状况 \n\n```sql\nshow status like 'Binlog_cache%';\n```\n\n## Innodb_log_waits\n\n```SQL\nshow status like 'innodb_log_waits';\n```\n\n\n\n\n\n\n\n# 参考\n\n<https://blog.csdn.net/li_adou/article/details/78791972>\n\n","slug":"mysql/mysql性能检测","published":1,"updated":"2019-08-31T16:25:34.496Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblmx003y4tje7azslqm3","content":"<h1 id=\"性能检测蝉蛹命令\"><a href=\"#性能检测蝉蛹命令\" class=\"headerlink\" title=\"性能检测蝉蛹命令\"></a>性能检测蝉蛹命令</h1><ol>\n<li>show status</li>\n<li>show processlist</li>\n<li>show variables</li>\n</ol>\n<h1 id=\"瓶颈分析常用命令\"><a href=\"#瓶颈分析常用命令\" class=\"headerlink\" title=\"瓶颈分析常用命令\"></a>瓶颈分析常用命令</h1><h2 id=\"获取mysql用户下的进程总数\"><a href=\"#获取mysql用户下的进程总数\" class=\"headerlink\" title=\"获取mysql用户下的进程总数\"></a>获取mysql用户下的进程总数</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | awk '&#123;print $1&#125;' | grep \"mysql\" | grep -v \"grep\" | wc -l</span><br></pre></td></tr></table></figure>\n<h2 id=\"主机性能状态\"><a href=\"#主机性能状态\" class=\"headerlink\" title=\"主机性能状态\"></a>主机性能状态</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uptime</span><br></pre></td></tr></table></figure>\n<h2 id=\"CPU使用率\"><a href=\"#CPU使用率\" class=\"headerlink\" title=\"CPU使用率\"></a>CPU使用率</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top</span><br><span class=\"line\">vmstat</span><br></pre></td></tr></table></figure>\n<h2 id=\"磁盘IO量\"><a href=\"#磁盘IO量\" class=\"headerlink\" title=\"磁盘IO量\"></a>磁盘IO量</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vmstat</span><br><span class=\"line\">iostat</span><br></pre></td></tr></table></figure>\n<h2 id=\"swap进出量\"><a href=\"#swap进出量\" class=\"headerlink\" title=\"swap进出量\"></a>swap进出量</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free -m</span><br></pre></td></tr></table></figure>\n<h1 id=\"数据库性能状态\"><a href=\"#数据库性能状态\" class=\"headerlink\" title=\"数据库性能状态\"></a>数据库性能状态</h1><h2 id=\"QPS\"><a href=\"#QPS\" class=\"headerlink\" title=\"QPS\"></a>QPS</h2><p><strong>方法一 基于 questions  计算qps,基于  com_commit  com_rollback 计算tps</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">questions = <span class=\"keyword\">show</span> <span class=\"keyword\">global</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'questions'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">uptime = <span class=\"keyword\">show</span> <span class=\"keyword\">global</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'uptime'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">qps=questions/uptime</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com_commit = <span class=\"keyword\">show</span> <span class=\"keyword\">global</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'com_commit'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">com_rollback = <span class=\"keyword\">show</span> <span class=\"keyword\">global</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'com_rollback'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">uptime = <span class=\"keyword\">show</span> <span class=\"keyword\">global</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'uptime'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">tps=(com_commit + com_rollback)/uptime</span><br></pre></td></tr></table></figure>\n<p><strong>方法二  基于 com_* 的status 变量计算tps ,qps</strong></p>\n<p>使用如下命令：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">global</span> <span class=\"keyword\">status</span> <span class=\"keyword\">where</span> variable_name <span class=\"keyword\">in</span>(<span class=\"string\">'com_select'</span>,<span class=\"string\">'com_insert'</span>,<span class=\"string\">'com_delete'</span>,<span class=\"string\">'com_update'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">获取间隔1s 的 com_*的值，并作差值运算</span><br><span class=\"line\"></span><br><span class=\"line\">del_diff = (int(mystat2['com_delete'])   - int(mystat1['com_delete']) ) / diff</span><br><span class=\"line\"></span><br><span class=\"line\">ins_diff = (int(mystat2['com_insert'])    - int(mystat1['com_insert']) ) / diff</span><br><span class=\"line\"></span><br><span class=\"line\">sel_diff = (int(mystat2['com_select'])    - int(mystat1['com_select']) ) / diff</span><br><span class=\"line\"></span><br><span class=\"line\">upd_diff = (int(mystat2['com_update'])   - int(mystat1['com_update']) ) / diff</span><br></pre></td></tr></table></figure>\n<p><strong>总结：</strong></p>\n<p>Questions 是记录了从mysqld启动以来所有的select，dml 次数包括show 命令的查询的次数。这样多少有失准确性，比如很多数据库有监控系统在运行，每5秒对数据库进行一次show 查询来获取当前数据库的状态，而这些查询就被记录到QPS,TPS统计中，造成一定的”数据污染”.</p>\n<p>如果数据库中存在比较多的myisam表，则计算还是questions 比较合适。</p>\n<p>如果数据库中存在比较多的innodb表，则计算以com_*数据来源比较合适</p>\n<h2 id=\"TPS\"><a href=\"#TPS\" class=\"headerlink\" title=\"TPS\"></a>TPS</h2><p>TPS = (Com_commit + Com_rollback) / seconds </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Com_commit'</span>; </span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Com_rollback'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"key-Buffer-命中率\"><a href=\"#key-Buffer-命中率\" class=\"headerlink\" title=\"key Buffer 命中率\"></a>key Buffer 命中率</h2><p>key_buffer_read_hits = (1-key_reads / key_read_requests) <em> 100%<br>key_buffer_write_hits = (1-key_writes / key_write_requests) </em> 100%</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Key%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"InnoDB-Buffer命中率\"><a href=\"#InnoDB-Buffer命中率\" class=\"headerlink\" title=\"InnoDB Buffer命中率\"></a>InnoDB Buffer命中率</h2><p>innodb_buffer_read_hits = (1 - innodb_buffer_pool_reads / innodb_buffer_pool_read_requests) * 100%</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'innodb_buffer_pool_read%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Query-Cache命中率\"><a href=\"#Query-Cache命中率\" class=\"headerlink\" title=\"Query Cache命中率\"></a>Query Cache命中率</h2><p>Query_cache_hits = (Qcahce_hits / (Qcache_hits + Qcache_inserts )) * 100%;</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Qcache%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Table-Cache状态量\"><a href=\"#Table-Cache状态量\" class=\"headerlink\" title=\"Table Cache状态量\"></a>Table Cache状态量</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'open%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Thread-Cache-命中率\"><a href=\"#Thread-Cache-命中率\" class=\"headerlink\" title=\"Thread Cache 命中率\"></a>Thread Cache 命中率</h2><p>Thread_cache_hits = (1 - Threads_created / connections ) * 100%</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Thread%'</span>;</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Connections'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"锁定状态\"><a href=\"#锁定状态\" class=\"headerlink\" title=\"锁定状态\"></a>锁定状态</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'%lock%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"复制延时量\"><a href=\"#复制延时量\" class=\"headerlink\" title=\"复制延时量\"></a>复制延时量</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">slave</span> <span class=\"keyword\">status</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tmp-Table-状况-临时表状况\"><a href=\"#Tmp-Table-状况-临时表状况\" class=\"headerlink\" title=\"Tmp Table 状况(临时表状况)\"></a>Tmp Table 状况(临时表状况)</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Create_tmp%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Binlog-Cache-使用状况\"><a href=\"#Binlog-Cache-使用状况\" class=\"headerlink\" title=\"Binlog Cache 使用状况\"></a>Binlog Cache 使用状况</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Binlog_cache%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Innodb-log-waits\"><a href=\"#Innodb-log-waits\" class=\"headerlink\" title=\"Innodb_log_waits\"></a>Innodb_log_waits</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'innodb_log_waits'</span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/li_adou/article/details/78791972\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/li_adou/article/details/78791972</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"性能检测蝉蛹命令\"><a href=\"#性能检测蝉蛹命令\" class=\"headerlink\" title=\"性能检测蝉蛹命令\"></a>性能检测蝉蛹命令</h1><ol>\n<li>show status</li>\n<li>show processlist</li>\n<li>show variables</li>\n</ol>\n<h1 id=\"瓶颈分析常用命令\"><a href=\"#瓶颈分析常用命令\" class=\"headerlink\" title=\"瓶颈分析常用命令\"></a>瓶颈分析常用命令</h1><h2 id=\"获取mysql用户下的进程总数\"><a href=\"#获取mysql用户下的进程总数\" class=\"headerlink\" title=\"获取mysql用户下的进程总数\"></a>获取mysql用户下的进程总数</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | awk '&#123;print $1&#125;' | grep \"mysql\" | grep -v \"grep\" | wc -l</span><br></pre></td></tr></table></figure>\n<h2 id=\"主机性能状态\"><a href=\"#主机性能状态\" class=\"headerlink\" title=\"主机性能状态\"></a>主机性能状态</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uptime</span><br></pre></td></tr></table></figure>\n<h2 id=\"CPU使用率\"><a href=\"#CPU使用率\" class=\"headerlink\" title=\"CPU使用率\"></a>CPU使用率</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top</span><br><span class=\"line\">vmstat</span><br></pre></td></tr></table></figure>\n<h2 id=\"磁盘IO量\"><a href=\"#磁盘IO量\" class=\"headerlink\" title=\"磁盘IO量\"></a>磁盘IO量</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vmstat</span><br><span class=\"line\">iostat</span><br></pre></td></tr></table></figure>\n<h2 id=\"swap进出量\"><a href=\"#swap进出量\" class=\"headerlink\" title=\"swap进出量\"></a>swap进出量</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free -m</span><br></pre></td></tr></table></figure>\n<h1 id=\"数据库性能状态\"><a href=\"#数据库性能状态\" class=\"headerlink\" title=\"数据库性能状态\"></a>数据库性能状态</h1><h2 id=\"QPS\"><a href=\"#QPS\" class=\"headerlink\" title=\"QPS\"></a>QPS</h2><p><strong>方法一 基于 questions  计算qps,基于  com_commit  com_rollback 计算tps</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">questions = <span class=\"keyword\">show</span> <span class=\"keyword\">global</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'questions'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">uptime = <span class=\"keyword\">show</span> <span class=\"keyword\">global</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'uptime'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">qps=questions/uptime</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com_commit = <span class=\"keyword\">show</span> <span class=\"keyword\">global</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'com_commit'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">com_rollback = <span class=\"keyword\">show</span> <span class=\"keyword\">global</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'com_rollback'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">uptime = <span class=\"keyword\">show</span> <span class=\"keyword\">global</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'uptime'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">tps=(com_commit + com_rollback)/uptime</span><br></pre></td></tr></table></figure>\n<p><strong>方法二  基于 com_* 的status 变量计算tps ,qps</strong></p>\n<p>使用如下命令：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">global</span> <span class=\"keyword\">status</span> <span class=\"keyword\">where</span> variable_name <span class=\"keyword\">in</span>(<span class=\"string\">'com_select'</span>,<span class=\"string\">'com_insert'</span>,<span class=\"string\">'com_delete'</span>,<span class=\"string\">'com_update'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">获取间隔1s 的 com_*的值，并作差值运算</span><br><span class=\"line\"></span><br><span class=\"line\">del_diff = (int(mystat2['com_delete'])   - int(mystat1['com_delete']) ) / diff</span><br><span class=\"line\"></span><br><span class=\"line\">ins_diff = (int(mystat2['com_insert'])    - int(mystat1['com_insert']) ) / diff</span><br><span class=\"line\"></span><br><span class=\"line\">sel_diff = (int(mystat2['com_select'])    - int(mystat1['com_select']) ) / diff</span><br><span class=\"line\"></span><br><span class=\"line\">upd_diff = (int(mystat2['com_update'])   - int(mystat1['com_update']) ) / diff</span><br></pre></td></tr></table></figure>\n<p><strong>总结：</strong></p>\n<p>Questions 是记录了从mysqld启动以来所有的select，dml 次数包括show 命令的查询的次数。这样多少有失准确性，比如很多数据库有监控系统在运行，每5秒对数据库进行一次show 查询来获取当前数据库的状态，而这些查询就被记录到QPS,TPS统计中，造成一定的”数据污染”.</p>\n<p>如果数据库中存在比较多的myisam表，则计算还是questions 比较合适。</p>\n<p>如果数据库中存在比较多的innodb表，则计算以com_*数据来源比较合适</p>\n<h2 id=\"TPS\"><a href=\"#TPS\" class=\"headerlink\" title=\"TPS\"></a>TPS</h2><p>TPS = (Com_commit + Com_rollback) / seconds </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Com_commit'</span>; </span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Com_rollback'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"key-Buffer-命中率\"><a href=\"#key-Buffer-命中率\" class=\"headerlink\" title=\"key Buffer 命中率\"></a>key Buffer 命中率</h2><p>key_buffer_read_hits = (1-key_reads / key_read_requests) <em> 100%<br>key_buffer_write_hits = (1-key_writes / key_write_requests) </em> 100%</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Key%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"InnoDB-Buffer命中率\"><a href=\"#InnoDB-Buffer命中率\" class=\"headerlink\" title=\"InnoDB Buffer命中率\"></a>InnoDB Buffer命中率</h2><p>innodb_buffer_read_hits = (1 - innodb_buffer_pool_reads / innodb_buffer_pool_read_requests) * 100%</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'innodb_buffer_pool_read%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Query-Cache命中率\"><a href=\"#Query-Cache命中率\" class=\"headerlink\" title=\"Query Cache命中率\"></a>Query Cache命中率</h2><p>Query_cache_hits = (Qcahce_hits / (Qcache_hits + Qcache_inserts )) * 100%;</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Qcache%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Table-Cache状态量\"><a href=\"#Table-Cache状态量\" class=\"headerlink\" title=\"Table Cache状态量\"></a>Table Cache状态量</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'open%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Thread-Cache-命中率\"><a href=\"#Thread-Cache-命中率\" class=\"headerlink\" title=\"Thread Cache 命中率\"></a>Thread Cache 命中率</h2><p>Thread_cache_hits = (1 - Threads_created / connections ) * 100%</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Thread%'</span>;</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Connections'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"锁定状态\"><a href=\"#锁定状态\" class=\"headerlink\" title=\"锁定状态\"></a>锁定状态</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'%lock%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"复制延时量\"><a href=\"#复制延时量\" class=\"headerlink\" title=\"复制延时量\"></a>复制延时量</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">slave</span> <span class=\"keyword\">status</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tmp-Table-状况-临时表状况\"><a href=\"#Tmp-Table-状况-临时表状况\" class=\"headerlink\" title=\"Tmp Table 状况(临时表状况)\"></a>Tmp Table 状况(临时表状况)</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Create_tmp%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Binlog-Cache-使用状况\"><a href=\"#Binlog-Cache-使用状况\" class=\"headerlink\" title=\"Binlog Cache 使用状况\"></a>Binlog Cache 使用状况</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Binlog_cache%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Innodb-log-waits\"><a href=\"#Innodb-log-waits\" class=\"headerlink\" title=\"Innodb_log_waits\"></a>Innodb_log_waits</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'innodb_log_waits'</span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/li_adou/article/details/78791972\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/li_adou/article/details/78791972</a></p>\n"},{"title":"mysql连接外网安装","date":"2019-12-09T07:24:23.000Z","_content":"\n## 添加 MySQL YUM 源\n\n根据自己的操作系统选择合适的[安装源](https://link.jianshu.com?t=http://dev.mysql.com/downloads/repo/yum/)，和其他公司一样，总会让大家注册账号获取更新，注意是 Oracle 的账号，如果不想注册，下方有直接[下载的地址](https://link.jianshu.com?t=https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm)，下载之后通过 `rpm -Uvh` 安装。\n\n```bash\n$wget 'https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm'\n$sudo rpm -Uvh mysql57-community-release-el7-11.noarch.rpm\n$yum repolist all | grep mysql\nmysql-connectors-community/x86_64 MySQL Connectors Community                  36\nmysql-tools-community/x86_64      MySQL Tools Community                       47\nmysql57-community/x86_64          MySQL 5.7 Community Server                 187\n```\n\n先解释下为什么下载的是 5.7 版本的，现在最新的是 5.7 版本的，当然官网默认都是最新版本的，但是下载的页面也有说明\n\n> The MySQL Yum repository includes the latest versions of:\n>  MySQL 8.0 (Development)\n>  MySQL 5.7 (GA)\n>  MySQL 5.6 (GA)\n>  MySQL 5.5 (GA - Red Hat Enterprise Linux and Oracle Linux Only)\n>  MySQL Cluster 7.5 (GA)\n>  MySQL Cluster 7.6 (Development)\n>  MySQL Workbench\n>  MySQL Fabric\n>  MySQL Router (GA)\n>  MySQL Utilities\n>  MySQL Connector / ODBC\n>  MySQL Connector / Python\n>  MySQL Shell (GA)\n\n也就是说这个安装源包含了上面列举的这些版本，当然包括 5.6 版本的。\n\n## 选择安装版本\n\n如果想安装最新版本的，直接使用 yum 命令即可\n\n```bash\n$sudo yum install mysql-community-server\n```\n\n如果想要安装 5.6 版本的，有2个方法。命令行支持 `yum-config-manager` 命令的话，可以使用如下命令：\n\n```ruby\n$ sudo dnf config-manager --disable mysql57-community\n$ sudo dnf config-manager --enable mysql56-community\n$ yum repolist | grep mysql\nmysql-connectors-community/x86_64 MySQL Connectors Community                  36\nmysql-tools-community/x86_64      MySQL Tools Community                       47\nmysql56-community/x86_64          MySQL 5.6 Community Server                 327\n```\n\n或者直接修改 `/etc/yum.repos.d/mysql-community.repo` 这个文件\n\n```ruby\n# Enable to use MySQL 5.6\n[mysql56-community]\nname=MySQL 5.6 Community Server\nbaseurl=http://repo.mysql.com/yum/mysql-5.6-community/el/7/$basearch/\nenabled=1 #表示当前版本是安装\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql\n\n[mysql57-community]\nname=MySQL 5.7 Community Server\nbaseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/\nenabled=0 #默认这个是 1\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql\n```\n\n通过设置 `enabled` 来决定安装哪个版本。\n\n设置好之后使用 `yum` 安装即可。\n\n## 启动 MySQL 服务\n\n启动命令很简单\n\n```php\n$sudo service mysqld start \n$sudo systemctl start mysqld #CentOS 7\n$sudo systemctl status mysqld\n● mysqld.service - MySQL Community Server\n   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)\n   Active: active (running) since Sat 2017-05-27 12:56:26 CST; 15s ago\n  Process: 2482 ExecStartPost=/usr/bin/mysql-systemd-start post (code=exited, status=0/SUCCESS)\n  Process: 2421 ExecStartPre=/usr/bin/mysql-systemd-start pre (code=exited, status=0/SUCCESS)\n Main PID: 2481 (mysqld_safe)\n   CGroup: /system.slice/mysqld.service\n           ├─2481 /bin/sh /usr/bin/mysqld_safe --basedir=/usr\n           └─2647 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql --plugin-dir=/usr/...\n```\n\n说明已经正在运行中了。\n\n对于 MySQL 5.7 版本，启动的时候如果数据为空的，则会出现如下提示\n\n> The server is initialized.\n>  An SSL certificate and key files are generated in the data directory.\n>  The validate_password plugin is installed and enabled.\n>  A superuser account 'root'@'localhost' is created. A password for the superuser is set and stored in the error log [file.To](https://link.jianshu.com?t=http://file.To) reveal it, use the following command:\n>  `sudo grep 'temporary password' /var/log/mysqld.log`\n\n简单的说就是服务安装好了，SSL 认证的文件会在 data 目录中生存，密码不要设置的太简单了，初始密码通过下面的命令查看，赶紧去改密码吧。\n 安装提示，查看密码，登录数据库，然后修改密码：\n\n```ruby\n$ mysql -uroot -p  #输入查看到的密码\nmysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass4!';\n```\n\n## MySQL 5.6 的安全设置\n\n由于 5.7 版本在安装的时候就设置好了，不需要额外设置，但是 5.6 版本建议从安全角度完善下，运行官方脚本即可\n\n```ruby\n$ mysql_secure_installation\n```\n\n会提示设置5个关键位置\n\n1. 设置 root 密码\n2. 禁止 root 账号远程登录\n3. 禁止匿名账号（anonymous）登录\n4. 删除测试库\n5. 是否确认修改\n\n## 安装第三方组件\n\n查看 yum 源中有哪些默认的组件：\n\n```php\n$ yum --disablerepo=\\* --enablerepo='mysql*-community*' list available\n```\n\n需要安装直接通过 `yum` 命令安装即可。\n\n## 修改编码\n\n在 `/etc/my.cnf` 中设置默认的编码\n\n```csharp\n[client]\ndefault-character-set = utf8\n\n[mysqld]\ndefault-storage-engine = INNODB\ncharacter-set-server = utf8\ncollation-server = utf8_general_ci #不区分大小写\ncollation-server =  utf8_bin #区分大小写\ncollation-server = utf8_unicode_ci #比 utf8_general_ci 更准确\n```\n\n## 创建数据库和用户\n\n创建数据库\n\n```bash\nCREATE DATABASE <datebasename> CHARACTER SET utf8;\nCREATE USER 'username'@'host' IDENTIFIED BY 'password';\nGRANT privileges ON databasename.tablename TO 'username'@'host';\nSHOW GRANTS FOR 'username'@'host';\nREVOKE privilege ON databasename.tablename FROM 'username'@'host';\nDROP USER 'username'@'host';\n```\n\n其中\n\n- username：你将创建的用户名\n- host：指定该用户在哪个主机上可以登陆，如果是本地用户可用 localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符 %\n- password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器\n- privileges：用户的操作权限，如 SELECT，INSERT，UPDATE 等，如果要授予所的权限则使用ALL\n- databasename：数据库名\n- tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用 * 表示，如 *.*\n\n# 参考\n\n<https://www.jianshu.com/p/7cccdaa2d177>","source":"_posts/mysql/mysql连接外网安装.md","raw":"---\ntitle: mysql连接外网安装\ndate: 2019-12-09 15:24:23\ntags:\n- mysql\n---\n\n## 添加 MySQL YUM 源\n\n根据自己的操作系统选择合适的[安装源](https://link.jianshu.com?t=http://dev.mysql.com/downloads/repo/yum/)，和其他公司一样，总会让大家注册账号获取更新，注意是 Oracle 的账号，如果不想注册，下方有直接[下载的地址](https://link.jianshu.com?t=https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm)，下载之后通过 `rpm -Uvh` 安装。\n\n```bash\n$wget 'https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm'\n$sudo rpm -Uvh mysql57-community-release-el7-11.noarch.rpm\n$yum repolist all | grep mysql\nmysql-connectors-community/x86_64 MySQL Connectors Community                  36\nmysql-tools-community/x86_64      MySQL Tools Community                       47\nmysql57-community/x86_64          MySQL 5.7 Community Server                 187\n```\n\n先解释下为什么下载的是 5.7 版本的，现在最新的是 5.7 版本的，当然官网默认都是最新版本的，但是下载的页面也有说明\n\n> The MySQL Yum repository includes the latest versions of:\n>  MySQL 8.0 (Development)\n>  MySQL 5.7 (GA)\n>  MySQL 5.6 (GA)\n>  MySQL 5.5 (GA - Red Hat Enterprise Linux and Oracle Linux Only)\n>  MySQL Cluster 7.5 (GA)\n>  MySQL Cluster 7.6 (Development)\n>  MySQL Workbench\n>  MySQL Fabric\n>  MySQL Router (GA)\n>  MySQL Utilities\n>  MySQL Connector / ODBC\n>  MySQL Connector / Python\n>  MySQL Shell (GA)\n\n也就是说这个安装源包含了上面列举的这些版本，当然包括 5.6 版本的。\n\n## 选择安装版本\n\n如果想安装最新版本的，直接使用 yum 命令即可\n\n```bash\n$sudo yum install mysql-community-server\n```\n\n如果想要安装 5.6 版本的，有2个方法。命令行支持 `yum-config-manager` 命令的话，可以使用如下命令：\n\n```ruby\n$ sudo dnf config-manager --disable mysql57-community\n$ sudo dnf config-manager --enable mysql56-community\n$ yum repolist | grep mysql\nmysql-connectors-community/x86_64 MySQL Connectors Community                  36\nmysql-tools-community/x86_64      MySQL Tools Community                       47\nmysql56-community/x86_64          MySQL 5.6 Community Server                 327\n```\n\n或者直接修改 `/etc/yum.repos.d/mysql-community.repo` 这个文件\n\n```ruby\n# Enable to use MySQL 5.6\n[mysql56-community]\nname=MySQL 5.6 Community Server\nbaseurl=http://repo.mysql.com/yum/mysql-5.6-community/el/7/$basearch/\nenabled=1 #表示当前版本是安装\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql\n\n[mysql57-community]\nname=MySQL 5.7 Community Server\nbaseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/\nenabled=0 #默认这个是 1\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql\n```\n\n通过设置 `enabled` 来决定安装哪个版本。\n\n设置好之后使用 `yum` 安装即可。\n\n## 启动 MySQL 服务\n\n启动命令很简单\n\n```php\n$sudo service mysqld start \n$sudo systemctl start mysqld #CentOS 7\n$sudo systemctl status mysqld\n● mysqld.service - MySQL Community Server\n   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)\n   Active: active (running) since Sat 2017-05-27 12:56:26 CST; 15s ago\n  Process: 2482 ExecStartPost=/usr/bin/mysql-systemd-start post (code=exited, status=0/SUCCESS)\n  Process: 2421 ExecStartPre=/usr/bin/mysql-systemd-start pre (code=exited, status=0/SUCCESS)\n Main PID: 2481 (mysqld_safe)\n   CGroup: /system.slice/mysqld.service\n           ├─2481 /bin/sh /usr/bin/mysqld_safe --basedir=/usr\n           └─2647 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql --plugin-dir=/usr/...\n```\n\n说明已经正在运行中了。\n\n对于 MySQL 5.7 版本，启动的时候如果数据为空的，则会出现如下提示\n\n> The server is initialized.\n>  An SSL certificate and key files are generated in the data directory.\n>  The validate_password plugin is installed and enabled.\n>  A superuser account 'root'@'localhost' is created. A password for the superuser is set and stored in the error log [file.To](https://link.jianshu.com?t=http://file.To) reveal it, use the following command:\n>  `sudo grep 'temporary password' /var/log/mysqld.log`\n\n简单的说就是服务安装好了，SSL 认证的文件会在 data 目录中生存，密码不要设置的太简单了，初始密码通过下面的命令查看，赶紧去改密码吧。\n 安装提示，查看密码，登录数据库，然后修改密码：\n\n```ruby\n$ mysql -uroot -p  #输入查看到的密码\nmysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass4!';\n```\n\n## MySQL 5.6 的安全设置\n\n由于 5.7 版本在安装的时候就设置好了，不需要额外设置，但是 5.6 版本建议从安全角度完善下，运行官方脚本即可\n\n```ruby\n$ mysql_secure_installation\n```\n\n会提示设置5个关键位置\n\n1. 设置 root 密码\n2. 禁止 root 账号远程登录\n3. 禁止匿名账号（anonymous）登录\n4. 删除测试库\n5. 是否确认修改\n\n## 安装第三方组件\n\n查看 yum 源中有哪些默认的组件：\n\n```php\n$ yum --disablerepo=\\* --enablerepo='mysql*-community*' list available\n```\n\n需要安装直接通过 `yum` 命令安装即可。\n\n## 修改编码\n\n在 `/etc/my.cnf` 中设置默认的编码\n\n```csharp\n[client]\ndefault-character-set = utf8\n\n[mysqld]\ndefault-storage-engine = INNODB\ncharacter-set-server = utf8\ncollation-server = utf8_general_ci #不区分大小写\ncollation-server =  utf8_bin #区分大小写\ncollation-server = utf8_unicode_ci #比 utf8_general_ci 更准确\n```\n\n## 创建数据库和用户\n\n创建数据库\n\n```bash\nCREATE DATABASE <datebasename> CHARACTER SET utf8;\nCREATE USER 'username'@'host' IDENTIFIED BY 'password';\nGRANT privileges ON databasename.tablename TO 'username'@'host';\nSHOW GRANTS FOR 'username'@'host';\nREVOKE privilege ON databasename.tablename FROM 'username'@'host';\nDROP USER 'username'@'host';\n```\n\n其中\n\n- username：你将创建的用户名\n- host：指定该用户在哪个主机上可以登陆，如果是本地用户可用 localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符 %\n- password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器\n- privileges：用户的操作权限，如 SELECT，INSERT，UPDATE 等，如果要授予所的权限则使用ALL\n- databasename：数据库名\n- tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用 * 表示，如 *.*\n\n# 参考\n\n<https://www.jianshu.com/p/7cccdaa2d177>","slug":"mysql/mysql连接外网安装","published":1,"updated":"2020-08-27T15:25:48.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblmz00404tjeijk77c7o","content":"<h2 id=\"添加-MySQL-YUM-源\"><a href=\"#添加-MySQL-YUM-源\" class=\"headerlink\" title=\"添加 MySQL YUM 源\"></a>添加 MySQL YUM 源</h2><p>根据自己的操作系统选择合适的<a href=\"https://link.jianshu.com?t=http://dev.mysql.com/downloads/repo/yum/\" target=\"_blank\" rel=\"noopener\">安装源</a>，和其他公司一样，总会让大家注册账号获取更新，注意是 Oracle 的账号，如果不想注册，下方有直接<a href=\"https://link.jianshu.com?t=https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm\" target=\"_blank\" rel=\"noopener\">下载的地址</a>，下载之后通过 <code>rpm -Uvh</code> 安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$wget</span> <span class=\"string\">'https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm'</span></span><br><span class=\"line\"><span class=\"variable\">$sudo</span> rpm -Uvh mysql57-community-release-el7-11.noarch.rpm</span><br><span class=\"line\"><span class=\"variable\">$yum</span> repolist all | grep mysql</span><br><span class=\"line\">mysql-connectors-community/x86_64 MySQL Connectors Community                  36</span><br><span class=\"line\">mysql-tools-community/x86_64      MySQL Tools Community                       47</span><br><span class=\"line\">mysql57-community/x86_64          MySQL 5.7 Community Server                 187</span><br></pre></td></tr></table></figure>\n<p>先解释下为什么下载的是 5.7 版本的，现在最新的是 5.7 版本的，当然官网默认都是最新版本的，但是下载的页面也有说明</p>\n<blockquote>\n<p>The MySQL Yum repository includes the latest versions of:<br> MySQL 8.0 (Development)<br> MySQL 5.7 (GA)<br> MySQL 5.6 (GA)<br> MySQL 5.5 (GA - Red Hat Enterprise Linux and Oracle Linux Only)<br> MySQL Cluster 7.5 (GA)<br> MySQL Cluster 7.6 (Development)<br> MySQL Workbench<br> MySQL Fabric<br> MySQL Router (GA)<br> MySQL Utilities<br> MySQL Connector / ODBC<br> MySQL Connector / Python<br> MySQL Shell (GA)</p>\n</blockquote>\n<p>也就是说这个安装源包含了上面列举的这些版本，当然包括 5.6 版本的。</p>\n<h2 id=\"选择安装版本\"><a href=\"#选择安装版本\" class=\"headerlink\" title=\"选择安装版本\"></a>选择安装版本</h2><p>如果想安装最新版本的，直接使用 yum 命令即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$sudo</span> yum install mysql-community-server</span><br></pre></td></tr></table></figure>\n<p>如果想要安装 5.6 版本的，有2个方法。命令行支持 <code>yum-config-manager</code> 命令的话，可以使用如下命令：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo dnf config-manager --disable mysql57-community</span><br><span class=\"line\">$ sudo dnf config-manager --enable mysql56-community</span><br><span class=\"line\">$ yum repolist <span class=\"params\">| grep mysql</span></span><br><span class=\"line\"><span class=\"params\">mysql-connectors-community/x86_64 MySQL Connectors Community                  36</span></span><br><span class=\"line\"><span class=\"params\">mysql-tools-community/x86_64      MySQL Tools Community                       47</span></span><br><span class=\"line\"><span class=\"params\">mysql56-community/x86_64          MySQL 5.6 Community Server                 327</span></span><br></pre></td></tr></table></figure>\n<p>或者直接修改 <code>/etc/yum.repos.d/mysql-community.repo</code> 这个文件</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Enable to use MySQL 5.6</span></span><br><span class=\"line\">[mysql56-community]</span><br><span class=\"line\">name=MySQL <span class=\"number\">5.6</span> Community Server</span><br><span class=\"line\">baseurl=<span class=\"symbol\">http:</span>/<span class=\"regexp\">/repo.mysql.com/yum</span><span class=\"regexp\">/mysql-5.6-community/el</span><span class=\"regexp\">/7/</span>$basearch/</span><br><span class=\"line\">enabled=<span class=\"number\">1</span> <span class=\"comment\">#表示当前版本是安装</span></span><br><span class=\"line\">gpgcheck=<span class=\"number\">1</span></span><br><span class=\"line\">gpgkey=<span class=\"symbol\">file:</span>/<span class=\"regexp\">//etc</span><span class=\"regexp\">/pki/rpm</span>-gpg/RPM-GPG-KEY-mysql</span><br><span class=\"line\"></span><br><span class=\"line\">[mysql57-community]</span><br><span class=\"line\">name=MySQL <span class=\"number\">5.7</span> Community Server</span><br><span class=\"line\">baseurl=<span class=\"symbol\">http:</span>/<span class=\"regexp\">/repo.mysql.com/yum</span><span class=\"regexp\">/mysql-5.7-community/el</span><span class=\"regexp\">/7/</span>$basearch/</span><br><span class=\"line\">enabled=<span class=\"number\">0</span> <span class=\"comment\">#默认这个是 1</span></span><br><span class=\"line\">gpgcheck=<span class=\"number\">1</span></span><br><span class=\"line\">gpgkey=<span class=\"symbol\">file:</span>/<span class=\"regexp\">//etc</span><span class=\"regexp\">/pki/rpm</span>-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></table></figure>\n<p>通过设置 <code>enabled</code> 来决定安装哪个版本。</p>\n<p>设置好之后使用 <code>yum</code> 安装即可。</p>\n<h2 id=\"启动-MySQL-服务\"><a href=\"#启动-MySQL-服务\" class=\"headerlink\" title=\"启动 MySQL 服务\"></a>启动 MySQL 服务</h2><p>启动命令很简单</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sudo service mysqld start </span><br><span class=\"line\">$sudo systemctl start mysqld <span class=\"comment\">#CentOS 7</span></span><br><span class=\"line\">$sudo systemctl status mysqld</span><br><span class=\"line\">● mysqld.service - MySQL Community Server</span><br><span class=\"line\">   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Sat <span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-27</span> <span class=\"number\">12</span>:<span class=\"number\">56</span>:<span class=\"number\">26</span> CST; <span class=\"number\">15</span>s ago</span><br><span class=\"line\">  Process: <span class=\"number\">2482</span> ExecStartPost=/usr/bin/mysql-systemd-start post (code=exited, status=<span class=\"number\">0</span>/SUCCESS)</span><br><span class=\"line\">  Process: <span class=\"number\">2421</span> ExecStartPre=/usr/bin/mysql-systemd-start pre (code=exited, status=<span class=\"number\">0</span>/SUCCESS)</span><br><span class=\"line\"> Main PID: <span class=\"number\">2481</span> (mysqld_safe)</span><br><span class=\"line\">   CGroup: /system.slice/mysqld.service</span><br><span class=\"line\">           ├─<span class=\"number\">2481</span> /bin/sh /usr/bin/mysqld_safe --basedir=/usr</span><br><span class=\"line\">           └─<span class=\"number\">2647</span> /usr/sbin/mysqld --basedir=/usr --datadir=/<span class=\"keyword\">var</span>/lib/mysql --plugin-dir=/usr/...</span><br></pre></td></tr></table></figure>\n<p>说明已经正在运行中了。</p>\n<p>对于 MySQL 5.7 版本，启动的时候如果数据为空的，则会出现如下提示</p>\n<blockquote>\n<p>The server is initialized.<br> An SSL certificate and key files are generated in the data directory.<br> The validate_password plugin is installed and enabled.<br> A superuser account ‘root‘@’localhost’ is created. A password for the superuser is set and stored in the error log <a href=\"https://link.jianshu.com?t=http://file.To\" target=\"_blank\" rel=\"noopener\">file.To</a> reveal it, use the following command:<br> <code>sudo grep &#39;temporary password&#39; /var/log/mysqld.log</code></p>\n</blockquote>\n<p>简单的说就是服务安装好了，SSL 认证的文件会在 data 目录中生存，密码不要设置的太简单了，初始密码通过下面的命令查看，赶紧去改密码吧。<br> 安装提示，查看密码，登录数据库，然后修改密码：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -uroot -p  <span class=\"comment\">#输入查看到的密码</span></span><br><span class=\"line\">mysql&gt; ALTER USER <span class=\"string\">'root'</span>@<span class=\"string\">'localhost'</span> IDENTIFIED BY <span class=\"string\">'MyNewPass4!'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-5-6-的安全设置\"><a href=\"#MySQL-5-6-的安全设置\" class=\"headerlink\" title=\"MySQL 5.6 的安全设置\"></a>MySQL 5.6 的安全设置</h2><p>由于 5.7 版本在安装的时候就设置好了，不需要额外设置，但是 5.6 版本建议从安全角度完善下，运行官方脚本即可</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql_secure_installation</span><br></pre></td></tr></table></figure>\n<p>会提示设置5个关键位置</p>\n<ol>\n<li>设置 root 密码</li>\n<li>禁止 root 账号远程登录</li>\n<li>禁止匿名账号（anonymous）登录</li>\n<li>删除测试库</li>\n<li>是否确认修改</li>\n</ol>\n<h2 id=\"安装第三方组件\"><a href=\"#安装第三方组件\" class=\"headerlink\" title=\"安装第三方组件\"></a>安装第三方组件</h2><p>查看 yum 源中有哪些默认的组件：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum --disablerepo=\\* --enablerepo=<span class=\"string\">'mysql*-community*'</span> <span class=\"keyword\">list</span> available</span><br></pre></td></tr></table></figure>\n<p>需要安装直接通过 <code>yum</code> 命令安装即可。</p>\n<h2 id=\"修改编码\"><a href=\"#修改编码\" class=\"headerlink\" title=\"修改编码\"></a>修改编码</h2><p>在 <code>/etc/my.cnf</code> 中设置默认的编码</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">client</span>]</span><br><span class=\"line\"><span class=\"keyword\">default</span>-character-<span class=\"keyword\">set</span> = utf8</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"meta\">mysqld</span>]</span><br><span class=\"line\"><span class=\"keyword\">default</span>-storage-engine = INNODB</span><br><span class=\"line\">character-<span class=\"keyword\">set</span>-server = utf8</span><br><span class=\"line\">collation-server = utf8_general_ci <span class=\"meta\">#不区分大小写</span></span><br><span class=\"line\">collation-server =  utf8_bin <span class=\"meta\">#区分大小写</span></span><br><span class=\"line\">collation-server = utf8_unicode_ci <span class=\"meta\">#比 utf8_general_ci 更准确</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"创建数据库和用户\"><a href=\"#创建数据库和用户\" class=\"headerlink\" title=\"创建数据库和用户\"></a>创建数据库和用户</h2><p>创建数据库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE &lt;datebasename&gt; CHARACTER SET utf8;</span><br><span class=\"line\">CREATE USER <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span> IDENTIFIED BY <span class=\"string\">'password'</span>;</span><br><span class=\"line\">GRANT privileges ON databasename.tablename TO <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span>;</span><br><span class=\"line\">SHOW GRANTS FOR <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span>;</span><br><span class=\"line\">REVOKE privilege ON databasename.tablename FROM <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span>;</span><br><span class=\"line\">DROP USER <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span>;</span><br></pre></td></tr></table></figure>\n<p>其中</p>\n<ul>\n<li>username：你将创建的用户名</li>\n<li>host：指定该用户在哪个主机上可以登陆，如果是本地用户可用 localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符 %</li>\n<li>password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器</li>\n<li>privileges：用户的操作权限，如 SELECT，INSERT，UPDATE 等，如果要授予所的权限则使用ALL</li>\n<li>databasename：数据库名</li>\n<li>tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用 <em> 表示，如 </em>.*</li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.jianshu.com/p/7cccdaa2d177\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/7cccdaa2d177</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"添加-MySQL-YUM-源\"><a href=\"#添加-MySQL-YUM-源\" class=\"headerlink\" title=\"添加 MySQL YUM 源\"></a>添加 MySQL YUM 源</h2><p>根据自己的操作系统选择合适的<a href=\"https://link.jianshu.com?t=http://dev.mysql.com/downloads/repo/yum/\" target=\"_blank\" rel=\"noopener\">安装源</a>，和其他公司一样，总会让大家注册账号获取更新，注意是 Oracle 的账号，如果不想注册，下方有直接<a href=\"https://link.jianshu.com?t=https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm\" target=\"_blank\" rel=\"noopener\">下载的地址</a>，下载之后通过 <code>rpm -Uvh</code> 安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$wget</span> <span class=\"string\">'https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm'</span></span><br><span class=\"line\"><span class=\"variable\">$sudo</span> rpm -Uvh mysql57-community-release-el7-11.noarch.rpm</span><br><span class=\"line\"><span class=\"variable\">$yum</span> repolist all | grep mysql</span><br><span class=\"line\">mysql-connectors-community/x86_64 MySQL Connectors Community                  36</span><br><span class=\"line\">mysql-tools-community/x86_64      MySQL Tools Community                       47</span><br><span class=\"line\">mysql57-community/x86_64          MySQL 5.7 Community Server                 187</span><br></pre></td></tr></table></figure>\n<p>先解释下为什么下载的是 5.7 版本的，现在最新的是 5.7 版本的，当然官网默认都是最新版本的，但是下载的页面也有说明</p>\n<blockquote>\n<p>The MySQL Yum repository includes the latest versions of:<br> MySQL 8.0 (Development)<br> MySQL 5.7 (GA)<br> MySQL 5.6 (GA)<br> MySQL 5.5 (GA - Red Hat Enterprise Linux and Oracle Linux Only)<br> MySQL Cluster 7.5 (GA)<br> MySQL Cluster 7.6 (Development)<br> MySQL Workbench<br> MySQL Fabric<br> MySQL Router (GA)<br> MySQL Utilities<br> MySQL Connector / ODBC<br> MySQL Connector / Python<br> MySQL Shell (GA)</p>\n</blockquote>\n<p>也就是说这个安装源包含了上面列举的这些版本，当然包括 5.6 版本的。</p>\n<h2 id=\"选择安装版本\"><a href=\"#选择安装版本\" class=\"headerlink\" title=\"选择安装版本\"></a>选择安装版本</h2><p>如果想安装最新版本的，直接使用 yum 命令即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$sudo</span> yum install mysql-community-server</span><br></pre></td></tr></table></figure>\n<p>如果想要安装 5.6 版本的，有2个方法。命令行支持 <code>yum-config-manager</code> 命令的话，可以使用如下命令：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo dnf config-manager --disable mysql57-community</span><br><span class=\"line\">$ sudo dnf config-manager --enable mysql56-community</span><br><span class=\"line\">$ yum repolist <span class=\"params\">| grep mysql</span></span><br><span class=\"line\"><span class=\"params\">mysql-connectors-community/x86_64 MySQL Connectors Community                  36</span></span><br><span class=\"line\"><span class=\"params\">mysql-tools-community/x86_64      MySQL Tools Community                       47</span></span><br><span class=\"line\"><span class=\"params\">mysql56-community/x86_64          MySQL 5.6 Community Server                 327</span></span><br></pre></td></tr></table></figure>\n<p>或者直接修改 <code>/etc/yum.repos.d/mysql-community.repo</code> 这个文件</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Enable to use MySQL 5.6</span></span><br><span class=\"line\">[mysql56-community]</span><br><span class=\"line\">name=MySQL <span class=\"number\">5.6</span> Community Server</span><br><span class=\"line\">baseurl=<span class=\"symbol\">http:</span>/<span class=\"regexp\">/repo.mysql.com/yum</span><span class=\"regexp\">/mysql-5.6-community/el</span><span class=\"regexp\">/7/</span>$basearch/</span><br><span class=\"line\">enabled=<span class=\"number\">1</span> <span class=\"comment\">#表示当前版本是安装</span></span><br><span class=\"line\">gpgcheck=<span class=\"number\">1</span></span><br><span class=\"line\">gpgkey=<span class=\"symbol\">file:</span>/<span class=\"regexp\">//etc</span><span class=\"regexp\">/pki/rpm</span>-gpg/RPM-GPG-KEY-mysql</span><br><span class=\"line\"></span><br><span class=\"line\">[mysql57-community]</span><br><span class=\"line\">name=MySQL <span class=\"number\">5.7</span> Community Server</span><br><span class=\"line\">baseurl=<span class=\"symbol\">http:</span>/<span class=\"regexp\">/repo.mysql.com/yum</span><span class=\"regexp\">/mysql-5.7-community/el</span><span class=\"regexp\">/7/</span>$basearch/</span><br><span class=\"line\">enabled=<span class=\"number\">0</span> <span class=\"comment\">#默认这个是 1</span></span><br><span class=\"line\">gpgcheck=<span class=\"number\">1</span></span><br><span class=\"line\">gpgkey=<span class=\"symbol\">file:</span>/<span class=\"regexp\">//etc</span><span class=\"regexp\">/pki/rpm</span>-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></table></figure>\n<p>通过设置 <code>enabled</code> 来决定安装哪个版本。</p>\n<p>设置好之后使用 <code>yum</code> 安装即可。</p>\n<h2 id=\"启动-MySQL-服务\"><a href=\"#启动-MySQL-服务\" class=\"headerlink\" title=\"启动 MySQL 服务\"></a>启动 MySQL 服务</h2><p>启动命令很简单</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sudo service mysqld start </span><br><span class=\"line\">$sudo systemctl start mysqld <span class=\"comment\">#CentOS 7</span></span><br><span class=\"line\">$sudo systemctl status mysqld</span><br><span class=\"line\">● mysqld.service - MySQL Community Server</span><br><span class=\"line\">   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)</span><br><span class=\"line\">   Active: active (running) since Sat <span class=\"number\">2017</span><span class=\"number\">-05</span><span class=\"number\">-27</span> <span class=\"number\">12</span>:<span class=\"number\">56</span>:<span class=\"number\">26</span> CST; <span class=\"number\">15</span>s ago</span><br><span class=\"line\">  Process: <span class=\"number\">2482</span> ExecStartPost=/usr/bin/mysql-systemd-start post (code=exited, status=<span class=\"number\">0</span>/SUCCESS)</span><br><span class=\"line\">  Process: <span class=\"number\">2421</span> ExecStartPre=/usr/bin/mysql-systemd-start pre (code=exited, status=<span class=\"number\">0</span>/SUCCESS)</span><br><span class=\"line\"> Main PID: <span class=\"number\">2481</span> (mysqld_safe)</span><br><span class=\"line\">   CGroup: /system.slice/mysqld.service</span><br><span class=\"line\">           ├─<span class=\"number\">2481</span> /bin/sh /usr/bin/mysqld_safe --basedir=/usr</span><br><span class=\"line\">           └─<span class=\"number\">2647</span> /usr/sbin/mysqld --basedir=/usr --datadir=/<span class=\"keyword\">var</span>/lib/mysql --plugin-dir=/usr/...</span><br></pre></td></tr></table></figure>\n<p>说明已经正在运行中了。</p>\n<p>对于 MySQL 5.7 版本，启动的时候如果数据为空的，则会出现如下提示</p>\n<blockquote>\n<p>The server is initialized.<br> An SSL certificate and key files are generated in the data directory.<br> The validate_password plugin is installed and enabled.<br> A superuser account ‘root‘@’localhost’ is created. A password for the superuser is set and stored in the error log <a href=\"https://link.jianshu.com?t=http://file.To\" target=\"_blank\" rel=\"noopener\">file.To</a> reveal it, use the following command:<br> <code>sudo grep &#39;temporary password&#39; /var/log/mysqld.log</code></p>\n</blockquote>\n<p>简单的说就是服务安装好了，SSL 认证的文件会在 data 目录中生存，密码不要设置的太简单了，初始密码通过下面的命令查看，赶紧去改密码吧。<br> 安装提示，查看密码，登录数据库，然后修改密码：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -uroot -p  <span class=\"comment\">#输入查看到的密码</span></span><br><span class=\"line\">mysql&gt; ALTER USER <span class=\"string\">'root'</span>@<span class=\"string\">'localhost'</span> IDENTIFIED BY <span class=\"string\">'MyNewPass4!'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"MySQL-5-6-的安全设置\"><a href=\"#MySQL-5-6-的安全设置\" class=\"headerlink\" title=\"MySQL 5.6 的安全设置\"></a>MySQL 5.6 的安全设置</h2><p>由于 5.7 版本在安装的时候就设置好了，不需要额外设置，但是 5.6 版本建议从安全角度完善下，运行官方脚本即可</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql_secure_installation</span><br></pre></td></tr></table></figure>\n<p>会提示设置5个关键位置</p>\n<ol>\n<li>设置 root 密码</li>\n<li>禁止 root 账号远程登录</li>\n<li>禁止匿名账号（anonymous）登录</li>\n<li>删除测试库</li>\n<li>是否确认修改</li>\n</ol>\n<h2 id=\"安装第三方组件\"><a href=\"#安装第三方组件\" class=\"headerlink\" title=\"安装第三方组件\"></a>安装第三方组件</h2><p>查看 yum 源中有哪些默认的组件：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum --disablerepo=\\* --enablerepo=<span class=\"string\">'mysql*-community*'</span> <span class=\"keyword\">list</span> available</span><br></pre></td></tr></table></figure>\n<p>需要安装直接通过 <code>yum</code> 命令安装即可。</p>\n<h2 id=\"修改编码\"><a href=\"#修改编码\" class=\"headerlink\" title=\"修改编码\"></a>修改编码</h2><p>在 <code>/etc/my.cnf</code> 中设置默认的编码</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">client</span>]</span><br><span class=\"line\"><span class=\"keyword\">default</span>-character-<span class=\"keyword\">set</span> = utf8</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"meta\">mysqld</span>]</span><br><span class=\"line\"><span class=\"keyword\">default</span>-storage-engine = INNODB</span><br><span class=\"line\">character-<span class=\"keyword\">set</span>-server = utf8</span><br><span class=\"line\">collation-server = utf8_general_ci <span class=\"meta\">#不区分大小写</span></span><br><span class=\"line\">collation-server =  utf8_bin <span class=\"meta\">#区分大小写</span></span><br><span class=\"line\">collation-server = utf8_unicode_ci <span class=\"meta\">#比 utf8_general_ci 更准确</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"创建数据库和用户\"><a href=\"#创建数据库和用户\" class=\"headerlink\" title=\"创建数据库和用户\"></a>创建数据库和用户</h2><p>创建数据库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE &lt;datebasename&gt; CHARACTER SET utf8;</span><br><span class=\"line\">CREATE USER <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span> IDENTIFIED BY <span class=\"string\">'password'</span>;</span><br><span class=\"line\">GRANT privileges ON databasename.tablename TO <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span>;</span><br><span class=\"line\">SHOW GRANTS FOR <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span>;</span><br><span class=\"line\">REVOKE privilege ON databasename.tablename FROM <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span>;</span><br><span class=\"line\">DROP USER <span class=\"string\">'username'</span>@<span class=\"string\">'host'</span>;</span><br></pre></td></tr></table></figure>\n<p>其中</p>\n<ul>\n<li>username：你将创建的用户名</li>\n<li>host：指定该用户在哪个主机上可以登陆，如果是本地用户可用 localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符 %</li>\n<li>password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器</li>\n<li>privileges：用户的操作权限，如 SELECT，INSERT，UPDATE 等，如果要授予所的权限则使用ALL</li>\n<li>databasename：数据库名</li>\n<li>tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用 <em> 表示，如 </em>.*</li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.jianshu.com/p/7cccdaa2d177\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/7cccdaa2d177</a></p>\n"},{"title":"nginx配置","date":"2018-12-05T13:47:32.000Z","_content":"\n## 配置web服务器\n\n```\nserver {\n    listen      80;\n    server_name api.lufficc.com  *.lufficc.com;\n    location /images/ {\n        root /data;\n    }\n\n    location / {\n        proxy_pass https://lufficc.com;\n    }\n}\n```\n\n## 反向代理\n\n```\nserver{\n      listen 80;\n      server_name search.lufficc.com;\n      location / {\n              proxy_pass https://www.baidu.com;\n      }\n}\n```\n\n# 参考\n\n> https://lufficc.com/blog/configure-nginx-as-a-web-server\n>\n> https://blog.csdn.net/hj7jay/article/details/53905943 http://www.nginx.cn/76.html","source":"_posts/nginx/nginx配置.md","raw":"---\ntitle: nginx配置\ndate: 2018-12-05 21:47:32\ntags:\n- web\n- linux\n---\n\n## 配置web服务器\n\n```\nserver {\n    listen      80;\n    server_name api.lufficc.com  *.lufficc.com;\n    location /images/ {\n        root /data;\n    }\n\n    location / {\n        proxy_pass https://lufficc.com;\n    }\n}\n```\n\n## 反向代理\n\n```\nserver{\n      listen 80;\n      server_name search.lufficc.com;\n      location / {\n              proxy_pass https://www.baidu.com;\n      }\n}\n```\n\n# 参考\n\n> https://lufficc.com/blog/configure-nginx-as-a-web-server\n>\n> https://blog.csdn.net/hj7jay/article/details/53905943 http://www.nginx.cn/76.html","slug":"nginx/nginx配置","published":1,"updated":"2019-07-22T08:16:14.981Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbln000424tjee51tbbr9","content":"<h2 id=\"配置web服务器\"><a href=\"#配置web服务器\" class=\"headerlink\" title=\"配置web服务器\"></a>配置web服务器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      80;</span><br><span class=\"line\">    server_name api.lufficc.com  *.lufficc.com;</span><br><span class=\"line\">    location /images/ &#123;</span><br><span class=\"line\">        root /data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass https://lufficc.com;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">      listen 80;</span><br><span class=\"line\">      server_name search.lufficc.com;</span><br><span class=\"line\">      location / &#123;</span><br><span class=\"line\">              proxy_pass https://www.baidu.com;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://lufficc.com/blog/configure-nginx-as-a-web-server\" target=\"_blank\" rel=\"noopener\">https://lufficc.com/blog/configure-nginx-as-a-web-server</a></p>\n<p><a href=\"https://blog.csdn.net/hj7jay/article/details/53905943\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/hj7jay/article/details/53905943</a> <a href=\"http://www.nginx.cn/76.html\" target=\"_blank\" rel=\"noopener\">http://www.nginx.cn/76.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"配置web服务器\"><a href=\"#配置web服务器\" class=\"headerlink\" title=\"配置web服务器\"></a>配置web服务器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      80;</span><br><span class=\"line\">    server_name api.lufficc.com  *.lufficc.com;</span><br><span class=\"line\">    location /images/ &#123;</span><br><span class=\"line\">        root /data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass https://lufficc.com;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">      listen 80;</span><br><span class=\"line\">      server_name search.lufficc.com;</span><br><span class=\"line\">      location / &#123;</span><br><span class=\"line\">              proxy_pass https://www.baidu.com;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://lufficc.com/blog/configure-nginx-as-a-web-server\" target=\"_blank\" rel=\"noopener\">https://lufficc.com/blog/configure-nginx-as-a-web-server</a></p>\n<p><a href=\"https://blog.csdn.net/hj7jay/article/details/53905943\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/hj7jay/article/details/53905943</a> <a href=\"http://www.nginx.cn/76.html\" target=\"_blank\" rel=\"noopener\">http://www.nginx.cn/76.html</a></p>\n</blockquote>\n"},{"title":"数据库事务","date":"2019-09-01T12:18:43.000Z","_content":"\n　本篇讲诉数据库中事务的四大特性（ACID），并且将会详细地说明事务的隔离级别。\n\n　　如果一个数据库声称支持事务的操作，那么该数据库必须要具备以下四个特性：\n\n## ⑴ 原子性（Atomicity）\n\n　　原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，这和前面两篇博客介绍事务的功能是一样的概念，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。\n\n## ⑵ 一致性（Consistency）\n\n　　一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。\n\n　　拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。\n\n## ⑶ 隔离性（Isolation）\n\n　　隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。\n\n　　即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。\n\n　　关于事务的隔离性数据库提供了多种隔离级别，稍后会介绍到。\n\n## ⑷ 持久性（Durability）\n\n　　持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。\n\n　　例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。\n\n　　以上介绍完事务的四大特性(简称ACID)，现在重点来说明下事务的隔离性，当多个线程都开启事务操作数据库中的数据时，数据库系统要能进行隔离操作，以保证各个线程获取数据的准确性，在介绍数据库提供的各种隔离级别之前，我们先看看如果不考虑事务的隔离性，会发生的几种问题：\n\n## 1，脏读\n\n　　脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。\n\n　　当一个事务正在多次修改某个数据，而在这个事务中这多次的修改都还未提交，这时一个并发的事务来访问该数据，就会造成两个事务得到的数据不一致。例如：用户A向用户B转账100元，对应SQL命令如下\n\n```\n    update account set money=money+100 where name=’B’;  (此时A通知B)\n\n    update account set money=money - 100 where name=’A’;\n```\n\n　　当只执行第一条SQL时，A通知B查看账户，B发现确实钱已到账（此时即发生了脏读），而之后无论第二条SQL是否执行，只要该事务不提交，则所有操作都将回滚，那么当B以后再次查看账户时就会发现钱其实并没有转。\n\n## 2，不可重复读\n\n　　不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了。\n\n　　例如事务T1在读取某一数据，而事务T2立马修改了这个数据并且提交事务给数据库，事务T1再次读取该数据就得到了不同的结果，发送了不可重复读。\n\n　　不可重复读和脏读的区别是，脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据。\n\n　　在某些情况下，不可重复读并不是问题，比如我们多次查询某个数据当然以最后查询得到的结果为主。但在另一些情况下就有可能发生问题，例如对于同一个数据A和B依次查询就可能不同，A和B就可能打起来了……\n\n## 3，虚读(幻读)\n\n　　幻读是事务非独立执行时发生的一种现象。例如事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。\n\n　　幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）。\n　　现在来看看MySQL数据库为我们提供的四种隔离级别：\n　　① Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。\n　　② Repeatable read (可重复读)：可避免脏读、不可重复读的发生。\n　　③ Read committed (读已提交)：可避免脏读的发生。\n　　④ Read uncommitted (读未提交)：最低级别，任何情况都无法保证。\n\n　　以上四种隔离级别最高的是Serializable级别，最低的是Read uncommitted级别，当然级别越高，执行效率就越低。像Serializable这样的级别，就是以锁表的方式(类似于Java多线程中的锁)使得其他的线程只能在锁外等待，所以平时选用何种隔离级别应该根据实际情况。在MySQL数据库中默认的隔离级别为Repeatable read (可重复读)。\n\n　　在MySQL数据库中，支持上面四种隔离级别，默认的为Repeatable read (可重复读)；而在Oracle数据库中，只支持Serializable (串行化)级别和Read committed (读已提交)这两种级别，其中默认的为Read committed级别。\n\n　　在MySQL数据库中查看当前事务的隔离级别：\n\n```\n    select @@tx_isolation;\n```\n\n　　在MySQL数据库中设置事务的隔离 级别：\n\n```\n    set  [glogal | session]  transaction isolation level 隔离级别名称;\n    set tx_isolation=’隔离级别名称;’\n```\n\n　　后记：隔离级别的设置只对当前链接有效。对于使用MySQL命令窗口而言，一个窗口就相当于一个链接，当前窗口设置的隔离级别只对当前窗口中的事务有效；对于JDBC操作数据库来说，一个Connection对象相当于一个链接，而对于Connection对象设置的隔离级别只对该Connection对象有效，与其他链接Connection对象无关。\n\n# 参考博客：\n\n<http://www.zhihu.com/question/23989904>\n<http://dev.mysql.com/doc/refman/5.6/en/set-transaction.html>\n<http://www.cnblogs.com/xdp-gacl/p/3984001.html>\n<https://www.cnblogs.com/fjdingsd/p/5273008.html>\n\n ","source":"_posts/mysql/数据库事务.md","raw":"---\ntitle: 数据库事务\ndate: 2019-09-01 20:18:43\ntags: mysql\n---\n\n　本篇讲诉数据库中事务的四大特性（ACID），并且将会详细地说明事务的隔离级别。\n\n　　如果一个数据库声称支持事务的操作，那么该数据库必须要具备以下四个特性：\n\n## ⑴ 原子性（Atomicity）\n\n　　原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，这和前面两篇博客介绍事务的功能是一样的概念，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。\n\n## ⑵ 一致性（Consistency）\n\n　　一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。\n\n　　拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。\n\n## ⑶ 隔离性（Isolation）\n\n　　隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。\n\n　　即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。\n\n　　关于事务的隔离性数据库提供了多种隔离级别，稍后会介绍到。\n\n## ⑷ 持久性（Durability）\n\n　　持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。\n\n　　例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。\n\n　　以上介绍完事务的四大特性(简称ACID)，现在重点来说明下事务的隔离性，当多个线程都开启事务操作数据库中的数据时，数据库系统要能进行隔离操作，以保证各个线程获取数据的准确性，在介绍数据库提供的各种隔离级别之前，我们先看看如果不考虑事务的隔离性，会发生的几种问题：\n\n## 1，脏读\n\n　　脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。\n\n　　当一个事务正在多次修改某个数据，而在这个事务中这多次的修改都还未提交，这时一个并发的事务来访问该数据，就会造成两个事务得到的数据不一致。例如：用户A向用户B转账100元，对应SQL命令如下\n\n```\n    update account set money=money+100 where name=’B’;  (此时A通知B)\n\n    update account set money=money - 100 where name=’A’;\n```\n\n　　当只执行第一条SQL时，A通知B查看账户，B发现确实钱已到账（此时即发生了脏读），而之后无论第二条SQL是否执行，只要该事务不提交，则所有操作都将回滚，那么当B以后再次查看账户时就会发现钱其实并没有转。\n\n## 2，不可重复读\n\n　　不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了。\n\n　　例如事务T1在读取某一数据，而事务T2立马修改了这个数据并且提交事务给数据库，事务T1再次读取该数据就得到了不同的结果，发送了不可重复读。\n\n　　不可重复读和脏读的区别是，脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据。\n\n　　在某些情况下，不可重复读并不是问题，比如我们多次查询某个数据当然以最后查询得到的结果为主。但在另一些情况下就有可能发生问题，例如对于同一个数据A和B依次查询就可能不同，A和B就可能打起来了……\n\n## 3，虚读(幻读)\n\n　　幻读是事务非独立执行时发生的一种现象。例如事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。\n\n　　幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）。\n　　现在来看看MySQL数据库为我们提供的四种隔离级别：\n　　① Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。\n　　② Repeatable read (可重复读)：可避免脏读、不可重复读的发生。\n　　③ Read committed (读已提交)：可避免脏读的发生。\n　　④ Read uncommitted (读未提交)：最低级别，任何情况都无法保证。\n\n　　以上四种隔离级别最高的是Serializable级别，最低的是Read uncommitted级别，当然级别越高，执行效率就越低。像Serializable这样的级别，就是以锁表的方式(类似于Java多线程中的锁)使得其他的线程只能在锁外等待，所以平时选用何种隔离级别应该根据实际情况。在MySQL数据库中默认的隔离级别为Repeatable read (可重复读)。\n\n　　在MySQL数据库中，支持上面四种隔离级别，默认的为Repeatable read (可重复读)；而在Oracle数据库中，只支持Serializable (串行化)级别和Read committed (读已提交)这两种级别，其中默认的为Read committed级别。\n\n　　在MySQL数据库中查看当前事务的隔离级别：\n\n```\n    select @@tx_isolation;\n```\n\n　　在MySQL数据库中设置事务的隔离 级别：\n\n```\n    set  [glogal | session]  transaction isolation level 隔离级别名称;\n    set tx_isolation=’隔离级别名称;’\n```\n\n　　后记：隔离级别的设置只对当前链接有效。对于使用MySQL命令窗口而言，一个窗口就相当于一个链接，当前窗口设置的隔离级别只对当前窗口中的事务有效；对于JDBC操作数据库来说，一个Connection对象相当于一个链接，而对于Connection对象设置的隔离级别只对该Connection对象有效，与其他链接Connection对象无关。\n\n# 参考博客：\n\n<http://www.zhihu.com/question/23989904>\n<http://dev.mysql.com/doc/refman/5.6/en/set-transaction.html>\n<http://www.cnblogs.com/xdp-gacl/p/3984001.html>\n<https://www.cnblogs.com/fjdingsd/p/5273008.html>\n\n ","slug":"mysql/数据库事务","published":1,"updated":"2019-09-01T12:21:25.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbln100444tje6r2qfwjz","content":"<p>　本篇讲诉数据库中事务的四大特性（ACID），并且将会详细地说明事务的隔离级别。</p>\n<p>　　如果一个数据库声称支持事务的操作，那么该数据库必须要具备以下四个特性：</p>\n<h2 id=\"⑴-原子性（Atomicity）\"><a href=\"#⑴-原子性（Atomicity）\" class=\"headerlink\" title=\"⑴ 原子性（Atomicity）\"></a>⑴ 原子性（Atomicity）</h2><p>　　原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，这和前面两篇博客介绍事务的功能是一样的概念，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</p>\n<h2 id=\"⑵-一致性（Consistency）\"><a href=\"#⑵-一致性（Consistency）\" class=\"headerlink\" title=\"⑵ 一致性（Consistency）\"></a>⑵ 一致性（Consistency）</h2><p>　　一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</p>\n<p>　　拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。</p>\n<h2 id=\"⑶-隔离性（Isolation）\"><a href=\"#⑶-隔离性（Isolation）\" class=\"headerlink\" title=\"⑶ 隔离性（Isolation）\"></a>⑶ 隔离性（Isolation）</h2><p>　　隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</p>\n<p>　　即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</p>\n<p>　　关于事务的隔离性数据库提供了多种隔离级别，稍后会介绍到。</p>\n<h2 id=\"⑷-持久性（Durability）\"><a href=\"#⑷-持久性（Durability）\" class=\"headerlink\" title=\"⑷ 持久性（Durability）\"></a>⑷ 持久性（Durability）</h2><p>　　持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p>\n<p>　　例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。</p>\n<p>　　以上介绍完事务的四大特性(简称ACID)，现在重点来说明下事务的隔离性，当多个线程都开启事务操作数据库中的数据时，数据库系统要能进行隔离操作，以保证各个线程获取数据的准确性，在介绍数据库提供的各种隔离级别之前，我们先看看如果不考虑事务的隔离性，会发生的几种问题：</p>\n<h2 id=\"1，脏读\"><a href=\"#1，脏读\" class=\"headerlink\" title=\"1，脏读\"></a>1，脏读</h2><p>　　脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。</p>\n<p>　　当一个事务正在多次修改某个数据，而在这个事务中这多次的修改都还未提交，这时一个并发的事务来访问该数据，就会造成两个事务得到的数据不一致。例如：用户A向用户B转账100元，对应SQL命令如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update account set money=money+100 where name=’B’;  (此时A通知B)</span><br><span class=\"line\"></span><br><span class=\"line\">update account set money=money - 100 where name=’A’;</span><br></pre></td></tr></table></figure>\n<p>　　当只执行第一条SQL时，A通知B查看账户，B发现确实钱已到账（此时即发生了脏读），而之后无论第二条SQL是否执行，只要该事务不提交，则所有操作都将回滚，那么当B以后再次查看账户时就会发现钱其实并没有转。</p>\n<h2 id=\"2，不可重复读\"><a href=\"#2，不可重复读\" class=\"headerlink\" title=\"2，不可重复读\"></a>2，不可重复读</h2><p>　　不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了。</p>\n<p>　　例如事务T1在读取某一数据，而事务T2立马修改了这个数据并且提交事务给数据库，事务T1再次读取该数据就得到了不同的结果，发送了不可重复读。</p>\n<p>　　不可重复读和脏读的区别是，脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据。</p>\n<p>　　在某些情况下，不可重复读并不是问题，比如我们多次查询某个数据当然以最后查询得到的结果为主。但在另一些情况下就有可能发生问题，例如对于同一个数据A和B依次查询就可能不同，A和B就可能打起来了……</p>\n<h2 id=\"3，虚读-幻读\"><a href=\"#3，虚读-幻读\" class=\"headerlink\" title=\"3，虚读(幻读)\"></a>3，虚读(幻读)</h2><p>　　幻读是事务非独立执行时发生的一种现象。例如事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。</p>\n<p>　　幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）。<br>　　现在来看看MySQL数据库为我们提供的四种隔离级别：<br>　　① Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。<br>　　② Repeatable read (可重复读)：可避免脏读、不可重复读的发生。<br>　　③ Read committed (读已提交)：可避免脏读的发生。<br>　　④ Read uncommitted (读未提交)：最低级别，任何情况都无法保证。</p>\n<p>　　以上四种隔离级别最高的是Serializable级别，最低的是Read uncommitted级别，当然级别越高，执行效率就越低。像Serializable这样的级别，就是以锁表的方式(类似于Java多线程中的锁)使得其他的线程只能在锁外等待，所以平时选用何种隔离级别应该根据实际情况。在MySQL数据库中默认的隔离级别为Repeatable read (可重复读)。</p>\n<p>　　在MySQL数据库中，支持上面四种隔离级别，默认的为Repeatable read (可重复读)；而在Oracle数据库中，只支持Serializable (串行化)级别和Read committed (读已提交)这两种级别，其中默认的为Read committed级别。</p>\n<p>　　在MySQL数据库中查看当前事务的隔离级别：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select @@tx_isolation;</span><br></pre></td></tr></table></figure>\n<p>　　在MySQL数据库中设置事务的隔离 级别：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set  [glogal | session]  transaction isolation level 隔离级别名称;</span><br><span class=\"line\">set tx_isolation=’隔离级别名称;’</span><br></pre></td></tr></table></figure>\n<p>　　后记：隔离级别的设置只对当前链接有效。对于使用MySQL命令窗口而言，一个窗口就相当于一个链接，当前窗口设置的隔离级别只对当前窗口中的事务有效；对于JDBC操作数据库来说，一个Connection对象相当于一个链接，而对于Connection对象设置的隔离级别只对该Connection对象有效，与其他链接Connection对象无关。</p>\n<h1 id=\"参考博客：\"><a href=\"#参考博客：\" class=\"headerlink\" title=\"参考博客：\"></a>参考博客：</h1><p><a href=\"http://www.zhihu.com/question/23989904\" target=\"_blank\" rel=\"noopener\">http://www.zhihu.com/question/23989904</a><br><a href=\"http://dev.mysql.com/doc/refman/5.6/en/set-transaction.html\" target=\"_blank\" rel=\"noopener\">http://dev.mysql.com/doc/refman/5.6/en/set-transaction.html</a><br><a href=\"http://www.cnblogs.com/xdp-gacl/p/3984001.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/xdp-gacl/p/3984001.html</a><br><a href=\"https://www.cnblogs.com/fjdingsd/p/5273008.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/fjdingsd/p/5273008.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>　本篇讲诉数据库中事务的四大特性（ACID），并且将会详细地说明事务的隔离级别。</p>\n<p>　　如果一个数据库声称支持事务的操作，那么该数据库必须要具备以下四个特性：</p>\n<h2 id=\"⑴-原子性（Atomicity）\"><a href=\"#⑴-原子性（Atomicity）\" class=\"headerlink\" title=\"⑴ 原子性（Atomicity）\"></a>⑴ 原子性（Atomicity）</h2><p>　　原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，这和前面两篇博客介绍事务的功能是一样的概念，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</p>\n<h2 id=\"⑵-一致性（Consistency）\"><a href=\"#⑵-一致性（Consistency）\" class=\"headerlink\" title=\"⑵ 一致性（Consistency）\"></a>⑵ 一致性（Consistency）</h2><p>　　一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</p>\n<p>　　拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。</p>\n<h2 id=\"⑶-隔离性（Isolation）\"><a href=\"#⑶-隔离性（Isolation）\" class=\"headerlink\" title=\"⑶ 隔离性（Isolation）\"></a>⑶ 隔离性（Isolation）</h2><p>　　隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</p>\n<p>　　即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</p>\n<p>　　关于事务的隔离性数据库提供了多种隔离级别，稍后会介绍到。</p>\n<h2 id=\"⑷-持久性（Durability）\"><a href=\"#⑷-持久性（Durability）\" class=\"headerlink\" title=\"⑷ 持久性（Durability）\"></a>⑷ 持久性（Durability）</h2><p>　　持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p>\n<p>　　例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。</p>\n<p>　　以上介绍完事务的四大特性(简称ACID)，现在重点来说明下事务的隔离性，当多个线程都开启事务操作数据库中的数据时，数据库系统要能进行隔离操作，以保证各个线程获取数据的准确性，在介绍数据库提供的各种隔离级别之前，我们先看看如果不考虑事务的隔离性，会发生的几种问题：</p>\n<h2 id=\"1，脏读\"><a href=\"#1，脏读\" class=\"headerlink\" title=\"1，脏读\"></a>1，脏读</h2><p>　　脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。</p>\n<p>　　当一个事务正在多次修改某个数据，而在这个事务中这多次的修改都还未提交，这时一个并发的事务来访问该数据，就会造成两个事务得到的数据不一致。例如：用户A向用户B转账100元，对应SQL命令如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update account set money=money+100 where name=’B’;  (此时A通知B)</span><br><span class=\"line\"></span><br><span class=\"line\">update account set money=money - 100 where name=’A’;</span><br></pre></td></tr></table></figure>\n<p>　　当只执行第一条SQL时，A通知B查看账户，B发现确实钱已到账（此时即发生了脏读），而之后无论第二条SQL是否执行，只要该事务不提交，则所有操作都将回滚，那么当B以后再次查看账户时就会发现钱其实并没有转。</p>\n<h2 id=\"2，不可重复读\"><a href=\"#2，不可重复读\" class=\"headerlink\" title=\"2，不可重复读\"></a>2，不可重复读</h2><p>　　不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了。</p>\n<p>　　例如事务T1在读取某一数据，而事务T2立马修改了这个数据并且提交事务给数据库，事务T1再次读取该数据就得到了不同的结果，发送了不可重复读。</p>\n<p>　　不可重复读和脏读的区别是，脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据。</p>\n<p>　　在某些情况下，不可重复读并不是问题，比如我们多次查询某个数据当然以最后查询得到的结果为主。但在另一些情况下就有可能发生问题，例如对于同一个数据A和B依次查询就可能不同，A和B就可能打起来了……</p>\n<h2 id=\"3，虚读-幻读\"><a href=\"#3，虚读-幻读\" class=\"headerlink\" title=\"3，虚读(幻读)\"></a>3，虚读(幻读)</h2><p>　　幻读是事务非独立执行时发生的一种现象。例如事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。</p>\n<p>　　幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）。<br>　　现在来看看MySQL数据库为我们提供的四种隔离级别：<br>　　① Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。<br>　　② Repeatable read (可重复读)：可避免脏读、不可重复读的发生。<br>　　③ Read committed (读已提交)：可避免脏读的发生。<br>　　④ Read uncommitted (读未提交)：最低级别，任何情况都无法保证。</p>\n<p>　　以上四种隔离级别最高的是Serializable级别，最低的是Read uncommitted级别，当然级别越高，执行效率就越低。像Serializable这样的级别，就是以锁表的方式(类似于Java多线程中的锁)使得其他的线程只能在锁外等待，所以平时选用何种隔离级别应该根据实际情况。在MySQL数据库中默认的隔离级别为Repeatable read (可重复读)。</p>\n<p>　　在MySQL数据库中，支持上面四种隔离级别，默认的为Repeatable read (可重复读)；而在Oracle数据库中，只支持Serializable (串行化)级别和Read committed (读已提交)这两种级别，其中默认的为Read committed级别。</p>\n<p>　　在MySQL数据库中查看当前事务的隔离级别：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select @@tx_isolation;</span><br></pre></td></tr></table></figure>\n<p>　　在MySQL数据库中设置事务的隔离 级别：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set  [glogal | session]  transaction isolation level 隔离级别名称;</span><br><span class=\"line\">set tx_isolation=’隔离级别名称;’</span><br></pre></td></tr></table></figure>\n<p>　　后记：隔离级别的设置只对当前链接有效。对于使用MySQL命令窗口而言，一个窗口就相当于一个链接，当前窗口设置的隔离级别只对当前窗口中的事务有效；对于JDBC操作数据库来说，一个Connection对象相当于一个链接，而对于Connection对象设置的隔离级别只对该Connection对象有效，与其他链接Connection对象无关。</p>\n<h1 id=\"参考博客：\"><a href=\"#参考博客：\" class=\"headerlink\" title=\"参考博客：\"></a>参考博客：</h1><p><a href=\"http://www.zhihu.com/question/23989904\" target=\"_blank\" rel=\"noopener\">http://www.zhihu.com/question/23989904</a><br><a href=\"http://dev.mysql.com/doc/refman/5.6/en/set-transaction.html\" target=\"_blank\" rel=\"noopener\">http://dev.mysql.com/doc/refman/5.6/en/set-transaction.html</a><br><a href=\"http://www.cnblogs.com/xdp-gacl/p/3984001.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/xdp-gacl/p/3984001.html</a><br><a href=\"https://www.cnblogs.com/fjdingsd/p/5273008.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/fjdingsd/p/5273008.html</a></p>\n"},{"title":"odoo源码解析1-启动命令","date":"2019-11-06T12:01:48.000Z","_content":"\n# 启动命令\n\n```python\n#!/usr/bin/env python3\n\n# set server timezone in UTC before time module imported\n__import__('os').environ['TZ'] = 'UTC'\nimport odoo\n\nif __name__ == \"__main__\":\n    odoo.cli.main()\n```\n\nmain函数主要是进行一些初始化和启动相关的命令\n\n- 解析启动命令的参数\n\n```python\ndef main():\n    args = sys.argv[1:]\n\n    # The only shared option is '--addons-path=' needed to discover additional\n    # commands from modules\n    if len(args) > 1 and args[0].startswith('--addons-path=') and not args[1].startswith(\"-\"):\n        # parse only the addons-path, do not setup the logger...\n        odoo.tools.config._parse_config([args[0]])\n        args = args[1:]\n\n    # Default legacy command\n    command = \"server\"\n\n    # TODO: find a way to properly discover addons subcommands without importing the world\n    # Subcommand discovery\n    if len(args) and not args[0].startswith(\"-\"):\n        logging.disable(logging.CRITICAL)\n        for module in get_modules():\n            if isdir(joinpath(get_module_path(module), 'cli')):\n                __import__('odoo.addons.' + module)\n        logging.disable(logging.NOTSET)\n        command = args[0]\n        args = args[1:]\n\n    if command in commands:\n        o = commands[command]()\n        o.run(args)\n    else:\n        sys.exit('Unknow command %r' % (command,))\n```\n\n","source":"_posts/odoo/odoo源码解析1-启动命令.md","raw":"---\ntitle: odoo源码解析1-启动命令\ndate: 2019-11-06 20:01:48\ntags:\n- odoo\n- python\n---\n\n# 启动命令\n\n```python\n#!/usr/bin/env python3\n\n# set server timezone in UTC before time module imported\n__import__('os').environ['TZ'] = 'UTC'\nimport odoo\n\nif __name__ == \"__main__\":\n    odoo.cli.main()\n```\n\nmain函数主要是进行一些初始化和启动相关的命令\n\n- 解析启动命令的参数\n\n```python\ndef main():\n    args = sys.argv[1:]\n\n    # The only shared option is '--addons-path=' needed to discover additional\n    # commands from modules\n    if len(args) > 1 and args[0].startswith('--addons-path=') and not args[1].startswith(\"-\"):\n        # parse only the addons-path, do not setup the logger...\n        odoo.tools.config._parse_config([args[0]])\n        args = args[1:]\n\n    # Default legacy command\n    command = \"server\"\n\n    # TODO: find a way to properly discover addons subcommands without importing the world\n    # Subcommand discovery\n    if len(args) and not args[0].startswith(\"-\"):\n        logging.disable(logging.CRITICAL)\n        for module in get_modules():\n            if isdir(joinpath(get_module_path(module), 'cli')):\n                __import__('odoo.addons.' + module)\n        logging.disable(logging.NOTSET)\n        command = args[0]\n        args = args[1:]\n\n    if command in commands:\n        o = commands[command]()\n        o.run(args)\n    else:\n        sys.exit('Unknow command %r' % (command,))\n```\n\n","slug":"odoo/odoo源码解析1-启动命令","published":1,"updated":"2020-08-27T15:25:48.712Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbln200464tje1sdubzy5","content":"<h1 id=\"启动命令\"><a href=\"#启动命令\" class=\"headerlink\" title=\"启动命令\"></a>启动命令</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># set server timezone in UTC before time module imported</span></span><br><span class=\"line\">__import__(<span class=\"string\">'os'</span>).environ[<span class=\"string\">'TZ'</span>] = <span class=\"string\">'UTC'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> odoo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    odoo.cli.main()</span><br></pre></td></tr></table></figure>\n<p>main函数主要是进行一些初始化和启动相关的命令</p>\n<ul>\n<li>解析启动命令的参数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    args = sys.argv[<span class=\"number\">1</span>:]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># The only shared option is '--addons-path=' needed to discover additional</span></span><br><span class=\"line\">    <span class=\"comment\"># commands from modules</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(args) &gt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> args[<span class=\"number\">0</span>].startswith(<span class=\"string\">'--addons-path='</span>) <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> args[<span class=\"number\">1</span>].startswith(<span class=\"string\">\"-\"</span>):</span><br><span class=\"line\">        <span class=\"comment\"># parse only the addons-path, do not setup the logger...</span></span><br><span class=\"line\">        odoo.tools.config._parse_config([args[<span class=\"number\">0</span>]])</span><br><span class=\"line\">        args = args[<span class=\"number\">1</span>:]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Default legacy command</span></span><br><span class=\"line\">    command = <span class=\"string\">\"server\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># <span class=\"doctag\">TODO:</span> find a way to properly discover addons subcommands without importing the world</span></span><br><span class=\"line\">    <span class=\"comment\"># Subcommand discovery</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(args) <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> args[<span class=\"number\">0</span>].startswith(<span class=\"string\">\"-\"</span>):</span><br><span class=\"line\">        logging.disable(logging.CRITICAL)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> module <span class=\"keyword\">in</span> get_modules():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> isdir(joinpath(get_module_path(module), <span class=\"string\">'cli'</span>)):</span><br><span class=\"line\">                __import__(<span class=\"string\">'odoo.addons.'</span> + module)</span><br><span class=\"line\">        logging.disable(logging.NOTSET)</span><br><span class=\"line\">        command = args[<span class=\"number\">0</span>]</span><br><span class=\"line\">        args = args[<span class=\"number\">1</span>:]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> command <span class=\"keyword\">in</span> commands:</span><br><span class=\"line\">        o = commands[command]()</span><br><span class=\"line\">        o.run(args)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        sys.exit(<span class=\"string\">'Unknow command %r'</span> % (command,))</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"启动命令\"><a href=\"#启动命令\" class=\"headerlink\" title=\"启动命令\"></a>启动命令</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># set server timezone in UTC before time module imported</span></span><br><span class=\"line\">__import__(<span class=\"string\">'os'</span>).environ[<span class=\"string\">'TZ'</span>] = <span class=\"string\">'UTC'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> odoo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    odoo.cli.main()</span><br></pre></td></tr></table></figure>\n<p>main函数主要是进行一些初始化和启动相关的命令</p>\n<ul>\n<li>解析启动命令的参数</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    args = sys.argv[<span class=\"number\">1</span>:]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># The only shared option is '--addons-path=' needed to discover additional</span></span><br><span class=\"line\">    <span class=\"comment\"># commands from modules</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(args) &gt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> args[<span class=\"number\">0</span>].startswith(<span class=\"string\">'--addons-path='</span>) <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> args[<span class=\"number\">1</span>].startswith(<span class=\"string\">\"-\"</span>):</span><br><span class=\"line\">        <span class=\"comment\"># parse only the addons-path, do not setup the logger...</span></span><br><span class=\"line\">        odoo.tools.config._parse_config([args[<span class=\"number\">0</span>]])</span><br><span class=\"line\">        args = args[<span class=\"number\">1</span>:]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Default legacy command</span></span><br><span class=\"line\">    command = <span class=\"string\">\"server\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># <span class=\"doctag\">TODO:</span> find a way to properly discover addons subcommands without importing the world</span></span><br><span class=\"line\">    <span class=\"comment\"># Subcommand discovery</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(args) <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> args[<span class=\"number\">0</span>].startswith(<span class=\"string\">\"-\"</span>):</span><br><span class=\"line\">        logging.disable(logging.CRITICAL)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> module <span class=\"keyword\">in</span> get_modules():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> isdir(joinpath(get_module_path(module), <span class=\"string\">'cli'</span>)):</span><br><span class=\"line\">                __import__(<span class=\"string\">'odoo.addons.'</span> + module)</span><br><span class=\"line\">        logging.disable(logging.NOTSET)</span><br><span class=\"line\">        command = args[<span class=\"number\">0</span>]</span><br><span class=\"line\">        args = args[<span class=\"number\">1</span>:]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> command <span class=\"keyword\">in</span> commands:</span><br><span class=\"line\">        o = commands[command]()</span><br><span class=\"line\">        o.run(args)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        sys.exit(<span class=\"string\">'Unknow command %r'</span> % (command,))</span><br></pre></td></tr></table></figure>\n"},{"title":"odoo源码解析2-server命令","date":"2019-11-16T03:40:07.000Z","_content":"\n默认情况下的启动命令的server，这个是将odoo运行起来的命令。核心代码如下\n\n\n\n```python\n## 判断是否为root用户，如果为root用户就发送警告\ncheck_root_user() \n## 解析命令行参数\nodoo.tools.config.parse_config(args)\n## 如果为postgres用户就停止运行\ncheck_postgres_user()\nreport_configuration()\n\nconfig = odoo.tools.config\n\n# the default limit for CSV fields in the module is 128KiB, which is not\n# quite sufficient to import images to store in attachment. 500MiB is a\n# bit overkill, but better safe than sorry I guess\ncsv.field_size_limit(500 * 1024 * 1024)\n\n## 创建加载的数据库\npreload = []\nif config['db_name']:\n    preload = config['db_name'].split(',')\n    for db_name in preload:\n        try:\n            odoo.service.db._create_empty_database(db_name)\n            config['init']['base'] = True\n        except ProgrammingError as err:\n            if err.pgcode == errorcodes.INSUFFICIENT_PRIVILEGE:\n                # We use an INFO loglevel on purpose in order to avoid\n                # reporting unnecessary warnings on build environment\n                # using restricted database access.\n                _logger.info(\"Could not determine if database %s exists, \"\n                             \"skipping auto-creation: %s\", db_name, err)\n            else:\n                raise err\n        except odoo.service.db.DatabaseExists:\n            pass\n\nif config[\"translate_out\"]:\n    export_translation()\n    sys.exit(0)\n\nif config[\"translate_in\"]:\n    import_translation()\n    sys.exit(0)\n\n# This needs to be done now to ensure the use of the multiprocessing\n# signaling mecanism for registries loaded with -d\nif config['workers']:\n    odoo.multi_process = True\n\n## 是否在启动服务后停止，用户创建更新数据库\nstop = config[\"stop_after_init\"]\n\n## 设置pid文件\nsetup_pid_file()\n## 启动server\nrc = odoo.service.server.start(preload=preload, stop=stop)\nsys.exit(rc)\n```\n\n参考\n\n> <https://blog.csdn.net/weixin_35737303/article/details/79038671>\n\n","source":"_posts/odoo/odoo源码解析2-server命令.md","raw":"---\ntitle: odoo源码解析2-server命令\ndate: 2019-11-16 11:40:07\ntags:\n- odoo\n---\n\n默认情况下的启动命令的server，这个是将odoo运行起来的命令。核心代码如下\n\n\n\n```python\n## 判断是否为root用户，如果为root用户就发送警告\ncheck_root_user() \n## 解析命令行参数\nodoo.tools.config.parse_config(args)\n## 如果为postgres用户就停止运行\ncheck_postgres_user()\nreport_configuration()\n\nconfig = odoo.tools.config\n\n# the default limit for CSV fields in the module is 128KiB, which is not\n# quite sufficient to import images to store in attachment. 500MiB is a\n# bit overkill, but better safe than sorry I guess\ncsv.field_size_limit(500 * 1024 * 1024)\n\n## 创建加载的数据库\npreload = []\nif config['db_name']:\n    preload = config['db_name'].split(',')\n    for db_name in preload:\n        try:\n            odoo.service.db._create_empty_database(db_name)\n            config['init']['base'] = True\n        except ProgrammingError as err:\n            if err.pgcode == errorcodes.INSUFFICIENT_PRIVILEGE:\n                # We use an INFO loglevel on purpose in order to avoid\n                # reporting unnecessary warnings on build environment\n                # using restricted database access.\n                _logger.info(\"Could not determine if database %s exists, \"\n                             \"skipping auto-creation: %s\", db_name, err)\n            else:\n                raise err\n        except odoo.service.db.DatabaseExists:\n            pass\n\nif config[\"translate_out\"]:\n    export_translation()\n    sys.exit(0)\n\nif config[\"translate_in\"]:\n    import_translation()\n    sys.exit(0)\n\n# This needs to be done now to ensure the use of the multiprocessing\n# signaling mecanism for registries loaded with -d\nif config['workers']:\n    odoo.multi_process = True\n\n## 是否在启动服务后停止，用户创建更新数据库\nstop = config[\"stop_after_init\"]\n\n## 设置pid文件\nsetup_pid_file()\n## 启动server\nrc = odoo.service.server.start(preload=preload, stop=stop)\nsys.exit(rc)\n```\n\n参考\n\n> <https://blog.csdn.net/weixin_35737303/article/details/79038671>\n\n","slug":"odoo/odoo源码解析2-server命令","published":1,"updated":"2020-08-27T15:25:48.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbln300484tjey9pfhm4s","content":"<p>默认情况下的启动命令的server，这个是将odoo运行起来的命令。核心代码如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 判断是否为root用户，如果为root用户就发送警告</span></span><br><span class=\"line\">check_root_user() </span><br><span class=\"line\"><span class=\"comment\">## 解析命令行参数</span></span><br><span class=\"line\">odoo.tools.config.parse_config(args)</span><br><span class=\"line\"><span class=\"comment\">## 如果为postgres用户就停止运行</span></span><br><span class=\"line\">check_postgres_user()</span><br><span class=\"line\">report_configuration()</span><br><span class=\"line\"></span><br><span class=\"line\">config = odoo.tools.config</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># the default limit for CSV fields in the module is 128KiB, which is not</span></span><br><span class=\"line\"><span class=\"comment\"># quite sufficient to import images to store in attachment. 500MiB is a</span></span><br><span class=\"line\"><span class=\"comment\"># bit overkill, but better safe than sorry I guess</span></span><br><span class=\"line\">csv.field_size_limit(<span class=\"number\">500</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 创建加载的数据库</span></span><br><span class=\"line\">preload = []</span><br><span class=\"line\"><span class=\"keyword\">if</span> config[<span class=\"string\">'db_name'</span>]:</span><br><span class=\"line\">    preload = config[<span class=\"string\">'db_name'</span>].split(<span class=\"string\">','</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> db_name <span class=\"keyword\">in</span> preload:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            odoo.service.db._create_empty_database(db_name)</span><br><span class=\"line\">            config[<span class=\"string\">'init'</span>][<span class=\"string\">'base'</span>] = <span class=\"keyword\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> ProgrammingError <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> err.pgcode == errorcodes.INSUFFICIENT_PRIVILEGE:</span><br><span class=\"line\">                <span class=\"comment\"># We use an INFO loglevel on purpose in order to avoid</span></span><br><span class=\"line\">                <span class=\"comment\"># reporting unnecessary warnings on build environment</span></span><br><span class=\"line\">                <span class=\"comment\"># using restricted database access.</span></span><br><span class=\"line\">                _logger.info(<span class=\"string\">\"Could not determine if database %s exists, \"</span></span><br><span class=\"line\">                             <span class=\"string\">\"skipping auto-creation: %s\"</span>, db_name, err)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> err</span><br><span class=\"line\">        <span class=\"keyword\">except</span> odoo.service.db.DatabaseExists:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> config[<span class=\"string\">\"translate_out\"</span>]:</span><br><span class=\"line\">    export_translation()</span><br><span class=\"line\">    sys.exit(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> config[<span class=\"string\">\"translate_in\"</span>]:</span><br><span class=\"line\">    import_translation()</span><br><span class=\"line\">    sys.exit(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This needs to be done now to ensure the use of the multiprocessing</span></span><br><span class=\"line\"><span class=\"comment\"># signaling mecanism for registries loaded with -d</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> config[<span class=\"string\">'workers'</span>]:</span><br><span class=\"line\">    odoo.multi_process = <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 是否在启动服务后停止，用户创建更新数据库</span></span><br><span class=\"line\">stop = config[<span class=\"string\">\"stop_after_init\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 设置pid文件</span></span><br><span class=\"line\">setup_pid_file()</span><br><span class=\"line\"><span class=\"comment\">## 启动server</span></span><br><span class=\"line\">rc = odoo.service.server.start(preload=preload, stop=stop)</span><br><span class=\"line\">sys.exit(rc)</span><br></pre></td></tr></table></figure>\n<p>参考</p>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/weixin_35737303/article/details/79038671\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_35737303/article/details/79038671</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>默认情况下的启动命令的server，这个是将odoo运行起来的命令。核心代码如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 判断是否为root用户，如果为root用户就发送警告</span></span><br><span class=\"line\">check_root_user() </span><br><span class=\"line\"><span class=\"comment\">## 解析命令行参数</span></span><br><span class=\"line\">odoo.tools.config.parse_config(args)</span><br><span class=\"line\"><span class=\"comment\">## 如果为postgres用户就停止运行</span></span><br><span class=\"line\">check_postgres_user()</span><br><span class=\"line\">report_configuration()</span><br><span class=\"line\"></span><br><span class=\"line\">config = odoo.tools.config</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># the default limit for CSV fields in the module is 128KiB, which is not</span></span><br><span class=\"line\"><span class=\"comment\"># quite sufficient to import images to store in attachment. 500MiB is a</span></span><br><span class=\"line\"><span class=\"comment\"># bit overkill, but better safe than sorry I guess</span></span><br><span class=\"line\">csv.field_size_limit(<span class=\"number\">500</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 创建加载的数据库</span></span><br><span class=\"line\">preload = []</span><br><span class=\"line\"><span class=\"keyword\">if</span> config[<span class=\"string\">'db_name'</span>]:</span><br><span class=\"line\">    preload = config[<span class=\"string\">'db_name'</span>].split(<span class=\"string\">','</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> db_name <span class=\"keyword\">in</span> preload:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            odoo.service.db._create_empty_database(db_name)</span><br><span class=\"line\">            config[<span class=\"string\">'init'</span>][<span class=\"string\">'base'</span>] = <span class=\"keyword\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> ProgrammingError <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> err.pgcode == errorcodes.INSUFFICIENT_PRIVILEGE:</span><br><span class=\"line\">                <span class=\"comment\"># We use an INFO loglevel on purpose in order to avoid</span></span><br><span class=\"line\">                <span class=\"comment\"># reporting unnecessary warnings on build environment</span></span><br><span class=\"line\">                <span class=\"comment\"># using restricted database access.</span></span><br><span class=\"line\">                _logger.info(<span class=\"string\">\"Could not determine if database %s exists, \"</span></span><br><span class=\"line\">                             <span class=\"string\">\"skipping auto-creation: %s\"</span>, db_name, err)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> err</span><br><span class=\"line\">        <span class=\"keyword\">except</span> odoo.service.db.DatabaseExists:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> config[<span class=\"string\">\"translate_out\"</span>]:</span><br><span class=\"line\">    export_translation()</span><br><span class=\"line\">    sys.exit(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> config[<span class=\"string\">\"translate_in\"</span>]:</span><br><span class=\"line\">    import_translation()</span><br><span class=\"line\">    sys.exit(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This needs to be done now to ensure the use of the multiprocessing</span></span><br><span class=\"line\"><span class=\"comment\"># signaling mecanism for registries loaded with -d</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> config[<span class=\"string\">'workers'</span>]:</span><br><span class=\"line\">    odoo.multi_process = <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 是否在启动服务后停止，用户创建更新数据库</span></span><br><span class=\"line\">stop = config[<span class=\"string\">\"stop_after_init\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 设置pid文件</span></span><br><span class=\"line\">setup_pid_file()</span><br><span class=\"line\"><span class=\"comment\">## 启动server</span></span><br><span class=\"line\">rc = odoo.service.server.start(preload=preload, stop=stop)</span><br><span class=\"line\">sys.exit(rc)</span><br></pre></td></tr></table></figure>\n<p>参考</p>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/weixin_35737303/article/details/79038671\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_35737303/article/details/79038671</a></p>\n</blockquote>\n"},{"title":"odoo源码解析4-wsgi_server","date":"2019-11-16T07:35:05.000Z","_content":"\n# application\n\n```python\ndef application(environ, start_response):\n    ## 是否启动代理\n    # FIXME: is checking for the presence of HTTP_X_FORWARDED_HOST really useful?\n    #        we're ignoring the user configuration, and that means we won't\n    #        support the standardised Forwarded header once werkzeug supports\n    #        it\n    if config['proxy_mode'] and 'HTTP_X_FORWARDED_HOST' in environ:\n        return ProxyFix(application_unproxied)(environ, start_response)\n    else:\n        return application_unproxied(environ, start_response)\n```\n\n# application_unproxied\n\n清除数据库和用户的追踪\n清除动作在application方法的结尾不能完成，因为werkzeu在后面还会生成有关的日志。\n\n```python\ndef application_unproxied(environ, start_response):\n    \"\"\" WSGI entry point.\"\"\"\n    # cleanup db/uid trackers - they're set at HTTP dispatch in\n    # web.session.OpenERPSession.send() and at RPC dispatch in\n    # odoo.service.web_services.objects_proxy.dispatch().\n    # /!\\ The cleanup cannot be done at the end of this `application`\n    # method because werkzeug still produces relevant logging afterwards\n    if hasattr(threading.current_thread(), 'uid'):\n        del threading.current_thread().uid\n    if hasattr(threading.current_thread(), 'dbname'):\n        del threading.current_thread().dbname\n    if hasattr(threading.current_thread(), 'url'):\n        del threading.current_thread().url\n\n    with odoo.api.Environment.manage():\n        result = odoo.http.root(environ, start_response)\n        if result is not None:\n            return result\n\n    # We never returned from the loop.\n    return werkzeug.exceptions.NotFound(\"No handler found.\\n\")(environ, start_response)\n```\n\n# 参考\n\n> https://blog.csdn.net/weixin_35737303/article/details/79038982","source":"_posts/odoo/odoo源码解析4-wsgi-server.md","raw":"---\ntitle: odoo源码解析4-wsgi_server\ndate: 2019-11-16 15:35:05\ntags:\n- odoo\n---\n\n# application\n\n```python\ndef application(environ, start_response):\n    ## 是否启动代理\n    # FIXME: is checking for the presence of HTTP_X_FORWARDED_HOST really useful?\n    #        we're ignoring the user configuration, and that means we won't\n    #        support the standardised Forwarded header once werkzeug supports\n    #        it\n    if config['proxy_mode'] and 'HTTP_X_FORWARDED_HOST' in environ:\n        return ProxyFix(application_unproxied)(environ, start_response)\n    else:\n        return application_unproxied(environ, start_response)\n```\n\n# application_unproxied\n\n清除数据库和用户的追踪\n清除动作在application方法的结尾不能完成，因为werkzeu在后面还会生成有关的日志。\n\n```python\ndef application_unproxied(environ, start_response):\n    \"\"\" WSGI entry point.\"\"\"\n    # cleanup db/uid trackers - they're set at HTTP dispatch in\n    # web.session.OpenERPSession.send() and at RPC dispatch in\n    # odoo.service.web_services.objects_proxy.dispatch().\n    # /!\\ The cleanup cannot be done at the end of this `application`\n    # method because werkzeug still produces relevant logging afterwards\n    if hasattr(threading.current_thread(), 'uid'):\n        del threading.current_thread().uid\n    if hasattr(threading.current_thread(), 'dbname'):\n        del threading.current_thread().dbname\n    if hasattr(threading.current_thread(), 'url'):\n        del threading.current_thread().url\n\n    with odoo.api.Environment.manage():\n        result = odoo.http.root(environ, start_response)\n        if result is not None:\n            return result\n\n    # We never returned from the loop.\n    return werkzeug.exceptions.NotFound(\"No handler found.\\n\")(environ, start_response)\n```\n\n# 参考\n\n> https://blog.csdn.net/weixin_35737303/article/details/79038982","slug":"odoo/odoo源码解析4-wsgi-server","published":1,"updated":"2020-08-27T15:25:48.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbln5004b4tjezlqbuseb","content":"<h1 id=\"application\"><a href=\"#application\" class=\"headerlink\" title=\"application\"></a>application</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">application</span><span class=\"params\">(environ, start_response)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">## 是否启动代理</span></span><br><span class=\"line\">    <span class=\"comment\"># <span class=\"doctag\">FIXME:</span> is checking for the presence of HTTP_X_FORWARDED_HOST really useful?</span></span><br><span class=\"line\">    <span class=\"comment\">#        we're ignoring the user configuration, and that means we won't</span></span><br><span class=\"line\">    <span class=\"comment\">#        support the standardised Forwarded header once werkzeug supports</span></span><br><span class=\"line\">    <span class=\"comment\">#        it</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> config[<span class=\"string\">'proxy_mode'</span>] <span class=\"keyword\">and</span> <span class=\"string\">'HTTP_X_FORWARDED_HOST'</span> <span class=\"keyword\">in</span> environ:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ProxyFix(application_unproxied)(environ, start_response)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> application_unproxied(environ, start_response)</span><br></pre></td></tr></table></figure>\n<h1 id=\"application-unproxied\"><a href=\"#application-unproxied\" class=\"headerlink\" title=\"application_unproxied\"></a>application_unproxied</h1><p>清除数据库和用户的追踪<br>清除动作在application方法的结尾不能完成，因为werkzeu在后面还会生成有关的日志。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">application_unproxied</span><span class=\"params\">(environ, start_response)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\" WSGI entry point.\"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># cleanup db/uid trackers - they're set at HTTP dispatch in</span></span><br><span class=\"line\">    <span class=\"comment\"># web.session.OpenERPSession.send() and at RPC dispatch in</span></span><br><span class=\"line\">    <span class=\"comment\"># odoo.service.web_services.objects_proxy.dispatch().</span></span><br><span class=\"line\">    <span class=\"comment\"># /!\\ The cleanup cannot be done at the end of this `application`</span></span><br><span class=\"line\">    <span class=\"comment\"># method because werkzeug still produces relevant logging afterwards</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> hasattr(threading.current_thread(), <span class=\"string\">'uid'</span>):</span><br><span class=\"line\">        <span class=\"keyword\">del</span> threading.current_thread().uid</span><br><span class=\"line\">    <span class=\"keyword\">if</span> hasattr(threading.current_thread(), <span class=\"string\">'dbname'</span>):</span><br><span class=\"line\">        <span class=\"keyword\">del</span> threading.current_thread().dbname</span><br><span class=\"line\">    <span class=\"keyword\">if</span> hasattr(threading.current_thread(), <span class=\"string\">'url'</span>):</span><br><span class=\"line\">        <span class=\"keyword\">del</span> threading.current_thread().url</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> odoo.api.Environment.manage():</span><br><span class=\"line\">        result = odoo.http.root(environ, start_response)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> result <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># We never returned from the loop.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> werkzeug.exceptions.NotFound(<span class=\"string\">\"No handler found.\\n\"</span>)(environ, start_response)</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://blog.csdn.net/weixin_35737303/article/details/79038982\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_35737303/article/details/79038982</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"application\"><a href=\"#application\" class=\"headerlink\" title=\"application\"></a>application</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">application</span><span class=\"params\">(environ, start_response)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">## 是否启动代理</span></span><br><span class=\"line\">    <span class=\"comment\"># <span class=\"doctag\">FIXME:</span> is checking for the presence of HTTP_X_FORWARDED_HOST really useful?</span></span><br><span class=\"line\">    <span class=\"comment\">#        we're ignoring the user configuration, and that means we won't</span></span><br><span class=\"line\">    <span class=\"comment\">#        support the standardised Forwarded header once werkzeug supports</span></span><br><span class=\"line\">    <span class=\"comment\">#        it</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> config[<span class=\"string\">'proxy_mode'</span>] <span class=\"keyword\">and</span> <span class=\"string\">'HTTP_X_FORWARDED_HOST'</span> <span class=\"keyword\">in</span> environ:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ProxyFix(application_unproxied)(environ, start_response)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> application_unproxied(environ, start_response)</span><br></pre></td></tr></table></figure>\n<h1 id=\"application-unproxied\"><a href=\"#application-unproxied\" class=\"headerlink\" title=\"application_unproxied\"></a>application_unproxied</h1><p>清除数据库和用户的追踪<br>清除动作在application方法的结尾不能完成，因为werkzeu在后面还会生成有关的日志。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">application_unproxied</span><span class=\"params\">(environ, start_response)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\" WSGI entry point.\"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># cleanup db/uid trackers - they're set at HTTP dispatch in</span></span><br><span class=\"line\">    <span class=\"comment\"># web.session.OpenERPSession.send() and at RPC dispatch in</span></span><br><span class=\"line\">    <span class=\"comment\"># odoo.service.web_services.objects_proxy.dispatch().</span></span><br><span class=\"line\">    <span class=\"comment\"># /!\\ The cleanup cannot be done at the end of this `application`</span></span><br><span class=\"line\">    <span class=\"comment\"># method because werkzeug still produces relevant logging afterwards</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> hasattr(threading.current_thread(), <span class=\"string\">'uid'</span>):</span><br><span class=\"line\">        <span class=\"keyword\">del</span> threading.current_thread().uid</span><br><span class=\"line\">    <span class=\"keyword\">if</span> hasattr(threading.current_thread(), <span class=\"string\">'dbname'</span>):</span><br><span class=\"line\">        <span class=\"keyword\">del</span> threading.current_thread().dbname</span><br><span class=\"line\">    <span class=\"keyword\">if</span> hasattr(threading.current_thread(), <span class=\"string\">'url'</span>):</span><br><span class=\"line\">        <span class=\"keyword\">del</span> threading.current_thread().url</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> odoo.api.Environment.manage():</span><br><span class=\"line\">        result = odoo.http.root(environ, start_response)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> result <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># We never returned from the loop.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> werkzeug.exceptions.NotFound(<span class=\"string\">\"No handler found.\\n\"</span>)(environ, start_response)</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://blog.csdn.net/weixin_35737303/article/details/79038982\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_35737303/article/details/79038982</a></p>\n</blockquote>\n"},{"title":"odoo的dbfilter配置","date":"2019-12-16T09:37:50.000Z","_content":"\n# 关于 Odoo 的 dbfilter 配置项\n\n## 概述\n\n默认情况下首次访问odoo页面时，会要求选择要访问的数据库，db中的所有库都会被列出来供选择，这种在生产环境下通常是不希望的看到，如果在启动时指定连接的数据库名可以解决这个问题\n\n1. .conf文件中指定 `db_name = xxx`\n2. 或者启动命令加参数`-d xxx`\n\n## dbfilter\n\n当我们需要根据域名来匹配数据库时（比如saas环境）这样就不适用了，这个时候就可以用 dbfilter 这个配置项来实现\n\ndbfilter 默认值为 `.*`\n\neg: `dbfilter = ^%h$` 表示按域名精确匹配数据库服务器中名称为域名的数据库\n\n启动参数 `--db-filter='^%d$'` 表示按二级域名前缀精确匹配对应名称的数据库（注意：127.0.0.1访问时会被匹配为 127 库名）\n\n可用的匹配替代符号有 %h 和 %d\n\n### %h\n\n%h 代表访问访问的域名，比如 www.abc.com\n\n### %d\n\n当访问地址为 www.abc.com 时 %d 为 abc\n当访问地址为 shop.abc.com 时 %d 为 shop\n\n## 相关源代码\n\nodoo中的相应的解析代码\n\n```python\ndef db_filter(dbs, httprequest=None):\n    httprequest = httprequest or request.httprequest\n    h = httprequest.environ.get('HTTP_HOST', '').split(':')[0]\n    d, _, r = h.partition('.')\n    if d == \"www\" and r:\n        d = r.partition('.')[0]\n    r = openerp.tools.config['dbfilter'].replace('%h', h).replace('%d', d)\n    dbs = [i for i in dbs if re.match(r, i)]\n    return dbs\n```\n\n\n\n","source":"_posts/odoo/odoo的dbfilter配置.md","raw":"---\ntitle: odoo的dbfilter配置\ndate: 2019-12-16 17:37:50\ntags:\n - odoo\n---\n\n# 关于 Odoo 的 dbfilter 配置项\n\n## 概述\n\n默认情况下首次访问odoo页面时，会要求选择要访问的数据库，db中的所有库都会被列出来供选择，这种在生产环境下通常是不希望的看到，如果在启动时指定连接的数据库名可以解决这个问题\n\n1. .conf文件中指定 `db_name = xxx`\n2. 或者启动命令加参数`-d xxx`\n\n## dbfilter\n\n当我们需要根据域名来匹配数据库时（比如saas环境）这样就不适用了，这个时候就可以用 dbfilter 这个配置项来实现\n\ndbfilter 默认值为 `.*`\n\neg: `dbfilter = ^%h$` 表示按域名精确匹配数据库服务器中名称为域名的数据库\n\n启动参数 `--db-filter='^%d$'` 表示按二级域名前缀精确匹配对应名称的数据库（注意：127.0.0.1访问时会被匹配为 127 库名）\n\n可用的匹配替代符号有 %h 和 %d\n\n### %h\n\n%h 代表访问访问的域名，比如 www.abc.com\n\n### %d\n\n当访问地址为 www.abc.com 时 %d 为 abc\n当访问地址为 shop.abc.com 时 %d 为 shop\n\n## 相关源代码\n\nodoo中的相应的解析代码\n\n```python\ndef db_filter(dbs, httprequest=None):\n    httprequest = httprequest or request.httprequest\n    h = httprequest.environ.get('HTTP_HOST', '').split(':')[0]\n    d, _, r = h.partition('.')\n    if d == \"www\" and r:\n        d = r.partition('.')[0]\n    r = openerp.tools.config['dbfilter'].replace('%h', h).replace('%d', d)\n    dbs = [i for i in dbs if re.match(r, i)]\n    return dbs\n```\n\n\n\n","slug":"odoo/odoo的dbfilter配置","published":1,"updated":"2020-08-27T15:25:48.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbln7004d4tjealo86ont","content":"<h1 id=\"关于-Odoo-的-dbfilter-配置项\"><a href=\"#关于-Odoo-的-dbfilter-配置项\" class=\"headerlink\" title=\"关于 Odoo 的 dbfilter 配置项\"></a>关于 Odoo 的 dbfilter 配置项</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>默认情况下首次访问odoo页面时，会要求选择要访问的数据库，db中的所有库都会被列出来供选择，这种在生产环境下通常是不希望的看到，如果在启动时指定连接的数据库名可以解决这个问题</p>\n<ol>\n<li>.conf文件中指定 <code>db_name = xxx</code></li>\n<li>或者启动命令加参数<code>-d xxx</code></li>\n</ol>\n<h2 id=\"dbfilter\"><a href=\"#dbfilter\" class=\"headerlink\" title=\"dbfilter\"></a>dbfilter</h2><p>当我们需要根据域名来匹配数据库时（比如saas环境）这样就不适用了，这个时候就可以用 dbfilter 这个配置项来实现</p>\n<p>dbfilter 默认值为 <code>.*</code></p>\n<p>eg: <code>dbfilter = ^%h$</code> 表示按域名精确匹配数据库服务器中名称为域名的数据库</p>\n<p>启动参数 <code>--db-filter=&#39;^%d$&#39;</code> 表示按二级域名前缀精确匹配对应名称的数据库（注意：127.0.0.1访问时会被匹配为 127 库名）</p>\n<p>可用的匹配替代符号有 %h 和 %d</p>\n<h3 id=\"h\"><a href=\"#h\" class=\"headerlink\" title=\"%h\"></a>%h</h3><p>%h 代表访问访问的域名，比如 <a href=\"http://www.abc.com\" target=\"_blank\" rel=\"noopener\">www.abc.com</a></p>\n<h3 id=\"d\"><a href=\"#d\" class=\"headerlink\" title=\"%d\"></a>%d</h3><p>当访问地址为 <a href=\"http://www.abc.com\" target=\"_blank\" rel=\"noopener\">www.abc.com</a> 时 %d 为 abc<br>当访问地址为 shop.abc.com 时 %d 为 shop</p>\n<h2 id=\"相关源代码\"><a href=\"#相关源代码\" class=\"headerlink\" title=\"相关源代码\"></a>相关源代码</h2><p>odoo中的相应的解析代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">db_filter</span><span class=\"params\">(dbs, httprequest=None)</span>:</span></span><br><span class=\"line\">    httprequest = httprequest <span class=\"keyword\">or</span> request.httprequest</span><br><span class=\"line\">    h = httprequest.environ.get(<span class=\"string\">'HTTP_HOST'</span>, <span class=\"string\">''</span>).split(<span class=\"string\">':'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    d, _, r = h.partition(<span class=\"string\">'.'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> d == <span class=\"string\">\"www\"</span> <span class=\"keyword\">and</span> r:</span><br><span class=\"line\">        d = r.partition(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    r = openerp.tools.config[<span class=\"string\">'dbfilter'</span>].replace(<span class=\"string\">'%h'</span>, h).replace(<span class=\"string\">'%d'</span>, d)</span><br><span class=\"line\">    dbs = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> dbs <span class=\"keyword\">if</span> re.match(r, i)]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dbs</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于-Odoo-的-dbfilter-配置项\"><a href=\"#关于-Odoo-的-dbfilter-配置项\" class=\"headerlink\" title=\"关于 Odoo 的 dbfilter 配置项\"></a>关于 Odoo 的 dbfilter 配置项</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>默认情况下首次访问odoo页面时，会要求选择要访问的数据库，db中的所有库都会被列出来供选择，这种在生产环境下通常是不希望的看到，如果在启动时指定连接的数据库名可以解决这个问题</p>\n<ol>\n<li>.conf文件中指定 <code>db_name = xxx</code></li>\n<li>或者启动命令加参数<code>-d xxx</code></li>\n</ol>\n<h2 id=\"dbfilter\"><a href=\"#dbfilter\" class=\"headerlink\" title=\"dbfilter\"></a>dbfilter</h2><p>当我们需要根据域名来匹配数据库时（比如saas环境）这样就不适用了，这个时候就可以用 dbfilter 这个配置项来实现</p>\n<p>dbfilter 默认值为 <code>.*</code></p>\n<p>eg: <code>dbfilter = ^%h$</code> 表示按域名精确匹配数据库服务器中名称为域名的数据库</p>\n<p>启动参数 <code>--db-filter=&#39;^%d$&#39;</code> 表示按二级域名前缀精确匹配对应名称的数据库（注意：127.0.0.1访问时会被匹配为 127 库名）</p>\n<p>可用的匹配替代符号有 %h 和 %d</p>\n<h3 id=\"h\"><a href=\"#h\" class=\"headerlink\" title=\"%h\"></a>%h</h3><p>%h 代表访问访问的域名，比如 <a href=\"http://www.abc.com\" target=\"_blank\" rel=\"noopener\">www.abc.com</a></p>\n<h3 id=\"d\"><a href=\"#d\" class=\"headerlink\" title=\"%d\"></a>%d</h3><p>当访问地址为 <a href=\"http://www.abc.com\" target=\"_blank\" rel=\"noopener\">www.abc.com</a> 时 %d 为 abc<br>当访问地址为 shop.abc.com 时 %d 为 shop</p>\n<h2 id=\"相关源代码\"><a href=\"#相关源代码\" class=\"headerlink\" title=\"相关源代码\"></a>相关源代码</h2><p>odoo中的相应的解析代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">db_filter</span><span class=\"params\">(dbs, httprequest=None)</span>:</span></span><br><span class=\"line\">    httprequest = httprequest <span class=\"keyword\">or</span> request.httprequest</span><br><span class=\"line\">    h = httprequest.environ.get(<span class=\"string\">'HTTP_HOST'</span>, <span class=\"string\">''</span>).split(<span class=\"string\">':'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    d, _, r = h.partition(<span class=\"string\">'.'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> d == <span class=\"string\">\"www\"</span> <span class=\"keyword\">and</span> r:</span><br><span class=\"line\">        d = r.partition(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    r = openerp.tools.config[<span class=\"string\">'dbfilter'</span>].replace(<span class=\"string\">'%h'</span>, h).replace(<span class=\"string\">'%d'</span>, d)</span><br><span class=\"line\">    dbs = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> dbs <span class=\"keyword\">if</span> re.match(r, i)]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dbs</span><br></pre></td></tr></table></figure>\n"},{"title":"Oracle基本管理","date":"2018-12-29T12:37:37.000Z","_content":"\n# 用户管理\n\n```sql\n## 创建用户\ncreate user test identified by test;\nshow user;\n\n## 删除用户\ndelete test (cascade);\n\n## 修改用户\nalter user test identified by wumu;\nalter user test expire;\n\n## 用户口令\n## 密码输错三次就密码锁定2天\ncreate profile lock_account limit failed_login_attempts 3 password_lock_time 2;\nalter user tea profile lock_account;\n## 解锁\nalter user tea account unlock;\n## 每10天需要修改密码，宽限期为两天\ncreate profile myprofile limit password_life_time 10 password_grace_time 2;\nalter user tea profile myprofile;\n## 口令10天后可以重用\ncreate profile password_history limit password_lift_time 10 password_grace_time 2 password_reuse_time 10\n\n## 撤销profile\ndrop profile my_profile CASCADE；\n\n```\n\n# 权限管理\n\n```\n## 授权\ngrant system_privilege|all privileges to {user identified by password |role|}\n[with admin option]\n\ngrant object_privileage | All\non schema.object\nto user | role\n[with admin option]\n[with the grant any object]\n\ngrant select on test to wumu with grant option;\ngrant connect tp wumu with admin option;\n\n## create session 用于登录\n## dba 管路员\n## resource 可以建表\n## desc table_name\n## 撤销权限\n## 如果授权者的权限被撤回，那么它的被授予者也会失去相关的权限\ninvoke system_privilege from user|role\ninvoke object_privilege|All on scheme.object from user|role [cascade contraints]\n\n## 查询权限\n## 系统权限放在DBA_SYS_PRIVS\n## 对象权限放在数据字典DBA_TAB_PRIVS\n\n```\n\n","source":"_posts/oracle/Oracle基本管理.md","raw":"---\ntitle: Oracle基本管理\ndate: 2018-12-29 20:37:37\ntags:\n- oracle\n---\n\n# 用户管理\n\n```sql\n## 创建用户\ncreate user test identified by test;\nshow user;\n\n## 删除用户\ndelete test (cascade);\n\n## 修改用户\nalter user test identified by wumu;\nalter user test expire;\n\n## 用户口令\n## 密码输错三次就密码锁定2天\ncreate profile lock_account limit failed_login_attempts 3 password_lock_time 2;\nalter user tea profile lock_account;\n## 解锁\nalter user tea account unlock;\n## 每10天需要修改密码，宽限期为两天\ncreate profile myprofile limit password_life_time 10 password_grace_time 2;\nalter user tea profile myprofile;\n## 口令10天后可以重用\ncreate profile password_history limit password_lift_time 10 password_grace_time 2 password_reuse_time 10\n\n## 撤销profile\ndrop profile my_profile CASCADE；\n\n```\n\n# 权限管理\n\n```\n## 授权\ngrant system_privilege|all privileges to {user identified by password |role|}\n[with admin option]\n\ngrant object_privileage | All\non schema.object\nto user | role\n[with admin option]\n[with the grant any object]\n\ngrant select on test to wumu with grant option;\ngrant connect tp wumu with admin option;\n\n## create session 用于登录\n## dba 管路员\n## resource 可以建表\n## desc table_name\n## 撤销权限\n## 如果授权者的权限被撤回，那么它的被授予者也会失去相关的权限\ninvoke system_privilege from user|role\ninvoke object_privilege|All on scheme.object from user|role [cascade contraints]\n\n## 查询权限\n## 系统权限放在DBA_SYS_PRIVS\n## 对象权限放在数据字典DBA_TAB_PRIVS\n\n```\n\n","slug":"oracle/Oracle基本管理","published":1,"updated":"2019-07-22T08:16:15.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbln9004f4tje8pq2q020","content":"<h1 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 创建用户</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> <span class=\"keyword\">test</span> <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"keyword\">test</span>;</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">user</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 删除用户</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">test</span> (<span class=\"keyword\">cascade</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 修改用户</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> <span class=\"keyword\">test</span> <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> wumu;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> <span class=\"keyword\">test</span> <span class=\"keyword\">expire</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 用户口令</span></span><br><span class=\"line\"><span class=\"comment\">## 密码输错三次就密码锁定2天</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> profile lock_account <span class=\"keyword\">limit</span> <span class=\"keyword\">failed_login_attempts</span> <span class=\"number\">3</span> <span class=\"keyword\">password_lock_time</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> tea profile lock_account;</span><br><span class=\"line\"><span class=\"comment\">## 解锁</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> tea <span class=\"keyword\">account</span> <span class=\"keyword\">unlock</span>;</span><br><span class=\"line\"><span class=\"comment\">## 每10天需要修改密码，宽限期为两天</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> profile myprofile <span class=\"keyword\">limit</span> password_life_time <span class=\"number\">10</span> <span class=\"keyword\">password_grace_time</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> tea profile myprofile;</span><br><span class=\"line\"><span class=\"comment\">## 口令10天后可以重用</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> profile password_history <span class=\"keyword\">limit</span> password_lift_time <span class=\"number\">10</span> <span class=\"keyword\">password_grace_time</span> <span class=\"number\">2</span> <span class=\"keyword\">password_reuse_time</span> <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 撤销profile</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> profile my_profile <span class=\"keyword\">CASCADE</span>；</span><br></pre></td></tr></table></figure>\n<h1 id=\"权限管理\"><a href=\"#权限管理\" class=\"headerlink\" title=\"权限管理\"></a>权限管理</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 授权</span><br><span class=\"line\">grant system_privilege|all privileges to &#123;user identified by password |role|&#125;</span><br><span class=\"line\">[with admin option]</span><br><span class=\"line\"></span><br><span class=\"line\">grant object_privileage | All</span><br><span class=\"line\">on schema.object</span><br><span class=\"line\">to user | role</span><br><span class=\"line\">[with admin option]</span><br><span class=\"line\">[with the grant any object]</span><br><span class=\"line\"></span><br><span class=\"line\">grant select on test to wumu with grant option;</span><br><span class=\"line\">grant connect tp wumu with admin option;</span><br><span class=\"line\"></span><br><span class=\"line\">## create session 用于登录</span><br><span class=\"line\">## dba 管路员</span><br><span class=\"line\">## resource 可以建表</span><br><span class=\"line\">## desc table_name</span><br><span class=\"line\">## 撤销权限</span><br><span class=\"line\">## 如果授权者的权限被撤回，那么它的被授予者也会失去相关的权限</span><br><span class=\"line\">invoke system_privilege from user|role</span><br><span class=\"line\">invoke object_privilege|All on scheme.object from user|role [cascade contraints]</span><br><span class=\"line\"></span><br><span class=\"line\">## 查询权限</span><br><span class=\"line\">## 系统权限放在DBA_SYS_PRIVS</span><br><span class=\"line\">## 对象权限放在数据字典DBA_TAB_PRIVS</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 创建用户</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> <span class=\"keyword\">test</span> <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"keyword\">test</span>;</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">user</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 删除用户</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">test</span> (<span class=\"keyword\">cascade</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 修改用户</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> <span class=\"keyword\">test</span> <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> wumu;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> <span class=\"keyword\">test</span> <span class=\"keyword\">expire</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 用户口令</span></span><br><span class=\"line\"><span class=\"comment\">## 密码输错三次就密码锁定2天</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> profile lock_account <span class=\"keyword\">limit</span> <span class=\"keyword\">failed_login_attempts</span> <span class=\"number\">3</span> <span class=\"keyword\">password_lock_time</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> tea profile lock_account;</span><br><span class=\"line\"><span class=\"comment\">## 解锁</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> tea <span class=\"keyword\">account</span> <span class=\"keyword\">unlock</span>;</span><br><span class=\"line\"><span class=\"comment\">## 每10天需要修改密码，宽限期为两天</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> profile myprofile <span class=\"keyword\">limit</span> password_life_time <span class=\"number\">10</span> <span class=\"keyword\">password_grace_time</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> tea profile myprofile;</span><br><span class=\"line\"><span class=\"comment\">## 口令10天后可以重用</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> profile password_history <span class=\"keyword\">limit</span> password_lift_time <span class=\"number\">10</span> <span class=\"keyword\">password_grace_time</span> <span class=\"number\">2</span> <span class=\"keyword\">password_reuse_time</span> <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 撤销profile</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> profile my_profile <span class=\"keyword\">CASCADE</span>；</span><br></pre></td></tr></table></figure>\n<h1 id=\"权限管理\"><a href=\"#权限管理\" class=\"headerlink\" title=\"权限管理\"></a>权限管理</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 授权</span><br><span class=\"line\">grant system_privilege|all privileges to &#123;user identified by password |role|&#125;</span><br><span class=\"line\">[with admin option]</span><br><span class=\"line\"></span><br><span class=\"line\">grant object_privileage | All</span><br><span class=\"line\">on schema.object</span><br><span class=\"line\">to user | role</span><br><span class=\"line\">[with admin option]</span><br><span class=\"line\">[with the grant any object]</span><br><span class=\"line\"></span><br><span class=\"line\">grant select on test to wumu with grant option;</span><br><span class=\"line\">grant connect tp wumu with admin option;</span><br><span class=\"line\"></span><br><span class=\"line\">## create session 用于登录</span><br><span class=\"line\">## dba 管路员</span><br><span class=\"line\">## resource 可以建表</span><br><span class=\"line\">## desc table_name</span><br><span class=\"line\">## 撤销权限</span><br><span class=\"line\">## 如果授权者的权限被撤回，那么它的被授予者也会失去相关的权限</span><br><span class=\"line\">invoke system_privilege from user|role</span><br><span class=\"line\">invoke object_privilege|All on scheme.object from user|role [cascade contraints]</span><br><span class=\"line\"></span><br><span class=\"line\">## 查询权限</span><br><span class=\"line\">## 系统权限放在DBA_SYS_PRIVS</span><br><span class=\"line\">## 对象权限放在数据字典DBA_TAB_PRIVS</span><br></pre></td></tr></table></figure>\n"},{"title":"postgresql安装","date":"2019-12-09T07:53:51.000Z","_content":"\n```bash\n# Install the repository RPM:\ndnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm\n\n# Disable the built-in PostgreSQL module:\ndnf -qy module disable postgresql\n\n# Install PostgreSQL:\ndnf install -y postgresql12-server\n\n# Optionally initialize the database and enable automatic start:\n/usr/pgsql-12/bin/postgresql-12-setup initdb\nsystemctl enable postgresql-12\nsystemctl start postgresql-12\n```\n\n","source":"_posts/postgresql/postgresql安装.md","raw":"---\ntitle: postgresql安装\ndate: 2019-12-09 15:53:51\ntags:\n---\n\n```bash\n# Install the repository RPM:\ndnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm\n\n# Disable the built-in PostgreSQL module:\ndnf -qy module disable postgresql\n\n# Install PostgreSQL:\ndnf install -y postgresql12-server\n\n# Optionally initialize the database and enable automatic start:\n/usr/pgsql-12/bin/postgresql-12-setup initdb\nsystemctl enable postgresql-12\nsystemctl start postgresql-12\n```\n\n","slug":"postgresql/postgresql安装","published":1,"updated":"2020-09-20T03:22:55.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblna004i4tje8soneq0u","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Install the repository RPM:</span></span><br><span class=\"line\">dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Disable the built-in PostgreSQL module:</span></span><br><span class=\"line\">dnf -qy module <span class=\"built_in\">disable</span> postgresql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Install PostgreSQL:</span></span><br><span class=\"line\">dnf install -y postgresql12-server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Optionally initialize the database and enable automatic start:</span></span><br><span class=\"line\">/usr/pgsql-12/bin/postgresql-12-setup initdb</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> postgresql-12</span><br><span class=\"line\">systemctl start postgresql-12</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Install the repository RPM:</span></span><br><span class=\"line\">dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Disable the built-in PostgreSQL module:</span></span><br><span class=\"line\">dnf -qy module <span class=\"built_in\">disable</span> postgresql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Install PostgreSQL:</span></span><br><span class=\"line\">dnf install -y postgresql12-server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Optionally initialize the database and enable automatic start:</span></span><br><span class=\"line\">/usr/pgsql-12/bin/postgresql-12-setup initdb</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> postgresql-12</span><br><span class=\"line\">systemctl start postgresql-12</span><br></pre></td></tr></table></figure>\n"},{"title":"Oracle表管理","date":"2018-12-29T13:45:47.000Z","_content":"\n## 数据类型\n\n```\n## 字符型\nchar 定长，后面空格补全\nvarchar2() 变长\nclob 字符型大对象\n\n## 数字类型\nnumber\nnumber(5，2) 标识5位有效数，2位小数-999.99-999.99\nnumber(5) 5位整数\n\n## 日期类型\ndate\ntimestramp\n## 图片\nblob 二进制4g,为了安全可以放入数据库\n```\n\n# 表操作\n\n```\ncreate table table_name(\n)\n\ndrop table table_name;\n\nrename table_name to other_table_name;\n\nalter table table_name add ...;\nalter table table_name modify ...;\nalter table table_name drop column ...;\n```\n\n","source":"_posts/oracle/Oracle表管理.md","raw":"---\ntitle: Oracle表管理\ndate: 2018-12-29 21:45:47\ntags:\n- oracle\n---\n\n## 数据类型\n\n```\n## 字符型\nchar 定长，后面空格补全\nvarchar2() 变长\nclob 字符型大对象\n\n## 数字类型\nnumber\nnumber(5，2) 标识5位有效数，2位小数-999.99-999.99\nnumber(5) 5位整数\n\n## 日期类型\ndate\ntimestramp\n## 图片\nblob 二进制4g,为了安全可以放入数据库\n```\n\n# 表操作\n\n```\ncreate table table_name(\n)\n\ndrop table table_name;\n\nrename table_name to other_table_name;\n\nalter table table_name add ...;\nalter table table_name modify ...;\nalter table table_name drop column ...;\n```\n\n","slug":"oracle/Oracle表管理","published":1,"updated":"2019-07-22T08:16:15.218Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblnb004k4tje5rz41mnv","content":"<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 字符型</span><br><span class=\"line\">char 定长，后面空格补全</span><br><span class=\"line\">varchar2() 变长</span><br><span class=\"line\">clob 字符型大对象</span><br><span class=\"line\"></span><br><span class=\"line\">## 数字类型</span><br><span class=\"line\">number</span><br><span class=\"line\">number(5，2) 标识5位有效数，2位小数-999.99-999.99</span><br><span class=\"line\">number(5) 5位整数</span><br><span class=\"line\"></span><br><span class=\"line\">## 日期类型</span><br><span class=\"line\">date</span><br><span class=\"line\">timestramp</span><br><span class=\"line\">## 图片</span><br><span class=\"line\">blob 二进制4g,为了安全可以放入数据库</span><br></pre></td></tr></table></figure>\n<h1 id=\"表操作\"><a href=\"#表操作\" class=\"headerlink\" title=\"表操作\"></a>表操作</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table table_name(</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">drop table table_name;</span><br><span class=\"line\"></span><br><span class=\"line\">rename table_name to other_table_name;</span><br><span class=\"line\"></span><br><span class=\"line\">alter table table_name add ...;</span><br><span class=\"line\">alter table table_name modify ...;</span><br><span class=\"line\">alter table table_name drop column ...;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 字符型</span><br><span class=\"line\">char 定长，后面空格补全</span><br><span class=\"line\">varchar2() 变长</span><br><span class=\"line\">clob 字符型大对象</span><br><span class=\"line\"></span><br><span class=\"line\">## 数字类型</span><br><span class=\"line\">number</span><br><span class=\"line\">number(5，2) 标识5位有效数，2位小数-999.99-999.99</span><br><span class=\"line\">number(5) 5位整数</span><br><span class=\"line\"></span><br><span class=\"line\">## 日期类型</span><br><span class=\"line\">date</span><br><span class=\"line\">timestramp</span><br><span class=\"line\">## 图片</span><br><span class=\"line\">blob 二进制4g,为了安全可以放入数据库</span><br></pre></td></tr></table></figure>\n<h1 id=\"表操作\"><a href=\"#表操作\" class=\"headerlink\" title=\"表操作\"></a>表操作</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table table_name(</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">drop table table_name;</span><br><span class=\"line\"></span><br><span class=\"line\">rename table_name to other_table_name;</span><br><span class=\"line\"></span><br><span class=\"line\">alter table table_name add ...;</span><br><span class=\"line\">alter table table_name modify ...;</span><br><span class=\"line\">alter table table_name drop column ...;</span><br></pre></td></tr></table></figure>\n"},{"title":"python-字符串格式","date":"2019-07-31T02:59:16.000Z","_content":"\n# 格式化操作符（%）\n\n\"%\"是Python风格的字符串格式化操作符，非常类似C语言里的printf()函数的字符串格式化（C语言中也是使用%）。\n\n下面整理了一下Python中字符串格式化符合：\n\n| 格式化符号 | 说明                                                         |\n| ---------- | ------------------------------------------------------------ |\n| %c         | 转换成字符（ASCII 码值，或者长度为一的字符串）               |\n| %r         | 优先用repr()函数进行字符串转换                               |\n| %s         | 优先用str()函数进行字符串转换                                |\n| %d / %i    | 转成有符号十进制数                                           |\n| %u         | 转成无符号十进制数                                           |\n| %o         | 转成无符号八进制数                                           |\n| %x / %X    | 转成无符号十六进制数（x / X 代表转换后的十六进制字符的大小写） |\n| %e / %E    | 转成科学计数法（e / E控制输出e / E）                         |\n| %f / %F    | 转成浮点数（小数部分自然截断）                               |\n| %g / %G    | %e和%f / %E和%F 的简写                                       |\n| %%         | 输出% （格式化字符串里面包括百分号，那么必须使用%%）         |\n\n这里列出的格式化符合都比较简单，唯一想要强调一下的就是\"%s\"和\"%r\"的差别。\n\n看个简单的代码：\n\n```python\nstring = \"Hello\\tWill\\n\"\n\nprint(\"%s\" %string)\nprint(\"%r\" %string)\n'''\nHello   Will\n\n'Hello\\tWill\\n'\n'''\n```\n\n补充：\n\nPython打印值的时候会保持该值在Python代码中的状态，不是用户所希望看到的状态。而使用print打印值则不一样，print打印出来的值是用户所希望看到的状态。 str和repr的区别：\n\n1. str\n\n   把值转换为合理形式的字符串，给用户看的。str实际上类似于int，long，是一种类型。\n\n   ```python\n   print str(\"Hello,  world!\")\n   # Hello,  world!            \n   print str(1000L)\n   # 1000                         \n   str(\"Hello, world!\")\n   # 'Hello, world!'               # 字符串转换之后仍然是字符串\n   str(1000L)\n   # '1000'\n   ```\n\n2. repr()\n\n   创建一个字符串，以合法python表达式的形式来表示值。repr()是一个函数。\n\n   ```python\n   print repr(\"Hello,  world!\")\n   # 'Hello,  world!'\n   print repr(1000L)\n   # 1000L\n   repr(\"Hello,  world!\")\n   # \"'Hello,  world!'\"\n   repr(1000L)\n   # '1000L'\n   ```\n\n# 格式化操作辅助符\n\n\n\n通过\"%\"可以进行字符串格式化，但是\"%\"经常会结合下面的辅助符一起使用。\n\n| **辅助符号** | **说明**                                                     |\n| ------------ | ------------------------------------------------------------ |\n| *****        | 定义宽度或者小数点精度                                       |\n| **-**        | 用做左对齐                                                   |\n| **+**        | 在正数前面显示加号(+)                                        |\n| **#**        | 在八进制数前面显示零(0)，在十六进制前面显示\"0x\"或者\"0X\"（取决于用的是\"x\"还是\"X\"） |\n| **0**        | 显示的数字前面填充\"0\"而不是默认的空格                        |\n| **(var)**    | 映射变量（通常用来处理字段类型的参数）                       |\n| **m.n**      | m 是显示的最小总宽度，n 是小数点后的位数（如果可用的话）     |\n\n```python\nnum = 100\n\nprint(\"%d to hex is %x\" %(num, num))\nprint(\"%d to hex is %X\" %(num, num))\nprint(\"%d to hex is %#x\" %(num, num))\nprint(\"%d to hex is %#X\" %(num, num))\n\n# 浮点数\nf = 3.1415926\nprint(\"value of f is: %.4f\" %f)\n\n# 指定宽度和对齐\nstudents = [{\"name\":\"Wilber\", \"age\":27}, {\"name\":\"Will\", \"age\":28}, {\"name\":\"June\", \"age\":27}]\nprint(\"name: %10s, age: %10d\" %(students[0][\"name\"], students[0][\"age\"]))\nprint(\"name: %-10s, age: %-10d\" %(students[1][\"name\"], students[1][\"age\"]))\nprint(\"name: %*s, age: %0*d\" %(10, students[2][\"name\"], 10, students[2][\"age\"]))\n\n# dict参数\nfor student in students:\n    print(\"%(name)s is %(age)d years old\" %student)\n    \n'''\n100 to hex is 64\n100 to hex is 64\n100 to hex is 0x64\n100 to hex is 0X64\nvalue of f is: 3.1416\nname:     Wilber, age:         27\nname: Will      , age: 28        \nname:       June, age: 0000000027\nWilber is 27 years old\nWill is 28 years old\nJune is 27 years old\n'''\n```\n\n# 字符串模板\n\n其实，在Python中进行字符串的格式化，除了格式化操作符，还可以使用string模块中的字符串模板（Template）对象。下面就主要看看Template对象的substitute()方法：\n\n```python\nfrom string import Template\nsTemp = Template('Hi ,$name,$$ ')\nprint(sTemp.substitute(name='wumu'))\n'''\nHi ,wumu,$ \n'''\n```\n\n# format\n\n```python\n# 位置参数\nprint(\"{} is {} years old\".format(\"Wilber\", 28))\nprint(\"Hi, {0}! {0} is {1} years old\".format(\"Wilber\", 28))\n\n# 关键字参数\nprint(\"{name} is {age} years old\".format(name = \"Wilber\", age = 28))\n\n# 下标参数\nli = [\"Wilber\", 28]\nprint(\"{0[0]} is {0[1]} years old\".format(li))\n\n# 填充与对齐\n# ^、<、>分别是居中、左对齐、右对齐，后面带宽度\n# :号后面带填充的字符，只能是一个字符，不指定的话默认是用空格填充\nprint('{:>8}'.format('3.14'))\nprint('{:<8}'.format('3.14'))\nprint('{:^8}'.format('3.14'))\nprint('{:0>8}'.format('3.14'))\nprint('{:a>8}'.format('3.14'))\n\n# 浮点数精度\nprint('{:.4f}'.format(3.1415926))\nprint('{:0>10.4f}'.format(3.1415926))\n\n# 进制\n# b、d、o、x分别是二进制、十进制、八进制、十六进制\nprint('{:b}'.format(11))\nprint('{:d}'.format(11))\nprint('{:o}'.format(11))\nprint('{:x}'.format(11))\nprint('{:#x}'.format(11))\nprint('{:#X}'.format(11))\n\n# 千位分隔符\nprint('{:,}'.format(15700000000))\n\n'''\nWilber is 28 years old\nHi, Wilber! Wilber is 28 years old\nWilber is 28 years old\nWilber is 28 years old\n    3.14\n3.14    \n  3.14  \n00003.14\naaaa3.14\n3.1416\n00003.1416\n1011\n11\n13\nb\n0xb\n0XB\n15,700,000,000\n'''\n```\n\n\n\n# 参考\n\n> <https://www.cnblogs.com/wilber2013/p/4641616.html>","source":"_posts/python/python-字符串格式.md","raw":"---\ntitle: python-字符串格式\ndate: 2019-07-31 10:59:16\ntags: python\n---\n\n# 格式化操作符（%）\n\n\"%\"是Python风格的字符串格式化操作符，非常类似C语言里的printf()函数的字符串格式化（C语言中也是使用%）。\n\n下面整理了一下Python中字符串格式化符合：\n\n| 格式化符号 | 说明                                                         |\n| ---------- | ------------------------------------------------------------ |\n| %c         | 转换成字符（ASCII 码值，或者长度为一的字符串）               |\n| %r         | 优先用repr()函数进行字符串转换                               |\n| %s         | 优先用str()函数进行字符串转换                                |\n| %d / %i    | 转成有符号十进制数                                           |\n| %u         | 转成无符号十进制数                                           |\n| %o         | 转成无符号八进制数                                           |\n| %x / %X    | 转成无符号十六进制数（x / X 代表转换后的十六进制字符的大小写） |\n| %e / %E    | 转成科学计数法（e / E控制输出e / E）                         |\n| %f / %F    | 转成浮点数（小数部分自然截断）                               |\n| %g / %G    | %e和%f / %E和%F 的简写                                       |\n| %%         | 输出% （格式化字符串里面包括百分号，那么必须使用%%）         |\n\n这里列出的格式化符合都比较简单，唯一想要强调一下的就是\"%s\"和\"%r\"的差别。\n\n看个简单的代码：\n\n```python\nstring = \"Hello\\tWill\\n\"\n\nprint(\"%s\" %string)\nprint(\"%r\" %string)\n'''\nHello   Will\n\n'Hello\\tWill\\n'\n'''\n```\n\n补充：\n\nPython打印值的时候会保持该值在Python代码中的状态，不是用户所希望看到的状态。而使用print打印值则不一样，print打印出来的值是用户所希望看到的状态。 str和repr的区别：\n\n1. str\n\n   把值转换为合理形式的字符串，给用户看的。str实际上类似于int，long，是一种类型。\n\n   ```python\n   print str(\"Hello,  world!\")\n   # Hello,  world!            \n   print str(1000L)\n   # 1000                         \n   str(\"Hello, world!\")\n   # 'Hello, world!'               # 字符串转换之后仍然是字符串\n   str(1000L)\n   # '1000'\n   ```\n\n2. repr()\n\n   创建一个字符串，以合法python表达式的形式来表示值。repr()是一个函数。\n\n   ```python\n   print repr(\"Hello,  world!\")\n   # 'Hello,  world!'\n   print repr(1000L)\n   # 1000L\n   repr(\"Hello,  world!\")\n   # \"'Hello,  world!'\"\n   repr(1000L)\n   # '1000L'\n   ```\n\n# 格式化操作辅助符\n\n\n\n通过\"%\"可以进行字符串格式化，但是\"%\"经常会结合下面的辅助符一起使用。\n\n| **辅助符号** | **说明**                                                     |\n| ------------ | ------------------------------------------------------------ |\n| *****        | 定义宽度或者小数点精度                                       |\n| **-**        | 用做左对齐                                                   |\n| **+**        | 在正数前面显示加号(+)                                        |\n| **#**        | 在八进制数前面显示零(0)，在十六进制前面显示\"0x\"或者\"0X\"（取决于用的是\"x\"还是\"X\"） |\n| **0**        | 显示的数字前面填充\"0\"而不是默认的空格                        |\n| **(var)**    | 映射变量（通常用来处理字段类型的参数）                       |\n| **m.n**      | m 是显示的最小总宽度，n 是小数点后的位数（如果可用的话）     |\n\n```python\nnum = 100\n\nprint(\"%d to hex is %x\" %(num, num))\nprint(\"%d to hex is %X\" %(num, num))\nprint(\"%d to hex is %#x\" %(num, num))\nprint(\"%d to hex is %#X\" %(num, num))\n\n# 浮点数\nf = 3.1415926\nprint(\"value of f is: %.4f\" %f)\n\n# 指定宽度和对齐\nstudents = [{\"name\":\"Wilber\", \"age\":27}, {\"name\":\"Will\", \"age\":28}, {\"name\":\"June\", \"age\":27}]\nprint(\"name: %10s, age: %10d\" %(students[0][\"name\"], students[0][\"age\"]))\nprint(\"name: %-10s, age: %-10d\" %(students[1][\"name\"], students[1][\"age\"]))\nprint(\"name: %*s, age: %0*d\" %(10, students[2][\"name\"], 10, students[2][\"age\"]))\n\n# dict参数\nfor student in students:\n    print(\"%(name)s is %(age)d years old\" %student)\n    \n'''\n100 to hex is 64\n100 to hex is 64\n100 to hex is 0x64\n100 to hex is 0X64\nvalue of f is: 3.1416\nname:     Wilber, age:         27\nname: Will      , age: 28        \nname:       June, age: 0000000027\nWilber is 27 years old\nWill is 28 years old\nJune is 27 years old\n'''\n```\n\n# 字符串模板\n\n其实，在Python中进行字符串的格式化，除了格式化操作符，还可以使用string模块中的字符串模板（Template）对象。下面就主要看看Template对象的substitute()方法：\n\n```python\nfrom string import Template\nsTemp = Template('Hi ,$name,$$ ')\nprint(sTemp.substitute(name='wumu'))\n'''\nHi ,wumu,$ \n'''\n```\n\n# format\n\n```python\n# 位置参数\nprint(\"{} is {} years old\".format(\"Wilber\", 28))\nprint(\"Hi, {0}! {0} is {1} years old\".format(\"Wilber\", 28))\n\n# 关键字参数\nprint(\"{name} is {age} years old\".format(name = \"Wilber\", age = 28))\n\n# 下标参数\nli = [\"Wilber\", 28]\nprint(\"{0[0]} is {0[1]} years old\".format(li))\n\n# 填充与对齐\n# ^、<、>分别是居中、左对齐、右对齐，后面带宽度\n# :号后面带填充的字符，只能是一个字符，不指定的话默认是用空格填充\nprint('{:>8}'.format('3.14'))\nprint('{:<8}'.format('3.14'))\nprint('{:^8}'.format('3.14'))\nprint('{:0>8}'.format('3.14'))\nprint('{:a>8}'.format('3.14'))\n\n# 浮点数精度\nprint('{:.4f}'.format(3.1415926))\nprint('{:0>10.4f}'.format(3.1415926))\n\n# 进制\n# b、d、o、x分别是二进制、十进制、八进制、十六进制\nprint('{:b}'.format(11))\nprint('{:d}'.format(11))\nprint('{:o}'.format(11))\nprint('{:x}'.format(11))\nprint('{:#x}'.format(11))\nprint('{:#X}'.format(11))\n\n# 千位分隔符\nprint('{:,}'.format(15700000000))\n\n'''\nWilber is 28 years old\nHi, Wilber! Wilber is 28 years old\nWilber is 28 years old\nWilber is 28 years old\n    3.14\n3.14    \n  3.14  \n00003.14\naaaa3.14\n3.1416\n00003.1416\n1011\n11\n13\nb\n0xb\n0XB\n15,700,000,000\n'''\n```\n\n\n\n# 参考\n\n> <https://www.cnblogs.com/wilber2013/p/4641616.html>","slug":"python/python-字符串格式","published":1,"updated":"2019-07-31T07:56:52.562Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblnb004n4tjevgislnqz","content":"<h1 id=\"格式化操作符（-）\"><a href=\"#格式化操作符（-）\" class=\"headerlink\" title=\"格式化操作符（%）\"></a>格式化操作符（%）</h1><p>“%”是Python风格的字符串格式化操作符，非常类似C语言里的printf()函数的字符串格式化（C语言中也是使用%）。</p>\n<p>下面整理了一下Python中字符串格式化符合：</p>\n<table>\n<thead>\n<tr>\n<th>格式化符号</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%c</td>\n<td>转换成字符（ASCII 码值，或者长度为一的字符串）</td>\n</tr>\n<tr>\n<td>%r</td>\n<td>优先用repr()函数进行字符串转换</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>优先用str()函数进行字符串转换</td>\n</tr>\n<tr>\n<td>%d / %i</td>\n<td>转成有符号十进制数</td>\n</tr>\n<tr>\n<td>%u</td>\n<td>转成无符号十进制数</td>\n</tr>\n<tr>\n<td>%o</td>\n<td>转成无符号八进制数</td>\n</tr>\n<tr>\n<td>%x / %X</td>\n<td>转成无符号十六进制数（x / X 代表转换后的十六进制字符的大小写）</td>\n</tr>\n<tr>\n<td>%e / %E</td>\n<td>转成科学计数法（e / E控制输出e / E）</td>\n</tr>\n<tr>\n<td>%f / %F</td>\n<td>转成浮点数（小数部分自然截断）</td>\n</tr>\n<tr>\n<td>%g / %G</td>\n<td>%e和%f / %E和%F 的简写</td>\n</tr>\n<tr>\n<td>%%</td>\n<td>输出% （格式化字符串里面包括百分号，那么必须使用%%）</td>\n</tr>\n</tbody>\n</table>\n<p>这里列出的格式化符合都比较简单，唯一想要强调一下的就是”%s”和”%r”的差别。</p>\n<p>看个简单的代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">\"Hello\\tWill\\n\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"%s\"</span> %string)</span><br><span class=\"line\">print(<span class=\"string\">\"%r\"</span> %string)</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Hello   Will</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">'Hello\\tWill\\n'</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<p>补充：</p>\n<p>Python打印值的时候会保持该值在Python代码中的状态，不是用户所希望看到的状态。而使用print打印值则不一样，print打印出来的值是用户所希望看到的状态。 str和repr的区别：</p>\n<ol>\n<li><p>str</p>\n<p>把值转换为合理形式的字符串，给用户看的。str实际上类似于int，long，是一种类型。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">print</span> str(<span class=\"string\">\"Hello,  world!\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># Hello,  world!            </span></span><br><span class=\"line\"><span class=\"keyword\">print</span> str(<span class=\"number\">1000L</span>)</span><br><span class=\"line\"><span class=\"comment\"># 1000                         </span></span><br><span class=\"line\">str(<span class=\"string\">\"Hello, world!\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 'Hello, world!'               # 字符串转换之后仍然是字符串</span></span><br><span class=\"line\">str(<span class=\"number\">1000L</span>)</span><br><span class=\"line\"><span class=\"comment\"># '1000'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>repr()</p>\n<p>创建一个字符串，以合法python表达式的形式来表示值。repr()是一个函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">print</span> repr(<span class=\"string\">\"Hello,  world!\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 'Hello,  world!'</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> repr(<span class=\"number\">1000L</span>)</span><br><span class=\"line\"><span class=\"comment\"># 1000L</span></span><br><span class=\"line\">repr(<span class=\"string\">\"Hello,  world!\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># \"'Hello,  world!'\"</span></span><br><span class=\"line\">repr(<span class=\"number\">1000L</span>)</span><br><span class=\"line\"><span class=\"comment\"># '1000L'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"格式化操作辅助符\"><a href=\"#格式化操作辅助符\" class=\"headerlink\" title=\"格式化操作辅助符\"></a>格式化操作辅助符</h1><p>通过”%”可以进行字符串格式化，但是”%”经常会结合下面的辅助符一起使用。</p>\n<table>\n<thead>\n<tr>\n<th><strong>辅助符号</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>*</strong></td>\n<td>定义宽度或者小数点精度</td>\n</tr>\n<tr>\n<td><strong>-</strong></td>\n<td>用做左对齐</td>\n</tr>\n<tr>\n<td><strong>+</strong></td>\n<td>在正数前面显示加号(+)</td>\n</tr>\n<tr>\n<td><strong>#</strong></td>\n<td>在八进制数前面显示零(0)，在十六进制前面显示”0x”或者”0X”（取决于用的是”x”还是”X”）</td>\n</tr>\n<tr>\n<td><strong>0</strong></td>\n<td>显示的数字前面填充”0”而不是默认的空格</td>\n</tr>\n<tr>\n<td><strong>(var)</strong></td>\n<td>映射变量（通常用来处理字段类型的参数）</td>\n</tr>\n<tr>\n<td><strong>m.n</strong></td>\n<td>m 是显示的最小总宽度，n 是小数点后的位数（如果可用的话）</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"%d to hex is %x\"</span> %(num, num))</span><br><span class=\"line\">print(<span class=\"string\">\"%d to hex is %X\"</span> %(num, num))</span><br><span class=\"line\">print(<span class=\"string\">\"%d to hex is %#x\"</span> %(num, num))</span><br><span class=\"line\">print(<span class=\"string\">\"%d to hex is %#X\"</span> %(num, num))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 浮点数</span></span><br><span class=\"line\">f = <span class=\"number\">3.1415926</span></span><br><span class=\"line\">print(<span class=\"string\">\"value of f is: %.4f\"</span> %f)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定宽度和对齐</span></span><br><span class=\"line\">students = [&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"Wilber\"</span>, <span class=\"string\">\"age\"</span>:<span class=\"number\">27</span>&#125;, &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"Will\"</span>, <span class=\"string\">\"age\"</span>:<span class=\"number\">28</span>&#125;, &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"June\"</span>, <span class=\"string\">\"age\"</span>:<span class=\"number\">27</span>&#125;]</span><br><span class=\"line\">print(<span class=\"string\">\"name: %10s, age: %10d\"</span> %(students[<span class=\"number\">0</span>][<span class=\"string\">\"name\"</span>], students[<span class=\"number\">0</span>][<span class=\"string\">\"age\"</span>]))</span><br><span class=\"line\">print(<span class=\"string\">\"name: %-10s, age: %-10d\"</span> %(students[<span class=\"number\">1</span>][<span class=\"string\">\"name\"</span>], students[<span class=\"number\">1</span>][<span class=\"string\">\"age\"</span>]))</span><br><span class=\"line\">print(<span class=\"string\">\"name: %*s, age: %0*d\"</span> %(<span class=\"number\">10</span>, students[<span class=\"number\">2</span>][<span class=\"string\">\"name\"</span>], <span class=\"number\">10</span>, students[<span class=\"number\">2</span>][<span class=\"string\">\"age\"</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># dict参数</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> student <span class=\"keyword\">in</span> students:</span><br><span class=\"line\">    print(<span class=\"string\">\"%(name)s is %(age)d years old\"</span> %student)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">100 to hex is 64</span></span><br><span class=\"line\"><span class=\"string\">100 to hex is 64</span></span><br><span class=\"line\"><span class=\"string\">100 to hex is 0x64</span></span><br><span class=\"line\"><span class=\"string\">100 to hex is 0X64</span></span><br><span class=\"line\"><span class=\"string\">value of f is: 3.1416</span></span><br><span class=\"line\"><span class=\"string\">name:     Wilber, age:         27</span></span><br><span class=\"line\"><span class=\"string\">name: Will      , age: 28        </span></span><br><span class=\"line\"><span class=\"string\">name:       June, age: 0000000027</span></span><br><span class=\"line\"><span class=\"string\">Wilber is 27 years old</span></span><br><span class=\"line\"><span class=\"string\">Will is 28 years old</span></span><br><span class=\"line\"><span class=\"string\">June is 27 years old</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"字符串模板\"><a href=\"#字符串模板\" class=\"headerlink\" title=\"字符串模板\"></a>字符串模板</h1><p>其实，在Python中进行字符串的格式化，除了格式化操作符，还可以使用string模块中的字符串模板（Template）对象。下面就主要看看Template对象的substitute()方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> string <span class=\"keyword\">import</span> Template</span><br><span class=\"line\">sTemp = Template(<span class=\"string\">'Hi ,$name,$$ '</span>)</span><br><span class=\"line\">print(sTemp.substitute(name=<span class=\"string\">'wumu'</span>))</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Hi ,wumu,$ </span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"format\"><a href=\"#format\" class=\"headerlink\" title=\"format\"></a>format</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 位置参数</span></span><br><span class=\"line\">print(<span class=\"string\">\"&#123;&#125; is &#123;&#125; years old\"</span>.format(<span class=\"string\">\"Wilber\"</span>, <span class=\"number\">28</span>))</span><br><span class=\"line\">print(<span class=\"string\">\"Hi, &#123;0&#125;! &#123;0&#125; is &#123;1&#125; years old\"</span>.format(<span class=\"string\">\"Wilber\"</span>, <span class=\"number\">28</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关键字参数</span></span><br><span class=\"line\">print(<span class=\"string\">\"&#123;name&#125; is &#123;age&#125; years old\"</span>.format(name = <span class=\"string\">\"Wilber\"</span>, age = <span class=\"number\">28</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下标参数</span></span><br><span class=\"line\">li = [<span class=\"string\">\"Wilber\"</span>, <span class=\"number\">28</span>]</span><br><span class=\"line\">print(<span class=\"string\">\"&#123;0[0]&#125; is &#123;0[1]&#125; years old\"</span>.format(li))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 填充与对齐</span></span><br><span class=\"line\"><span class=\"comment\"># ^、&lt;、&gt;分别是居中、左对齐、右对齐，后面带宽度</span></span><br><span class=\"line\"><span class=\"comment\"># :号后面带填充的字符，只能是一个字符，不指定的话默认是用空格填充</span></span><br><span class=\"line\">print(<span class=\"string\">'&#123;:&gt;8&#125;'</span>.format(<span class=\"string\">'3.14'</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:&lt;8&#125;'</span>.format(<span class=\"string\">'3.14'</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:^8&#125;'</span>.format(<span class=\"string\">'3.14'</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:0&gt;8&#125;'</span>.format(<span class=\"string\">'3.14'</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:a&gt;8&#125;'</span>.format(<span class=\"string\">'3.14'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 浮点数精度</span></span><br><span class=\"line\">print(<span class=\"string\">'&#123;:.4f&#125;'</span>.format(<span class=\"number\">3.1415926</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:0&gt;10.4f&#125;'</span>.format(<span class=\"number\">3.1415926</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进制</span></span><br><span class=\"line\"><span class=\"comment\"># b、d、o、x分别是二进制、十进制、八进制、十六进制</span></span><br><span class=\"line\">print(<span class=\"string\">'&#123;:b&#125;'</span>.format(<span class=\"number\">11</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:d&#125;'</span>.format(<span class=\"number\">11</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:o&#125;'</span>.format(<span class=\"number\">11</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:x&#125;'</span>.format(<span class=\"number\">11</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:#x&#125;'</span>.format(<span class=\"number\">11</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:#X&#125;'</span>.format(<span class=\"number\">11</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 千位分隔符</span></span><br><span class=\"line\">print(<span class=\"string\">'&#123;:,&#125;'</span>.format(<span class=\"number\">15700000000</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Wilber is 28 years old</span></span><br><span class=\"line\"><span class=\"string\">Hi, Wilber! Wilber is 28 years old</span></span><br><span class=\"line\"><span class=\"string\">Wilber is 28 years old</span></span><br><span class=\"line\"><span class=\"string\">Wilber is 28 years old</span></span><br><span class=\"line\"><span class=\"string\">    3.14</span></span><br><span class=\"line\"><span class=\"string\">3.14    </span></span><br><span class=\"line\"><span class=\"string\">  3.14  </span></span><br><span class=\"line\"><span class=\"string\">00003.14</span></span><br><span class=\"line\"><span class=\"string\">aaaa3.14</span></span><br><span class=\"line\"><span class=\"string\">3.1416</span></span><br><span class=\"line\"><span class=\"string\">00003.1416</span></span><br><span class=\"line\"><span class=\"string\">1011</span></span><br><span class=\"line\"><span class=\"string\">11</span></span><br><span class=\"line\"><span class=\"string\">13</span></span><br><span class=\"line\"><span class=\"string\">b</span></span><br><span class=\"line\"><span class=\"string\">0xb</span></span><br><span class=\"line\"><span class=\"string\">0XB</span></span><br><span class=\"line\"><span class=\"string\">15,700,000,000</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://www.cnblogs.com/wilber2013/p/4641616.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/wilber2013/p/4641616.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"格式化操作符（-）\"><a href=\"#格式化操作符（-）\" class=\"headerlink\" title=\"格式化操作符（%）\"></a>格式化操作符（%）</h1><p>“%”是Python风格的字符串格式化操作符，非常类似C语言里的printf()函数的字符串格式化（C语言中也是使用%）。</p>\n<p>下面整理了一下Python中字符串格式化符合：</p>\n<table>\n<thead>\n<tr>\n<th>格式化符号</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%c</td>\n<td>转换成字符（ASCII 码值，或者长度为一的字符串）</td>\n</tr>\n<tr>\n<td>%r</td>\n<td>优先用repr()函数进行字符串转换</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>优先用str()函数进行字符串转换</td>\n</tr>\n<tr>\n<td>%d / %i</td>\n<td>转成有符号十进制数</td>\n</tr>\n<tr>\n<td>%u</td>\n<td>转成无符号十进制数</td>\n</tr>\n<tr>\n<td>%o</td>\n<td>转成无符号八进制数</td>\n</tr>\n<tr>\n<td>%x / %X</td>\n<td>转成无符号十六进制数（x / X 代表转换后的十六进制字符的大小写）</td>\n</tr>\n<tr>\n<td>%e / %E</td>\n<td>转成科学计数法（e / E控制输出e / E）</td>\n</tr>\n<tr>\n<td>%f / %F</td>\n<td>转成浮点数（小数部分自然截断）</td>\n</tr>\n<tr>\n<td>%g / %G</td>\n<td>%e和%f / %E和%F 的简写</td>\n</tr>\n<tr>\n<td>%%</td>\n<td>输出% （格式化字符串里面包括百分号，那么必须使用%%）</td>\n</tr>\n</tbody>\n</table>\n<p>这里列出的格式化符合都比较简单，唯一想要强调一下的就是”%s”和”%r”的差别。</p>\n<p>看个简单的代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"string\">\"Hello\\tWill\\n\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"%s\"</span> %string)</span><br><span class=\"line\">print(<span class=\"string\">\"%r\"</span> %string)</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Hello   Will</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">'Hello\\tWill\\n'</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<p>补充：</p>\n<p>Python打印值的时候会保持该值在Python代码中的状态，不是用户所希望看到的状态。而使用print打印值则不一样，print打印出来的值是用户所希望看到的状态。 str和repr的区别：</p>\n<ol>\n<li><p>str</p>\n<p>把值转换为合理形式的字符串，给用户看的。str实际上类似于int，long，是一种类型。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">print</span> str(<span class=\"string\">\"Hello,  world!\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># Hello,  world!            </span></span><br><span class=\"line\"><span class=\"keyword\">print</span> str(<span class=\"number\">1000L</span>)</span><br><span class=\"line\"><span class=\"comment\"># 1000                         </span></span><br><span class=\"line\">str(<span class=\"string\">\"Hello, world!\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 'Hello, world!'               # 字符串转换之后仍然是字符串</span></span><br><span class=\"line\">str(<span class=\"number\">1000L</span>)</span><br><span class=\"line\"><span class=\"comment\"># '1000'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>repr()</p>\n<p>创建一个字符串，以合法python表达式的形式来表示值。repr()是一个函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">print</span> repr(<span class=\"string\">\"Hello,  world!\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 'Hello,  world!'</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> repr(<span class=\"number\">1000L</span>)</span><br><span class=\"line\"><span class=\"comment\"># 1000L</span></span><br><span class=\"line\">repr(<span class=\"string\">\"Hello,  world!\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># \"'Hello,  world!'\"</span></span><br><span class=\"line\">repr(<span class=\"number\">1000L</span>)</span><br><span class=\"line\"><span class=\"comment\"># '1000L'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"格式化操作辅助符\"><a href=\"#格式化操作辅助符\" class=\"headerlink\" title=\"格式化操作辅助符\"></a>格式化操作辅助符</h1><p>通过”%”可以进行字符串格式化，但是”%”经常会结合下面的辅助符一起使用。</p>\n<table>\n<thead>\n<tr>\n<th><strong>辅助符号</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>*</strong></td>\n<td>定义宽度或者小数点精度</td>\n</tr>\n<tr>\n<td><strong>-</strong></td>\n<td>用做左对齐</td>\n</tr>\n<tr>\n<td><strong>+</strong></td>\n<td>在正数前面显示加号(+)</td>\n</tr>\n<tr>\n<td><strong>#</strong></td>\n<td>在八进制数前面显示零(0)，在十六进制前面显示”0x”或者”0X”（取决于用的是”x”还是”X”）</td>\n</tr>\n<tr>\n<td><strong>0</strong></td>\n<td>显示的数字前面填充”0”而不是默认的空格</td>\n</tr>\n<tr>\n<td><strong>(var)</strong></td>\n<td>映射变量（通常用来处理字段类型的参数）</td>\n</tr>\n<tr>\n<td><strong>m.n</strong></td>\n<td>m 是显示的最小总宽度，n 是小数点后的位数（如果可用的话）</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"%d to hex is %x\"</span> %(num, num))</span><br><span class=\"line\">print(<span class=\"string\">\"%d to hex is %X\"</span> %(num, num))</span><br><span class=\"line\">print(<span class=\"string\">\"%d to hex is %#x\"</span> %(num, num))</span><br><span class=\"line\">print(<span class=\"string\">\"%d to hex is %#X\"</span> %(num, num))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 浮点数</span></span><br><span class=\"line\">f = <span class=\"number\">3.1415926</span></span><br><span class=\"line\">print(<span class=\"string\">\"value of f is: %.4f\"</span> %f)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定宽度和对齐</span></span><br><span class=\"line\">students = [&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"Wilber\"</span>, <span class=\"string\">\"age\"</span>:<span class=\"number\">27</span>&#125;, &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"Will\"</span>, <span class=\"string\">\"age\"</span>:<span class=\"number\">28</span>&#125;, &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"June\"</span>, <span class=\"string\">\"age\"</span>:<span class=\"number\">27</span>&#125;]</span><br><span class=\"line\">print(<span class=\"string\">\"name: %10s, age: %10d\"</span> %(students[<span class=\"number\">0</span>][<span class=\"string\">\"name\"</span>], students[<span class=\"number\">0</span>][<span class=\"string\">\"age\"</span>]))</span><br><span class=\"line\">print(<span class=\"string\">\"name: %-10s, age: %-10d\"</span> %(students[<span class=\"number\">1</span>][<span class=\"string\">\"name\"</span>], students[<span class=\"number\">1</span>][<span class=\"string\">\"age\"</span>]))</span><br><span class=\"line\">print(<span class=\"string\">\"name: %*s, age: %0*d\"</span> %(<span class=\"number\">10</span>, students[<span class=\"number\">2</span>][<span class=\"string\">\"name\"</span>], <span class=\"number\">10</span>, students[<span class=\"number\">2</span>][<span class=\"string\">\"age\"</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># dict参数</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> student <span class=\"keyword\">in</span> students:</span><br><span class=\"line\">    print(<span class=\"string\">\"%(name)s is %(age)d years old\"</span> %student)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">100 to hex is 64</span></span><br><span class=\"line\"><span class=\"string\">100 to hex is 64</span></span><br><span class=\"line\"><span class=\"string\">100 to hex is 0x64</span></span><br><span class=\"line\"><span class=\"string\">100 to hex is 0X64</span></span><br><span class=\"line\"><span class=\"string\">value of f is: 3.1416</span></span><br><span class=\"line\"><span class=\"string\">name:     Wilber, age:         27</span></span><br><span class=\"line\"><span class=\"string\">name: Will      , age: 28        </span></span><br><span class=\"line\"><span class=\"string\">name:       June, age: 0000000027</span></span><br><span class=\"line\"><span class=\"string\">Wilber is 27 years old</span></span><br><span class=\"line\"><span class=\"string\">Will is 28 years old</span></span><br><span class=\"line\"><span class=\"string\">June is 27 years old</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"字符串模板\"><a href=\"#字符串模板\" class=\"headerlink\" title=\"字符串模板\"></a>字符串模板</h1><p>其实，在Python中进行字符串的格式化，除了格式化操作符，还可以使用string模块中的字符串模板（Template）对象。下面就主要看看Template对象的substitute()方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> string <span class=\"keyword\">import</span> Template</span><br><span class=\"line\">sTemp = Template(<span class=\"string\">'Hi ,$name,$$ '</span>)</span><br><span class=\"line\">print(sTemp.substitute(name=<span class=\"string\">'wumu'</span>))</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Hi ,wumu,$ </span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"format\"><a href=\"#format\" class=\"headerlink\" title=\"format\"></a>format</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 位置参数</span></span><br><span class=\"line\">print(<span class=\"string\">\"&#123;&#125; is &#123;&#125; years old\"</span>.format(<span class=\"string\">\"Wilber\"</span>, <span class=\"number\">28</span>))</span><br><span class=\"line\">print(<span class=\"string\">\"Hi, &#123;0&#125;! &#123;0&#125; is &#123;1&#125; years old\"</span>.format(<span class=\"string\">\"Wilber\"</span>, <span class=\"number\">28</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关键字参数</span></span><br><span class=\"line\">print(<span class=\"string\">\"&#123;name&#125; is &#123;age&#125; years old\"</span>.format(name = <span class=\"string\">\"Wilber\"</span>, age = <span class=\"number\">28</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下标参数</span></span><br><span class=\"line\">li = [<span class=\"string\">\"Wilber\"</span>, <span class=\"number\">28</span>]</span><br><span class=\"line\">print(<span class=\"string\">\"&#123;0[0]&#125; is &#123;0[1]&#125; years old\"</span>.format(li))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 填充与对齐</span></span><br><span class=\"line\"><span class=\"comment\"># ^、&lt;、&gt;分别是居中、左对齐、右对齐，后面带宽度</span></span><br><span class=\"line\"><span class=\"comment\"># :号后面带填充的字符，只能是一个字符，不指定的话默认是用空格填充</span></span><br><span class=\"line\">print(<span class=\"string\">'&#123;:&gt;8&#125;'</span>.format(<span class=\"string\">'3.14'</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:&lt;8&#125;'</span>.format(<span class=\"string\">'3.14'</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:^8&#125;'</span>.format(<span class=\"string\">'3.14'</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:0&gt;8&#125;'</span>.format(<span class=\"string\">'3.14'</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:a&gt;8&#125;'</span>.format(<span class=\"string\">'3.14'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 浮点数精度</span></span><br><span class=\"line\">print(<span class=\"string\">'&#123;:.4f&#125;'</span>.format(<span class=\"number\">3.1415926</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:0&gt;10.4f&#125;'</span>.format(<span class=\"number\">3.1415926</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进制</span></span><br><span class=\"line\"><span class=\"comment\"># b、d、o、x分别是二进制、十进制、八进制、十六进制</span></span><br><span class=\"line\">print(<span class=\"string\">'&#123;:b&#125;'</span>.format(<span class=\"number\">11</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:d&#125;'</span>.format(<span class=\"number\">11</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:o&#125;'</span>.format(<span class=\"number\">11</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:x&#125;'</span>.format(<span class=\"number\">11</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:#x&#125;'</span>.format(<span class=\"number\">11</span>))</span><br><span class=\"line\">print(<span class=\"string\">'&#123;:#X&#125;'</span>.format(<span class=\"number\">11</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 千位分隔符</span></span><br><span class=\"line\">print(<span class=\"string\">'&#123;:,&#125;'</span>.format(<span class=\"number\">15700000000</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Wilber is 28 years old</span></span><br><span class=\"line\"><span class=\"string\">Hi, Wilber! Wilber is 28 years old</span></span><br><span class=\"line\"><span class=\"string\">Wilber is 28 years old</span></span><br><span class=\"line\"><span class=\"string\">Wilber is 28 years old</span></span><br><span class=\"line\"><span class=\"string\">    3.14</span></span><br><span class=\"line\"><span class=\"string\">3.14    </span></span><br><span class=\"line\"><span class=\"string\">  3.14  </span></span><br><span class=\"line\"><span class=\"string\">00003.14</span></span><br><span class=\"line\"><span class=\"string\">aaaa3.14</span></span><br><span class=\"line\"><span class=\"string\">3.1416</span></span><br><span class=\"line\"><span class=\"string\">00003.1416</span></span><br><span class=\"line\"><span class=\"string\">1011</span></span><br><span class=\"line\"><span class=\"string\">11</span></span><br><span class=\"line\"><span class=\"string\">13</span></span><br><span class=\"line\"><span class=\"string\">b</span></span><br><span class=\"line\"><span class=\"string\">0xb</span></span><br><span class=\"line\"><span class=\"string\">0XB</span></span><br><span class=\"line\"><span class=\"string\">15,700,000,000</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://www.cnblogs.com/wilber2013/p/4641616.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/wilber2013/p/4641616.html</a></p>\n</blockquote>\n"},{"title":"python-类","date":"2019-08-04T10:12:22.000Z","_content":"\n# 类中默认函数\n\n## ____new____和____init____区别\n\n__new__:创建对象时调用，会返回当前对象的一个实例\n\n__init__:创建完对象后调用，对当前对象的一些实例初始化，无返回值\n\n1、在类中，如果__new__和__init__同时存在，会优先调用__new__\n\n\n```python\nclass Data(object):\n     def __new__(self):\n             print \"new\"\n     def __init__(self):\n             print \"init\"\n \ndata = Data()\n# new\n```\n\n2、__new__方法会返回所构造的对象，__init__则不会。__init__无返回值。\n\n```python\nclass Data(object):\n     def __init__(cls):\n            cls.x = 2\n             print \"init\"\n            return cls\n\ndata = Data()\n'''\ninit\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: __init__() should return None, not 'Data'\n'''\n```\n\n```python\nclass Data(object):\n    def __new__(cls):\n        print(\"new\")\n        cls.x = 1\n        return cls\ndef __init__(self):\n    print(\"init\")\n\n\ndata = Data()\nprint(data.x)\n# new\n# 1\ndata.x =2\nprint(data.x)\n# 2\n```\n\nIf __new__() returns an instance of cls, then the new instance’s __init__() method will be invoked like __init__(self[, ...]), where self is the new instance and the remaining arguments are the same as were passed to __new__().\n\n如果__new__返回一个对象的实例，会隐式调用__init__\n\nIf __new__() does not return an instance of cls, then the new instance’s __init__() method will not be invoked.\n\n如果__new__不返回一个对象的实例，__init__不会被调用\n\n```python\nclass A(object):\n     def __new__(Class):\n             object = super(A,Class).__new__(Class)\n             print \"in New\"\n             return object\n     def __init__(self):\n             print \"in init\"\n \nA()\n# in New\n# in init\n\nclass A(object):\n     def __new__(cls):\n             print \"in New\"\n             return cls\n     def __init__(self):\n             print \"in init\"\n \na = A()      \n# in New \n```\n\nobject.__init__(self[, ...])\nCalled when the instance is created. The arguments are those passed to the class constructor expression. If a base class has an __init__() method, the derived class’s __init__() method, if any, must explicitly call it to ensure proper initialization of the base class part of the instance; for example: BaseClass.__init__(self, [args...]). As a special constraint on constructors, no value may be returned; doing so will cause a TypeError to be raised at runtime.\n\n在对象的实例创建完成后调用。参数被传给类的构造函数。如果基类有__init__方法，子类必须显示调用基类的__init__。\n\n没有返回值，否则会再引发TypeError错误。\n\n","source":"_posts/python/python-类.md","raw":"---\ntitle: python-类\ndate: 2019-08-04 18:12:22\ntags: python\n---\n\n# 类中默认函数\n\n## ____new____和____init____区别\n\n__new__:创建对象时调用，会返回当前对象的一个实例\n\n__init__:创建完对象后调用，对当前对象的一些实例初始化，无返回值\n\n1、在类中，如果__new__和__init__同时存在，会优先调用__new__\n\n\n```python\nclass Data(object):\n     def __new__(self):\n             print \"new\"\n     def __init__(self):\n             print \"init\"\n \ndata = Data()\n# new\n```\n\n2、__new__方法会返回所构造的对象，__init__则不会。__init__无返回值。\n\n```python\nclass Data(object):\n     def __init__(cls):\n            cls.x = 2\n             print \"init\"\n            return cls\n\ndata = Data()\n'''\ninit\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: __init__() should return None, not 'Data'\n'''\n```\n\n```python\nclass Data(object):\n    def __new__(cls):\n        print(\"new\")\n        cls.x = 1\n        return cls\ndef __init__(self):\n    print(\"init\")\n\n\ndata = Data()\nprint(data.x)\n# new\n# 1\ndata.x =2\nprint(data.x)\n# 2\n```\n\nIf __new__() returns an instance of cls, then the new instance’s __init__() method will be invoked like __init__(self[, ...]), where self is the new instance and the remaining arguments are the same as were passed to __new__().\n\n如果__new__返回一个对象的实例，会隐式调用__init__\n\nIf __new__() does not return an instance of cls, then the new instance’s __init__() method will not be invoked.\n\n如果__new__不返回一个对象的实例，__init__不会被调用\n\n```python\nclass A(object):\n     def __new__(Class):\n             object = super(A,Class).__new__(Class)\n             print \"in New\"\n             return object\n     def __init__(self):\n             print \"in init\"\n \nA()\n# in New\n# in init\n\nclass A(object):\n     def __new__(cls):\n             print \"in New\"\n             return cls\n     def __init__(self):\n             print \"in init\"\n \na = A()      \n# in New \n```\n\nobject.__init__(self[, ...])\nCalled when the instance is created. The arguments are those passed to the class constructor expression. If a base class has an __init__() method, the derived class’s __init__() method, if any, must explicitly call it to ensure proper initialization of the base class part of the instance; for example: BaseClass.__init__(self, [args...]). As a special constraint on constructors, no value may be returned; doing so will cause a TypeError to be raised at runtime.\n\n在对象的实例创建完成后调用。参数被传给类的构造函数。如果基类有__init__方法，子类必须显示调用基类的__init__。\n\n没有返回值，否则会再引发TypeError错误。\n\n","slug":"python/python-类","published":1,"updated":"2019-08-04T16:13:54.844Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblnc004p4tjefm6juf2v","content":"<h1 id=\"类中默认函数\"><a href=\"#类中默认函数\" class=\"headerlink\" title=\"类中默认函数\"></a>类中默认函数</h1><h2 id=\"new和init区别\"><a href=\"#new和init区别\" class=\"headerlink\" title=\"new和init区别\"></a><strong><strong>new</strong></strong>和<strong><strong>init</strong></strong>区别</h2><p><strong>new</strong>:创建对象时调用，会返回当前对象的一个实例</p>\n<p><strong>init</strong>:创建完对象后调用，对当前对象的一些实例初始化，无返回值</p>\n<p>1、在类中，如果<strong>new</strong>和<strong>init</strong>同时存在，会优先调用<strong>new</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Data</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">             <span class=\"keyword\">print</span> <span class=\"string\">\"new\"</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">             <span class=\"keyword\">print</span> <span class=\"string\">\"init\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">data = Data()</span><br><span class=\"line\"><span class=\"comment\"># new</span></span><br></pre></td></tr></table></figure>\n<p>2、<strong>new</strong>方法会返回所构造的对象，<strong>init</strong>则不会。<strong>init</strong>无返回值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Data</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">            cls.x = <span class=\"number\">2</span></span><br><span class=\"line\">             <span class=\"keyword\">print</span> <span class=\"string\">\"init\"</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> cls</span><br><span class=\"line\"></span><br><span class=\"line\">data = Data()</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">init</span></span><br><span class=\"line\"><span class=\"string\">Traceback (most recent call last):</span></span><br><span class=\"line\"><span class=\"string\">  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;</span></span><br><span class=\"line\"><span class=\"string\">TypeError: __init__() should return None, not 'Data'</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Data</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"new\"</span>)</span><br><span class=\"line\">        cls.x = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"init\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">data = Data()</span><br><span class=\"line\">print(data.x)</span><br><span class=\"line\"><span class=\"comment\"># new</span></span><br><span class=\"line\"><span class=\"comment\"># 1</span></span><br><span class=\"line\">data.x =<span class=\"number\">2</span></span><br><span class=\"line\">print(data.x)</span><br><span class=\"line\"><span class=\"comment\"># 2</span></span><br></pre></td></tr></table></figure>\n<p>If <strong>new</strong>() returns an instance of cls, then the new instance’s <strong>init</strong>() method will be invoked like <strong>init</strong>(self[, …]), where self is the new instance and the remaining arguments are the same as were passed to <strong>new</strong>().</p>\n<p>如果<strong>new</strong>返回一个对象的实例，会隐式调用<strong>init</strong></p>\n<p>If <strong>new</strong>() does not return an instance of cls, then the new instance’s <strong>init</strong>() method will not be invoked.</p>\n<p>如果<strong>new</strong>不返回一个对象的实例，<strong>init</strong>不会被调用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(Class)</span>:</span></span><br><span class=\"line\">             object = super(A,Class).__new__(Class)</span><br><span class=\"line\">             <span class=\"keyword\">print</span> <span class=\"string\">\"in New\"</span></span><br><span class=\"line\">             <span class=\"keyword\">return</span> object</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">             <span class=\"keyword\">print</span> <span class=\"string\">\"in init\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">A()</span><br><span class=\"line\"><span class=\"comment\"># in New</span></span><br><span class=\"line\"><span class=\"comment\"># in init</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">             <span class=\"keyword\">print</span> <span class=\"string\">\"in New\"</span></span><br><span class=\"line\">             <span class=\"keyword\">return</span> cls</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">             <span class=\"keyword\">print</span> <span class=\"string\">\"in init\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">a = A()      </span><br><span class=\"line\"><span class=\"comment\"># in New</span></span><br></pre></td></tr></table></figure>\n<p>object.<strong>init</strong>(self[, …])<br>Called when the instance is created. The arguments are those passed to the class constructor expression. If a base class has an <strong>init</strong>() method, the derived class’s <strong>init</strong>() method, if any, must explicitly call it to ensure proper initialization of the base class part of the instance; for example: BaseClass.<strong>init</strong>(self, [args…]). As a special constraint on constructors, no value may be returned; doing so will cause a TypeError to be raised at runtime.</p>\n<p>在对象的实例创建完成后调用。参数被传给类的构造函数。如果基类有<strong>init</strong>方法，子类必须显示调用基类的<strong>init</strong>。</p>\n<p>没有返回值，否则会再引发TypeError错误。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"类中默认函数\"><a href=\"#类中默认函数\" class=\"headerlink\" title=\"类中默认函数\"></a>类中默认函数</h1><h2 id=\"new和init区别\"><a href=\"#new和init区别\" class=\"headerlink\" title=\"new和init区别\"></a><strong><strong>new</strong></strong>和<strong><strong>init</strong></strong>区别</h2><p><strong>new</strong>:创建对象时调用，会返回当前对象的一个实例</p>\n<p><strong>init</strong>:创建完对象后调用，对当前对象的一些实例初始化，无返回值</p>\n<p>1、在类中，如果<strong>new</strong>和<strong>init</strong>同时存在，会优先调用<strong>new</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Data</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">             <span class=\"keyword\">print</span> <span class=\"string\">\"new\"</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">             <span class=\"keyword\">print</span> <span class=\"string\">\"init\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">data = Data()</span><br><span class=\"line\"><span class=\"comment\"># new</span></span><br></pre></td></tr></table></figure>\n<p>2、<strong>new</strong>方法会返回所构造的对象，<strong>init</strong>则不会。<strong>init</strong>无返回值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Data</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">            cls.x = <span class=\"number\">2</span></span><br><span class=\"line\">             <span class=\"keyword\">print</span> <span class=\"string\">\"init\"</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> cls</span><br><span class=\"line\"></span><br><span class=\"line\">data = Data()</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">init</span></span><br><span class=\"line\"><span class=\"string\">Traceback (most recent call last):</span></span><br><span class=\"line\"><span class=\"string\">  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;</span></span><br><span class=\"line\"><span class=\"string\">TypeError: __init__() should return None, not 'Data'</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Data</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"new\"</span>)</span><br><span class=\"line\">        cls.x = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"init\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">data = Data()</span><br><span class=\"line\">print(data.x)</span><br><span class=\"line\"><span class=\"comment\"># new</span></span><br><span class=\"line\"><span class=\"comment\"># 1</span></span><br><span class=\"line\">data.x =<span class=\"number\">2</span></span><br><span class=\"line\">print(data.x)</span><br><span class=\"line\"><span class=\"comment\"># 2</span></span><br></pre></td></tr></table></figure>\n<p>If <strong>new</strong>() returns an instance of cls, then the new instance’s <strong>init</strong>() method will be invoked like <strong>init</strong>(self[, …]), where self is the new instance and the remaining arguments are the same as were passed to <strong>new</strong>().</p>\n<p>如果<strong>new</strong>返回一个对象的实例，会隐式调用<strong>init</strong></p>\n<p>If <strong>new</strong>() does not return an instance of cls, then the new instance’s <strong>init</strong>() method will not be invoked.</p>\n<p>如果<strong>new</strong>不返回一个对象的实例，<strong>init</strong>不会被调用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(Class)</span>:</span></span><br><span class=\"line\">             object = super(A,Class).__new__(Class)</span><br><span class=\"line\">             <span class=\"keyword\">print</span> <span class=\"string\">\"in New\"</span></span><br><span class=\"line\">             <span class=\"keyword\">return</span> object</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">             <span class=\"keyword\">print</span> <span class=\"string\">\"in init\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">A()</span><br><span class=\"line\"><span class=\"comment\"># in New</span></span><br><span class=\"line\"><span class=\"comment\"># in init</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">             <span class=\"keyword\">print</span> <span class=\"string\">\"in New\"</span></span><br><span class=\"line\">             <span class=\"keyword\">return</span> cls</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">             <span class=\"keyword\">print</span> <span class=\"string\">\"in init\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">a = A()      </span><br><span class=\"line\"><span class=\"comment\"># in New</span></span><br></pre></td></tr></table></figure>\n<p>object.<strong>init</strong>(self[, …])<br>Called when the instance is created. The arguments are those passed to the class constructor expression. If a base class has an <strong>init</strong>() method, the derived class’s <strong>init</strong>() method, if any, must explicitly call it to ensure proper initialization of the base class part of the instance; for example: BaseClass.<strong>init</strong>(self, [args…]). As a special constraint on constructors, no value may be returned; doing so will cause a TypeError to be raised at runtime.</p>\n<p>在对象的实例创建完成后调用。参数被传给类的构造函数。如果基类有<strong>init</strong>方法，子类必须显示调用基类的<strong>init</strong>。</p>\n<p>没有返回值，否则会再引发TypeError错误。</p>\n"},{"title":"postgresql配置文件","date":"2019-12-09T08:29:39.000Z","_content":"\n# 1、配置文件\n\n配置文件控制着一个PostgreSQL服务器实例的基本行为，主要包含postgresql.conf、pg_hba.conf、pg_ident.conf\n\n（1）postgresql.conf\n\n   该文件包含一些通用设置，比如内存分配，新建database的默认存储位置，PostgreSQL服务器的IP地址，日志的位置以及许多其他设置。9.4版引入了\n\n   一个新的postgresql.auto.conf文件，任何时候执行Altersystem SQL命令，都会创建或重写该文件。该文件中的设置会替代postgresql.conf文件中的设置。\n\n（2）pg_hba.conf\n\n​    该文件用于控制访问安全性，管理客户端对Postgresql服务器的访问权限，内容包括：允许哪些用户连接到哪个数据库，允许哪些IP或者哪个网段的IP连\n\n​    接到本服务器，以及指定连接时使用的身份验证模式\n\n（3）pg_ident.conf\n\n   pg_hba.conf的权限控制信息中的身份验证模式字段如果指定为ident方式，则用户连接时系统会尝试访问pg_ident文件，如果该文件存在，则系统会基于\n\n​    文件内容将当前执行登录操作的操作系统用户映射为一个PostgreSQL数据库内部用户的身份来登录。\n\n# 2、查看配置文件的位置：    \n\n```bash\npostgres=# selectname,setting from pg_settings where category='File Locations';\n       name        |                 setting                 \n-------------------+-----------------------------------------\n config_file       |/var/lib/pgsql/9.6/data/postgresql.conf\n data_directory    | /var/lib/pgsql/9.6/data\n external_pid_file | \n hba_file          | /var/lib/pgsql/9.6/data/pg_hba.conf\n ident_file        | /var/lib/pgsql/9.6/data/pg_ident.conf\n```\n\n\n\n \n\n# 3、postgresql.conf\n\n3.1、关键的设置\n\n```bash\npostgres=# selectname,context,unit,setting,boot_val,reset_val from pg_settings where namein('listen_addresses','max_connections','shared_buffers','effective_cache_size','work_mem','maintenance_work_mem')order by context,name;\n         name         | context   | unit | setting |boot_val  | reset_val \n----------------------+------------+------+---------+-----------+-----------\n listen_addresses     | postmaster |      | *      | localhost | *\n max_connections      | postmaster |      | 100    | 100       | 100\n shared_buffers       | postmaster | 8kB  | 16384  | 1024      | 16384\n effective_cache_size | user       | 8kB | 524288  | 524288    | 524288\n maintenance_work_mem | user       | kB  | 65536   | 65536     | 65536\n work_mem             | user       | kB  | 4096    | 4096      | 4096\n(6 rows)\n```\n\n\n\n \n\ncontext 设置为postmaster，更改此形参后需要重启PostgreSQL服务才能生效；\n\n设置为user，那么只需要执行一次重新加载即可全局生效。重启数据库服务会终止活动连接，但重新加载不会。  \n\nunit 字段表示这些设置的单位\n\nsetting是指当前设置；boot_val是指默认设置；reset_val是指重新启动服务器或重新加载设置之后的新设置\n\n在postgresql.conf中修改了设置后，一定记得查看一下setting和reset_val并确保二者是一致，否则说明设置并未生效，需要重新启动服务器或者重新加载设置\n\n3.2、postgresql.auto.conf与postgresql.conf区别\n\n对于9.4版及之后的版本来说，Postgresql.auto.conf的优先级是高于postgresql.conf的，如果这两个文件中存在同名配置项，则系统会优先选择前者设定的值。\n\n3.3、postgresql.conf以下网络设置，修改这些值是一定要重新启动数据库服务的\n\nlisten_addresses 一般设定为localhost或者local，但也有很多人会设为*，表示使用本机任一IP地址均可连接到Postgresql服务\n\nport 默认值 为5432\n\nmax_connections\n\n3.4、以下四个设置对系统性能有着全局性的影响，建议你在实际环境下通过实测来找到最优值\n\n(1)share_buffers\n\n​    用于缓存最近访问过的数据页的内存区大小，所有用户会话均可共享此缓存区\n\n​    一般来说越大越好，至少应该达到系统总内存的25%，但不宜超过8GB，因为超过后会出现“边际收益递减”效应。\n\n​    需重启postgreSQL服务\n\n（2）effective_cache_size\n\n一个查询执行过程中可以使用的最大缓存，包括操作系统使用的部分以及PostgreSQL使用部分，系统并不会根据这个值来真实地分配这么多内存，但是规划器会根据这个值来判断系统能否提供查询执行过程中所需的内存。如果将此设置设得过小，远远小于系统真实可用内存量，那么可能会给规划器造成误导，让规划器认为系统可用内存有限，从而选择不使用索引而是走全表扫描（因为使用索引虽然速度快，但需要占用更多的中间内存）。\n\n在一台专用于运行PostgreSQL数据库服务的服务器上，建议将effective_cache_size的值设为系统总内存的一半或者更多。\n\n此设置可动态生效，执行重新加载即可。\n\n（3）work_mem\n\n此设置指定了用于执行排序，哈希关联，表扫描等操作的最大内存量。\n\n此设置可动态生效，执行重新加载即可。\n\n   （4）mintenance_work_mem\n\n​     此设置指定可用于vaccum操作（即清空已标记为“被删除”状态的记录）这类系统内部维护操作的内存总量。\n\n​     其值不应大于1GB\n\n此设置可动态生效，执行重新加载即可。\n\n3.5修改参数命令\n\n```bash\nAlter system set work_mem=8192;\n```\n\n\n\n设置重新加载命令\n\n```bash\nSelect pg_reload_conf();\n```\n\n\n\n3.6、遇到修改了postgresql.conf文件，结果服务器崩溃了这种情况\n\n定位这种问题最简单的方法是查看日志文件，该文件位于postgresql数据文件夹的根目录或者pg_log子文件夹下。\n\n# 4、pg_hba.conf\n\ncat /var/lib/pgsql/9.6/data/pg_hba.conf\n\n```bash\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\n \n# \"local\" isfor Unix domain socket connections only\nlocal   all             all                                     peer\n# IPv4 localconnections:\nhost    all             all             0.0.0.0/0               trust\n# IPv6 localconnections:\nhost    all             all             ::1/128                 ident\n# Allow replicationconnections from localhost, by a user with the\n# replication privilege.\n#local   replication     postgres                                peer\n#host    replication     postgres        127.0.0.1/32            ident\n#host    replication     postgres        ::1/128                 ident\n```\n\n\n\n(1)   身份验证模式，一般以下几种常用选项：ident、trust、md5以及password\n\n1. 1版本开始引入了peer身份验证模式。\n\nIdent和peer模式公适用于Linux，Unix和Mac,不适用于windwos\n\nReject模式，其作用是拒绝所有请求。\n\n(2)   如果你将+0.0.0./0 reject+规则放到+127.0.0.1/32 trust+的前面，那么此时本地用户全都无法连接，即使下面有规则允许也不行。\n\n（3）各模式\n\ntrust最不安全的身份验证模式，该模式允许用户“自证清白”，即可以不用密码就连到数据库\n\nmd5该模式最常用，要求连接发起者携带用md5算法加密的密码\n\npassword 不推荐，因为该模式使用明文密码进行身份验证，不安全\n\nident：该身份验证模式下，系统会将请求发起的操作系统用户映射为PostgreSQL数据库内部用户，并以该内部用户的权限登录，且此时无需提供登录密码。操作系统用户与数据库内部用户之间的映射关系会记录在pg_ident.conf文件中。\n\npeer使用发起端的操作系统名进行身份验证\n\n# 5、配置文件的重新加载\n\n```bash\n/usr/pgsql-9.6/bin/pg_ctlreload -D /var/lib/pgsql/9.6/data/ \nsystemctlreload postgresql-9.6.service \nselectpg_reload_conf();\n```\n\n\n\n\n\n ","source":"_posts/postgresql/postgresql配置文件.md","raw":"---\ntitle: postgresql配置文件\ndate: 2019-12-09 16:29:39\ntags:\n- postgresql\n---\n\n# 1、配置文件\n\n配置文件控制着一个PostgreSQL服务器实例的基本行为，主要包含postgresql.conf、pg_hba.conf、pg_ident.conf\n\n（1）postgresql.conf\n\n   该文件包含一些通用设置，比如内存分配，新建database的默认存储位置，PostgreSQL服务器的IP地址，日志的位置以及许多其他设置。9.4版引入了\n\n   一个新的postgresql.auto.conf文件，任何时候执行Altersystem SQL命令，都会创建或重写该文件。该文件中的设置会替代postgresql.conf文件中的设置。\n\n（2）pg_hba.conf\n\n​    该文件用于控制访问安全性，管理客户端对Postgresql服务器的访问权限，内容包括：允许哪些用户连接到哪个数据库，允许哪些IP或者哪个网段的IP连\n\n​    接到本服务器，以及指定连接时使用的身份验证模式\n\n（3）pg_ident.conf\n\n   pg_hba.conf的权限控制信息中的身份验证模式字段如果指定为ident方式，则用户连接时系统会尝试访问pg_ident文件，如果该文件存在，则系统会基于\n\n​    文件内容将当前执行登录操作的操作系统用户映射为一个PostgreSQL数据库内部用户的身份来登录。\n\n# 2、查看配置文件的位置：    \n\n```bash\npostgres=# selectname,setting from pg_settings where category='File Locations';\n       name        |                 setting                 \n-------------------+-----------------------------------------\n config_file       |/var/lib/pgsql/9.6/data/postgresql.conf\n data_directory    | /var/lib/pgsql/9.6/data\n external_pid_file | \n hba_file          | /var/lib/pgsql/9.6/data/pg_hba.conf\n ident_file        | /var/lib/pgsql/9.6/data/pg_ident.conf\n```\n\n\n\n \n\n# 3、postgresql.conf\n\n3.1、关键的设置\n\n```bash\npostgres=# selectname,context,unit,setting,boot_val,reset_val from pg_settings where namein('listen_addresses','max_connections','shared_buffers','effective_cache_size','work_mem','maintenance_work_mem')order by context,name;\n         name         | context   | unit | setting |boot_val  | reset_val \n----------------------+------------+------+---------+-----------+-----------\n listen_addresses     | postmaster |      | *      | localhost | *\n max_connections      | postmaster |      | 100    | 100       | 100\n shared_buffers       | postmaster | 8kB  | 16384  | 1024      | 16384\n effective_cache_size | user       | 8kB | 524288  | 524288    | 524288\n maintenance_work_mem | user       | kB  | 65536   | 65536     | 65536\n work_mem             | user       | kB  | 4096    | 4096      | 4096\n(6 rows)\n```\n\n\n\n \n\ncontext 设置为postmaster，更改此形参后需要重启PostgreSQL服务才能生效；\n\n设置为user，那么只需要执行一次重新加载即可全局生效。重启数据库服务会终止活动连接，但重新加载不会。  \n\nunit 字段表示这些设置的单位\n\nsetting是指当前设置；boot_val是指默认设置；reset_val是指重新启动服务器或重新加载设置之后的新设置\n\n在postgresql.conf中修改了设置后，一定记得查看一下setting和reset_val并确保二者是一致，否则说明设置并未生效，需要重新启动服务器或者重新加载设置\n\n3.2、postgresql.auto.conf与postgresql.conf区别\n\n对于9.4版及之后的版本来说，Postgresql.auto.conf的优先级是高于postgresql.conf的，如果这两个文件中存在同名配置项，则系统会优先选择前者设定的值。\n\n3.3、postgresql.conf以下网络设置，修改这些值是一定要重新启动数据库服务的\n\nlisten_addresses 一般设定为localhost或者local，但也有很多人会设为*，表示使用本机任一IP地址均可连接到Postgresql服务\n\nport 默认值 为5432\n\nmax_connections\n\n3.4、以下四个设置对系统性能有着全局性的影响，建议你在实际环境下通过实测来找到最优值\n\n(1)share_buffers\n\n​    用于缓存最近访问过的数据页的内存区大小，所有用户会话均可共享此缓存区\n\n​    一般来说越大越好，至少应该达到系统总内存的25%，但不宜超过8GB，因为超过后会出现“边际收益递减”效应。\n\n​    需重启postgreSQL服务\n\n（2）effective_cache_size\n\n一个查询执行过程中可以使用的最大缓存，包括操作系统使用的部分以及PostgreSQL使用部分，系统并不会根据这个值来真实地分配这么多内存，但是规划器会根据这个值来判断系统能否提供查询执行过程中所需的内存。如果将此设置设得过小，远远小于系统真实可用内存量，那么可能会给规划器造成误导，让规划器认为系统可用内存有限，从而选择不使用索引而是走全表扫描（因为使用索引虽然速度快，但需要占用更多的中间内存）。\n\n在一台专用于运行PostgreSQL数据库服务的服务器上，建议将effective_cache_size的值设为系统总内存的一半或者更多。\n\n此设置可动态生效，执行重新加载即可。\n\n（3）work_mem\n\n此设置指定了用于执行排序，哈希关联，表扫描等操作的最大内存量。\n\n此设置可动态生效，执行重新加载即可。\n\n   （4）mintenance_work_mem\n\n​     此设置指定可用于vaccum操作（即清空已标记为“被删除”状态的记录）这类系统内部维护操作的内存总量。\n\n​     其值不应大于1GB\n\n此设置可动态生效，执行重新加载即可。\n\n3.5修改参数命令\n\n```bash\nAlter system set work_mem=8192;\n```\n\n\n\n设置重新加载命令\n\n```bash\nSelect pg_reload_conf();\n```\n\n\n\n3.6、遇到修改了postgresql.conf文件，结果服务器崩溃了这种情况\n\n定位这种问题最简单的方法是查看日志文件，该文件位于postgresql数据文件夹的根目录或者pg_log子文件夹下。\n\n# 4、pg_hba.conf\n\ncat /var/lib/pgsql/9.6/data/pg_hba.conf\n\n```bash\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\n \n# \"local\" isfor Unix domain socket connections only\nlocal   all             all                                     peer\n# IPv4 localconnections:\nhost    all             all             0.0.0.0/0               trust\n# IPv6 localconnections:\nhost    all             all             ::1/128                 ident\n# Allow replicationconnections from localhost, by a user with the\n# replication privilege.\n#local   replication     postgres                                peer\n#host    replication     postgres        127.0.0.1/32            ident\n#host    replication     postgres        ::1/128                 ident\n```\n\n\n\n(1)   身份验证模式，一般以下几种常用选项：ident、trust、md5以及password\n\n1. 1版本开始引入了peer身份验证模式。\n\nIdent和peer模式公适用于Linux，Unix和Mac,不适用于windwos\n\nReject模式，其作用是拒绝所有请求。\n\n(2)   如果你将+0.0.0./0 reject+规则放到+127.0.0.1/32 trust+的前面，那么此时本地用户全都无法连接，即使下面有规则允许也不行。\n\n（3）各模式\n\ntrust最不安全的身份验证模式，该模式允许用户“自证清白”，即可以不用密码就连到数据库\n\nmd5该模式最常用，要求连接发起者携带用md5算法加密的密码\n\npassword 不推荐，因为该模式使用明文密码进行身份验证，不安全\n\nident：该身份验证模式下，系统会将请求发起的操作系统用户映射为PostgreSQL数据库内部用户，并以该内部用户的权限登录，且此时无需提供登录密码。操作系统用户与数据库内部用户之间的映射关系会记录在pg_ident.conf文件中。\n\npeer使用发起端的操作系统名进行身份验证\n\n# 5、配置文件的重新加载\n\n```bash\n/usr/pgsql-9.6/bin/pg_ctlreload -D /var/lib/pgsql/9.6/data/ \nsystemctlreload postgresql-9.6.service \nselectpg_reload_conf();\n```\n\n\n\n\n\n ","slug":"postgresql/postgresql配置文件","published":1,"updated":"2020-08-27T15:25:48.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblnd004s4tje4rdljxf3","content":"<h1 id=\"1、配置文件\"><a href=\"#1、配置文件\" class=\"headerlink\" title=\"1、配置文件\"></a>1、配置文件</h1><p>配置文件控制着一个PostgreSQL服务器实例的基本行为，主要包含postgresql.conf、pg_hba.conf、pg_ident.conf</p>\n<p>（1）postgresql.conf</p>\n<p>   该文件包含一些通用设置，比如内存分配，新建database的默认存储位置，PostgreSQL服务器的IP地址，日志的位置以及许多其他设置。9.4版引入了</p>\n<p>   一个新的postgresql.auto.conf文件，任何时候执行Altersystem SQL命令，都会创建或重写该文件。该文件中的设置会替代postgresql.conf文件中的设置。</p>\n<p>（2）pg_hba.conf</p>\n<p>​    该文件用于控制访问安全性，管理客户端对Postgresql服务器的访问权限，内容包括：允许哪些用户连接到哪个数据库，允许哪些IP或者哪个网段的IP连</p>\n<p>​    接到本服务器，以及指定连接时使用的身份验证模式</p>\n<p>（3）pg_ident.conf</p>\n<p>   pg_hba.conf的权限控制信息中的身份验证模式字段如果指定为ident方式，则用户连接时系统会尝试访问pg_ident文件，如果该文件存在，则系统会基于</p>\n<p>​    文件内容将当前执行登录操作的操作系统用户映射为一个PostgreSQL数据库内部用户的身份来登录。</p>\n<h1 id=\"2、查看配置文件的位置：\"><a href=\"#2、查看配置文件的位置：\" class=\"headerlink\" title=\"2、查看配置文件的位置：\"></a>2、查看配置文件的位置：</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=<span class=\"comment\"># selectname,setting from pg_settings where category='File Locations';</span></span><br><span class=\"line\">       name        |                 setting                 </span><br><span class=\"line\">-------------------+-----------------------------------------</span><br><span class=\"line\"> config_file       |/var/lib/pgsql/9.6/data/postgresql.conf</span><br><span class=\"line\"> data_directory    | /var/lib/pgsql/9.6/data</span><br><span class=\"line\"> external_pid_file | </span><br><span class=\"line\"> hba_file          | /var/lib/pgsql/9.6/data/pg_hba.conf</span><br><span class=\"line\"> ident_file        | /var/lib/pgsql/9.6/data/pg_ident.conf</span><br></pre></td></tr></table></figure>\n<h1 id=\"3、postgresql-conf\"><a href=\"#3、postgresql-conf\" class=\"headerlink\" title=\"3、postgresql.conf\"></a>3、postgresql.conf</h1><p>3.1、关键的设置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=<span class=\"comment\"># selectname,context,unit,setting,boot_val,reset_val from pg_settings where namein('listen_addresses','max_connections','shared_buffers','effective_cache_size','work_mem','maintenance_work_mem')order by context,name;</span></span><br><span class=\"line\">         name         | context   | unit | setting |boot_val  | reset_val </span><br><span class=\"line\">----------------------+------------+------+---------+-----------+-----------</span><br><span class=\"line\"> listen_addresses     | postmaster |      | *      | localhost | *</span><br><span class=\"line\"> max_connections      | postmaster |      | 100    | 100       | 100</span><br><span class=\"line\"> shared_buffers       | postmaster | 8kB  | 16384  | 1024      | 16384</span><br><span class=\"line\"> effective_cache_size | user       | 8kB | 524288  | 524288    | 524288</span><br><span class=\"line\"> maintenance_work_mem | user       | kB  | 65536   | 65536     | 65536</span><br><span class=\"line\"> work_mem             | user       | kB  | 4096    | 4096      | 4096</span><br><span class=\"line\">(6 rows)</span><br></pre></td></tr></table></figure>\n<p>context 设置为postmaster，更改此形参后需要重启PostgreSQL服务才能生效；</p>\n<p>设置为user，那么只需要执行一次重新加载即可全局生效。重启数据库服务会终止活动连接，但重新加载不会。  </p>\n<p>unit 字段表示这些设置的单位</p>\n<p>setting是指当前设置；boot_val是指默认设置；reset_val是指重新启动服务器或重新加载设置之后的新设置</p>\n<p>在postgresql.conf中修改了设置后，一定记得查看一下setting和reset_val并确保二者是一致，否则说明设置并未生效，需要重新启动服务器或者重新加载设置</p>\n<p>3.2、postgresql.auto.conf与postgresql.conf区别</p>\n<p>对于9.4版及之后的版本来说，Postgresql.auto.conf的优先级是高于postgresql.conf的，如果这两个文件中存在同名配置项，则系统会优先选择前者设定的值。</p>\n<p>3.3、postgresql.conf以下网络设置，修改这些值是一定要重新启动数据库服务的</p>\n<p>listen_addresses 一般设定为localhost或者local，但也有很多人会设为*，表示使用本机任一IP地址均可连接到Postgresql服务</p>\n<p>port 默认值 为5432</p>\n<p>max_connections</p>\n<p>3.4、以下四个设置对系统性能有着全局性的影响，建议你在实际环境下通过实测来找到最优值</p>\n<p>(1)share_buffers</p>\n<p>​    用于缓存最近访问过的数据页的内存区大小，所有用户会话均可共享此缓存区</p>\n<p>​    一般来说越大越好，至少应该达到系统总内存的25%，但不宜超过8GB，因为超过后会出现“边际收益递减”效应。</p>\n<p>​    需重启postgreSQL服务</p>\n<p>（2）effective_cache_size</p>\n<p>一个查询执行过程中可以使用的最大缓存，包括操作系统使用的部分以及PostgreSQL使用部分，系统并不会根据这个值来真实地分配这么多内存，但是规划器会根据这个值来判断系统能否提供查询执行过程中所需的内存。如果将此设置设得过小，远远小于系统真实可用内存量，那么可能会给规划器造成误导，让规划器认为系统可用内存有限，从而选择不使用索引而是走全表扫描（因为使用索引虽然速度快，但需要占用更多的中间内存）。</p>\n<p>在一台专用于运行PostgreSQL数据库服务的服务器上，建议将effective_cache_size的值设为系统总内存的一半或者更多。</p>\n<p>此设置可动态生效，执行重新加载即可。</p>\n<p>（3）work_mem</p>\n<p>此设置指定了用于执行排序，哈希关联，表扫描等操作的最大内存量。</p>\n<p>此设置可动态生效，执行重新加载即可。</p>\n<p>   （4）mintenance_work_mem</p>\n<p>​     此设置指定可用于vaccum操作（即清空已标记为“被删除”状态的记录）这类系统内部维护操作的内存总量。</p>\n<p>​     其值不应大于1GB</p>\n<p>此设置可动态生效，执行重新加载即可。</p>\n<p>3.5修改参数命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Alter system <span class=\"built_in\">set</span> work_mem=8192;</span><br></pre></td></tr></table></figure>\n<p>设置重新加载命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Select pg_reload_conf();</span><br></pre></td></tr></table></figure>\n<p>3.6、遇到修改了postgresql.conf文件，结果服务器崩溃了这种情况</p>\n<p>定位这种问题最简单的方法是查看日志文件，该文件位于postgresql数据文件夹的根目录或者pg_log子文件夹下。</p>\n<h1 id=\"4、pg-hba-conf\"><a href=\"#4、pg-hba-conf\" class=\"headerlink\" title=\"4、pg_hba.conf\"></a>4、pg_hba.conf</h1><p>cat /var/lib/pgsql/9.6/data/pg_hba.conf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># TYPE  DATABASE        USER            ADDRESS                 METHOD</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># \"local\" isfor Unix domain socket connections only</span></span><br><span class=\"line\"><span class=\"built_in\">local</span>   all             all                                     peer</span><br><span class=\"line\"><span class=\"comment\"># IPv4 localconnections:</span></span><br><span class=\"line\">host    all             all             0.0.0.0/0               trust</span><br><span class=\"line\"><span class=\"comment\"># IPv6 localconnections:</span></span><br><span class=\"line\">host    all             all             ::1/128                 ident</span><br><span class=\"line\"><span class=\"comment\"># Allow replicationconnections from localhost, by a user with the</span></span><br><span class=\"line\"><span class=\"comment\"># replication privilege.</span></span><br><span class=\"line\"><span class=\"comment\">#local   replication     postgres                                peer</span></span><br><span class=\"line\"><span class=\"comment\">#host    replication     postgres        127.0.0.1/32            ident</span></span><br><span class=\"line\"><span class=\"comment\">#host    replication     postgres        ::1/128                 ident</span></span><br></pre></td></tr></table></figure>\n<p>(1)   身份验证模式，一般以下几种常用选项：ident、trust、md5以及password</p>\n<ol>\n<li>1版本开始引入了peer身份验证模式。</li>\n</ol>\n<p>Ident和peer模式公适用于Linux，Unix和Mac,不适用于windwos</p>\n<p>Reject模式，其作用是拒绝所有请求。</p>\n<p>(2)   如果你将+0.0.0./0 reject+规则放到+127.0.0.1/32 trust+的前面，那么此时本地用户全都无法连接，即使下面有规则允许也不行。</p>\n<p>（3）各模式</p>\n<p>trust最不安全的身份验证模式，该模式允许用户“自证清白”，即可以不用密码就连到数据库</p>\n<p>md5该模式最常用，要求连接发起者携带用md5算法加密的密码</p>\n<p>password 不推荐，因为该模式使用明文密码进行身份验证，不安全</p>\n<p>ident：该身份验证模式下，系统会将请求发起的操作系统用户映射为PostgreSQL数据库内部用户，并以该内部用户的权限登录，且此时无需提供登录密码。操作系统用户与数据库内部用户之间的映射关系会记录在pg_ident.conf文件中。</p>\n<p>peer使用发起端的操作系统名进行身份验证</p>\n<h1 id=\"5、配置文件的重新加载\"><a href=\"#5、配置文件的重新加载\" class=\"headerlink\" title=\"5、配置文件的重新加载\"></a>5、配置文件的重新加载</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/pgsql-9.6/bin/pg_ctlreload -D /var/lib/pgsql/9.6/data/ </span><br><span class=\"line\">systemctlreload postgresql-9.6.service </span><br><span class=\"line\">selectpg_reload_conf();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1、配置文件\"><a href=\"#1、配置文件\" class=\"headerlink\" title=\"1、配置文件\"></a>1、配置文件</h1><p>配置文件控制着一个PostgreSQL服务器实例的基本行为，主要包含postgresql.conf、pg_hba.conf、pg_ident.conf</p>\n<p>（1）postgresql.conf</p>\n<p>   该文件包含一些通用设置，比如内存分配，新建database的默认存储位置，PostgreSQL服务器的IP地址，日志的位置以及许多其他设置。9.4版引入了</p>\n<p>   一个新的postgresql.auto.conf文件，任何时候执行Altersystem SQL命令，都会创建或重写该文件。该文件中的设置会替代postgresql.conf文件中的设置。</p>\n<p>（2）pg_hba.conf</p>\n<p>​    该文件用于控制访问安全性，管理客户端对Postgresql服务器的访问权限，内容包括：允许哪些用户连接到哪个数据库，允许哪些IP或者哪个网段的IP连</p>\n<p>​    接到本服务器，以及指定连接时使用的身份验证模式</p>\n<p>（3）pg_ident.conf</p>\n<p>   pg_hba.conf的权限控制信息中的身份验证模式字段如果指定为ident方式，则用户连接时系统会尝试访问pg_ident文件，如果该文件存在，则系统会基于</p>\n<p>​    文件内容将当前执行登录操作的操作系统用户映射为一个PostgreSQL数据库内部用户的身份来登录。</p>\n<h1 id=\"2、查看配置文件的位置：\"><a href=\"#2、查看配置文件的位置：\" class=\"headerlink\" title=\"2、查看配置文件的位置：\"></a>2、查看配置文件的位置：</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=<span class=\"comment\"># selectname,setting from pg_settings where category='File Locations';</span></span><br><span class=\"line\">       name        |                 setting                 </span><br><span class=\"line\">-------------------+-----------------------------------------</span><br><span class=\"line\"> config_file       |/var/lib/pgsql/9.6/data/postgresql.conf</span><br><span class=\"line\"> data_directory    | /var/lib/pgsql/9.6/data</span><br><span class=\"line\"> external_pid_file | </span><br><span class=\"line\"> hba_file          | /var/lib/pgsql/9.6/data/pg_hba.conf</span><br><span class=\"line\"> ident_file        | /var/lib/pgsql/9.6/data/pg_ident.conf</span><br></pre></td></tr></table></figure>\n<h1 id=\"3、postgresql-conf\"><a href=\"#3、postgresql-conf\" class=\"headerlink\" title=\"3、postgresql.conf\"></a>3、postgresql.conf</h1><p>3.1、关键的设置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=<span class=\"comment\"># selectname,context,unit,setting,boot_val,reset_val from pg_settings where namein('listen_addresses','max_connections','shared_buffers','effective_cache_size','work_mem','maintenance_work_mem')order by context,name;</span></span><br><span class=\"line\">         name         | context   | unit | setting |boot_val  | reset_val </span><br><span class=\"line\">----------------------+------------+------+---------+-----------+-----------</span><br><span class=\"line\"> listen_addresses     | postmaster |      | *      | localhost | *</span><br><span class=\"line\"> max_connections      | postmaster |      | 100    | 100       | 100</span><br><span class=\"line\"> shared_buffers       | postmaster | 8kB  | 16384  | 1024      | 16384</span><br><span class=\"line\"> effective_cache_size | user       | 8kB | 524288  | 524288    | 524288</span><br><span class=\"line\"> maintenance_work_mem | user       | kB  | 65536   | 65536     | 65536</span><br><span class=\"line\"> work_mem             | user       | kB  | 4096    | 4096      | 4096</span><br><span class=\"line\">(6 rows)</span><br></pre></td></tr></table></figure>\n<p>context 设置为postmaster，更改此形参后需要重启PostgreSQL服务才能生效；</p>\n<p>设置为user，那么只需要执行一次重新加载即可全局生效。重启数据库服务会终止活动连接，但重新加载不会。  </p>\n<p>unit 字段表示这些设置的单位</p>\n<p>setting是指当前设置；boot_val是指默认设置；reset_val是指重新启动服务器或重新加载设置之后的新设置</p>\n<p>在postgresql.conf中修改了设置后，一定记得查看一下setting和reset_val并确保二者是一致，否则说明设置并未生效，需要重新启动服务器或者重新加载设置</p>\n<p>3.2、postgresql.auto.conf与postgresql.conf区别</p>\n<p>对于9.4版及之后的版本来说，Postgresql.auto.conf的优先级是高于postgresql.conf的，如果这两个文件中存在同名配置项，则系统会优先选择前者设定的值。</p>\n<p>3.3、postgresql.conf以下网络设置，修改这些值是一定要重新启动数据库服务的</p>\n<p>listen_addresses 一般设定为localhost或者local，但也有很多人会设为*，表示使用本机任一IP地址均可连接到Postgresql服务</p>\n<p>port 默认值 为5432</p>\n<p>max_connections</p>\n<p>3.4、以下四个设置对系统性能有着全局性的影响，建议你在实际环境下通过实测来找到最优值</p>\n<p>(1)share_buffers</p>\n<p>​    用于缓存最近访问过的数据页的内存区大小，所有用户会话均可共享此缓存区</p>\n<p>​    一般来说越大越好，至少应该达到系统总内存的25%，但不宜超过8GB，因为超过后会出现“边际收益递减”效应。</p>\n<p>​    需重启postgreSQL服务</p>\n<p>（2）effective_cache_size</p>\n<p>一个查询执行过程中可以使用的最大缓存，包括操作系统使用的部分以及PostgreSQL使用部分，系统并不会根据这个值来真实地分配这么多内存，但是规划器会根据这个值来判断系统能否提供查询执行过程中所需的内存。如果将此设置设得过小，远远小于系统真实可用内存量，那么可能会给规划器造成误导，让规划器认为系统可用内存有限，从而选择不使用索引而是走全表扫描（因为使用索引虽然速度快，但需要占用更多的中间内存）。</p>\n<p>在一台专用于运行PostgreSQL数据库服务的服务器上，建议将effective_cache_size的值设为系统总内存的一半或者更多。</p>\n<p>此设置可动态生效，执行重新加载即可。</p>\n<p>（3）work_mem</p>\n<p>此设置指定了用于执行排序，哈希关联，表扫描等操作的最大内存量。</p>\n<p>此设置可动态生效，执行重新加载即可。</p>\n<p>   （4）mintenance_work_mem</p>\n<p>​     此设置指定可用于vaccum操作（即清空已标记为“被删除”状态的记录）这类系统内部维护操作的内存总量。</p>\n<p>​     其值不应大于1GB</p>\n<p>此设置可动态生效，执行重新加载即可。</p>\n<p>3.5修改参数命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Alter system <span class=\"built_in\">set</span> work_mem=8192;</span><br></pre></td></tr></table></figure>\n<p>设置重新加载命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Select pg_reload_conf();</span><br></pre></td></tr></table></figure>\n<p>3.6、遇到修改了postgresql.conf文件，结果服务器崩溃了这种情况</p>\n<p>定位这种问题最简单的方法是查看日志文件，该文件位于postgresql数据文件夹的根目录或者pg_log子文件夹下。</p>\n<h1 id=\"4、pg-hba-conf\"><a href=\"#4、pg-hba-conf\" class=\"headerlink\" title=\"4、pg_hba.conf\"></a>4、pg_hba.conf</h1><p>cat /var/lib/pgsql/9.6/data/pg_hba.conf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># TYPE  DATABASE        USER            ADDRESS                 METHOD</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># \"local\" isfor Unix domain socket connections only</span></span><br><span class=\"line\"><span class=\"built_in\">local</span>   all             all                                     peer</span><br><span class=\"line\"><span class=\"comment\"># IPv4 localconnections:</span></span><br><span class=\"line\">host    all             all             0.0.0.0/0               trust</span><br><span class=\"line\"><span class=\"comment\"># IPv6 localconnections:</span></span><br><span class=\"line\">host    all             all             ::1/128                 ident</span><br><span class=\"line\"><span class=\"comment\"># Allow replicationconnections from localhost, by a user with the</span></span><br><span class=\"line\"><span class=\"comment\"># replication privilege.</span></span><br><span class=\"line\"><span class=\"comment\">#local   replication     postgres                                peer</span></span><br><span class=\"line\"><span class=\"comment\">#host    replication     postgres        127.0.0.1/32            ident</span></span><br><span class=\"line\"><span class=\"comment\">#host    replication     postgres        ::1/128                 ident</span></span><br></pre></td></tr></table></figure>\n<p>(1)   身份验证模式，一般以下几种常用选项：ident、trust、md5以及password</p>\n<ol>\n<li>1版本开始引入了peer身份验证模式。</li>\n</ol>\n<p>Ident和peer模式公适用于Linux，Unix和Mac,不适用于windwos</p>\n<p>Reject模式，其作用是拒绝所有请求。</p>\n<p>(2)   如果你将+0.0.0./0 reject+规则放到+127.0.0.1/32 trust+的前面，那么此时本地用户全都无法连接，即使下面有规则允许也不行。</p>\n<p>（3）各模式</p>\n<p>trust最不安全的身份验证模式，该模式允许用户“自证清白”，即可以不用密码就连到数据库</p>\n<p>md5该模式最常用，要求连接发起者携带用md5算法加密的密码</p>\n<p>password 不推荐，因为该模式使用明文密码进行身份验证，不安全</p>\n<p>ident：该身份验证模式下，系统会将请求发起的操作系统用户映射为PostgreSQL数据库内部用户，并以该内部用户的权限登录，且此时无需提供登录密码。操作系统用户与数据库内部用户之间的映射关系会记录在pg_ident.conf文件中。</p>\n<p>peer使用发起端的操作系统名进行身份验证</p>\n<h1 id=\"5、配置文件的重新加载\"><a href=\"#5、配置文件的重新加载\" class=\"headerlink\" title=\"5、配置文件的重新加载\"></a>5、配置文件的重新加载</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/pgsql-9.6/bin/pg_ctlreload -D /var/lib/pgsql/9.6/data/ </span><br><span class=\"line\">systemctlreload postgresql-9.6.service </span><br><span class=\"line\">selectpg_reload_conf();</span><br></pre></td></tr></table></figure>\n"},{"title":"python中and和or用法","date":"2019-10-25T07:41:30.000Z","_content":"\n在[Python](http://lib.csdn.net/base/python) 中，and 和 or 执行布尔逻辑演算，如你所期待的一样。但是它们并不返回布尔值，而是返回它们实际进行比较的值之一。\n\n（类似C++里面的&&和||的短路求值）\n\n（ 在布尔环境中，0、”、[]、()、{}、None为假；其它任何东西都为真。但是可以在类中定义特定的方法使得类实例的演算值为假。）\n\n# and实例：\n\n```python\n>>> 'a' and 'b'\n'b'\n>>> '' and 'b'\n''\n>>> 'a' and 'b' and 'c'\n'c'12345\n```\n\n从左到右扫描，返回第一个为假的表达式值，无假值则返回最后一个表达式值。\n\n# or实例：\n\n```python\n>>> 'a' or 'b'\n'a'\n>>> '' or 'b'\n'b'\n>>> '' or [] or{}\n{}12345\n```\n\n从左到右扫描，返回第一个为真的表达式值，无真值则返回最后一个表达式值。\n\n# and-or搭配：\n\n```python\n>>> a = \"betabin\"\n>>> b = \"python\"\n>>> 1 and a or b\n'betabin'\n>>> 0 and a or b\n'python'12345\n```\n\n看起来类似于于我们Ｃ＋＋中的条件运算符（bool？a：b），是的，当a为true的时候是一样的。但是，当a为false的时候，就明显不同了。\n\n如果坚持要用and-or技巧来实现条件运算符的话，可以用种安全的方法：\n\n```python\n>>> a = \"\"\n>>> b = \"betabin\"\n>>> (1 and [a] or [b])[0]\n''123\n```\n\n就是万能的[]，把a为假的可能性给抹杀掉，然后通过[0]再获得（因为要通过[0]获得元素，所以b也得加上[]）。\n\n\n\n这个and-or技巧主要在lambda中使用。","source":"_posts/python/python中and和or用法.md","raw":"---\ntitle: python中and和or用法\ndate: 2019-10-25 15:41:30\ntags:\n - python\n---\n\n在[Python](http://lib.csdn.net/base/python) 中，and 和 or 执行布尔逻辑演算，如你所期待的一样。但是它们并不返回布尔值，而是返回它们实际进行比较的值之一。\n\n（类似C++里面的&&和||的短路求值）\n\n（ 在布尔环境中，0、”、[]、()、{}、None为假；其它任何东西都为真。但是可以在类中定义特定的方法使得类实例的演算值为假。）\n\n# and实例：\n\n```python\n>>> 'a' and 'b'\n'b'\n>>> '' and 'b'\n''\n>>> 'a' and 'b' and 'c'\n'c'12345\n```\n\n从左到右扫描，返回第一个为假的表达式值，无假值则返回最后一个表达式值。\n\n# or实例：\n\n```python\n>>> 'a' or 'b'\n'a'\n>>> '' or 'b'\n'b'\n>>> '' or [] or{}\n{}12345\n```\n\n从左到右扫描，返回第一个为真的表达式值，无真值则返回最后一个表达式值。\n\n# and-or搭配：\n\n```python\n>>> a = \"betabin\"\n>>> b = \"python\"\n>>> 1 and a or b\n'betabin'\n>>> 0 and a or b\n'python'12345\n```\n\n看起来类似于于我们Ｃ＋＋中的条件运算符（bool？a：b），是的，当a为true的时候是一样的。但是，当a为false的时候，就明显不同了。\n\n如果坚持要用and-or技巧来实现条件运算符的话，可以用种安全的方法：\n\n```python\n>>> a = \"\"\n>>> b = \"betabin\"\n>>> (1 and [a] or [b])[0]\n''123\n```\n\n就是万能的[]，把a为假的可能性给抹杀掉，然后通过[0]再获得（因为要通过[0]获得元素，所以b也得加上[]）。\n\n\n\n这个and-or技巧主要在lambda中使用。","slug":"python/python中and和or用法","published":1,"updated":"2020-08-27T15:25:48.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblnd004u4tjelxbslo85","content":"<p>在<a href=\"http://lib.csdn.net/base/python\" target=\"_blank\" rel=\"noopener\">Python</a> 中，and 和 or 执行布尔逻辑演算，如你所期待的一样。但是它们并不返回布尔值，而是返回它们实际进行比较的值之一。</p>\n<p>（类似C++里面的&amp;&amp;和||的短路求值）</p>\n<p>（ 在布尔环境中，0、”、[]、()、{}、None为假；其它任何东西都为真。但是可以在类中定义特定的方法使得类实例的演算值为假。）</p>\n<h1 id=\"and实例：\"><a href=\"#and实例：\" class=\"headerlink\" title=\"and实例：\"></a>and实例：</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'a'</span> <span class=\"keyword\">and</span> <span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">''</span> <span class=\"keyword\">and</span> <span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'a'</span> <span class=\"keyword\">and</span> <span class=\"string\">'b'</span> <span class=\"keyword\">and</span> <span class=\"string\">'c'</span></span><br><span class=\"line\"><span class=\"string\">'c'</span><span class=\"number\">12345</span></span><br></pre></td></tr></table></figure>\n<p>从左到右扫描，返回第一个为假的表达式值，无假值则返回最后一个表达式值。</p>\n<h1 id=\"or实例：\"><a href=\"#or实例：\" class=\"headerlink\" title=\"or实例：\"></a>or实例：</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'a'</span> <span class=\"keyword\">or</span> <span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"string\">'a'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">''</span> <span class=\"keyword\">or</span> <span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">''</span> <span class=\"keyword\">or</span> [] <span class=\"keyword\">or</span>&#123;&#125;</span><br><span class=\"line\">&#123;&#125;<span class=\"number\">12345</span></span><br></pre></td></tr></table></figure>\n<p>从左到右扫描，返回第一个为真的表达式值，无真值则返回最后一个表达式值。</p>\n<h1 id=\"and-or搭配：\"><a href=\"#and-or搭配：\" class=\"headerlink\" title=\"and-or搭配：\"></a>and-or搭配：</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">\"betabin\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"string\">\"python\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> <span class=\"keyword\">and</span> a <span class=\"keyword\">or</span> b</span><br><span class=\"line\"><span class=\"string\">'betabin'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0</span> <span class=\"keyword\">and</span> a <span class=\"keyword\">or</span> b</span><br><span class=\"line\"><span class=\"string\">'python'</span><span class=\"number\">12345</span></span><br></pre></td></tr></table></figure>\n<p>看起来类似于于我们Ｃ＋＋中的条件运算符（bool？a：b），是的，当a为true的时候是一样的。但是，当a为false的时候，就明显不同了。</p>\n<p>如果坚持要用and-or技巧来实现条件运算符的话，可以用种安全的方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"string\">\"betabin\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>(<span class=\"number\">1</span> <span class=\"keyword\">and</span> [a] <span class=\"keyword\">or</span> [b])[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"string\">''</span><span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n<p>就是万能的[]，把a为假的可能性给抹杀掉，然后通过[0]再获得（因为要通过[0]获得元素，所以b也得加上[]）。</p>\n<p>这个and-or技巧主要在lambda中使用。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在<a href=\"http://lib.csdn.net/base/python\" target=\"_blank\" rel=\"noopener\">Python</a> 中，and 和 or 执行布尔逻辑演算，如你所期待的一样。但是它们并不返回布尔值，而是返回它们实际进行比较的值之一。</p>\n<p>（类似C++里面的&amp;&amp;和||的短路求值）</p>\n<p>（ 在布尔环境中，0、”、[]、()、{}、None为假；其它任何东西都为真。但是可以在类中定义特定的方法使得类实例的演算值为假。）</p>\n<h1 id=\"and实例：\"><a href=\"#and实例：\" class=\"headerlink\" title=\"and实例：\"></a>and实例：</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'a'</span> <span class=\"keyword\">and</span> <span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">''</span> <span class=\"keyword\">and</span> <span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'a'</span> <span class=\"keyword\">and</span> <span class=\"string\">'b'</span> <span class=\"keyword\">and</span> <span class=\"string\">'c'</span></span><br><span class=\"line\"><span class=\"string\">'c'</span><span class=\"number\">12345</span></span><br></pre></td></tr></table></figure>\n<p>从左到右扫描，返回第一个为假的表达式值，无假值则返回最后一个表达式值。</p>\n<h1 id=\"or实例：\"><a href=\"#or实例：\" class=\"headerlink\" title=\"or实例：\"></a>or实例：</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'a'</span> <span class=\"keyword\">or</span> <span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"string\">'a'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">''</span> <span class=\"keyword\">or</span> <span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">''</span> <span class=\"keyword\">or</span> [] <span class=\"keyword\">or</span>&#123;&#125;</span><br><span class=\"line\">&#123;&#125;<span class=\"number\">12345</span></span><br></pre></td></tr></table></figure>\n<p>从左到右扫描，返回第一个为真的表达式值，无真值则返回最后一个表达式值。</p>\n<h1 id=\"and-or搭配：\"><a href=\"#and-or搭配：\" class=\"headerlink\" title=\"and-or搭配：\"></a>and-or搭配：</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">\"betabin\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"string\">\"python\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> <span class=\"keyword\">and</span> a <span class=\"keyword\">or</span> b</span><br><span class=\"line\"><span class=\"string\">'betabin'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0</span> <span class=\"keyword\">and</span> a <span class=\"keyword\">or</span> b</span><br><span class=\"line\"><span class=\"string\">'python'</span><span class=\"number\">12345</span></span><br></pre></td></tr></table></figure>\n<p>看起来类似于于我们Ｃ＋＋中的条件运算符（bool？a：b），是的，当a为true的时候是一样的。但是，当a为false的时候，就明显不同了。</p>\n<p>如果坚持要用and-or技巧来实现条件运算符的话，可以用种安全的方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"string\">\"betabin\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>(<span class=\"number\">1</span> <span class=\"keyword\">and</span> [a] <span class=\"keyword\">or</span> [b])[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"string\">''</span><span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n<p>就是万能的[]，把a为假的可能性给抹杀掉，然后通过[0]再获得（因为要通过[0]获得元素，所以b也得加上[]）。</p>\n<p>这个and-or技巧主要在lambda中使用。</p>\n"},{"title":"create-react-app脚手架","date":"2019-08-07T01:38:30.000Z","_content":"\n# 安装\n\n```bash\nnpm install -g create-react-app\n# 切记项目名称不能大写\ncreate-react-app firstapp\ncd firstapp\nnpm run start\n```\n\n# eject\n\n这是一次性的操作\n\n```bash\nnpm run eject\n```\n\n# 启动less或者sass\n\n## sass\n\ncreate-react-app默认有sass的配置，只需要安装依赖就行\n\n```bash\nnpm install node-sass --save\n```\n\n## less\n\n默认没有less的配置，需要自己在webpack中配置\n\n1. 安装依赖\n\n   ```bash\n   npm install less less-loader --save\n   ```\n2. 运行完成之后，打开 config 目录下的 webpack.config.js 文件，找到 `// style files regexes` 注释位置，仿照其解析 sass 的规则，在下面添加两行代码\n\n   ```js\n   // 添加 less 解析规则\n   const lessRegex = /\\.less$/;\n   const lessModuleRegex = /\\.module\\.less$/;\n   复制代码\n   ```\n\n   找到 rules 属性配置，在其中添加 less 解析配置\n\n   > **!!!注意：** 这里有一个需要注意的地方，下面的这些 `less` 配置规则放在 `sass` 的解析规则下面即可，如果放在了 `file-loader` 的解析规则下面，`less` 文件解析不会生效。\n\n   ```json\n   // Less 解析配置\n   {\n       test: lessRegex,\n       exclude: lessModuleRegex,\n       use: getStyleLoaders(\n           {\n               importLoaders: 2,\n               sourceMap: isEnvProduction && shouldUseSourceMap,\n           },\n           'less-loader'\n       ),\n       sideEffects: true,\n   },\n   {\n       test: lessModuleRegex,\n       use: getStyleLoaders(\n           {\n               importLoaders: 2,\n               sourceMap: isEnvProduction && shouldUseSourceMap,\n               modules: true,\n               getLocalIdent: getCSSModuleLocalIdent,\n           },\n           'less-loader'\n       )\n   },\n   ```\n\n\n# css module\n\n在css的命名中使用*.module.css就可以使用css module，也可以自己修改webpack的文件。\n\n# 参考\n\n> <https://www.jianshu.com/p/1f054623ecac>","source":"_posts/react/create-react-app脚手架.md","raw":"---\ntitle: create-react-app脚手架\ndate: 2019-08-07 09:38:30\ntags:\n- react\n---\n\n# 安装\n\n```bash\nnpm install -g create-react-app\n# 切记项目名称不能大写\ncreate-react-app firstapp\ncd firstapp\nnpm run start\n```\n\n# eject\n\n这是一次性的操作\n\n```bash\nnpm run eject\n```\n\n# 启动less或者sass\n\n## sass\n\ncreate-react-app默认有sass的配置，只需要安装依赖就行\n\n```bash\nnpm install node-sass --save\n```\n\n## less\n\n默认没有less的配置，需要自己在webpack中配置\n\n1. 安装依赖\n\n   ```bash\n   npm install less less-loader --save\n   ```\n2. 运行完成之后，打开 config 目录下的 webpack.config.js 文件，找到 `// style files regexes` 注释位置，仿照其解析 sass 的规则，在下面添加两行代码\n\n   ```js\n   // 添加 less 解析规则\n   const lessRegex = /\\.less$/;\n   const lessModuleRegex = /\\.module\\.less$/;\n   复制代码\n   ```\n\n   找到 rules 属性配置，在其中添加 less 解析配置\n\n   > **!!!注意：** 这里有一个需要注意的地方，下面的这些 `less` 配置规则放在 `sass` 的解析规则下面即可，如果放在了 `file-loader` 的解析规则下面，`less` 文件解析不会生效。\n\n   ```json\n   // Less 解析配置\n   {\n       test: lessRegex,\n       exclude: lessModuleRegex,\n       use: getStyleLoaders(\n           {\n               importLoaders: 2,\n               sourceMap: isEnvProduction && shouldUseSourceMap,\n           },\n           'less-loader'\n       ),\n       sideEffects: true,\n   },\n   {\n       test: lessModuleRegex,\n       use: getStyleLoaders(\n           {\n               importLoaders: 2,\n               sourceMap: isEnvProduction && shouldUseSourceMap,\n               modules: true,\n               getLocalIdent: getCSSModuleLocalIdent,\n           },\n           'less-loader'\n       )\n   },\n   ```\n\n\n# css module\n\n在css的命名中使用*.module.css就可以使用css module，也可以自己修改webpack的文件。\n\n# 参考\n\n> <https://www.jianshu.com/p/1f054623ecac>","slug":"react/create-react-app脚手架","published":1,"updated":"2019-09-01T12:22:36.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblne004x4tje49zfumal","content":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g create-react-app</span><br><span class=\"line\"><span class=\"comment\"># 切记项目名称不能大写</span></span><br><span class=\"line\">create-react-app firstapp</span><br><span class=\"line\"><span class=\"built_in\">cd</span> firstapp</span><br><span class=\"line\">npm run start</span><br></pre></td></tr></table></figure>\n<h1 id=\"eject\"><a href=\"#eject\" class=\"headerlink\" title=\"eject\"></a>eject</h1><p>这是一次性的操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run eject</span><br></pre></td></tr></table></figure>\n<h1 id=\"启动less或者sass\"><a href=\"#启动less或者sass\" class=\"headerlink\" title=\"启动less或者sass\"></a>启动less或者sass</h1><h2 id=\"sass\"><a href=\"#sass\" class=\"headerlink\" title=\"sass\"></a>sass</h2><p>create-react-app默认有sass的配置，只需要安装依赖就行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install node-sass --save</span><br></pre></td></tr></table></figure>\n<h2 id=\"less\"><a href=\"#less\" class=\"headerlink\" title=\"less\"></a>less</h2><p>默认没有less的配置，需要自己在webpack中配置</p>\n<ol>\n<li><p>安装依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install less less-loader --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行完成之后，打开 config 目录下的 webpack.config.js 文件，找到 <code>// style files regexes</code> 注释位置，仿照其解析 sass 的规则，在下面添加两行代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加 less 解析规则</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> lessRegex = <span class=\"regexp\">/\\.less$/</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> lessModuleRegex = <span class=\"regexp\">/\\.module\\.less$/</span>;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>找到 rules 属性配置，在其中添加 less 解析配置</p>\n<blockquote>\n<p><strong>!!!注意：</strong> 这里有一个需要注意的地方，下面的这些 <code>less</code> 配置规则放在 <code>sass</code> 的解析规则下面即可，如果放在了 <code>file-loader</code> 的解析规则下面，<code>less</code> 文件解析不会生效。</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Less 解析配置</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    test: lessRegex,</span><br><span class=\"line\">    exclude: lessModuleRegex,</span><br><span class=\"line\">    use: getStyleLoaders(</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            importLoaders: 2,</span><br><span class=\"line\">            sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        'less-loader'</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    sideEffects: true,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    test: lessModuleRegex,</span><br><span class=\"line\">    use: getStyleLoaders(</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            importLoaders: 2,</span><br><span class=\"line\">            sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class=\"line\">            modules: true,</span><br><span class=\"line\">            getLocalIdent: getCSSModuleLocalIdent,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        'less-loader'</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"css-module\"><a href=\"#css-module\" class=\"headerlink\" title=\"css module\"></a>css module</h1><p>在css的命名中使用*.module.css就可以使用css module，也可以自己修改webpack的文件。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://www.jianshu.com/p/1f054623ecac\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/1f054623ecac</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g create-react-app</span><br><span class=\"line\"><span class=\"comment\"># 切记项目名称不能大写</span></span><br><span class=\"line\">create-react-app firstapp</span><br><span class=\"line\"><span class=\"built_in\">cd</span> firstapp</span><br><span class=\"line\">npm run start</span><br></pre></td></tr></table></figure>\n<h1 id=\"eject\"><a href=\"#eject\" class=\"headerlink\" title=\"eject\"></a>eject</h1><p>这是一次性的操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run eject</span><br></pre></td></tr></table></figure>\n<h1 id=\"启动less或者sass\"><a href=\"#启动less或者sass\" class=\"headerlink\" title=\"启动less或者sass\"></a>启动less或者sass</h1><h2 id=\"sass\"><a href=\"#sass\" class=\"headerlink\" title=\"sass\"></a>sass</h2><p>create-react-app默认有sass的配置，只需要安装依赖就行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install node-sass --save</span><br></pre></td></tr></table></figure>\n<h2 id=\"less\"><a href=\"#less\" class=\"headerlink\" title=\"less\"></a>less</h2><p>默认没有less的配置，需要自己在webpack中配置</p>\n<ol>\n<li><p>安装依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install less less-loader --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行完成之后，打开 config 目录下的 webpack.config.js 文件，找到 <code>// style files regexes</code> 注释位置，仿照其解析 sass 的规则，在下面添加两行代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加 less 解析规则</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> lessRegex = <span class=\"regexp\">/\\.less$/</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> lessModuleRegex = <span class=\"regexp\">/\\.module\\.less$/</span>;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>找到 rules 属性配置，在其中添加 less 解析配置</p>\n<blockquote>\n<p><strong>!!!注意：</strong> 这里有一个需要注意的地方，下面的这些 <code>less</code> 配置规则放在 <code>sass</code> 的解析规则下面即可，如果放在了 <code>file-loader</code> 的解析规则下面，<code>less</code> 文件解析不会生效。</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Less 解析配置</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    test: lessRegex,</span><br><span class=\"line\">    exclude: lessModuleRegex,</span><br><span class=\"line\">    use: getStyleLoaders(</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            importLoaders: 2,</span><br><span class=\"line\">            sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        'less-loader'</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    sideEffects: true,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    test: lessModuleRegex,</span><br><span class=\"line\">    use: getStyleLoaders(</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            importLoaders: 2,</span><br><span class=\"line\">            sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class=\"line\">            modules: true,</span><br><span class=\"line\">            getLocalIdent: getCSSModuleLocalIdent,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        'less-loader'</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"css-module\"><a href=\"#css-module\" class=\"headerlink\" title=\"css module\"></a>css module</h1><p>在css的命名中使用*.module.css就可以使用css module，也可以自己修改webpack的文件。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://www.jianshu.com/p/1f054623ecac\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/1f054623ecac</a></p>\n</blockquote>\n"},{"title":"python-装饰器","date":"2019-07-31T11:44:57.000Z","_content":"\n# 简单的装饰器\n\n```python\nimport logging\n\n\ndef use_logging(func):\n\n    def wrapper():\n        logging.warning(\"%s is running\" % func.__name__)\n        return func()   # 把 foo 当做参数传递进来时，执行func()就相当于执行foo()\n    return wrapper\n\ndef foo():\n    print('i am foo')\n\nfoo = use_logging(foo)  # 因为装饰器 use_logging(foo) 返回的时函数对象 wrapper，这条语句相当于  foo = wrapper\nfoo()                   # 执行foo()就相当于执行 wrapper()\n'''\nWARNING:root:foo is running\ni am foo\n'''\n```\n\n# @ 语法糖\n\n```python\ndef use_logging(func):\n\n    def wrapper():\n        logging.warn(\"%s is running\" % func.__name__)\n        return func()\n    return wrapper\n\n@use_logging\ndef foo():\n    print(\"i am foo\")\n\nfoo()\n```\n\n# *args、**kwargs\n\n可能有人问，如果我的业务逻辑函数 foo 需要参数怎么办？比如：\n\n```\ndef foo(name):\n    print(\"i am %s\" % name)\n```\n\n我们可以在定义 wrapper 函数的时候指定参数：\n\n```python\ndef wrapper(name):\n        logging.warn(\"%s is running\" % func.__name__)\n        return func(name)\n    return wrapper\n```\n\n这样 foo 函数定义的参数就可以定义在 wrapper 函数中。这时，又有人要问了，如果 foo 函数接收两个参数呢？三个参数呢？更有甚者，我可能传很多个。当装饰器不知道 foo 到底有多少个参数时，我们可以用 *args 来代替：\n\n```python\ndef wrapper(*args):\n        logging.warn(\"%s is running\" % func.__name__)\n        return func(*args)\n    return wrapper\n```\n\n如此一来，甭管 foo 定义了多少个参数，我都可以完整地传递到 func 中去。这样就不影响 foo 的业务逻辑了。这时还有读者会问，如果 foo 函数还定义了一些关键字参数呢？比如：\n\n```python\ndef foo(name, age=None, height=None):\n    print(\"I am %s, age %s, height %s\" % (name, age, height))\n```\n\n这时，你就可以把 wrapper 函数指定关键字函数：\n\n```python\ndef wrapper(*args, **kwargs):\n        # args是一个数组，kwargs一个字典\n        logging.warn(\"%s is running\" % func.__name__)\n        return func(*args, **kwargs)\n    return wrapper\n```\n\n# 带参数的装饰器\n\n装饰器还有更大的灵活性，例如带参数的装饰器，在上面的装饰器调用中，该装饰器接收唯一的参数就是执行业务的函数 foo 。装饰器的语法允许我们在调用时，提供其它参数，比如`@decorator(a)`。这样，就为装饰器的编写和使用提供了更大的灵活性。比如，我们可以在装饰器中指定日志的等级，因为不同业务函数可能需要的日志级别是不一样的。\n\n```python\ndef use_logging(level):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            if level == \"warn\":\n                logging.warn(\"%s is running\" % func.__name__)\n            elif level == \"info\":\n                logging.info(\"%s is running\" % func.__name__)\n            return func(*args)\n        return wrapper\n\n    return decorator\n\n@use_logging(level=\"warn\")\ndef foo(name='foo'):\n    print(\"i am %s\" % name)\n\nfoo()\n```\n\n上面的 use_logging 是允许带参数的装饰器。它实际上是对原有装饰器的一个函数封装，并返回一个装饰器。我们可以将它理解为一个含有参数的闭包。当我 们使用`@use_logging(level=\"warn\")`调用的时候，Python 能够发现这一层的封装，并把参数传递到装饰器的环境中。\n\n```python\n@use_logging(level=\"warn\")`等价于`@decorator\n```\n\n# 类装饰器\n\n没错，装饰器不仅可以是函数，还可以是类，相比函数装饰器，类装饰器具有灵活度大、高内聚、封装性等优点。使用类装饰器主要依靠类的`__call__`方法，当使用 @ 形式将装饰器附加到函数上时，就会调用此方法。\n\n```python\nclass Foo(object):\n    def __init__(self, func):\n        self._func = func\n\n    def __call__(self):\n        print ('class decorator runing')\n        self._func()\n        print ('class decorator ending')\n\n@Foo\ndef bar():\n    print ('bar')\n\nbar()\n```\n\n### functools.wraps\n\n使用装饰器极大地复用了代码，但是他有一个缺点就是原函数的元信息不见了，比如函数的`docstring`、`__name__`、参数列表，先看例子：\n\n```python\n# 装饰器\ndef logged(func):\n    def with_logging(*args, **kwargs):\n        print func.__name__      # 输出 'with_logging'\n        print func.__doc__       # 输出 None\n        return func(*args, **kwargs)\n    return with_logging\n\n# 函数\n@logged\ndef f(x):\n   \"\"\"does some math\"\"\"\n   return x + x * x\n\nlogged(f)\n```\n\n不难发现，函数 f 被`with_logging`取代了，当然它的`docstring`，`__name__`就是变成了`with_logging`函数的信息了。好在我们有`functools.wraps`，`wraps`本身也是一个装饰器，它能把原函数的元信息拷贝到装饰器里面的 func 函数中，这使得装饰器里面的 func 函数也有和原函数 foo 一样的元信息了。\n\n```python\nfrom functools import wraps\ndef logged(func):\n    @wraps(func)\n    def with_logging(*args, **kwargs):\n        print func.__name__      # 输出 'f'\n        print func.__doc__       # 输出 'does some math'\n        return func(*args, **kwargs)\n    return with_logging\n\n@logged\ndef f(x):\n   \"\"\"does some math\"\"\"\n   return x + x * x\n```\n\n# 装饰器顺序\n\n一个函数还可以同时定义多个装饰器，比如：\n\n```python\n@a\n@b\n@c\ndef f ():\n    pass\n```\n\n它的执行顺序是从里到外，最先调用最里层的装饰器，最后调用最外层的装饰器，它等效于\n\n```python\nf = a(b(c(f)))\n```\n\n# 补充\n\n## *与**区别\n\n在Python的函数定义中使用*args和**kwargs可传递可变参数。*args用作传递非命名键值可变长参数列表（位置参数），**kwargs用作传递键值可变长参数列表。在函数调用的时候也有解构的使用\n\n```python\ndef test_var_args(farg, *args):\n    print \"formal arg:\", farg\n    for arg in args:\n        print \"another arg:\", arg\n \ntest_var_args(1, \"two\", 3)\n'''\nformal arg: 1\nanother arg: two\nanother arg: 3\n'''\n```\n\n```python\ndef test_var_kwargs(farg, **kwargs):\n    print \"formal arg:\", farg\n    for key in kwargs:\n        print \"another keyword arg: %s: %s\" % (key, kwargs[key])\n \ntest_var_kwargs(farg=1, myarg2=\"two\", myarg3=3)\n'''\nRequired argument:  1\nOptional argument (*args):  2\nOptional argument (*args):  3\nOptional argument (*args):  4\nOptional argument k2 (*kwargs): 6\nOptional argument k1 (*kwargs): 5\n'''\n```\n\n```python\ndef test_var_args_call(arg1, arg2, arg3):\n    print \"arg1:\", arg1\n    print \"arg2:\", arg2\n    print \"arg3:\", arg3\n \nargs = (\"two\", 3)\ntest_var_args_call(1, *args)\n```\n\n```python\ndef test_var_args_call(arg1, arg2, arg3):\n    print \"arg1:\", arg1\n    print \"arg2:\", arg2\n    print \"arg3:\", arg3\n \nkwargs = {\"arg3\": 3, \"arg2\": \"two\"}\ntest_var_args_call(1, **kwargs)\n```\n\n\n\n# 参考\n\n> <https://foofish.net/python-decorator.html>\n>\n> <https://www.biaodianfu.com/python-args-kwargs.html>\n>\n> <https://my.oschina.net/leejun2005/blog/477614> 例子介绍的很详细","source":"_posts/python/python-装饰器.md","raw":"---\ntitle: python-装饰器\ndate: 2019-07-31 19:44:57\ntags: python\n---\n\n# 简单的装饰器\n\n```python\nimport logging\n\n\ndef use_logging(func):\n\n    def wrapper():\n        logging.warning(\"%s is running\" % func.__name__)\n        return func()   # 把 foo 当做参数传递进来时，执行func()就相当于执行foo()\n    return wrapper\n\ndef foo():\n    print('i am foo')\n\nfoo = use_logging(foo)  # 因为装饰器 use_logging(foo) 返回的时函数对象 wrapper，这条语句相当于  foo = wrapper\nfoo()                   # 执行foo()就相当于执行 wrapper()\n'''\nWARNING:root:foo is running\ni am foo\n'''\n```\n\n# @ 语法糖\n\n```python\ndef use_logging(func):\n\n    def wrapper():\n        logging.warn(\"%s is running\" % func.__name__)\n        return func()\n    return wrapper\n\n@use_logging\ndef foo():\n    print(\"i am foo\")\n\nfoo()\n```\n\n# *args、**kwargs\n\n可能有人问，如果我的业务逻辑函数 foo 需要参数怎么办？比如：\n\n```\ndef foo(name):\n    print(\"i am %s\" % name)\n```\n\n我们可以在定义 wrapper 函数的时候指定参数：\n\n```python\ndef wrapper(name):\n        logging.warn(\"%s is running\" % func.__name__)\n        return func(name)\n    return wrapper\n```\n\n这样 foo 函数定义的参数就可以定义在 wrapper 函数中。这时，又有人要问了，如果 foo 函数接收两个参数呢？三个参数呢？更有甚者，我可能传很多个。当装饰器不知道 foo 到底有多少个参数时，我们可以用 *args 来代替：\n\n```python\ndef wrapper(*args):\n        logging.warn(\"%s is running\" % func.__name__)\n        return func(*args)\n    return wrapper\n```\n\n如此一来，甭管 foo 定义了多少个参数，我都可以完整地传递到 func 中去。这样就不影响 foo 的业务逻辑了。这时还有读者会问，如果 foo 函数还定义了一些关键字参数呢？比如：\n\n```python\ndef foo(name, age=None, height=None):\n    print(\"I am %s, age %s, height %s\" % (name, age, height))\n```\n\n这时，你就可以把 wrapper 函数指定关键字函数：\n\n```python\ndef wrapper(*args, **kwargs):\n        # args是一个数组，kwargs一个字典\n        logging.warn(\"%s is running\" % func.__name__)\n        return func(*args, **kwargs)\n    return wrapper\n```\n\n# 带参数的装饰器\n\n装饰器还有更大的灵活性，例如带参数的装饰器，在上面的装饰器调用中，该装饰器接收唯一的参数就是执行业务的函数 foo 。装饰器的语法允许我们在调用时，提供其它参数，比如`@decorator(a)`。这样，就为装饰器的编写和使用提供了更大的灵活性。比如，我们可以在装饰器中指定日志的等级，因为不同业务函数可能需要的日志级别是不一样的。\n\n```python\ndef use_logging(level):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            if level == \"warn\":\n                logging.warn(\"%s is running\" % func.__name__)\n            elif level == \"info\":\n                logging.info(\"%s is running\" % func.__name__)\n            return func(*args)\n        return wrapper\n\n    return decorator\n\n@use_logging(level=\"warn\")\ndef foo(name='foo'):\n    print(\"i am %s\" % name)\n\nfoo()\n```\n\n上面的 use_logging 是允许带参数的装饰器。它实际上是对原有装饰器的一个函数封装，并返回一个装饰器。我们可以将它理解为一个含有参数的闭包。当我 们使用`@use_logging(level=\"warn\")`调用的时候，Python 能够发现这一层的封装，并把参数传递到装饰器的环境中。\n\n```python\n@use_logging(level=\"warn\")`等价于`@decorator\n```\n\n# 类装饰器\n\n没错，装饰器不仅可以是函数，还可以是类，相比函数装饰器，类装饰器具有灵活度大、高内聚、封装性等优点。使用类装饰器主要依靠类的`__call__`方法，当使用 @ 形式将装饰器附加到函数上时，就会调用此方法。\n\n```python\nclass Foo(object):\n    def __init__(self, func):\n        self._func = func\n\n    def __call__(self):\n        print ('class decorator runing')\n        self._func()\n        print ('class decorator ending')\n\n@Foo\ndef bar():\n    print ('bar')\n\nbar()\n```\n\n### functools.wraps\n\n使用装饰器极大地复用了代码，但是他有一个缺点就是原函数的元信息不见了，比如函数的`docstring`、`__name__`、参数列表，先看例子：\n\n```python\n# 装饰器\ndef logged(func):\n    def with_logging(*args, **kwargs):\n        print func.__name__      # 输出 'with_logging'\n        print func.__doc__       # 输出 None\n        return func(*args, **kwargs)\n    return with_logging\n\n# 函数\n@logged\ndef f(x):\n   \"\"\"does some math\"\"\"\n   return x + x * x\n\nlogged(f)\n```\n\n不难发现，函数 f 被`with_logging`取代了，当然它的`docstring`，`__name__`就是变成了`with_logging`函数的信息了。好在我们有`functools.wraps`，`wraps`本身也是一个装饰器，它能把原函数的元信息拷贝到装饰器里面的 func 函数中，这使得装饰器里面的 func 函数也有和原函数 foo 一样的元信息了。\n\n```python\nfrom functools import wraps\ndef logged(func):\n    @wraps(func)\n    def with_logging(*args, **kwargs):\n        print func.__name__      # 输出 'f'\n        print func.__doc__       # 输出 'does some math'\n        return func(*args, **kwargs)\n    return with_logging\n\n@logged\ndef f(x):\n   \"\"\"does some math\"\"\"\n   return x + x * x\n```\n\n# 装饰器顺序\n\n一个函数还可以同时定义多个装饰器，比如：\n\n```python\n@a\n@b\n@c\ndef f ():\n    pass\n```\n\n它的执行顺序是从里到外，最先调用最里层的装饰器，最后调用最外层的装饰器，它等效于\n\n```python\nf = a(b(c(f)))\n```\n\n# 补充\n\n## *与**区别\n\n在Python的函数定义中使用*args和**kwargs可传递可变参数。*args用作传递非命名键值可变长参数列表（位置参数），**kwargs用作传递键值可变长参数列表。在函数调用的时候也有解构的使用\n\n```python\ndef test_var_args(farg, *args):\n    print \"formal arg:\", farg\n    for arg in args:\n        print \"another arg:\", arg\n \ntest_var_args(1, \"two\", 3)\n'''\nformal arg: 1\nanother arg: two\nanother arg: 3\n'''\n```\n\n```python\ndef test_var_kwargs(farg, **kwargs):\n    print \"formal arg:\", farg\n    for key in kwargs:\n        print \"another keyword arg: %s: %s\" % (key, kwargs[key])\n \ntest_var_kwargs(farg=1, myarg2=\"two\", myarg3=3)\n'''\nRequired argument:  1\nOptional argument (*args):  2\nOptional argument (*args):  3\nOptional argument (*args):  4\nOptional argument k2 (*kwargs): 6\nOptional argument k1 (*kwargs): 5\n'''\n```\n\n```python\ndef test_var_args_call(arg1, arg2, arg3):\n    print \"arg1:\", arg1\n    print \"arg2:\", arg2\n    print \"arg3:\", arg3\n \nargs = (\"two\", 3)\ntest_var_args_call(1, *args)\n```\n\n```python\ndef test_var_args_call(arg1, arg2, arg3):\n    print \"arg1:\", arg1\n    print \"arg2:\", arg2\n    print \"arg3:\", arg3\n \nkwargs = {\"arg3\": 3, \"arg2\": \"two\"}\ntest_var_args_call(1, **kwargs)\n```\n\n\n\n# 参考\n\n> <https://foofish.net/python-decorator.html>\n>\n> <https://www.biaodianfu.com/python-args-kwargs.html>\n>\n> <https://my.oschina.net/leejun2005/blog/477614> 例子介绍的很详细","slug":"python/python-装饰器","published":1,"updated":"2019-07-31T16:02:31.925Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblne004z4tjej2oo69yt","content":"<h1 id=\"简单的装饰器\"><a href=\"#简单的装饰器\" class=\"headerlink\" title=\"简单的装饰器\"></a>简单的装饰器</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">use_logging</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        logging.warning(<span class=\"string\">\"%s is running\"</span> % func.__name__)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func()   <span class=\"comment\"># 把 foo 当做参数传递进来时，执行func()就相当于执行foo()</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'i am foo'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">foo = use_logging(foo)  <span class=\"comment\"># 因为装饰器 use_logging(foo) 返回的时函数对象 wrapper，这条语句相当于  foo = wrapper</span></span><br><span class=\"line\">foo()                   <span class=\"comment\"># 执行foo()就相当于执行 wrapper()</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WARNING:root:foo is running</span></span><br><span class=\"line\"><span class=\"string\">i am foo</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"语法糖\"><a href=\"#语法糖\" class=\"headerlink\" title=\"@ 语法糖\"></a>@ 语法糖</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">use_logging</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        logging.warn(<span class=\"string\">\"%s is running\"</span> % func.__name__)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@use_logging</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"i am foo\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure>\n<h1 id=\"args、-kwargs\"><a href=\"#args、-kwargs\" class=\"headerlink\" title=\"*args、**kwargs\"></a>*args、**kwargs</h1><p>可能有人问，如果我的业务逻辑函数 foo 需要参数怎么办？比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def foo(name):</span><br><span class=\"line\">    print(&quot;i am %s&quot; % name)</span><br></pre></td></tr></table></figure>\n<p>我们可以在定义 wrapper 函数的时候指定参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(name)</span>:</span></span><br><span class=\"line\">        logging.warn(<span class=\"string\">\"%s is running\"</span> % func.__name__)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(name)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br></pre></td></tr></table></figure>\n<p>这样 foo 函数定义的参数就可以定义在 wrapper 函数中。这时，又有人要问了，如果 foo 函数接收两个参数呢？三个参数呢？更有甚者，我可能传很多个。当装饰器不知道 foo 到底有多少个参数时，我们可以用 *args 来代替：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args)</span>:</span></span><br><span class=\"line\">        logging.warn(<span class=\"string\">\"%s is running\"</span> % func.__name__)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(*args)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br></pre></td></tr></table></figure>\n<p>如此一来，甭管 foo 定义了多少个参数，我都可以完整地传递到 func 中去。这样就不影响 foo 的业务逻辑了。这时还有读者会问，如果 foo 函数还定义了一些关键字参数呢？比如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(name, age=None, height=None)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"I am %s, age %s, height %s\"</span> % (name, age, height))</span><br></pre></td></tr></table></figure>\n<p>这时，你就可以把 wrapper 函数指定关键字函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># args是一个数组，kwargs一个字典</span></span><br><span class=\"line\">        logging.warn(<span class=\"string\">\"%s is running\"</span> % func.__name__)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(*args, **kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br></pre></td></tr></table></figure>\n<h1 id=\"带参数的装饰器\"><a href=\"#带参数的装饰器\" class=\"headerlink\" title=\"带参数的装饰器\"></a>带参数的装饰器</h1><p>装饰器还有更大的灵活性，例如带参数的装饰器，在上面的装饰器调用中，该装饰器接收唯一的参数就是执行业务的函数 foo 。装饰器的语法允许我们在调用时，提供其它参数，比如<code>@decorator(a)</code>。这样，就为装饰器的编写和使用提供了更大的灵活性。比如，我们可以在装饰器中指定日志的等级，因为不同业务函数可能需要的日志级别是不一样的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">use_logging</span><span class=\"params\">(level)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> level == <span class=\"string\">\"warn\"</span>:</span><br><span class=\"line\">                logging.warn(<span class=\"string\">\"%s is running\"</span> % func.__name__)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> level == <span class=\"string\">\"info\"</span>:</span><br><span class=\"line\">                logging.info(<span class=\"string\">\"%s is running\"</span> % func.__name__)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> func(*args)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@use_logging(level=\"warn\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(name=<span class=\"string\">'foo'</span>)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"i am %s\"</span> % name)</span><br><span class=\"line\"></span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure>\n<p>上面的 use_logging 是允许带参数的装饰器。它实际上是对原有装饰器的一个函数封装，并返回一个装饰器。我们可以将它理解为一个含有参数的闭包。当我 们使用<code>@use_logging(level=&quot;warn&quot;)</code>调用的时候，Python 能够发现这一层的封装，并把参数传递到装饰器的环境中。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@use_logging(level=\"warn\")`等价于`@decorator</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"类装饰器\"><a href=\"#类装饰器\" class=\"headerlink\" title=\"类装饰器\"></a>类装饰器</h1><p>没错，装饰器不仅可以是函数，还可以是类，相比函数装饰器，类装饰器具有灵活度大、高内聚、封装性等优点。使用类装饰器主要依靠类的<code>__call__</code>方法，当使用 @ 形式将装饰器附加到函数上时，就会调用此方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, func)</span>:</span></span><br><span class=\"line\">        self._func = func</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> (<span class=\"string\">'class decorator runing'</span>)</span><br><span class=\"line\">        self._func()</span><br><span class=\"line\">        <span class=\"keyword\">print</span> (<span class=\"string\">'class decorator ending'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Foo</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bar</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">'bar'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">bar()</span><br></pre></td></tr></table></figure>\n<h3 id=\"functools-wraps\"><a href=\"#functools-wraps\" class=\"headerlink\" title=\"functools.wraps\"></a>functools.wraps</h3><p>使用装饰器极大地复用了代码，但是他有一个缺点就是原函数的元信息不见了，比如函数的<code>docstring</code>、<code>__name__</code>、参数列表，先看例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 装饰器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">logged</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">with_logging</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> func.__name__      <span class=\"comment\"># 输出 'with_logging'</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> func.__doc__       <span class=\"comment\"># 输出 None</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(*args, **kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> with_logging</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 函数</span></span><br><span class=\"line\"><span class=\"meta\">@logged</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">   <span class=\"string\">\"\"\"does some math\"\"\"</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> x + x * x</span><br><span class=\"line\"></span><br><span class=\"line\">logged(f)</span><br></pre></td></tr></table></figure>\n<p>不难发现，函数 f 被<code>with_logging</code>取代了，当然它的<code>docstring</code>，<code>__name__</code>就是变成了<code>with_logging</code>函数的信息了。好在我们有<code>functools.wraps</code>，<code>wraps</code>本身也是一个装饰器，它能把原函数的元信息拷贝到装饰器里面的 func 函数中，这使得装饰器里面的 func 函数也有和原函数 foo 一样的元信息了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> wraps</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">logged</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @wraps(func)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">with_logging</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> func.__name__      <span class=\"comment\"># 输出 'f'</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> func.__doc__       <span class=\"comment\"># 输出 'does some math'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(*args, **kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> with_logging</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@logged</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">   <span class=\"string\">\"\"\"does some math\"\"\"</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> x + x * x</span><br></pre></td></tr></table></figure>\n<h1 id=\"装饰器顺序\"><a href=\"#装饰器顺序\" class=\"headerlink\" title=\"装饰器顺序\"></a>装饰器顺序</h1><p>一个函数还可以同时定义多个装饰器，比如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@a</span></span><br><span class=\"line\"><span class=\"meta\">@b</span></span><br><span class=\"line\"><span class=\"meta\">@c</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span> <span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>它的执行顺序是从里到外，最先调用最里层的装饰器，最后调用最外层的装饰器，它等效于</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = a(b(c(f)))</span><br></pre></td></tr></table></figure>\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><h2 id=\"与-区别\"><a href=\"#与-区别\" class=\"headerlink\" title=\"*与**区别\"></a>*与**区别</h2><p>在Python的函数定义中使用<em>args和**kwargs可传递可变参数。</em>args用作传递非命名键值可变长参数列表（位置参数），**kwargs用作传递键值可变长参数列表。在函数调用的时候也有解构的使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_var_args</span><span class=\"params\">(farg, *args)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"formal arg:\"</span>, farg</span><br><span class=\"line\">    <span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> args:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"another arg:\"</span>, arg</span><br><span class=\"line\"> </span><br><span class=\"line\">test_var_args(<span class=\"number\">1</span>, <span class=\"string\">\"two\"</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">formal arg: 1</span></span><br><span class=\"line\"><span class=\"string\">another arg: two</span></span><br><span class=\"line\"><span class=\"string\">another arg: 3</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_var_kwargs</span><span class=\"params\">(farg, **kwargs)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"formal arg:\"</span>, farg</span><br><span class=\"line\">    <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> kwargs:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"another keyword arg: %s: %s\"</span> % (key, kwargs[key])</span><br><span class=\"line\"> </span><br><span class=\"line\">test_var_kwargs(farg=<span class=\"number\">1</span>, myarg2=<span class=\"string\">\"two\"</span>, myarg3=<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Required argument:  1</span></span><br><span class=\"line\"><span class=\"string\">Optional argument (*args):  2</span></span><br><span class=\"line\"><span class=\"string\">Optional argument (*args):  3</span></span><br><span class=\"line\"><span class=\"string\">Optional argument (*args):  4</span></span><br><span class=\"line\"><span class=\"string\">Optional argument k2 (*kwargs): 6</span></span><br><span class=\"line\"><span class=\"string\">Optional argument k1 (*kwargs): 5</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_var_args_call</span><span class=\"params\">(arg1, arg2, arg3)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"arg1:\"</span>, arg1</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"arg2:\"</span>, arg2</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"arg3:\"</span>, arg3</span><br><span class=\"line\"> </span><br><span class=\"line\">args = (<span class=\"string\">\"two\"</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">test_var_args_call(<span class=\"number\">1</span>, *args)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_var_args_call</span><span class=\"params\">(arg1, arg2, arg3)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"arg1:\"</span>, arg1</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"arg2:\"</span>, arg2</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"arg3:\"</span>, arg3</span><br><span class=\"line\"> </span><br><span class=\"line\">kwargs = &#123;<span class=\"string\">\"arg3\"</span>: <span class=\"number\">3</span>, <span class=\"string\">\"arg2\"</span>: <span class=\"string\">\"two\"</span>&#125;</span><br><span class=\"line\">test_var_args_call(<span class=\"number\">1</span>, **kwargs)</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://foofish.net/python-decorator.html\" target=\"_blank\" rel=\"noopener\">https://foofish.net/python-decorator.html</a></p>\n<p><a href=\"https://www.biaodianfu.com/python-args-kwargs.html\" target=\"_blank\" rel=\"noopener\">https://www.biaodianfu.com/python-args-kwargs.html</a></p>\n<p><a href=\"https://my.oschina.net/leejun2005/blog/477614\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/leejun2005/blog/477614</a> 例子介绍的很详细</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简单的装饰器\"><a href=\"#简单的装饰器\" class=\"headerlink\" title=\"简单的装饰器\"></a>简单的装饰器</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> logging</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">use_logging</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        logging.warning(<span class=\"string\">\"%s is running\"</span> % func.__name__)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func()   <span class=\"comment\"># 把 foo 当做参数传递进来时，执行func()就相当于执行foo()</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'i am foo'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">foo = use_logging(foo)  <span class=\"comment\"># 因为装饰器 use_logging(foo) 返回的时函数对象 wrapper，这条语句相当于  foo = wrapper</span></span><br><span class=\"line\">foo()                   <span class=\"comment\"># 执行foo()就相当于执行 wrapper()</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WARNING:root:foo is running</span></span><br><span class=\"line\"><span class=\"string\">i am foo</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"语法糖\"><a href=\"#语法糖\" class=\"headerlink\" title=\"@ 语法糖\"></a>@ 语法糖</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">use_logging</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        logging.warn(<span class=\"string\">\"%s is running\"</span> % func.__name__)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@use_logging</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"i am foo\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure>\n<h1 id=\"args、-kwargs\"><a href=\"#args、-kwargs\" class=\"headerlink\" title=\"*args、**kwargs\"></a>*args、**kwargs</h1><p>可能有人问，如果我的业务逻辑函数 foo 需要参数怎么办？比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def foo(name):</span><br><span class=\"line\">    print(&quot;i am %s&quot; % name)</span><br></pre></td></tr></table></figure>\n<p>我们可以在定义 wrapper 函数的时候指定参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(name)</span>:</span></span><br><span class=\"line\">        logging.warn(<span class=\"string\">\"%s is running\"</span> % func.__name__)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(name)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br></pre></td></tr></table></figure>\n<p>这样 foo 函数定义的参数就可以定义在 wrapper 函数中。这时，又有人要问了，如果 foo 函数接收两个参数呢？三个参数呢？更有甚者，我可能传很多个。当装饰器不知道 foo 到底有多少个参数时，我们可以用 *args 来代替：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args)</span>:</span></span><br><span class=\"line\">        logging.warn(<span class=\"string\">\"%s is running\"</span> % func.__name__)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(*args)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br></pre></td></tr></table></figure>\n<p>如此一来，甭管 foo 定义了多少个参数，我都可以完整地传递到 func 中去。这样就不影响 foo 的业务逻辑了。这时还有读者会问，如果 foo 函数还定义了一些关键字参数呢？比如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(name, age=None, height=None)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"I am %s, age %s, height %s\"</span> % (name, age, height))</span><br></pre></td></tr></table></figure>\n<p>这时，你就可以把 wrapper 函数指定关键字函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># args是一个数组，kwargs一个字典</span></span><br><span class=\"line\">        logging.warn(<span class=\"string\">\"%s is running\"</span> % func.__name__)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(*args, **kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br></pre></td></tr></table></figure>\n<h1 id=\"带参数的装饰器\"><a href=\"#带参数的装饰器\" class=\"headerlink\" title=\"带参数的装饰器\"></a>带参数的装饰器</h1><p>装饰器还有更大的灵活性，例如带参数的装饰器，在上面的装饰器调用中，该装饰器接收唯一的参数就是执行业务的函数 foo 。装饰器的语法允许我们在调用时，提供其它参数，比如<code>@decorator(a)</code>。这样，就为装饰器的编写和使用提供了更大的灵活性。比如，我们可以在装饰器中指定日志的等级，因为不同业务函数可能需要的日志级别是不一样的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">use_logging</span><span class=\"params\">(level)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> level == <span class=\"string\">\"warn\"</span>:</span><br><span class=\"line\">                logging.warn(<span class=\"string\">\"%s is running\"</span> % func.__name__)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> level == <span class=\"string\">\"info\"</span>:</span><br><span class=\"line\">                logging.info(<span class=\"string\">\"%s is running\"</span> % func.__name__)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> func(*args)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@use_logging(level=\"warn\")</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(name=<span class=\"string\">'foo'</span>)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"i am %s\"</span> % name)</span><br><span class=\"line\"></span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure>\n<p>上面的 use_logging 是允许带参数的装饰器。它实际上是对原有装饰器的一个函数封装，并返回一个装饰器。我们可以将它理解为一个含有参数的闭包。当我 们使用<code>@use_logging(level=&quot;warn&quot;)</code>调用的时候，Python 能够发现这一层的封装，并把参数传递到装饰器的环境中。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@use_logging(level=\"warn\")`等价于`@decorator</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"类装饰器\"><a href=\"#类装饰器\" class=\"headerlink\" title=\"类装饰器\"></a>类装饰器</h1><p>没错，装饰器不仅可以是函数，还可以是类，相比函数装饰器，类装饰器具有灵活度大、高内聚、封装性等优点。使用类装饰器主要依靠类的<code>__call__</code>方法，当使用 @ 形式将装饰器附加到函数上时，就会调用此方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, func)</span>:</span></span><br><span class=\"line\">        self._func = func</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> (<span class=\"string\">'class decorator runing'</span>)</span><br><span class=\"line\">        self._func()</span><br><span class=\"line\">        <span class=\"keyword\">print</span> (<span class=\"string\">'class decorator ending'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Foo</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bar</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">'bar'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">bar()</span><br></pre></td></tr></table></figure>\n<h3 id=\"functools-wraps\"><a href=\"#functools-wraps\" class=\"headerlink\" title=\"functools.wraps\"></a>functools.wraps</h3><p>使用装饰器极大地复用了代码，但是他有一个缺点就是原函数的元信息不见了，比如函数的<code>docstring</code>、<code>__name__</code>、参数列表，先看例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 装饰器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">logged</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">with_logging</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> func.__name__      <span class=\"comment\"># 输出 'with_logging'</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> func.__doc__       <span class=\"comment\"># 输出 None</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(*args, **kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> with_logging</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 函数</span></span><br><span class=\"line\"><span class=\"meta\">@logged</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">   <span class=\"string\">\"\"\"does some math\"\"\"</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> x + x * x</span><br><span class=\"line\"></span><br><span class=\"line\">logged(f)</span><br></pre></td></tr></table></figure>\n<p>不难发现，函数 f 被<code>with_logging</code>取代了，当然它的<code>docstring</code>，<code>__name__</code>就是变成了<code>with_logging</code>函数的信息了。好在我们有<code>functools.wraps</code>，<code>wraps</code>本身也是一个装饰器，它能把原函数的元信息拷贝到装饰器里面的 func 函数中，这使得装饰器里面的 func 函数也有和原函数 foo 一样的元信息了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> wraps</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">logged</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @wraps(func)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">with_logging</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> func.__name__      <span class=\"comment\"># 输出 'f'</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> func.__doc__       <span class=\"comment\"># 输出 'does some math'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(*args, **kwargs)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> with_logging</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@logged</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">   <span class=\"string\">\"\"\"does some math\"\"\"</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> x + x * x</span><br></pre></td></tr></table></figure>\n<h1 id=\"装饰器顺序\"><a href=\"#装饰器顺序\" class=\"headerlink\" title=\"装饰器顺序\"></a>装饰器顺序</h1><p>一个函数还可以同时定义多个装饰器，比如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@a</span></span><br><span class=\"line\"><span class=\"meta\">@b</span></span><br><span class=\"line\"><span class=\"meta\">@c</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span> <span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>它的执行顺序是从里到外，最先调用最里层的装饰器，最后调用最外层的装饰器，它等效于</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = a(b(c(f)))</span><br></pre></td></tr></table></figure>\n<h1 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h1><h2 id=\"与-区别\"><a href=\"#与-区别\" class=\"headerlink\" title=\"*与**区别\"></a>*与**区别</h2><p>在Python的函数定义中使用<em>args和**kwargs可传递可变参数。</em>args用作传递非命名键值可变长参数列表（位置参数），**kwargs用作传递键值可变长参数列表。在函数调用的时候也有解构的使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_var_args</span><span class=\"params\">(farg, *args)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"formal arg:\"</span>, farg</span><br><span class=\"line\">    <span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> args:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"another arg:\"</span>, arg</span><br><span class=\"line\"> </span><br><span class=\"line\">test_var_args(<span class=\"number\">1</span>, <span class=\"string\">\"two\"</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">formal arg: 1</span></span><br><span class=\"line\"><span class=\"string\">another arg: two</span></span><br><span class=\"line\"><span class=\"string\">another arg: 3</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_var_kwargs</span><span class=\"params\">(farg, **kwargs)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"formal arg:\"</span>, farg</span><br><span class=\"line\">    <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> kwargs:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"another keyword arg: %s: %s\"</span> % (key, kwargs[key])</span><br><span class=\"line\"> </span><br><span class=\"line\">test_var_kwargs(farg=<span class=\"number\">1</span>, myarg2=<span class=\"string\">\"two\"</span>, myarg3=<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Required argument:  1</span></span><br><span class=\"line\"><span class=\"string\">Optional argument (*args):  2</span></span><br><span class=\"line\"><span class=\"string\">Optional argument (*args):  3</span></span><br><span class=\"line\"><span class=\"string\">Optional argument (*args):  4</span></span><br><span class=\"line\"><span class=\"string\">Optional argument k2 (*kwargs): 6</span></span><br><span class=\"line\"><span class=\"string\">Optional argument k1 (*kwargs): 5</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_var_args_call</span><span class=\"params\">(arg1, arg2, arg3)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"arg1:\"</span>, arg1</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"arg2:\"</span>, arg2</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"arg3:\"</span>, arg3</span><br><span class=\"line\"> </span><br><span class=\"line\">args = (<span class=\"string\">\"two\"</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">test_var_args_call(<span class=\"number\">1</span>, *args)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_var_args_call</span><span class=\"params\">(arg1, arg2, arg3)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"arg1:\"</span>, arg1</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"arg2:\"</span>, arg2</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"arg3:\"</span>, arg3</span><br><span class=\"line\"> </span><br><span class=\"line\">kwargs = &#123;<span class=\"string\">\"arg3\"</span>: <span class=\"number\">3</span>, <span class=\"string\">\"arg2\"</span>: <span class=\"string\">\"two\"</span>&#125;</span><br><span class=\"line\">test_var_args_call(<span class=\"number\">1</span>, **kwargs)</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://foofish.net/python-decorator.html\" target=\"_blank\" rel=\"noopener\">https://foofish.net/python-decorator.html</a></p>\n<p><a href=\"https://www.biaodianfu.com/python-args-kwargs.html\" target=\"_blank\" rel=\"noopener\">https://www.biaodianfu.com/python-args-kwargs.html</a></p>\n<p><a href=\"https://my.oschina.net/leejun2005/blog/477614\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/leejun2005/blog/477614</a> 例子介绍的很详细</p>\n</blockquote>\n"},{"title":"react-cloneElement","date":"2019-10-13T11:40:12.000Z","_content":"\nreact提供了一个克隆 API：\n\n```js\nReact.cloneElement(\n  element,\n  [props],\n  [...children]\n)\n```\n\n官方定义：\n\n```\nClone and return a new React element using element as the starting point. The resulting element will have the original element's props with the new props merged in shallowly. New children will replace existing children. key and ref from the original element will be preserved.\n```\n\n下面实现一个demo，通过 React.cloneElement 向子组件传递 state 及 function，代码如下：\n\n```react\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nclass MyContainer extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            count: 1\n        }\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick() {\n        this.state.count++;\n        this.setState({\n            count: this.state.count++\n        })\n        console.log(this.state)\n    }\n\n    render() {\n        const childrenWithProps = React.Children.map(this.props.children, child => React.cloneElement(child, \n            {\n                parentState: this.state.count,\n                handleClick: this.handleClick\n            }\n        ));\n        return (\n            <div style={{border:\"1px solid blue\"}}>\n                <span>父容器:</span>\n                { childrenWithProps }\n            </div>\n        )\n    }\n}\nclass MySub extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            flag: false\n        }\n    }\n\n    render() {\n        return (\n            <div style={{margin: \"15px\", border: \"1px solid red\"}}>\n                子元素:{this.props.subInfo}\n                <br/>\n                父组件属性count值: { this.props.parentState }\n                <br/>\n                <span onClick={ () => this.props.handleClick() } \n                      style={{display:\"inline-block\",padding: \"3px 5px\", color:\"#ffffff\", background: \"green\", borderRadius: \"3px\", cursor: \"pointer\"}} \n                >click me</span>\n            </div>\n        )\n    }\n}\nReactDOM.render (\n    (\n        <MyContainer>\n            <MySub subInfo={\"1\"}/>\n            <MySub subInfo={\"2\"}/>\n        </MyContainer>\n    )\n    , document.getElementById('content'))\n    \n```\n\n\n\n```html\n<!DOCTYPE html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>react drag components example...</title>\n    <link rel=\"stylesheet\" href=\"/build/main.css\">\n</head>\n\n<body>\n    <div id=\"content\"></div>\n    <script src=\"bundle.js\"></script>\n</body>\n\n</html>\n```","source":"_posts/react/react-cloneElement.md","raw":"---\ntitle: react-cloneElement\ndate: 2019-10-13 19:40:12\ntags: \n- react\n---\n\nreact提供了一个克隆 API：\n\n```js\nReact.cloneElement(\n  element,\n  [props],\n  [...children]\n)\n```\n\n官方定义：\n\n```\nClone and return a new React element using element as the starting point. The resulting element will have the original element's props with the new props merged in shallowly. New children will replace existing children. key and ref from the original element will be preserved.\n```\n\n下面实现一个demo，通过 React.cloneElement 向子组件传递 state 及 function，代码如下：\n\n```react\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nclass MyContainer extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            count: 1\n        }\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick() {\n        this.state.count++;\n        this.setState({\n            count: this.state.count++\n        })\n        console.log(this.state)\n    }\n\n    render() {\n        const childrenWithProps = React.Children.map(this.props.children, child => React.cloneElement(child, \n            {\n                parentState: this.state.count,\n                handleClick: this.handleClick\n            }\n        ));\n        return (\n            <div style={{border:\"1px solid blue\"}}>\n                <span>父容器:</span>\n                { childrenWithProps }\n            </div>\n        )\n    }\n}\nclass MySub extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            flag: false\n        }\n    }\n\n    render() {\n        return (\n            <div style={{margin: \"15px\", border: \"1px solid red\"}}>\n                子元素:{this.props.subInfo}\n                <br/>\n                父组件属性count值: { this.props.parentState }\n                <br/>\n                <span onClick={ () => this.props.handleClick() } \n                      style={{display:\"inline-block\",padding: \"3px 5px\", color:\"#ffffff\", background: \"green\", borderRadius: \"3px\", cursor: \"pointer\"}} \n                >click me</span>\n            </div>\n        )\n    }\n}\nReactDOM.render (\n    (\n        <MyContainer>\n            <MySub subInfo={\"1\"}/>\n            <MySub subInfo={\"2\"}/>\n        </MyContainer>\n    )\n    , document.getElementById('content'))\n    \n```\n\n\n\n```html\n<!DOCTYPE html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>react drag components example...</title>\n    <link rel=\"stylesheet\" href=\"/build/main.css\">\n</head>\n\n<body>\n    <div id=\"content\"></div>\n    <script src=\"bundle.js\"></script>\n</body>\n\n</html>\n```","slug":"react/react-cloneElement","published":1,"updated":"2019-10-13T11:42:36.917Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblnf00524tjez9rq9vaz","content":"<p>react提供了一个克隆 API：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React.cloneElement(</span><br><span class=\"line\">  element,</span><br><span class=\"line\">  [props],</span><br><span class=\"line\">  [...children]</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>官方定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Clone and return a new React element using element as the starting point. The resulting element will have the original element&apos;s props with the new props merged in shallowly. New children will replace existing children. key and ref from the original element will be preserved.</span><br></pre></td></tr></table></figure>\n<p>下面实现一个demo，通过 React.cloneElement 向子组件传递 state 及 function，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\">import ReactDOM from &apos;react-dom&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class MyContainer extends Component &#123;</span><br><span class=\"line\">    constructor(props) &#123;</span><br><span class=\"line\">        super(props)</span><br><span class=\"line\">        this.state = &#123;</span><br><span class=\"line\">            count: 1</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.handleClick = this.handleClick.bind(this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    handleClick() &#123;</span><br><span class=\"line\">        this.state.count++;</span><br><span class=\"line\">        this.setState(&#123;</span><br><span class=\"line\">            count: this.state.count++</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        console.log(this.state)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        const childrenWithProps = React.Children.map(this.props.children, child =&gt; React.cloneElement(child, </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                parentState: this.state.count,</span><br><span class=\"line\">                handleClick: this.handleClick</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ));</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div style=&#123;&#123;border:&quot;1px solid blue&quot;&#125;&#125;&gt;</span><br><span class=\"line\">                &lt;span&gt;父容器:&lt;/span&gt;</span><br><span class=\"line\">                &#123; childrenWithProps &#125;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class MySub extends Component &#123;</span><br><span class=\"line\">    constructor(props) &#123;</span><br><span class=\"line\">        super(props)</span><br><span class=\"line\">        this.state = &#123;</span><br><span class=\"line\">            flag: false</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div style=&#123;&#123;margin: &quot;15px&quot;, border: &quot;1px solid red&quot;&#125;&#125;&gt;</span><br><span class=\"line\">                子元素:&#123;this.props.subInfo&#125;</span><br><span class=\"line\">                &lt;br/&gt;</span><br><span class=\"line\">                父组件属性count值: &#123; this.props.parentState &#125;</span><br><span class=\"line\">                &lt;br/&gt;</span><br><span class=\"line\">                &lt;span onClick=&#123; () =&gt; this.props.handleClick() &#125; </span><br><span class=\"line\">                      style=&#123;&#123;display:&quot;inline-block&quot;,padding: &quot;3px 5px&quot;, color:&quot;#ffffff&quot;, background: &quot;green&quot;, borderRadius: &quot;3px&quot;, cursor: &quot;pointer&quot;&#125;&#125; </span><br><span class=\"line\">                &gt;click me&lt;/span&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ReactDOM.render (</span><br><span class=\"line\">    (</span><br><span class=\"line\">        &lt;MyContainer&gt;</span><br><span class=\"line\">            &lt;MySub subInfo=&#123;&quot;1&quot;&#125;/&gt;</span><br><span class=\"line\">            &lt;MySub subInfo=&#123;&quot;2&quot;&#125;/&gt;</span><br><span class=\"line\">        &lt;/MyContainer&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    , document.getElementById(&apos;content&apos;))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>react drag components example...<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/build/main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>react提供了一个克隆 API：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React.cloneElement(</span><br><span class=\"line\">  element,</span><br><span class=\"line\">  [props],</span><br><span class=\"line\">  [...children]</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>官方定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Clone and return a new React element using element as the starting point. The resulting element will have the original element&apos;s props with the new props merged in shallowly. New children will replace existing children. key and ref from the original element will be preserved.</span><br></pre></td></tr></table></figure>\n<p>下面实现一个demo，通过 React.cloneElement 向子组件传递 state 及 function，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\">import ReactDOM from &apos;react-dom&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class MyContainer extends Component &#123;</span><br><span class=\"line\">    constructor(props) &#123;</span><br><span class=\"line\">        super(props)</span><br><span class=\"line\">        this.state = &#123;</span><br><span class=\"line\">            count: 1</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.handleClick = this.handleClick.bind(this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    handleClick() &#123;</span><br><span class=\"line\">        this.state.count++;</span><br><span class=\"line\">        this.setState(&#123;</span><br><span class=\"line\">            count: this.state.count++</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        console.log(this.state)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        const childrenWithProps = React.Children.map(this.props.children, child =&gt; React.cloneElement(child, </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                parentState: this.state.count,</span><br><span class=\"line\">                handleClick: this.handleClick</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ));</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div style=&#123;&#123;border:&quot;1px solid blue&quot;&#125;&#125;&gt;</span><br><span class=\"line\">                &lt;span&gt;父容器:&lt;/span&gt;</span><br><span class=\"line\">                &#123; childrenWithProps &#125;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class MySub extends Component &#123;</span><br><span class=\"line\">    constructor(props) &#123;</span><br><span class=\"line\">        super(props)</span><br><span class=\"line\">        this.state = &#123;</span><br><span class=\"line\">            flag: false</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div style=&#123;&#123;margin: &quot;15px&quot;, border: &quot;1px solid red&quot;&#125;&#125;&gt;</span><br><span class=\"line\">                子元素:&#123;this.props.subInfo&#125;</span><br><span class=\"line\">                &lt;br/&gt;</span><br><span class=\"line\">                父组件属性count值: &#123; this.props.parentState &#125;</span><br><span class=\"line\">                &lt;br/&gt;</span><br><span class=\"line\">                &lt;span onClick=&#123; () =&gt; this.props.handleClick() &#125; </span><br><span class=\"line\">                      style=&#123;&#123;display:&quot;inline-block&quot;,padding: &quot;3px 5px&quot;, color:&quot;#ffffff&quot;, background: &quot;green&quot;, borderRadius: &quot;3px&quot;, cursor: &quot;pointer&quot;&#125;&#125; </span><br><span class=\"line\">                &gt;click me&lt;/span&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ReactDOM.render (</span><br><span class=\"line\">    (</span><br><span class=\"line\">        &lt;MyContainer&gt;</span><br><span class=\"line\">            &lt;MySub subInfo=&#123;&quot;1&quot;&#125;/&gt;</span><br><span class=\"line\">            &lt;MySub subInfo=&#123;&quot;2&quot;&#125;/&gt;</span><br><span class=\"line\">        &lt;/MyContainer&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    , document.getElementById(&apos;content&apos;))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>react drag components example...<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/build/main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"redux-saga分成多个文件","date":"2019-11-26T07:26:49.000Z","_content":"\n### 1)\n\n```\n// single entry point to start all Sagas at once\nexport default function* rootSaga() {\n  yield [\n    saga1(),\n    saga2(),\n    saga3(),\n  ]\n}\n```\n\nHere the 3 sagas will be run in parallel. The root saga will block until the 3 sagas complete. If one of the 3 fail, the error will be propagated to the root saga which will be killed, which will also kill the other 2 saga\n\n### 2)\n\n```\nexport default function* root() {\n  yield [\n    fork(saga1),\n    fork(saga2),\n    fork(saga3)\n  ]\n}\n```\n\nThe only difference I see here is that this time the yield effect will not block because forking is non-blocking, thus the root saga will reach the end but the 3 childs will remain alive. Error behavior is the same as 1)\n\n### 3)\n\n```\nexport default function* root() {\n  yield fork(saga1)\n  yield fork(saga2)\n  yield fork(saga3)\n}\n```\n\nI don't see any difference in behavior from 2)\n\n------\n\n# better examples\n\nThe problem with forking is that if any of the root saga fails, then the root saga will be killed, and the other sub sagas will also be killed because their parent got killed. In practice this means that your whole app may become unusable (if it relies heavily on sagas) just because of a minor saga error so it's not really good.\n\n### 4)\n\n```\nexport default function* root() {\n  yield spawn(saga1)\n  yield spawn(saga2)\n  yield spawn(saga3)\n}\n```\n\nThis time, if an error occur in saga1, it will not make root, saga2 and saga3 get killed so only a part of your app stops working in case of error. Somehow this can also be very problematic because the saga1 might be killed due to an error like a failing http request that you didn't catch properly, making the whole feature covered by saga1 unavailable for the app lifetime.\n\n### 5)\n\n[@granmoe](https://github.com/granmoe) has suggested the following way to start sagas in: [#570](https://github.com/redux-saga/redux-saga/issues/570)\n\n```\nfunction* rootSaga () {\n\n  const sagas = [\n    saga1,\n    saga2,\n    saga3,\n  ]; \n\n  yield sagas.map(saga =>\n    spawn(function* () {\n      while (true) {\n        try {\n          yield call(saga)\n        } catch (e) {\n          console.log(e)\n        }\n      }\n    })\n  )\n\n}\n```\n\nThis time, if any of the 3 sagas had an error, it would be automatically restarted. This may, or not, be the desired behavior according to your app.\n\n### 6)\n\nHere's how I handle sagas in my own app:\n\n```\nconst makeRestartable = (saga) => {\n  return function* () {\n    yield spawn(function* () {\n      while (true) {\n        try {\n          yield call(saga);\n          console.error(\"unexpected root saga termination. The root sagas are supposed to be sagas that live during the whole app lifetime!\",saga);\n        } catch (e) {\n          console.error(\"Saga error, the saga will be restarted\",e);\n        }\n        yield delay(1000); // Avoid infinite failures blocking app TODO use backoff retry policy...\n      }\n    })\n  };\n};\n\nconst rootSagas = [\n  domain1saga,\n  domain2saga,\n  domain3saga,\n].map(makeRestartable);\n\nexport default function* root() {\n  yield rootSagas.map(saga => call(saga));\n}\n```\n\nI'm using a saga HOC to add error handling to the root sagas. In my app, all root sagas are never supposed to terminate but should block, and if there are errors they should be automatically restarted.\n\nRestarting synchronously can, in my experience, lead to infinite loops (if the saga fails everytime you try to restart it) so I added a hacky delay for now to prevent this issue.\n\nYou mentionned different domains in your app so this pattern seems appropriate to your usecase where each domain should somehow have its own root saga.","source":"_posts/react/redux-saga分成多个文件.md","raw":"---\ntitle: redux-saga分成多个文件\ndate: 2019-11-26 15:26:49\ntags:\n- react\n---\n\n### 1)\n\n```\n// single entry point to start all Sagas at once\nexport default function* rootSaga() {\n  yield [\n    saga1(),\n    saga2(),\n    saga3(),\n  ]\n}\n```\n\nHere the 3 sagas will be run in parallel. The root saga will block until the 3 sagas complete. If one of the 3 fail, the error will be propagated to the root saga which will be killed, which will also kill the other 2 saga\n\n### 2)\n\n```\nexport default function* root() {\n  yield [\n    fork(saga1),\n    fork(saga2),\n    fork(saga3)\n  ]\n}\n```\n\nThe only difference I see here is that this time the yield effect will not block because forking is non-blocking, thus the root saga will reach the end but the 3 childs will remain alive. Error behavior is the same as 1)\n\n### 3)\n\n```\nexport default function* root() {\n  yield fork(saga1)\n  yield fork(saga2)\n  yield fork(saga3)\n}\n```\n\nI don't see any difference in behavior from 2)\n\n------\n\n# better examples\n\nThe problem with forking is that if any of the root saga fails, then the root saga will be killed, and the other sub sagas will also be killed because their parent got killed. In practice this means that your whole app may become unusable (if it relies heavily on sagas) just because of a minor saga error so it's not really good.\n\n### 4)\n\n```\nexport default function* root() {\n  yield spawn(saga1)\n  yield spawn(saga2)\n  yield spawn(saga3)\n}\n```\n\nThis time, if an error occur in saga1, it will not make root, saga2 and saga3 get killed so only a part of your app stops working in case of error. Somehow this can also be very problematic because the saga1 might be killed due to an error like a failing http request that you didn't catch properly, making the whole feature covered by saga1 unavailable for the app lifetime.\n\n### 5)\n\n[@granmoe](https://github.com/granmoe) has suggested the following way to start sagas in: [#570](https://github.com/redux-saga/redux-saga/issues/570)\n\n```\nfunction* rootSaga () {\n\n  const sagas = [\n    saga1,\n    saga2,\n    saga3,\n  ]; \n\n  yield sagas.map(saga =>\n    spawn(function* () {\n      while (true) {\n        try {\n          yield call(saga)\n        } catch (e) {\n          console.log(e)\n        }\n      }\n    })\n  )\n\n}\n```\n\nThis time, if any of the 3 sagas had an error, it would be automatically restarted. This may, or not, be the desired behavior according to your app.\n\n### 6)\n\nHere's how I handle sagas in my own app:\n\n```\nconst makeRestartable = (saga) => {\n  return function* () {\n    yield spawn(function* () {\n      while (true) {\n        try {\n          yield call(saga);\n          console.error(\"unexpected root saga termination. The root sagas are supposed to be sagas that live during the whole app lifetime!\",saga);\n        } catch (e) {\n          console.error(\"Saga error, the saga will be restarted\",e);\n        }\n        yield delay(1000); // Avoid infinite failures blocking app TODO use backoff retry policy...\n      }\n    })\n  };\n};\n\nconst rootSagas = [\n  domain1saga,\n  domain2saga,\n  domain3saga,\n].map(makeRestartable);\n\nexport default function* root() {\n  yield rootSagas.map(saga => call(saga));\n}\n```\n\nI'm using a saga HOC to add error handling to the root sagas. In my app, all root sagas are never supposed to terminate but should block, and if there are errors they should be automatically restarted.\n\nRestarting synchronously can, in my experience, lead to infinite loops (if the saga fails everytime you try to restart it) so I added a hacky delay for now to prevent this issue.\n\nYou mentionned different domains in your app so this pattern seems appropriate to your usecase where each domain should somehow have its own root saga.","slug":"react/redux-saga分成多个文件","published":1,"updated":"2020-08-27T15:25:48.714Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblng00544tje5snnain5","content":"<h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1)\"></a>1)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// single entry point to start all Sagas at once</span><br><span class=\"line\">export default function* rootSaga() &#123;</span><br><span class=\"line\">  yield [</span><br><span class=\"line\">    saga1(),</span><br><span class=\"line\">    saga2(),</span><br><span class=\"line\">    saga3(),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Here the 3 sagas will be run in parallel. The root saga will block until the 3 sagas complete. If one of the 3 fail, the error will be propagated to the root saga which will be killed, which will also kill the other 2 saga</p>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2)\"></a>2)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default function* root() &#123;</span><br><span class=\"line\">  yield [</span><br><span class=\"line\">    fork(saga1),</span><br><span class=\"line\">    fork(saga2),</span><br><span class=\"line\">    fork(saga3)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The only difference I see here is that this time the yield effect will not block because forking is non-blocking, thus the root saga will reach the end but the 3 childs will remain alive. Error behavior is the same as 1)</p>\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3)\"></a>3)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default function* root() &#123;</span><br><span class=\"line\">  yield fork(saga1)</span><br><span class=\"line\">  yield fork(saga2)</span><br><span class=\"line\">  yield fork(saga3)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>I don’t see any difference in behavior from 2)</p>\n<hr>\n<h1 id=\"better-examples\"><a href=\"#better-examples\" class=\"headerlink\" title=\"better examples\"></a>better examples</h1><p>The problem with forking is that if any of the root saga fails, then the root saga will be killed, and the other sub sagas will also be killed because their parent got killed. In practice this means that your whole app may become unusable (if it relies heavily on sagas) just because of a minor saga error so it’s not really good.</p>\n<h3 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4)\"></a>4)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default function* root() &#123;</span><br><span class=\"line\">  yield spawn(saga1)</span><br><span class=\"line\">  yield spawn(saga2)</span><br><span class=\"line\">  yield spawn(saga3)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This time, if an error occur in saga1, it will not make root, saga2 and saga3 get killed so only a part of your app stops working in case of error. Somehow this can also be very problematic because the saga1 might be killed due to an error like a failing http request that you didn’t catch properly, making the whole feature covered by saga1 unavailable for the app lifetime.</p>\n<h3 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5)\"></a>5)</h3><p><a href=\"https://github.com/granmoe\" target=\"_blank\" rel=\"noopener\">@granmoe</a> has suggested the following way to start sagas in: <a href=\"https://github.com/redux-saga/redux-saga/issues/570\" target=\"_blank\" rel=\"noopener\">#570</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* rootSaga () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  const sagas = [</span><br><span class=\"line\">    saga1,</span><br><span class=\"line\">    saga2,</span><br><span class=\"line\">    saga3,</span><br><span class=\"line\">  ]; </span><br><span class=\"line\"></span><br><span class=\"line\">  yield sagas.map(saga =&gt;</span><br><span class=\"line\">    spawn(function* () &#123;</span><br><span class=\"line\">      while (true) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">          yield call(saga)</span><br><span class=\"line\">        &#125; catch (e) &#123;</span><br><span class=\"line\">          console.log(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This time, if any of the 3 sagas had an error, it would be automatically restarted. This may, or not, be the desired behavior according to your app.</p>\n<h3 id=\"6\"><a href=\"#6\" class=\"headerlink\" title=\"6)\"></a>6)</h3><p>Here’s how I handle sagas in my own app:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const makeRestartable = (saga) =&gt; &#123;</span><br><span class=\"line\">  return function* () &#123;</span><br><span class=\"line\">    yield spawn(function* () &#123;</span><br><span class=\"line\">      while (true) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">          yield call(saga);</span><br><span class=\"line\">          console.error(&quot;unexpected root saga termination. The root sagas are supposed to be sagas that live during the whole app lifetime!&quot;,saga);</span><br><span class=\"line\">        &#125; catch (e) &#123;</span><br><span class=\"line\">          console.error(&quot;Saga error, the saga will be restarted&quot;,e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        yield delay(1000); // Avoid infinite failures blocking app TODO use backoff retry policy...</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const rootSagas = [</span><br><span class=\"line\">  domain1saga,</span><br><span class=\"line\">  domain2saga,</span><br><span class=\"line\">  domain3saga,</span><br><span class=\"line\">].map(makeRestartable);</span><br><span class=\"line\"></span><br><span class=\"line\">export default function* root() &#123;</span><br><span class=\"line\">  yield rootSagas.map(saga =&gt; call(saga));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>I’m using a saga HOC to add error handling to the root sagas. In my app, all root sagas are never supposed to terminate but should block, and if there are errors they should be automatically restarted.</p>\n<p>Restarting synchronously can, in my experience, lead to infinite loops (if the saga fails everytime you try to restart it) so I added a hacky delay for now to prevent this issue.</p>\n<p>You mentionned different domains in your app so this pattern seems appropriate to your usecase where each domain should somehow have its own root saga.</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1)\"></a>1)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// single entry point to start all Sagas at once</span><br><span class=\"line\">export default function* rootSaga() &#123;</span><br><span class=\"line\">  yield [</span><br><span class=\"line\">    saga1(),</span><br><span class=\"line\">    saga2(),</span><br><span class=\"line\">    saga3(),</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Here the 3 sagas will be run in parallel. The root saga will block until the 3 sagas complete. If one of the 3 fail, the error will be propagated to the root saga which will be killed, which will also kill the other 2 saga</p>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2)\"></a>2)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default function* root() &#123;</span><br><span class=\"line\">  yield [</span><br><span class=\"line\">    fork(saga1),</span><br><span class=\"line\">    fork(saga2),</span><br><span class=\"line\">    fork(saga3)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The only difference I see here is that this time the yield effect will not block because forking is non-blocking, thus the root saga will reach the end but the 3 childs will remain alive. Error behavior is the same as 1)</p>\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3)\"></a>3)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default function* root() &#123;</span><br><span class=\"line\">  yield fork(saga1)</span><br><span class=\"line\">  yield fork(saga2)</span><br><span class=\"line\">  yield fork(saga3)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>I don’t see any difference in behavior from 2)</p>\n<hr>\n<h1 id=\"better-examples\"><a href=\"#better-examples\" class=\"headerlink\" title=\"better examples\"></a>better examples</h1><p>The problem with forking is that if any of the root saga fails, then the root saga will be killed, and the other sub sagas will also be killed because their parent got killed. In practice this means that your whole app may become unusable (if it relies heavily on sagas) just because of a minor saga error so it’s not really good.</p>\n<h3 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4)\"></a>4)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default function* root() &#123;</span><br><span class=\"line\">  yield spawn(saga1)</span><br><span class=\"line\">  yield spawn(saga2)</span><br><span class=\"line\">  yield spawn(saga3)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This time, if an error occur in saga1, it will not make root, saga2 and saga3 get killed so only a part of your app stops working in case of error. Somehow this can also be very problematic because the saga1 might be killed due to an error like a failing http request that you didn’t catch properly, making the whole feature covered by saga1 unavailable for the app lifetime.</p>\n<h3 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5)\"></a>5)</h3><p><a href=\"https://github.com/granmoe\" target=\"_blank\" rel=\"noopener\">@granmoe</a> has suggested the following way to start sagas in: <a href=\"https://github.com/redux-saga/redux-saga/issues/570\" target=\"_blank\" rel=\"noopener\">#570</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* rootSaga () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  const sagas = [</span><br><span class=\"line\">    saga1,</span><br><span class=\"line\">    saga2,</span><br><span class=\"line\">    saga3,</span><br><span class=\"line\">  ]; </span><br><span class=\"line\"></span><br><span class=\"line\">  yield sagas.map(saga =&gt;</span><br><span class=\"line\">    spawn(function* () &#123;</span><br><span class=\"line\">      while (true) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">          yield call(saga)</span><br><span class=\"line\">        &#125; catch (e) &#123;</span><br><span class=\"line\">          console.log(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This time, if any of the 3 sagas had an error, it would be automatically restarted. This may, or not, be the desired behavior according to your app.</p>\n<h3 id=\"6\"><a href=\"#6\" class=\"headerlink\" title=\"6)\"></a>6)</h3><p>Here’s how I handle sagas in my own app:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const makeRestartable = (saga) =&gt; &#123;</span><br><span class=\"line\">  return function* () &#123;</span><br><span class=\"line\">    yield spawn(function* () &#123;</span><br><span class=\"line\">      while (true) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">          yield call(saga);</span><br><span class=\"line\">          console.error(&quot;unexpected root saga termination. The root sagas are supposed to be sagas that live during the whole app lifetime!&quot;,saga);</span><br><span class=\"line\">        &#125; catch (e) &#123;</span><br><span class=\"line\">          console.error(&quot;Saga error, the saga will be restarted&quot;,e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        yield delay(1000); // Avoid infinite failures blocking app TODO use backoff retry policy...</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const rootSagas = [</span><br><span class=\"line\">  domain1saga,</span><br><span class=\"line\">  domain2saga,</span><br><span class=\"line\">  domain3saga,</span><br><span class=\"line\">].map(makeRestartable);</span><br><span class=\"line\"></span><br><span class=\"line\">export default function* root() &#123;</span><br><span class=\"line\">  yield rootSagas.map(saga =&gt; call(saga));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>I’m using a saga HOC to add error handling to the root sagas. In my app, all root sagas are never supposed to terminate but should block, and if there are errors they should be automatically restarted.</p>\n<p>Restarting synchronously can, in my experience, lead to infinite loops (if the saga fails everytime you try to restart it) so I added a hacky delay for now to prevent this issue.</p>\n<p>You mentionned different domains in your app so this pattern seems appropriate to your usecase where each domain should somehow have its own root saga.</p>\n"},{"title":"Vue3工程搭建","date":"2020-05-09T06:23:23.000Z","_content":"\n# 创建工程\n\n```bash\nnpm i -g @vue/cli\nvue create test\n```\n\n","source":"_posts/vue/Vue3工程搭建.md","raw":"---\ntitle: Vue3工程搭建\ndate: 2020-05-09 14:23:23\ntags:\n- vue\n---\n\n# 创建工程\n\n```bash\nnpm i -g @vue/cli\nvue create test\n```\n\n","slug":"vue/Vue3工程搭建","published":1,"updated":"2020-08-27T15:25:48.714Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblni00564tjexdk8o4nm","content":"<h1 id=\"创建工程\"><a href=\"#创建工程\" class=\"headerlink\" title=\"创建工程\"></a>创建工程</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g @vue/cli</span><br><span class=\"line\">vue create <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"创建工程\"><a href=\"#创建工程\" class=\"headerlink\" title=\"创建工程\"></a>创建工程</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g @vue/cli</span><br><span class=\"line\">vue create <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n"},{"title":"springboot启动执行sql文件","date":"2020-10-10T16:00:00.000Z","_content":"\n```java\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.Resource;\nimport org.springframework.jdbc.datasource.init.DataSourceInitializer;\nimport org.springframework.jdbc.datasource.init.DatabasePopulator;\nimport org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\n\nimport javax.sql.DataSource;\n\n/**\n * 自定义初始化数据源\n */\n@Configuration\npublic class CustomizeDataSourceInitializer {\n\n\n    @Value(\"classpath:sql/mail_comment.sql\")\n    private Resource functionScriptFarms;\n\n    @Bean\n    public DataSourceInitializer dataSourceInitializer(final DataSource dataSource) {\n        final DataSourceInitializer initializer = new DataSourceInitializer();\n        // 设置数据源\n        initializer.setDataSource(dataSource);\n        initializer.setDatabasePopulator(databasePopulator());\n        return initializer;\n    }\n\n    private DatabasePopulator databasePopulator() {\n        final ResourceDatabasePopulator populator = new ResourceDatabasePopulator();\n        populator.addScripts(functionScriptFarms);\n        return populator;\n    }\n\n}\n```\n\n","source":"_posts/spring/springboot启动执行sql文件.md","raw":"---\ntitle: springboot启动执行sql文件\ndate: 2020-10-11\n---\n\n```java\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.Resource;\nimport org.springframework.jdbc.datasource.init.DataSourceInitializer;\nimport org.springframework.jdbc.datasource.init.DatabasePopulator;\nimport org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\n\nimport javax.sql.DataSource;\n\n/**\n * 自定义初始化数据源\n */\n@Configuration\npublic class CustomizeDataSourceInitializer {\n\n\n    @Value(\"classpath:sql/mail_comment.sql\")\n    private Resource functionScriptFarms;\n\n    @Bean\n    public DataSourceInitializer dataSourceInitializer(final DataSource dataSource) {\n        final DataSourceInitializer initializer = new DataSourceInitializer();\n        // 设置数据源\n        initializer.setDataSource(dataSource);\n        initializer.setDatabasePopulator(databasePopulator());\n        return initializer;\n    }\n\n    private DatabasePopulator databasePopulator() {\n        final ResourceDatabasePopulator populator = new ResourceDatabasePopulator();\n        populator.addScripts(functionScriptFarms);\n        return populator;\n    }\n\n}\n```\n\n","slug":"spring/springboot启动执行sql文件","published":1,"updated":"2020-10-17T10:01:55.956Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblnj00584tjecf6f3b2k","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.io.Resource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.jdbc.datasource.init.DataSourceInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.jdbc.datasource.init.DatabasePopulator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义初始化数据源</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomizeDataSourceInitializer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"classpath:sql/mail_comment.sql\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Resource functionScriptFarms;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSourceInitializer <span class=\"title\">dataSourceInitializer</span><span class=\"params\">(<span class=\"keyword\">final</span> DataSource dataSource)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> DataSourceInitializer initializer = <span class=\"keyword\">new</span> DataSourceInitializer();</span><br><span class=\"line\">        <span class=\"comment\">// 设置数据源</span></span><br><span class=\"line\">        initializer.setDataSource(dataSource);</span><br><span class=\"line\">        initializer.setDatabasePopulator(databasePopulator());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> initializer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> DatabasePopulator <span class=\"title\">databasePopulator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> ResourceDatabasePopulator populator = <span class=\"keyword\">new</span> ResourceDatabasePopulator();</span><br><span class=\"line\">        populator.addScripts(functionScriptFarms);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> populator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.io.Resource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.jdbc.datasource.init.DataSourceInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.jdbc.datasource.init.DatabasePopulator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义初始化数据源</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomizeDataSourceInitializer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"classpath:sql/mail_comment.sql\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Resource functionScriptFarms;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSourceInitializer <span class=\"title\">dataSourceInitializer</span><span class=\"params\">(<span class=\"keyword\">final</span> DataSource dataSource)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> DataSourceInitializer initializer = <span class=\"keyword\">new</span> DataSourceInitializer();</span><br><span class=\"line\">        <span class=\"comment\">// 设置数据源</span></span><br><span class=\"line\">        initializer.setDataSource(dataSource);</span><br><span class=\"line\">        initializer.setDatabasePopulator(databasePopulator());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> initializer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> DatabasePopulator <span class=\"title\">databasePopulator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> ResourceDatabasePopulator populator = <span class=\"keyword\">new</span> ResourceDatabasePopulator();</span><br><span class=\"line\">        populator.addScripts(functionScriptFarms);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> populator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"react的children","date":"2019-10-14T12:44:11.000Z","_content":"\nReact的核心为组件。你可以像嵌套HTML标签一样嵌套使用这些组件，这使得编写JSX更加容易因为它类似于标记语言。\n\n当我刚开始学习React时，当时我认为“使用 `props.children` 就这么回事，我知道它的一切”。我错了。。\n\n因为我们使用的事JavaScript，我们会改变children。我们能够给它们发送特殊的属性，以此来决定它们是否进行渲染。让我们来探究一下React中children的作用。\n\n## 子组件\n\n我们有一个组件 `<Grid />` 包含了几个组件 `<Row />` 。你可能会这么使用它：\n\n```react\n<Grid>\n  <Row />\n  <Row />\n  <Row />\n</Grid>\n```\n\n这三个 `Row` 组件都成为了 `Grid` 的 `props.children` 。使用一个表达式容器，父组件就能够渲染它们的子组件：\n\n```react\nclass Grid extends React.Component {\n  render() {\n    return <div>{this.props.children}</div>\n  }\n}\n```\n\n父组件也能够决定不渲染任何的子组件或者在渲染之前对它们进行操作。例如，这个 `<Fullstop />` 组件就没有渲染它的子组件：\n\n```react\nclass Fullstop extends React.Component {\n  render() {\n    return <h1>Hello world!</h1>\n  }\n}\n```\n\n不管你将什么子组件传递给这个组件，它都只会显示“Hello world!”\n\n## 任何东西都能是一个child\n\nReact中的Children不一定是组件，它们可以使任何东西。例如，我们能够将上面的文字作为children传递我们的 `<Grid />` 组件。\n\n```react\n<Grid>Hello world!</Grid>\n```\n\nJSX将会自动删除每行开头和结尾的空格，以及空行。它还会把字符串中间的空白行压缩为一个空格。\n\n这意味着以下的这些例子都会渲染出一样的情况：\n\n```react\n<Grid>Hello world!</Grid>\n\n<Grid>\n  Hello world!\n</Grid>\n\n<Grid>\n  Hello\n  world!\n</Grid>\n\n<Grid>\n\n  Hello world!\n</Grid>\n```\n\n你也可以将多种类型的children完美的结合在一起：\n\n```react\n<Grid>\n  Here is a row:\n  <Row />\n  Here is another row:\n  <Row />\n</Grid>\n```\n\n## child 的功能\n\n我们能够传递任何的JavaScript表达式作为children，包括函数。\n\n为了说明这种情况，以下是一个组件，它将执行一个传递过来的作为child的函数：\n\n```react\nclass Executioner extends React.Component {\n  render() {\n    // See how we're calling the child as a function?\n    //                        ↓\n    return this.props.children()\n  }\n}\n```\n\n你会像这样的使用这个组件\n\n```react\n<Executioner>\n  {() => <h1>Hello World!</h1>}\n</Executioner>\n```\n\n当然，这个例子并没什么用，只是展示了这个想法。\n\n假设你想从服务器获取一些数据。你能使用多种方法实现，像这种将函数作为child的方法也是可行的。\n\n```react\n<Fetch url=\"api.myself.com\">\n  {(result) => <p>{result}</p>}\n</Fetch>\n```\n\n不要担心这些超出了你的脑容量。我想要的是当你以后遇到这种情况时不再惊讶。有了children什么事都会发生。\n\n## 操作children\n\n如果你看过React的文档你就会说“children是一个不透明的数据结构”。从本质上来讲， `props.children` 可以使任何的类型，比如数组、函数、对象等等。\n\nReact提供了一系列的函数助手来使得操作children更加方便。\n\n### 循环\n\n两个最显眼的函数助手就是 `React.Children.map` 以及 `React.Children.forEach` 。它们在对应数组的情况下能起作用，除此之外，当函数、对象或者任何东西作为children传递时，它们也会起作用。\n\n```react\nclass IgnoreFirstChild extends React.Component {\n  render() {\n    const children = this.props.children\n    return (\n      <div>\n        {React.Children.map(children, (child, i) => {\n          // Ignore the first child\n          if (i < 1) return\n          return child\n        })}\n      </div>\n    )\n  }\n}\n```\n\n`<IgnoreFirstChild />` 组件在这里会遍历所有的children，忽略第一个child然后返回其他的。\n\n```react\n<IgnoreFirstChild>\n  <h1>First</h1>\n  <h1>Second</h1> // <- Only this is rendered\n</IgnoreFirstChild>\n```\n\n在这种情况下，我们也可以使用 `this.props.children.map` 的方法。但要是有人讲一个函数作为child传递过来将会发生什么呢？`this.props.children` 会是一个函数而不是一个数组，接着我们就会产生一个error！\n\n然而使用 `React.Children.map` 函数，无论什么都不会报错。\n\n```react\n<IgnoreFirstChild>\n  {() => <h1>First</h1>} // <- Ignored ?\n</IgnoreFirstChild>\n```\n\n### 计数\n\n因为`this.props.children` 可以是任何类型的，检查一个组件有多少个children是非常困难的。天真的使用 `this.props.children.length` ，当传递了字符串或者函数时程序便会中断。假设我们有个child：`\"Hello World!\"` ，但是使用 `.length` 的方法将会显示为12。\n\n这就是为什么我们有 `React.Children.count` 方法的原因\n\n```react\nclass ChildrenCounter extends React.Component {\n  render() {\n    return <p>React.Children.count(this.props.children)</p>\n  }\n}\n```\n\n无论时什么类型它都会返回children的数量\n\n```react\n// Renders \"1\"\n<ChildrenCounter>\n  Second!\n</ChildrenCounter>\n\n// Renders \"2\"\n<ChildrenCounter>\n  <p>First</p>\n  <ChildComponent />\n</ChildrenCounter>\n\n// Renders \"3\"\n<ChildrenCounter>\n  {() => <h1>First!</h1>}\n  Second!\n  <p>Third!</p>\n</ChildrenCounter>\n```\n\n### 转换为数组\n\n如果以上的方法你都不适合，你能将children转换为数组通过 `React.Children.toArray` 方法。如果你需要对它们进行排序，这个方法是非常有用的。\n\n```react\nclass Sort extends React.Component {\n  render() {\n    const children = React.Children.toArray(this.props.children)\n    // Sort and render the children\n    return <p>{children.sort().join(' ')}</p>\n  }\n}\n<Sort>\n  // We use expression containers to make sure our strings\n  // are passed as three children, not as one string\n  {'bananas'}{'oranges'}{'apples'}\n</Sort>\n```\n\n上例会渲染为三个排好序的字符串。\n\n### 执行单一child\n\n如果你回过来想刚才的 `<Executioner />` 组件，它只能在传递单一child的情况下使用，而且child必须为函数。\n\n```react\nclass Executioner extends React.Component {\n  render() {\n    return this.props.children()\n  }\n}\n```\n\n我们可以试着去强制执行 `propTypes` ，就像下面这样\n\n```js\nExecutioner.propTypes = {\n  children: React.PropTypes.func.isRequired,\n}\n```\n\n这会使控制台打印出一条消息，部分的开发者将会把它忽视。相反的，我们可以使用在 `render` 里面使用 `React.Children.only`\n\n```js\nclass Executioner extends React.Component {\n  render() {\n    return React.Children.only(this.props.children)()\n  }\n}\n```\n\n这样只会返回一个child。如果不止一个child，它就会抛出错误，让整个程序陷入中断——完美的避开了试图破坏组件的懒惰的开发者。","source":"_posts/react/react的children.md","raw":"---\ntitle: react的children\ndate: 2019-10-14 20:44:11\ntags:\n- react\n---\n\nReact的核心为组件。你可以像嵌套HTML标签一样嵌套使用这些组件，这使得编写JSX更加容易因为它类似于标记语言。\n\n当我刚开始学习React时，当时我认为“使用 `props.children` 就这么回事，我知道它的一切”。我错了。。\n\n因为我们使用的事JavaScript，我们会改变children。我们能够给它们发送特殊的属性，以此来决定它们是否进行渲染。让我们来探究一下React中children的作用。\n\n## 子组件\n\n我们有一个组件 `<Grid />` 包含了几个组件 `<Row />` 。你可能会这么使用它：\n\n```react\n<Grid>\n  <Row />\n  <Row />\n  <Row />\n</Grid>\n```\n\n这三个 `Row` 组件都成为了 `Grid` 的 `props.children` 。使用一个表达式容器，父组件就能够渲染它们的子组件：\n\n```react\nclass Grid extends React.Component {\n  render() {\n    return <div>{this.props.children}</div>\n  }\n}\n```\n\n父组件也能够决定不渲染任何的子组件或者在渲染之前对它们进行操作。例如，这个 `<Fullstop />` 组件就没有渲染它的子组件：\n\n```react\nclass Fullstop extends React.Component {\n  render() {\n    return <h1>Hello world!</h1>\n  }\n}\n```\n\n不管你将什么子组件传递给这个组件，它都只会显示“Hello world!”\n\n## 任何东西都能是一个child\n\nReact中的Children不一定是组件，它们可以使任何东西。例如，我们能够将上面的文字作为children传递我们的 `<Grid />` 组件。\n\n```react\n<Grid>Hello world!</Grid>\n```\n\nJSX将会自动删除每行开头和结尾的空格，以及空行。它还会把字符串中间的空白行压缩为一个空格。\n\n这意味着以下的这些例子都会渲染出一样的情况：\n\n```react\n<Grid>Hello world!</Grid>\n\n<Grid>\n  Hello world!\n</Grid>\n\n<Grid>\n  Hello\n  world!\n</Grid>\n\n<Grid>\n\n  Hello world!\n</Grid>\n```\n\n你也可以将多种类型的children完美的结合在一起：\n\n```react\n<Grid>\n  Here is a row:\n  <Row />\n  Here is another row:\n  <Row />\n</Grid>\n```\n\n## child 的功能\n\n我们能够传递任何的JavaScript表达式作为children，包括函数。\n\n为了说明这种情况，以下是一个组件，它将执行一个传递过来的作为child的函数：\n\n```react\nclass Executioner extends React.Component {\n  render() {\n    // See how we're calling the child as a function?\n    //                        ↓\n    return this.props.children()\n  }\n}\n```\n\n你会像这样的使用这个组件\n\n```react\n<Executioner>\n  {() => <h1>Hello World!</h1>}\n</Executioner>\n```\n\n当然，这个例子并没什么用，只是展示了这个想法。\n\n假设你想从服务器获取一些数据。你能使用多种方法实现，像这种将函数作为child的方法也是可行的。\n\n```react\n<Fetch url=\"api.myself.com\">\n  {(result) => <p>{result}</p>}\n</Fetch>\n```\n\n不要担心这些超出了你的脑容量。我想要的是当你以后遇到这种情况时不再惊讶。有了children什么事都会发生。\n\n## 操作children\n\n如果你看过React的文档你就会说“children是一个不透明的数据结构”。从本质上来讲， `props.children` 可以使任何的类型，比如数组、函数、对象等等。\n\nReact提供了一系列的函数助手来使得操作children更加方便。\n\n### 循环\n\n两个最显眼的函数助手就是 `React.Children.map` 以及 `React.Children.forEach` 。它们在对应数组的情况下能起作用，除此之外，当函数、对象或者任何东西作为children传递时，它们也会起作用。\n\n```react\nclass IgnoreFirstChild extends React.Component {\n  render() {\n    const children = this.props.children\n    return (\n      <div>\n        {React.Children.map(children, (child, i) => {\n          // Ignore the first child\n          if (i < 1) return\n          return child\n        })}\n      </div>\n    )\n  }\n}\n```\n\n`<IgnoreFirstChild />` 组件在这里会遍历所有的children，忽略第一个child然后返回其他的。\n\n```react\n<IgnoreFirstChild>\n  <h1>First</h1>\n  <h1>Second</h1> // <- Only this is rendered\n</IgnoreFirstChild>\n```\n\n在这种情况下，我们也可以使用 `this.props.children.map` 的方法。但要是有人讲一个函数作为child传递过来将会发生什么呢？`this.props.children` 会是一个函数而不是一个数组，接着我们就会产生一个error！\n\n然而使用 `React.Children.map` 函数，无论什么都不会报错。\n\n```react\n<IgnoreFirstChild>\n  {() => <h1>First</h1>} // <- Ignored ?\n</IgnoreFirstChild>\n```\n\n### 计数\n\n因为`this.props.children` 可以是任何类型的，检查一个组件有多少个children是非常困难的。天真的使用 `this.props.children.length` ，当传递了字符串或者函数时程序便会中断。假设我们有个child：`\"Hello World!\"` ，但是使用 `.length` 的方法将会显示为12。\n\n这就是为什么我们有 `React.Children.count` 方法的原因\n\n```react\nclass ChildrenCounter extends React.Component {\n  render() {\n    return <p>React.Children.count(this.props.children)</p>\n  }\n}\n```\n\n无论时什么类型它都会返回children的数量\n\n```react\n// Renders \"1\"\n<ChildrenCounter>\n  Second!\n</ChildrenCounter>\n\n// Renders \"2\"\n<ChildrenCounter>\n  <p>First</p>\n  <ChildComponent />\n</ChildrenCounter>\n\n// Renders \"3\"\n<ChildrenCounter>\n  {() => <h1>First!</h1>}\n  Second!\n  <p>Third!</p>\n</ChildrenCounter>\n```\n\n### 转换为数组\n\n如果以上的方法你都不适合，你能将children转换为数组通过 `React.Children.toArray` 方法。如果你需要对它们进行排序，这个方法是非常有用的。\n\n```react\nclass Sort extends React.Component {\n  render() {\n    const children = React.Children.toArray(this.props.children)\n    // Sort and render the children\n    return <p>{children.sort().join(' ')}</p>\n  }\n}\n<Sort>\n  // We use expression containers to make sure our strings\n  // are passed as three children, not as one string\n  {'bananas'}{'oranges'}{'apples'}\n</Sort>\n```\n\n上例会渲染为三个排好序的字符串。\n\n### 执行单一child\n\n如果你回过来想刚才的 `<Executioner />` 组件，它只能在传递单一child的情况下使用，而且child必须为函数。\n\n```react\nclass Executioner extends React.Component {\n  render() {\n    return this.props.children()\n  }\n}\n```\n\n我们可以试着去强制执行 `propTypes` ，就像下面这样\n\n```js\nExecutioner.propTypes = {\n  children: React.PropTypes.func.isRequired,\n}\n```\n\n这会使控制台打印出一条消息，部分的开发者将会把它忽视。相反的，我们可以使用在 `render` 里面使用 `React.Children.only`\n\n```js\nclass Executioner extends React.Component {\n  render() {\n    return React.Children.only(this.props.children)()\n  }\n}\n```\n\n这样只会返回一个child。如果不止一个child，它就会抛出错误，让整个程序陷入中断——完美的避开了试图破坏组件的懒惰的开发者。","slug":"react/react的children","published":1,"updated":"2019-10-14T12:48:12.072Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblnj005a4tjed7urx58m","content":"<p>React的核心为组件。你可以像嵌套HTML标签一样嵌套使用这些组件，这使得编写JSX更加容易因为它类似于标记语言。</p>\n<p>当我刚开始学习React时，当时我认为“使用 <code>props.children</code> 就这么回事，我知道它的一切”。我错了。。</p>\n<p>因为我们使用的事JavaScript，我们会改变children。我们能够给它们发送特殊的属性，以此来决定它们是否进行渲染。让我们来探究一下React中children的作用。</p>\n<h2 id=\"子组件\"><a href=\"#子组件\" class=\"headerlink\" title=\"子组件\"></a>子组件</h2><p>我们有一个组件 <code>&lt;Grid /&gt;</code> 包含了几个组件 <code>&lt;Row /&gt;</code> 。你可能会这么使用它：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Grid&gt;</span><br><span class=\"line\">  &lt;Row /&gt;</span><br><span class=\"line\">  &lt;Row /&gt;</span><br><span class=\"line\">  &lt;Row /&gt;</span><br><span class=\"line\">&lt;/Grid&gt;</span><br></pre></td></tr></table></figure>\n<p>这三个 <code>Row</code> 组件都成为了 <code>Grid</code> 的 <code>props.children</code> 。使用一个表达式容器，父组件就能够渲染它们的子组件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Grid extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;div&gt;&#123;this.props.children&#125;&lt;/div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>父组件也能够决定不渲染任何的子组件或者在渲染之前对它们进行操作。例如，这个 <code>&lt;Fullstop /&gt;</code> 组件就没有渲染它的子组件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Fullstop extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;h1&gt;Hello world!&lt;/h1&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不管你将什么子组件传递给这个组件，它都只会显示“Hello world!”</p>\n<h2 id=\"任何东西都能是一个child\"><a href=\"#任何东西都能是一个child\" class=\"headerlink\" title=\"任何东西都能是一个child\"></a>任何东西都能是一个child</h2><p>React中的Children不一定是组件，它们可以使任何东西。例如，我们能够将上面的文字作为children传递我们的 <code>&lt;Grid /&gt;</code> 组件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Grid&gt;Hello world!&lt;/Grid&gt;</span><br></pre></td></tr></table></figure>\n<p>JSX将会自动删除每行开头和结尾的空格，以及空行。它还会把字符串中间的空白行压缩为一个空格。</p>\n<p>这意味着以下的这些例子都会渲染出一样的情况：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Grid&gt;Hello world!&lt;/Grid&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Grid&gt;</span><br><span class=\"line\">  Hello world!</span><br><span class=\"line\">&lt;/Grid&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Grid&gt;</span><br><span class=\"line\">  Hello</span><br><span class=\"line\">  world!</span><br><span class=\"line\">&lt;/Grid&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Grid&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  Hello world!</span><br><span class=\"line\">&lt;/Grid&gt;</span><br></pre></td></tr></table></figure>\n<p>你也可以将多种类型的children完美的结合在一起：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Grid&gt;</span><br><span class=\"line\">  Here is a row:</span><br><span class=\"line\">  &lt;Row /&gt;</span><br><span class=\"line\">  Here is another row:</span><br><span class=\"line\">  &lt;Row /&gt;</span><br><span class=\"line\">&lt;/Grid&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"child-的功能\"><a href=\"#child-的功能\" class=\"headerlink\" title=\"child 的功能\"></a>child 的功能</h2><p>我们能够传递任何的JavaScript表达式作为children，包括函数。</p>\n<p>为了说明这种情况，以下是一个组件，它将执行一个传递过来的作为child的函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Executioner extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    // See how we&apos;re calling the child as a function?</span><br><span class=\"line\">    //                        ↓</span><br><span class=\"line\">    return this.props.children()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你会像这样的使用这个组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Executioner&gt;</span><br><span class=\"line\">  &#123;() =&gt; &lt;h1&gt;Hello World!&lt;/h1&gt;&#125;</span><br><span class=\"line\">&lt;/Executioner&gt;</span><br></pre></td></tr></table></figure>\n<p>当然，这个例子并没什么用，只是展示了这个想法。</p>\n<p>假设你想从服务器获取一些数据。你能使用多种方法实现，像这种将函数作为child的方法也是可行的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Fetch url=&quot;api.myself.com&quot;&gt;</span><br><span class=\"line\">  &#123;(result) =&gt; &lt;p&gt;&#123;result&#125;&lt;/p&gt;&#125;</span><br><span class=\"line\">&lt;/Fetch&gt;</span><br></pre></td></tr></table></figure>\n<p>不要担心这些超出了你的脑容量。我想要的是当你以后遇到这种情况时不再惊讶。有了children什么事都会发生。</p>\n<h2 id=\"操作children\"><a href=\"#操作children\" class=\"headerlink\" title=\"操作children\"></a>操作children</h2><p>如果你看过React的文档你就会说“children是一个不透明的数据结构”。从本质上来讲， <code>props.children</code> 可以使任何的类型，比如数组、函数、对象等等。</p>\n<p>React提供了一系列的函数助手来使得操作children更加方便。</p>\n<h3 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h3><p>两个最显眼的函数助手就是 <code>React.Children.map</code> 以及 <code>React.Children.forEach</code> 。它们在对应数组的情况下能起作用，除此之外，当函数、对象或者任何东西作为children传递时，它们也会起作用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class IgnoreFirstChild extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const children = this.props.children</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &#123;React.Children.map(children, (child, i) =&gt; &#123;</span><br><span class=\"line\">          // Ignore the first child</span><br><span class=\"line\">          if (i &lt; 1) return</span><br><span class=\"line\">          return child</span><br><span class=\"line\">        &#125;)&#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>&lt;IgnoreFirstChild /&gt;</code> 组件在这里会遍历所有的children，忽略第一个child然后返回其他的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;IgnoreFirstChild&gt;</span><br><span class=\"line\">  &lt;h1&gt;First&lt;/h1&gt;</span><br><span class=\"line\">  &lt;h1&gt;Second&lt;/h1&gt; // &lt;- Only this is rendered</span><br><span class=\"line\">&lt;/IgnoreFirstChild&gt;</span><br></pre></td></tr></table></figure>\n<p>在这种情况下，我们也可以使用 <code>this.props.children.map</code> 的方法。但要是有人讲一个函数作为child传递过来将会发生什么呢？<code>this.props.children</code> 会是一个函数而不是一个数组，接着我们就会产生一个error！</p>\n<p>然而使用 <code>React.Children.map</code> 函数，无论什么都不会报错。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;IgnoreFirstChild&gt;</span><br><span class=\"line\">  &#123;() =&gt; &lt;h1&gt;First&lt;/h1&gt;&#125; // &lt;- Ignored ?</span><br><span class=\"line\">&lt;/IgnoreFirstChild&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"计数\"><a href=\"#计数\" class=\"headerlink\" title=\"计数\"></a>计数</h3><p>因为<code>this.props.children</code> 可以是任何类型的，检查一个组件有多少个children是非常困难的。天真的使用 <code>this.props.children.length</code> ，当传递了字符串或者函数时程序便会中断。假设我们有个child：<code>&quot;Hello World!&quot;</code> ，但是使用 <code>.length</code> 的方法将会显示为12。</p>\n<p>这就是为什么我们有 <code>React.Children.count</code> 方法的原因</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ChildrenCounter extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;p&gt;React.Children.count(this.props.children)&lt;/p&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>无论时什么类型它都会返回children的数量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Renders &quot;1&quot;</span><br><span class=\"line\">&lt;ChildrenCounter&gt;</span><br><span class=\"line\">  Second!</span><br><span class=\"line\">&lt;/ChildrenCounter&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// Renders &quot;2&quot;</span><br><span class=\"line\">&lt;ChildrenCounter&gt;</span><br><span class=\"line\">  &lt;p&gt;First&lt;/p&gt;</span><br><span class=\"line\">  &lt;ChildComponent /&gt;</span><br><span class=\"line\">&lt;/ChildrenCounter&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// Renders &quot;3&quot;</span><br><span class=\"line\">&lt;ChildrenCounter&gt;</span><br><span class=\"line\">  &#123;() =&gt; &lt;h1&gt;First!&lt;/h1&gt;&#125;</span><br><span class=\"line\">  Second!</span><br><span class=\"line\">  &lt;p&gt;Third!&lt;/p&gt;</span><br><span class=\"line\">&lt;/ChildrenCounter&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"转换为数组\"><a href=\"#转换为数组\" class=\"headerlink\" title=\"转换为数组\"></a>转换为数组</h3><p>如果以上的方法你都不适合，你能将children转换为数组通过 <code>React.Children.toArray</code> 方法。如果你需要对它们进行排序，这个方法是非常有用的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Sort extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const children = React.Children.toArray(this.props.children)</span><br><span class=\"line\">    // Sort and render the children</span><br><span class=\"line\">    return &lt;p&gt;&#123;children.sort().join(&apos; &apos;)&#125;&lt;/p&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;Sort&gt;</span><br><span class=\"line\">  // We use expression containers to make sure our strings</span><br><span class=\"line\">  // are passed as three children, not as one string</span><br><span class=\"line\">  &#123;&apos;bananas&apos;&#125;&#123;&apos;oranges&apos;&#125;&#123;&apos;apples&apos;&#125;</span><br><span class=\"line\">&lt;/Sort&gt;</span><br></pre></td></tr></table></figure>\n<p>上例会渲染为三个排好序的字符串。</p>\n<h3 id=\"执行单一child\"><a href=\"#执行单一child\" class=\"headerlink\" title=\"执行单一child\"></a>执行单一child</h3><p>如果你回过来想刚才的 <code>&lt;Executioner /&gt;</code> 组件，它只能在传递单一child的情况下使用，而且child必须为函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Executioner extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return this.props.children()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以试着去强制执行 <code>propTypes</code> ，就像下面这样</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Executioner.propTypes = &#123;</span><br><span class=\"line\">  children: React.PropTypes.func.isRequired,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这会使控制台打印出一条消息，部分的开发者将会把它忽视。相反的，我们可以使用在 <code>render</code> 里面使用 <code>React.Children.only</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Executioner</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> React.Children.only(<span class=\"keyword\">this</span>.props.children)()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样只会返回一个child。如果不止一个child，它就会抛出错误，让整个程序陷入中断——完美的避开了试图破坏组件的懒惰的开发者。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>React的核心为组件。你可以像嵌套HTML标签一样嵌套使用这些组件，这使得编写JSX更加容易因为它类似于标记语言。</p>\n<p>当我刚开始学习React时，当时我认为“使用 <code>props.children</code> 就这么回事，我知道它的一切”。我错了。。</p>\n<p>因为我们使用的事JavaScript，我们会改变children。我们能够给它们发送特殊的属性，以此来决定它们是否进行渲染。让我们来探究一下React中children的作用。</p>\n<h2 id=\"子组件\"><a href=\"#子组件\" class=\"headerlink\" title=\"子组件\"></a>子组件</h2><p>我们有一个组件 <code>&lt;Grid /&gt;</code> 包含了几个组件 <code>&lt;Row /&gt;</code> 。你可能会这么使用它：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Grid&gt;</span><br><span class=\"line\">  &lt;Row /&gt;</span><br><span class=\"line\">  &lt;Row /&gt;</span><br><span class=\"line\">  &lt;Row /&gt;</span><br><span class=\"line\">&lt;/Grid&gt;</span><br></pre></td></tr></table></figure>\n<p>这三个 <code>Row</code> 组件都成为了 <code>Grid</code> 的 <code>props.children</code> 。使用一个表达式容器，父组件就能够渲染它们的子组件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Grid extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;div&gt;&#123;this.props.children&#125;&lt;/div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>父组件也能够决定不渲染任何的子组件或者在渲染之前对它们进行操作。例如，这个 <code>&lt;Fullstop /&gt;</code> 组件就没有渲染它的子组件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Fullstop extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;h1&gt;Hello world!&lt;/h1&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不管你将什么子组件传递给这个组件，它都只会显示“Hello world!”</p>\n<h2 id=\"任何东西都能是一个child\"><a href=\"#任何东西都能是一个child\" class=\"headerlink\" title=\"任何东西都能是一个child\"></a>任何东西都能是一个child</h2><p>React中的Children不一定是组件，它们可以使任何东西。例如，我们能够将上面的文字作为children传递我们的 <code>&lt;Grid /&gt;</code> 组件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Grid&gt;Hello world!&lt;/Grid&gt;</span><br></pre></td></tr></table></figure>\n<p>JSX将会自动删除每行开头和结尾的空格，以及空行。它还会把字符串中间的空白行压缩为一个空格。</p>\n<p>这意味着以下的这些例子都会渲染出一样的情况：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Grid&gt;Hello world!&lt;/Grid&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Grid&gt;</span><br><span class=\"line\">  Hello world!</span><br><span class=\"line\">&lt;/Grid&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Grid&gt;</span><br><span class=\"line\">  Hello</span><br><span class=\"line\">  world!</span><br><span class=\"line\">&lt;/Grid&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Grid&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  Hello world!</span><br><span class=\"line\">&lt;/Grid&gt;</span><br></pre></td></tr></table></figure>\n<p>你也可以将多种类型的children完美的结合在一起：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Grid&gt;</span><br><span class=\"line\">  Here is a row:</span><br><span class=\"line\">  &lt;Row /&gt;</span><br><span class=\"line\">  Here is another row:</span><br><span class=\"line\">  &lt;Row /&gt;</span><br><span class=\"line\">&lt;/Grid&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"child-的功能\"><a href=\"#child-的功能\" class=\"headerlink\" title=\"child 的功能\"></a>child 的功能</h2><p>我们能够传递任何的JavaScript表达式作为children，包括函数。</p>\n<p>为了说明这种情况，以下是一个组件，它将执行一个传递过来的作为child的函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Executioner extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    // See how we&apos;re calling the child as a function?</span><br><span class=\"line\">    //                        ↓</span><br><span class=\"line\">    return this.props.children()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你会像这样的使用这个组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Executioner&gt;</span><br><span class=\"line\">  &#123;() =&gt; &lt;h1&gt;Hello World!&lt;/h1&gt;&#125;</span><br><span class=\"line\">&lt;/Executioner&gt;</span><br></pre></td></tr></table></figure>\n<p>当然，这个例子并没什么用，只是展示了这个想法。</p>\n<p>假设你想从服务器获取一些数据。你能使用多种方法实现，像这种将函数作为child的方法也是可行的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Fetch url=&quot;api.myself.com&quot;&gt;</span><br><span class=\"line\">  &#123;(result) =&gt; &lt;p&gt;&#123;result&#125;&lt;/p&gt;&#125;</span><br><span class=\"line\">&lt;/Fetch&gt;</span><br></pre></td></tr></table></figure>\n<p>不要担心这些超出了你的脑容量。我想要的是当你以后遇到这种情况时不再惊讶。有了children什么事都会发生。</p>\n<h2 id=\"操作children\"><a href=\"#操作children\" class=\"headerlink\" title=\"操作children\"></a>操作children</h2><p>如果你看过React的文档你就会说“children是一个不透明的数据结构”。从本质上来讲， <code>props.children</code> 可以使任何的类型，比如数组、函数、对象等等。</p>\n<p>React提供了一系列的函数助手来使得操作children更加方便。</p>\n<h3 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h3><p>两个最显眼的函数助手就是 <code>React.Children.map</code> 以及 <code>React.Children.forEach</code> 。它们在对应数组的情况下能起作用，除此之外，当函数、对象或者任何东西作为children传递时，它们也会起作用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class IgnoreFirstChild extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const children = this.props.children</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &#123;React.Children.map(children, (child, i) =&gt; &#123;</span><br><span class=\"line\">          // Ignore the first child</span><br><span class=\"line\">          if (i &lt; 1) return</span><br><span class=\"line\">          return child</span><br><span class=\"line\">        &#125;)&#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>&lt;IgnoreFirstChild /&gt;</code> 组件在这里会遍历所有的children，忽略第一个child然后返回其他的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;IgnoreFirstChild&gt;</span><br><span class=\"line\">  &lt;h1&gt;First&lt;/h1&gt;</span><br><span class=\"line\">  &lt;h1&gt;Second&lt;/h1&gt; // &lt;- Only this is rendered</span><br><span class=\"line\">&lt;/IgnoreFirstChild&gt;</span><br></pre></td></tr></table></figure>\n<p>在这种情况下，我们也可以使用 <code>this.props.children.map</code> 的方法。但要是有人讲一个函数作为child传递过来将会发生什么呢？<code>this.props.children</code> 会是一个函数而不是一个数组，接着我们就会产生一个error！</p>\n<p>然而使用 <code>React.Children.map</code> 函数，无论什么都不会报错。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;IgnoreFirstChild&gt;</span><br><span class=\"line\">  &#123;() =&gt; &lt;h1&gt;First&lt;/h1&gt;&#125; // &lt;- Ignored ?</span><br><span class=\"line\">&lt;/IgnoreFirstChild&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"计数\"><a href=\"#计数\" class=\"headerlink\" title=\"计数\"></a>计数</h3><p>因为<code>this.props.children</code> 可以是任何类型的，检查一个组件有多少个children是非常困难的。天真的使用 <code>this.props.children.length</code> ，当传递了字符串或者函数时程序便会中断。假设我们有个child：<code>&quot;Hello World!&quot;</code> ，但是使用 <code>.length</code> 的方法将会显示为12。</p>\n<p>这就是为什么我们有 <code>React.Children.count</code> 方法的原因</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class ChildrenCounter extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return &lt;p&gt;React.Children.count(this.props.children)&lt;/p&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>无论时什么类型它都会返回children的数量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Renders &quot;1&quot;</span><br><span class=\"line\">&lt;ChildrenCounter&gt;</span><br><span class=\"line\">  Second!</span><br><span class=\"line\">&lt;/ChildrenCounter&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// Renders &quot;2&quot;</span><br><span class=\"line\">&lt;ChildrenCounter&gt;</span><br><span class=\"line\">  &lt;p&gt;First&lt;/p&gt;</span><br><span class=\"line\">  &lt;ChildComponent /&gt;</span><br><span class=\"line\">&lt;/ChildrenCounter&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// Renders &quot;3&quot;</span><br><span class=\"line\">&lt;ChildrenCounter&gt;</span><br><span class=\"line\">  &#123;() =&gt; &lt;h1&gt;First!&lt;/h1&gt;&#125;</span><br><span class=\"line\">  Second!</span><br><span class=\"line\">  &lt;p&gt;Third!&lt;/p&gt;</span><br><span class=\"line\">&lt;/ChildrenCounter&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"转换为数组\"><a href=\"#转换为数组\" class=\"headerlink\" title=\"转换为数组\"></a>转换为数组</h3><p>如果以上的方法你都不适合，你能将children转换为数组通过 <code>React.Children.toArray</code> 方法。如果你需要对它们进行排序，这个方法是非常有用的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Sort extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const children = React.Children.toArray(this.props.children)</span><br><span class=\"line\">    // Sort and render the children</span><br><span class=\"line\">    return &lt;p&gt;&#123;children.sort().join(&apos; &apos;)&#125;&lt;/p&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;Sort&gt;</span><br><span class=\"line\">  // We use expression containers to make sure our strings</span><br><span class=\"line\">  // are passed as three children, not as one string</span><br><span class=\"line\">  &#123;&apos;bananas&apos;&#125;&#123;&apos;oranges&apos;&#125;&#123;&apos;apples&apos;&#125;</span><br><span class=\"line\">&lt;/Sort&gt;</span><br></pre></td></tr></table></figure>\n<p>上例会渲染为三个排好序的字符串。</p>\n<h3 id=\"执行单一child\"><a href=\"#执行单一child\" class=\"headerlink\" title=\"执行单一child\"></a>执行单一child</h3><p>如果你回过来想刚才的 <code>&lt;Executioner /&gt;</code> 组件，它只能在传递单一child的情况下使用，而且child必须为函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Executioner extends React.Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return this.props.children()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以试着去强制执行 <code>propTypes</code> ，就像下面这样</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Executioner.propTypes = &#123;</span><br><span class=\"line\">  children: React.PropTypes.func.isRequired,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这会使控制台打印出一条消息，部分的开发者将会把它忽视。相反的，我们可以使用在 <code>render</code> 里面使用 <code>React.Children.only</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Executioner</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> React.Children.only(<span class=\"keyword\">this</span>.props.children)()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样只会返回一个child。如果不止一个child，它就会抛出错误，让整个程序陷入中断——完美的避开了试图破坏组件的懒惰的开发者。</p>\n"},{"title":"Vue插件开发","date":"2018-12-17T12:52:34.000Z","_content":"\n# 基本结构\n\n插件的功能包括全局方法和属性、指令、mixin、实例方法。插件都有一个`install`方法，第一个参数是`Vue`，第二个参数是`options`。\n\n```js\nMyPlugin.install = function (Vue, options) {\n  Vue.myGlobalMethod = function () {  // 1. 添加全局方法或属性，如: vue-custom-element\n    // 逻辑...\n  }\n  Vue.directive('my-directive', {  // 2. 添加全局资源：指令/过滤器/过渡等，如 vue-touch\n    bind (el, binding, vnode, oldVnode) {\n      // 逻辑...\n    }\n    ...\n  })\n  Vue.mixin({\n    created: function () {  // 3. 通过全局 mixin方法添加一些组件选项，如: vuex\n      // 逻辑...\n    }\n    ...\n  })\n  Vue.prototype.$myMethod = function (options) {  // 4. 添加实例方法，通过把它们添加到 Vue.prototype 上实现\n    // 逻辑...\n  }\n}\n```\n\n# `vue-toast`\n\n","source":"_posts/vue/Vue插件开发.md","raw":"---\ntitle: Vue插件开发\ndate: 2018-12-17 20:52:34\ntags:\n- js\n- vue\n---\n\n# 基本结构\n\n插件的功能包括全局方法和属性、指令、mixin、实例方法。插件都有一个`install`方法，第一个参数是`Vue`，第二个参数是`options`。\n\n```js\nMyPlugin.install = function (Vue, options) {\n  Vue.myGlobalMethod = function () {  // 1. 添加全局方法或属性，如: vue-custom-element\n    // 逻辑...\n  }\n  Vue.directive('my-directive', {  // 2. 添加全局资源：指令/过滤器/过渡等，如 vue-touch\n    bind (el, binding, vnode, oldVnode) {\n      // 逻辑...\n    }\n    ...\n  })\n  Vue.mixin({\n    created: function () {  // 3. 通过全局 mixin方法添加一些组件选项，如: vuex\n      // 逻辑...\n    }\n    ...\n  })\n  Vue.prototype.$myMethod = function (options) {  // 4. 添加实例方法，通过把它们添加到 Vue.prototype 上实现\n    // 逻辑...\n  }\n}\n```\n\n# `vue-toast`\n\n","slug":"vue/Vue插件开发","published":1,"updated":"2020-08-27T15:25:49.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblnk005c4tjexp5sqdm5","content":"<h1 id=\"基本结构\"><a href=\"#基本结构\" class=\"headerlink\" title=\"基本结构\"></a>基本结构</h1><p>插件的功能包括全局方法和属性、指令、mixin、实例方法。插件都有一个<code>install</code>方法，第一个参数是<code>Vue</code>，第二个参数是<code>options</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyPlugin.install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue, options</span>) </span>&#123;</span><br><span class=\"line\">  Vue.myGlobalMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// 1. 添加全局方法或属性，如: vue-custom-element</span></span><br><span class=\"line\">    <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Vue.directive(<span class=\"string\">'my-directive'</span>, &#123;  <span class=\"comment\">// 2. 添加全局资源：指令/过滤器/过渡等，如 vue-touch</span></span><br><span class=\"line\">    bind (el, binding, vnode, oldVnode) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  Vue.mixin(&#123;</span><br><span class=\"line\">    created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// 3. 通过全局 mixin方法添加一些组件选项，如: vuex</span></span><br><span class=\"line\">      <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  Vue.prototype.$myMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;  <span class=\"comment\">// 4. 添加实例方法，通过把它们添加到 Vue.prototype 上实现</span></span><br><span class=\"line\">    <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"vue-toast\"><a href=\"#vue-toast\" class=\"headerlink\" title=\"vue-toast\"></a><code>vue-toast</code></h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基本结构\"><a href=\"#基本结构\" class=\"headerlink\" title=\"基本结构\"></a>基本结构</h1><p>插件的功能包括全局方法和属性、指令、mixin、实例方法。插件都有一个<code>install</code>方法，第一个参数是<code>Vue</code>，第二个参数是<code>options</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyPlugin.install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue, options</span>) </span>&#123;</span><br><span class=\"line\">  Vue.myGlobalMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// 1. 添加全局方法或属性，如: vue-custom-element</span></span><br><span class=\"line\">    <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Vue.directive(<span class=\"string\">'my-directive'</span>, &#123;  <span class=\"comment\">// 2. 添加全局资源：指令/过滤器/过渡等，如 vue-touch</span></span><br><span class=\"line\">    bind (el, binding, vnode, oldVnode) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  Vue.mixin(&#123;</span><br><span class=\"line\">    created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  <span class=\"comment\">// 3. 通过全局 mixin方法添加一些组件选项，如: vuex</span></span><br><span class=\"line\">      <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  Vue.prototype.$myMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">options</span>) </span>&#123;  <span class=\"comment\">// 4. 添加实例方法，通过把它们添加到 Vue.prototype 上实现</span></span><br><span class=\"line\">    <span class=\"comment\">// 逻辑...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"vue-toast\"><a href=\"#vue-toast\" class=\"headerlink\" title=\"vue-toast\"></a><code>vue-toast</code></h1>"},{"title":"centos7修改网卡","date":"2018-12-05T13:40:23.000Z","_content":"\n# 修改mac\n\n使用virtualbox导入一个虚拟机时mac地址是一样的，此时需要修改。 修改mac地址直接在virtualBox的`setting>network`配置中进行修改。\n\n# 修改网卡名称 \n\n## 修改网卡的配置文件\n\n```\nvim /etc/sysconfig/network-scripts/ifcfg-eno16777736 //修改NAME，DEVICE 成希望的（不要加ifcfg）\n\nmv ifcfg-eno16777736 ifcfg-eth0 //修改配置文件的名字\n```\n\n## 禁用可预测命名规则\n\n```\nvim /etc/default/grub\n```\n\n添加内核参数： net.ifnames=0 biosdevname=0\n\n```\n[root@ansheng network-scripts]# vi /etc/default/grub\nGRUB_TIMEOUT=5\nGRUB_DISTRIBUTOR=\"$(sed 's, release .*$,,g' /etc/system-release)\"\nGRUB_DEFAULT=saved\nGRUB_DISABLE_SUBMENU=true\nGRUB_TERMINAL_OUTPUT=\"console\"\nGRUB_CMDLINE_LINUX=\"rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet net.ifnames=0 biosdevname=0\"\nGRUB_DISABLE_RECOVERY=\"true\"\n```\n\n## 用 grub2-mkconfig 命令重新生成GRUB配置并更新内核\n\n```\n[root@ansheng network-scripts]# grub2-mkconfig -o /boot/grub2/grub.cfg\nGenerating grub configuration file ...\nFound linux image: /boot/vmlinuz-3.10.0-327.el7.x86_64\nFound initrd image: /boot/initramfs-3.10.0-327.el7.x86_64.img\nFound linux image: /boot/vmlinuz-0-rescue-4dd6b54f74c94bff9e92c61d669fc195\nFound initrd image: /boot/initramfs-0-rescue-4dd6b54f74c94bff9e92c61d669fc195.img\ndone\n```\n\n重启系统\n\n","source":"_posts/运维/centos7修改网卡.md","raw":"---\ntitle: centos7修改网卡\ndate: 2018-12-05 21:40:23\ntags:\n- linux\n---\n\n# 修改mac\n\n使用virtualbox导入一个虚拟机时mac地址是一样的，此时需要修改。 修改mac地址直接在virtualBox的`setting>network`配置中进行修改。\n\n# 修改网卡名称 \n\n## 修改网卡的配置文件\n\n```\nvim /etc/sysconfig/network-scripts/ifcfg-eno16777736 //修改NAME，DEVICE 成希望的（不要加ifcfg）\n\nmv ifcfg-eno16777736 ifcfg-eth0 //修改配置文件的名字\n```\n\n## 禁用可预测命名规则\n\n```\nvim /etc/default/grub\n```\n\n添加内核参数： net.ifnames=0 biosdevname=0\n\n```\n[root@ansheng network-scripts]# vi /etc/default/grub\nGRUB_TIMEOUT=5\nGRUB_DISTRIBUTOR=\"$(sed 's, release .*$,,g' /etc/system-release)\"\nGRUB_DEFAULT=saved\nGRUB_DISABLE_SUBMENU=true\nGRUB_TERMINAL_OUTPUT=\"console\"\nGRUB_CMDLINE_LINUX=\"rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet net.ifnames=0 biosdevname=0\"\nGRUB_DISABLE_RECOVERY=\"true\"\n```\n\n## 用 grub2-mkconfig 命令重新生成GRUB配置并更新内核\n\n```\n[root@ansheng network-scripts]# grub2-mkconfig -o /boot/grub2/grub.cfg\nGenerating grub configuration file ...\nFound linux image: /boot/vmlinuz-3.10.0-327.el7.x86_64\nFound initrd image: /boot/initramfs-3.10.0-327.el7.x86_64.img\nFound linux image: /boot/vmlinuz-0-rescue-4dd6b54f74c94bff9e92c61d669fc195\nFound initrd image: /boot/initramfs-0-rescue-4dd6b54f74c94bff9e92c61d669fc195.img\ndone\n```\n\n重启系统\n\n","slug":"运维/centos7修改网卡","published":1,"updated":"2020-10-17T10:01:55.956Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblnl005e4tjepiivvjyn","content":"<h1 id=\"修改mac\"><a href=\"#修改mac\" class=\"headerlink\" title=\"修改mac\"></a>修改mac</h1><p>使用virtualbox导入一个虚拟机时mac地址是一样的，此时需要修改。 修改mac地址直接在virtualBox的<code>setting&gt;network</code>配置中进行修改。</p>\n<h1 id=\"修改网卡名称\"><a href=\"#修改网卡名称\" class=\"headerlink\" title=\"修改网卡名称\"></a>修改网卡名称</h1><h2 id=\"修改网卡的配置文件\"><a href=\"#修改网卡的配置文件\" class=\"headerlink\" title=\"修改网卡的配置文件\"></a>修改网卡的配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysconfig/network-scripts/ifcfg-eno16777736 //修改NAME，DEVICE 成希望的（不要加ifcfg）</span><br><span class=\"line\"></span><br><span class=\"line\">mv ifcfg-eno16777736 ifcfg-eth0 //修改配置文件的名字</span><br></pre></td></tr></table></figure>\n<h2 id=\"禁用可预测命名规则\"><a href=\"#禁用可预测命名规则\" class=\"headerlink\" title=\"禁用可预测命名规则\"></a>禁用可预测命名规则</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/default/grub</span><br></pre></td></tr></table></figure>\n<p>添加内核参数： net.ifnames=0 biosdevname=0</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ansheng network-scripts]# vi /etc/default/grub</span><br><span class=\"line\">GRUB_TIMEOUT=5</span><br><span class=\"line\">GRUB_DISTRIBUTOR=&quot;$(sed &apos;s, release .*$,,g&apos; /etc/system-release)&quot;</span><br><span class=\"line\">GRUB_DEFAULT=saved</span><br><span class=\"line\">GRUB_DISABLE_SUBMENU=true</span><br><span class=\"line\">GRUB_TERMINAL_OUTPUT=&quot;console&quot;</span><br><span class=\"line\">GRUB_CMDLINE_LINUX=&quot;rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet net.ifnames=0 biosdevname=0&quot;</span><br><span class=\"line\">GRUB_DISABLE_RECOVERY=&quot;true&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"用-grub2-mkconfig-命令重新生成GRUB配置并更新内核\"><a href=\"#用-grub2-mkconfig-命令重新生成GRUB配置并更新内核\" class=\"headerlink\" title=\"用 grub2-mkconfig 命令重新生成GRUB配置并更新内核\"></a>用 grub2-mkconfig 命令重新生成GRUB配置并更新内核</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ansheng network-scripts]# grub2-mkconfig -o /boot/grub2/grub.cfg</span><br><span class=\"line\">Generating grub configuration file ...</span><br><span class=\"line\">Found linux image: /boot/vmlinuz-3.10.0-327.el7.x86_64</span><br><span class=\"line\">Found initrd image: /boot/initramfs-3.10.0-327.el7.x86_64.img</span><br><span class=\"line\">Found linux image: /boot/vmlinuz-0-rescue-4dd6b54f74c94bff9e92c61d669fc195</span><br><span class=\"line\">Found initrd image: /boot/initramfs-0-rescue-4dd6b54f74c94bff9e92c61d669fc195.img</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>重启系统</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"修改mac\"><a href=\"#修改mac\" class=\"headerlink\" title=\"修改mac\"></a>修改mac</h1><p>使用virtualbox导入一个虚拟机时mac地址是一样的，此时需要修改。 修改mac地址直接在virtualBox的<code>setting&gt;network</code>配置中进行修改。</p>\n<h1 id=\"修改网卡名称\"><a href=\"#修改网卡名称\" class=\"headerlink\" title=\"修改网卡名称\"></a>修改网卡名称</h1><h2 id=\"修改网卡的配置文件\"><a href=\"#修改网卡的配置文件\" class=\"headerlink\" title=\"修改网卡的配置文件\"></a>修改网卡的配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysconfig/network-scripts/ifcfg-eno16777736 //修改NAME，DEVICE 成希望的（不要加ifcfg）</span><br><span class=\"line\"></span><br><span class=\"line\">mv ifcfg-eno16777736 ifcfg-eth0 //修改配置文件的名字</span><br></pre></td></tr></table></figure>\n<h2 id=\"禁用可预测命名规则\"><a href=\"#禁用可预测命名规则\" class=\"headerlink\" title=\"禁用可预测命名规则\"></a>禁用可预测命名规则</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/default/grub</span><br></pre></td></tr></table></figure>\n<p>添加内核参数： net.ifnames=0 biosdevname=0</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ansheng network-scripts]# vi /etc/default/grub</span><br><span class=\"line\">GRUB_TIMEOUT=5</span><br><span class=\"line\">GRUB_DISTRIBUTOR=&quot;$(sed &apos;s, release .*$,,g&apos; /etc/system-release)&quot;</span><br><span class=\"line\">GRUB_DEFAULT=saved</span><br><span class=\"line\">GRUB_DISABLE_SUBMENU=true</span><br><span class=\"line\">GRUB_TERMINAL_OUTPUT=&quot;console&quot;</span><br><span class=\"line\">GRUB_CMDLINE_LINUX=&quot;rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet net.ifnames=0 biosdevname=0&quot;</span><br><span class=\"line\">GRUB_DISABLE_RECOVERY=&quot;true&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"用-grub2-mkconfig-命令重新生成GRUB配置并更新内核\"><a href=\"#用-grub2-mkconfig-命令重新生成GRUB配置并更新内核\" class=\"headerlink\" title=\"用 grub2-mkconfig 命令重新生成GRUB配置并更新内核\"></a>用 grub2-mkconfig 命令重新生成GRUB配置并更新内核</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ansheng network-scripts]# grub2-mkconfig -o /boot/grub2/grub.cfg</span><br><span class=\"line\">Generating grub configuration file ...</span><br><span class=\"line\">Found linux image: /boot/vmlinuz-3.10.0-327.el7.x86_64</span><br><span class=\"line\">Found initrd image: /boot/initramfs-3.10.0-327.el7.x86_64.img</span><br><span class=\"line\">Found linux image: /boot/vmlinuz-0-rescue-4dd6b54f74c94bff9e92c61d669fc195</span><br><span class=\"line\">Found initrd image: /boot/initramfs-0-rescue-4dd6b54f74c94bff9e92c61d669fc195.img</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>重启系统</p>\n"},{"title":"centos8安装docker","date":"2020-09-05T13:40:23.000Z","_content":"\n**背景简介**：\n\n现在centos已经到了8 ，一直在接触容器方面，为了尝鲜，下载了CentOS8，并尝试安装docker&docker-ce，不料竟然还报了个错（缺少依赖），故及时记录一下，方便其他同学。\n\n \n\n**安装步骤：**\n\n1. 下载docker-ce的repo\n\n```\ncurl https://download.docker.com/linux/centos/docker-ce.repo -o /etc/yum.repos.d/docker-ce.repo\n```\n\n2. 安装依赖（这是相比centos7的关键步骤）\n\n```\nyum install https://download.docker.com/linux/fedora/30/x86_64/stable/Packages/containerd.io-1.2.6-3.3.fc30.x86_64.rpm\n```\n\n3. 安装docker-ce\n\n```\nyum install docker-ce\n```\n\n4. 启动docker\n\n```\nsystemctl start docker\n```\n\n5. 开机启动docker\n\n```\nsystemctl enable docker\n```\n\n6.安装docker-compose\n\n```\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n```\n\n7.添加操作权限\n\n```\nsudo chmod +x /usr/local/bin/docker-compose\n```\n\n8.设置快捷\n\n```\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n```\n\n9.查看docker-compose 版本\n\n```\ndocker-compose --version\n```","source":"_posts/运维/centos8安装docker.md","raw":"---\ntitle: centos8安装docker\ndate: 2020-9-05 21:40:23\ntags:\n- linux\n---\n\n**背景简介**：\n\n现在centos已经到了8 ，一直在接触容器方面，为了尝鲜，下载了CentOS8，并尝试安装docker&docker-ce，不料竟然还报了个错（缺少依赖），故及时记录一下，方便其他同学。\n\n \n\n**安装步骤：**\n\n1. 下载docker-ce的repo\n\n```\ncurl https://download.docker.com/linux/centos/docker-ce.repo -o /etc/yum.repos.d/docker-ce.repo\n```\n\n2. 安装依赖（这是相比centos7的关键步骤）\n\n```\nyum install https://download.docker.com/linux/fedora/30/x86_64/stable/Packages/containerd.io-1.2.6-3.3.fc30.x86_64.rpm\n```\n\n3. 安装docker-ce\n\n```\nyum install docker-ce\n```\n\n4. 启动docker\n\n```\nsystemctl start docker\n```\n\n5. 开机启动docker\n\n```\nsystemctl enable docker\n```\n\n6.安装docker-compose\n\n```\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n```\n\n7.添加操作权限\n\n```\nsudo chmod +x /usr/local/bin/docker-compose\n```\n\n8.设置快捷\n\n```\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n```\n\n9.查看docker-compose 版本\n\n```\ndocker-compose --version\n```","slug":"运维/centos8安装docker","published":1,"updated":"2020-09-20T03:22:55.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblnm005g4tjebmlhaw4z","content":"<p><strong>背景简介</strong>：</p>\n<p>现在centos已经到了8 ，一直在接触容器方面，为了尝鲜，下载了CentOS8，并尝试安装docker&amp;docker-ce，不料竟然还报了个错（缺少依赖），故及时记录一下，方便其他同学。</p>\n<p><strong>安装步骤：</strong></p>\n<ol>\n<li>下载docker-ce的repo</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://download.docker.com/linux/centos/docker-ce.repo -o /etc/yum.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>安装依赖（这是相比centos7的关键步骤）</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install https://download.docker.com/linux/fedora/30/x86_64/stable/Packages/containerd.io-1.2.6-3.3.fc30.x86_64.rpm</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>安装docker-ce</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install docker-ce</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>启动docker</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start docker</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>开机启动docker</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable docker</span><br></pre></td></tr></table></figure>\n<p>6.安装docker-compose</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n<p>7.添加操作权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n<p>8.设置快捷</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure>\n<p>9.查看docker-compose 版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose --version</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><strong>背景简介</strong>：</p>\n<p>现在centos已经到了8 ，一直在接触容器方面，为了尝鲜，下载了CentOS8，并尝试安装docker&amp;docker-ce，不料竟然还报了个错（缺少依赖），故及时记录一下，方便其他同学。</p>\n<p><strong>安装步骤：</strong></p>\n<ol>\n<li>下载docker-ce的repo</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://download.docker.com/linux/centos/docker-ce.repo -o /etc/yum.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>安装依赖（这是相比centos7的关键步骤）</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install https://download.docker.com/linux/fedora/30/x86_64/stable/Packages/containerd.io-1.2.6-3.3.fc30.x86_64.rpm</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>安装docker-ce</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install docker-ce</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>启动docker</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start docker</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>开机启动docker</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable docker</span><br></pre></td></tr></table></figure>\n<p>6.安装docker-compose</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n<p>7.添加操作权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>\n<p>8.设置快捷</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure>\n<p>9.查看docker-compose 版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose --version</span><br></pre></td></tr></table></figure>"},{"title":"centos修改成阿里云仓库","date":"2020-09-28T08:00:00.000Z","_content":"\n# DNF/YUM源配置文件替换为阿里家的\n\n由于系统安装的包管理配置文件链接的国外的服务器，导致我们安装软件、升级内核和升级软件的时候会从国外的服务器下载相关文件。由于众所周知的原因，国外服务器的网速真的不敢恭维，所以我们要把他们替换为国内的服务器，这样安装和升级软件的速度就会提高，降低维护人员在等待上所花费的时间。\n因为阿里源文件里面已经包含了AppStream、Base、centosplus、Extras和PowerTools的相关内容，所以需要把这些文件改名为bak，不让系统执行。\n\n```bash\ncd /etc/yum.repos.d/\nmv /etc/yum.repos.d/CentOS-AppStream.repo /etc/yum.repos.d/CentOS-AppStream.repo.bak\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak\nmv /etc/yum.repos.d/CentOS-centosplus.repo /etc/yum.repos.d/CentOS-centosplus.repo.bak\nmv /etc/yum.repos.d/CentOS-Extras.repo /etc/yum.repos.d/CentOS-Extras.repo.bak\nmv /etc/yum.repos.d/CentOS-PowerTools.repo /etc/yum.repos.d/CentOS-PowerTools.repo.bak\n\n```\n\n做完以上修改以后，就可以下载新的阿里源文件了，因为默认没有装wget，我们可以用curl来执行以下命令：\n\n```bash\ncurl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo\n\n```\n\n如果有wget也可以执行以下命令\n\n```bash\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo\n\n```\n\n如果没有安装wget，运行这个命令会提示“bash: wget: 未找到命令”，那就用curl的那个命令来执行好了。或者你也可以先安装wget，很简单，只需要下面一个命令即可（前提是在将上面的文件改为“.bak”之前，如果已经改了，先改回去再执行下述命令）\n\n```bash\nyum -y install wget\n```","source":"_posts/运维/centos修改阿里云仓库.md","raw":"---\ntitle: centos修改成阿里云仓库\ndate: 2020-9-28 16:00:00\n---\n\n# DNF/YUM源配置文件替换为阿里家的\n\n由于系统安装的包管理配置文件链接的国外的服务器，导致我们安装软件、升级内核和升级软件的时候会从国外的服务器下载相关文件。由于众所周知的原因，国外服务器的网速真的不敢恭维，所以我们要把他们替换为国内的服务器，这样安装和升级软件的速度就会提高，降低维护人员在等待上所花费的时间。\n因为阿里源文件里面已经包含了AppStream、Base、centosplus、Extras和PowerTools的相关内容，所以需要把这些文件改名为bak，不让系统执行。\n\n```bash\ncd /etc/yum.repos.d/\nmv /etc/yum.repos.d/CentOS-AppStream.repo /etc/yum.repos.d/CentOS-AppStream.repo.bak\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak\nmv /etc/yum.repos.d/CentOS-centosplus.repo /etc/yum.repos.d/CentOS-centosplus.repo.bak\nmv /etc/yum.repos.d/CentOS-Extras.repo /etc/yum.repos.d/CentOS-Extras.repo.bak\nmv /etc/yum.repos.d/CentOS-PowerTools.repo /etc/yum.repos.d/CentOS-PowerTools.repo.bak\n\n```\n\n做完以上修改以后，就可以下载新的阿里源文件了，因为默认没有装wget，我们可以用curl来执行以下命令：\n\n```bash\ncurl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo\n\n```\n\n如果有wget也可以执行以下命令\n\n```bash\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo\n\n```\n\n如果没有安装wget，运行这个命令会提示“bash: wget: 未找到命令”，那就用curl的那个命令来执行好了。或者你也可以先安装wget，很简单，只需要下面一个命令即可（前提是在将上面的文件改为“.bak”之前，如果已经改了，先改回去再执行下述命令）\n\n```bash\nyum -y install wget\n```","slug":"运维/centos修改阿里云仓库","published":1,"updated":"2020-10-17T10:01:55.957Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblnn005i4tje2id9jjf7","content":"<h1 id=\"DNF-YUM源配置文件替换为阿里家的\"><a href=\"#DNF-YUM源配置文件替换为阿里家的\" class=\"headerlink\" title=\"DNF/YUM源配置文件替换为阿里家的\"></a>DNF/YUM源配置文件替换为阿里家的</h1><p>由于系统安装的包管理配置文件链接的国外的服务器，导致我们安装软件、升级内核和升级软件的时候会从国外的服务器下载相关文件。由于众所周知的原因，国外服务器的网速真的不敢恭维，所以我们要把他们替换为国内的服务器，这样安装和升级软件的速度就会提高，降低维护人员在等待上所花费的时间。<br>因为阿里源文件里面已经包含了AppStream、Base、centosplus、Extras和PowerTools的相关内容，所以需要把这些文件改名为bak，不让系统执行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/yum.repos.d/</span><br><span class=\"line\">mv /etc/yum.repos.d/CentOS-AppStream.repo /etc/yum.repos.d/CentOS-AppStream.repo.bak</span><br><span class=\"line\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</span><br><span class=\"line\">mv /etc/yum.repos.d/CentOS-centosplus.repo /etc/yum.repos.d/CentOS-centosplus.repo.bak</span><br><span class=\"line\">mv /etc/yum.repos.d/CentOS-Extras.repo /etc/yum.repos.d/CentOS-Extras.repo.bak</span><br><span class=\"line\">mv /etc/yum.repos.d/CentOS-PowerTools.repo /etc/yum.repos.d/CentOS-PowerTools.repo.bak</span><br></pre></td></tr></table></figure>\n<p>做完以上修改以后，就可以下载新的阿里源文件了，因为默认没有装wget，我们可以用curl来执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo</span><br></pre></td></tr></table></figure>\n<p>如果有wget也可以执行以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo</span><br></pre></td></tr></table></figure>\n<p>如果没有安装wget，运行这个命令会提示“bash: wget: 未找到命令”，那就用curl的那个命令来执行好了。或者你也可以先安装wget，很简单，只需要下面一个命令即可（前提是在将上面的文件改为“.bak”之前，如果已经改了，先改回去再执行下述命令）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install wget</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"DNF-YUM源配置文件替换为阿里家的\"><a href=\"#DNF-YUM源配置文件替换为阿里家的\" class=\"headerlink\" title=\"DNF/YUM源配置文件替换为阿里家的\"></a>DNF/YUM源配置文件替换为阿里家的</h1><p>由于系统安装的包管理配置文件链接的国外的服务器，导致我们安装软件、升级内核和升级软件的时候会从国外的服务器下载相关文件。由于众所周知的原因，国外服务器的网速真的不敢恭维，所以我们要把他们替换为国内的服务器，这样安装和升级软件的速度就会提高，降低维护人员在等待上所花费的时间。<br>因为阿里源文件里面已经包含了AppStream、Base、centosplus、Extras和PowerTools的相关内容，所以需要把这些文件改名为bak，不让系统执行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/yum.repos.d/</span><br><span class=\"line\">mv /etc/yum.repos.d/CentOS-AppStream.repo /etc/yum.repos.d/CentOS-AppStream.repo.bak</span><br><span class=\"line\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</span><br><span class=\"line\">mv /etc/yum.repos.d/CentOS-centosplus.repo /etc/yum.repos.d/CentOS-centosplus.repo.bak</span><br><span class=\"line\">mv /etc/yum.repos.d/CentOS-Extras.repo /etc/yum.repos.d/CentOS-Extras.repo.bak</span><br><span class=\"line\">mv /etc/yum.repos.d/CentOS-PowerTools.repo /etc/yum.repos.d/CentOS-PowerTools.repo.bak</span><br></pre></td></tr></table></figure>\n<p>做完以上修改以后，就可以下载新的阿里源文件了，因为默认没有装wget，我们可以用curl来执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo</span><br></pre></td></tr></table></figure>\n<p>如果有wget也可以执行以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo</span><br></pre></td></tr></table></figure>\n<p>如果没有安装wget，运行这个命令会提示“bash: wget: 未找到命令”，那就用curl的那个命令来执行好了。或者你也可以先安装wget，很简单，只需要下面一个命令即可（前提是在将上面的文件改为“.bak”之前，如果已经改了，先改回去再执行下述命令）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install wget</span><br></pre></td></tr></table></figure>"},{"title":"域名不能解析","date":"2020-05-28T07:00:00.000Z","_content":"\nDNS有问题，之前手动配置DNS导致，执行如下内容(8.8.8.8是谷歌提供的)\n\necho 'nameserver 8.8.8.8'>>/etc/resolv.conf\n\n也可使用阿里巴巴提供的DNS域名解析\n\nnameserver 223.5.5.5\n\nnameserver 223.6.6.6\n\n`阿里巴巴DNS介绍` <https://opsx.alibaba.com/service?lang=zh-CN>\n\n![img](https://img2018.cnblogs.com/blog/1114349/201910/1114349-20191026203755691-995379198.png)","source":"_posts/运维/centos出现dns不能解析的问题.md","raw":"---\ntitle: 域名不能解析\ndate: 2020-5-28 15:00:00\n---\n\nDNS有问题，之前手动配置DNS导致，执行如下内容(8.8.8.8是谷歌提供的)\n\necho 'nameserver 8.8.8.8'>>/etc/resolv.conf\n\n也可使用阿里巴巴提供的DNS域名解析\n\nnameserver 223.5.5.5\n\nnameserver 223.6.6.6\n\n`阿里巴巴DNS介绍` <https://opsx.alibaba.com/service?lang=zh-CN>\n\n![img](https://img2018.cnblogs.com/blog/1114349/201910/1114349-20191026203755691-995379198.png)","slug":"运维/centos出现dns不能解析的问题","published":1,"updated":"2020-10-17T10:01:55.957Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblnn005k4tjekvfozus9","content":"<p>DNS有问题，之前手动配置DNS导致，执行如下内容(8.8.8.8是谷歌提供的)</p>\n<p>echo ‘nameserver 8.8.8.8’&gt;&gt;/etc/resolv.conf</p>\n<p>也可使用阿里巴巴提供的DNS域名解析</p>\n<p>nameserver 223.5.5.5</p>\n<p>nameserver 223.6.6.6</p>\n<p><code>阿里巴巴DNS介绍</code> <a href=\"https://opsx.alibaba.com/service?lang=zh-CN\" target=\"_blank\" rel=\"noopener\">https://opsx.alibaba.com/service?lang=zh-CN</a></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img2018.cnblogs.com/blog/1114349/201910/1114349-20191026203755691-995379198.png\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>","site":{"data":{}},"excerpt":"","more":"<p>DNS有问题，之前手动配置DNS导致，执行如下内容(8.8.8.8是谷歌提供的)</p>\n<p>echo ‘nameserver 8.8.8.8’&gt;&gt;/etc/resolv.conf</p>\n<p>也可使用阿里巴巴提供的DNS域名解析</p>\n<p>nameserver 223.5.5.5</p>\n<p>nameserver 223.6.6.6</p>\n<p><code>阿里巴巴DNS介绍</code> <a href=\"https://opsx.alibaba.com/service?lang=zh-CN\" target=\"_blank\" rel=\"noopener\">https://opsx.alibaba.com/service?lang=zh-CN</a></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img2018.cnblogs.com/blog/1114349/201910/1114349-20191026203755691-995379198.png\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>"},{"title":"centos8扩容root分区","date":"2020-09-05T13:40:23.000Z","_content":"\n# 扩展磁盘\n\n最近使用虚拟机的方式弄了个centos8的虚拟机，体验最新centos系统，分配了127g的空间，由于实际需要，发现home空间有好几十g的空间，而我都是使用root用户，无需home空间，因此找到在centos8中把home空间调整到root的方法，这里跟网上找到的centos7是有差别的。\n\n步骤：\n\n1. 使用usb系统进入修复\n2. 使用df-h查看空间使用情况，备份home\n3. 卸载home文件系统\n4. 删除/home所在的lv\n5. 扩展/root所在的lv\n6. 扩展/root文件系统\n7. 重新创建home lv并挂载home\n8. 查看最终调整结果\n\n## 使用df-lh查看空间使用情况，备份home\n\n首先登陆ssh，使用df -lh查看空间使用情况\n\n```bash\ndf -lh\n```\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gireyleo0zj30kf07cjsm.jpg)\n\nroot已经不够了，而vps也就自己一个人用，根本不需要用到home，home设置1个g就够了，其余的都给root，这样就可以给root多出来73个g的空间。 这因为一开始没有截图，所以看到的是后面的1g大小，一开始home是74g大小的。 备份home文件到/tmp目录\n\n```bash\ntar cvf  /tmp/home.tar /home\n# zip -r /tmp/home.zip /home\n```\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gireyr28toj30go0c5dh3.jpg)\n\n## 卸载home文件系统\n\n```bash\nfuser -km /home/\numount /home\n```\n\n解除home目录的占用，卸载home目录\n\n## 删除/home所在的lv\n\n这一步centos8有很大不同，因为centos7中目录是/dev/mapper/centos-home,而在centos8中为 /dev/mapper/cl-home，因此注意卸载设备名称\n\n```bash\nlvremove /dev/mapper/cl-home\n```\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1girez61asuj30nf01xmxc.jpg)\n\n## 扩展/root所在的lv\n\n扩展root空间lv\n\n```bash\nlvextend -L +73G /dev/mapper/cl-root  \n```\n\n## 扩展/root文件系统\n\n这一步是真正增加root空间，centos7和centos8具有非常大的差别，centos7中是使用xfs_growfs /dev/mapper/centos-root，按逻辑centos8就应该是 xfs_growfs /dev/mapper/cl-root，但是结果就是\n\n```bash\nxfs_growfs /dev/mapper/cl-root \n```\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1girezkj110j30li01gdfw.jpg)\n\n经过摸索发现应该直接使用/就可以了\n\n```bash\nxfs_growfs / \n```\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1girf0736ygj30pp0810ub.jpg)\n\n## 重新创建home lv并挂载home\n\n创建1g空间的home\n\n```bash\nlvcreate -L 1G -n home cl\n```\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1girf0kmo2hj30qq02rq39.jpg)文件系统类型设置\n\n```bash\nmkfs.xfs /dev/cl/home \n```\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1girf0uu0ecj30pa07dq4c.jpg)\n\n挂载到home目录\n\n```bash\nmount /dev/cl/home /home\n```\n\n恢复home目录下文件\n\n```bash\nmv /tmp/home.tar /home\ncd /home\ntar xvf  home.tar\nmv home/* .\nrm -rf home*\n```\n\n## 查看最终调整结果\n\n查看各分区大小\n\n```bash\ndf -lh\n```\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1girf13w9foj30jt06qjsf.jpg)\n\n## 总结：\n\n本文主要介绍了在centos8系统下调整各分区大小，这里就是/home分区和/root分区，介绍在centos7和centos8下参数差异。熟悉linux系统下的文件系统的分区调整。对于刚装系统分区不合适需要调整centos各分区大小的用户起到指导作用，有疑问再邮件联系吧。\n\n\n\n# lvm修改根分区大小\n\n- 参考：\n  1. 减小lvm根分区容量: <http://kwokchivu.blog.51cto.com/1128937/724128>\n  2. CentOS 5 LVM逻辑卷管理: <http://sunshyfangtian.blog.51cto.com/1405751/860018>\n\n## 目标\n\nhome、根各为50GB空间，根空间不足，需缩小home至10GB、扩大根为90GB。\n\n```\nlvm> lvscan\n  ACTIVE            '/dev/vg_db/lv_root' [50.00 GiB] inherit\n  ACTIVE            '/dev/vg_db/lv_home' [50.00 GiB] inherit\n  ACTIVE            '/dev/vg_db/lv_swap' [9.83 GiB] inherit\n```\n\n## 缩小home、增大根分区\n\n### 进入rescue模式\n\n```\n增大root分区是否可以在线完成、不用进rescue状态？找机会试试...\n```\n\n从Linux安装光盘启动进入rescue模式；\n\n选择相关的语言，键盘模式，当系统提示启用网络设备时，选择“NO”；\n\n然后在提示允许rescue模式挂载本地Linux系统到/mnt/sysimage下时选择“Skip”，文件系统必须不被挂载才可以对/分区减小容量操作。\n\n最后系统会提示选择进入shell终端还是reboot机器，选择进入shell终端。\n\n### 激活分区\n\n输入lvm命令，进入lvm界面，依次输入pvscan、vgscan、lvscan三个命令扫描pv、vg、lv相关信息。\n\n然后输入lvchange -ay /dev/vg_db/lv_root（上文提到的/分区名称）此命令是激活/分区所在的逻辑卷，输入 quit返回到bash shell界面。\n\n```\nlvchange -ay /dev/vg_db/lv_home\nlvchange -ay /dev/vg_db/lv_root\n```\n\n### 缩小home分区\n\n- 先检查下分区: e2fsck -f /dev/vg_db/lv_home\n\n- 缩小文件系统大小：resize2fs /dev/vg_db/lv_home 10G\n\n- 缩小逻辑卷\n\n  - 输入lvm命令进入lvm模式\n  - 缩小逻辑卷：lvreduce -L 10G /dev/vg_db/lv_home\n  - 系统会询问是否缩小逻辑卷，输入 y 确定。\n\n- 查看修改结果: vgdisplay，lvdisplay\n\n  ```\n  减小LVM中的文件系统必须离线操作(处于umount装态)，要减小文件系统和LV:\n      # Unmount相应的文件系统\n      # 运行磁盘检查确保卷的完整\n      # 减小文件系统\n      # 减小LV\n  ```\n\n### 扩大根分区\n\n- 先检查下分区: e2fsck -f /dev/vg_db/lv_root\n- 扩大逻辑卷:\n  - 输入lvm命令进入lvm模式\n  - 扩大逻辑卷：lvresize -L +40G /dev/vg_db/lv_root\n- 更改文件系统大小\n  - resize2fs -p /dev/vg_db/lv_root\n- 查看修改结果: lvscan\n\n## 其他操作\n\n### 修改swap卷大小\n\n- 取消激活swap空间: swapoff\n- 修改swap分区大小: lvresize -L 4G /dev/vg_db/lv_swap\n- 重新格区化: mkswap -f /dev/vb_db/lv_swap\n- 激活swap空间: swapon\n\n### 新建逻辑卷lv_develop\n\n- 创建逻辑卷 : lvcreate -L 2.8G -n lv_develop /dev/vb_db\n- 创建文件系统 : mkfs.ext3 /dev/vg_db/lv_develop\n\n### 增加物理盘\n\n- fdisk分区，并将分区类型为0×8e(Linux LVM)\n- 创建物理卷PV: pvcreate /dev/hdb1\n- 创建卷组VG: vgcreate vgtest /dev/hdb1\n- 添加PV到VG: vgextend\n- 创建逻辑卷LV: lvcreate -L 6000M -n mysql vgtest\n- 创建文件系统: mkfs -t ext3 /dev/vgtest/mysql\n- 建立新分区卷标: tune2fs –L /mysql /dev/vgtest/mysql\n- 加载新分区: mount –t ext3 /dev/vgtest/mysql /mysql\n- 卸载卷的顺序:\n  1. umount\n  2. 卸载逻辑卷:lvremove LVDEVICE\n  3. 卸载卷组:vgremove VGNAME\n  4. 卸载物理卷:pvremove PVDEVICE\n\n# LVM分区在线扩容\n\n2011-12-19 15:24:16\n\n<http://share.blog.51cto.com/278008/745479>\n\n今天对三台服务器的LV分区进行了一次扩容。本文有点标题党嫌疑，因为只有一台服务器是在线扩容，其它两台都是先卸载再扩容的。\n\n在线扩容的这台服务器，LV分区格式为xfs，原大小1.2TB。增加了一块硬盘，大小为1.8TB。\n\n```\n`fdisk` `/dev/cciss/c0d1`                              `# 创建分区，并指定分区类型为LVM (8e) ``pvcreate ``/dev/cciss/c0d1p1`                         `# 创建pv``vgextend VolGroup00 ``/dev/cciss/c0d1p1`              `# 添加新创建的pv到原有vg``lvextend -L +1.8T ``/dev/mapper/VolGroup00-LogVol05`  `# 在线扩容指定lv分区``xfs_growfs ``/dev/mapper/VolGroup00-LogVol05`         `# 使扩容生效。注意xfs文件系统的生效命令！ `\n```\n\n其它两台服务器也是新增了一个1.8TB的硬盘，要扩容的LV分区格式为ext3。之所以没有进行在线扩容，是因为没有找到ext2online命令；后来发现，resize2fs也是支持在线扩容的！\n\n```\n`lvextend -l +100%FREE ``/dev/mapper/VolGroup00-LogVol05``umount` `-l ``/dev/mapper/VolGroup00-LogVol05``e2fsck -f ``/dev/mapper/VolGroup00-LogVol05`    `# 过程比较长 ``resize2fs ``/dev/mapper/VolGroup00-LogVol05`    `# 也要几分钟时间 ``mount` `/dev/mapper/VolGroup00-LogVol05` `/hdfs`\n```\n\n虽然resize2fs可以在线使用，但是对在线lv分区执行e2fsck有点风险！","source":"_posts/运维/centos8扩容root分区.md","raw":"---\ntitle: centos8扩容root分区\ndate: 2020-9-05 21:40:23\ntags:\n- linux\n---\n\n# 扩展磁盘\n\n最近使用虚拟机的方式弄了个centos8的虚拟机，体验最新centos系统，分配了127g的空间，由于实际需要，发现home空间有好几十g的空间，而我都是使用root用户，无需home空间，因此找到在centos8中把home空间调整到root的方法，这里跟网上找到的centos7是有差别的。\n\n步骤：\n\n1. 使用usb系统进入修复\n2. 使用df-h查看空间使用情况，备份home\n3. 卸载home文件系统\n4. 删除/home所在的lv\n5. 扩展/root所在的lv\n6. 扩展/root文件系统\n7. 重新创建home lv并挂载home\n8. 查看最终调整结果\n\n## 使用df-lh查看空间使用情况，备份home\n\n首先登陆ssh，使用df -lh查看空间使用情况\n\n```bash\ndf -lh\n```\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gireyleo0zj30kf07cjsm.jpg)\n\nroot已经不够了，而vps也就自己一个人用，根本不需要用到home，home设置1个g就够了，其余的都给root，这样就可以给root多出来73个g的空间。 这因为一开始没有截图，所以看到的是后面的1g大小，一开始home是74g大小的。 备份home文件到/tmp目录\n\n```bash\ntar cvf  /tmp/home.tar /home\n# zip -r /tmp/home.zip /home\n```\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1gireyr28toj30go0c5dh3.jpg)\n\n## 卸载home文件系统\n\n```bash\nfuser -km /home/\numount /home\n```\n\n解除home目录的占用，卸载home目录\n\n## 删除/home所在的lv\n\n这一步centos8有很大不同，因为centos7中目录是/dev/mapper/centos-home,而在centos8中为 /dev/mapper/cl-home，因此注意卸载设备名称\n\n```bash\nlvremove /dev/mapper/cl-home\n```\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1girez61asuj30nf01xmxc.jpg)\n\n## 扩展/root所在的lv\n\n扩展root空间lv\n\n```bash\nlvextend -L +73G /dev/mapper/cl-root  \n```\n\n## 扩展/root文件系统\n\n这一步是真正增加root空间，centos7和centos8具有非常大的差别，centos7中是使用xfs_growfs /dev/mapper/centos-root，按逻辑centos8就应该是 xfs_growfs /dev/mapper/cl-root，但是结果就是\n\n```bash\nxfs_growfs /dev/mapper/cl-root \n```\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1girezkj110j30li01gdfw.jpg)\n\n经过摸索发现应该直接使用/就可以了\n\n```bash\nxfs_growfs / \n```\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1girf0736ygj30pp0810ub.jpg)\n\n## 重新创建home lv并挂载home\n\n创建1g空间的home\n\n```bash\nlvcreate -L 1G -n home cl\n```\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1girf0kmo2hj30qq02rq39.jpg)文件系统类型设置\n\n```bash\nmkfs.xfs /dev/cl/home \n```\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1girf0uu0ecj30pa07dq4c.jpg)\n\n挂载到home目录\n\n```bash\nmount /dev/cl/home /home\n```\n\n恢复home目录下文件\n\n```bash\nmv /tmp/home.tar /home\ncd /home\ntar xvf  home.tar\nmv home/* .\nrm -rf home*\n```\n\n## 查看最终调整结果\n\n查看各分区大小\n\n```bash\ndf -lh\n```\n\n![](https://tva1.sinaimg.cn/large/007S8ZIlgy1girf13w9foj30jt06qjsf.jpg)\n\n## 总结：\n\n本文主要介绍了在centos8系统下调整各分区大小，这里就是/home分区和/root分区，介绍在centos7和centos8下参数差异。熟悉linux系统下的文件系统的分区调整。对于刚装系统分区不合适需要调整centos各分区大小的用户起到指导作用，有疑问再邮件联系吧。\n\n\n\n# lvm修改根分区大小\n\n- 参考：\n  1. 减小lvm根分区容量: <http://kwokchivu.blog.51cto.com/1128937/724128>\n  2. CentOS 5 LVM逻辑卷管理: <http://sunshyfangtian.blog.51cto.com/1405751/860018>\n\n## 目标\n\nhome、根各为50GB空间，根空间不足，需缩小home至10GB、扩大根为90GB。\n\n```\nlvm> lvscan\n  ACTIVE            '/dev/vg_db/lv_root' [50.00 GiB] inherit\n  ACTIVE            '/dev/vg_db/lv_home' [50.00 GiB] inherit\n  ACTIVE            '/dev/vg_db/lv_swap' [9.83 GiB] inherit\n```\n\n## 缩小home、增大根分区\n\n### 进入rescue模式\n\n```\n增大root分区是否可以在线完成、不用进rescue状态？找机会试试...\n```\n\n从Linux安装光盘启动进入rescue模式；\n\n选择相关的语言，键盘模式，当系统提示启用网络设备时，选择“NO”；\n\n然后在提示允许rescue模式挂载本地Linux系统到/mnt/sysimage下时选择“Skip”，文件系统必须不被挂载才可以对/分区减小容量操作。\n\n最后系统会提示选择进入shell终端还是reboot机器，选择进入shell终端。\n\n### 激活分区\n\n输入lvm命令，进入lvm界面，依次输入pvscan、vgscan、lvscan三个命令扫描pv、vg、lv相关信息。\n\n然后输入lvchange -ay /dev/vg_db/lv_root（上文提到的/分区名称）此命令是激活/分区所在的逻辑卷，输入 quit返回到bash shell界面。\n\n```\nlvchange -ay /dev/vg_db/lv_home\nlvchange -ay /dev/vg_db/lv_root\n```\n\n### 缩小home分区\n\n- 先检查下分区: e2fsck -f /dev/vg_db/lv_home\n\n- 缩小文件系统大小：resize2fs /dev/vg_db/lv_home 10G\n\n- 缩小逻辑卷\n\n  - 输入lvm命令进入lvm模式\n  - 缩小逻辑卷：lvreduce -L 10G /dev/vg_db/lv_home\n  - 系统会询问是否缩小逻辑卷，输入 y 确定。\n\n- 查看修改结果: vgdisplay，lvdisplay\n\n  ```\n  减小LVM中的文件系统必须离线操作(处于umount装态)，要减小文件系统和LV:\n      # Unmount相应的文件系统\n      # 运行磁盘检查确保卷的完整\n      # 减小文件系统\n      # 减小LV\n  ```\n\n### 扩大根分区\n\n- 先检查下分区: e2fsck -f /dev/vg_db/lv_root\n- 扩大逻辑卷:\n  - 输入lvm命令进入lvm模式\n  - 扩大逻辑卷：lvresize -L +40G /dev/vg_db/lv_root\n- 更改文件系统大小\n  - resize2fs -p /dev/vg_db/lv_root\n- 查看修改结果: lvscan\n\n## 其他操作\n\n### 修改swap卷大小\n\n- 取消激活swap空间: swapoff\n- 修改swap分区大小: lvresize -L 4G /dev/vg_db/lv_swap\n- 重新格区化: mkswap -f /dev/vb_db/lv_swap\n- 激活swap空间: swapon\n\n### 新建逻辑卷lv_develop\n\n- 创建逻辑卷 : lvcreate -L 2.8G -n lv_develop /dev/vb_db\n- 创建文件系统 : mkfs.ext3 /dev/vg_db/lv_develop\n\n### 增加物理盘\n\n- fdisk分区，并将分区类型为0×8e(Linux LVM)\n- 创建物理卷PV: pvcreate /dev/hdb1\n- 创建卷组VG: vgcreate vgtest /dev/hdb1\n- 添加PV到VG: vgextend\n- 创建逻辑卷LV: lvcreate -L 6000M -n mysql vgtest\n- 创建文件系统: mkfs -t ext3 /dev/vgtest/mysql\n- 建立新分区卷标: tune2fs –L /mysql /dev/vgtest/mysql\n- 加载新分区: mount –t ext3 /dev/vgtest/mysql /mysql\n- 卸载卷的顺序:\n  1. umount\n  2. 卸载逻辑卷:lvremove LVDEVICE\n  3. 卸载卷组:vgremove VGNAME\n  4. 卸载物理卷:pvremove PVDEVICE\n\n# LVM分区在线扩容\n\n2011-12-19 15:24:16\n\n<http://share.blog.51cto.com/278008/745479>\n\n今天对三台服务器的LV分区进行了一次扩容。本文有点标题党嫌疑，因为只有一台服务器是在线扩容，其它两台都是先卸载再扩容的。\n\n在线扩容的这台服务器，LV分区格式为xfs，原大小1.2TB。增加了一块硬盘，大小为1.8TB。\n\n```\n`fdisk` `/dev/cciss/c0d1`                              `# 创建分区，并指定分区类型为LVM (8e) ``pvcreate ``/dev/cciss/c0d1p1`                         `# 创建pv``vgextend VolGroup00 ``/dev/cciss/c0d1p1`              `# 添加新创建的pv到原有vg``lvextend -L +1.8T ``/dev/mapper/VolGroup00-LogVol05`  `# 在线扩容指定lv分区``xfs_growfs ``/dev/mapper/VolGroup00-LogVol05`         `# 使扩容生效。注意xfs文件系统的生效命令！ `\n```\n\n其它两台服务器也是新增了一个1.8TB的硬盘，要扩容的LV分区格式为ext3。之所以没有进行在线扩容，是因为没有找到ext2online命令；后来发现，resize2fs也是支持在线扩容的！\n\n```\n`lvextend -l +100%FREE ``/dev/mapper/VolGroup00-LogVol05``umount` `-l ``/dev/mapper/VolGroup00-LogVol05``e2fsck -f ``/dev/mapper/VolGroup00-LogVol05`    `# 过程比较长 ``resize2fs ``/dev/mapper/VolGroup00-LogVol05`    `# 也要几分钟时间 ``mount` `/dev/mapper/VolGroup00-LogVol05` `/hdfs`\n```\n\n虽然resize2fs可以在线使用，但是对在线lv分区执行e2fsck有点风险！","slug":"运维/centos8扩容root分区","published":1,"updated":"2020-09-20T03:22:55.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblno005m4tjehste96zg","content":"<h1 id=\"扩展磁盘\"><a href=\"#扩展磁盘\" class=\"headerlink\" title=\"扩展磁盘\"></a>扩展磁盘</h1><p>最近使用虚拟机的方式弄了个centos8的虚拟机，体验最新centos系统，分配了127g的空间，由于实际需要，发现home空间有好几十g的空间，而我都是使用root用户，无需home空间，因此找到在centos8中把home空间调整到root的方法，这里跟网上找到的centos7是有差别的。</p>\n<p>步骤：</p>\n<ol>\n<li>使用usb系统进入修复</li>\n<li>使用df-h查看空间使用情况，备份home</li>\n<li>卸载home文件系统</li>\n<li>删除/home所在的lv</li>\n<li>扩展/root所在的lv</li>\n<li>扩展/root文件系统</li>\n<li>重新创建home lv并挂载home</li>\n<li>查看最终调整结果</li>\n</ol>\n<h2 id=\"使用df-lh查看空间使用情况，备份home\"><a href=\"#使用df-lh查看空间使用情况，备份home\" class=\"headerlink\" title=\"使用df-lh查看空间使用情况，备份home\"></a>使用df-lh查看空间使用情况，备份home</h2><p>首先登陆ssh，使用df -lh查看空间使用情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -lh</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gireyleo0zj30kf07cjsm.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>root已经不够了，而vps也就自己一个人用，根本不需要用到home，home设置1个g就够了，其余的都给root，这样就可以给root多出来73个g的空间。 这因为一开始没有截图，所以看到的是后面的1g大小，一开始home是74g大小的。 备份home文件到/tmp目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar cvf  /tmp/home.tar /home</span><br><span class=\"line\"><span class=\"comment\"># zip -r /tmp/home.zip /home</span></span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gireyr28toj30go0c5dh3.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"卸载home文件系统\"><a href=\"#卸载home文件系统\" class=\"headerlink\" title=\"卸载home文件系统\"></a>卸载home文件系统</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fuser -km /home/</span><br><span class=\"line\">umount /home</span><br></pre></td></tr></table></figure>\n<p>解除home目录的占用，卸载home目录</p>\n<h2 id=\"删除-home所在的lv\"><a href=\"#删除-home所在的lv\" class=\"headerlink\" title=\"删除/home所在的lv\"></a>删除/home所在的lv</h2><p>这一步centos8有很大不同，因为centos7中目录是/dev/mapper/centos-home,而在centos8中为 /dev/mapper/cl-home，因此注意卸载设备名称</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvremove /dev/mapper/cl-home</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girez61asuj30nf01xmxc.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"扩展-root所在的lv\"><a href=\"#扩展-root所在的lv\" class=\"headerlink\" title=\"扩展/root所在的lv\"></a>扩展/root所在的lv</h2><p>扩展root空间lv</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvextend -L +73G /dev/mapper/cl-root</span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展-root文件系统\"><a href=\"#扩展-root文件系统\" class=\"headerlink\" title=\"扩展/root文件系统\"></a>扩展/root文件系统</h2><p>这一步是真正增加root空间，centos7和centos8具有非常大的差别，centos7中是使用xfs_growfs /dev/mapper/centos-root，按逻辑centos8就应该是 xfs_growfs /dev/mapper/cl-root，但是结果就是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xfs_growfs /dev/mapper/cl-root</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girezkj110j30li01gdfw.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>经过摸索发现应该直接使用/就可以了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xfs_growfs /</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girf0736ygj30pp0810ub.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"重新创建home-lv并挂载home\"><a href=\"#重新创建home-lv并挂载home\" class=\"headerlink\" title=\"重新创建home lv并挂载home\"></a>重新创建home lv并挂载home</h2><p>创建1g空间的home</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvcreate -L 1G -n home cl</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girf0kmo2hj30qq02rq39.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>文件系统类型设置<br><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.xfs /dev/cl/home</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girf0uu0ecj30pa07dq4c.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>挂载到home目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount /dev/cl/home /home</span><br></pre></td></tr></table></figure>\n<p>恢复home目录下文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv /tmp/home.tar /home</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /home</span><br><span class=\"line\">tar xvf  home.tar</span><br><span class=\"line\">mv home/* .</span><br><span class=\"line\">rm -rf home*</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看最终调整结果\"><a href=\"#查看最终调整结果\" class=\"headerlink\" title=\"查看最终调整结果\"></a>查看最终调整结果</h2><p>查看各分区大小</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -lh</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girf13w9foj30jt06qjsf.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><p>本文主要介绍了在centos8系统下调整各分区大小，这里就是/home分区和/root分区，介绍在centos7和centos8下参数差异。熟悉linux系统下的文件系统的分区调整。对于刚装系统分区不合适需要调整centos各分区大小的用户起到指导作用，有疑问再邮件联系吧。</p>\n<h1 id=\"lvm修改根分区大小\"><a href=\"#lvm修改根分区大小\" class=\"headerlink\" title=\"lvm修改根分区大小\"></a>lvm修改根分区大小</h1><ul>\n<li>参考：<ol>\n<li>减小lvm根分区容量: <a href=\"http://kwokchivu.blog.51cto.com/1128937/724128\" target=\"_blank\" rel=\"noopener\">http://kwokchivu.blog.51cto.com/1128937/724128</a></li>\n<li>CentOS 5 LVM逻辑卷管理: <a href=\"http://sunshyfangtian.blog.51cto.com/1405751/860018\" target=\"_blank\" rel=\"noopener\">http://sunshyfangtian.blog.51cto.com/1405751/860018</a></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>home、根各为50GB空间，根空间不足，需缩小home至10GB、扩大根为90GB。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvm&gt; lvscan</span><br><span class=\"line\">  ACTIVE            &apos;/dev/vg_db/lv_root&apos; [50.00 GiB] inherit</span><br><span class=\"line\">  ACTIVE            &apos;/dev/vg_db/lv_home&apos; [50.00 GiB] inherit</span><br><span class=\"line\">  ACTIVE            &apos;/dev/vg_db/lv_swap&apos; [9.83 GiB] inherit</span><br></pre></td></tr></table></figure>\n<h2 id=\"缩小home、增大根分区\"><a href=\"#缩小home、增大根分区\" class=\"headerlink\" title=\"缩小home、增大根分区\"></a>缩小home、增大根分区</h2><h3 id=\"进入rescue模式\"><a href=\"#进入rescue模式\" class=\"headerlink\" title=\"进入rescue模式\"></a>进入rescue模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">增大root分区是否可以在线完成、不用进rescue状态？找机会试试...</span><br></pre></td></tr></table></figure>\n<p>从Linux安装光盘启动进入rescue模式；</p>\n<p>选择相关的语言，键盘模式，当系统提示启用网络设备时，选择“NO”；</p>\n<p>然后在提示允许rescue模式挂载本地Linux系统到/mnt/sysimage下时选择“Skip”，文件系统必须不被挂载才可以对/分区减小容量操作。</p>\n<p>最后系统会提示选择进入shell终端还是reboot机器，选择进入shell终端。</p>\n<h3 id=\"激活分区\"><a href=\"#激活分区\" class=\"headerlink\" title=\"激活分区\"></a>激活分区</h3><p>输入lvm命令，进入lvm界面，依次输入pvscan、vgscan、lvscan三个命令扫描pv、vg、lv相关信息。</p>\n<p>然后输入lvchange -ay /dev/vg_db/lv_root（上文提到的/分区名称）此命令是激活/分区所在的逻辑卷，输入 quit返回到bash shell界面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvchange -ay /dev/vg_db/lv_home</span><br><span class=\"line\">lvchange -ay /dev/vg_db/lv_root</span><br></pre></td></tr></table></figure>\n<h3 id=\"缩小home分区\"><a href=\"#缩小home分区\" class=\"headerlink\" title=\"缩小home分区\"></a>缩小home分区</h3><ul>\n<li><p>先检查下分区: e2fsck -f /dev/vg_db/lv_home</p>\n</li>\n<li><p>缩小文件系统大小：resize2fs /dev/vg_db/lv_home 10G</p>\n</li>\n<li><p>缩小逻辑卷</p>\n<ul>\n<li>输入lvm命令进入lvm模式</li>\n<li>缩小逻辑卷：lvreduce -L 10G /dev/vg_db/lv_home</li>\n<li>系统会询问是否缩小逻辑卷，输入 y 确定。</li>\n</ul>\n</li>\n<li><p>查看修改结果: vgdisplay，lvdisplay</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">减小LVM中的文件系统必须离线操作(处于umount装态)，要减小文件系统和LV:</span><br><span class=\"line\">    # Unmount相应的文件系统</span><br><span class=\"line\">    # 运行磁盘检查确保卷的完整</span><br><span class=\"line\">    # 减小文件系统</span><br><span class=\"line\">    # 减小LV</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"扩大根分区\"><a href=\"#扩大根分区\" class=\"headerlink\" title=\"扩大根分区\"></a>扩大根分区</h3><ul>\n<li>先检查下分区: e2fsck -f /dev/vg_db/lv_root</li>\n<li>扩大逻辑卷:<ul>\n<li>输入lvm命令进入lvm模式</li>\n<li>扩大逻辑卷：lvresize -L +40G /dev/vg_db/lv_root</li>\n</ul>\n</li>\n<li>更改文件系统大小<ul>\n<li>resize2fs -p /dev/vg_db/lv_root</li>\n</ul>\n</li>\n<li>查看修改结果: lvscan</li>\n</ul>\n<h2 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h2><h3 id=\"修改swap卷大小\"><a href=\"#修改swap卷大小\" class=\"headerlink\" title=\"修改swap卷大小\"></a>修改swap卷大小</h3><ul>\n<li>取消激活swap空间: swapoff</li>\n<li>修改swap分区大小: lvresize -L 4G /dev/vg_db/lv_swap</li>\n<li>重新格区化: mkswap -f /dev/vb_db/lv_swap</li>\n<li>激活swap空间: swapon</li>\n</ul>\n<h3 id=\"新建逻辑卷lv-develop\"><a href=\"#新建逻辑卷lv-develop\" class=\"headerlink\" title=\"新建逻辑卷lv_develop\"></a>新建逻辑卷lv_develop</h3><ul>\n<li>创建逻辑卷 : lvcreate -L 2.8G -n lv_develop /dev/vb_db</li>\n<li>创建文件系统 : mkfs.ext3 /dev/vg_db/lv_develop</li>\n</ul>\n<h3 id=\"增加物理盘\"><a href=\"#增加物理盘\" class=\"headerlink\" title=\"增加物理盘\"></a>增加物理盘</h3><ul>\n<li>fdisk分区，并将分区类型为0×8e(Linux LVM)</li>\n<li>创建物理卷PV: pvcreate /dev/hdb1</li>\n<li>创建卷组VG: vgcreate vgtest /dev/hdb1</li>\n<li>添加PV到VG: vgextend</li>\n<li>创建逻辑卷LV: lvcreate -L 6000M -n mysql vgtest</li>\n<li>创建文件系统: mkfs -t ext3 /dev/vgtest/mysql</li>\n<li>建立新分区卷标: tune2fs –L /mysql /dev/vgtest/mysql</li>\n<li>加载新分区: mount –t ext3 /dev/vgtest/mysql /mysql</li>\n<li>卸载卷的顺序:<ol>\n<li>umount</li>\n<li>卸载逻辑卷:lvremove LVDEVICE</li>\n<li>卸载卷组:vgremove VGNAME</li>\n<li>卸载物理卷:pvremove PVDEVICE</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"LVM分区在线扩容\"><a href=\"#LVM分区在线扩容\" class=\"headerlink\" title=\"LVM分区在线扩容\"></a>LVM分区在线扩容</h1><p>2011-12-19 15:24:16</p>\n<p><a href=\"http://share.blog.51cto.com/278008/745479\" target=\"_blank\" rel=\"noopener\">http://share.blog.51cto.com/278008/745479</a></p>\n<p>今天对三台服务器的LV分区进行了一次扩容。本文有点标题党嫌疑，因为只有一台服务器是在线扩容，其它两台都是先卸载再扩容的。</p>\n<p>在线扩容的这台服务器，LV分区格式为xfs，原大小1.2TB。增加了一块硬盘，大小为1.8TB。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`fdisk` `/dev/cciss/c0d1`                              `# 创建分区，并指定分区类型为LVM (8e) ``pvcreate ``/dev/cciss/c0d1p1`                         `# 创建pv``vgextend VolGroup00 ``/dev/cciss/c0d1p1`              `# 添加新创建的pv到原有vg``lvextend -L +1.8T ``/dev/mapper/VolGroup00-LogVol05`  `# 在线扩容指定lv分区``xfs_growfs ``/dev/mapper/VolGroup00-LogVol05`         `# 使扩容生效。注意xfs文件系统的生效命令！ `</span><br></pre></td></tr></table></figure>\n<p>其它两台服务器也是新增了一个1.8TB的硬盘，要扩容的LV分区格式为ext3。之所以没有进行在线扩容，是因为没有找到ext2online命令；后来发现，resize2fs也是支持在线扩容的！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`lvextend -l +100%FREE ``/dev/mapper/VolGroup00-LogVol05``umount` `-l ``/dev/mapper/VolGroup00-LogVol05``e2fsck -f ``/dev/mapper/VolGroup00-LogVol05`    `# 过程比较长 ``resize2fs ``/dev/mapper/VolGroup00-LogVol05`    `# 也要几分钟时间 ``mount` `/dev/mapper/VolGroup00-LogVol05` `/hdfs`</span><br></pre></td></tr></table></figure>\n<p>虽然resize2fs可以在线使用，但是对在线lv分区执行e2fsck有点风险！</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"扩展磁盘\"><a href=\"#扩展磁盘\" class=\"headerlink\" title=\"扩展磁盘\"></a>扩展磁盘</h1><p>最近使用虚拟机的方式弄了个centos8的虚拟机，体验最新centos系统，分配了127g的空间，由于实际需要，发现home空间有好几十g的空间，而我都是使用root用户，无需home空间，因此找到在centos8中把home空间调整到root的方法，这里跟网上找到的centos7是有差别的。</p>\n<p>步骤：</p>\n<ol>\n<li>使用usb系统进入修复</li>\n<li>使用df-h查看空间使用情况，备份home</li>\n<li>卸载home文件系统</li>\n<li>删除/home所在的lv</li>\n<li>扩展/root所在的lv</li>\n<li>扩展/root文件系统</li>\n<li>重新创建home lv并挂载home</li>\n<li>查看最终调整结果</li>\n</ol>\n<h2 id=\"使用df-lh查看空间使用情况，备份home\"><a href=\"#使用df-lh查看空间使用情况，备份home\" class=\"headerlink\" title=\"使用df-lh查看空间使用情况，备份home\"></a>使用df-lh查看空间使用情况，备份home</h2><p>首先登陆ssh，使用df -lh查看空间使用情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -lh</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gireyleo0zj30kf07cjsm.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>root已经不够了，而vps也就自己一个人用，根本不需要用到home，home设置1个g就够了，其余的都给root，这样就可以给root多出来73个g的空间。 这因为一开始没有截图，所以看到的是后面的1g大小，一开始home是74g大小的。 备份home文件到/tmp目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar cvf  /tmp/home.tar /home</span><br><span class=\"line\"><span class=\"comment\"># zip -r /tmp/home.zip /home</span></span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gireyr28toj30go0c5dh3.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"卸载home文件系统\"><a href=\"#卸载home文件系统\" class=\"headerlink\" title=\"卸载home文件系统\"></a>卸载home文件系统</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fuser -km /home/</span><br><span class=\"line\">umount /home</span><br></pre></td></tr></table></figure>\n<p>解除home目录的占用，卸载home目录</p>\n<h2 id=\"删除-home所在的lv\"><a href=\"#删除-home所在的lv\" class=\"headerlink\" title=\"删除/home所在的lv\"></a>删除/home所在的lv</h2><p>这一步centos8有很大不同，因为centos7中目录是/dev/mapper/centos-home,而在centos8中为 /dev/mapper/cl-home，因此注意卸载设备名称</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvremove /dev/mapper/cl-home</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girez61asuj30nf01xmxc.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"扩展-root所在的lv\"><a href=\"#扩展-root所在的lv\" class=\"headerlink\" title=\"扩展/root所在的lv\"></a>扩展/root所在的lv</h2><p>扩展root空间lv</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvextend -L +73G /dev/mapper/cl-root</span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展-root文件系统\"><a href=\"#扩展-root文件系统\" class=\"headerlink\" title=\"扩展/root文件系统\"></a>扩展/root文件系统</h2><p>这一步是真正增加root空间，centos7和centos8具有非常大的差别，centos7中是使用xfs_growfs /dev/mapper/centos-root，按逻辑centos8就应该是 xfs_growfs /dev/mapper/cl-root，但是结果就是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xfs_growfs /dev/mapper/cl-root</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girezkj110j30li01gdfw.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>经过摸索发现应该直接使用/就可以了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xfs_growfs /</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girf0736ygj30pp0810ub.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"重新创建home-lv并挂载home\"><a href=\"#重新创建home-lv并挂载home\" class=\"headerlink\" title=\"重新创建home lv并挂载home\"></a>重新创建home lv并挂载home</h2><p>创建1g空间的home</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvcreate -L 1G -n home cl</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girf0kmo2hj30qq02rq39.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>文件系统类型设置<br><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.xfs /dev/cl/home</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girf0uu0ecj30pa07dq4c.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>挂载到home目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount /dev/cl/home /home</span><br></pre></td></tr></table></figure>\n<p>恢复home目录下文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv /tmp/home.tar /home</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /home</span><br><span class=\"line\">tar xvf  home.tar</span><br><span class=\"line\">mv home/* .</span><br><span class=\"line\">rm -rf home*</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看最终调整结果\"><a href=\"#查看最终调整结果\" class=\"headerlink\" title=\"查看最终调整结果\"></a>查看最终调整结果</h2><p>查看各分区大小</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -lh</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girf13w9foj30jt06qjsf.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><p>本文主要介绍了在centos8系统下调整各分区大小，这里就是/home分区和/root分区，介绍在centos7和centos8下参数差异。熟悉linux系统下的文件系统的分区调整。对于刚装系统分区不合适需要调整centos各分区大小的用户起到指导作用，有疑问再邮件联系吧。</p>\n<h1 id=\"lvm修改根分区大小\"><a href=\"#lvm修改根分区大小\" class=\"headerlink\" title=\"lvm修改根分区大小\"></a>lvm修改根分区大小</h1><ul>\n<li>参考：<ol>\n<li>减小lvm根分区容量: <a href=\"http://kwokchivu.blog.51cto.com/1128937/724128\" target=\"_blank\" rel=\"noopener\">http://kwokchivu.blog.51cto.com/1128937/724128</a></li>\n<li>CentOS 5 LVM逻辑卷管理: <a href=\"http://sunshyfangtian.blog.51cto.com/1405751/860018\" target=\"_blank\" rel=\"noopener\">http://sunshyfangtian.blog.51cto.com/1405751/860018</a></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>home、根各为50GB空间，根空间不足，需缩小home至10GB、扩大根为90GB。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvm&gt; lvscan</span><br><span class=\"line\">  ACTIVE            &apos;/dev/vg_db/lv_root&apos; [50.00 GiB] inherit</span><br><span class=\"line\">  ACTIVE            &apos;/dev/vg_db/lv_home&apos; [50.00 GiB] inherit</span><br><span class=\"line\">  ACTIVE            &apos;/dev/vg_db/lv_swap&apos; [9.83 GiB] inherit</span><br></pre></td></tr></table></figure>\n<h2 id=\"缩小home、增大根分区\"><a href=\"#缩小home、增大根分区\" class=\"headerlink\" title=\"缩小home、增大根分区\"></a>缩小home、增大根分区</h2><h3 id=\"进入rescue模式\"><a href=\"#进入rescue模式\" class=\"headerlink\" title=\"进入rescue模式\"></a>进入rescue模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">增大root分区是否可以在线完成、不用进rescue状态？找机会试试...</span><br></pre></td></tr></table></figure>\n<p>从Linux安装光盘启动进入rescue模式；</p>\n<p>选择相关的语言，键盘模式，当系统提示启用网络设备时，选择“NO”；</p>\n<p>然后在提示允许rescue模式挂载本地Linux系统到/mnt/sysimage下时选择“Skip”，文件系统必须不被挂载才可以对/分区减小容量操作。</p>\n<p>最后系统会提示选择进入shell终端还是reboot机器，选择进入shell终端。</p>\n<h3 id=\"激活分区\"><a href=\"#激活分区\" class=\"headerlink\" title=\"激活分区\"></a>激活分区</h3><p>输入lvm命令，进入lvm界面，依次输入pvscan、vgscan、lvscan三个命令扫描pv、vg、lv相关信息。</p>\n<p>然后输入lvchange -ay /dev/vg_db/lv_root（上文提到的/分区名称）此命令是激活/分区所在的逻辑卷，输入 quit返回到bash shell界面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvchange -ay /dev/vg_db/lv_home</span><br><span class=\"line\">lvchange -ay /dev/vg_db/lv_root</span><br></pre></td></tr></table></figure>\n<h3 id=\"缩小home分区\"><a href=\"#缩小home分区\" class=\"headerlink\" title=\"缩小home分区\"></a>缩小home分区</h3><ul>\n<li><p>先检查下分区: e2fsck -f /dev/vg_db/lv_home</p>\n</li>\n<li><p>缩小文件系统大小：resize2fs /dev/vg_db/lv_home 10G</p>\n</li>\n<li><p>缩小逻辑卷</p>\n<ul>\n<li>输入lvm命令进入lvm模式</li>\n<li>缩小逻辑卷：lvreduce -L 10G /dev/vg_db/lv_home</li>\n<li>系统会询问是否缩小逻辑卷，输入 y 确定。</li>\n</ul>\n</li>\n<li><p>查看修改结果: vgdisplay，lvdisplay</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">减小LVM中的文件系统必须离线操作(处于umount装态)，要减小文件系统和LV:</span><br><span class=\"line\">    # Unmount相应的文件系统</span><br><span class=\"line\">    # 运行磁盘检查确保卷的完整</span><br><span class=\"line\">    # 减小文件系统</span><br><span class=\"line\">    # 减小LV</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"扩大根分区\"><a href=\"#扩大根分区\" class=\"headerlink\" title=\"扩大根分区\"></a>扩大根分区</h3><ul>\n<li>先检查下分区: e2fsck -f /dev/vg_db/lv_root</li>\n<li>扩大逻辑卷:<ul>\n<li>输入lvm命令进入lvm模式</li>\n<li>扩大逻辑卷：lvresize -L +40G /dev/vg_db/lv_root</li>\n</ul>\n</li>\n<li>更改文件系统大小<ul>\n<li>resize2fs -p /dev/vg_db/lv_root</li>\n</ul>\n</li>\n<li>查看修改结果: lvscan</li>\n</ul>\n<h2 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h2><h3 id=\"修改swap卷大小\"><a href=\"#修改swap卷大小\" class=\"headerlink\" title=\"修改swap卷大小\"></a>修改swap卷大小</h3><ul>\n<li>取消激活swap空间: swapoff</li>\n<li>修改swap分区大小: lvresize -L 4G /dev/vg_db/lv_swap</li>\n<li>重新格区化: mkswap -f /dev/vb_db/lv_swap</li>\n<li>激活swap空间: swapon</li>\n</ul>\n<h3 id=\"新建逻辑卷lv-develop\"><a href=\"#新建逻辑卷lv-develop\" class=\"headerlink\" title=\"新建逻辑卷lv_develop\"></a>新建逻辑卷lv_develop</h3><ul>\n<li>创建逻辑卷 : lvcreate -L 2.8G -n lv_develop /dev/vb_db</li>\n<li>创建文件系统 : mkfs.ext3 /dev/vg_db/lv_develop</li>\n</ul>\n<h3 id=\"增加物理盘\"><a href=\"#增加物理盘\" class=\"headerlink\" title=\"增加物理盘\"></a>增加物理盘</h3><ul>\n<li>fdisk分区，并将分区类型为0×8e(Linux LVM)</li>\n<li>创建物理卷PV: pvcreate /dev/hdb1</li>\n<li>创建卷组VG: vgcreate vgtest /dev/hdb1</li>\n<li>添加PV到VG: vgextend</li>\n<li>创建逻辑卷LV: lvcreate -L 6000M -n mysql vgtest</li>\n<li>创建文件系统: mkfs -t ext3 /dev/vgtest/mysql</li>\n<li>建立新分区卷标: tune2fs –L /mysql /dev/vgtest/mysql</li>\n<li>加载新分区: mount –t ext3 /dev/vgtest/mysql /mysql</li>\n<li>卸载卷的顺序:<ol>\n<li>umount</li>\n<li>卸载逻辑卷:lvremove LVDEVICE</li>\n<li>卸载卷组:vgremove VGNAME</li>\n<li>卸载物理卷:pvremove PVDEVICE</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"LVM分区在线扩容\"><a href=\"#LVM分区在线扩容\" class=\"headerlink\" title=\"LVM分区在线扩容\"></a>LVM分区在线扩容</h1><p>2011-12-19 15:24:16</p>\n<p><a href=\"http://share.blog.51cto.com/278008/745479\" target=\"_blank\" rel=\"noopener\">http://share.blog.51cto.com/278008/745479</a></p>\n<p>今天对三台服务器的LV分区进行了一次扩容。本文有点标题党嫌疑，因为只有一台服务器是在线扩容，其它两台都是先卸载再扩容的。</p>\n<p>在线扩容的这台服务器，LV分区格式为xfs，原大小1.2TB。增加了一块硬盘，大小为1.8TB。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`fdisk` `/dev/cciss/c0d1`                              `# 创建分区，并指定分区类型为LVM (8e) ``pvcreate ``/dev/cciss/c0d1p1`                         `# 创建pv``vgextend VolGroup00 ``/dev/cciss/c0d1p1`              `# 添加新创建的pv到原有vg``lvextend -L +1.8T ``/dev/mapper/VolGroup00-LogVol05`  `# 在线扩容指定lv分区``xfs_growfs ``/dev/mapper/VolGroup00-LogVol05`         `# 使扩容生效。注意xfs文件系统的生效命令！ `</span><br></pre></td></tr></table></figure>\n<p>其它两台服务器也是新增了一个1.8TB的硬盘，要扩容的LV分区格式为ext3。之所以没有进行在线扩容，是因为没有找到ext2online命令；后来发现，resize2fs也是支持在线扩容的！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`lvextend -l +100%FREE ``/dev/mapper/VolGroup00-LogVol05``umount` `-l ``/dev/mapper/VolGroup00-LogVol05``e2fsck -f ``/dev/mapper/VolGroup00-LogVol05`    `# 过程比较长 ``resize2fs ``/dev/mapper/VolGroup00-LogVol05`    `# 也要几分钟时间 ``mount` `/dev/mapper/VolGroup00-LogVol05` `/hdfs`</span><br></pre></td></tr></table></figure>\n<p>虽然resize2fs可以在线使用，但是对在线lv分区执行e2fsck有点风险！</p>\n"},{"title":"centos使用cockpit","date":"2020-09-05T13:40:23.000Z","_content":"\n```bash\nsudo systemctl enable --now cockpit.socket\n\n[leiakun@centos8 ~]$ sudo systemctl enable --now cockpit.socket\n[sudo] leiakun 的密码：\nCreated symlink /etc/systemd/system/sockets.target.wants/cockpit.socket → /usr/lib/systemd/system/cockpit.socket.\n[leiakun@centos8 ~]$ \n\n[leiakun@centos8 ~]$ sudo firewall-cmd --get-services |grep cockpit\nRH-Satellite-6 amanda-client amanda-k5-client amqp amqps apcupsd audit\nbacula bacula-client bb bgp bitcoin bitcoin-rpc bitcoin-testnet bitcoin-testnet-rpc\nbittorrent-lsd ceph ceph-mon cfengine cockpit condor-collector ctdb dhcp dhcpv6 \ndhcpv6-client distcc dns dns-over-tls docker-registry docker-swarm dropbox-lansync \nelasticsearch etcd-client etcd-server finger freeipa-4 freeipa-ldap freeipa-ldaps \nfreeipa-replication freeipa-trust ftp ganglia-client ganglia-master git grafana \ngre high-availability http https imap imaps ipp ipp-client ipsec irc ircs \niscsi-target isns jenkins kadmin kdeconnect kerberos kibana klogin kpasswd \nkprop kshell ldap ldaps libvirt libvirt-tls lightning-network llmnr managesieve\nmatrix mdns memcache minidlna mongodb mosh mountd mqtt mqtt-tls ms-wbt mssql\nmurmur mysql nfs nfs3 nmea-0183 nrpe ntp nut openvpn ovirt-imageio ovirt-storageconsole \novirt-vmconsole plex pmcd pmproxy pmwebapi pmwebapis pop3 pop3s postgresql privoxy\nprometheus proxy-dhcp ptp pulseaudio puppetmaster quassel radius rdp redis \nredis-sentinel rpc-bind rsh rsyncd rtsp salt-master samba samba-client samba-dc\nsane sip sips slp smtp smtp-submission smtps snmp snmptrap spideroak-lansync \nspotify-sync squid ssdp ssh steam-streaming svdrp svn syncthing syncthing-gui \nsynergy syslog syslog-tls telnet tentacle tftp tftp-client tile38 tinc tor-socks \ntransmission-client upnp-client vdsm vnc-server wbem-http wbem-https wsman wsmans\nxdmcp xmpp-bosh xmpp-client xmpp-local xmpp-server zabbix-agent zabbix-server\n\nsudo firewall-cmd --add-service=cockpit --permanent\nsudo firewall-cmd --reload\n```\n\n# 多主机管理\n\n```bash\nyum install -y cockpit-dashboard\n```\n\n","source":"_posts/运维/centos使用cockpit.md","raw":"---\ntitle: centos使用cockpit\ndate: 2020-9-05 21:40:23\ntags:\n- linux\n---\n\n```bash\nsudo systemctl enable --now cockpit.socket\n\n[leiakun@centos8 ~]$ sudo systemctl enable --now cockpit.socket\n[sudo] leiakun 的密码：\nCreated symlink /etc/systemd/system/sockets.target.wants/cockpit.socket → /usr/lib/systemd/system/cockpit.socket.\n[leiakun@centos8 ~]$ \n\n[leiakun@centos8 ~]$ sudo firewall-cmd --get-services |grep cockpit\nRH-Satellite-6 amanda-client amanda-k5-client amqp amqps apcupsd audit\nbacula bacula-client bb bgp bitcoin bitcoin-rpc bitcoin-testnet bitcoin-testnet-rpc\nbittorrent-lsd ceph ceph-mon cfengine cockpit condor-collector ctdb dhcp dhcpv6 \ndhcpv6-client distcc dns dns-over-tls docker-registry docker-swarm dropbox-lansync \nelasticsearch etcd-client etcd-server finger freeipa-4 freeipa-ldap freeipa-ldaps \nfreeipa-replication freeipa-trust ftp ganglia-client ganglia-master git grafana \ngre high-availability http https imap imaps ipp ipp-client ipsec irc ircs \niscsi-target isns jenkins kadmin kdeconnect kerberos kibana klogin kpasswd \nkprop kshell ldap ldaps libvirt libvirt-tls lightning-network llmnr managesieve\nmatrix mdns memcache minidlna mongodb mosh mountd mqtt mqtt-tls ms-wbt mssql\nmurmur mysql nfs nfs3 nmea-0183 nrpe ntp nut openvpn ovirt-imageio ovirt-storageconsole \novirt-vmconsole plex pmcd pmproxy pmwebapi pmwebapis pop3 pop3s postgresql privoxy\nprometheus proxy-dhcp ptp pulseaudio puppetmaster quassel radius rdp redis \nredis-sentinel rpc-bind rsh rsyncd rtsp salt-master samba samba-client samba-dc\nsane sip sips slp smtp smtp-submission smtps snmp snmptrap spideroak-lansync \nspotify-sync squid ssdp ssh steam-streaming svdrp svn syncthing syncthing-gui \nsynergy syslog syslog-tls telnet tentacle tftp tftp-client tile38 tinc tor-socks \ntransmission-client upnp-client vdsm vnc-server wbem-http wbem-https wsman wsmans\nxdmcp xmpp-bosh xmpp-client xmpp-local xmpp-server zabbix-agent zabbix-server\n\nsudo firewall-cmd --add-service=cockpit --permanent\nsudo firewall-cmd --reload\n```\n\n# 多主机管理\n\n```bash\nyum install -y cockpit-dashboard\n```\n\n","slug":"运维/centos使用cockpit","published":1,"updated":"2020-09-20T03:22:55.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblnp005o4tje8x8efql6","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> --now cockpit.socket</span><br><span class=\"line\"></span><br><span class=\"line\">[leiakun@centos8 ~]$ sudo systemctl <span class=\"built_in\">enable</span> --now cockpit.socket</span><br><span class=\"line\">[sudo] leiakun 的密码：</span><br><span class=\"line\">Created symlink /etc/systemd/system/sockets.target.wants/cockpit.socket → /usr/lib/systemd/system/cockpit.socket.</span><br><span class=\"line\">[leiakun@centos8 ~]$ </span><br><span class=\"line\"></span><br><span class=\"line\">[leiakun@centos8 ~]$ sudo firewall-cmd --get-services |grep cockpit</span><br><span class=\"line\">RH-Satellite-6 amanda-client amanda-k5-client amqp amqps apcupsd audit</span><br><span class=\"line\">bacula bacula-client bb bgp bitcoin bitcoin-rpc bitcoin-testnet bitcoin-testnet-rpc</span><br><span class=\"line\">bittorrent-lsd ceph ceph-mon cfengine cockpit condor-collector ctdb dhcp dhcpv6 </span><br><span class=\"line\">dhcpv6-client distcc dns dns-over-tls docker-registry docker-swarm dropbox-lansync </span><br><span class=\"line\">elasticsearch etcd-client etcd-server finger freeipa-4 freeipa-ldap freeipa-ldaps </span><br><span class=\"line\">freeipa-replication freeipa-trust ftp ganglia-client ganglia-master git grafana </span><br><span class=\"line\">gre high-availability http https imap imaps ipp ipp-client ipsec irc ircs </span><br><span class=\"line\">iscsi-target isns jenkins kadmin kdeconnect kerberos kibana klogin kpasswd </span><br><span class=\"line\">kprop kshell ldap ldaps libvirt libvirt-tls lightning-network llmnr managesieve</span><br><span class=\"line\">matrix mdns memcache minidlna mongodb mosh mountd mqtt mqtt-tls ms-wbt mssql</span><br><span class=\"line\">murmur mysql nfs nfs3 nmea-0183 nrpe ntp nut openvpn ovirt-imageio ovirt-storageconsole </span><br><span class=\"line\">ovirt-vmconsole plex pmcd pmproxy pmwebapi pmwebapis pop3 pop3s postgresql privoxy</span><br><span class=\"line\">prometheus proxy-dhcp ptp pulseaudio puppetmaster quassel radius rdp redis </span><br><span class=\"line\">redis-sentinel rpc-bind rsh rsyncd rtsp salt-master samba samba-client samba-dc</span><br><span class=\"line\">sane sip sips slp smtp smtp-submission smtps snmp snmptrap spideroak-lansync </span><br><span class=\"line\">spotify-sync squid ssdp ssh steam-streaming svdrp svn syncthing syncthing-gui </span><br><span class=\"line\">synergy syslog syslog-tls telnet tentacle tftp tftp-client tile38 tinc tor-socks </span><br><span class=\"line\">transmission-client upnp-client vdsm vnc-server wbem-http wbem-https wsman wsmans</span><br><span class=\"line\">xdmcp xmpp-bosh xmpp-client xmpp-local xmpp-server zabbix-agent zabbix-server</span><br><span class=\"line\"></span><br><span class=\"line\">sudo firewall-cmd --add-service=cockpit --permanent</span><br><span class=\"line\">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<h1 id=\"多主机管理\"><a href=\"#多主机管理\" class=\"headerlink\" title=\"多主机管理\"></a>多主机管理</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y cockpit-dashboard</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> --now cockpit.socket</span><br><span class=\"line\"></span><br><span class=\"line\">[leiakun@centos8 ~]$ sudo systemctl <span class=\"built_in\">enable</span> --now cockpit.socket</span><br><span class=\"line\">[sudo] leiakun 的密码：</span><br><span class=\"line\">Created symlink /etc/systemd/system/sockets.target.wants/cockpit.socket → /usr/lib/systemd/system/cockpit.socket.</span><br><span class=\"line\">[leiakun@centos8 ~]$ </span><br><span class=\"line\"></span><br><span class=\"line\">[leiakun@centos8 ~]$ sudo firewall-cmd --get-services |grep cockpit</span><br><span class=\"line\">RH-Satellite-6 amanda-client amanda-k5-client amqp amqps apcupsd audit</span><br><span class=\"line\">bacula bacula-client bb bgp bitcoin bitcoin-rpc bitcoin-testnet bitcoin-testnet-rpc</span><br><span class=\"line\">bittorrent-lsd ceph ceph-mon cfengine cockpit condor-collector ctdb dhcp dhcpv6 </span><br><span class=\"line\">dhcpv6-client distcc dns dns-over-tls docker-registry docker-swarm dropbox-lansync </span><br><span class=\"line\">elasticsearch etcd-client etcd-server finger freeipa-4 freeipa-ldap freeipa-ldaps </span><br><span class=\"line\">freeipa-replication freeipa-trust ftp ganglia-client ganglia-master git grafana </span><br><span class=\"line\">gre high-availability http https imap imaps ipp ipp-client ipsec irc ircs </span><br><span class=\"line\">iscsi-target isns jenkins kadmin kdeconnect kerberos kibana klogin kpasswd </span><br><span class=\"line\">kprop kshell ldap ldaps libvirt libvirt-tls lightning-network llmnr managesieve</span><br><span class=\"line\">matrix mdns memcache minidlna mongodb mosh mountd mqtt mqtt-tls ms-wbt mssql</span><br><span class=\"line\">murmur mysql nfs nfs3 nmea-0183 nrpe ntp nut openvpn ovirt-imageio ovirt-storageconsole </span><br><span class=\"line\">ovirt-vmconsole plex pmcd pmproxy pmwebapi pmwebapis pop3 pop3s postgresql privoxy</span><br><span class=\"line\">prometheus proxy-dhcp ptp pulseaudio puppetmaster quassel radius rdp redis </span><br><span class=\"line\">redis-sentinel rpc-bind rsh rsyncd rtsp salt-master samba samba-client samba-dc</span><br><span class=\"line\">sane sip sips slp smtp smtp-submission smtps snmp snmptrap spideroak-lansync </span><br><span class=\"line\">spotify-sync squid ssdp ssh steam-streaming svdrp svn syncthing syncthing-gui </span><br><span class=\"line\">synergy syslog syslog-tls telnet tentacle tftp tftp-client tile38 tinc tor-socks </span><br><span class=\"line\">transmission-client upnp-client vdsm vnc-server wbem-http wbem-https wsman wsmans</span><br><span class=\"line\">xdmcp xmpp-bosh xmpp-client xmpp-local xmpp-server zabbix-agent zabbix-server</span><br><span class=\"line\"></span><br><span class=\"line\">sudo firewall-cmd --add-service=cockpit --permanent</span><br><span class=\"line\">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<h1 id=\"多主机管理\"><a href=\"#多主机管理\" class=\"headerlink\" title=\"多主机管理\"></a>多主机管理</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y cockpit-dashboard</span><br></pre></td></tr></table></figure>\n"},{"title":"centos安装jenkins","date":"2020-09-28T08:00:00.000Z","_content":"\n# 下载\n\n```bash\nsudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo\nsudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\nyum install jenkins\n  \n```\n\n## 2.配置\n\n```shell\nvim /etc/sysconfig/jenkins\n\n#监听端口\nJENKINS_PORT=\"8080\"\n```\n\n## 3.配置权限\n\n为了不因为权限出现各种问题，这里直接使用root\n\n修改用户为root\n\n```shell\nvim /etc/sysconfig/jenkins\n\n#修改配置\n$JENKINS_USER=\"root\"\n```\n\n修改目录权限\n\n```shell\nchown -R root:root /var/lib/jenkins\nchown -R root:root /var/cache/jenkins\nchown -R root:root /var/log/jenkins\n```\n\n重启\n\n```shell\nservice jenkins restart\nps -ef | grep jenkins\n```\n\n## 4.启动\n\n```shell\nsystemctl start jenkins\n```\n\n我这里启动失败了：\n\n![1531198978143](https://images2018.cnblogs.com/blog/668104/201807/668104-20180710201227396-1299962709.png)\n\n错误信息为`Starting Jenkins bash: /usr/bin/java: No such file or directory`是java环境配置的问题。\n\n找到你的jdk目录，我是在 `usr/local/java/jdk1.8.0_171/`下，创建软链接即可：\n\n```shell\nln -s /usr/local/java/jdk1.8.0_171/bin/java /usr/bin/java\n```\n\n然后重新启动\n\n![1531199078302](https://images2018.cnblogs.com/blog/668104/201807/668104-20180710201226959-451256225.png)\n\n## 5.安装\n\n访问jenkins地址 http:<ip或者域名>:8080\n\n![1531204667345](https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6iowwig6j30rq0p4myg.jpg)\n\n执行命令查看密码：\n\n```shell\ncat /var/lib/jenkins/secrets/initialAdminPassword\n```\n\n插件安装选择推荐插件\n\n![1531204844660](https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6iox8ce3j30rq0p7tap.jpg)\n\n安装进行中\n\n![1531204864191](https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6iozkb95j30rl0owdhe.jpg)\n\n插件安装完成以后将会创建管理员账户\n\n![1531205120250](https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6ioyv8m5j30rs0p4aat.jpg)\n\n安装完成：\n\n![1531205170165](https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6ioy5jyqj30rn0p8t9b.jpg)\n\n运行截图：\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6ioxpo29j31h80q80ul.jpg)","source":"_posts/运维/centos安装jenkins.md","raw":"---\ntitle: centos安装jenkins\ndate: 2020-9-28 16:00:00\n---\n\n# 下载\n\n```bash\nsudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo\nsudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\nyum install jenkins\n  \n```\n\n## 2.配置\n\n```shell\nvim /etc/sysconfig/jenkins\n\n#监听端口\nJENKINS_PORT=\"8080\"\n```\n\n## 3.配置权限\n\n为了不因为权限出现各种问题，这里直接使用root\n\n修改用户为root\n\n```shell\nvim /etc/sysconfig/jenkins\n\n#修改配置\n$JENKINS_USER=\"root\"\n```\n\n修改目录权限\n\n```shell\nchown -R root:root /var/lib/jenkins\nchown -R root:root /var/cache/jenkins\nchown -R root:root /var/log/jenkins\n```\n\n重启\n\n```shell\nservice jenkins restart\nps -ef | grep jenkins\n```\n\n## 4.启动\n\n```shell\nsystemctl start jenkins\n```\n\n我这里启动失败了：\n\n![1531198978143](https://images2018.cnblogs.com/blog/668104/201807/668104-20180710201227396-1299962709.png)\n\n错误信息为`Starting Jenkins bash: /usr/bin/java: No such file or directory`是java环境配置的问题。\n\n找到你的jdk目录，我是在 `usr/local/java/jdk1.8.0_171/`下，创建软链接即可：\n\n```shell\nln -s /usr/local/java/jdk1.8.0_171/bin/java /usr/bin/java\n```\n\n然后重新启动\n\n![1531199078302](https://images2018.cnblogs.com/blog/668104/201807/668104-20180710201226959-451256225.png)\n\n## 5.安装\n\n访问jenkins地址 http:<ip或者域名>:8080\n\n![1531204667345](https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6iowwig6j30rq0p4myg.jpg)\n\n执行命令查看密码：\n\n```shell\ncat /var/lib/jenkins/secrets/initialAdminPassword\n```\n\n插件安装选择推荐插件\n\n![1531204844660](https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6iox8ce3j30rq0p7tap.jpg)\n\n安装进行中\n\n![1531204864191](https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6iozkb95j30rl0owdhe.jpg)\n\n插件安装完成以后将会创建管理员账户\n\n![1531205120250](https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6ioyv8m5j30rs0p4aat.jpg)\n\n安装完成：\n\n![1531205170165](https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6ioy5jyqj30rn0p8t9b.jpg)\n\n运行截图：\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6ioxpo29j31h80q80ul.jpg)","slug":"运维/centos安装jenkins","published":1,"updated":"2020-10-17T10:01:55.957Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblnq005q4tjebo062f8h","content":"<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class=\"line\">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br><span class=\"line\">yum install jenkins</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-配置\"><a href=\"#2-配置\" class=\"headerlink\" title=\"2.配置\"></a>2.配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysconfig/jenkins</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">监听端口</span></span><br><span class=\"line\">JENKINS_PORT=\"8080\"</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-配置权限\"><a href=\"#3-配置权限\" class=\"headerlink\" title=\"3.配置权限\"></a>3.配置权限</h2><p>为了不因为权限出现各种问题，这里直接使用root</p>\n<p>修改用户为root</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysconfig/jenkins</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">修改配置</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">JENKINS_USER=<span class=\"string\">\"root\"</span></span></span><br></pre></td></tr></table></figure>\n<p>修改目录权限</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R root:root /var/lib/jenkins</span><br><span class=\"line\">chown -R root:root /var/cache/jenkins</span><br><span class=\"line\">chown -R root:root /var/log/jenkins</span><br></pre></td></tr></table></figure>\n<p>重启</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service jenkins restart</span><br><span class=\"line\">ps -ef | grep jenkins</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-启动\"><a href=\"#4-启动\" class=\"headerlink\" title=\"4.启动\"></a>4.启动</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start jenkins</span><br></pre></td></tr></table></figure>\n<p>我这里启动失败了：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://images2018.cnblogs.com/blog/668104/201807/668104-20180710201227396-1299962709.png\" alt=\"1531198978143\" title=\"\">\n                </div>\n                <div class=\"image-caption\">1531198978143</div>\n            </figure>\n<p>错误信息为<code>Starting Jenkins bash: /usr/bin/java: No such file or directory</code>是java环境配置的问题。</p>\n<p>找到你的jdk目录，我是在 <code>usr/local/java/jdk1.8.0_171/</code>下，创建软链接即可：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/java/jdk1.8.0_171/bin/java /usr/bin/java</span><br></pre></td></tr></table></figure>\n<p>然后重新启动</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://images2018.cnblogs.com/blog/668104/201807/668104-20180710201226959-451256225.png\" alt=\"1531199078302\" title=\"\">\n                </div>\n                <div class=\"image-caption\">1531199078302</div>\n            </figure>\n<h2 id=\"5-安装\"><a href=\"#5-安装\" class=\"headerlink\" title=\"5.安装\"></a>5.安装</h2><p>访问jenkins地址 http:&lt;ip或者域名&gt;:8080</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6iowwig6j30rq0p4myg.jpg\" alt=\"1531204667345\" title=\"\">\n                </div>\n                <div class=\"image-caption\">1531204667345</div>\n            </figure>\n<p>执行命令查看密码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /var/lib/jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure>\n<p>插件安装选择推荐插件</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6iox8ce3j30rq0p7tap.jpg\" alt=\"1531204844660\" title=\"\">\n                </div>\n                <div class=\"image-caption\">1531204844660</div>\n            </figure>\n<p>安装进行中</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6iozkb95j30rl0owdhe.jpg\" alt=\"1531204864191\" title=\"\">\n                </div>\n                <div class=\"image-caption\">1531204864191</div>\n            </figure>\n<p>插件安装完成以后将会创建管理员账户</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6ioyv8m5j30rs0p4aat.jpg\" alt=\"1531205120250\" title=\"\">\n                </div>\n                <div class=\"image-caption\">1531205120250</div>\n            </figure>\n<p>安装完成：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6ioy5jyqj30rn0p8t9b.jpg\" alt=\"1531205170165\" title=\"\">\n                </div>\n                <div class=\"image-caption\">1531205170165</div>\n            </figure>\n<p>运行截图：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6ioxpo29j31h80q80ul.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class=\"line\">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br><span class=\"line\">yum install jenkins</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-配置\"><a href=\"#2-配置\" class=\"headerlink\" title=\"2.配置\"></a>2.配置</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysconfig/jenkins</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">监听端口</span></span><br><span class=\"line\">JENKINS_PORT=\"8080\"</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-配置权限\"><a href=\"#3-配置权限\" class=\"headerlink\" title=\"3.配置权限\"></a>3.配置权限</h2><p>为了不因为权限出现各种问题，这里直接使用root</p>\n<p>修改用户为root</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysconfig/jenkins</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">修改配置</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">JENKINS_USER=<span class=\"string\">\"root\"</span></span></span><br></pre></td></tr></table></figure>\n<p>修改目录权限</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R root:root /var/lib/jenkins</span><br><span class=\"line\">chown -R root:root /var/cache/jenkins</span><br><span class=\"line\">chown -R root:root /var/log/jenkins</span><br></pre></td></tr></table></figure>\n<p>重启</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service jenkins restart</span><br><span class=\"line\">ps -ef | grep jenkins</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-启动\"><a href=\"#4-启动\" class=\"headerlink\" title=\"4.启动\"></a>4.启动</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start jenkins</span><br></pre></td></tr></table></figure>\n<p>我这里启动失败了：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://images2018.cnblogs.com/blog/668104/201807/668104-20180710201227396-1299962709.png\" alt=\"1531198978143\" title=\"\">\n                </div>\n                <div class=\"image-caption\">1531198978143</div>\n            </figure>\n<p>错误信息为<code>Starting Jenkins bash: /usr/bin/java: No such file or directory</code>是java环境配置的问题。</p>\n<p>找到你的jdk目录，我是在 <code>usr/local/java/jdk1.8.0_171/</code>下，创建软链接即可：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/java/jdk1.8.0_171/bin/java /usr/bin/java</span><br></pre></td></tr></table></figure>\n<p>然后重新启动</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://images2018.cnblogs.com/blog/668104/201807/668104-20180710201226959-451256225.png\" alt=\"1531199078302\" title=\"\">\n                </div>\n                <div class=\"image-caption\">1531199078302</div>\n            </figure>\n<h2 id=\"5-安装\"><a href=\"#5-安装\" class=\"headerlink\" title=\"5.安装\"></a>5.安装</h2><p>访问jenkins地址 http:&lt;ip或者域名&gt;:8080</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6iowwig6j30rq0p4myg.jpg\" alt=\"1531204667345\" title=\"\">\n                </div>\n                <div class=\"image-caption\">1531204667345</div>\n            </figure>\n<p>执行命令查看密码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /var/lib/jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure>\n<p>插件安装选择推荐插件</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6iox8ce3j30rq0p7tap.jpg\" alt=\"1531204844660\" title=\"\">\n                </div>\n                <div class=\"image-caption\">1531204844660</div>\n            </figure>\n<p>安装进行中</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6iozkb95j30rl0owdhe.jpg\" alt=\"1531204864191\" title=\"\">\n                </div>\n                <div class=\"image-caption\">1531204864191</div>\n            </figure>\n<p>插件安装完成以后将会创建管理员账户</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6ioyv8m5j30rs0p4aat.jpg\" alt=\"1531205120250\" title=\"\">\n                </div>\n                <div class=\"image-caption\">1531205120250</div>\n            </figure>\n<p>安装完成：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6ioy5jyqj30rn0p8t9b.jpg\" alt=\"1531205170165\" title=\"\">\n                </div>\n                <div class=\"image-caption\">1531205170165</div>\n            </figure>\n<p>运行截图：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gj6ioxpo29j31h80q80ul.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>"},{"title":"centos创建用户","date":"2020-09-05T13:40:23.000Z","_content":"\n# 创建用户\n\n```bash\nuseradd wumu\n\n## 给用户添加组，一定要加a\n(FC4: usermod -G groupA,groupB,groupC user)\n-a 代表 append， 也就是 将自己添加到 用户组groupA 中，而不必离开 其他用户组。\n#命令的所有的选项，及其含义：\nOptions:\n-c, --comment COMMENT         new value of the GECOS field\n-d, --home HOME_DIR           new home directory for the user account\n-e, --expiredate EXPIRE_DATE set account expiration date to EXPIRE_DATE\n-f, --inactive INACTIVE       set password inactive after expiration\nto INACTIVE\n-g, --gid GROUP               force use GROUP as new primary group\n-G, --groups GROUPS           new list of supplementary GROUPS\n-a, --append          append the user to the supplemental GROUPS\nmentioned by the -G option without removing\nhim/her from other groups\n-h, --help                    display this help message and exit\n-l, --login NEW_LOGIN         new value of the login name\n-L, --lock                    lock the user account\n-m, --move-home               move contents of the home directory to the new\nlocation (use only with -d)\n-o, --non-unique              allow using duplicate (non-unique) UID\n-p, --password PASSWORD       use encrypted password for the new password\n-s, --shell SHELL             new login shell for the user account\n-u, --uid UID                 new UID for the user account\n-U, --unlock                  unlock the user account\n\nusermod -a -G wumugroup wumu\npasswd wumu\n```\n\n# 添加sudo权限\n\n```bash\nvisudo\n\n\n#找到如下行数\nroot  ALL=(ALL)   ALL\n#添加\nusername ALL=(ALL) ALL\n```\n\n# 免密码登录\n\n```bash\nssh-keygen\nssh-copy-id -i .ssh/id_rsa.pub  用户名字@192.168.x.xxx\nssh 用户名字@192.168.x.xxx\n```\n\n# 使用pem登录\n\n```bash\n#在本地生成公钥私钥\nssh-keygen\n#输入命令后，一路回车，即可。\n\n#将本地的公钥传到服务器上\nssh-copy-id -i ~/.ssh/id_rsa.pub remote-host\n#会提示你输入密码，成功之后，会帮助你把公钥放在服务器上，供登录使用。\n\n#把本地的私钥转为 pem 格式，供windows上的 ssh 客户端使用\nopenssl rsa -in ~/.ssh/id_rsa -outform pem > id_rsa.pem\nchmod 700 id_rsa.pem\n#这样就导出了pem格式的私钥，因为公钥已经在服务器了，所以只要服务器上的公钥不删除，用这把私钥就能登录服务器,一般来说，经过这样设置之后，可以把ssh 密码登录的方式禁用掉，使得服务器更加安全。\n\n#关闭 ssh 密码登录\nvi /etc/ssh/sshd_config\n#修改\n\nPasswordAuthentication no\n#重启 ssh 服务\nservice sshd restart\n```\n\n","source":"_posts/运维/centos创建用户.md","raw":"---\ntitle: centos创建用户\ndate: 2020-9-05 21:40:23\ntags:\n- linux\n---\n\n# 创建用户\n\n```bash\nuseradd wumu\n\n## 给用户添加组，一定要加a\n(FC4: usermod -G groupA,groupB,groupC user)\n-a 代表 append， 也就是 将自己添加到 用户组groupA 中，而不必离开 其他用户组。\n#命令的所有的选项，及其含义：\nOptions:\n-c, --comment COMMENT         new value of the GECOS field\n-d, --home HOME_DIR           new home directory for the user account\n-e, --expiredate EXPIRE_DATE set account expiration date to EXPIRE_DATE\n-f, --inactive INACTIVE       set password inactive after expiration\nto INACTIVE\n-g, --gid GROUP               force use GROUP as new primary group\n-G, --groups GROUPS           new list of supplementary GROUPS\n-a, --append          append the user to the supplemental GROUPS\nmentioned by the -G option without removing\nhim/her from other groups\n-h, --help                    display this help message and exit\n-l, --login NEW_LOGIN         new value of the login name\n-L, --lock                    lock the user account\n-m, --move-home               move contents of the home directory to the new\nlocation (use only with -d)\n-o, --non-unique              allow using duplicate (non-unique) UID\n-p, --password PASSWORD       use encrypted password for the new password\n-s, --shell SHELL             new login shell for the user account\n-u, --uid UID                 new UID for the user account\n-U, --unlock                  unlock the user account\n\nusermod -a -G wumugroup wumu\npasswd wumu\n```\n\n# 添加sudo权限\n\n```bash\nvisudo\n\n\n#找到如下行数\nroot  ALL=(ALL)   ALL\n#添加\nusername ALL=(ALL) ALL\n```\n\n# 免密码登录\n\n```bash\nssh-keygen\nssh-copy-id -i .ssh/id_rsa.pub  用户名字@192.168.x.xxx\nssh 用户名字@192.168.x.xxx\n```\n\n# 使用pem登录\n\n```bash\n#在本地生成公钥私钥\nssh-keygen\n#输入命令后，一路回车，即可。\n\n#将本地的公钥传到服务器上\nssh-copy-id -i ~/.ssh/id_rsa.pub remote-host\n#会提示你输入密码，成功之后，会帮助你把公钥放在服务器上，供登录使用。\n\n#把本地的私钥转为 pem 格式，供windows上的 ssh 客户端使用\nopenssl rsa -in ~/.ssh/id_rsa -outform pem > id_rsa.pem\nchmod 700 id_rsa.pem\n#这样就导出了pem格式的私钥，因为公钥已经在服务器了，所以只要服务器上的公钥不删除，用这把私钥就能登录服务器,一般来说，经过这样设置之后，可以把ssh 密码登录的方式禁用掉，使得服务器更加安全。\n\n#关闭 ssh 密码登录\nvi /etc/ssh/sshd_config\n#修改\n\nPasswordAuthentication no\n#重启 ssh 服务\nservice sshd restart\n```\n\n","slug":"运维/centos创建用户","published":1,"updated":"2020-09-20T03:22:55.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblnq005s4tjerhe7qifx","content":"<h1 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd wumu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 给用户添加组，一定要加a</span></span><br><span class=\"line\">(FC4: usermod -G groupA,groupB,groupC user)</span><br><span class=\"line\">-a 代表 append， 也就是 将自己添加到 用户组groupA 中，而不必离开 其他用户组。</span><br><span class=\"line\"><span class=\"comment\">#命令的所有的选项，及其含义：</span></span><br><span class=\"line\">Options:</span><br><span class=\"line\">-c, --comment COMMENT         new value of the GECOS field</span><br><span class=\"line\">-d, --home HOME_DIR           new home directory <span class=\"keyword\">for</span> the user account</span><br><span class=\"line\">-e, --expiredate EXPIRE_DATE <span class=\"built_in\">set</span> account expiration date to EXPIRE_DATE</span><br><span class=\"line\">-f, --inactive INACTIVE       <span class=\"built_in\">set</span> password inactive after expiration</span><br><span class=\"line\">to INACTIVE</span><br><span class=\"line\">-g, --gid GROUP               force use GROUP as new primary group</span><br><span class=\"line\">-G, --groups GROUPS           new list of supplementary GROUPS</span><br><span class=\"line\">-a, --append          append the user to the supplemental GROUPS</span><br><span class=\"line\">mentioned by the -G option without removing</span><br><span class=\"line\">him/her from other groups</span><br><span class=\"line\">-h, --<span class=\"built_in\">help</span>                    display this <span class=\"built_in\">help</span> message and <span class=\"built_in\">exit</span></span><br><span class=\"line\">-l, --login NEW_LOGIN         new value of the login name</span><br><span class=\"line\">-L, --lock                    lock the user account</span><br><span class=\"line\">-m, --move-home               move contents of the home directory to the new</span><br><span class=\"line\">location (use only with -d)</span><br><span class=\"line\">-o, --non-unique              allow using duplicate (non-unique) UID</span><br><span class=\"line\">-p, --password PASSWORD       use encrypted password <span class=\"keyword\">for</span> the new password</span><br><span class=\"line\">-s, --shell SHELL             new login shell <span class=\"keyword\">for</span> the user account</span><br><span class=\"line\">-u, --uid UID                 new UID <span class=\"keyword\">for</span> the user account</span><br><span class=\"line\">-U, --unlock                  unlock the user account</span><br><span class=\"line\"></span><br><span class=\"line\">usermod -a -G wumugroup wumu</span><br><span class=\"line\">passwd wumu</span><br></pre></td></tr></table></figure>\n<h1 id=\"添加sudo权限\"><a href=\"#添加sudo权限\" class=\"headerlink\" title=\"添加sudo权限\"></a>添加sudo权限</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">visudo</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#找到如下行数</span></span><br><span class=\"line\">root  ALL=(ALL)   ALL</span><br><span class=\"line\"><span class=\"comment\">#添加</span></span><br><span class=\"line\">username ALL=(ALL) ALL</span><br></pre></td></tr></table></figure>\n<h1 id=\"免密码登录\"><a href=\"#免密码登录\" class=\"headerlink\" title=\"免密码登录\"></a>免密码登录</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br><span class=\"line\">ssh-copy-id -i .ssh/id_rsa.pub  用户名字@192.168.x.xxx</span><br><span class=\"line\">ssh 用户名字@192.168.x.xxx</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用pem登录\"><a href=\"#使用pem登录\" class=\"headerlink\" title=\"使用pem登录\"></a>使用pem登录</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在本地生成公钥私钥</span></span><br><span class=\"line\">ssh-keygen</span><br><span class=\"line\"><span class=\"comment\">#输入命令后，一路回车，即可。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将本地的公钥传到服务器上</span></span><br><span class=\"line\">ssh-copy-id -i ~/.ssh/id_rsa.pub remote-host</span><br><span class=\"line\"><span class=\"comment\">#会提示你输入密码，成功之后，会帮助你把公钥放在服务器上，供登录使用。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#把本地的私钥转为 pem 格式，供windows上的 ssh 客户端使用</span></span><br><span class=\"line\">openssl rsa -<span class=\"keyword\">in</span> ~/.ssh/id_rsa -outform pem &gt; id_rsa.pem</span><br><span class=\"line\">chmod 700 id_rsa.pem</span><br><span class=\"line\"><span class=\"comment\">#这样就导出了pem格式的私钥，因为公钥已经在服务器了，所以只要服务器上的公钥不删除，用这把私钥就能登录服务器,一般来说，经过这样设置之后，可以把ssh 密码登录的方式禁用掉，使得服务器更加安全。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#关闭 ssh 密码登录</span></span><br><span class=\"line\">vi /etc/ssh/sshd_config</span><br><span class=\"line\"><span class=\"comment\">#修改</span></span><br><span class=\"line\"></span><br><span class=\"line\">PasswordAuthentication no</span><br><span class=\"line\"><span class=\"comment\">#重启 ssh 服务</span></span><br><span class=\"line\">service sshd restart</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd wumu</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 给用户添加组，一定要加a</span></span><br><span class=\"line\">(FC4: usermod -G groupA,groupB,groupC user)</span><br><span class=\"line\">-a 代表 append， 也就是 将自己添加到 用户组groupA 中，而不必离开 其他用户组。</span><br><span class=\"line\"><span class=\"comment\">#命令的所有的选项，及其含义：</span></span><br><span class=\"line\">Options:</span><br><span class=\"line\">-c, --comment COMMENT         new value of the GECOS field</span><br><span class=\"line\">-d, --home HOME_DIR           new home directory <span class=\"keyword\">for</span> the user account</span><br><span class=\"line\">-e, --expiredate EXPIRE_DATE <span class=\"built_in\">set</span> account expiration date to EXPIRE_DATE</span><br><span class=\"line\">-f, --inactive INACTIVE       <span class=\"built_in\">set</span> password inactive after expiration</span><br><span class=\"line\">to INACTIVE</span><br><span class=\"line\">-g, --gid GROUP               force use GROUP as new primary group</span><br><span class=\"line\">-G, --groups GROUPS           new list of supplementary GROUPS</span><br><span class=\"line\">-a, --append          append the user to the supplemental GROUPS</span><br><span class=\"line\">mentioned by the -G option without removing</span><br><span class=\"line\">him/her from other groups</span><br><span class=\"line\">-h, --<span class=\"built_in\">help</span>                    display this <span class=\"built_in\">help</span> message and <span class=\"built_in\">exit</span></span><br><span class=\"line\">-l, --login NEW_LOGIN         new value of the login name</span><br><span class=\"line\">-L, --lock                    lock the user account</span><br><span class=\"line\">-m, --move-home               move contents of the home directory to the new</span><br><span class=\"line\">location (use only with -d)</span><br><span class=\"line\">-o, --non-unique              allow using duplicate (non-unique) UID</span><br><span class=\"line\">-p, --password PASSWORD       use encrypted password <span class=\"keyword\">for</span> the new password</span><br><span class=\"line\">-s, --shell SHELL             new login shell <span class=\"keyword\">for</span> the user account</span><br><span class=\"line\">-u, --uid UID                 new UID <span class=\"keyword\">for</span> the user account</span><br><span class=\"line\">-U, --unlock                  unlock the user account</span><br><span class=\"line\"></span><br><span class=\"line\">usermod -a -G wumugroup wumu</span><br><span class=\"line\">passwd wumu</span><br></pre></td></tr></table></figure>\n<h1 id=\"添加sudo权限\"><a href=\"#添加sudo权限\" class=\"headerlink\" title=\"添加sudo权限\"></a>添加sudo权限</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">visudo</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#找到如下行数</span></span><br><span class=\"line\">root  ALL=(ALL)   ALL</span><br><span class=\"line\"><span class=\"comment\">#添加</span></span><br><span class=\"line\">username ALL=(ALL) ALL</span><br></pre></td></tr></table></figure>\n<h1 id=\"免密码登录\"><a href=\"#免密码登录\" class=\"headerlink\" title=\"免密码登录\"></a>免密码登录</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br><span class=\"line\">ssh-copy-id -i .ssh/id_rsa.pub  用户名字@192.168.x.xxx</span><br><span class=\"line\">ssh 用户名字@192.168.x.xxx</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用pem登录\"><a href=\"#使用pem登录\" class=\"headerlink\" title=\"使用pem登录\"></a>使用pem登录</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在本地生成公钥私钥</span></span><br><span class=\"line\">ssh-keygen</span><br><span class=\"line\"><span class=\"comment\">#输入命令后，一路回车，即可。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将本地的公钥传到服务器上</span></span><br><span class=\"line\">ssh-copy-id -i ~/.ssh/id_rsa.pub remote-host</span><br><span class=\"line\"><span class=\"comment\">#会提示你输入密码，成功之后，会帮助你把公钥放在服务器上，供登录使用。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#把本地的私钥转为 pem 格式，供windows上的 ssh 客户端使用</span></span><br><span class=\"line\">openssl rsa -<span class=\"keyword\">in</span> ~/.ssh/id_rsa -outform pem &gt; id_rsa.pem</span><br><span class=\"line\">chmod 700 id_rsa.pem</span><br><span class=\"line\"><span class=\"comment\">#这样就导出了pem格式的私钥，因为公钥已经在服务器了，所以只要服务器上的公钥不删除，用这把私钥就能登录服务器,一般来说，经过这样设置之后，可以把ssh 密码登录的方式禁用掉，使得服务器更加安全。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#关闭 ssh 密码登录</span></span><br><span class=\"line\">vi /etc/ssh/sshd_config</span><br><span class=\"line\"><span class=\"comment\">#修改</span></span><br><span class=\"line\"></span><br><span class=\"line\">PasswordAuthentication no</span><br><span class=\"line\"><span class=\"comment\">#重启 ssh 服务</span></span><br><span class=\"line\">service sshd restart</span><br></pre></td></tr></table></figure>\n"},{"title":"centos安装nacos","date":"2020-09-19T10:00:00.000Z","_content":"\n# 下载\n\n不同版本有点配置有点差别\n\n```\nhttps://github.com/alibaba/nacos/releases\nhttps://github.com/alibaba/nacos/releases/download/1.3.2/nacos-server-1.3.2.zip\n```\n\n# 配置数据库\n\n```properties\n#*************** Config Module Related Configurations ***************#\n### If use MySQL as datasource:\n# spring.datasource.platform=mysql\n\n### Count of DB:\n# db.num=1\n\n### Connect URL of DB:\n# db.url.0=jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\n# db.user=nacos\n# db.password=nacos\n```\n\n# 初始化数据库\n\n```\nmysqldump -h -u -p nacos < xx.sql\n```\n\n# 启动\n\n```bash\n./startup.sh -m standalone\n```\n\n# 编写service\n\n```\n\n[Unit]\nDescription=nacos\nAfter=network.target\n \n[Service]\nType=forking\nExecStart=/opt/nacos/bin/startup.sh -m standalone\nExecReload=/opt/nacos/bin/shutdown.sh\nExecStop=/opt/nacos/bin/shutdown.sh\nPrivateTmp=true\n \n[Install]  \nWantedBy=multi-user.target\n\n\n```\n\n```\nsystemctl start nacos\nsystemctl enable nacos\n```\n\n# 参考\n\nhttps://blog.csdn.net/weihuaya/article/details/108060847\n\n","source":"_posts/运维/centos安装nacos.md","raw":"---\ntitle: centos安装nacos\ndate: 2020-9-19 18:00:00\n---\n\n# 下载\n\n不同版本有点配置有点差别\n\n```\nhttps://github.com/alibaba/nacos/releases\nhttps://github.com/alibaba/nacos/releases/download/1.3.2/nacos-server-1.3.2.zip\n```\n\n# 配置数据库\n\n```properties\n#*************** Config Module Related Configurations ***************#\n### If use MySQL as datasource:\n# spring.datasource.platform=mysql\n\n### Count of DB:\n# db.num=1\n\n### Connect URL of DB:\n# db.url.0=jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\n# db.user=nacos\n# db.password=nacos\n```\n\n# 初始化数据库\n\n```\nmysqldump -h -u -p nacos < xx.sql\n```\n\n# 启动\n\n```bash\n./startup.sh -m standalone\n```\n\n# 编写service\n\n```\n\n[Unit]\nDescription=nacos\nAfter=network.target\n \n[Service]\nType=forking\nExecStart=/opt/nacos/bin/startup.sh -m standalone\nExecReload=/opt/nacos/bin/shutdown.sh\nExecStop=/opt/nacos/bin/shutdown.sh\nPrivateTmp=true\n \n[Install]  \nWantedBy=multi-user.target\n\n\n```\n\n```\nsystemctl start nacos\nsystemctl enable nacos\n```\n\n# 参考\n\nhttps://blog.csdn.net/weihuaya/article/details/108060847\n\n","slug":"运维/centos安装nacos","published":1,"updated":"2020-10-17T10:01:55.957Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblnr005u4tjexoxj345u","content":"<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><p>不同版本有点配置有点差别</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/alibaba/nacos/releases</span><br><span class=\"line\">https://github.com/alibaba/nacos/releases/download/1.3.2/nacos-server-1.3.2.zip</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置数据库\"><a href=\"#配置数据库\" class=\"headerlink\" title=\"配置数据库\"></a>配置数据库</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#*************** Config Module Related Configurations ***************#</span><br><span class=\"line\">### If use MySQL as datasource:</span><br><span class=\"line\"># spring.datasource.platform=mysql</span><br><span class=\"line\"></span><br><span class=\"line\">### Count of DB:</span><br><span class=\"line\"># db.num=1</span><br><span class=\"line\"></span><br><span class=\"line\">### Connect URL of DB:</span><br><span class=\"line\"># db.url.0=jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span><br><span class=\"line\"># db.user=nacos</span><br><span class=\"line\"># db.password=nacos</span><br></pre></td></tr></table></figure>\n<h1 id=\"初始化数据库\"><a href=\"#初始化数据库\" class=\"headerlink\" title=\"初始化数据库\"></a>初始化数据库</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -h -u -p nacos &lt; xx.sql</span><br></pre></td></tr></table></figure>\n<h1 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./startup.sh -m standalone</span><br></pre></td></tr></table></figure>\n<h1 id=\"编写service\"><a href=\"#编写service\" class=\"headerlink\" title=\"编写service\"></a>编写service</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=nacos</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"> </span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">ExecStart=/opt/nacos/bin/startup.sh -m standalone</span><br><span class=\"line\">ExecReload=/opt/nacos/bin/shutdown.sh</span><br><span class=\"line\">ExecStop=/opt/nacos/bin/shutdown.sh</span><br><span class=\"line\">PrivateTmp=true</span><br><span class=\"line\"> </span><br><span class=\"line\">[Install]  </span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start nacos</span><br><span class=\"line\">systemctl enable nacos</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/weihuaya/article/details/108060847\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weihuaya/article/details/108060847</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><p>不同版本有点配置有点差别</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/alibaba/nacos/releases</span><br><span class=\"line\">https://github.com/alibaba/nacos/releases/download/1.3.2/nacos-server-1.3.2.zip</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置数据库\"><a href=\"#配置数据库\" class=\"headerlink\" title=\"配置数据库\"></a>配置数据库</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#*************** Config Module Related Configurations ***************#</span><br><span class=\"line\">### If use MySQL as datasource:</span><br><span class=\"line\"># spring.datasource.platform=mysql</span><br><span class=\"line\"></span><br><span class=\"line\">### Count of DB:</span><br><span class=\"line\"># db.num=1</span><br><span class=\"line\"></span><br><span class=\"line\">### Connect URL of DB:</span><br><span class=\"line\"># db.url.0=jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span><br><span class=\"line\"># db.user=nacos</span><br><span class=\"line\"># db.password=nacos</span><br></pre></td></tr></table></figure>\n<h1 id=\"初始化数据库\"><a href=\"#初始化数据库\" class=\"headerlink\" title=\"初始化数据库\"></a>初始化数据库</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -h -u -p nacos &lt; xx.sql</span><br></pre></td></tr></table></figure>\n<h1 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./startup.sh -m standalone</span><br></pre></td></tr></table></figure>\n<h1 id=\"编写service\"><a href=\"#编写service\" class=\"headerlink\" title=\"编写service\"></a>编写service</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=nacos</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"> </span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">ExecStart=/opt/nacos/bin/startup.sh -m standalone</span><br><span class=\"line\">ExecReload=/opt/nacos/bin/shutdown.sh</span><br><span class=\"line\">ExecStop=/opt/nacos/bin/shutdown.sh</span><br><span class=\"line\">PrivateTmp=true</span><br><span class=\"line\"> </span><br><span class=\"line\">[Install]  </span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start nacos</span><br><span class=\"line\">systemctl enable nacos</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/weihuaya/article/details/108060847\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weihuaya/article/details/108060847</a></p>\n"},{"title":"centos安装nexus","date":"2020-09-25T03:00:00.000Z","_content":"\n","source":"_posts/运维/centos安装nexus.md","raw":"---\ntitle: centos安装nexus\ndate: 2020-9-25 11:00:00\n---\n\n","slug":"运维/centos安装nexus","published":1,"updated":"2020-10-17T10:01:55.958Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblnr005w4tjeu76u7w31","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"centos安装vnc","date":"2020-09-15T01:32:57.000Z","_content":"","source":"_posts/运维/centos安装vnc.md","raw":"---\ntitle: centos安装vnc\ndate: 2020-09-15 09:32:57\ntags:\n---\n","slug":"运维/centos安装vnc","published":1,"updated":"2020-09-20T03:22:55.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblnt005y4tjeyas2kj9b","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"centos安装mongdb","date":"2020-09-22T07:00:00.000Z","_content":"\n","source":"_posts/运维/centos安装mongdb.md","raw":"---\ntitle: centos安装mongdb\ndate: 2020-9-22 15:00:00\n---\n\n","slug":"运维/centos安装mongdb","published":1,"updated":"2020-10-17T10:01:55.957Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblnu005z4tjewnebx8p7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"centos配置网络","date":"2020-09-05T13:40:23.000Z","_content":"\ncentos8已经发布了，下载了一个体验一下，新安装好的centos8默认网卡是没有启动的，安装好后需要先配置网络。在`/etc/sysconfig/network-scripts`目录下存放着网卡的配置文件，文件名称是`ifcfg- 网卡名称`。\n\n#### 一 修改配置文件\n\n设置网络时首先打开配置文件，配置文件默认如下所示，如果使用dhcp自动获取ip，只需将`ONBOOT=no`修改为`ONBOOT=no`即可。\n\n```\n# 网卡配置文件按默认配置\n\nTYPE=Ethernet\nPROXY_METHOD=none\nBROWSER_ONLY=no\nBOOTPROTO=dhcp\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_FAILURE_FATAL=no\nIPV6_ADDR_GEN_MODE=stable-privacy\nNAME=ens33\nUUID=e4987998-a4ce-4cef-96f5-a3106a97f5bf\nDEVICE=ens33\nONBOOT=no  #如果使用dhcp分配ip的话，只需要将这里no改为yes，然后重启网络服务就行\n```\n\n如果需要配置静态ip，则按照以下修改方法修改\n\n```\nTYPE=Ethernet\nPROXY_METHOD=none\nBROWSER_ONLY=no\nBOOTPROTO=static   #将dhcp修改为stati表示使用静态ip\nDEFROUTE=yes\nIPADDR=192.168.128.129   #设置IP地址\nNETMASK=255.255.255.0    #设置子网掩码\nGATEWAY=192.168.128.1    #设置网关\nDNS1=114.114.114.114     #设置dns\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_FAILURE_FATAL=no\nIPV6_ADDR_GEN_MODE=stable-privacy\nNAME=ens33\nUUID=e4987998-a4ce-4cef-96f5-a3106a97f5bf\nDEVICE=ens33\nONBOOT=yes  #将no改为yes\n```\n\n#### 二 重启网络服务\n\n使用**nmcli c reload**命令重启网络服务，网络这块算是centos8改动较大的一块了，nmcli命令的参数如下所示：\n\n```\n[hk@localhost network-scripts]$ nmcli  -h\nUsage: nmcli [OPTIONS] OBJECT { COMMAND | help }\n\nOPTIONS\n  -o[verview]                                    overview mode (hide default values)\n  -t[erse]                                       terse output\n  -p[retty]                                      pretty output\n  -m[ode] tabular|multiline                      output mode\n  -c[olors] auto|yes|no                          whether to use colors in output\n  -f[ields] <field1,field2,...>|all|common       specify fields to output\n  -g[et-values] <field1,field2,...>|all|common   shortcut for -m tabular -t -f\n  -e[scape] yes|no                               escape columns separators in values\n  -a[sk]                                         ask for missing parameters\n  -s[how-secrets]                                allow displaying passwords\n  -w[ait] <seconds>                              set timeout waiting for finishing operations\n  -v[ersion]                                     show program version\n  -h[elp]                                        print this help\nOBJECT\n  g[eneral]       NetworkManager's general status and operations\n  n[etworking]    overall networking control\n  r[adio]         NetworkManager radio switches\n  c[onnection]    NetworkManager's connections  # 网络管理一般使用 nmcli c\n  d[evice]        devices managed by NetworkManager\n  a[gent]         NetworkManager secret agent or polkit agent\n  m[onitor]       monitor NetworkManager changes\n\n[hk@localhost network-scripts]$ \n```\n\n网络管理一般使用 `nmclli c`，用法如下：\n\n```\n[hk@localhost network-scripts]$ nmcli c -h\n\nUsage: nmcli connection { COMMAND | help }\nCOMMAND := { show | up | down | add | modify | clone | edit | delete | monitor | reload | load | import | export }\n\n  show [--active] [--order <order spec>]\n\n  show [--active] [id | uuid | path | apath] <ID> ...\n\n\n  up [[id | uuid | path] <ID>] [ifname <ifname>] [ap <BSSID>] [passwd-file <file with passwords>]\n\n  down [id | uuid | path | apath] <ID> ...\n\n  add COMMON_OPTIONS TYPE_SPECIFIC_OPTIONS SLAVE_OPTIONS IP_OPTIONS [-- ([+|-]<setting>.<property> <value>)+]\n\n  modify [--temporary] [id | uuid | path] <ID> ([+|-]<setting>.<property> <value>)+\n\n  clone [--temporary] [id | uuid | path ] <ID> <new name>\n\n  edit [id | uuid | path] <ID>\n  edit [type <new_con_type>] [con-name <new_con_name>]\n  delete [id | uuid | path] <ID>\n  monitor [id | uuid | path] <ID> ...\n  reload\n  load <filename> [ <filename>... ]\n  import [--temporary] type <type> file <file to import>\n  export [id | uuid | path] <ID> [<output file>]\n\n[hk@localhost network-scripts]$ \n```","source":"_posts/运维/centos配置网络.md","raw":"---\ntitle: centos配置网络\ndate: 2020-9-05 21:40:23\ntags:\n- linux\n---\n\ncentos8已经发布了，下载了一个体验一下，新安装好的centos8默认网卡是没有启动的，安装好后需要先配置网络。在`/etc/sysconfig/network-scripts`目录下存放着网卡的配置文件，文件名称是`ifcfg- 网卡名称`。\n\n#### 一 修改配置文件\n\n设置网络时首先打开配置文件，配置文件默认如下所示，如果使用dhcp自动获取ip，只需将`ONBOOT=no`修改为`ONBOOT=no`即可。\n\n```\n# 网卡配置文件按默认配置\n\nTYPE=Ethernet\nPROXY_METHOD=none\nBROWSER_ONLY=no\nBOOTPROTO=dhcp\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_FAILURE_FATAL=no\nIPV6_ADDR_GEN_MODE=stable-privacy\nNAME=ens33\nUUID=e4987998-a4ce-4cef-96f5-a3106a97f5bf\nDEVICE=ens33\nONBOOT=no  #如果使用dhcp分配ip的话，只需要将这里no改为yes，然后重启网络服务就行\n```\n\n如果需要配置静态ip，则按照以下修改方法修改\n\n```\nTYPE=Ethernet\nPROXY_METHOD=none\nBROWSER_ONLY=no\nBOOTPROTO=static   #将dhcp修改为stati表示使用静态ip\nDEFROUTE=yes\nIPADDR=192.168.128.129   #设置IP地址\nNETMASK=255.255.255.0    #设置子网掩码\nGATEWAY=192.168.128.1    #设置网关\nDNS1=114.114.114.114     #设置dns\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_FAILURE_FATAL=no\nIPV6_ADDR_GEN_MODE=stable-privacy\nNAME=ens33\nUUID=e4987998-a4ce-4cef-96f5-a3106a97f5bf\nDEVICE=ens33\nONBOOT=yes  #将no改为yes\n```\n\n#### 二 重启网络服务\n\n使用**nmcli c reload**命令重启网络服务，网络这块算是centos8改动较大的一块了，nmcli命令的参数如下所示：\n\n```\n[hk@localhost network-scripts]$ nmcli  -h\nUsage: nmcli [OPTIONS] OBJECT { COMMAND | help }\n\nOPTIONS\n  -o[verview]                                    overview mode (hide default values)\n  -t[erse]                                       terse output\n  -p[retty]                                      pretty output\n  -m[ode] tabular|multiline                      output mode\n  -c[olors] auto|yes|no                          whether to use colors in output\n  -f[ields] <field1,field2,...>|all|common       specify fields to output\n  -g[et-values] <field1,field2,...>|all|common   shortcut for -m tabular -t -f\n  -e[scape] yes|no                               escape columns separators in values\n  -a[sk]                                         ask for missing parameters\n  -s[how-secrets]                                allow displaying passwords\n  -w[ait] <seconds>                              set timeout waiting for finishing operations\n  -v[ersion]                                     show program version\n  -h[elp]                                        print this help\nOBJECT\n  g[eneral]       NetworkManager's general status and operations\n  n[etworking]    overall networking control\n  r[adio]         NetworkManager radio switches\n  c[onnection]    NetworkManager's connections  # 网络管理一般使用 nmcli c\n  d[evice]        devices managed by NetworkManager\n  a[gent]         NetworkManager secret agent or polkit agent\n  m[onitor]       monitor NetworkManager changes\n\n[hk@localhost network-scripts]$ \n```\n\n网络管理一般使用 `nmclli c`，用法如下：\n\n```\n[hk@localhost network-scripts]$ nmcli c -h\n\nUsage: nmcli connection { COMMAND | help }\nCOMMAND := { show | up | down | add | modify | clone | edit | delete | monitor | reload | load | import | export }\n\n  show [--active] [--order <order spec>]\n\n  show [--active] [id | uuid | path | apath] <ID> ...\n\n\n  up [[id | uuid | path] <ID>] [ifname <ifname>] [ap <BSSID>] [passwd-file <file with passwords>]\n\n  down [id | uuid | path | apath] <ID> ...\n\n  add COMMON_OPTIONS TYPE_SPECIFIC_OPTIONS SLAVE_OPTIONS IP_OPTIONS [-- ([+|-]<setting>.<property> <value>)+]\n\n  modify [--temporary] [id | uuid | path] <ID> ([+|-]<setting>.<property> <value>)+\n\n  clone [--temporary] [id | uuid | path ] <ID> <new name>\n\n  edit [id | uuid | path] <ID>\n  edit [type <new_con_type>] [con-name <new_con_name>]\n  delete [id | uuid | path] <ID>\n  monitor [id | uuid | path] <ID> ...\n  reload\n  load <filename> [ <filename>... ]\n  import [--temporary] type <type> file <file to import>\n  export [id | uuid | path] <ID> [<output file>]\n\n[hk@localhost network-scripts]$ \n```","slug":"运维/centos配置网络","published":1,"updated":"2020-09-20T03:22:55.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblnu00604tjesb9tncxh","content":"<p>centos8已经发布了，下载了一个体验一下，新安装好的centos8默认网卡是没有启动的，安装好后需要先配置网络。在<code>/etc/sysconfig/network-scripts</code>目录下存放着网卡的配置文件，文件名称是<code>ifcfg- 网卡名称</code>。</p>\n<h4 id=\"一-修改配置文件\"><a href=\"#一-修改配置文件\" class=\"headerlink\" title=\"一 修改配置文件\"></a>一 修改配置文件</h4><p>设置网络时首先打开配置文件，配置文件默认如下所示，如果使用dhcp自动获取ip，只需将<code>ONBOOT=no</code>修改为<code>ONBOOT=no</code>即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 网卡配置文件按默认配置</span><br><span class=\"line\"></span><br><span class=\"line\">TYPE=Ethernet</span><br><span class=\"line\">PROXY_METHOD=none</span><br><span class=\"line\">BROWSER_ONLY=no</span><br><span class=\"line\">BOOTPROTO=dhcp</span><br><span class=\"line\">DEFROUTE=yes</span><br><span class=\"line\">IPV4_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6INIT=yes</span><br><span class=\"line\">IPV6_AUTOCONF=yes</span><br><span class=\"line\">IPV6_DEFROUTE=yes</span><br><span class=\"line\">IPV6_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class=\"line\">NAME=ens33</span><br><span class=\"line\">UUID=e4987998-a4ce-4cef-96f5-a3106a97f5bf</span><br><span class=\"line\">DEVICE=ens33</span><br><span class=\"line\">ONBOOT=no  #如果使用dhcp分配ip的话，只需要将这里no改为yes，然后重启网络服务就行</span><br></pre></td></tr></table></figure>\n<p>如果需要配置静态ip，则按照以下修改方法修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TYPE=Ethernet</span><br><span class=\"line\">PROXY_METHOD=none</span><br><span class=\"line\">BROWSER_ONLY=no</span><br><span class=\"line\">BOOTPROTO=static   #将dhcp修改为stati表示使用静态ip</span><br><span class=\"line\">DEFROUTE=yes</span><br><span class=\"line\">IPADDR=192.168.128.129   #设置IP地址</span><br><span class=\"line\">NETMASK=255.255.255.0    #设置子网掩码</span><br><span class=\"line\">GATEWAY=192.168.128.1    #设置网关</span><br><span class=\"line\">DNS1=114.114.114.114     #设置dns</span><br><span class=\"line\">IPV4_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6INIT=yes</span><br><span class=\"line\">IPV6_AUTOCONF=yes</span><br><span class=\"line\">IPV6_DEFROUTE=yes</span><br><span class=\"line\">IPV6_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class=\"line\">NAME=ens33</span><br><span class=\"line\">UUID=e4987998-a4ce-4cef-96f5-a3106a97f5bf</span><br><span class=\"line\">DEVICE=ens33</span><br><span class=\"line\">ONBOOT=yes  #将no改为yes</span><br></pre></td></tr></table></figure>\n<h4 id=\"二-重启网络服务\"><a href=\"#二-重启网络服务\" class=\"headerlink\" title=\"二 重启网络服务\"></a>二 重启网络服务</h4><p>使用<strong>nmcli c reload</strong>命令重启网络服务，网络这块算是centos8改动较大的一块了，nmcli命令的参数如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[hk@localhost network-scripts]$ nmcli  -h</span><br><span class=\"line\">Usage: nmcli [OPTIONS] OBJECT &#123; COMMAND | help &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">OPTIONS</span><br><span class=\"line\">  -o[verview]                                    overview mode (hide default values)</span><br><span class=\"line\">  -t[erse]                                       terse output</span><br><span class=\"line\">  -p[retty]                                      pretty output</span><br><span class=\"line\">  -m[ode] tabular|multiline                      output mode</span><br><span class=\"line\">  -c[olors] auto|yes|no                          whether to use colors in output</span><br><span class=\"line\">  -f[ields] &lt;field1,field2,...&gt;|all|common       specify fields to output</span><br><span class=\"line\">  -g[et-values] &lt;field1,field2,...&gt;|all|common   shortcut for -m tabular -t -f</span><br><span class=\"line\">  -e[scape] yes|no                               escape columns separators in values</span><br><span class=\"line\">  -a[sk]                                         ask for missing parameters</span><br><span class=\"line\">  -s[how-secrets]                                allow displaying passwords</span><br><span class=\"line\">  -w[ait] &lt;seconds&gt;                              set timeout waiting for finishing operations</span><br><span class=\"line\">  -v[ersion]                                     show program version</span><br><span class=\"line\">  -h[elp]                                        print this help</span><br><span class=\"line\">OBJECT</span><br><span class=\"line\">  g[eneral]       NetworkManager&apos;s general status and operations</span><br><span class=\"line\">  n[etworking]    overall networking control</span><br><span class=\"line\">  r[adio]         NetworkManager radio switches</span><br><span class=\"line\">  c[onnection]    NetworkManager&apos;s connections  # 网络管理一般使用 nmcli c</span><br><span class=\"line\">  d[evice]        devices managed by NetworkManager</span><br><span class=\"line\">  a[gent]         NetworkManager secret agent or polkit agent</span><br><span class=\"line\">  m[onitor]       monitor NetworkManager changes</span><br><span class=\"line\"></span><br><span class=\"line\">[hk@localhost network-scripts]$</span><br></pre></td></tr></table></figure>\n<p>网络管理一般使用 <code>nmclli c</code>，用法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[hk@localhost network-scripts]$ nmcli c -h</span><br><span class=\"line\"></span><br><span class=\"line\">Usage: nmcli connection &#123; COMMAND | help &#125;</span><br><span class=\"line\">COMMAND := &#123; show | up | down | add | modify | clone | edit | delete | monitor | reload | load | import | export &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  show [--active] [--order &lt;order spec&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\">  show [--active] [id | uuid | path | apath] &lt;ID&gt; ...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  up [[id | uuid | path] &lt;ID&gt;] [ifname &lt;ifname&gt;] [ap &lt;BSSID&gt;] [passwd-file &lt;file with passwords&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\">  down [id | uuid | path | apath] &lt;ID&gt; ...</span><br><span class=\"line\"></span><br><span class=\"line\">  add COMMON_OPTIONS TYPE_SPECIFIC_OPTIONS SLAVE_OPTIONS IP_OPTIONS [-- ([+|-]&lt;setting&gt;.&lt;property&gt; &lt;value&gt;)+]</span><br><span class=\"line\"></span><br><span class=\"line\">  modify [--temporary] [id | uuid | path] &lt;ID&gt; ([+|-]&lt;setting&gt;.&lt;property&gt; &lt;value&gt;)+</span><br><span class=\"line\"></span><br><span class=\"line\">  clone [--temporary] [id | uuid | path ] &lt;ID&gt; &lt;new name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  edit [id | uuid | path] &lt;ID&gt;</span><br><span class=\"line\">  edit [type &lt;new_con_type&gt;] [con-name &lt;new_con_name&gt;]</span><br><span class=\"line\">  delete [id | uuid | path] &lt;ID&gt;</span><br><span class=\"line\">  monitor [id | uuid | path] &lt;ID&gt; ...</span><br><span class=\"line\">  reload</span><br><span class=\"line\">  load &lt;filename&gt; [ &lt;filename&gt;... ]</span><br><span class=\"line\">  import [--temporary] type &lt;type&gt; file &lt;file to import&gt;</span><br><span class=\"line\">  export [id | uuid | path] &lt;ID&gt; [&lt;output file&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\">[hk@localhost network-scripts]$</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>centos8已经发布了，下载了一个体验一下，新安装好的centos8默认网卡是没有启动的，安装好后需要先配置网络。在<code>/etc/sysconfig/network-scripts</code>目录下存放着网卡的配置文件，文件名称是<code>ifcfg- 网卡名称</code>。</p>\n<h4 id=\"一-修改配置文件\"><a href=\"#一-修改配置文件\" class=\"headerlink\" title=\"一 修改配置文件\"></a>一 修改配置文件</h4><p>设置网络时首先打开配置文件，配置文件默认如下所示，如果使用dhcp自动获取ip，只需将<code>ONBOOT=no</code>修改为<code>ONBOOT=no</code>即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 网卡配置文件按默认配置</span><br><span class=\"line\"></span><br><span class=\"line\">TYPE=Ethernet</span><br><span class=\"line\">PROXY_METHOD=none</span><br><span class=\"line\">BROWSER_ONLY=no</span><br><span class=\"line\">BOOTPROTO=dhcp</span><br><span class=\"line\">DEFROUTE=yes</span><br><span class=\"line\">IPV4_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6INIT=yes</span><br><span class=\"line\">IPV6_AUTOCONF=yes</span><br><span class=\"line\">IPV6_DEFROUTE=yes</span><br><span class=\"line\">IPV6_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class=\"line\">NAME=ens33</span><br><span class=\"line\">UUID=e4987998-a4ce-4cef-96f5-a3106a97f5bf</span><br><span class=\"line\">DEVICE=ens33</span><br><span class=\"line\">ONBOOT=no  #如果使用dhcp分配ip的话，只需要将这里no改为yes，然后重启网络服务就行</span><br></pre></td></tr></table></figure>\n<p>如果需要配置静态ip，则按照以下修改方法修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TYPE=Ethernet</span><br><span class=\"line\">PROXY_METHOD=none</span><br><span class=\"line\">BROWSER_ONLY=no</span><br><span class=\"line\">BOOTPROTO=static   #将dhcp修改为stati表示使用静态ip</span><br><span class=\"line\">DEFROUTE=yes</span><br><span class=\"line\">IPADDR=192.168.128.129   #设置IP地址</span><br><span class=\"line\">NETMASK=255.255.255.0    #设置子网掩码</span><br><span class=\"line\">GATEWAY=192.168.128.1    #设置网关</span><br><span class=\"line\">DNS1=114.114.114.114     #设置dns</span><br><span class=\"line\">IPV4_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6INIT=yes</span><br><span class=\"line\">IPV6_AUTOCONF=yes</span><br><span class=\"line\">IPV6_DEFROUTE=yes</span><br><span class=\"line\">IPV6_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class=\"line\">NAME=ens33</span><br><span class=\"line\">UUID=e4987998-a4ce-4cef-96f5-a3106a97f5bf</span><br><span class=\"line\">DEVICE=ens33</span><br><span class=\"line\">ONBOOT=yes  #将no改为yes</span><br></pre></td></tr></table></figure>\n<h4 id=\"二-重启网络服务\"><a href=\"#二-重启网络服务\" class=\"headerlink\" title=\"二 重启网络服务\"></a>二 重启网络服务</h4><p>使用<strong>nmcli c reload</strong>命令重启网络服务，网络这块算是centos8改动较大的一块了，nmcli命令的参数如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[hk@localhost network-scripts]$ nmcli  -h</span><br><span class=\"line\">Usage: nmcli [OPTIONS] OBJECT &#123; COMMAND | help &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">OPTIONS</span><br><span class=\"line\">  -o[verview]                                    overview mode (hide default values)</span><br><span class=\"line\">  -t[erse]                                       terse output</span><br><span class=\"line\">  -p[retty]                                      pretty output</span><br><span class=\"line\">  -m[ode] tabular|multiline                      output mode</span><br><span class=\"line\">  -c[olors] auto|yes|no                          whether to use colors in output</span><br><span class=\"line\">  -f[ields] &lt;field1,field2,...&gt;|all|common       specify fields to output</span><br><span class=\"line\">  -g[et-values] &lt;field1,field2,...&gt;|all|common   shortcut for -m tabular -t -f</span><br><span class=\"line\">  -e[scape] yes|no                               escape columns separators in values</span><br><span class=\"line\">  -a[sk]                                         ask for missing parameters</span><br><span class=\"line\">  -s[how-secrets]                                allow displaying passwords</span><br><span class=\"line\">  -w[ait] &lt;seconds&gt;                              set timeout waiting for finishing operations</span><br><span class=\"line\">  -v[ersion]                                     show program version</span><br><span class=\"line\">  -h[elp]                                        print this help</span><br><span class=\"line\">OBJECT</span><br><span class=\"line\">  g[eneral]       NetworkManager&apos;s general status and operations</span><br><span class=\"line\">  n[etworking]    overall networking control</span><br><span class=\"line\">  r[adio]         NetworkManager radio switches</span><br><span class=\"line\">  c[onnection]    NetworkManager&apos;s connections  # 网络管理一般使用 nmcli c</span><br><span class=\"line\">  d[evice]        devices managed by NetworkManager</span><br><span class=\"line\">  a[gent]         NetworkManager secret agent or polkit agent</span><br><span class=\"line\">  m[onitor]       monitor NetworkManager changes</span><br><span class=\"line\"></span><br><span class=\"line\">[hk@localhost network-scripts]$</span><br></pre></td></tr></table></figure>\n<p>网络管理一般使用 <code>nmclli c</code>，用法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[hk@localhost network-scripts]$ nmcli c -h</span><br><span class=\"line\"></span><br><span class=\"line\">Usage: nmcli connection &#123; COMMAND | help &#125;</span><br><span class=\"line\">COMMAND := &#123; show | up | down | add | modify | clone | edit | delete | monitor | reload | load | import | export &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  show [--active] [--order &lt;order spec&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\">  show [--active] [id | uuid | path | apath] &lt;ID&gt; ...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  up [[id | uuid | path] &lt;ID&gt;] [ifname &lt;ifname&gt;] [ap &lt;BSSID&gt;] [passwd-file &lt;file with passwords&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\">  down [id | uuid | path | apath] &lt;ID&gt; ...</span><br><span class=\"line\"></span><br><span class=\"line\">  add COMMON_OPTIONS TYPE_SPECIFIC_OPTIONS SLAVE_OPTIONS IP_OPTIONS [-- ([+|-]&lt;setting&gt;.&lt;property&gt; &lt;value&gt;)+]</span><br><span class=\"line\"></span><br><span class=\"line\">  modify [--temporary] [id | uuid | path] &lt;ID&gt; ([+|-]&lt;setting&gt;.&lt;property&gt; &lt;value&gt;)+</span><br><span class=\"line\"></span><br><span class=\"line\">  clone [--temporary] [id | uuid | path ] &lt;ID&gt; &lt;new name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  edit [id | uuid | path] &lt;ID&gt;</span><br><span class=\"line\">  edit [type &lt;new_con_type&gt;] [con-name &lt;new_con_name&gt;]</span><br><span class=\"line\">  delete [id | uuid | path] &lt;ID&gt;</span><br><span class=\"line\">  monitor [id | uuid | path] &lt;ID&gt; ...</span><br><span class=\"line\">  reload</span><br><span class=\"line\">  load &lt;filename&gt; [ &lt;filename&gt;... ]</span><br><span class=\"line\">  import [--temporary] type &lt;type&gt; file &lt;file to import&gt;</span><br><span class=\"line\">  export [id | uuid | path] &lt;ID&gt; [&lt;output file&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\">[hk@localhost network-scripts]$</span><br></pre></td></tr></table></figure>"},{"date":"2020-06-05T07:54:05.000Z","_content":"\n# 简述\n\nfrp是有个内网穿透的工具，分为客户端和服务端。客户端的程序名称是frpc，服务端的程序名称是frps。\n\n# 服务器\n\n## 下载\n\n```\n// lorawan gateway 下载mipsle版本\nhttps://github.com/fatedier/frp/releases\n```\n\n\n\n## 配置文件\n\n```toml\n# frps.ini\n[common]\nbind_port = 7000   # 用于与客户端之间通信\n```\n\n## 运行程序\n\n```bash\n./frps -c ./frps.ini\n```\n\n# 客户端\n\n## 配置文件\n\n详细看<https://github.com/fatedier/frp/blob/master/README_zh.md#dashboard>\n\n```toml\n# frpc.ini\n[common]\nserver_addr = x.x.x.x\nserver_port = 7000\n# frp multi user 插件\nuser = user1\nmeta_token = 123\n\n[web]\ntype = http\nlocal_port = 80\ncustom_domains = www.yourdomain.com\n\n[ssh]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 22\nremote_port = 6000\n```\n\n## 运行程序\n\n```bash\n./frpc -c ./frpc.ini\n```\n\n## openwrt开机启动\n\n1. 配置服务\n\n   ```\n   ## /etc/init.d/frpc\n   \n   \n   #!/bin/sh /etc/rc.common\n   # \"new\" style init script\n   # Look at /lib/functions/service.sh on a running system for explanations of what other SERVICE_\n   # options you can use, and when you might want them.\n   \n   START=80\n   APP=frpc\n   \n   start() {\n         service_start /usr/sbin/$APP -c /etc/frpc.ini > /usr/frpc.log &\n   }\n   \n   stop() {\n           service_stop /usr/sbin/$APP\n   }\n   ```\n\n2. 开机启动\n\n   ```\n   chmod +x /etc/init.d/frpc\n   /etc/init.d/frpc enable\n   /etc/init.d/frpc start\n   ```\n","source":"_posts/运维/frp搭建.md","raw":"---\n##title: frp搭建\ndate: 2020-06-05 15:54:05\ntags:\n- frp\n---\n\n# 简述\n\nfrp是有个内网穿透的工具，分为客户端和服务端。客户端的程序名称是frpc，服务端的程序名称是frps。\n\n# 服务器\n\n## 下载\n\n```\n// lorawan gateway 下载mipsle版本\nhttps://github.com/fatedier/frp/releases\n```\n\n\n\n## 配置文件\n\n```toml\n# frps.ini\n[common]\nbind_port = 7000   # 用于与客户端之间通信\n```\n\n## 运行程序\n\n```bash\n./frps -c ./frps.ini\n```\n\n# 客户端\n\n## 配置文件\n\n详细看<https://github.com/fatedier/frp/blob/master/README_zh.md#dashboard>\n\n```toml\n# frpc.ini\n[common]\nserver_addr = x.x.x.x\nserver_port = 7000\n# frp multi user 插件\nuser = user1\nmeta_token = 123\n\n[web]\ntype = http\nlocal_port = 80\ncustom_domains = www.yourdomain.com\n\n[ssh]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 22\nremote_port = 6000\n```\n\n## 运行程序\n\n```bash\n./frpc -c ./frpc.ini\n```\n\n## openwrt开机启动\n\n1. 配置服务\n\n   ```\n   ## /etc/init.d/frpc\n   \n   \n   #!/bin/sh /etc/rc.common\n   # \"new\" style init script\n   # Look at /lib/functions/service.sh on a running system for explanations of what other SERVICE_\n   # options you can use, and when you might want them.\n   \n   START=80\n   APP=frpc\n   \n   start() {\n         service_start /usr/sbin/$APP -c /etc/frpc.ini > /usr/frpc.log &\n   }\n   \n   stop() {\n           service_stop /usr/sbin/$APP\n   }\n   ```\n\n2. 开机启动\n\n   ```\n   chmod +x /etc/init.d/frpc\n   /etc/init.d/frpc enable\n   /etc/init.d/frpc start\n   ```\n","slug":"运维/frp搭建","published":1,"updated":"2020-09-20T03:22:55.586Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblnv00614tje5c0eag1k","content":"<h1 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h1><p>frp是有个内网穿透的工具，分为客户端和服务端。客户端的程序名称是frpc，服务端的程序名称是frps。</p>\n<h1 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h1><h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// lorawan gateway 下载mipsle版本</span><br><span class=\"line\">https://github.com/fatedier/frp/releases</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># frps.ini</span></span><br><span class=\"line\"><span class=\"section\">[common]</span></span><br><span class=\"line\"><span class=\"attr\">bind_port</span> = <span class=\"number\">7000</span>   # 用于与客户端之间通信</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行程序\"><a href=\"#运行程序\" class=\"headerlink\" title=\"运行程序\"></a>运行程序</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure>\n<h1 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h1><h2 id=\"配置文件-1\"><a href=\"#配置文件-1\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>详细看<a href=\"https://github.com/fatedier/frp/blob/master/README_zh.md#dashboard\" target=\"_blank\" rel=\"noopener\">https://github.com/fatedier/frp/blob/master/README_zh.md#dashboard</a></p>\n<figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># frpc.ini</span></span><br><span class=\"line\"><span class=\"section\">[common]</span></span><br><span class=\"line\"><span class=\"attr\">server_addr</span> = x.x.x.x</span><br><span class=\"line\"><span class=\"attr\">server_port</span> = <span class=\"number\">7000</span></span><br><span class=\"line\"><span class=\"comment\"># frp multi user 插件</span></span><br><span class=\"line\"><span class=\"attr\">user</span> = user1</span><br><span class=\"line\"><span class=\"attr\">meta_token</span> = <span class=\"number\">123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[web]</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = http</span><br><span class=\"line\"><span class=\"attr\">local_port</span> = <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"attr\">custom_domains</span> = www.yourdomain.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[ssh]</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = tcp</span><br><span class=\"line\"><span class=\"attr\">local_ip</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span></span><br><span class=\"line\"><span class=\"attr\">local_port</span> = <span class=\"number\">22</span></span><br><span class=\"line\"><span class=\"attr\">remote_port</span> = <span class=\"number\">6000</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"运行程序-1\"><a href=\"#运行程序-1\" class=\"headerlink\" title=\"运行程序\"></a>运行程序</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure>\n<h2 id=\"openwrt开机启动\"><a href=\"#openwrt开机启动\" class=\"headerlink\" title=\"openwrt开机启动\"></a>openwrt开机启动</h2><ol>\n<li><p>配置服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## /etc/init.d/frpc</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#!/bin/sh /etc/rc.common</span><br><span class=\"line\"># &quot;new&quot; style init script</span><br><span class=\"line\"># Look at /lib/functions/service.sh on a running system for explanations of what other SERVICE_</span><br><span class=\"line\"># options you can use, and when you might want them.</span><br><span class=\"line\"></span><br><span class=\"line\">START=80</span><br><span class=\"line\">APP=frpc</span><br><span class=\"line\"></span><br><span class=\"line\">start() &#123;</span><br><span class=\"line\">      service_start /usr/sbin/$APP -c /etc/frpc.ini &gt; /usr/frpc.log &amp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">stop() &#123;</span><br><span class=\"line\">        service_stop /usr/sbin/$APP</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开机启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /etc/init.d/frpc</span><br><span class=\"line\">/etc/init.d/frpc enable</span><br><span class=\"line\">/etc/init.d/frpc start</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h1><p>frp是有个内网穿透的工具，分为客户端和服务端。客户端的程序名称是frpc，服务端的程序名称是frps。</p>\n<h1 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h1><h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// lorawan gateway 下载mipsle版本</span><br><span class=\"line\">https://github.com/fatedier/frp/releases</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># frps.ini</span></span><br><span class=\"line\"><span class=\"section\">[common]</span></span><br><span class=\"line\"><span class=\"attr\">bind_port</span> = <span class=\"number\">7000</span>   # 用于与客户端之间通信</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行程序\"><a href=\"#运行程序\" class=\"headerlink\" title=\"运行程序\"></a>运行程序</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure>\n<h1 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h1><h2 id=\"配置文件-1\"><a href=\"#配置文件-1\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>详细看<a href=\"https://github.com/fatedier/frp/blob/master/README_zh.md#dashboard\" target=\"_blank\" rel=\"noopener\">https://github.com/fatedier/frp/blob/master/README_zh.md#dashboard</a></p>\n<figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># frpc.ini</span></span><br><span class=\"line\"><span class=\"section\">[common]</span></span><br><span class=\"line\"><span class=\"attr\">server_addr</span> = x.x.x.x</span><br><span class=\"line\"><span class=\"attr\">server_port</span> = <span class=\"number\">7000</span></span><br><span class=\"line\"><span class=\"comment\"># frp multi user 插件</span></span><br><span class=\"line\"><span class=\"attr\">user</span> = user1</span><br><span class=\"line\"><span class=\"attr\">meta_token</span> = <span class=\"number\">123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[web]</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = http</span><br><span class=\"line\"><span class=\"attr\">local_port</span> = <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"attr\">custom_domains</span> = www.yourdomain.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[ssh]</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = tcp</span><br><span class=\"line\"><span class=\"attr\">local_ip</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span></span><br><span class=\"line\"><span class=\"attr\">local_port</span> = <span class=\"number\">22</span></span><br><span class=\"line\"><span class=\"attr\">remote_port</span> = <span class=\"number\">6000</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"运行程序-1\"><a href=\"#运行程序-1\" class=\"headerlink\" title=\"运行程序\"></a>运行程序</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure>\n<h2 id=\"openwrt开机启动\"><a href=\"#openwrt开机启动\" class=\"headerlink\" title=\"openwrt开机启动\"></a>openwrt开机启动</h2><ol>\n<li><p>配置服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## /etc/init.d/frpc</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#!/bin/sh /etc/rc.common</span><br><span class=\"line\"># &quot;new&quot; style init script</span><br><span class=\"line\"># Look at /lib/functions/service.sh on a running system for explanations of what other SERVICE_</span><br><span class=\"line\"># options you can use, and when you might want them.</span><br><span class=\"line\"></span><br><span class=\"line\">START=80</span><br><span class=\"line\">APP=frpc</span><br><span class=\"line\"></span><br><span class=\"line\">start() &#123;</span><br><span class=\"line\">      service_start /usr/sbin/$APP -c /etc/frpc.ini &gt; /usr/frpc.log &amp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">stop() &#123;</span><br><span class=\"line\">        service_stop /usr/sbin/$APP</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开机启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /etc/init.d/frpc</span><br><span class=\"line\">/etc/init.d/frpc enable</span><br><span class=\"line\">/etc/init.d/frpc start</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"centos安装rockermq","date":"2020-09-19T10:00:00.000Z","_content":"\n###### 一、安装jdk 1.8\n\n1. jdk1.8 资源下载\n\n2. 上传至服务器目录，解压（以上传至root 目录为例）\n\n```linux\ntar -zxvf jdk-8u221-linux-x64.tar.gz\n```\n\n1. 将解压后的文件夹移动到/usr/local目录下\n\n```linux\nmv jdk1.8.0_221 /usr/local/\n```\n\n1. 编辑以下文件，配置java 环境\n\n```linux\nvim /etc/profile\n```\n\n1. 具体java 环境配置:\n\n```linux\nexport JAVA_HOME=/usr/local/jdk1.8.0_221\nexport JRE_HOME=${JAVA_HOME}/jre\nexport CLASSPATH=.:${JAVA_HOME}/lib/dt.JAVA_HOME/lib/tools.jar:${JRE_HOME}/lib\nexport PATH=${JAVA_HOME}/bin:${PATH}\n```\n\n###### 此处顺便配置rocketmq 环境\n\n```bash\nexport NAMESRV_ADDR=127.0.0.1:9876\n```\n\n6.刷新文件，使配置立即生效\n\n```linux\nsource /etc/profile\n```\n\n1. 查看是否安装成功\n\n```linux\njava -version\n```\n\n8.配置成功,将会看到以下类似信息\n\n```css\njava version \"1.8.0_221\"\nJava(TM) SE Runtime Environment (build 1.8.0_221-b11)\nJava HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)\n```\n\n###### 注意：使用openjdk 安装的话在配置rocketMq时候会出现（JAVA_HOME）问题，当时使用了很多方法，都没有成功，最好还是推荐使用这种方式吧。\n\n###### 二、安装rocketMQ\n\n1. 直接下载安装包（以4.5.1为例）\n    官网：[https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.5.1/rocketmq-all-4.5.1-bin-release.zip](https://links.jianshu.com/go?to=https%3A%2F%2Fwww.apache.org%2Fdyn%2Fcloser.cgi%3Fpath%3Drocketmq%2F4.5.1%2Frocketmq-all-4.5.1-bin-release.zip) \n\n###### 注意：不要下载源码包，否则是没有bin目录的\n\n```ruby\nwget http://mirrors.tuna.tsinghua.edu.cn/apache/rocketmq/4.5.1/rocketmq-all-4.5.1-bin-release.zip\n```\n\n2.解压,将会得到 rocketmq-all-4.5.1-bin-release 文件夹\n\n```css\nunzip rocketmq-all-4.5.1-bin-release.zip\n```\n\n3.进入bin 目录 修改配置(分别修改runserver.sh 以及 runbroker.sh，因为默认配置内存过大，可能导致启动失败)\n\n```bash\ncd /root/rocketmq-all-4.5.1-bin-release/bin/\n```\n\n1. 修改 runserver.sh 文件\n\n\n\n   ![img](https:////upload-images.jianshu.io/upload_images/12596656-c90d7cc4f81e1343.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1141/format/webp)\n\n   修改位置\n\n```bash\nvim runbroker.sh\n##使用快捷键 i 开启编辑模式\n##找到以下配置，将xms/xmx/xmn 分别修改成以下数值（视机器配置而定）\nJAVA_OPT=\"${JAVA_OPT} -server -Xms512m -Xmx512m -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\"\n##保存\nwq\n```\n\n1. 修改 runbroker.sh\n\n\n\n   ![img](https:////upload-images.jianshu.io/upload_images/12596656-50cf906fa3423e9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/604/format/webp)\n\n   修改位置\n\n```bash\nvim runbroker.sh\n##使用快捷键 i 开启编辑模式\n##具体数值视机器而定\nJAVA_OPT=\"${JAVA_OPT} -server -Xms128m -Xmx256m -Xmn256m\"\n##保存\nwq\n```\n\n修改配置文件\n\n```css\nvim broker.conf \n```\n\n新增如下选项\n\n```xml\nbrokerIP1=xxxxxx(你的服务器公网ip)\n```\n\n1. 分别后台启动 runserver.sh 以及 runbroker.sh\n\n```bash\n##启动runserver\nnohup sh mqnamesrv &\n##以配置文件启动runbroker\nnohup sh mqbroker -n localhost:9876 -c /root/rocketmq-all-4.5.1-bin-release/conf/broker.conf &\n```\n\n7.查看启动是否成功\n\n```undefined\njps\n```\n\n1. 启动成功(可以看到NamesrvStartup以及BrokerStartup)\n\n```undefined\n16065 Jps\n9679 NamesrvStartup\n7887 jar\n11279 BrokerStartup\n```\n\n10.启动成功日志\n\n```cpp\ntail -f ~/logs/rocketmqlogs/namesrv.log\ntail -f ~/logs/rocketmqlogs/broker.log\n```\n\n11.如果启动失败，请查看失败日志\n\n```csharp\ncat nohup.out\n```\n\n###### 三、关于防火墙以及安全组规则配置\n\n**首先，请在你的云服务器配置安全组规则通道 9876 端口**\n **其次，centos7默认使用firewalld防火墙，而不是iptables，卸载firewalld，再安装iptables**\n\n```csharp\n##卸载firewalld\nyum remove firewalld\n##安装iptables\nyum install iptables-services\n##查看防火墙状态\nservice iptables status\n##停止防火墙\nservice iptables stop\n```\n\n###### 四、SpringBoot整合监视台（rocketmq-externals插件）\n\n[GITHUB地址](https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fapache%2Frocketmq-externals)\n 下载[rocketmq-console](https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fapache%2Frocketmq-externals%2Ftree%2Fmaster%2Frocketmq-console)模块即可\n 修改配置文件\n\n```properties\nrocketmq.config.namesrvAddr=你的公网IP:9876\n##如果你版本小于3.5.8，下面应该配置为false\nrocketmq.config.isVIPChannel=false\n```\n\n启动即可\n\n```\nDescription=rockermq name service\nRequires=network-online.target\nAfter=network-online.target\n\n[Service]\nType=simple\nUser=anonymous\nWorkingDirectory=/opt/rocketmq\nExecStart=/opt/rocketmq/bin/mqnamesrv\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n```\n\n","source":"_posts/运维/centos安装rocketmq.md","raw":"---\ntitle: centos安装rockermq\ndate: 2020-9-19 18:00:00\n---\n\n###### 一、安装jdk 1.8\n\n1. jdk1.8 资源下载\n\n2. 上传至服务器目录，解压（以上传至root 目录为例）\n\n```linux\ntar -zxvf jdk-8u221-linux-x64.tar.gz\n```\n\n1. 将解压后的文件夹移动到/usr/local目录下\n\n```linux\nmv jdk1.8.0_221 /usr/local/\n```\n\n1. 编辑以下文件，配置java 环境\n\n```linux\nvim /etc/profile\n```\n\n1. 具体java 环境配置:\n\n```linux\nexport JAVA_HOME=/usr/local/jdk1.8.0_221\nexport JRE_HOME=${JAVA_HOME}/jre\nexport CLASSPATH=.:${JAVA_HOME}/lib/dt.JAVA_HOME/lib/tools.jar:${JRE_HOME}/lib\nexport PATH=${JAVA_HOME}/bin:${PATH}\n```\n\n###### 此处顺便配置rocketmq 环境\n\n```bash\nexport NAMESRV_ADDR=127.0.0.1:9876\n```\n\n6.刷新文件，使配置立即生效\n\n```linux\nsource /etc/profile\n```\n\n1. 查看是否安装成功\n\n```linux\njava -version\n```\n\n8.配置成功,将会看到以下类似信息\n\n```css\njava version \"1.8.0_221\"\nJava(TM) SE Runtime Environment (build 1.8.0_221-b11)\nJava HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)\n```\n\n###### 注意：使用openjdk 安装的话在配置rocketMq时候会出现（JAVA_HOME）问题，当时使用了很多方法，都没有成功，最好还是推荐使用这种方式吧。\n\n###### 二、安装rocketMQ\n\n1. 直接下载安装包（以4.5.1为例）\n    官网：[https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.5.1/rocketmq-all-4.5.1-bin-release.zip](https://links.jianshu.com/go?to=https%3A%2F%2Fwww.apache.org%2Fdyn%2Fcloser.cgi%3Fpath%3Drocketmq%2F4.5.1%2Frocketmq-all-4.5.1-bin-release.zip) \n\n###### 注意：不要下载源码包，否则是没有bin目录的\n\n```ruby\nwget http://mirrors.tuna.tsinghua.edu.cn/apache/rocketmq/4.5.1/rocketmq-all-4.5.1-bin-release.zip\n```\n\n2.解压,将会得到 rocketmq-all-4.5.1-bin-release 文件夹\n\n```css\nunzip rocketmq-all-4.5.1-bin-release.zip\n```\n\n3.进入bin 目录 修改配置(分别修改runserver.sh 以及 runbroker.sh，因为默认配置内存过大，可能导致启动失败)\n\n```bash\ncd /root/rocketmq-all-4.5.1-bin-release/bin/\n```\n\n1. 修改 runserver.sh 文件\n\n\n\n   ![img](https:////upload-images.jianshu.io/upload_images/12596656-c90d7cc4f81e1343.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1141/format/webp)\n\n   修改位置\n\n```bash\nvim runbroker.sh\n##使用快捷键 i 开启编辑模式\n##找到以下配置，将xms/xmx/xmn 分别修改成以下数值（视机器配置而定）\nJAVA_OPT=\"${JAVA_OPT} -server -Xms512m -Xmx512m -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\"\n##保存\nwq\n```\n\n1. 修改 runbroker.sh\n\n\n\n   ![img](https:////upload-images.jianshu.io/upload_images/12596656-50cf906fa3423e9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/604/format/webp)\n\n   修改位置\n\n```bash\nvim runbroker.sh\n##使用快捷键 i 开启编辑模式\n##具体数值视机器而定\nJAVA_OPT=\"${JAVA_OPT} -server -Xms128m -Xmx256m -Xmn256m\"\n##保存\nwq\n```\n\n修改配置文件\n\n```css\nvim broker.conf \n```\n\n新增如下选项\n\n```xml\nbrokerIP1=xxxxxx(你的服务器公网ip)\n```\n\n1. 分别后台启动 runserver.sh 以及 runbroker.sh\n\n```bash\n##启动runserver\nnohup sh mqnamesrv &\n##以配置文件启动runbroker\nnohup sh mqbroker -n localhost:9876 -c /root/rocketmq-all-4.5.1-bin-release/conf/broker.conf &\n```\n\n7.查看启动是否成功\n\n```undefined\njps\n```\n\n1. 启动成功(可以看到NamesrvStartup以及BrokerStartup)\n\n```undefined\n16065 Jps\n9679 NamesrvStartup\n7887 jar\n11279 BrokerStartup\n```\n\n10.启动成功日志\n\n```cpp\ntail -f ~/logs/rocketmqlogs/namesrv.log\ntail -f ~/logs/rocketmqlogs/broker.log\n```\n\n11.如果启动失败，请查看失败日志\n\n```csharp\ncat nohup.out\n```\n\n###### 三、关于防火墙以及安全组规则配置\n\n**首先，请在你的云服务器配置安全组规则通道 9876 端口**\n **其次，centos7默认使用firewalld防火墙，而不是iptables，卸载firewalld，再安装iptables**\n\n```csharp\n##卸载firewalld\nyum remove firewalld\n##安装iptables\nyum install iptables-services\n##查看防火墙状态\nservice iptables status\n##停止防火墙\nservice iptables stop\n```\n\n###### 四、SpringBoot整合监视台（rocketmq-externals插件）\n\n[GITHUB地址](https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fapache%2Frocketmq-externals)\n 下载[rocketmq-console](https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fapache%2Frocketmq-externals%2Ftree%2Fmaster%2Frocketmq-console)模块即可\n 修改配置文件\n\n```properties\nrocketmq.config.namesrvAddr=你的公网IP:9876\n##如果你版本小于3.5.8，下面应该配置为false\nrocketmq.config.isVIPChannel=false\n```\n\n启动即可\n\n```\nDescription=rockermq name service\nRequires=network-online.target\nAfter=network-online.target\n\n[Service]\nType=simple\nUser=anonymous\nWorkingDirectory=/opt/rocketmq\nExecStart=/opt/rocketmq/bin/mqnamesrv\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n```\n\n","slug":"运维/centos安装rocketmq","published":1,"updated":"2020-09-20T03:22:55.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblnw00634tjeaqx6blux","content":"<h6 id=\"一、安装jdk-1-8\"><a href=\"#一、安装jdk-1-8\" class=\"headerlink\" title=\"一、安装jdk 1.8\"></a>一、安装jdk 1.8</h6><ol>\n<li><p>jdk1.8 资源下载</p>\n</li>\n<li><p>上传至服务器目录，解压（以上传至root 目录为例）</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf jdk-8u221-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>\n<ol>\n<li>将解压后的文件夹移动到/usr/local目录下</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv jdk1.8.0_221 /usr/local/</span><br></pre></td></tr></table></figure>\n<ol>\n<li>编辑以下文件，配置java 环境</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br></pre></td></tr></table></figure>\n<ol>\n<li>具体java 环境配置:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/local/jdk1.8.0_221</span><br><span class=\"line\">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class=\"line\">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib/dt.JAVA_HOME/lib/tools.jar:$&#123;JRE_HOME&#125;/lib</span><br><span class=\"line\">export PATH=$&#123;JAVA_HOME&#125;/bin:$&#123;PATH&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"此处顺便配置rocketmq-环境\"><a href=\"#此处顺便配置rocketmq-环境\" class=\"headerlink\" title=\"此处顺便配置rocketmq 环境\"></a>此处顺便配置rocketmq 环境</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> NAMESRV_ADDR=127.0.0.1:9876</span><br></pre></td></tr></table></figure>\n<p>6.刷新文件，使配置立即生效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n<ol>\n<li>查看是否安装成功</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<p>8.配置成功,将会看到以下类似信息</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">java</span> <span class=\"selector-tag\">version</span> \"1<span class=\"selector-class\">.8</span><span class=\"selector-class\">.0_221</span>\"</span><br><span class=\"line\"><span class=\"selector-tag\">Java</span>(<span class=\"selector-tag\">TM</span>) <span class=\"selector-tag\">SE</span> <span class=\"selector-tag\">Runtime</span> <span class=\"selector-tag\">Environment</span> (<span class=\"selector-tag\">build</span> 1<span class=\"selector-class\">.8</span><span class=\"selector-class\">.0_221-b11</span>)</span><br><span class=\"line\"><span class=\"selector-tag\">Java</span> <span class=\"selector-tag\">HotSpot</span>(<span class=\"selector-tag\">TM</span>) 64<span class=\"selector-tag\">-Bit</span> <span class=\"selector-tag\">Server</span> <span class=\"selector-tag\">VM</span> (<span class=\"selector-tag\">build</span> 25<span class=\"selector-class\">.221-b11</span>, <span class=\"selector-tag\">mixed</span> <span class=\"selector-tag\">mode</span>)</span><br></pre></td></tr></table></figure>\n<h6 id=\"注意：使用openjdk-安装的话在配置rocketMq时候会出现（JAVA-HOME）问题，当时使用了很多方法，都没有成功，最好还是推荐使用这种方式吧。\"><a href=\"#注意：使用openjdk-安装的话在配置rocketMq时候会出现（JAVA-HOME）问题，当时使用了很多方法，都没有成功，最好还是推荐使用这种方式吧。\" class=\"headerlink\" title=\"注意：使用openjdk 安装的话在配置rocketMq时候会出现（JAVA_HOME）问题，当时使用了很多方法，都没有成功，最好还是推荐使用这种方式吧。\"></a>注意：使用openjdk 安装的话在配置rocketMq时候会出现（JAVA_HOME）问题，当时使用了很多方法，都没有成功，最好还是推荐使用这种方式吧。</h6><h6 id=\"二、安装rocketMQ\"><a href=\"#二、安装rocketMQ\" class=\"headerlink\" title=\"二、安装rocketMQ\"></a>二、安装rocketMQ</h6><ol>\n<li>直接下载安装包（以4.5.1为例）<br> 官网：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fwww.apache.org%2Fdyn%2Fcloser.cgi%3Fpath%3Drocketmq%2F4.5.1%2Frocketmq-all-4.5.1-bin-release.zip\" target=\"_blank\" rel=\"noopener\">https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.5.1/rocketmq-all-4.5.1-bin-release.zip</a> </li>\n</ol>\n<h6 id=\"注意：不要下载源码包，否则是没有bin目录的\"><a href=\"#注意：不要下载源码包，否则是没有bin目录的\" class=\"headerlink\" title=\"注意：不要下载源码包，否则是没有bin目录的\"></a>注意：不要下载源码包，否则是没有bin目录的</h6><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget <span class=\"symbol\">http:</span>/<span class=\"regexp\">/mirrors.tuna.tsinghua.edu.cn/apache</span><span class=\"regexp\">/rocketmq/</span><span class=\"number\">4.5</span>.<span class=\"number\">1</span>/rocketmq-all-<span class=\"number\">4.5</span>.<span class=\"number\">1</span>-bin-release.zip</span><br></pre></td></tr></table></figure>\n<p>2.解压,将会得到 rocketmq-all-4.5.1-bin-release 文件夹</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">unzip</span> <span class=\"selector-tag\">rocketmq-all-4</span><span class=\"selector-class\">.5</span><span class=\"selector-class\">.1-bin-release</span><span class=\"selector-class\">.zip</span></span><br></pre></td></tr></table></figure>\n<p>3.进入bin 目录 修改配置(分别修改runserver.sh 以及 runbroker.sh，因为默认配置内存过大，可能导致启动失败)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /root/rocketmq-all-4.5.1-bin-release/bin/</span><br></pre></td></tr></table></figure>\n<ol>\n<li>修改 runserver.sh 文件</li>\n</ol>\n<p>   <img src=\"https:////upload-images.jianshu.io/upload_images/12596656-c90d7cc4f81e1343.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1141/format/webp\" alt=\"img\"></p>\n<p>   修改位置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim runbroker.sh</span><br><span class=\"line\"><span class=\"comment\">##使用快捷键 i 开启编辑模式</span></span><br><span class=\"line\"><span class=\"comment\">##找到以下配置，将xms/xmx/xmn 分别修改成以下数值（视机器配置而定）</span></span><br><span class=\"line\">JAVA_OPT=<span class=\"string\">\"<span class=\"variable\">$&#123;JAVA_OPT&#125;</span> -server -Xms512m -Xmx512m -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\"</span></span><br><span class=\"line\"><span class=\"comment\">##保存</span></span><br><span class=\"line\">wq</span><br></pre></td></tr></table></figure>\n<ol>\n<li>修改 runbroker.sh</li>\n</ol>\n<p>   <img src=\"https:////upload-images.jianshu.io/upload_images/12596656-50cf906fa3423e9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/604/format/webp\" alt=\"img\"></p>\n<p>   修改位置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim runbroker.sh</span><br><span class=\"line\"><span class=\"comment\">##使用快捷键 i 开启编辑模式</span></span><br><span class=\"line\"><span class=\"comment\">##具体数值视机器而定</span></span><br><span class=\"line\">JAVA_OPT=<span class=\"string\">\"<span class=\"variable\">$&#123;JAVA_OPT&#125;</span> -server -Xms128m -Xmx256m -Xmn256m\"</span></span><br><span class=\"line\"><span class=\"comment\">##保存</span></span><br><span class=\"line\">wq</span><br></pre></td></tr></table></figure>\n<p>修改配置文件</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">vim</span> <span class=\"selector-tag\">broker</span><span class=\"selector-class\">.conf</span></span><br></pre></td></tr></table></figure>\n<p>新增如下选项</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brokerIP1=xxxxxx(你的服务器公网ip)</span><br></pre></td></tr></table></figure>\n<ol>\n<li>分别后台启动 runserver.sh 以及 runbroker.sh</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##启动runserver</span></span><br><span class=\"line\">nohup sh mqnamesrv &amp;</span><br><span class=\"line\"><span class=\"comment\">##以配置文件启动runbroker</span></span><br><span class=\"line\">nohup sh mqbroker -n localhost:9876 -c /root/rocketmq-all-4.5.1-bin-release/conf/broker.conf &amp;</span><br></pre></td></tr></table></figure>\n<p>7.查看启动是否成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jps</span><br></pre></td></tr></table></figure>\n<ol>\n<li>启动成功(可以看到NamesrvStartup以及BrokerStartup)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">16065 Jps</span><br><span class=\"line\">9679 NamesrvStartup</span><br><span class=\"line\">7887 jar</span><br><span class=\"line\">11279 BrokerStartup</span><br></pre></td></tr></table></figure>\n<p>10.启动成功日志</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -f ~/logs/rocketmqlogs/namesrv.<span class=\"built_in\">log</span></span><br><span class=\"line\">tail -f ~/logs/rocketmqlogs/broker.<span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n<p>11.如果启动失败，请查看失败日志</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat nohup.<span class=\"keyword\">out</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"三、关于防火墙以及安全组规则配置\"><a href=\"#三、关于防火墙以及安全组规则配置\" class=\"headerlink\" title=\"三、关于防火墙以及安全组规则配置\"></a>三、关于防火墙以及安全组规则配置</h6><p><strong>首先，请在你的云服务器配置安全组规则通道 9876 端口</strong><br> <strong>其次，centos7默认使用firewalld防火墙，而不是iptables，卸载firewalld，再安装iptables</strong></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">##卸载firewalld</span></span><br><span class=\"line\">yum <span class=\"keyword\">remove</span> firewalld</span><br><span class=\"line\"><span class=\"meta\">##安装iptables</span></span><br><span class=\"line\">yum install iptables-services</span><br><span class=\"line\"><span class=\"meta\">##查看防火墙状态</span></span><br><span class=\"line\">service iptables status</span><br><span class=\"line\"><span class=\"meta\">##停止防火墙</span></span><br><span class=\"line\">service iptables stop</span><br></pre></td></tr></table></figure>\n<h6 id=\"四、SpringBoot整合监视台（rocketmq-externals插件）\"><a href=\"#四、SpringBoot整合监视台（rocketmq-externals插件）\" class=\"headerlink\" title=\"四、SpringBoot整合监视台（rocketmq-externals插件）\"></a>四、SpringBoot整合监视台（rocketmq-externals插件）</h6><p><a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fapache%2Frocketmq-externals\" target=\"_blank\" rel=\"noopener\">GITHUB地址</a><br> 下载<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fapache%2Frocketmq-externals%2Ftree%2Fmaster%2Frocketmq-console\" target=\"_blank\" rel=\"noopener\">rocketmq-console</a>模块即可<br> 修改配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rocketmq.config.namesrvAddr=你的公网IP:9876</span><br><span class=\"line\">##如果你版本小于3.5.8，下面应该配置为false</span><br><span class=\"line\">rocketmq.config.isVIPChannel=false</span><br></pre></td></tr></table></figure>\n<p>启动即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Description=rockermq name service</span><br><span class=\"line\">Requires=network-online.target</span><br><span class=\"line\">After=network-online.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">User=anonymous</span><br><span class=\"line\">WorkingDirectory=/opt/rocketmq</span><br><span class=\"line\">ExecStart=/opt/rocketmq/bin/mqnamesrv</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h6 id=\"一、安装jdk-1-8\"><a href=\"#一、安装jdk-1-8\" class=\"headerlink\" title=\"一、安装jdk 1.8\"></a>一、安装jdk 1.8</h6><ol>\n<li><p>jdk1.8 资源下载</p>\n</li>\n<li><p>上传至服务器目录，解压（以上传至root 目录为例）</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf jdk-8u221-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>\n<ol>\n<li>将解压后的文件夹移动到/usr/local目录下</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv jdk1.8.0_221 /usr/local/</span><br></pre></td></tr></table></figure>\n<ol>\n<li>编辑以下文件，配置java 环境</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br></pre></td></tr></table></figure>\n<ol>\n<li>具体java 环境配置:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/local/jdk1.8.0_221</span><br><span class=\"line\">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class=\"line\">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib/dt.JAVA_HOME/lib/tools.jar:$&#123;JRE_HOME&#125;/lib</span><br><span class=\"line\">export PATH=$&#123;JAVA_HOME&#125;/bin:$&#123;PATH&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"此处顺便配置rocketmq-环境\"><a href=\"#此处顺便配置rocketmq-环境\" class=\"headerlink\" title=\"此处顺便配置rocketmq 环境\"></a>此处顺便配置rocketmq 环境</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> NAMESRV_ADDR=127.0.0.1:9876</span><br></pre></td></tr></table></figure>\n<p>6.刷新文件，使配置立即生效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n<ol>\n<li>查看是否安装成功</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<p>8.配置成功,将会看到以下类似信息</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">java</span> <span class=\"selector-tag\">version</span> \"1<span class=\"selector-class\">.8</span><span class=\"selector-class\">.0_221</span>\"</span><br><span class=\"line\"><span class=\"selector-tag\">Java</span>(<span class=\"selector-tag\">TM</span>) <span class=\"selector-tag\">SE</span> <span class=\"selector-tag\">Runtime</span> <span class=\"selector-tag\">Environment</span> (<span class=\"selector-tag\">build</span> 1<span class=\"selector-class\">.8</span><span class=\"selector-class\">.0_221-b11</span>)</span><br><span class=\"line\"><span class=\"selector-tag\">Java</span> <span class=\"selector-tag\">HotSpot</span>(<span class=\"selector-tag\">TM</span>) 64<span class=\"selector-tag\">-Bit</span> <span class=\"selector-tag\">Server</span> <span class=\"selector-tag\">VM</span> (<span class=\"selector-tag\">build</span> 25<span class=\"selector-class\">.221-b11</span>, <span class=\"selector-tag\">mixed</span> <span class=\"selector-tag\">mode</span>)</span><br></pre></td></tr></table></figure>\n<h6 id=\"注意：使用openjdk-安装的话在配置rocketMq时候会出现（JAVA-HOME）问题，当时使用了很多方法，都没有成功，最好还是推荐使用这种方式吧。\"><a href=\"#注意：使用openjdk-安装的话在配置rocketMq时候会出现（JAVA-HOME）问题，当时使用了很多方法，都没有成功，最好还是推荐使用这种方式吧。\" class=\"headerlink\" title=\"注意：使用openjdk 安装的话在配置rocketMq时候会出现（JAVA_HOME）问题，当时使用了很多方法，都没有成功，最好还是推荐使用这种方式吧。\"></a>注意：使用openjdk 安装的话在配置rocketMq时候会出现（JAVA_HOME）问题，当时使用了很多方法，都没有成功，最好还是推荐使用这种方式吧。</h6><h6 id=\"二、安装rocketMQ\"><a href=\"#二、安装rocketMQ\" class=\"headerlink\" title=\"二、安装rocketMQ\"></a>二、安装rocketMQ</h6><ol>\n<li>直接下载安装包（以4.5.1为例）<br> 官网：<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fwww.apache.org%2Fdyn%2Fcloser.cgi%3Fpath%3Drocketmq%2F4.5.1%2Frocketmq-all-4.5.1-bin-release.zip\" target=\"_blank\" rel=\"noopener\">https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.5.1/rocketmq-all-4.5.1-bin-release.zip</a> </li>\n</ol>\n<h6 id=\"注意：不要下载源码包，否则是没有bin目录的\"><a href=\"#注意：不要下载源码包，否则是没有bin目录的\" class=\"headerlink\" title=\"注意：不要下载源码包，否则是没有bin目录的\"></a>注意：不要下载源码包，否则是没有bin目录的</h6><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget <span class=\"symbol\">http:</span>/<span class=\"regexp\">/mirrors.tuna.tsinghua.edu.cn/apache</span><span class=\"regexp\">/rocketmq/</span><span class=\"number\">4.5</span>.<span class=\"number\">1</span>/rocketmq-all-<span class=\"number\">4.5</span>.<span class=\"number\">1</span>-bin-release.zip</span><br></pre></td></tr></table></figure>\n<p>2.解压,将会得到 rocketmq-all-4.5.1-bin-release 文件夹</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">unzip</span> <span class=\"selector-tag\">rocketmq-all-4</span><span class=\"selector-class\">.5</span><span class=\"selector-class\">.1-bin-release</span><span class=\"selector-class\">.zip</span></span><br></pre></td></tr></table></figure>\n<p>3.进入bin 目录 修改配置(分别修改runserver.sh 以及 runbroker.sh，因为默认配置内存过大，可能导致启动失败)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /root/rocketmq-all-4.5.1-bin-release/bin/</span><br></pre></td></tr></table></figure>\n<ol>\n<li>修改 runserver.sh 文件</li>\n</ol>\n<p>   <img src=\"https:////upload-images.jianshu.io/upload_images/12596656-c90d7cc4f81e1343.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1141/format/webp\" alt=\"img\"></p>\n<p>   修改位置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim runbroker.sh</span><br><span class=\"line\"><span class=\"comment\">##使用快捷键 i 开启编辑模式</span></span><br><span class=\"line\"><span class=\"comment\">##找到以下配置，将xms/xmx/xmn 分别修改成以下数值（视机器配置而定）</span></span><br><span class=\"line\">JAVA_OPT=<span class=\"string\">\"<span class=\"variable\">$&#123;JAVA_OPT&#125;</span> -server -Xms512m -Xmx512m -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\"</span></span><br><span class=\"line\"><span class=\"comment\">##保存</span></span><br><span class=\"line\">wq</span><br></pre></td></tr></table></figure>\n<ol>\n<li>修改 runbroker.sh</li>\n</ol>\n<p>   <img src=\"https:////upload-images.jianshu.io/upload_images/12596656-50cf906fa3423e9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/604/format/webp\" alt=\"img\"></p>\n<p>   修改位置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim runbroker.sh</span><br><span class=\"line\"><span class=\"comment\">##使用快捷键 i 开启编辑模式</span></span><br><span class=\"line\"><span class=\"comment\">##具体数值视机器而定</span></span><br><span class=\"line\">JAVA_OPT=<span class=\"string\">\"<span class=\"variable\">$&#123;JAVA_OPT&#125;</span> -server -Xms128m -Xmx256m -Xmn256m\"</span></span><br><span class=\"line\"><span class=\"comment\">##保存</span></span><br><span class=\"line\">wq</span><br></pre></td></tr></table></figure>\n<p>修改配置文件</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">vim</span> <span class=\"selector-tag\">broker</span><span class=\"selector-class\">.conf</span></span><br></pre></td></tr></table></figure>\n<p>新增如下选项</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brokerIP1=xxxxxx(你的服务器公网ip)</span><br></pre></td></tr></table></figure>\n<ol>\n<li>分别后台启动 runserver.sh 以及 runbroker.sh</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##启动runserver</span></span><br><span class=\"line\">nohup sh mqnamesrv &amp;</span><br><span class=\"line\"><span class=\"comment\">##以配置文件启动runbroker</span></span><br><span class=\"line\">nohup sh mqbroker -n localhost:9876 -c /root/rocketmq-all-4.5.1-bin-release/conf/broker.conf &amp;</span><br></pre></td></tr></table></figure>\n<p>7.查看启动是否成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jps</span><br></pre></td></tr></table></figure>\n<ol>\n<li>启动成功(可以看到NamesrvStartup以及BrokerStartup)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">16065 Jps</span><br><span class=\"line\">9679 NamesrvStartup</span><br><span class=\"line\">7887 jar</span><br><span class=\"line\">11279 BrokerStartup</span><br></pre></td></tr></table></figure>\n<p>10.启动成功日志</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -f ~/logs/rocketmqlogs/namesrv.<span class=\"built_in\">log</span></span><br><span class=\"line\">tail -f ~/logs/rocketmqlogs/broker.<span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n<p>11.如果启动失败，请查看失败日志</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat nohup.<span class=\"keyword\">out</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"三、关于防火墙以及安全组规则配置\"><a href=\"#三、关于防火墙以及安全组规则配置\" class=\"headerlink\" title=\"三、关于防火墙以及安全组规则配置\"></a>三、关于防火墙以及安全组规则配置</h6><p><strong>首先，请在你的云服务器配置安全组规则通道 9876 端口</strong><br> <strong>其次，centos7默认使用firewalld防火墙，而不是iptables，卸载firewalld，再安装iptables</strong></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">##卸载firewalld</span></span><br><span class=\"line\">yum <span class=\"keyword\">remove</span> firewalld</span><br><span class=\"line\"><span class=\"meta\">##安装iptables</span></span><br><span class=\"line\">yum install iptables-services</span><br><span class=\"line\"><span class=\"meta\">##查看防火墙状态</span></span><br><span class=\"line\">service iptables status</span><br><span class=\"line\"><span class=\"meta\">##停止防火墙</span></span><br><span class=\"line\">service iptables stop</span><br></pre></td></tr></table></figure>\n<h6 id=\"四、SpringBoot整合监视台（rocketmq-externals插件）\"><a href=\"#四、SpringBoot整合监视台（rocketmq-externals插件）\" class=\"headerlink\" title=\"四、SpringBoot整合监视台（rocketmq-externals插件）\"></a>四、SpringBoot整合监视台（rocketmq-externals插件）</h6><p><a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fapache%2Frocketmq-externals\" target=\"_blank\" rel=\"noopener\">GITHUB地址</a><br> 下载<a href=\"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fapache%2Frocketmq-externals%2Ftree%2Fmaster%2Frocketmq-console\" target=\"_blank\" rel=\"noopener\">rocketmq-console</a>模块即可<br> 修改配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rocketmq.config.namesrvAddr=你的公网IP:9876</span><br><span class=\"line\">##如果你版本小于3.5.8，下面应该配置为false</span><br><span class=\"line\">rocketmq.config.isVIPChannel=false</span><br></pre></td></tr></table></figure>\n<p>启动即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Description=rockermq name service</span><br><span class=\"line\">Requires=network-online.target</span><br><span class=\"line\">After=network-online.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">User=anonymous</span><br><span class=\"line\">WorkingDirectory=/opt/rocketmq</span><br><span class=\"line\">ExecStart=/opt/rocketmq/bin/mqnamesrv</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n"},{"title":"let-us-encrypt证书","date":"2018-12-05T12:59:59.000Z","_content":"\n# 基本知识\n\n为了实现通配符证书，Let’s Encrypt 对 ACME 协议的实现进行了升级，只有 v2 协议才能支持通配符证书。\n\n1. 客户在申请 Let’s Encrypt 证书的时候，需要校验域名的所有权，证明操作者有权利为该域名申请证书，目前支持三种验证方式：\n\n- dns-01：给域名添加一个 DNS TXT 记录。\n\n- http-01：在域名对应的 Web 服务器下放置一个 HTTP well-known URL 资源文件。\n\n- tls-sni-01：在域名对应的 Web 服务器下放置一个 HTTPS well-known URL 资源文件。\n\n  而申请通配符证书，只能使用 dns-01 的方式\n\n2. ACME v2 和 v1 协议是互相不兼容的，为了使用 v2 版本，客户端需要创建另外一个账户（代表客户端操作者），以 Certbot 客户端为例，大家可以查看：\n3. Enumerable Orders 和限制\n\n# 安装\n\n```bash\nwget https://dl.eff.org/certbot-auto\nchmod a+x ./certbot-auto\n```\n\n# 申请\n\n```bash\n./certbot-auto certonly  -d *.newyingyong.cn --manual --preferred-challenges dns --server https://acme-v02.api.letsencrypt.org/directory\n```\n\n- certonly，表示安装模式，Certbot 有安装模式和验证模式两种类型的插件。\n- –manual 表示手动安装插件，Certbot 有很多插件，不同的插件都可以申请证书，用户可以根据需要自行选择\n- -d 为那些主机申请证书，如果是通配符，输入 *.newyingyong.cn（可以替换为你自己的域名）\n- -preferred-challenges dns，使用 DNS 方式校验域名所有权\n- –server，Let’s Encrypt ACME v2 版本使用的服务器不同于 v1 版本，需要显示指定。\n\n# 添加记录\n\n根据命令行提示，填写相关的内容，注意在添加记录的时候，要等到记录生效才确定。\n\n```\n-------------------------------------------------------------------------------\nPlease deploy a DNS TXT record under the name\n_acme-challenge.newyingyong.cn with the following value:\n2_8KBE_jXH8nYZ2unEViIbW52LhIqxkg6i9mcwsRvhQ\nBefore continuing, verify the record is deployed.\n-------------------------------------------------------------------------------\nPress Enter to Continue\nWaiting for verification...\nCleaning up challenges\n```\n\n```\n## 检测记录生效\n$ dig  -t txt  _acme-challenge.newyingyong.cn @8.8.8.8\n```\n\n# 更新\n\n查看当前服务器所配置的证书\n\n```bash\ncertbot-auto certificates\n```\n\n1. 使用申请的普通证书，使用`certbot-auto renew`\n\n2. 使用通配符证书。\n\n   1. 添加DNS记录\n\n   ```bash\n   git clone https://github.com/ywdblog/certbot-letencrypt-wildcardcertificates-alydns-au.git\n   ```\n\n   ```bash\n   ./certbot-auto renew --cert-name simplehttps.com  --manual-auth-hook /脚本目录/au.sh \n   ```\n\n3. 自动更新\n\n```\n1 1 */1 * * root certbot-auto renew --manual --preferred-challenges dns  --manual-auth-hook /脚本目录/sslupdate.sh \n```\n\n# 参考\n\n> https://www.jianshu.com/p/c5c9d071e395\n>\n> https://www.jianshu.com/p/074e147b68b0\n>\n> [certbot工具](https://github.com/ywdblog/certbot-letencrypt-wildcardcertificates-alydns-au)\n> https://segmentfault.com/a/1190000015354547\n","source":"_posts/运维/let-us-encrypt证书.md","raw":"---\ntitle: let-us-encrypt证书\ndate: 2018-12-05 20:59:59\ntags:\n- web\n---\n\n# 基本知识\n\n为了实现通配符证书，Let’s Encrypt 对 ACME 协议的实现进行了升级，只有 v2 协议才能支持通配符证书。\n\n1. 客户在申请 Let’s Encrypt 证书的时候，需要校验域名的所有权，证明操作者有权利为该域名申请证书，目前支持三种验证方式：\n\n- dns-01：给域名添加一个 DNS TXT 记录。\n\n- http-01：在域名对应的 Web 服务器下放置一个 HTTP well-known URL 资源文件。\n\n- tls-sni-01：在域名对应的 Web 服务器下放置一个 HTTPS well-known URL 资源文件。\n\n  而申请通配符证书，只能使用 dns-01 的方式\n\n2. ACME v2 和 v1 协议是互相不兼容的，为了使用 v2 版本，客户端需要创建另外一个账户（代表客户端操作者），以 Certbot 客户端为例，大家可以查看：\n3. Enumerable Orders 和限制\n\n# 安装\n\n```bash\nwget https://dl.eff.org/certbot-auto\nchmod a+x ./certbot-auto\n```\n\n# 申请\n\n```bash\n./certbot-auto certonly  -d *.newyingyong.cn --manual --preferred-challenges dns --server https://acme-v02.api.letsencrypt.org/directory\n```\n\n- certonly，表示安装模式，Certbot 有安装模式和验证模式两种类型的插件。\n- –manual 表示手动安装插件，Certbot 有很多插件，不同的插件都可以申请证书，用户可以根据需要自行选择\n- -d 为那些主机申请证书，如果是通配符，输入 *.newyingyong.cn（可以替换为你自己的域名）\n- -preferred-challenges dns，使用 DNS 方式校验域名所有权\n- –server，Let’s Encrypt ACME v2 版本使用的服务器不同于 v1 版本，需要显示指定。\n\n# 添加记录\n\n根据命令行提示，填写相关的内容，注意在添加记录的时候，要等到记录生效才确定。\n\n```\n-------------------------------------------------------------------------------\nPlease deploy a DNS TXT record under the name\n_acme-challenge.newyingyong.cn with the following value:\n2_8KBE_jXH8nYZ2unEViIbW52LhIqxkg6i9mcwsRvhQ\nBefore continuing, verify the record is deployed.\n-------------------------------------------------------------------------------\nPress Enter to Continue\nWaiting for verification...\nCleaning up challenges\n```\n\n```\n## 检测记录生效\n$ dig  -t txt  _acme-challenge.newyingyong.cn @8.8.8.8\n```\n\n# 更新\n\n查看当前服务器所配置的证书\n\n```bash\ncertbot-auto certificates\n```\n\n1. 使用申请的普通证书，使用`certbot-auto renew`\n\n2. 使用通配符证书。\n\n   1. 添加DNS记录\n\n   ```bash\n   git clone https://github.com/ywdblog/certbot-letencrypt-wildcardcertificates-alydns-au.git\n   ```\n\n   ```bash\n   ./certbot-auto renew --cert-name simplehttps.com  --manual-auth-hook /脚本目录/au.sh \n   ```\n\n3. 自动更新\n\n```\n1 1 */1 * * root certbot-auto renew --manual --preferred-challenges dns  --manual-auth-hook /脚本目录/sslupdate.sh \n```\n\n# 参考\n\n> https://www.jianshu.com/p/c5c9d071e395\n>\n> https://www.jianshu.com/p/074e147b68b0\n>\n> [certbot工具](https://github.com/ywdblog/certbot-letencrypt-wildcardcertificates-alydns-au)\n> https://segmentfault.com/a/1190000015354547\n","slug":"运维/let-us-encrypt证书","published":1,"updated":"2020-09-20T03:22:55.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblnx00654tjeb894ywmw","content":"<h1 id=\"基本知识\"><a href=\"#基本知识\" class=\"headerlink\" title=\"基本知识\"></a>基本知识</h1><p>为了实现通配符证书，Let’s Encrypt 对 ACME 协议的实现进行了升级，只有 v2 协议才能支持通配符证书。</p>\n<ol>\n<li>客户在申请 Let’s Encrypt 证书的时候，需要校验域名的所有权，证明操作者有权利为该域名申请证书，目前支持三种验证方式：</li>\n</ol>\n<ul>\n<li><p>dns-01：给域名添加一个 DNS TXT 记录。</p>\n</li>\n<li><p>http-01：在域名对应的 Web 服务器下放置一个 HTTP well-known URL 资源文件。</p>\n</li>\n<li><p>tls-sni-01：在域名对应的 Web 服务器下放置一个 HTTPS well-known URL 资源文件。</p>\n<p>而申请通配符证书，只能使用 dns-01 的方式</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>ACME v2 和 v1 协议是互相不兼容的，为了使用 v2 版本，客户端需要创建另外一个账户（代表客户端操作者），以 Certbot 客户端为例，大家可以查看：</li>\n<li>Enumerable Orders 和限制</li>\n</ol>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dl.eff.org/certbot-auto</span><br><span class=\"line\">chmod a+x ./certbot-auto</span><br></pre></td></tr></table></figure>\n<h1 id=\"申请\"><a href=\"#申请\" class=\"headerlink\" title=\"申请\"></a>申请</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./certbot-auto certonly  -d *.newyingyong.cn --manual --preferred-challenges dns --server https://acme-v02.api.letsencrypt.org/directory</span><br></pre></td></tr></table></figure>\n<ul>\n<li>certonly，表示安装模式，Certbot 有安装模式和验证模式两种类型的插件。</li>\n<li>–manual 表示手动安装插件，Certbot 有很多插件，不同的插件都可以申请证书，用户可以根据需要自行选择</li>\n<li>-d 为那些主机申请证书，如果是通配符，输入 *.newyingyong.cn（可以替换为你自己的域名）</li>\n<li>-preferred-challenges dns，使用 DNS 方式校验域名所有权</li>\n<li>–server，Let’s Encrypt ACME v2 版本使用的服务器不同于 v1 版本，需要显示指定。</li>\n</ul>\n<h1 id=\"添加记录\"><a href=\"#添加记录\" class=\"headerlink\" title=\"添加记录\"></a>添加记录</h1><p>根据命令行提示，填写相关的内容，注意在添加记录的时候，要等到记录生效才确定。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">Please deploy a DNS TXT record under the name</span><br><span class=\"line\">_acme-challenge.newyingyong.cn with the following value:</span><br><span class=\"line\">2_8KBE_jXH8nYZ2unEViIbW52LhIqxkg6i9mcwsRvhQ</span><br><span class=\"line\">Before continuing, verify the record is deployed.</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">Press Enter to Continue</span><br><span class=\"line\">Waiting for verification...</span><br><span class=\"line\">Cleaning up challenges</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 检测记录生效</span><br><span class=\"line\">$ dig  -t txt  _acme-challenge.newyingyong.cn @8.8.8.8</span><br></pre></td></tr></table></figure>\n<h1 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h1><p>查看当前服务器所配置的证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">certbot-auto certificates</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>使用申请的普通证书，使用<code>certbot-auto renew</code></p>\n</li>\n<li><p>使用通配符证书。</p>\n<ol>\n<li>添加DNS记录</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/ywdblog/certbot-letencrypt-wildcardcertificates-alydns-au.git</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./certbot-auto renew --cert-name simplehttps.com  --manual-auth-hook /脚本目录/au.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自动更新</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 1 */1 * * root certbot-auto renew --manual --preferred-challenges dns  --manual-auth-hook /脚本目录/sslupdate.sh</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://www.jianshu.com/p/c5c9d071e395\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/c5c9d071e395</a></p>\n<p><a href=\"https://www.jianshu.com/p/074e147b68b0\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/074e147b68b0</a></p>\n<p><a href=\"https://github.com/ywdblog/certbot-letencrypt-wildcardcertificates-alydns-au\" target=\"_blank\" rel=\"noopener\">certbot工具</a><br><a href=\"https://segmentfault.com/a/1190000015354547\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000015354547</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基本知识\"><a href=\"#基本知识\" class=\"headerlink\" title=\"基本知识\"></a>基本知识</h1><p>为了实现通配符证书，Let’s Encrypt 对 ACME 协议的实现进行了升级，只有 v2 协议才能支持通配符证书。</p>\n<ol>\n<li>客户在申请 Let’s Encrypt 证书的时候，需要校验域名的所有权，证明操作者有权利为该域名申请证书，目前支持三种验证方式：</li>\n</ol>\n<ul>\n<li><p>dns-01：给域名添加一个 DNS TXT 记录。</p>\n</li>\n<li><p>http-01：在域名对应的 Web 服务器下放置一个 HTTP well-known URL 资源文件。</p>\n</li>\n<li><p>tls-sni-01：在域名对应的 Web 服务器下放置一个 HTTPS well-known URL 资源文件。</p>\n<p>而申请通配符证书，只能使用 dns-01 的方式</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>ACME v2 和 v1 协议是互相不兼容的，为了使用 v2 版本，客户端需要创建另外一个账户（代表客户端操作者），以 Certbot 客户端为例，大家可以查看：</li>\n<li>Enumerable Orders 和限制</li>\n</ol>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dl.eff.org/certbot-auto</span><br><span class=\"line\">chmod a+x ./certbot-auto</span><br></pre></td></tr></table></figure>\n<h1 id=\"申请\"><a href=\"#申请\" class=\"headerlink\" title=\"申请\"></a>申请</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./certbot-auto certonly  -d *.newyingyong.cn --manual --preferred-challenges dns --server https://acme-v02.api.letsencrypt.org/directory</span><br></pre></td></tr></table></figure>\n<ul>\n<li>certonly，表示安装模式，Certbot 有安装模式和验证模式两种类型的插件。</li>\n<li>–manual 表示手动安装插件，Certbot 有很多插件，不同的插件都可以申请证书，用户可以根据需要自行选择</li>\n<li>-d 为那些主机申请证书，如果是通配符，输入 *.newyingyong.cn（可以替换为你自己的域名）</li>\n<li>-preferred-challenges dns，使用 DNS 方式校验域名所有权</li>\n<li>–server，Let’s Encrypt ACME v2 版本使用的服务器不同于 v1 版本，需要显示指定。</li>\n</ul>\n<h1 id=\"添加记录\"><a href=\"#添加记录\" class=\"headerlink\" title=\"添加记录\"></a>添加记录</h1><p>根据命令行提示，填写相关的内容，注意在添加记录的时候，要等到记录生效才确定。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">Please deploy a DNS TXT record under the name</span><br><span class=\"line\">_acme-challenge.newyingyong.cn with the following value:</span><br><span class=\"line\">2_8KBE_jXH8nYZ2unEViIbW52LhIqxkg6i9mcwsRvhQ</span><br><span class=\"line\">Before continuing, verify the record is deployed.</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">Press Enter to Continue</span><br><span class=\"line\">Waiting for verification...</span><br><span class=\"line\">Cleaning up challenges</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 检测记录生效</span><br><span class=\"line\">$ dig  -t txt  _acme-challenge.newyingyong.cn @8.8.8.8</span><br></pre></td></tr></table></figure>\n<h1 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h1><p>查看当前服务器所配置的证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">certbot-auto certificates</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>使用申请的普通证书，使用<code>certbot-auto renew</code></p>\n</li>\n<li><p>使用通配符证书。</p>\n<ol>\n<li>添加DNS记录</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/ywdblog/certbot-letencrypt-wildcardcertificates-alydns-au.git</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./certbot-auto renew --cert-name simplehttps.com  --manual-auth-hook /脚本目录/au.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自动更新</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 1 */1 * * root certbot-auto renew --manual --preferred-challenges dns  --manual-auth-hook /脚本目录/sslupdate.sh</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://www.jianshu.com/p/c5c9d071e395\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/c5c9d071e395</a></p>\n<p><a href=\"https://www.jianshu.com/p/074e147b68b0\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/074e147b68b0</a></p>\n<p><a href=\"https://github.com/ywdblog/certbot-letencrypt-wildcardcertificates-alydns-au\" target=\"_blank\" rel=\"noopener\">certbot工具</a><br><a href=\"https://segmentfault.com/a/1190000015354547\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000015354547</a></p>\n</blockquote>\n"},{"title":"nvc-server安装","date":"2018-12-05T13:39:00.000Z","_content":"\n## centos 安装 vnc server\n\nVNC需要系统安装的有桌面，如果是生产环境服务器，安装时使用的最小化安装，那么进行下面操作按章GNOME 桌面。\n\n```bash\n# 列出的组列表里有GNOME Desktop。\n\nyum grouplist  \n\n#安装之\n\nyum groupinstall -y \"GNOME Desktop\" \n\n\n# 安装完成后，修改默认启动方式为图形化界面\n\nsystemctl set-default graphical.target  //设置成图形模式 \n# 如果要换回来 \nsystemctl set-default multi-user.target  //设置成命令模式 \n#然后重启系统即可\n```\n\n第一步：安装VNC服务软件，使用root用户执行以下命令（以下操作没有特别说明均在root用户）：\n\n```bash\nyum install tigervnc-server -y\n```\n\n![img](https://img-blog.csdnimg.cn/2019011120374466.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)\n\n安装后可以使用如下命令来验证是否安装成功：\n\n```bash\nrpm -qa|grep tigervnc-server\n```\n\n![img](https://img-blog.csdnimg.cn/20190111204109802.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)\n\n第二步：复制vnc的启动操作脚本, vncserver@:1.service中的：1表示\"桌面号\"，启动的端口号就是5900+桌面号，即是5901，如果再有一个就是2啦，端口号加1就是5902，以此类推：\n\n```bash\ncp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service\n```\n\n第三步：编辑 /etc/systemd/system/vncserver@:1.service\n\n```bash\nvim /etc/systemd/system/vncserver@\\:1.service\n```\n\n![img](https://img-blog.csdnimg.cn/20190111205105834.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)vnc配置文件修改前\n\n找到其中的<USER> ，修改成自己的用户名，如果是root用户登录桌面就使用root用户，如果使用普通用户登录桌面使用普通用户，这里笔者使用用户名：cy\n\n![img](https://img-blog.csdnimg.cn/20190111205309803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)vnc配置文件修改后\n\n修改完毕后保存退出vim。\n\n第四步：设置vnc密码，执行su cy，切换到刚配置文件设置的cy用户，执行（这一步是在cy用户下操作），输入两次密码，输入完成后会提示是否设置view-only password（*“View-only* *password”密码，*只允许查看,无控制权限。）这个可设可不设：\n\n```bash\nvncpasswd\n```\n\n![img](https://img-blog.csdnimg.cn/20190111205934208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)\n\n第五步：启动服务：\n\n```bash\nsystemctl start vncserver@\\:1.service\n```\n\n第一次输入启动服务命令可能会要求输入（从新加载配置文件，新增和配置文件发生变化时都需要执行 daemon-reload 子命令）：\n\n```bash\nsystemctl daemon-reload\n```\n\n执行完毕之后在执行启动命令就可以了：\n\n![img](https://img-blog.csdnimg.cn/20190111205848408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)\n\n可以加入开机启动，下次开机就会自动启动啦：\n\n```bash\nsystemctl enable vncserver@\\:1.service\n```\n\n第六步：查看端口是否监听：\n\n```bash\nnetstat -lnpt|grep Xvnc\n```\n\n![img](https://img-blog.csdnimg.cn/20190111211103409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)这里我们可以看到5901端口已经被监听\n\n第七步：开放防火墙的5901端口：\n\n```bash\nfirewall-cmd --zone=public --add-port=5901/tcp --permanent\n```\n\n如果防火墙没有启动需要先启动防火墙。\n\n![img](https://img-blog.csdnimg.cn/2019011121160287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)\n\n当然也可以狠一点，直接停止防火墙：\n\n```bash\nsystemctl stop firewalld.service\n```\n\n![img](https://img-blog.csdnimg.cn/20190111211803178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)\n\n停止之后该需要禁止开机启动：\n\n```\nsystemctl disable firewalld.service\n```\n\n第八步：关闭SELinux，编辑/etc/selinux/config 文件：\n\n```bash\nvim /etc/selinux/config\n```\n\n![img](https://img-blog.csdnimg.cn/20190111212208680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)\n\n将selinux设置为disabled\n\n![img](https://img-blog.csdnimg.cn/2019011121253381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)\n\n到这里vnc服务已经安装完毕，下面就可使用vnc客户端来连接。\n\n第九步：在vnc客户端（vnc viewer）输入服务器IP:桌面号（如192.168.31.100:1），输入后回车：\n\n![img](https://img-blog.csdnimg.cn/20190111213220647.png)\n\n第十步：输入IP后会弹出确认，点击contiue即可：\n\n![img](https://img-blog.csdnimg.cn/20190111213443826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)\n\n \n\n第十一步：输入vnc密码：\n\n![img](https://img-blog.csdnimg.cn/20190111213532135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)\n\n第十二步：登录成功，输入远程机器密码（登录成功后需要输入远程机器的用户的密码，如果没有密码就可以直接进入系统）：\n\n![img](https://img-blog.csdnimg.cn/20190111214637416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)\n\n第十三步：成功进入远程桌面：\n\n![img](https://img-blog.csdnimg.cn/20190111214719914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)\n\n至此整个CentOS7.x 的VNC服务安装完毕^_^。\n\n小贴士：vnc服务只能在局域网使用，如果在外网，则需要有公网IP地址，VNC不仅具备内网穿透功能。\n\n## ubuntu 安装 vnc viewer\n\nvnc view的网站`https://www.realvnc.com/en/connect/download/viewer/`\n\n```\nsudo dpkg -i VNC-Viewer-6.17.1113-Linux-x64.deb\n```\n\n# 参考\n\n> https://my.oschina.net/huhaoren/blog/497394","source":"_posts/运维/nvc-server安装.md","raw":"---\ntitle: nvc-server安装\ndate: 2018-12-05 21:39:00\ntags:\n- web\n---\n\n## centos 安装 vnc server\n\nVNC需要系统安装的有桌面，如果是生产环境服务器，安装时使用的最小化安装，那么进行下面操作按章GNOME 桌面。\n\n```bash\n# 列出的组列表里有GNOME Desktop。\n\nyum grouplist  \n\n#安装之\n\nyum groupinstall -y \"GNOME Desktop\" \n\n\n# 安装完成后，修改默认启动方式为图形化界面\n\nsystemctl set-default graphical.target  //设置成图形模式 \n# 如果要换回来 \nsystemctl set-default multi-user.target  //设置成命令模式 \n#然后重启系统即可\n```\n\n第一步：安装VNC服务软件，使用root用户执行以下命令（以下操作没有特别说明均在root用户）：\n\n```bash\nyum install tigervnc-server -y\n```\n\n![img](https://img-blog.csdnimg.cn/2019011120374466.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)\n\n安装后可以使用如下命令来验证是否安装成功：\n\n```bash\nrpm -qa|grep tigervnc-server\n```\n\n![img](https://img-blog.csdnimg.cn/20190111204109802.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)\n\n第二步：复制vnc的启动操作脚本, vncserver@:1.service中的：1表示\"桌面号\"，启动的端口号就是5900+桌面号，即是5901，如果再有一个就是2啦，端口号加1就是5902，以此类推：\n\n```bash\ncp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service\n```\n\n第三步：编辑 /etc/systemd/system/vncserver@:1.service\n\n```bash\nvim /etc/systemd/system/vncserver@\\:1.service\n```\n\n![img](https://img-blog.csdnimg.cn/20190111205105834.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)vnc配置文件修改前\n\n找到其中的<USER> ，修改成自己的用户名，如果是root用户登录桌面就使用root用户，如果使用普通用户登录桌面使用普通用户，这里笔者使用用户名：cy\n\n![img](https://img-blog.csdnimg.cn/20190111205309803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)vnc配置文件修改后\n\n修改完毕后保存退出vim。\n\n第四步：设置vnc密码，执行su cy，切换到刚配置文件设置的cy用户，执行（这一步是在cy用户下操作），输入两次密码，输入完成后会提示是否设置view-only password（*“View-only* *password”密码，*只允许查看,无控制权限。）这个可设可不设：\n\n```bash\nvncpasswd\n```\n\n![img](https://img-blog.csdnimg.cn/20190111205934208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)\n\n第五步：启动服务：\n\n```bash\nsystemctl start vncserver@\\:1.service\n```\n\n第一次输入启动服务命令可能会要求输入（从新加载配置文件，新增和配置文件发生变化时都需要执行 daemon-reload 子命令）：\n\n```bash\nsystemctl daemon-reload\n```\n\n执行完毕之后在执行启动命令就可以了：\n\n![img](https://img-blog.csdnimg.cn/20190111205848408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)\n\n可以加入开机启动，下次开机就会自动启动啦：\n\n```bash\nsystemctl enable vncserver@\\:1.service\n```\n\n第六步：查看端口是否监听：\n\n```bash\nnetstat -lnpt|grep Xvnc\n```\n\n![img](https://img-blog.csdnimg.cn/20190111211103409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)这里我们可以看到5901端口已经被监听\n\n第七步：开放防火墙的5901端口：\n\n```bash\nfirewall-cmd --zone=public --add-port=5901/tcp --permanent\n```\n\n如果防火墙没有启动需要先启动防火墙。\n\n![img](https://img-blog.csdnimg.cn/2019011121160287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)\n\n当然也可以狠一点，直接停止防火墙：\n\n```bash\nsystemctl stop firewalld.service\n```\n\n![img](https://img-blog.csdnimg.cn/20190111211803178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)\n\n停止之后该需要禁止开机启动：\n\n```\nsystemctl disable firewalld.service\n```\n\n第八步：关闭SELinux，编辑/etc/selinux/config 文件：\n\n```bash\nvim /etc/selinux/config\n```\n\n![img](https://img-blog.csdnimg.cn/20190111212208680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)\n\n将selinux设置为disabled\n\n![img](https://img-blog.csdnimg.cn/2019011121253381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)\n\n到这里vnc服务已经安装完毕，下面就可使用vnc客户端来连接。\n\n第九步：在vnc客户端（vnc viewer）输入服务器IP:桌面号（如192.168.31.100:1），输入后回车：\n\n![img](https://img-blog.csdnimg.cn/20190111213220647.png)\n\n第十步：输入IP后会弹出确认，点击contiue即可：\n\n![img](https://img-blog.csdnimg.cn/20190111213443826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)\n\n \n\n第十一步：输入vnc密码：\n\n![img](https://img-blog.csdnimg.cn/20190111213532135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)\n\n第十二步：登录成功，输入远程机器密码（登录成功后需要输入远程机器的用户的密码，如果没有密码就可以直接进入系统）：\n\n![img](https://img-blog.csdnimg.cn/20190111214637416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)\n\n第十三步：成功进入远程桌面：\n\n![img](https://img-blog.csdnimg.cn/20190111214719914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70)\n\n至此整个CentOS7.x 的VNC服务安装完毕^_^。\n\n小贴士：vnc服务只能在局域网使用，如果在外网，则需要有公网IP地址，VNC不仅具备内网穿透功能。\n\n## ubuntu 安装 vnc viewer\n\nvnc view的网站`https://www.realvnc.com/en/connect/download/viewer/`\n\n```\nsudo dpkg -i VNC-Viewer-6.17.1113-Linux-x64.deb\n```\n\n# 参考\n\n> https://my.oschina.net/huhaoren/blog/497394","slug":"运维/nvc-server安装","published":1,"updated":"2020-09-20T03:22:55.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblny00664tjexm3v4r6l","content":"<h2 id=\"centos-安装-vnc-server\"><a href=\"#centos-安装-vnc-server\" class=\"headerlink\" title=\"centos 安装 vnc server\"></a>centos 安装 vnc server</h2><p>VNC需要系统安装的有桌面，如果是生产环境服务器，安装时使用的最小化安装，那么进行下面操作按章GNOME 桌面。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出的组列表里有GNOME Desktop。</span></span><br><span class=\"line\"></span><br><span class=\"line\">yum grouplist  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#安装之</span></span><br><span class=\"line\"></span><br><span class=\"line\">yum groupinstall -y <span class=\"string\">\"GNOME Desktop\"</span> </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装完成后，修改默认启动方式为图形化界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">systemctl <span class=\"built_in\">set</span>-default graphical.target  //设置成图形模式 </span><br><span class=\"line\"><span class=\"comment\"># 如果要换回来 </span></span><br><span class=\"line\">systemctl <span class=\"built_in\">set</span>-default multi-user.target  //设置成命令模式 </span><br><span class=\"line\"><span class=\"comment\">#然后重启系统即可</span></span><br></pre></td></tr></table></figure>\n<p>第一步：安装VNC服务软件，使用root用户执行以下命令（以下操作没有特别说明均在root用户）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install tigervnc-server -y</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/2019011120374466.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>安装后可以使用如下命令来验证是否安装成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa|grep tigervnc-server</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190111204109802.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>第二步：复制vnc的启动操作脚本, vncserver@:1.service中的：1表示”桌面号”，启动的端口号就是5900+桌面号，即是5901，如果再有一个就是2啦，端口号加1就是5902，以此类推：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service</span><br></pre></td></tr></table></figure>\n<p>第三步：编辑 /etc/systemd/system/vncserver@:1.service</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/systemd/system/vncserver@\\:1.service</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190111205105834.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>vnc配置文件修改前<br><br>找到其中的<user> ，修改成自己的用户名，如果是root用户登录桌面就使用root用户，如果使用普通用户登录桌面使用普通用户，这里笔者使用用户名：cy<br><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190111205309803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>vnc配置文件修改后<br><br>修改完毕后保存退出vim。<br><br>第四步：设置vnc密码，执行su cy，切换到刚配置文件设置的cy用户，执行（这一步是在cy用户下操作），输入两次密码，输入完成后会提示是否设置view-only password（<em>“View-only</em> <em>password”密码，</em>只允许查看,无控制权限。）这个可设可不设：<br><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vncpasswd</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190111205934208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>第五步：启动服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start vncserver@\\:1.service</span><br></pre></td></tr></table></figure>\n<p>第一次输入启动服务命令可能会要求输入（从新加载配置文件，新增和配置文件发生变化时都需要执行 daemon-reload 子命令）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n<p>执行完毕之后在执行启动命令就可以了：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190111205848408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>可以加入开机启动，下次开机就会自动启动啦：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> vncserver@\\:1.service</span><br></pre></td></tr></table></figure>\n<p>第六步：查看端口是否监听：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -lnpt|grep Xvnc</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190111211103409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>这里我们可以看到5901端口已经被监听<br><br>第七步：开放防火墙的5901端口：<br><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-port=5901/tcp --permanent</span><br></pre></td></tr></table></figure>\n<p>如果防火墙没有启动需要先启动防火墙。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/2019011121160287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>当然也可以狠一点，直接停止防火墙：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190111211803178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>停止之后该需要禁止开机启动：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>\n<p>第八步：关闭SELinux，编辑/etc/selinux/config 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/selinux/config</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190111212208680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>将selinux设置为disabled</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/2019011121253381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>到这里vnc服务已经安装完毕，下面就可使用vnc客户端来连接。</p>\n<p>第九步：在vnc客户端（vnc viewer）输入服务器IP:桌面号（如192.168.31.100:1），输入后回车：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190111213220647.png\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>第十步：输入IP后会弹出确认，点击contiue即可：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190111213443826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>第十一步：输入vnc密码：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190111213532135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>第十二步：登录成功，输入远程机器密码（登录成功后需要输入远程机器的用户的密码，如果没有密码就可以直接进入系统）：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190111214637416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>第十三步：成功进入远程桌面：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190111214719914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>至此整个CentOS7.x 的VNC服务安装完毕^_^。</p>\n<p>小贴士：vnc服务只能在局域网使用，如果在外网，则需要有公网IP地址，VNC不仅具备内网穿透功能。</p>\n<h2 id=\"ubuntu-安装-vnc-viewer\"><a href=\"#ubuntu-安装-vnc-viewer\" class=\"headerlink\" title=\"ubuntu 安装 vnc viewer\"></a>ubuntu 安装 vnc viewer</h2><p>vnc view的网站<code>https://www.realvnc.com/en/connect/download/viewer/</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i VNC-Viewer-6.17.1113-Linux-x64.deb</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://my.oschina.net/huhaoren/blog/497394\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/huhaoren/blog/497394</a></p>\n</blockquote>\n</user>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"centos-安装-vnc-server\"><a href=\"#centos-安装-vnc-server\" class=\"headerlink\" title=\"centos 安装 vnc server\"></a>centos 安装 vnc server</h2><p>VNC需要系统安装的有桌面，如果是生产环境服务器，安装时使用的最小化安装，那么进行下面操作按章GNOME 桌面。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出的组列表里有GNOME Desktop。</span></span><br><span class=\"line\"></span><br><span class=\"line\">yum grouplist  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#安装之</span></span><br><span class=\"line\"></span><br><span class=\"line\">yum groupinstall -y <span class=\"string\">\"GNOME Desktop\"</span> </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装完成后，修改默认启动方式为图形化界面</span></span><br><span class=\"line\"></span><br><span class=\"line\">systemctl <span class=\"built_in\">set</span>-default graphical.target  //设置成图形模式 </span><br><span class=\"line\"><span class=\"comment\"># 如果要换回来 </span></span><br><span class=\"line\">systemctl <span class=\"built_in\">set</span>-default multi-user.target  //设置成命令模式 </span><br><span class=\"line\"><span class=\"comment\">#然后重启系统即可</span></span><br></pre></td></tr></table></figure>\n<p>第一步：安装VNC服务软件，使用root用户执行以下命令（以下操作没有特别说明均在root用户）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install tigervnc-server -y</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/2019011120374466.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>安装后可以使用如下命令来验证是否安装成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa|grep tigervnc-server</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190111204109802.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>第二步：复制vnc的启动操作脚本, vncserver@:1.service中的：1表示”桌面号”，启动的端口号就是5900+桌面号，即是5901，如果再有一个就是2啦，端口号加1就是5902，以此类推：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service</span><br></pre></td></tr></table></figure>\n<p>第三步：编辑 /etc/systemd/system/vncserver@:1.service</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/systemd/system/vncserver@\\:1.service</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190111205105834.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>vnc配置文件修改前<br><br>找到其中的<user> ，修改成自己的用户名，如果是root用户登录桌面就使用root用户，如果使用普通用户登录桌面使用普通用户，这里笔者使用用户名：cy<br><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190111205309803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>vnc配置文件修改后<br><br>修改完毕后保存退出vim。<br><br>第四步：设置vnc密码，执行su cy，切换到刚配置文件设置的cy用户，执行（这一步是在cy用户下操作），输入两次密码，输入完成后会提示是否设置view-only password（<em>“View-only</em> <em>password”密码，</em>只允许查看,无控制权限。）这个可设可不设：<br><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vncpasswd</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190111205934208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>第五步：启动服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start vncserver@\\:1.service</span><br></pre></td></tr></table></figure>\n<p>第一次输入启动服务命令可能会要求输入（从新加载配置文件，新增和配置文件发生变化时都需要执行 daemon-reload 子命令）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n<p>执行完毕之后在执行启动命令就可以了：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190111205848408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>可以加入开机启动，下次开机就会自动启动啦：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> vncserver@\\:1.service</span><br></pre></td></tr></table></figure>\n<p>第六步：查看端口是否监听：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -lnpt|grep Xvnc</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190111211103409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>这里我们可以看到5901端口已经被监听<br><br>第七步：开放防火墙的5901端口：<br><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-port=5901/tcp --permanent</span><br></pre></td></tr></table></figure>\n<p>如果防火墙没有启动需要先启动防火墙。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/2019011121160287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>当然也可以狠一点，直接停止防火墙：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190111211803178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>停止之后该需要禁止开机启动：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>\n<p>第八步：关闭SELinux，编辑/etc/selinux/config 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/selinux/config</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190111212208680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>将selinux设置为disabled</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/2019011121253381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>到这里vnc服务已经安装完毕，下面就可使用vnc客户端来连接。</p>\n<p>第九步：在vnc客户端（vnc viewer）输入服务器IP:桌面号（如192.168.31.100:1），输入后回车：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190111213220647.png\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>第十步：输入IP后会弹出确认，点击contiue即可：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190111213443826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>第十一步：输入vnc密码：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190111213532135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>第十二步：登录成功，输入远程机器密码（登录成功后需要输入远程机器的用户的密码，如果没有密码就可以直接进入系统）：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190111214637416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>第十三步：成功进入远程桌面：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img-blog.csdnimg.cn/20190111214719914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25haGFuY3k=,size_16,color_FFFFFF,t_70\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>至此整个CentOS7.x 的VNC服务安装完毕^_^。</p>\n<p>小贴士：vnc服务只能在局域网使用，如果在外网，则需要有公网IP地址，VNC不仅具备内网穿透功能。</p>\n<h2 id=\"ubuntu-安装-vnc-viewer\"><a href=\"#ubuntu-安装-vnc-viewer\" class=\"headerlink\" title=\"ubuntu 安装 vnc viewer\"></a>ubuntu 安装 vnc viewer</h2><p>vnc view的网站<code>https://www.realvnc.com/en/connect/download/viewer/</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i VNC-Viewer-6.17.1113-Linux-x64.deb</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://my.oschina.net/huhaoren/blog/497394\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/huhaoren/blog/497394</a></p>\n</blockquote>\n</user>"},{"title":"sudoer文件解析","date":"2020-09-05T13:40:23.000Z","_content":"\n- sudo的权限控制可以在`/etc/sudoers`文件中查看到。\n\n  如果想要控制某个用户(或某个组用户)只能执行root权限中的一部分命令, 或者允许某些用户使用sudo时不需要输入密码,就需要对该文件有所了解。\n\n  一般来说，通过`cat /etc/sudoers`指令来查看该文件, 会看到如下几行代码:\n\n  ```bash\n  root   ALL=(ALL:ALL) ALL\n  %wheel ALL=(ALL) ALL\n  %sudo  ALL=(ALL:ALL) ALL\n  ```\n\n  对`/etc/sudoers`文件进行编辑的代码公式可以概括为:\n\n  ```bash\n  授权用户/组 主机=[(切换到哪些用户或组)] [是否需要输入密码验证] 命令1,命令2,...\n  ```\n\n  凡是`[ ]`中的内容, 都能省略; 命令和命令之间用`,`号分隔;\n\n  为了方便说明, 将公式的各个部分称呼为字段1 - 字段5:\n\n  ```bash\n  授权用户/组 主机  =[(切换到哪些用户或组)] [是否需要输入密码验证] 命令1,命令2,...\n  字段1      字段2  =[(字段3)] [字段4] 字段5\n  ```\n\n  字段3、字段4，是可以省略的。\n\n  在上面的默认例子中, \"字段1\"不以`%`号开头的表示\"将要授权的用户\", 比如例子中的`root`；\n  以`%`号开头的表示\"将要授权的组\", 比如例子中的`%wheel`组 和 `%sudo`组。\n\n  \"字段2\"表示允许登录的主机, ALL表示所有; 如果该字段不为ALL,表示授权用户只能在某些机器上登录本服务器来执行sudo命令. 比如:\n\n  ```bash\n  jack mycomputer=/usr/sbin/reboot,/usr/sbin/shutdown\n  ```\n\n  表示: 普通用户jack在主机(或主机组)mycomputer上, 可以通过sudo执行reboot和shutdown两个命令。\"字段3\"和\"字段4\"省略。\n\n  \"字段3\"如果省略, 相当于`(root:root)`，表示可以通过`sudo`提权到root; 如果为`(ALL)`或者`(ALL:ALL)`, 表示能够提权到`(任意用户:任意用户组)`。\n\n  请注意，\"字段3\"如果没省略,必须使用`( )`双括号包含起来。这样才能区分是省略了\"字段3\"还是省略了\"字段4\"。\n\n  \"字段4\"的可能取值是`NOPASSWD:`。请注意NOPASSWD后面带有冒号`:`。表示执行sudo时可以不需要输入密码。比如:\n\n  ```bash\n  lucy ALL=(ALL) NOPASSWD: /bin/useradd\n  ```\n\n  表示: 普通用户lucy可以在任何主机上, 通过sudo执行`/bin/useradd`命令, 并且不需要输入密码.\n\n  又比如:\n\n  ```bash\n  peter ALL=(ALL) NOPASSWD: ALL\n  ```\n\n  表示: 普通用户peter可以在任何主机上, 通过sudo执行任何命令, 并且不需要输入密码。\n\n  \"字段5\"是使用逗号分开一系列命令,这些命令就是授权给用户的操作; ALL表示允许所有操作。\n\n  你可能已经注意到了, 命令都是使用绝对路径, 这是为了避免目录下有同名命令被执行，从而造成安全隐患。\n\n  如果你将授权写成如下安全性欠妥的格式:\n\n  ```\n  lucy ALL=(ALL) chown,chmod,useradd\n  ```\n\n  那么用户就有可能创建一个他自己的程序, 也命名为userad, 然后放在它的本地路径中, 如此一来他就能够使用root来执行这个\"名为useradd的程序\"。这是相当危险的!\n\n  命令的绝对路径可通过`which`指令查看到: 比如`which useradd`可以查看到命令`useradd`的绝对路径: `/usr/sbin/useradd`\n\n  ### 公式还要扩充\n\n  例子1:\n\n  ```bash\n  papi ALL=(root) NOPASSWD: /bin/chown,/usr/sbin/useradd\n  ```\n\n  表示: 用户papi能在所有可能出现的主机上, 提权到root下执行/bin/chown, 不必输入密码; 但运行/usr/sbin/useradd 命令时需要密码.\n\n  这是因为`NOPASSWD:`只影响了其后的第一个命令: 命令1.\n\n  上面给出的公式只是简化版，完整的公式如下:\n\n  ```bash\n  授权用户/组 主机=[(切换到哪些用户或组)] [是否需要输入密码验证] 命令1, [(字段3)] [字段4] 命令2, ...\n  ```\n\n  在具有sudo操作的用户下, 执行`sudo -l`可以查看到该用户被允许和被禁止运行的命令.\n\n  ### 通配符和取消命令\n\n  例子2:\n\n  ```\n  papi ALL=/usr/sbin/*,/sbin/*,!/usr/sbin/fdisk\n  ```\n\n  用例子2来说明通配符`*`的用法, 以及命令前面加上`!`号表示取消该命令。\n\n  该例子的意思是: 用户papi在所有可能出现的主机上, 能够运行目录/usr/sbin和/sbin下所有的程序, 但fdisk除外.\n\n  ### 开始编辑\n\n  “你讲了这么多,但是在实践中,我去编辑/etc/sudoers文件，系统提示我没权限啊，怎么办?”\n\n  这是因为`/etc/sudoers`的内容如此敏感，以至于该文件是只读的。所以，编辑该文件前，请确认清楚你知道自己正在做什么。\n\n  强烈建议通过`visudo`命令来修改该文件，通过`visudo`修改，如果配置出错，会有提示。\n\n  不过，系统文档推荐的做法，不是直接修改`/etc/sudoers`文件，而是将修改写在`/etc/sudoers.d/`目录下的文件中。\n\n  如果使用这种方式修改sudoers，需要在`/etc/sudoers`文件的最后行，加上`#includedir /etc/sudoers.d`一行(默认已有):\n\n  ```\n  #includedir /etc/sudoers.d\n  ```\n\n  注意了，这里的指令`#includedir`是一个整体, 前面的`#`号不能丢，并非注释，也不能在`#`号后有空格。\n\n  任何在`/etc/sudoers.d/`目录下，不以`~`号结尾的文件和不包含`.`号的文件，都会被解析成`/etc/sudoers`的内容。\n\n  文档中是这么说的:\n\n  ```bash\n  # This will cause sudo to read and parse any files in the /etc/sudoers.d\n  # directory that do not end in '~' or contain a '.' character.\n  \n  # Note that there must be at least one file in the sudoers.d directory (this\n  # one will do), and all files in this directory should be mode 0440.\n  \n  # Note also, that because sudoers contents can vary widely, no attempt is\n  # made to add this directive to existing sudoers files on upgrade.\n  \n  # Finally, please note that using the visudo command is the recommended way\n  # to update sudoers content, since it protects against many failure modes.\n  ```\n\n  ### 其他小知识\n\n  #### 输入密码时有反馈\n\n  当使用sudo后输入密码，并不会显示任何东西 —— 甚至连常规的星号都没有。有个办法可以解决该问题。\n\n  打开`/etc/sudoers`文件找到下述一行:\n\n  ```bash\n  Defaults env_reset\n  ```\n\n  修改成:\n\n  ```bash\n  Defaults        env_reset,pwfeedback\n  ```\n\n  #### 修改sudo会话时间\n\n  如果你经常使用sudo 命令，你肯定注意到过当你成功输入一次密码后，可以不用再输入密码就可以运行几次sudo命令。\n  但是一段时间后，sudo 命令会再次要求你输入密码。默认是15分钟，该时间可以调整。添加`timestamp_timeout=分钟数`即可。\n  时间以分钟为单位，-1表示永不过期，但强烈不推荐。\n\n  比如我希望将时间延长到1小时，还是打开`/etc/sudoers`文件找到下述一行:\n\n  ```bash\n  Defaults env_reset\n  ```\n\n  修改成:\n\n  ```bash\n  Defaults        env_reset,pwfeedback,timestamp_timeout=60\n  ```\n\n","source":"_posts/运维/sudoer文件解析.md","raw":"---\ntitle: sudoer文件解析\ndate: 2020-9-05 21:40:23\ntags:\n- linux\n---\n\n- sudo的权限控制可以在`/etc/sudoers`文件中查看到。\n\n  如果想要控制某个用户(或某个组用户)只能执行root权限中的一部分命令, 或者允许某些用户使用sudo时不需要输入密码,就需要对该文件有所了解。\n\n  一般来说，通过`cat /etc/sudoers`指令来查看该文件, 会看到如下几行代码:\n\n  ```bash\n  root   ALL=(ALL:ALL) ALL\n  %wheel ALL=(ALL) ALL\n  %sudo  ALL=(ALL:ALL) ALL\n  ```\n\n  对`/etc/sudoers`文件进行编辑的代码公式可以概括为:\n\n  ```bash\n  授权用户/组 主机=[(切换到哪些用户或组)] [是否需要输入密码验证] 命令1,命令2,...\n  ```\n\n  凡是`[ ]`中的内容, 都能省略; 命令和命令之间用`,`号分隔;\n\n  为了方便说明, 将公式的各个部分称呼为字段1 - 字段5:\n\n  ```bash\n  授权用户/组 主机  =[(切换到哪些用户或组)] [是否需要输入密码验证] 命令1,命令2,...\n  字段1      字段2  =[(字段3)] [字段4] 字段5\n  ```\n\n  字段3、字段4，是可以省略的。\n\n  在上面的默认例子中, \"字段1\"不以`%`号开头的表示\"将要授权的用户\", 比如例子中的`root`；\n  以`%`号开头的表示\"将要授权的组\", 比如例子中的`%wheel`组 和 `%sudo`组。\n\n  \"字段2\"表示允许登录的主机, ALL表示所有; 如果该字段不为ALL,表示授权用户只能在某些机器上登录本服务器来执行sudo命令. 比如:\n\n  ```bash\n  jack mycomputer=/usr/sbin/reboot,/usr/sbin/shutdown\n  ```\n\n  表示: 普通用户jack在主机(或主机组)mycomputer上, 可以通过sudo执行reboot和shutdown两个命令。\"字段3\"和\"字段4\"省略。\n\n  \"字段3\"如果省略, 相当于`(root:root)`，表示可以通过`sudo`提权到root; 如果为`(ALL)`或者`(ALL:ALL)`, 表示能够提权到`(任意用户:任意用户组)`。\n\n  请注意，\"字段3\"如果没省略,必须使用`( )`双括号包含起来。这样才能区分是省略了\"字段3\"还是省略了\"字段4\"。\n\n  \"字段4\"的可能取值是`NOPASSWD:`。请注意NOPASSWD后面带有冒号`:`。表示执行sudo时可以不需要输入密码。比如:\n\n  ```bash\n  lucy ALL=(ALL) NOPASSWD: /bin/useradd\n  ```\n\n  表示: 普通用户lucy可以在任何主机上, 通过sudo执行`/bin/useradd`命令, 并且不需要输入密码.\n\n  又比如:\n\n  ```bash\n  peter ALL=(ALL) NOPASSWD: ALL\n  ```\n\n  表示: 普通用户peter可以在任何主机上, 通过sudo执行任何命令, 并且不需要输入密码。\n\n  \"字段5\"是使用逗号分开一系列命令,这些命令就是授权给用户的操作; ALL表示允许所有操作。\n\n  你可能已经注意到了, 命令都是使用绝对路径, 这是为了避免目录下有同名命令被执行，从而造成安全隐患。\n\n  如果你将授权写成如下安全性欠妥的格式:\n\n  ```\n  lucy ALL=(ALL) chown,chmod,useradd\n  ```\n\n  那么用户就有可能创建一个他自己的程序, 也命名为userad, 然后放在它的本地路径中, 如此一来他就能够使用root来执行这个\"名为useradd的程序\"。这是相当危险的!\n\n  命令的绝对路径可通过`which`指令查看到: 比如`which useradd`可以查看到命令`useradd`的绝对路径: `/usr/sbin/useradd`\n\n  ### 公式还要扩充\n\n  例子1:\n\n  ```bash\n  papi ALL=(root) NOPASSWD: /bin/chown,/usr/sbin/useradd\n  ```\n\n  表示: 用户papi能在所有可能出现的主机上, 提权到root下执行/bin/chown, 不必输入密码; 但运行/usr/sbin/useradd 命令时需要密码.\n\n  这是因为`NOPASSWD:`只影响了其后的第一个命令: 命令1.\n\n  上面给出的公式只是简化版，完整的公式如下:\n\n  ```bash\n  授权用户/组 主机=[(切换到哪些用户或组)] [是否需要输入密码验证] 命令1, [(字段3)] [字段4] 命令2, ...\n  ```\n\n  在具有sudo操作的用户下, 执行`sudo -l`可以查看到该用户被允许和被禁止运行的命令.\n\n  ### 通配符和取消命令\n\n  例子2:\n\n  ```\n  papi ALL=/usr/sbin/*,/sbin/*,!/usr/sbin/fdisk\n  ```\n\n  用例子2来说明通配符`*`的用法, 以及命令前面加上`!`号表示取消该命令。\n\n  该例子的意思是: 用户papi在所有可能出现的主机上, 能够运行目录/usr/sbin和/sbin下所有的程序, 但fdisk除外.\n\n  ### 开始编辑\n\n  “你讲了这么多,但是在实践中,我去编辑/etc/sudoers文件，系统提示我没权限啊，怎么办?”\n\n  这是因为`/etc/sudoers`的内容如此敏感，以至于该文件是只读的。所以，编辑该文件前，请确认清楚你知道自己正在做什么。\n\n  强烈建议通过`visudo`命令来修改该文件，通过`visudo`修改，如果配置出错，会有提示。\n\n  不过，系统文档推荐的做法，不是直接修改`/etc/sudoers`文件，而是将修改写在`/etc/sudoers.d/`目录下的文件中。\n\n  如果使用这种方式修改sudoers，需要在`/etc/sudoers`文件的最后行，加上`#includedir /etc/sudoers.d`一行(默认已有):\n\n  ```\n  #includedir /etc/sudoers.d\n  ```\n\n  注意了，这里的指令`#includedir`是一个整体, 前面的`#`号不能丢，并非注释，也不能在`#`号后有空格。\n\n  任何在`/etc/sudoers.d/`目录下，不以`~`号结尾的文件和不包含`.`号的文件，都会被解析成`/etc/sudoers`的内容。\n\n  文档中是这么说的:\n\n  ```bash\n  # This will cause sudo to read and parse any files in the /etc/sudoers.d\n  # directory that do not end in '~' or contain a '.' character.\n  \n  # Note that there must be at least one file in the sudoers.d directory (this\n  # one will do), and all files in this directory should be mode 0440.\n  \n  # Note also, that because sudoers contents can vary widely, no attempt is\n  # made to add this directive to existing sudoers files on upgrade.\n  \n  # Finally, please note that using the visudo command is the recommended way\n  # to update sudoers content, since it protects against many failure modes.\n  ```\n\n  ### 其他小知识\n\n  #### 输入密码时有反馈\n\n  当使用sudo后输入密码，并不会显示任何东西 —— 甚至连常规的星号都没有。有个办法可以解决该问题。\n\n  打开`/etc/sudoers`文件找到下述一行:\n\n  ```bash\n  Defaults env_reset\n  ```\n\n  修改成:\n\n  ```bash\n  Defaults        env_reset,pwfeedback\n  ```\n\n  #### 修改sudo会话时间\n\n  如果你经常使用sudo 命令，你肯定注意到过当你成功输入一次密码后，可以不用再输入密码就可以运行几次sudo命令。\n  但是一段时间后，sudo 命令会再次要求你输入密码。默认是15分钟，该时间可以调整。添加`timestamp_timeout=分钟数`即可。\n  时间以分钟为单位，-1表示永不过期，但强烈不推荐。\n\n  比如我希望将时间延长到1小时，还是打开`/etc/sudoers`文件找到下述一行:\n\n  ```bash\n  Defaults env_reset\n  ```\n\n  修改成:\n\n  ```bash\n  Defaults        env_reset,pwfeedback,timestamp_timeout=60\n  ```\n\n","slug":"运维/sudoer文件解析","published":1,"updated":"2020-09-20T03:22:55.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblny00684tjetl9eix0v","content":"<ul>\n<li><p>sudo的权限控制可以在<code>/etc/sudoers</code>文件中查看到。</p>\n<p>如果想要控制某个用户(或某个组用户)只能执行root权限中的一部分命令, 或者允许某些用户使用sudo时不需要输入密码,就需要对该文件有所了解。</p>\n<p>一般来说，通过<code>cat /etc/sudoers</code>指令来查看该文件, 会看到如下几行代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root   ALL=(ALL:ALL) ALL</span><br><span class=\"line\">%wheel ALL=(ALL) ALL</span><br><span class=\"line\">%sudo  ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure>\n<p>对<code>/etc/sudoers</code>文件进行编辑的代码公式可以概括为:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">授权用户/组 主机=[(切换到哪些用户或组)] [是否需要输入密码验证] 命令1,命令2,...</span><br></pre></td></tr></table></figure>\n<p>凡是<code>[ ]</code>中的内容, 都能省略; 命令和命令之间用<code>,</code>号分隔;</p>\n<p>为了方便说明, 将公式的各个部分称呼为字段1 - 字段5:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">授权用户/组 主机  =[(切换到哪些用户或组)] [是否需要输入密码验证] 命令1,命令2,...</span><br><span class=\"line\">字段1      字段2  =[(字段3)] [字段4] 字段5</span><br></pre></td></tr></table></figure>\n<p>字段3、字段4，是可以省略的。</p>\n<p>在上面的默认例子中, “字段1”不以<code>%</code>号开头的表示”将要授权的用户”, 比如例子中的<code>root</code>；<br>以<code>%</code>号开头的表示”将要授权的组”, 比如例子中的<code>%wheel</code>组 和 <code>%sudo</code>组。</p>\n<p>“字段2”表示允许登录的主机, ALL表示所有; 如果该字段不为ALL,表示授权用户只能在某些机器上登录本服务器来执行sudo命令. 比如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jack mycomputer=/usr/sbin/reboot,/usr/sbin/shutdown</span><br></pre></td></tr></table></figure>\n<p>表示: 普通用户jack在主机(或主机组)mycomputer上, 可以通过sudo执行reboot和shutdown两个命令。”字段3”和”字段4”省略。</p>\n<p>“字段3”如果省略, 相当于<code>(root:root)</code>，表示可以通过<code>sudo</code>提权到root; 如果为<code>(ALL)</code>或者<code>(ALL:ALL)</code>, 表示能够提权到<code>(任意用户:任意用户组)</code>。</p>\n<p>请注意，”字段3”如果没省略,必须使用<code>( )</code>双括号包含起来。这样才能区分是省略了”字段3”还是省略了”字段4”。</p>\n<p>“字段4”的可能取值是<code>NOPASSWD:</code>。请注意NOPASSWD后面带有冒号<code>:</code>。表示执行sudo时可以不需要输入密码。比如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lucy ALL=(ALL) NOPASSWD: /bin/useradd</span><br></pre></td></tr></table></figure>\n<p>表示: 普通用户lucy可以在任何主机上, 通过sudo执行<code>/bin/useradd</code>命令, 并且不需要输入密码.</p>\n<p>又比如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">peter ALL=(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure>\n<p>表示: 普通用户peter可以在任何主机上, 通过sudo执行任何命令, 并且不需要输入密码。</p>\n<p>“字段5”是使用逗号分开一系列命令,这些命令就是授权给用户的操作; ALL表示允许所有操作。</p>\n<p>你可能已经注意到了, 命令都是使用绝对路径, 这是为了避免目录下有同名命令被执行，从而造成安全隐患。</p>\n<p>如果你将授权写成如下安全性欠妥的格式:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lucy ALL=(ALL) chown,chmod,useradd</span><br></pre></td></tr></table></figure>\n<p>那么用户就有可能创建一个他自己的程序, 也命名为userad, 然后放在它的本地路径中, 如此一来他就能够使用root来执行这个”名为useradd的程序”。这是相当危险的!</p>\n<p>命令的绝对路径可通过<code>which</code>指令查看到: 比如<code>which useradd</code>可以查看到命令<code>useradd</code>的绝对路径: <code>/usr/sbin/useradd</code></p>\n<h3 id=\"公式还要扩充\"><a href=\"#公式还要扩充\" class=\"headerlink\" title=\"公式还要扩充\"></a>公式还要扩充</h3><p>例子1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">papi ALL=(root) NOPASSWD: /bin/chown,/usr/sbin/useradd</span><br></pre></td></tr></table></figure>\n<p>表示: 用户papi能在所有可能出现的主机上, 提权到root下执行/bin/chown, 不必输入密码; 但运行/usr/sbin/useradd 命令时需要密码.</p>\n<p>这是因为<code>NOPASSWD:</code>只影响了其后的第一个命令: 命令1.</p>\n<p>上面给出的公式只是简化版，完整的公式如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">授权用户/组 主机=[(切换到哪些用户或组)] [是否需要输入密码验证] 命令1, [(字段3)] [字段4] 命令2, ...</span><br></pre></td></tr></table></figure>\n<p>在具有sudo操作的用户下, 执行<code>sudo -l</code>可以查看到该用户被允许和被禁止运行的命令.</p>\n<h3 id=\"通配符和取消命令\"><a href=\"#通配符和取消命令\" class=\"headerlink\" title=\"通配符和取消命令\"></a>通配符和取消命令</h3><p>例子2:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">papi ALL=/usr/sbin/*,/sbin/*,!/usr/sbin/fdisk</span><br></pre></td></tr></table></figure>\n<p>用例子2来说明通配符<code>*</code>的用法, 以及命令前面加上<code>!</code>号表示取消该命令。</p>\n<p>该例子的意思是: 用户papi在所有可能出现的主机上, 能够运行目录/usr/sbin和/sbin下所有的程序, 但fdisk除外.</p>\n<h3 id=\"开始编辑\"><a href=\"#开始编辑\" class=\"headerlink\" title=\"开始编辑\"></a>开始编辑</h3><p>“你讲了这么多,但是在实践中,我去编辑/etc/sudoers文件，系统提示我没权限啊，怎么办?”</p>\n<p>这是因为<code>/etc/sudoers</code>的内容如此敏感，以至于该文件是只读的。所以，编辑该文件前，请确认清楚你知道自己正在做什么。</p>\n<p>强烈建议通过<code>visudo</code>命令来修改该文件，通过<code>visudo</code>修改，如果配置出错，会有提示。</p>\n<p>不过，系统文档推荐的做法，不是直接修改<code>/etc/sudoers</code>文件，而是将修改写在<code>/etc/sudoers.d/</code>目录下的文件中。</p>\n<p>如果使用这种方式修改sudoers，需要在<code>/etc/sudoers</code>文件的最后行，加上<code>#includedir /etc/sudoers.d</code>一行(默认已有):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#includedir /etc/sudoers.d</span><br></pre></td></tr></table></figure>\n<p>注意了，这里的指令<code>#includedir</code>是一个整体, 前面的<code>#</code>号不能丢，并非注释，也不能在<code>#</code>号后有空格。</p>\n<p>任何在<code>/etc/sudoers.d/</code>目录下，不以<code>~</code>号结尾的文件和不包含<code>.</code>号的文件，都会被解析成<code>/etc/sudoers</code>的内容。</p>\n<p>文档中是这么说的:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This will cause sudo to read and parse any files in the /etc/sudoers.d</span></span><br><span class=\"line\"><span class=\"comment\"># directory that do not end in '~' or contain a '.' character.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Note that there must be at least one file in the sudoers.d directory (this</span></span><br><span class=\"line\"><span class=\"comment\"># one will do), and all files in this directory should be mode 0440.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Note also, that because sudoers contents can vary widely, no attempt is</span></span><br><span class=\"line\"><span class=\"comment\"># made to add this directive to existing sudoers files on upgrade.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Finally, please note that using the visudo command is the recommended way</span></span><br><span class=\"line\"><span class=\"comment\"># to update sudoers content, since it protects against many failure modes.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"其他小知识\"><a href=\"#其他小知识\" class=\"headerlink\" title=\"其他小知识\"></a>其他小知识</h3><h4 id=\"输入密码时有反馈\"><a href=\"#输入密码时有反馈\" class=\"headerlink\" title=\"输入密码时有反馈\"></a>输入密码时有反馈</h4><p>当使用sudo后输入密码，并不会显示任何东西 —— 甚至连常规的星号都没有。有个办法可以解决该问题。</p>\n<p>打开<code>/etc/sudoers</code>文件找到下述一行:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Defaults env_reset</span><br></pre></td></tr></table></figure>\n<p>修改成:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Defaults        env_reset,pwfeedback</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改sudo会话时间\"><a href=\"#修改sudo会话时间\" class=\"headerlink\" title=\"修改sudo会话时间\"></a>修改sudo会话时间</h4><p>如果你经常使用sudo 命令，你肯定注意到过当你成功输入一次密码后，可以不用再输入密码就可以运行几次sudo命令。<br>但是一段时间后，sudo 命令会再次要求你输入密码。默认是15分钟，该时间可以调整。添加<code>timestamp_timeout=分钟数</code>即可。<br>时间以分钟为单位，-1表示永不过期，但强烈不推荐。</p>\n<p>比如我希望将时间延长到1小时，还是打开<code>/etc/sudoers</code>文件找到下述一行:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Defaults env_reset</span><br></pre></td></tr></table></figure>\n<p>修改成:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Defaults        env_reset,pwfeedback,timestamp_timeout=60</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>sudo的权限控制可以在<code>/etc/sudoers</code>文件中查看到。</p>\n<p>如果想要控制某个用户(或某个组用户)只能执行root权限中的一部分命令, 或者允许某些用户使用sudo时不需要输入密码,就需要对该文件有所了解。</p>\n<p>一般来说，通过<code>cat /etc/sudoers</code>指令来查看该文件, 会看到如下几行代码:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root   ALL=(ALL:ALL) ALL</span><br><span class=\"line\">%wheel ALL=(ALL) ALL</span><br><span class=\"line\">%sudo  ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure>\n<p>对<code>/etc/sudoers</code>文件进行编辑的代码公式可以概括为:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">授权用户/组 主机=[(切换到哪些用户或组)] [是否需要输入密码验证] 命令1,命令2,...</span><br></pre></td></tr></table></figure>\n<p>凡是<code>[ ]</code>中的内容, 都能省略; 命令和命令之间用<code>,</code>号分隔;</p>\n<p>为了方便说明, 将公式的各个部分称呼为字段1 - 字段5:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">授权用户/组 主机  =[(切换到哪些用户或组)] [是否需要输入密码验证] 命令1,命令2,...</span><br><span class=\"line\">字段1      字段2  =[(字段3)] [字段4] 字段5</span><br></pre></td></tr></table></figure>\n<p>字段3、字段4，是可以省略的。</p>\n<p>在上面的默认例子中, “字段1”不以<code>%</code>号开头的表示”将要授权的用户”, 比如例子中的<code>root</code>；<br>以<code>%</code>号开头的表示”将要授权的组”, 比如例子中的<code>%wheel</code>组 和 <code>%sudo</code>组。</p>\n<p>“字段2”表示允许登录的主机, ALL表示所有; 如果该字段不为ALL,表示授权用户只能在某些机器上登录本服务器来执行sudo命令. 比如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jack mycomputer=/usr/sbin/reboot,/usr/sbin/shutdown</span><br></pre></td></tr></table></figure>\n<p>表示: 普通用户jack在主机(或主机组)mycomputer上, 可以通过sudo执行reboot和shutdown两个命令。”字段3”和”字段4”省略。</p>\n<p>“字段3”如果省略, 相当于<code>(root:root)</code>，表示可以通过<code>sudo</code>提权到root; 如果为<code>(ALL)</code>或者<code>(ALL:ALL)</code>, 表示能够提权到<code>(任意用户:任意用户组)</code>。</p>\n<p>请注意，”字段3”如果没省略,必须使用<code>( )</code>双括号包含起来。这样才能区分是省略了”字段3”还是省略了”字段4”。</p>\n<p>“字段4”的可能取值是<code>NOPASSWD:</code>。请注意NOPASSWD后面带有冒号<code>:</code>。表示执行sudo时可以不需要输入密码。比如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lucy ALL=(ALL) NOPASSWD: /bin/useradd</span><br></pre></td></tr></table></figure>\n<p>表示: 普通用户lucy可以在任何主机上, 通过sudo执行<code>/bin/useradd</code>命令, 并且不需要输入密码.</p>\n<p>又比如:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">peter ALL=(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure>\n<p>表示: 普通用户peter可以在任何主机上, 通过sudo执行任何命令, 并且不需要输入密码。</p>\n<p>“字段5”是使用逗号分开一系列命令,这些命令就是授权给用户的操作; ALL表示允许所有操作。</p>\n<p>你可能已经注意到了, 命令都是使用绝对路径, 这是为了避免目录下有同名命令被执行，从而造成安全隐患。</p>\n<p>如果你将授权写成如下安全性欠妥的格式:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lucy ALL=(ALL) chown,chmod,useradd</span><br></pre></td></tr></table></figure>\n<p>那么用户就有可能创建一个他自己的程序, 也命名为userad, 然后放在它的本地路径中, 如此一来他就能够使用root来执行这个”名为useradd的程序”。这是相当危险的!</p>\n<p>命令的绝对路径可通过<code>which</code>指令查看到: 比如<code>which useradd</code>可以查看到命令<code>useradd</code>的绝对路径: <code>/usr/sbin/useradd</code></p>\n<h3 id=\"公式还要扩充\"><a href=\"#公式还要扩充\" class=\"headerlink\" title=\"公式还要扩充\"></a>公式还要扩充</h3><p>例子1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">papi ALL=(root) NOPASSWD: /bin/chown,/usr/sbin/useradd</span><br></pre></td></tr></table></figure>\n<p>表示: 用户papi能在所有可能出现的主机上, 提权到root下执行/bin/chown, 不必输入密码; 但运行/usr/sbin/useradd 命令时需要密码.</p>\n<p>这是因为<code>NOPASSWD:</code>只影响了其后的第一个命令: 命令1.</p>\n<p>上面给出的公式只是简化版，完整的公式如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">授权用户/组 主机=[(切换到哪些用户或组)] [是否需要输入密码验证] 命令1, [(字段3)] [字段4] 命令2, ...</span><br></pre></td></tr></table></figure>\n<p>在具有sudo操作的用户下, 执行<code>sudo -l</code>可以查看到该用户被允许和被禁止运行的命令.</p>\n<h3 id=\"通配符和取消命令\"><a href=\"#通配符和取消命令\" class=\"headerlink\" title=\"通配符和取消命令\"></a>通配符和取消命令</h3><p>例子2:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">papi ALL=/usr/sbin/*,/sbin/*,!/usr/sbin/fdisk</span><br></pre></td></tr></table></figure>\n<p>用例子2来说明通配符<code>*</code>的用法, 以及命令前面加上<code>!</code>号表示取消该命令。</p>\n<p>该例子的意思是: 用户papi在所有可能出现的主机上, 能够运行目录/usr/sbin和/sbin下所有的程序, 但fdisk除外.</p>\n<h3 id=\"开始编辑\"><a href=\"#开始编辑\" class=\"headerlink\" title=\"开始编辑\"></a>开始编辑</h3><p>“你讲了这么多,但是在实践中,我去编辑/etc/sudoers文件，系统提示我没权限啊，怎么办?”</p>\n<p>这是因为<code>/etc/sudoers</code>的内容如此敏感，以至于该文件是只读的。所以，编辑该文件前，请确认清楚你知道自己正在做什么。</p>\n<p>强烈建议通过<code>visudo</code>命令来修改该文件，通过<code>visudo</code>修改，如果配置出错，会有提示。</p>\n<p>不过，系统文档推荐的做法，不是直接修改<code>/etc/sudoers</code>文件，而是将修改写在<code>/etc/sudoers.d/</code>目录下的文件中。</p>\n<p>如果使用这种方式修改sudoers，需要在<code>/etc/sudoers</code>文件的最后行，加上<code>#includedir /etc/sudoers.d</code>一行(默认已有):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#includedir /etc/sudoers.d</span><br></pre></td></tr></table></figure>\n<p>注意了，这里的指令<code>#includedir</code>是一个整体, 前面的<code>#</code>号不能丢，并非注释，也不能在<code>#</code>号后有空格。</p>\n<p>任何在<code>/etc/sudoers.d/</code>目录下，不以<code>~</code>号结尾的文件和不包含<code>.</code>号的文件，都会被解析成<code>/etc/sudoers</code>的内容。</p>\n<p>文档中是这么说的:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This will cause sudo to read and parse any files in the /etc/sudoers.d</span></span><br><span class=\"line\"><span class=\"comment\"># directory that do not end in '~' or contain a '.' character.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Note that there must be at least one file in the sudoers.d directory (this</span></span><br><span class=\"line\"><span class=\"comment\"># one will do), and all files in this directory should be mode 0440.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Note also, that because sudoers contents can vary widely, no attempt is</span></span><br><span class=\"line\"><span class=\"comment\"># made to add this directive to existing sudoers files on upgrade.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Finally, please note that using the visudo command is the recommended way</span></span><br><span class=\"line\"><span class=\"comment\"># to update sudoers content, since it protects against many failure modes.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"其他小知识\"><a href=\"#其他小知识\" class=\"headerlink\" title=\"其他小知识\"></a>其他小知识</h3><h4 id=\"输入密码时有反馈\"><a href=\"#输入密码时有反馈\" class=\"headerlink\" title=\"输入密码时有反馈\"></a>输入密码时有反馈</h4><p>当使用sudo后输入密码，并不会显示任何东西 —— 甚至连常规的星号都没有。有个办法可以解决该问题。</p>\n<p>打开<code>/etc/sudoers</code>文件找到下述一行:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Defaults env_reset</span><br></pre></td></tr></table></figure>\n<p>修改成:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Defaults        env_reset,pwfeedback</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改sudo会话时间\"><a href=\"#修改sudo会话时间\" class=\"headerlink\" title=\"修改sudo会话时间\"></a>修改sudo会话时间</h4><p>如果你经常使用sudo 命令，你肯定注意到过当你成功输入一次密码后，可以不用再输入密码就可以运行几次sudo命令。<br>但是一段时间后，sudo 命令会再次要求你输入密码。默认是15分钟，该时间可以调整。添加<code>timestamp_timeout=分钟数</code>即可。<br>时间以分钟为单位，-1表示永不过期，但强烈不推荐。</p>\n<p>比如我希望将时间延长到1小时，还是打开<code>/etc/sudoers</code>文件找到下述一行:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Defaults env_reset</span><br></pre></td></tr></table></figure>\n<p>修改成:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Defaults        env_reset,pwfeedback,timestamp_timeout=60</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"ngrok环境搭建","date":"2019-03-29T01:28:43.000Z","_content":"\n# 下载安装\n\n1. 配置golang环境\n\n   1. 安装go\n\n      ```bash\n      yum install golang\n      ```\n\n   2. 配置`GOPATH`\n\n2. 安装git2\n\n   ```ba&#39;sh\n   sudo yum remove git\n   sudo yum install epel-release\n   sudo yum install https://centos7.iuscommunity.org/ius-release.rpm\n   sudo yum install git2u\n   ```\n\n3. 下载ngrok\n\n   ```bash\n   go get github.com/inconshreveable/ngrok\n   ```\n\n# 生成证书\n\n   1. 使用let’s encrypt证书\n\n      1. 申请证书（具体看申请证书，主要通配符证书和三级域名）\n\n      2. 修改证书\n\n         客户端证书\n\n         ```bash\n         cd ngrok\n         cp /etc/letsencrypt/live/xncoding.com/chain.pem assets/client/tls/ngrokroot.crt\n         ```\n\n         服务端证书\n\n         ```bash\n         cp /etc/letsencrypt/live/xncoding.com/cert.pem assets/server/tls/snakeoil.crt\n         cp /etc/letsencrypt/live/xncoding.com/privkey.pem assets/server/tls/snakeoil.key\n         ```\n\n# 编译\n\n1. 编译服务端\n\n   ```bash\n   make release-server\n   ```\n\n2. 编译客户端\n\n   不同平台的客户端需要分开编译。不同平台使用不同的 GOOS 和 GOARCH，GOOS为go编译出来的操作系统 (windows,linux,darwin)，GOARCH, 对应的构架 (386,amd64,arm)\n\n   ```bash\n   GOOS=linux GOARCH=amd64 make release-client\n   GOOS=windows GOARCH=amd64 make release-client\n   GOOS=linux GOARCH=arm make release-client\n   ```\n\n# 启动服务器\n\n在开启之前，请主要端口是否开放\n\n```bash\n./ngrokd -domain=ngrok.sciento.top -httpAddr=:9580 -httpsAddr=:9443 -tunnelAddr=\":9444\"\n```\n\n# 启动客户端\n\n1. 配置文件,具体看官方文档\n\n   ```\n   server_addr: \"ngrok.sciento.top:9444\"\n   trust_host_root_certs: false\n   tunnels:\n     http:\n       subdomain: \"demo\"\n       proto:\n         http: \"9000\"\n         \n     https:\n       subdomain: \"demo\"\n       proto:\n         https: \"9000\"\n   \n   ```\n\n2. 启动\n\n   ```bash\n   ./ngrok -config=ngrok.cfg start http https\n   ```\n\n# nginx配置\n\n1. 安装nginx\n\n2. 配置\n\n   ```nginx\n   server {\n       listen       80;\n       server_name  demo.ngrok.xncoding.com;\n       return       301 https://demo.ngrok.xncoding.com$request_uri;\n   }\n   \n   server {\n       listen       443 ssl http2;\n       server_name  demo.ngrok.xncoding.com;\n   \n       charset utf-8;\n   \n       ssl_certificate /etc/letsencrypt/live/demo.ngrok.xncoding.com/fullchain.pem;\n       ssl_certificate_key /etc/letsencrypt/live/demo.ngrok.xncoding.com/privkey.pem;\n       ssl_trusted_certificate /etc/letsencrypt/live/demo.ngrok.xncoding.com/chain.pem;\n   \n       access_log /var/log/nginx/ngrok.log main;\n       error_log /var/log/nginx/ngrok_error.log error;\n   \n       location / {\n           proxy_pass http://127.0.0.1:5442;\n           proxy_redirect off;\n           proxy_set_header Host       $http_host:5442;\n           proxy_set_header X-Real-IP  $remote_addr;\n           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n       }\n   }\n   ```\n\n\n# 参考\n\nhttps://www.xncoding.com/2017/12/29/web/ngrok.html\n\nhttps://www.coldawn.com/how-to-issue-acmev2-wildcard-certificates-with-certbot-on-centos-7/\n\nhttps://www.jianshu.com/p/c5c9d071e395\n\nhttp://ngrok.cn/docs.html#tcp","source":"_posts/运维/ngrok环境搭建.md","raw":"---\ntitle: ngrok环境搭建\ndate: 2019-03-29 09:28:43\ntags:\n- linux\n---\n\n# 下载安装\n\n1. 配置golang环境\n\n   1. 安装go\n\n      ```bash\n      yum install golang\n      ```\n\n   2. 配置`GOPATH`\n\n2. 安装git2\n\n   ```ba&#39;sh\n   sudo yum remove git\n   sudo yum install epel-release\n   sudo yum install https://centos7.iuscommunity.org/ius-release.rpm\n   sudo yum install git2u\n   ```\n\n3. 下载ngrok\n\n   ```bash\n   go get github.com/inconshreveable/ngrok\n   ```\n\n# 生成证书\n\n   1. 使用let’s encrypt证书\n\n      1. 申请证书（具体看申请证书，主要通配符证书和三级域名）\n\n      2. 修改证书\n\n         客户端证书\n\n         ```bash\n         cd ngrok\n         cp /etc/letsencrypt/live/xncoding.com/chain.pem assets/client/tls/ngrokroot.crt\n         ```\n\n         服务端证书\n\n         ```bash\n         cp /etc/letsencrypt/live/xncoding.com/cert.pem assets/server/tls/snakeoil.crt\n         cp /etc/letsencrypt/live/xncoding.com/privkey.pem assets/server/tls/snakeoil.key\n         ```\n\n# 编译\n\n1. 编译服务端\n\n   ```bash\n   make release-server\n   ```\n\n2. 编译客户端\n\n   不同平台的客户端需要分开编译。不同平台使用不同的 GOOS 和 GOARCH，GOOS为go编译出来的操作系统 (windows,linux,darwin)，GOARCH, 对应的构架 (386,amd64,arm)\n\n   ```bash\n   GOOS=linux GOARCH=amd64 make release-client\n   GOOS=windows GOARCH=amd64 make release-client\n   GOOS=linux GOARCH=arm make release-client\n   ```\n\n# 启动服务器\n\n在开启之前，请主要端口是否开放\n\n```bash\n./ngrokd -domain=ngrok.sciento.top -httpAddr=:9580 -httpsAddr=:9443 -tunnelAddr=\":9444\"\n```\n\n# 启动客户端\n\n1. 配置文件,具体看官方文档\n\n   ```\n   server_addr: \"ngrok.sciento.top:9444\"\n   trust_host_root_certs: false\n   tunnels:\n     http:\n       subdomain: \"demo\"\n       proto:\n         http: \"9000\"\n         \n     https:\n       subdomain: \"demo\"\n       proto:\n         https: \"9000\"\n   \n   ```\n\n2. 启动\n\n   ```bash\n   ./ngrok -config=ngrok.cfg start http https\n   ```\n\n# nginx配置\n\n1. 安装nginx\n\n2. 配置\n\n   ```nginx\n   server {\n       listen       80;\n       server_name  demo.ngrok.xncoding.com;\n       return       301 https://demo.ngrok.xncoding.com$request_uri;\n   }\n   \n   server {\n       listen       443 ssl http2;\n       server_name  demo.ngrok.xncoding.com;\n   \n       charset utf-8;\n   \n       ssl_certificate /etc/letsencrypt/live/demo.ngrok.xncoding.com/fullchain.pem;\n       ssl_certificate_key /etc/letsencrypt/live/demo.ngrok.xncoding.com/privkey.pem;\n       ssl_trusted_certificate /etc/letsencrypt/live/demo.ngrok.xncoding.com/chain.pem;\n   \n       access_log /var/log/nginx/ngrok.log main;\n       error_log /var/log/nginx/ngrok_error.log error;\n   \n       location / {\n           proxy_pass http://127.0.0.1:5442;\n           proxy_redirect off;\n           proxy_set_header Host       $http_host:5442;\n           proxy_set_header X-Real-IP  $remote_addr;\n           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n       }\n   }\n   ```\n\n\n# 参考\n\nhttps://www.xncoding.com/2017/12/29/web/ngrok.html\n\nhttps://www.coldawn.com/how-to-issue-acmev2-wildcard-certificates-with-certbot-on-centos-7/\n\nhttps://www.jianshu.com/p/c5c9d071e395\n\nhttp://ngrok.cn/docs.html#tcp","slug":"运维/ngrok环境搭建","published":1,"updated":"2020-09-20T03:22:55.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblo1006a4tjelmajp3s0","content":"<h1 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h1><ol>\n<li><p>配置golang环境</p>\n<ol>\n<li><p>安装go</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install golang</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置<code>GOPATH</code></p>\n</li>\n</ol>\n</li>\n<li><p>安装git2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum remove git</span><br><span class=\"line\">sudo yum install epel-release</span><br><span class=\"line\">sudo yum install https://centos7.iuscommunity.org/ius-release.rpm</span><br><span class=\"line\">sudo yum install git2u</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载ngrok</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/inconshreveable/ngrok</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"生成证书\"><a href=\"#生成证书\" class=\"headerlink\" title=\"生成证书\"></a>生成证书</h1><ol>\n<li><p>使用let’s encrypt证书</p>\n<ol>\n<li><p>申请证书（具体看申请证书，主要通配符证书和三级域名）</p>\n</li>\n<li><p>修改证书</p>\n<p>客户端证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ngrok</span><br><span class=\"line\">cp /etc/letsencrypt/live/xncoding.com/chain.pem assets/client/tls/ngrokroot.crt</span><br></pre></td></tr></table></figure>\n<p>服务端证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /etc/letsencrypt/live/xncoding.com/cert.pem assets/server/tls/snakeoil.crt</span><br><span class=\"line\">cp /etc/letsencrypt/live/xncoding.com/privkey.pem assets/server/tls/snakeoil.key</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><ol>\n<li><p>编译服务端</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make release-server</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编译客户端</p>\n<p>不同平台的客户端需要分开编译。不同平台使用不同的 GOOS 和 GOARCH，GOOS为go编译出来的操作系统 (windows,linux,darwin)，GOARCH, 对应的构架 (386,amd64,arm)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GOOS=linux GOARCH=amd64 make release-client</span><br><span class=\"line\">GOOS=windows GOARCH=amd64 make release-client</span><br><span class=\"line\">GOOS=linux GOARCH=arm make release-client</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"启动服务器\"><a href=\"#启动服务器\" class=\"headerlink\" title=\"启动服务器\"></a>启动服务器</h1><p>在开启之前，请主要端口是否开放</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ngrokd -domain=ngrok.sciento.top -httpAddr=:9580 -httpsAddr=:9443 -tunnelAddr=<span class=\"string\">\":9444\"</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"启动客户端\"><a href=\"#启动客户端\" class=\"headerlink\" title=\"启动客户端\"></a>启动客户端</h1><ol>\n<li><p>配置文件,具体看官方文档</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server_addr: &quot;ngrok.sciento.top:9444&quot;</span><br><span class=\"line\">trust_host_root_certs: false</span><br><span class=\"line\">tunnels:</span><br><span class=\"line\">  http:</span><br><span class=\"line\">    subdomain: &quot;demo&quot;</span><br><span class=\"line\">    proto:</span><br><span class=\"line\">      http: &quot;9000&quot;</span><br><span class=\"line\">      </span><br><span class=\"line\">  https:</span><br><span class=\"line\">    subdomain: &quot;demo&quot;</span><br><span class=\"line\">    proto:</span><br><span class=\"line\">      https: &quot;9000&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ngrok -config=ngrok.cfg start http https</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h1><ol>\n<li><p>安装nginx</p>\n</li>\n<li><p>配置</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  demo.ngrok.xncoding.com;</span><br><span class=\"line\">    <span class=\"attribute\">return</span>       <span class=\"number\">301</span> https://demo.ngrok.xncoding.com<span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">443</span> ssl http2;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  demo.ngrok.xncoding.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">charset</span> utf-<span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/letsencrypt/live/demo.ngrok.xncoding.com/fullchain.pem;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/letsencrypt/live/demo.ngrok.xncoding.com/privkey.pem;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_trusted_certificate</span> /etc/letsencrypt/live/demo.ngrok.xncoding.com/chain.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/ngrok.log main;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/ngrok_error.log <span class=\"literal\">error</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://127.0.0.1:5442;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_redirect</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Host       <span class=\"variable\">$http_host</span>:<span class=\"number\">5442</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Real-IP  <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.xncoding.com/2017/12/29/web/ngrok.html\" target=\"_blank\" rel=\"noopener\">https://www.xncoding.com/2017/12/29/web/ngrok.html</a></p>\n<p><a href=\"https://www.coldawn.com/how-to-issue-acmev2-wildcard-certificates-with-certbot-on-centos-7/\" target=\"_blank\" rel=\"noopener\">https://www.coldawn.com/how-to-issue-acmev2-wildcard-certificates-with-certbot-on-centos-7/</a></p>\n<p><a href=\"https://www.jianshu.com/p/c5c9d071e395\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/c5c9d071e395</a></p>\n<p><a href=\"http://ngrok.cn/docs.html#tcp\" target=\"_blank\" rel=\"noopener\">http://ngrok.cn/docs.html#tcp</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h1><ol>\n<li><p>配置golang环境</p>\n<ol>\n<li><p>安装go</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install golang</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置<code>GOPATH</code></p>\n</li>\n</ol>\n</li>\n<li><p>安装git2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum remove git</span><br><span class=\"line\">sudo yum install epel-release</span><br><span class=\"line\">sudo yum install https://centos7.iuscommunity.org/ius-release.rpm</span><br><span class=\"line\">sudo yum install git2u</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载ngrok</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/inconshreveable/ngrok</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"生成证书\"><a href=\"#生成证书\" class=\"headerlink\" title=\"生成证书\"></a>生成证书</h1><ol>\n<li><p>使用let’s encrypt证书</p>\n<ol>\n<li><p>申请证书（具体看申请证书，主要通配符证书和三级域名）</p>\n</li>\n<li><p>修改证书</p>\n<p>客户端证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ngrok</span><br><span class=\"line\">cp /etc/letsencrypt/live/xncoding.com/chain.pem assets/client/tls/ngrokroot.crt</span><br></pre></td></tr></table></figure>\n<p>服务端证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /etc/letsencrypt/live/xncoding.com/cert.pem assets/server/tls/snakeoil.crt</span><br><span class=\"line\">cp /etc/letsencrypt/live/xncoding.com/privkey.pem assets/server/tls/snakeoil.key</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><ol>\n<li><p>编译服务端</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make release-server</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编译客户端</p>\n<p>不同平台的客户端需要分开编译。不同平台使用不同的 GOOS 和 GOARCH，GOOS为go编译出来的操作系统 (windows,linux,darwin)，GOARCH, 对应的构架 (386,amd64,arm)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GOOS=linux GOARCH=amd64 make release-client</span><br><span class=\"line\">GOOS=windows GOARCH=amd64 make release-client</span><br><span class=\"line\">GOOS=linux GOARCH=arm make release-client</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"启动服务器\"><a href=\"#启动服务器\" class=\"headerlink\" title=\"启动服务器\"></a>启动服务器</h1><p>在开启之前，请主要端口是否开放</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ngrokd -domain=ngrok.sciento.top -httpAddr=:9580 -httpsAddr=:9443 -tunnelAddr=<span class=\"string\">\":9444\"</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"启动客户端\"><a href=\"#启动客户端\" class=\"headerlink\" title=\"启动客户端\"></a>启动客户端</h1><ol>\n<li><p>配置文件,具体看官方文档</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server_addr: &quot;ngrok.sciento.top:9444&quot;</span><br><span class=\"line\">trust_host_root_certs: false</span><br><span class=\"line\">tunnels:</span><br><span class=\"line\">  http:</span><br><span class=\"line\">    subdomain: &quot;demo&quot;</span><br><span class=\"line\">    proto:</span><br><span class=\"line\">      http: &quot;9000&quot;</span><br><span class=\"line\">      </span><br><span class=\"line\">  https:</span><br><span class=\"line\">    subdomain: &quot;demo&quot;</span><br><span class=\"line\">    proto:</span><br><span class=\"line\">      https: &quot;9000&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./ngrok -config=ngrok.cfg start http https</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h1><ol>\n<li><p>安装nginx</p>\n</li>\n<li><p>配置</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  demo.ngrok.xncoding.com;</span><br><span class=\"line\">    <span class=\"attribute\">return</span>       <span class=\"number\">301</span> https://demo.ngrok.xncoding.com<span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">443</span> ssl http2;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  demo.ngrok.xncoding.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">charset</span> utf-<span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/letsencrypt/live/demo.ngrok.xncoding.com/fullchain.pem;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/letsencrypt/live/demo.ngrok.xncoding.com/privkey.pem;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_trusted_certificate</span> /etc/letsencrypt/live/demo.ngrok.xncoding.com/chain.pem;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/ngrok.log main;</span><br><span class=\"line\">    <span class=\"attribute\">error_log</span> /var/log/nginx/ngrok_error.log <span class=\"literal\">error</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://127.0.0.1:5442;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_redirect</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Host       <span class=\"variable\">$http_host</span>:<span class=\"number\">5442</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Real-IP  <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.xncoding.com/2017/12/29/web/ngrok.html\" target=\"_blank\" rel=\"noopener\">https://www.xncoding.com/2017/12/29/web/ngrok.html</a></p>\n<p><a href=\"https://www.coldawn.com/how-to-issue-acmev2-wildcard-certificates-with-certbot-on-centos-7/\" target=\"_blank\" rel=\"noopener\">https://www.coldawn.com/how-to-issue-acmev2-wildcard-certificates-with-certbot-on-centos-7/</a></p>\n<p><a href=\"https://www.jianshu.com/p/c5c9d071e395\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/c5c9d071e395</a></p>\n<p><a href=\"http://ngrok.cn/docs.html#tcp\" target=\"_blank\" rel=\"noopener\">http://ngrok.cn/docs.html#tcp</a></p>\n"},{"_content":"---\n\n---\n\n```\nDescription=My Miscellaneous Service\nRequires=network-online.target\nAfter=network-online.target\n\n[Service]\nType=simple\nUser=anonymous\nWorkingDirectory=/home/anonymous\nExecStart=some_can_execute --option=123\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n```\n\n","source":"_posts/运维/systemd文件模板.md","raw":"---\n\n---\n\n```\nDescription=My Miscellaneous Service\nRequires=network-online.target\nAfter=network-online.target\n\n[Service]\nType=simple\nUser=anonymous\nWorkingDirectory=/home/anonymous\nExecStart=some_can_execute --option=123\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n```\n\n","slug":"运维/systemd文件模板","published":1,"date":"2020-09-20T03:22:55.587Z","updated":"2020-09-20T03:22:55.587Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblo4006c4tjexll14z2i","content":"<hr>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Description=My Miscellaneous Service</span><br><span class=\"line\">Requires=network-online.target</span><br><span class=\"line\">After=network-online.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">User=anonymous</span><br><span class=\"line\">WorkingDirectory=/home/anonymous</span><br><span class=\"line\">ExecStart=some_can_execute --option=123</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Description=My Miscellaneous Service</span><br><span class=\"line\">Requires=network-online.target</span><br><span class=\"line\">After=network-online.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">User=anonymous</span><br><span class=\"line\">WorkingDirectory=/home/anonymous</span><br><span class=\"line\">ExecStart=some_can_execute --option=123</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n"},{"title":"mysql修改字符集","date":"2019-07-27T08:55:17.000Z","_content":"\n# 概念\n\n1. 字符集（character set）：定义了字符以及字符的编码。\n2. 字符序（collation）：定义了字符的比较规则。\n\n# Mysql字符集\n\n1. 一个字符集对应至少一种字符序（一般是1对多）。\n2. 两个不同的字符集不能有相同的字符序。\n3. 每个字符集都有默认的字符序。\n\n```mysql\n-- 第一种方式\nSHOW CHARACTER SET;\n\n-- 第二种方式\nuse information_schema;\nselect * from CHARACTER_SETS;\n\n-- 例子\nSHOW CHARACTER SET WHERE Charset=\"utf8\";\nSHOW CHARACTER SET LIKE \"utf8%\";\n```\n\n# Mysql字符序\n\n```mysql\n -- 第一种方式\n SHOW COLLATION WHERE Charset = 'utf8';\n \n -- 第二种方式\n USE information_schema;\n SELECT * FROM COLLATIONS WHERE CHARACTER_SET_NAME=\"utf8\";\n```\n\n## 命名规范\n\n字符序的命名，以其对应的字符集作为前缀，如下所示。比如字符序`utf8_general_ci`，标明它是字符集`utf8`的字符序。\n\n更多规则可以参考 [官方文档](https://dev.mysql.com/doc/refman/5.7/en/charset-collation-names.html)。\n\n```mysql\n[information_schema]> SELECT CHARACTER_SET_NAME, COLLATION_NAME FROM COLLATIONS WHERE CHARACTER_SET_NAME=\"utf8\" limit 2; \n```\n\n# 设置修改\n\n1. 修改数据库字符集\n\n   ```mysql\n   ALTER DATABASE db_name DEFAULT CHARACTER SET character_name [COLLATE ...];\n   把表默认的字符集和所有字符列（CHAR,VARCHAR,TEXT）改为新的字符集：\n   ALTER TABLE tbl_name CONVERT TO CHARACTER SET character_name [COLLATE ...]\n   如：ALTER TABLE logtest CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;\n   ```\n\n2. 修改表的默认字符集\n\n   ```mysql\n   ALTER TABLE tbl_name DEFAULT CHARACTER SET character_name [COLLATE...];\n   如：ALTER TABLE logtest DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;\n   ```\n\n3. 修改字段的字符集\n\n   ```mysql\n   ALTER TABLE tbl_name CHANGE c_name c_name CHARACTER SET character_name [COLLATE ...];\n   如：ALTER TABLE logtest CHANGE title title VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci;\n   ```\n\n4. 查看数据库编码\n\n   ```mysql\n   SHOW CREATE DATABASE db_name;\n   ```\n\n5. 查看表编码\n\n   ```mysql\n   SHOW CREATE TABLE tbl_name;\n   ```\n\n6. 查看字段编码\n\n   ```mysql\n   SHOW FULL COLUMNS FROM tbl_name;\n   ```\n\n7. 查看系统的编码字符\n\n   ```mysql\n   SHOW VARIABLES WHERE Variable_name LIKE 'character\\_set\\_%' OR Variable_name LIKE 'collation%';\n   ```\n\n8. MySQL字符集设置\n\n   系统变量：\n\n   ```sh\n   – character_set_server：默认的内部操作字符集\n   \n   – character_set_client：客户端来源数据使用的字符集\n   \n   – character_set_connection：连接层字符集\n   \n   – character_set_results：查询结果字符集\n   \n   – character_set_database：当前选中数据库的默认字符集\n   \n   – character_set_system：系统元数据(字段名等)字符集\n   \n   – 还有以collation_开头的同上面对应的变量，用来描述字符序。\n   ```\n\n   用introducer指定文本字符串的字符集：\n\n   – 格式为：[_charset] ‘string’ [COLLATE collation]\n\n   – 例如：\n\n   ```sql\n   • SELECT _latin1 ‘string’;\n   \n   • SELECT _utf8 ‘你好’ COLLATE utf8_general_ci;\n   \n   –-  由introducer修饰的文本字符串在请求过程中不经过多余的转码，直接转换为内部字符集处理。\n   ```\n\n   #### MySQL中的字符集转换过程\n\n   1. MySQL Server收到请求时将请求数据从character_set_client转换为character_set_connection；\n   2. 进行内部操作前将请求数据从character_set_connection转换为内部操作字符集，其确定方法如下：\n\n   • 使用每个数据字段的CHARACTER SET设定值；\n\n   • 若上述值不存在，则使用对应数据表的DEFAULT CHARACTER SET设定值(MySQL扩展，非SQL标准)；\n\n   • 若上述值不存在，则使用对应数据库的DEFAULT CHARACTER SET设定值；\n\n   • 若上述值不存在，则使用character_set_server设定值。\n\n# 参考\n\n> https://www.cnblogs.com/chyingp/p/mysql-character-set-collation.html\n>\n> https://www.cnblogs.com/qiumingcheng/p/10336170.html\n\n","source":"_posts/mysql/mysql修改字符集.md","raw":"---\ntitle: mysql修改字符集\ndate: 2019-07-27 16:55:17\ntags:\n- mysql\n---\n\n# 概念\n\n1. 字符集（character set）：定义了字符以及字符的编码。\n2. 字符序（collation）：定义了字符的比较规则。\n\n# Mysql字符集\n\n1. 一个字符集对应至少一种字符序（一般是1对多）。\n2. 两个不同的字符集不能有相同的字符序。\n3. 每个字符集都有默认的字符序。\n\n```mysql\n-- 第一种方式\nSHOW CHARACTER SET;\n\n-- 第二种方式\nuse information_schema;\nselect * from CHARACTER_SETS;\n\n-- 例子\nSHOW CHARACTER SET WHERE Charset=\"utf8\";\nSHOW CHARACTER SET LIKE \"utf8%\";\n```\n\n# Mysql字符序\n\n```mysql\n -- 第一种方式\n SHOW COLLATION WHERE Charset = 'utf8';\n \n -- 第二种方式\n USE information_schema;\n SELECT * FROM COLLATIONS WHERE CHARACTER_SET_NAME=\"utf8\";\n```\n\n## 命名规范\n\n字符序的命名，以其对应的字符集作为前缀，如下所示。比如字符序`utf8_general_ci`，标明它是字符集`utf8`的字符序。\n\n更多规则可以参考 [官方文档](https://dev.mysql.com/doc/refman/5.7/en/charset-collation-names.html)。\n\n```mysql\n[information_schema]> SELECT CHARACTER_SET_NAME, COLLATION_NAME FROM COLLATIONS WHERE CHARACTER_SET_NAME=\"utf8\" limit 2; \n```\n\n# 设置修改\n\n1. 修改数据库字符集\n\n   ```mysql\n   ALTER DATABASE db_name DEFAULT CHARACTER SET character_name [COLLATE ...];\n   把表默认的字符集和所有字符列（CHAR,VARCHAR,TEXT）改为新的字符集：\n   ALTER TABLE tbl_name CONVERT TO CHARACTER SET character_name [COLLATE ...]\n   如：ALTER TABLE logtest CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;\n   ```\n\n2. 修改表的默认字符集\n\n   ```mysql\n   ALTER TABLE tbl_name DEFAULT CHARACTER SET character_name [COLLATE...];\n   如：ALTER TABLE logtest DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;\n   ```\n\n3. 修改字段的字符集\n\n   ```mysql\n   ALTER TABLE tbl_name CHANGE c_name c_name CHARACTER SET character_name [COLLATE ...];\n   如：ALTER TABLE logtest CHANGE title title VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci;\n   ```\n\n4. 查看数据库编码\n\n   ```mysql\n   SHOW CREATE DATABASE db_name;\n   ```\n\n5. 查看表编码\n\n   ```mysql\n   SHOW CREATE TABLE tbl_name;\n   ```\n\n6. 查看字段编码\n\n   ```mysql\n   SHOW FULL COLUMNS FROM tbl_name;\n   ```\n\n7. 查看系统的编码字符\n\n   ```mysql\n   SHOW VARIABLES WHERE Variable_name LIKE 'character\\_set\\_%' OR Variable_name LIKE 'collation%';\n   ```\n\n8. MySQL字符集设置\n\n   系统变量：\n\n   ```sh\n   – character_set_server：默认的内部操作字符集\n   \n   – character_set_client：客户端来源数据使用的字符集\n   \n   – character_set_connection：连接层字符集\n   \n   – character_set_results：查询结果字符集\n   \n   – character_set_database：当前选中数据库的默认字符集\n   \n   – character_set_system：系统元数据(字段名等)字符集\n   \n   – 还有以collation_开头的同上面对应的变量，用来描述字符序。\n   ```\n\n   用introducer指定文本字符串的字符集：\n\n   – 格式为：[_charset] ‘string’ [COLLATE collation]\n\n   – 例如：\n\n   ```sql\n   • SELECT _latin1 ‘string’;\n   \n   • SELECT _utf8 ‘你好’ COLLATE utf8_general_ci;\n   \n   –-  由introducer修饰的文本字符串在请求过程中不经过多余的转码，直接转换为内部字符集处理。\n   ```\n\n   #### MySQL中的字符集转换过程\n\n   1. MySQL Server收到请求时将请求数据从character_set_client转换为character_set_connection；\n   2. 进行内部操作前将请求数据从character_set_connection转换为内部操作字符集，其确定方法如下：\n\n   • 使用每个数据字段的CHARACTER SET设定值；\n\n   • 若上述值不存在，则使用对应数据表的DEFAULT CHARACTER SET设定值(MySQL扩展，非SQL标准)；\n\n   • 若上述值不存在，则使用对应数据库的DEFAULT CHARACTER SET设定值；\n\n   • 若上述值不存在，则使用character_set_server设定值。\n\n# 参考\n\n> https://www.cnblogs.com/chyingp/p/mysql-character-set-collation.html\n>\n> https://www.cnblogs.com/qiumingcheng/p/10336170.html\n\n","slug":"mysql/mysql修改字符集","published":1,"updated":"2019-07-31T02:45:43.965Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblo6006e4tjelfbxmo86","content":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><ol>\n<li>字符集（character set）：定义了字符以及字符的编码。</li>\n<li>字符序（collation）：定义了字符的比较规则。</li>\n</ol>\n<h1 id=\"Mysql字符集\"><a href=\"#Mysql字符集\" class=\"headerlink\" title=\"Mysql字符集\"></a>Mysql字符集</h1><ol>\n<li>一个字符集对应至少一种字符序（一般是1对多）。</li>\n<li>两个不同的字符集不能有相同的字符序。</li>\n<li>每个字符集都有默认的字符序。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 第一种方式</span><br><span class=\"line\">SHOW CHARACTER SET;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 第二种方式</span><br><span class=\"line\">use information_schema;</span><br><span class=\"line\">select * from CHARACTER_SETS;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 例子</span><br><span class=\"line\">SHOW CHARACTER SET WHERE Charset=&quot;utf8&quot;;</span><br><span class=\"line\">SHOW CHARACTER SET LIKE &quot;utf8%&quot;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Mysql字符序\"><a href=\"#Mysql字符序\" class=\"headerlink\" title=\"Mysql字符序\"></a>Mysql字符序</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 第一种方式</span><br><span class=\"line\">SHOW COLLATION WHERE Charset = &apos;utf8&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 第二种方式</span><br><span class=\"line\">USE information_schema;</span><br><span class=\"line\">SELECT * FROM COLLATIONS WHERE CHARACTER_SET_NAME=&quot;utf8&quot;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><p>字符序的命名，以其对应的字符集作为前缀，如下所示。比如字符序<code>utf8_general_ci</code>，标明它是字符集<code>utf8</code>的字符序。</p>\n<p>更多规则可以参考 <a href=\"https://dev.mysql.com/doc/refman/5.7/en/charset-collation-names.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[information_schema]&gt; SELECT CHARACTER_SET_NAME, COLLATION_NAME FROM COLLATIONS WHERE CHARACTER_SET_NAME=&quot;utf8&quot; limit 2;</span><br></pre></td></tr></table></figure>\n<h1 id=\"设置修改\"><a href=\"#设置修改\" class=\"headerlink\" title=\"设置修改\"></a>设置修改</h1><ol>\n<li><p>修改数据库字符集</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER DATABASE db_name DEFAULT CHARACTER SET character_name [COLLATE ...];</span><br><span class=\"line\">把表默认的字符集和所有字符列（CHAR,VARCHAR,TEXT）改为新的字符集：</span><br><span class=\"line\">ALTER TABLE tbl_name CONVERT TO CHARACTER SET character_name [COLLATE ...]</span><br><span class=\"line\">如：ALTER TABLE logtest CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改表的默认字符集</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl_name DEFAULT CHARACTER SET character_name [COLLATE...];</span><br><span class=\"line\">如：ALTER TABLE logtest DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改字段的字符集</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl_name CHANGE c_name c_name CHARACTER SET character_name [COLLATE ...];</span><br><span class=\"line\">如：ALTER TABLE logtest CHANGE title title VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看数据库编码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW CREATE DATABASE db_name;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看表编码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW CREATE TABLE tbl_name;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看字段编码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW FULL COLUMNS FROM tbl_name;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看系统的编码字符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW VARIABLES WHERE Variable_name LIKE &apos;character\\_set\\_%&apos; OR Variable_name LIKE &apos;collation%&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>MySQL字符集设置</p>\n<p>系统变量：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">– character_set_server：默认的内部操作字符集</span><br><span class=\"line\"></span><br><span class=\"line\">– character_set_client：客户端来源数据使用的字符集</span><br><span class=\"line\"></span><br><span class=\"line\">– character_set_connection：连接层字符集</span><br><span class=\"line\"></span><br><span class=\"line\">– character_set_results：查询结果字符集</span><br><span class=\"line\"></span><br><span class=\"line\">– character_set_database：当前选中数据库的默认字符集</span><br><span class=\"line\"></span><br><span class=\"line\">– character_set_system：系统元数据(字段名等)字符集</span><br><span class=\"line\"></span><br><span class=\"line\">– 还有以collation_开头的同上面对应的变量，用来描述字符序。</span><br></pre></td></tr></table></figure>\n<p>用introducer指定文本字符串的字符集：</p>\n<p>– 格式为：[_charset] ‘string’ [COLLATE collation]</p>\n<p>– 例如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">• <span class=\"keyword\">SELECT</span> _latin1 ‘<span class=\"keyword\">string</span>’;</span><br><span class=\"line\"></span><br><span class=\"line\">• <span class=\"keyword\">SELECT</span> _utf8 ‘你好’ <span class=\"keyword\">COLLATE</span> utf8_general_ci;</span><br><span class=\"line\"></span><br><span class=\"line\">–-  由introducer修饰的文本字符串在请求过程中不经过多余的转码，直接转换为内部字符集处理。</span><br></pre></td></tr></table></figure>\n<h4 id=\"MySQL中的字符集转换过程\"><a href=\"#MySQL中的字符集转换过程\" class=\"headerlink\" title=\"MySQL中的字符集转换过程\"></a>MySQL中的字符集转换过程</h4><ol>\n<li>MySQL Server收到请求时将请求数据从character_set_client转换为character_set_connection；</li>\n<li>进行内部操作前将请求数据从character_set_connection转换为内部操作字符集，其确定方法如下：</li>\n</ol>\n<p>• 使用每个数据字段的CHARACTER SET设定值；</p>\n<p>• 若上述值不存在，则使用对应数据表的DEFAULT CHARACTER SET设定值(MySQL扩展，非SQL标准)；</p>\n<p>• 若上述值不存在，则使用对应数据库的DEFAULT CHARACTER SET设定值；</p>\n<p>• 若上述值不存在，则使用character_set_server设定值。</p>\n</li>\n</ol>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://www.cnblogs.com/chyingp/p/mysql-character-set-collation.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/chyingp/p/mysql-character-set-collation.html</a></p>\n<p><a href=\"https://www.cnblogs.com/qiumingcheng/p/10336170.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/qiumingcheng/p/10336170.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><ol>\n<li>字符集（character set）：定义了字符以及字符的编码。</li>\n<li>字符序（collation）：定义了字符的比较规则。</li>\n</ol>\n<h1 id=\"Mysql字符集\"><a href=\"#Mysql字符集\" class=\"headerlink\" title=\"Mysql字符集\"></a>Mysql字符集</h1><ol>\n<li>一个字符集对应至少一种字符序（一般是1对多）。</li>\n<li>两个不同的字符集不能有相同的字符序。</li>\n<li>每个字符集都有默认的字符序。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 第一种方式</span><br><span class=\"line\">SHOW CHARACTER SET;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 第二种方式</span><br><span class=\"line\">use information_schema;</span><br><span class=\"line\">select * from CHARACTER_SETS;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 例子</span><br><span class=\"line\">SHOW CHARACTER SET WHERE Charset=&quot;utf8&quot;;</span><br><span class=\"line\">SHOW CHARACTER SET LIKE &quot;utf8%&quot;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Mysql字符序\"><a href=\"#Mysql字符序\" class=\"headerlink\" title=\"Mysql字符序\"></a>Mysql字符序</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 第一种方式</span><br><span class=\"line\">SHOW COLLATION WHERE Charset = &apos;utf8&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 第二种方式</span><br><span class=\"line\">USE information_schema;</span><br><span class=\"line\">SELECT * FROM COLLATIONS WHERE CHARACTER_SET_NAME=&quot;utf8&quot;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><p>字符序的命名，以其对应的字符集作为前缀，如下所示。比如字符序<code>utf8_general_ci</code>，标明它是字符集<code>utf8</code>的字符序。</p>\n<p>更多规则可以参考 <a href=\"https://dev.mysql.com/doc/refman/5.7/en/charset-collation-names.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[information_schema]&gt; SELECT CHARACTER_SET_NAME, COLLATION_NAME FROM COLLATIONS WHERE CHARACTER_SET_NAME=&quot;utf8&quot; limit 2;</span><br></pre></td></tr></table></figure>\n<h1 id=\"设置修改\"><a href=\"#设置修改\" class=\"headerlink\" title=\"设置修改\"></a>设置修改</h1><ol>\n<li><p>修改数据库字符集</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER DATABASE db_name DEFAULT CHARACTER SET character_name [COLLATE ...];</span><br><span class=\"line\">把表默认的字符集和所有字符列（CHAR,VARCHAR,TEXT）改为新的字符集：</span><br><span class=\"line\">ALTER TABLE tbl_name CONVERT TO CHARACTER SET character_name [COLLATE ...]</span><br><span class=\"line\">如：ALTER TABLE logtest CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改表的默认字符集</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl_name DEFAULT CHARACTER SET character_name [COLLATE...];</span><br><span class=\"line\">如：ALTER TABLE logtest DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改字段的字符集</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tbl_name CHANGE c_name c_name CHARACTER SET character_name [COLLATE ...];</span><br><span class=\"line\">如：ALTER TABLE logtest CHANGE title title VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看数据库编码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW CREATE DATABASE db_name;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看表编码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW CREATE TABLE tbl_name;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看字段编码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW FULL COLUMNS FROM tbl_name;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看系统的编码字符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW VARIABLES WHERE Variable_name LIKE &apos;character\\_set\\_%&apos; OR Variable_name LIKE &apos;collation%&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>MySQL字符集设置</p>\n<p>系统变量：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">– character_set_server：默认的内部操作字符集</span><br><span class=\"line\"></span><br><span class=\"line\">– character_set_client：客户端来源数据使用的字符集</span><br><span class=\"line\"></span><br><span class=\"line\">– character_set_connection：连接层字符集</span><br><span class=\"line\"></span><br><span class=\"line\">– character_set_results：查询结果字符集</span><br><span class=\"line\"></span><br><span class=\"line\">– character_set_database：当前选中数据库的默认字符集</span><br><span class=\"line\"></span><br><span class=\"line\">– character_set_system：系统元数据(字段名等)字符集</span><br><span class=\"line\"></span><br><span class=\"line\">– 还有以collation_开头的同上面对应的变量，用来描述字符序。</span><br></pre></td></tr></table></figure>\n<p>用introducer指定文本字符串的字符集：</p>\n<p>– 格式为：[_charset] ‘string’ [COLLATE collation]</p>\n<p>– 例如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">• <span class=\"keyword\">SELECT</span> _latin1 ‘<span class=\"keyword\">string</span>’;</span><br><span class=\"line\"></span><br><span class=\"line\">• <span class=\"keyword\">SELECT</span> _utf8 ‘你好’ <span class=\"keyword\">COLLATE</span> utf8_general_ci;</span><br><span class=\"line\"></span><br><span class=\"line\">–-  由introducer修饰的文本字符串在请求过程中不经过多余的转码，直接转换为内部字符集处理。</span><br></pre></td></tr></table></figure>\n<h4 id=\"MySQL中的字符集转换过程\"><a href=\"#MySQL中的字符集转换过程\" class=\"headerlink\" title=\"MySQL中的字符集转换过程\"></a>MySQL中的字符集转换过程</h4><ol>\n<li>MySQL Server收到请求时将请求数据从character_set_client转换为character_set_connection；</li>\n<li>进行内部操作前将请求数据从character_set_connection转换为内部操作字符集，其确定方法如下：</li>\n</ol>\n<p>• 使用每个数据字段的CHARACTER SET设定值；</p>\n<p>• 若上述值不存在，则使用对应数据表的DEFAULT CHARACTER SET设定值(MySQL扩展，非SQL标准)；</p>\n<p>• 若上述值不存在，则使用对应数据库的DEFAULT CHARACTER SET设定值；</p>\n<p>• 若上述值不存在，则使用character_set_server设定值。</p>\n</li>\n</ol>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://www.cnblogs.com/chyingp/p/mysql-character-set-collation.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/chyingp/p/mysql-character-set-collation.html</a></p>\n<p><a href=\"https://www.cnblogs.com/qiumingcheng/p/10336170.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/qiumingcheng/p/10336170.html</a></p>\n</blockquote>\n"},{"title":"docker网络模式","date":"2019-10-29T06:26:03.000Z","_content":"\n# Docker的网络模式详解\n\n## 1、Docker的四种网络模式\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3mf2e5nj30q80g5di8.jpg)\n\n（1）docker四种网络模式如下：\n\n- Bridge contauner 桥接式网络模式\n- Host(open) container 开放式网络模式\n- Container(join) container 联合挂载式网络模式，是host网络模式的延伸\n- None(Close) container 封闭式网络模式\n\n（2）可以通过docker network命令查看\n\n```\n[root@along ~]# docker network ls\nNETWORK ID          NAME                DRIVER              SCOPE\nf23b4899add1        bridge              bridge              local\n65520497f693        host                host                local\na0c5f18e0f04        none                null                local复制代码\n```\n\n（3）docker run --network 命令可以指定使用网络模式\n\n\n\n## 2、Bridge 网络模式\n\n#### 2.1 介绍\n\n　　当Docker进程启动时，会**在主机上创建一个名为docker0的虚拟网桥**，此主机上启动的**Docker容器会连接到这个虚拟网桥上，**所以有默认地址172.17.0.0/16的地址。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。\n\n　　从**docker0子网中分配一个IP给容器使用**，并设置**docker0的IP地址为容器的默认网关**。在主机上**创建一对虚拟网卡**veth pair设备，Docker将veth pair设备的**一端放在新创建的容器**中，并命名为eth0（容器的网卡），**另一端放在主机中**，以vethxxx这样类似的名字命名，并将这个网络设备加入到docker0网桥中。可以通过brctl show命令查看。\n\n```\n[root@along ~]# brctl show\nbridge name    bridge id        STP enabled    interfaces\ndocker0    8000.024241c45d6e    no复制代码\n```\n\n　　**bridge模式是docker的默认网络模式**，不写--net参数，就是bridge模式。使用docker run -p时，docker实际是在iptables做了DNAT规则，实现端口转发功能。可以使用iptables -t nat -vnL查看。\n\n```\n[root@along ~]# iptables -t nat -vnL\nChain POSTROUTING (policy ACCEPT 20 packets, 1238 bytes)\n pkts bytes target     prot opt in     out     source               destination         \n    0     0 MASQUERADE  all  --  *      !docker0  172.17.0.0/16        0.0.0.0/0复制代码\n```\n\n\n\n#### 2.2 bridge模式示意图\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3o9zcpej30m80pjab7.jpg)\n\n#### 2.3 演示\n\nbridge 网络模式；--network不指定，默认也是bridge模式\n\n```\n[root@along ~]# docker run --name b1 -it --network bridge --rm busybox:latest \n/ # ifconfig \neth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  \n          inet addr:172.17.0.2  Bcast:0.0.0.0  Mask:255.255.0.0\n          inet6 addr: fe80::42:acff:fe11:2/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:12 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:6 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0 \n          RX bytes:1016 (1016.0 B)  TX bytes:508 (508.0 B)\n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1 \n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\n/ # route -n\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n0.0.0.0         172.17.0.1      0.0.0.0         UG    0      0        0 eth0\n172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0\n/ # ping 10.11.55.5   正常访问宿主机\nPING 10.11.55.5 (10.11.55.5): 56 data bytes\n64 bytes from 10.11.55.5: seq=0 ttl=64 time=0.292 ms\n/ # exit复制代码\n```\n\n\n\n## 3、Host 网络模式\n\n#### 3.1 介绍\n\n　　如果启动容器的时候使用host模式，那么这个容器将不会获得一个独立的Network Namespace，而是**和宿主机共用一个Network Namespace**。容器将不会虚拟出自己的网卡，配置自己的IP等，而是**使用宿主机的IP和端口**。但是，**容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的**。\n\n\n\n#### 3.2 Host模式示意图\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3ox4pnoj30m80oz0tk.jpg)\n\n#### 3.3 演示\n\n```\n[root@along ~]# docker run --name b2 -it --network host --rm busybox:latest\n/ # ifconfig -a   和宿主机一样\ndocker0   Link encap:Ethernet  HWaddr 02:42:41:C4:5D:6E  \n          inet addr:172.17.0.1  Bcast:0.0.0.0  Mask:255.255.0.0\n          inet6 addr: fe80::42:41ff:fec4:5d6e/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:90 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:26 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0 \n          RX bytes:5903 (5.7 KiB)  TX bytes:2381 (2.3 KiB)\n\neth0      Link encap:Ethernet  HWaddr 00:0C:29:AB:D2:DA  \n          inet addr:10.11.55.5  Bcast:10.11.55.255  Mask:255.255.255.0\n          inet6 addr: fe80::20c:29ff:feab:d2da/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:3913 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:3327 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000 \n          RX bytes:354314 (346.0 KiB)  TX bytes:919096 (897.5 KiB)\n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1 \n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)复制代码\n```\n\n\n\n## 4、Container 网络模式\n\n#### 4.1 介绍\n\n　　这个模式指定**新创建的容器和已经存在的一个容器共享一个 Network Namespace**，而不是和宿主机共享。**新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围**等。同样，**两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的**。两个容器的进程可以通过 lo 网卡设备通信。\n\n\n\n#### 4.2 Container模式示意图\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3pqujjjj30m80pddgw.jpg)\n\n#### 4.3 演示\n\n（1）在一个终端，使用bridge网络模式启动容器b1\n\n```\n[root@along ~]# docker run --name b1 -it --rm busybox:latest \n/ # ifconfig   b1的ip为172.17.0.2\neth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  \n          inet addr:172.17.0.2  Bcast:0.0.0.0  Mask:255.255.0.0\n          inet6 addr: fe80::42:acff:fe11:2/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:6 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:6 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0 \n          RX bytes:508 (508.0 B)  TX bytes:508 (508.0 B)\n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1 \n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\n/ # echo \"hello world b1\" > /tmp/index.html\n/ # httpd -h /tmp/  在b1上启动httpd服务\n/ # netstat -nutl\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       \ntcp        0      0 :::80                   :::*                    LISTEN 复制代码\n```\n\n（2）在另一个终端使用Container 网络模式创建容器b2\n\n```\n[root@along ~]# docker run --name b2 -it --network container:b1 --rm busybox:latest\n/ # ifconfig -a   b2的ip和b1一样\neth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  \n          inet addr:172.17.0.2  Bcast:0.0.0.0  Mask:255.255.0.0\n          inet6 addr: fe80::42:acff:fe11:2/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:8 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0 \n          RX bytes:648 (648.0 B)  TX bytes:648 (648.0 B)\n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1 \n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\n/ # wget -O - -q 127.0.0.1   b1启动的httpd服务，在b2上直接访问\nhello world b1\n/ # ls /tmp/   但是文件系统并不共享，只共享网络复制代码\n```\n\n\n\n## 5、None 网络模式\n\n#### 5.1 介绍\n\n　　使用none模式，Docker容器拥有自己的Network Namespace，但是，**并不为Docker容器进行任何网络配置**。也就是说，这个Docker容器没有网卡、IP、路由等信息，只有lo 网络接口。需要我们自己为Docker容器添加网卡、配置IP等。\n\n　　不参与网络通信，运行于此类容器中的进程仅能访问本地回环接口；仅适用于进程无须网络通信的场景中，例如：备份、进程诊断及各种离线任务等。\n\n\n\n#### 5.2 Node模式示意图\n\n#### ![](https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3q084q5j30m80pyq3o.jpg)\n\n#### 5.3 演示\n\n```\n[root@along ~]# docker run --name b1 -it --network none --rm busybox:latest \n/ # ifconfig \nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1 \n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\n/ # route -n\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n```","source":"_posts/docker/docker网络模式.md","raw":"---\ntitle: docker网络模式\ndate: 2019-10-29 14:26:03\ntags:\n- docker\n---\n\n# Docker的网络模式详解\n\n## 1、Docker的四种网络模式\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3mf2e5nj30q80g5di8.jpg)\n\n（1）docker四种网络模式如下：\n\n- Bridge contauner 桥接式网络模式\n- Host(open) container 开放式网络模式\n- Container(join) container 联合挂载式网络模式，是host网络模式的延伸\n- None(Close) container 封闭式网络模式\n\n（2）可以通过docker network命令查看\n\n```\n[root@along ~]# docker network ls\nNETWORK ID          NAME                DRIVER              SCOPE\nf23b4899add1        bridge              bridge              local\n65520497f693        host                host                local\na0c5f18e0f04        none                null                local复制代码\n```\n\n（3）docker run --network 命令可以指定使用网络模式\n\n\n\n## 2、Bridge 网络模式\n\n#### 2.1 介绍\n\n　　当Docker进程启动时，会**在主机上创建一个名为docker0的虚拟网桥**，此主机上启动的**Docker容器会连接到这个虚拟网桥上，**所以有默认地址172.17.0.0/16的地址。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。\n\n　　从**docker0子网中分配一个IP给容器使用**，并设置**docker0的IP地址为容器的默认网关**。在主机上**创建一对虚拟网卡**veth pair设备，Docker将veth pair设备的**一端放在新创建的容器**中，并命名为eth0（容器的网卡），**另一端放在主机中**，以vethxxx这样类似的名字命名，并将这个网络设备加入到docker0网桥中。可以通过brctl show命令查看。\n\n```\n[root@along ~]# brctl show\nbridge name    bridge id        STP enabled    interfaces\ndocker0    8000.024241c45d6e    no复制代码\n```\n\n　　**bridge模式是docker的默认网络模式**，不写--net参数，就是bridge模式。使用docker run -p时，docker实际是在iptables做了DNAT规则，实现端口转发功能。可以使用iptables -t nat -vnL查看。\n\n```\n[root@along ~]# iptables -t nat -vnL\nChain POSTROUTING (policy ACCEPT 20 packets, 1238 bytes)\n pkts bytes target     prot opt in     out     source               destination         \n    0     0 MASQUERADE  all  --  *      !docker0  172.17.0.0/16        0.0.0.0/0复制代码\n```\n\n\n\n#### 2.2 bridge模式示意图\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3o9zcpej30m80pjab7.jpg)\n\n#### 2.3 演示\n\nbridge 网络模式；--network不指定，默认也是bridge模式\n\n```\n[root@along ~]# docker run --name b1 -it --network bridge --rm busybox:latest \n/ # ifconfig \neth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  \n          inet addr:172.17.0.2  Bcast:0.0.0.0  Mask:255.255.0.0\n          inet6 addr: fe80::42:acff:fe11:2/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:12 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:6 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0 \n          RX bytes:1016 (1016.0 B)  TX bytes:508 (508.0 B)\n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1 \n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\n/ # route -n\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n0.0.0.0         172.17.0.1      0.0.0.0         UG    0      0        0 eth0\n172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0\n/ # ping 10.11.55.5   正常访问宿主机\nPING 10.11.55.5 (10.11.55.5): 56 data bytes\n64 bytes from 10.11.55.5: seq=0 ttl=64 time=0.292 ms\n/ # exit复制代码\n```\n\n\n\n## 3、Host 网络模式\n\n#### 3.1 介绍\n\n　　如果启动容器的时候使用host模式，那么这个容器将不会获得一个独立的Network Namespace，而是**和宿主机共用一个Network Namespace**。容器将不会虚拟出自己的网卡，配置自己的IP等，而是**使用宿主机的IP和端口**。但是，**容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的**。\n\n\n\n#### 3.2 Host模式示意图\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3ox4pnoj30m80oz0tk.jpg)\n\n#### 3.3 演示\n\n```\n[root@along ~]# docker run --name b2 -it --network host --rm busybox:latest\n/ # ifconfig -a   和宿主机一样\ndocker0   Link encap:Ethernet  HWaddr 02:42:41:C4:5D:6E  \n          inet addr:172.17.0.1  Bcast:0.0.0.0  Mask:255.255.0.0\n          inet6 addr: fe80::42:41ff:fec4:5d6e/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:90 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:26 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0 \n          RX bytes:5903 (5.7 KiB)  TX bytes:2381 (2.3 KiB)\n\neth0      Link encap:Ethernet  HWaddr 00:0C:29:AB:D2:DA  \n          inet addr:10.11.55.5  Bcast:10.11.55.255  Mask:255.255.255.0\n          inet6 addr: fe80::20c:29ff:feab:d2da/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:3913 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:3327 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000 \n          RX bytes:354314 (346.0 KiB)  TX bytes:919096 (897.5 KiB)\n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1 \n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)复制代码\n```\n\n\n\n## 4、Container 网络模式\n\n#### 4.1 介绍\n\n　　这个模式指定**新创建的容器和已经存在的一个容器共享一个 Network Namespace**，而不是和宿主机共享。**新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围**等。同样，**两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的**。两个容器的进程可以通过 lo 网卡设备通信。\n\n\n\n#### 4.2 Container模式示意图\n\n![](https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3pqujjjj30m80pddgw.jpg)\n\n#### 4.3 演示\n\n（1）在一个终端，使用bridge网络模式启动容器b1\n\n```\n[root@along ~]# docker run --name b1 -it --rm busybox:latest \n/ # ifconfig   b1的ip为172.17.0.2\neth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  \n          inet addr:172.17.0.2  Bcast:0.0.0.0  Mask:255.255.0.0\n          inet6 addr: fe80::42:acff:fe11:2/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:6 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:6 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0 \n          RX bytes:508 (508.0 B)  TX bytes:508 (508.0 B)\n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1 \n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\n/ # echo \"hello world b1\" > /tmp/index.html\n/ # httpd -h /tmp/  在b1上启动httpd服务\n/ # netstat -nutl\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       \ntcp        0      0 :::80                   :::*                    LISTEN 复制代码\n```\n\n（2）在另一个终端使用Container 网络模式创建容器b2\n\n```\n[root@along ~]# docker run --name b2 -it --network container:b1 --rm busybox:latest\n/ # ifconfig -a   b2的ip和b1一样\neth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  \n          inet addr:172.17.0.2  Bcast:0.0.0.0  Mask:255.255.0.0\n          inet6 addr: fe80::42:acff:fe11:2/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:8 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0 \n          RX bytes:648 (648.0 B)  TX bytes:648 (648.0 B)\n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1 \n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\n/ # wget -O - -q 127.0.0.1   b1启动的httpd服务，在b2上直接访问\nhello world b1\n/ # ls /tmp/   但是文件系统并不共享，只共享网络复制代码\n```\n\n\n\n## 5、None 网络模式\n\n#### 5.1 介绍\n\n　　使用none模式，Docker容器拥有自己的Network Namespace，但是，**并不为Docker容器进行任何网络配置**。也就是说，这个Docker容器没有网卡、IP、路由等信息，只有lo 网络接口。需要我们自己为Docker容器添加网卡、配置IP等。\n\n　　不参与网络通信，运行于此类容器中的进程仅能访问本地回环接口；仅适用于进程无须网络通信的场景中，例如：备份、进程诊断及各种离线任务等。\n\n\n\n#### 5.2 Node模式示意图\n\n#### ![](https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3q084q5j30m80pyq3o.jpg)\n\n#### 5.3 演示\n\n```\n[root@along ~]# docker run --name b1 -it --network none --rm busybox:latest \n/ # ifconfig \nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1 \n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\n/ # route -n\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n```","slug":"docker/docker网络模式","published":1,"updated":"2020-09-20T03:22:55.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbloh006h4tjec21n2jy4","content":"<h1 id=\"Docker的网络模式详解\"><a href=\"#Docker的网络模式详解\" class=\"headerlink\" title=\"Docker的网络模式详解\"></a>Docker的网络模式详解</h1><h2 id=\"1、Docker的四种网络模式\"><a href=\"#1、Docker的四种网络模式\" class=\"headerlink\" title=\"1、Docker的四种网络模式\"></a>1、Docker的四种网络模式</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3mf2e5nj30q80g5di8.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>（1）docker四种网络模式如下：</p>\n<ul>\n<li>Bridge contauner 桥接式网络模式</li>\n<li>Host(open) container 开放式网络模式</li>\n<li>Container(join) container 联合挂载式网络模式，是host网络模式的延伸</li>\n<li>None(Close) container 封闭式网络模式</li>\n</ul>\n<p>（2）可以通过docker network命令查看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@along ~]# docker network ls</span><br><span class=\"line\">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class=\"line\">f23b4899add1        bridge              bridge              local</span><br><span class=\"line\">65520497f693        host                host                local</span><br><span class=\"line\">a0c5f18e0f04        none                null                local复制代码</span><br></pre></td></tr></table></figure>\n<p>（3）docker run –network 命令可以指定使用网络模式</p>\n<h2 id=\"2、Bridge-网络模式\"><a href=\"#2、Bridge-网络模式\" class=\"headerlink\" title=\"2、Bridge 网络模式\"></a>2、Bridge 网络模式</h2><h4 id=\"2-1-介绍\"><a href=\"#2-1-介绍\" class=\"headerlink\" title=\"2.1 介绍\"></a>2.1 介绍</h4><p>　　当Docker进程启动时，会<strong>在主机上创建一个名为docker0的虚拟网桥</strong>，此主机上启动的<strong>Docker容器会连接到这个虚拟网桥上，</strong>所以有默认地址172.17.0.0/16的地址。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。</p>\n<p>　　从<strong>docker0子网中分配一个IP给容器使用</strong>，并设置<strong>docker0的IP地址为容器的默认网关</strong>。在主机上<strong>创建一对虚拟网卡</strong>veth pair设备，Docker将veth pair设备的<strong>一端放在新创建的容器</strong>中，并命名为eth0（容器的网卡），<strong>另一端放在主机中</strong>，以vethxxx这样类似的名字命名，并将这个网络设备加入到docker0网桥中。可以通过brctl show命令查看。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@along ~]# brctl show</span><br><span class=\"line\">bridge name    bridge id        STP enabled    interfaces</span><br><span class=\"line\">docker0    8000.024241c45d6e    no复制代码</span><br></pre></td></tr></table></figure>\n<p>　　<strong>bridge模式是docker的默认网络模式</strong>，不写–net参数，就是bridge模式。使用docker run -p时，docker实际是在iptables做了DNAT规则，实现端口转发功能。可以使用iptables -t nat -vnL查看。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@along ~]# iptables -t nat -vnL</span><br><span class=\"line\">Chain POSTROUTING (policy ACCEPT 20 packets, 1238 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\">    0     0 MASQUERADE  all  --  *      !docker0  172.17.0.0/16        0.0.0.0/0复制代码</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-bridge模式示意图\"><a href=\"#2-2-bridge模式示意图\" class=\"headerlink\" title=\"2.2 bridge模式示意图\"></a>2.2 bridge模式示意图</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3o9zcpej30m80pjab7.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h4 id=\"2-3-演示\"><a href=\"#2-3-演示\" class=\"headerlink\" title=\"2.3 演示\"></a>2.3 演示</h4><p>bridge 网络模式；–network不指定，默认也是bridge模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@along ~]# docker run --name b1 -it --network bridge --rm busybox:latest </span><br><span class=\"line\">/ # ifconfig </span><br><span class=\"line\">eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  </span><br><span class=\"line\">          inet addr:172.17.0.2  Bcast:0.0.0.0  Mask:255.255.0.0</span><br><span class=\"line\">          inet6 addr: fe80::42:acff:fe11:2/64 Scope:Link</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:12 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:6 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:0 </span><br><span class=\"line\">          RX bytes:1016 (1016.0 B)  TX bytes:508 (508.0 B)</span><br><span class=\"line\"></span><br><span class=\"line\">lo        Link encap:Local Loopback  </span><br><span class=\"line\">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class=\"line\">          inet6 addr: ::1/128 Scope:Host</span><br><span class=\"line\">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class=\"line\">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1 </span><br><span class=\"line\">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class=\"line\">/ # route -n</span><br><span class=\"line\">Kernel IP routing table</span><br><span class=\"line\">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class=\"line\">0.0.0.0         172.17.0.1      0.0.0.0         UG    0      0        0 eth0</span><br><span class=\"line\">172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0</span><br><span class=\"line\">/ # ping 10.11.55.5   正常访问宿主机</span><br><span class=\"line\">PING 10.11.55.5 (10.11.55.5): 56 data bytes</span><br><span class=\"line\">64 bytes from 10.11.55.5: seq=0 ttl=64 time=0.292 ms</span><br><span class=\"line\">/ # exit复制代码</span><br></pre></td></tr></table></figure>\n<h2 id=\"3、Host-网络模式\"><a href=\"#3、Host-网络模式\" class=\"headerlink\" title=\"3、Host 网络模式\"></a>3、Host 网络模式</h2><h4 id=\"3-1-介绍\"><a href=\"#3-1-介绍\" class=\"headerlink\" title=\"3.1 介绍\"></a>3.1 介绍</h4><p>　　如果启动容器的时候使用host模式，那么这个容器将不会获得一个独立的Network Namespace，而是<strong>和宿主机共用一个Network Namespace</strong>。容器将不会虚拟出自己的网卡，配置自己的IP等，而是<strong>使用宿主机的IP和端口</strong>。但是，<strong>容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的</strong>。</p>\n<h4 id=\"3-2-Host模式示意图\"><a href=\"#3-2-Host模式示意图\" class=\"headerlink\" title=\"3.2 Host模式示意图\"></a>3.2 Host模式示意图</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3ox4pnoj30m80oz0tk.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h4 id=\"3-3-演示\"><a href=\"#3-3-演示\" class=\"headerlink\" title=\"3.3 演示\"></a>3.3 演示</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@along ~]# docker run --name b2 -it --network host --rm busybox:latest</span><br><span class=\"line\">/ # ifconfig -a   和宿主机一样</span><br><span class=\"line\">docker0   Link encap:Ethernet  HWaddr 02:42:41:C4:5D:6E  </span><br><span class=\"line\">          inet addr:172.17.0.1  Bcast:0.0.0.0  Mask:255.255.0.0</span><br><span class=\"line\">          inet6 addr: fe80::42:41ff:fec4:5d6e/64 Scope:Link</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:90 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:26 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:0 </span><br><span class=\"line\">          RX bytes:5903 (5.7 KiB)  TX bytes:2381 (2.3 KiB)</span><br><span class=\"line\"></span><br><span class=\"line\">eth0      Link encap:Ethernet  HWaddr 00:0C:29:AB:D2:DA  </span><br><span class=\"line\">          inet addr:10.11.55.5  Bcast:10.11.55.255  Mask:255.255.255.0</span><br><span class=\"line\">          inet6 addr: fe80::20c:29ff:feab:d2da/64 Scope:Link</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:3913 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:3327 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1000 </span><br><span class=\"line\">          RX bytes:354314 (346.0 KiB)  TX bytes:919096 (897.5 KiB)</span><br><span class=\"line\"></span><br><span class=\"line\">lo        Link encap:Local Loopback  </span><br><span class=\"line\">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class=\"line\">          inet6 addr: ::1/128 Scope:Host</span><br><span class=\"line\">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class=\"line\">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1 </span><br><span class=\"line\">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)复制代码</span><br></pre></td></tr></table></figure>\n<h2 id=\"4、Container-网络模式\"><a href=\"#4、Container-网络模式\" class=\"headerlink\" title=\"4、Container 网络模式\"></a>4、Container 网络模式</h2><h4 id=\"4-1-介绍\"><a href=\"#4-1-介绍\" class=\"headerlink\" title=\"4.1 介绍\"></a>4.1 介绍</h4><p>　　这个模式指定<strong>新创建的容器和已经存在的一个容器共享一个 Network Namespace</strong>，而不是和宿主机共享。<strong>新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围</strong>等。同样，<strong>两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的</strong>。两个容器的进程可以通过 lo 网卡设备通信。</p>\n<h4 id=\"4-2-Container模式示意图\"><a href=\"#4-2-Container模式示意图\" class=\"headerlink\" title=\"4.2 Container模式示意图\"></a>4.2 Container模式示意图</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3pqujjjj30m80pddgw.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h4 id=\"4-3-演示\"><a href=\"#4-3-演示\" class=\"headerlink\" title=\"4.3 演示\"></a>4.3 演示</h4><p>（1）在一个终端，使用bridge网络模式启动容器b1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@along ~]# docker run --name b1 -it --rm busybox:latest </span><br><span class=\"line\">/ # ifconfig   b1的ip为172.17.0.2</span><br><span class=\"line\">eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  </span><br><span class=\"line\">          inet addr:172.17.0.2  Bcast:0.0.0.0  Mask:255.255.0.0</span><br><span class=\"line\">          inet6 addr: fe80::42:acff:fe11:2/64 Scope:Link</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:6 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:6 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:0 </span><br><span class=\"line\">          RX bytes:508 (508.0 B)  TX bytes:508 (508.0 B)</span><br><span class=\"line\"></span><br><span class=\"line\">lo        Link encap:Local Loopback  </span><br><span class=\"line\">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class=\"line\">          inet6 addr: ::1/128 Scope:Host</span><br><span class=\"line\">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class=\"line\">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1 </span><br><span class=\"line\">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class=\"line\">/ # echo &quot;hello world b1&quot; &gt; /tmp/index.html</span><br><span class=\"line\">/ # httpd -h /tmp/  在b1上启动httpd服务</span><br><span class=\"line\">/ # netstat -nutl</span><br><span class=\"line\">Active Internet connections (only servers)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State       </span><br><span class=\"line\">tcp        0      0 :::80                   :::*                    LISTEN 复制代码</span><br></pre></td></tr></table></figure>\n<p>（2）在另一个终端使用Container 网络模式创建容器b2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@along ~]# docker run --name b2 -it --network container:b1 --rm busybox:latest</span><br><span class=\"line\">/ # ifconfig -a   b2的ip和b1一样</span><br><span class=\"line\">eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  </span><br><span class=\"line\">          inet addr:172.17.0.2  Bcast:0.0.0.0  Mask:255.255.0.0</span><br><span class=\"line\">          inet6 addr: fe80::42:acff:fe11:2/64 Scope:Link</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:8 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:0 </span><br><span class=\"line\">          RX bytes:648 (648.0 B)  TX bytes:648 (648.0 B)</span><br><span class=\"line\"></span><br><span class=\"line\">lo        Link encap:Local Loopback  </span><br><span class=\"line\">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class=\"line\">          inet6 addr: ::1/128 Scope:Host</span><br><span class=\"line\">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class=\"line\">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1 </span><br><span class=\"line\">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class=\"line\">/ # wget -O - -q 127.0.0.1   b1启动的httpd服务，在b2上直接访问</span><br><span class=\"line\">hello world b1</span><br><span class=\"line\">/ # ls /tmp/   但是文件系统并不共享，只共享网络复制代码</span><br></pre></td></tr></table></figure>\n<h2 id=\"5、None-网络模式\"><a href=\"#5、None-网络模式\" class=\"headerlink\" title=\"5、None 网络模式\"></a>5、None 网络模式</h2><h4 id=\"5-1-介绍\"><a href=\"#5-1-介绍\" class=\"headerlink\" title=\"5.1 介绍\"></a>5.1 介绍</h4><p>　　使用none模式，Docker容器拥有自己的Network Namespace，但是，<strong>并不为Docker容器进行任何网络配置</strong>。也就是说，这个Docker容器没有网卡、IP、路由等信息，只有lo 网络接口。需要我们自己为Docker容器添加网卡、配置IP等。</p>\n<p>　　不参与网络通信，运行于此类容器中的进程仅能访问本地回环接口；仅适用于进程无须网络通信的场景中，例如：备份、进程诊断及各种离线任务等。</p>\n<h4 id=\"5-2-Node模式示意图\"><a href=\"#5-2-Node模式示意图\" class=\"headerlink\" title=\"5.2 Node模式示意图\"></a>5.2 Node模式示意图</h4><h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3q084q5j30m80pyq3o.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></h4><h4 id=\"5-3-演示\"><a href=\"#5-3-演示\" class=\"headerlink\" title=\"5.3 演示\"></a>5.3 演示</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@along ~]# docker run --name b1 -it --network none --rm busybox:latest </span><br><span class=\"line\">/ # ifconfig </span><br><span class=\"line\">lo        Link encap:Local Loopback  </span><br><span class=\"line\">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class=\"line\">          inet6 addr: ::1/128 Scope:Host</span><br><span class=\"line\">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class=\"line\">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1 </span><br><span class=\"line\">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class=\"line\">/ # route -n</span><br><span class=\"line\">Kernel IP routing table</span><br><span class=\"line\">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Docker的网络模式详解\"><a href=\"#Docker的网络模式详解\" class=\"headerlink\" title=\"Docker的网络模式详解\"></a>Docker的网络模式详解</h1><h2 id=\"1、Docker的四种网络模式\"><a href=\"#1、Docker的四种网络模式\" class=\"headerlink\" title=\"1、Docker的四种网络模式\"></a>1、Docker的四种网络模式</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3mf2e5nj30q80g5di8.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>（1）docker四种网络模式如下：</p>\n<ul>\n<li>Bridge contauner 桥接式网络模式</li>\n<li>Host(open) container 开放式网络模式</li>\n<li>Container(join) container 联合挂载式网络模式，是host网络模式的延伸</li>\n<li>None(Close) container 封闭式网络模式</li>\n</ul>\n<p>（2）可以通过docker network命令查看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@along ~]# docker network ls</span><br><span class=\"line\">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class=\"line\">f23b4899add1        bridge              bridge              local</span><br><span class=\"line\">65520497f693        host                host                local</span><br><span class=\"line\">a0c5f18e0f04        none                null                local复制代码</span><br></pre></td></tr></table></figure>\n<p>（3）docker run –network 命令可以指定使用网络模式</p>\n<h2 id=\"2、Bridge-网络模式\"><a href=\"#2、Bridge-网络模式\" class=\"headerlink\" title=\"2、Bridge 网络模式\"></a>2、Bridge 网络模式</h2><h4 id=\"2-1-介绍\"><a href=\"#2-1-介绍\" class=\"headerlink\" title=\"2.1 介绍\"></a>2.1 介绍</h4><p>　　当Docker进程启动时，会<strong>在主机上创建一个名为docker0的虚拟网桥</strong>，此主机上启动的<strong>Docker容器会连接到这个虚拟网桥上，</strong>所以有默认地址172.17.0.0/16的地址。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。</p>\n<p>　　从<strong>docker0子网中分配一个IP给容器使用</strong>，并设置<strong>docker0的IP地址为容器的默认网关</strong>。在主机上<strong>创建一对虚拟网卡</strong>veth pair设备，Docker将veth pair设备的<strong>一端放在新创建的容器</strong>中，并命名为eth0（容器的网卡），<strong>另一端放在主机中</strong>，以vethxxx这样类似的名字命名，并将这个网络设备加入到docker0网桥中。可以通过brctl show命令查看。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@along ~]# brctl show</span><br><span class=\"line\">bridge name    bridge id        STP enabled    interfaces</span><br><span class=\"line\">docker0    8000.024241c45d6e    no复制代码</span><br></pre></td></tr></table></figure>\n<p>　　<strong>bridge模式是docker的默认网络模式</strong>，不写–net参数，就是bridge模式。使用docker run -p时，docker实际是在iptables做了DNAT规则，实现端口转发功能。可以使用iptables -t nat -vnL查看。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@along ~]# iptables -t nat -vnL</span><br><span class=\"line\">Chain POSTROUTING (policy ACCEPT 20 packets, 1238 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\">    0     0 MASQUERADE  all  --  *      !docker0  172.17.0.0/16        0.0.0.0/0复制代码</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-bridge模式示意图\"><a href=\"#2-2-bridge模式示意图\" class=\"headerlink\" title=\"2.2 bridge模式示意图\"></a>2.2 bridge模式示意图</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3o9zcpej30m80pjab7.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h4 id=\"2-3-演示\"><a href=\"#2-3-演示\" class=\"headerlink\" title=\"2.3 演示\"></a>2.3 演示</h4><p>bridge 网络模式；–network不指定，默认也是bridge模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@along ~]# docker run --name b1 -it --network bridge --rm busybox:latest </span><br><span class=\"line\">/ # ifconfig </span><br><span class=\"line\">eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  </span><br><span class=\"line\">          inet addr:172.17.0.2  Bcast:0.0.0.0  Mask:255.255.0.0</span><br><span class=\"line\">          inet6 addr: fe80::42:acff:fe11:2/64 Scope:Link</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:12 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:6 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:0 </span><br><span class=\"line\">          RX bytes:1016 (1016.0 B)  TX bytes:508 (508.0 B)</span><br><span class=\"line\"></span><br><span class=\"line\">lo        Link encap:Local Loopback  </span><br><span class=\"line\">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class=\"line\">          inet6 addr: ::1/128 Scope:Host</span><br><span class=\"line\">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class=\"line\">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1 </span><br><span class=\"line\">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class=\"line\">/ # route -n</span><br><span class=\"line\">Kernel IP routing table</span><br><span class=\"line\">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class=\"line\">0.0.0.0         172.17.0.1      0.0.0.0         UG    0      0        0 eth0</span><br><span class=\"line\">172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0</span><br><span class=\"line\">/ # ping 10.11.55.5   正常访问宿主机</span><br><span class=\"line\">PING 10.11.55.5 (10.11.55.5): 56 data bytes</span><br><span class=\"line\">64 bytes from 10.11.55.5: seq=0 ttl=64 time=0.292 ms</span><br><span class=\"line\">/ # exit复制代码</span><br></pre></td></tr></table></figure>\n<h2 id=\"3、Host-网络模式\"><a href=\"#3、Host-网络模式\" class=\"headerlink\" title=\"3、Host 网络模式\"></a>3、Host 网络模式</h2><h4 id=\"3-1-介绍\"><a href=\"#3-1-介绍\" class=\"headerlink\" title=\"3.1 介绍\"></a>3.1 介绍</h4><p>　　如果启动容器的时候使用host模式，那么这个容器将不会获得一个独立的Network Namespace，而是<strong>和宿主机共用一个Network Namespace</strong>。容器将不会虚拟出自己的网卡，配置自己的IP等，而是<strong>使用宿主机的IP和端口</strong>。但是，<strong>容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的</strong>。</p>\n<h4 id=\"3-2-Host模式示意图\"><a href=\"#3-2-Host模式示意图\" class=\"headerlink\" title=\"3.2 Host模式示意图\"></a>3.2 Host模式示意图</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3ox4pnoj30m80oz0tk.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h4 id=\"3-3-演示\"><a href=\"#3-3-演示\" class=\"headerlink\" title=\"3.3 演示\"></a>3.3 演示</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@along ~]# docker run --name b2 -it --network host --rm busybox:latest</span><br><span class=\"line\">/ # ifconfig -a   和宿主机一样</span><br><span class=\"line\">docker0   Link encap:Ethernet  HWaddr 02:42:41:C4:5D:6E  </span><br><span class=\"line\">          inet addr:172.17.0.1  Bcast:0.0.0.0  Mask:255.255.0.0</span><br><span class=\"line\">          inet6 addr: fe80::42:41ff:fec4:5d6e/64 Scope:Link</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:90 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:26 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:0 </span><br><span class=\"line\">          RX bytes:5903 (5.7 KiB)  TX bytes:2381 (2.3 KiB)</span><br><span class=\"line\"></span><br><span class=\"line\">eth0      Link encap:Ethernet  HWaddr 00:0C:29:AB:D2:DA  </span><br><span class=\"line\">          inet addr:10.11.55.5  Bcast:10.11.55.255  Mask:255.255.255.0</span><br><span class=\"line\">          inet6 addr: fe80::20c:29ff:feab:d2da/64 Scope:Link</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:3913 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:3327 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1000 </span><br><span class=\"line\">          RX bytes:354314 (346.0 KiB)  TX bytes:919096 (897.5 KiB)</span><br><span class=\"line\"></span><br><span class=\"line\">lo        Link encap:Local Loopback  </span><br><span class=\"line\">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class=\"line\">          inet6 addr: ::1/128 Scope:Host</span><br><span class=\"line\">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class=\"line\">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1 </span><br><span class=\"line\">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)复制代码</span><br></pre></td></tr></table></figure>\n<h2 id=\"4、Container-网络模式\"><a href=\"#4、Container-网络模式\" class=\"headerlink\" title=\"4、Container 网络模式\"></a>4、Container 网络模式</h2><h4 id=\"4-1-介绍\"><a href=\"#4-1-介绍\" class=\"headerlink\" title=\"4.1 介绍\"></a>4.1 介绍</h4><p>　　这个模式指定<strong>新创建的容器和已经存在的一个容器共享一个 Network Namespace</strong>，而不是和宿主机共享。<strong>新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围</strong>等。同样，<strong>两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的</strong>。两个容器的进程可以通过 lo 网卡设备通信。</p>\n<h4 id=\"4-2-Container模式示意图\"><a href=\"#4-2-Container模式示意图\" class=\"headerlink\" title=\"4.2 Container模式示意图\"></a>4.2 Container模式示意图</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3pqujjjj30m80pddgw.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h4 id=\"4-3-演示\"><a href=\"#4-3-演示\" class=\"headerlink\" title=\"4.3 演示\"></a>4.3 演示</h4><p>（1）在一个终端，使用bridge网络模式启动容器b1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@along ~]# docker run --name b1 -it --rm busybox:latest </span><br><span class=\"line\">/ # ifconfig   b1的ip为172.17.0.2</span><br><span class=\"line\">eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  </span><br><span class=\"line\">          inet addr:172.17.0.2  Bcast:0.0.0.0  Mask:255.255.0.0</span><br><span class=\"line\">          inet6 addr: fe80::42:acff:fe11:2/64 Scope:Link</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:6 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:6 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:0 </span><br><span class=\"line\">          RX bytes:508 (508.0 B)  TX bytes:508 (508.0 B)</span><br><span class=\"line\"></span><br><span class=\"line\">lo        Link encap:Local Loopback  </span><br><span class=\"line\">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class=\"line\">          inet6 addr: ::1/128 Scope:Host</span><br><span class=\"line\">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class=\"line\">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1 </span><br><span class=\"line\">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class=\"line\">/ # echo &quot;hello world b1&quot; &gt; /tmp/index.html</span><br><span class=\"line\">/ # httpd -h /tmp/  在b1上启动httpd服务</span><br><span class=\"line\">/ # netstat -nutl</span><br><span class=\"line\">Active Internet connections (only servers)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State       </span><br><span class=\"line\">tcp        0      0 :::80                   :::*                    LISTEN 复制代码</span><br></pre></td></tr></table></figure>\n<p>（2）在另一个终端使用Container 网络模式创建容器b2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@along ~]# docker run --name b2 -it --network container:b1 --rm busybox:latest</span><br><span class=\"line\">/ # ifconfig -a   b2的ip和b1一样</span><br><span class=\"line\">eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  </span><br><span class=\"line\">          inet addr:172.17.0.2  Bcast:0.0.0.0  Mask:255.255.0.0</span><br><span class=\"line\">          inet6 addr: fe80::42:acff:fe11:2/64 Scope:Link</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:8 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:0 </span><br><span class=\"line\">          RX bytes:648 (648.0 B)  TX bytes:648 (648.0 B)</span><br><span class=\"line\"></span><br><span class=\"line\">lo        Link encap:Local Loopback  </span><br><span class=\"line\">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class=\"line\">          inet6 addr: ::1/128 Scope:Host</span><br><span class=\"line\">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class=\"line\">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1 </span><br><span class=\"line\">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class=\"line\">/ # wget -O - -q 127.0.0.1   b1启动的httpd服务，在b2上直接访问</span><br><span class=\"line\">hello world b1</span><br><span class=\"line\">/ # ls /tmp/   但是文件系统并不共享，只共享网络复制代码</span><br></pre></td></tr></table></figure>\n<h2 id=\"5、None-网络模式\"><a href=\"#5、None-网络模式\" class=\"headerlink\" title=\"5、None 网络模式\"></a>5、None 网络模式</h2><h4 id=\"5-1-介绍\"><a href=\"#5-1-介绍\" class=\"headerlink\" title=\"5.1 介绍\"></a>5.1 介绍</h4><p>　　使用none模式，Docker容器拥有自己的Network Namespace，但是，<strong>并不为Docker容器进行任何网络配置</strong>。也就是说，这个Docker容器没有网卡、IP、路由等信息，只有lo 网络接口。需要我们自己为Docker容器添加网卡、配置IP等。</p>\n<p>　　不参与网络通信，运行于此类容器中的进程仅能访问本地回环接口；仅适用于进程无须网络通信的场景中，例如：备份、进程诊断及各种离线任务等。</p>\n<h4 id=\"5-2-Node模式示意图\"><a href=\"#5-2-Node模式示意图\" class=\"headerlink\" title=\"5.2 Node模式示意图\"></a>5.2 Node模式示意图</h4><h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3q084q5j30m80pyq3o.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></h4><h4 id=\"5-3-演示\"><a href=\"#5-3-演示\" class=\"headerlink\" title=\"5.3 演示\"></a>5.3 演示</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@along ~]# docker run --name b1 -it --network none --rm busybox:latest </span><br><span class=\"line\">/ # ifconfig </span><br><span class=\"line\">lo        Link encap:Local Loopback  </span><br><span class=\"line\">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class=\"line\">          inet6 addr: ::1/128 Scope:Host</span><br><span class=\"line\">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class=\"line\">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:1 </span><br><span class=\"line\">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class=\"line\">/ # route -n</span><br><span class=\"line\">Kernel IP routing table</span><br><span class=\"line\">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br></pre></td></tr></table></figure>"},{"title":"hibernate_Embedded和@Embeddable","date":"2019-08-10T02:57:59.000Z","_content":"\n在使用实体类生成对应的数据库表时，很多的时候都会遇到这种情况：在一个实体类中引用另外的实体类，一般遇上这种情况，我们使用@OneToOne、@OneToMany、@ManyToOne、@ManyToMany这4个注解比较多，但是好奇害死猫，除了这四个有没有别的使用情况，尤其是一个实体类要在多个不同的实体类中进行使用，而本身又不需要独立生成一个数据库表，这就是需要@Embedded、@Embeddable的时候了，下面分成4类来说明在一个实体类中引用另外的实体类的情况，具体的数据库环境是MySQL 5.7。\n\n使用的两个实体类如下：\n\nAddress类\n```java\npublic class Address implements Serializable{\n    private static final long serialVersionUID = 8849870114128959929L;\n\n    private String country;\n    private String province;\n    private String city;\n    private String detail;\n    \n    //setter、getter}\n```\nPerson类：\n```java\n@Entity\npublic class Person implements Serializable{\n    private static final long serialVersionUID = 8849870114127659929L;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n    \n    @Column(nullable = false)\n    private String name;\n    \n    @Column(nullable = false)\n    private Integer age;\n    \n    private Address address;\n    \n    //setter、getter\n}\n```\n# 两个注解全不使用\n当这两个注解都不使用时，那么两个实体类和上面的相同，那么生成的表结构如下： \n\n![](http://wumu.sciento.cn/img/20190810110112.png)\n\n\nAddress属性字段会映射成tinyblob类型的字段，这是用来存储不超过255字符的二进制字符串的数据类型，显然我们通常不会这么使用。\n\n# 只使用@Embeddable\n我们在Address实体类上加上@Embeddable注解，变成如下类：\n\n```java\n@Embeddable\npublic class Address implements Serializable{\n    private static final long serialVersionUID = 8849870114128959929L;\n\n    private String country;\n    private String province;\n    private String city;\n    private String detail;\n    \n    //setter、getter\n}\n```\n而Person实体类不变，生成的数据库表结构如下： \n\n![](http://wumu.sciento.cn/img/20190810110330.png)\n\n\n可以看出这次是把Address中的字段映射成数据库列嵌入到Person表中了，而这些字段的类型和长度也使用默认值。如果我们在Address中的字段中设置列的相关属性，则会按照我们设定的值去生成，如下Address类：\n```java\n@Embeddable\npublic class Address implements Serializable{\n    private static final long serialVersionUID = 8849870114128959929L;\n\n    @Column(nullable = false)\n    private String country;\n    @Column(length = 30)\n    private String province;\n    @Column(unique = true)\n    private String city;\n    @Column(length = 50)\n    private String detail;\n    //setter、getter\n}\n```\n生成的表结构如下：\n\n ![](http://wumu.sciento.cn/img/20190810110454.png)\n\n\n我们在Address中配置的属性全部成功映射到Person表中。\n\n# 只使用@Embedded\n这里我们只在Person中使用@Embedded,如下：\n```java\n@Entity\npublic class Person implements Serializable{\n    private static final long serialVersionUID = 8849870114127659929L;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n    \n    @Column(nullable = false)\n    private String name;\n    \n    @Column(nullable = false)\n    private Integer age;\n    \n    @Embedded\n    private Address address;\n    \n    //setter、getter\n}\n```\nAdddress类和最开始的不同POJO类相同，此时生成的表结构如下： \n\n![](http://wumu.sciento.cn/img/20190810110619.png)\n\n\n可以看出这个表结构和在Address中只使用@Embeddable注解时相同，在进入深一步试验，我们在Address中加入列属性，但是不使用@Embeddable注解会发生什么？ \nAddress类如下：\n```java\npublic class Address implements Serializable{\n    private static final long serialVersionUID = 8849870114128959929L;\n\n    @Column(nullable = false)\n    private String country;\n    @Column(length = 30)\n    private String province;\n    @Column(unique = true)\n    private String city;\n    @Column(length = 50)\n    private String detail;\n    //setter、getter\n}\n```\n生成数据表结构如下： \n\n![](http://wumu.sciento.cn/img/20190810110728.png)\n\n\n所以只使用@Embedded和只使用@Embeddable产生的效果是相同的。\n\n# 两个注解全使用\n既然单独使用@Embedded或者只使用@Embeddable都会产生作用，那么这两个都使用效果也一定是一样的，我们平时也是这么用的。所以在这部分我们就不演示和上面相同的效果了，而是说两个深入的话题。\n\n## 覆盖@Embeddable类中字段的列属性\n这里就要使用另外的两个注解@AttributeOverrides和@AttributeOverride，这两个注解是用来覆盖@Embeddable类中字段的属性的。\n\n@AttributeOverrides：里面只包含了@AttributeOverride类型数组；\n@AttributeOverride：包含要覆盖的@Embeddable类中字段名name和新增的@Column字段的属性；\n使用如下： \nPerson类如下：\n```java\n@Entity\npublic class Person implements Serializable{\n    private static final long serialVersionUID = 8849870114127659929L;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n    \n    @Column(nullable = false)\n    private String name;\n    \n    @Column(nullable = false)\n    private Integer age;\n    \n    @Embedded\n    @AttributeOverrides({@AttributeOverride(name=\"country\", column=@Column(name = \"person_country\", length = 25, nullable = false)),\n                        @AttributeOverride(name=\"city\", column = @Column(name = \"person_city\", length = 15))})\n    private Address address;\n    \n    //setter、getter\n}\n```\nAddress类如下：\n```java\n@Embeddable\npublic class Address implements Serializable{\n    private static final long serialVersionUID = 8849870114128959929L;\n\n    @Column(nullable = false)\n    private String country;\n    @Column(length = 30)\n    private String province;\n    @Column(unique = true)\n    private String city;\n    @Column(length = 50)\n    private String detail;\n    //setter、getter\n}\n```\n生成的数据表如下：\n\n![](http://wumu.sciento.cn/img/20190810110901.png)\n\n可以看出我们的@AttributeOverrides和@AttributeOverride两个注解起作用了。\n\n## 多层嵌入实体类属性\n上面所有的例子都是使用两层实体类嵌入，其实这种实体类的嵌入映射是可以使用多层的，具体的例子如下。 \n我们新建立一个类Direction表示方位如下：\n```java\n@Embeddable\npublic class Direction implements Serializable{\n\n    @Column(nullable = false)\n    private Integer longitude;\n    private Integer latitude;\n}\n```\nAddress如下：\n```\n@Embeddable\npublic class Address implements Serializable{\n    private static final long serialVersionUID = 8849870114128959929L;\n\n    @Column(nullable = false)\n    private String country;\n    @Column(length = 30)\n    private String province;\n    @Column(unique = true)\n    private String city;\n    @Column(length = 50)\n    private String detail;\n    \n    @Embedded\n    private Direction direction;\n}\n```\nPerson类如下：\n```java\n@Entity\npublic class Person implements Serializable{\n    private static final long serialVersionUID = 8849870114127659929L;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n    \n    @Column(nullable = false)\n    private String name;\n    \n    @Column(nullable = false)\n    private Integer age;\n    \n    @Embedded\n    @AttributeOverrides({@AttributeOverride(name=\"direction.latitude\", column=@Column(name = \"person_latitude\")),\n                        @AttributeOverride(name=\"direction.longitude\", column = @Column(name = \"person_longitude\"))})\n    private Address address;\n}\n```\n生成的数据表如下：\n\n![](http://wumu.sciento.cn/img/20190810111050.png)\n\n# 在上面需要注意如下几点：\n\n在Person中定义Direction中的属性时，需要用”.”将所有相关的属性连接起来；\n在Direction中longitude属性定义为not null，但是由于使用了@AttributeOverride注解，其中虽然没有定义null属性，但是这时使用的是默认的nullable属性，默认为true;\n\n# 参考\n> https://blog.csdn.net/lmy86263/article/details/52108130","source":"_posts/java/hibernate-@Embedded和-Embeddable.md","raw":"---\ntitle: hibernate_Embedded和@Embeddable\ndate: 2019-08-10 10:57:59\ntags: java\n---\n\n在使用实体类生成对应的数据库表时，很多的时候都会遇到这种情况：在一个实体类中引用另外的实体类，一般遇上这种情况，我们使用@OneToOne、@OneToMany、@ManyToOne、@ManyToMany这4个注解比较多，但是好奇害死猫，除了这四个有没有别的使用情况，尤其是一个实体类要在多个不同的实体类中进行使用，而本身又不需要独立生成一个数据库表，这就是需要@Embedded、@Embeddable的时候了，下面分成4类来说明在一个实体类中引用另外的实体类的情况，具体的数据库环境是MySQL 5.7。\n\n使用的两个实体类如下：\n\nAddress类\n```java\npublic class Address implements Serializable{\n    private static final long serialVersionUID = 8849870114128959929L;\n\n    private String country;\n    private String province;\n    private String city;\n    private String detail;\n    \n    //setter、getter}\n```\nPerson类：\n```java\n@Entity\npublic class Person implements Serializable{\n    private static final long serialVersionUID = 8849870114127659929L;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n    \n    @Column(nullable = false)\n    private String name;\n    \n    @Column(nullable = false)\n    private Integer age;\n    \n    private Address address;\n    \n    //setter、getter\n}\n```\n# 两个注解全不使用\n当这两个注解都不使用时，那么两个实体类和上面的相同，那么生成的表结构如下： \n\n![](http://wumu.sciento.cn/img/20190810110112.png)\n\n\nAddress属性字段会映射成tinyblob类型的字段，这是用来存储不超过255字符的二进制字符串的数据类型，显然我们通常不会这么使用。\n\n# 只使用@Embeddable\n我们在Address实体类上加上@Embeddable注解，变成如下类：\n\n```java\n@Embeddable\npublic class Address implements Serializable{\n    private static final long serialVersionUID = 8849870114128959929L;\n\n    private String country;\n    private String province;\n    private String city;\n    private String detail;\n    \n    //setter、getter\n}\n```\n而Person实体类不变，生成的数据库表结构如下： \n\n![](http://wumu.sciento.cn/img/20190810110330.png)\n\n\n可以看出这次是把Address中的字段映射成数据库列嵌入到Person表中了，而这些字段的类型和长度也使用默认值。如果我们在Address中的字段中设置列的相关属性，则会按照我们设定的值去生成，如下Address类：\n```java\n@Embeddable\npublic class Address implements Serializable{\n    private static final long serialVersionUID = 8849870114128959929L;\n\n    @Column(nullable = false)\n    private String country;\n    @Column(length = 30)\n    private String province;\n    @Column(unique = true)\n    private String city;\n    @Column(length = 50)\n    private String detail;\n    //setter、getter\n}\n```\n生成的表结构如下：\n\n ![](http://wumu.sciento.cn/img/20190810110454.png)\n\n\n我们在Address中配置的属性全部成功映射到Person表中。\n\n# 只使用@Embedded\n这里我们只在Person中使用@Embedded,如下：\n```java\n@Entity\npublic class Person implements Serializable{\n    private static final long serialVersionUID = 8849870114127659929L;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n    \n    @Column(nullable = false)\n    private String name;\n    \n    @Column(nullable = false)\n    private Integer age;\n    \n    @Embedded\n    private Address address;\n    \n    //setter、getter\n}\n```\nAdddress类和最开始的不同POJO类相同，此时生成的表结构如下： \n\n![](http://wumu.sciento.cn/img/20190810110619.png)\n\n\n可以看出这个表结构和在Address中只使用@Embeddable注解时相同，在进入深一步试验，我们在Address中加入列属性，但是不使用@Embeddable注解会发生什么？ \nAddress类如下：\n```java\npublic class Address implements Serializable{\n    private static final long serialVersionUID = 8849870114128959929L;\n\n    @Column(nullable = false)\n    private String country;\n    @Column(length = 30)\n    private String province;\n    @Column(unique = true)\n    private String city;\n    @Column(length = 50)\n    private String detail;\n    //setter、getter\n}\n```\n生成数据表结构如下： \n\n![](http://wumu.sciento.cn/img/20190810110728.png)\n\n\n所以只使用@Embedded和只使用@Embeddable产生的效果是相同的。\n\n# 两个注解全使用\n既然单独使用@Embedded或者只使用@Embeddable都会产生作用，那么这两个都使用效果也一定是一样的，我们平时也是这么用的。所以在这部分我们就不演示和上面相同的效果了，而是说两个深入的话题。\n\n## 覆盖@Embeddable类中字段的列属性\n这里就要使用另外的两个注解@AttributeOverrides和@AttributeOverride，这两个注解是用来覆盖@Embeddable类中字段的属性的。\n\n@AttributeOverrides：里面只包含了@AttributeOverride类型数组；\n@AttributeOverride：包含要覆盖的@Embeddable类中字段名name和新增的@Column字段的属性；\n使用如下： \nPerson类如下：\n```java\n@Entity\npublic class Person implements Serializable{\n    private static final long serialVersionUID = 8849870114127659929L;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n    \n    @Column(nullable = false)\n    private String name;\n    \n    @Column(nullable = false)\n    private Integer age;\n    \n    @Embedded\n    @AttributeOverrides({@AttributeOverride(name=\"country\", column=@Column(name = \"person_country\", length = 25, nullable = false)),\n                        @AttributeOverride(name=\"city\", column = @Column(name = \"person_city\", length = 15))})\n    private Address address;\n    \n    //setter、getter\n}\n```\nAddress类如下：\n```java\n@Embeddable\npublic class Address implements Serializable{\n    private static final long serialVersionUID = 8849870114128959929L;\n\n    @Column(nullable = false)\n    private String country;\n    @Column(length = 30)\n    private String province;\n    @Column(unique = true)\n    private String city;\n    @Column(length = 50)\n    private String detail;\n    //setter、getter\n}\n```\n生成的数据表如下：\n\n![](http://wumu.sciento.cn/img/20190810110901.png)\n\n可以看出我们的@AttributeOverrides和@AttributeOverride两个注解起作用了。\n\n## 多层嵌入实体类属性\n上面所有的例子都是使用两层实体类嵌入，其实这种实体类的嵌入映射是可以使用多层的，具体的例子如下。 \n我们新建立一个类Direction表示方位如下：\n```java\n@Embeddable\npublic class Direction implements Serializable{\n\n    @Column(nullable = false)\n    private Integer longitude;\n    private Integer latitude;\n}\n```\nAddress如下：\n```\n@Embeddable\npublic class Address implements Serializable{\n    private static final long serialVersionUID = 8849870114128959929L;\n\n    @Column(nullable = false)\n    private String country;\n    @Column(length = 30)\n    private String province;\n    @Column(unique = true)\n    private String city;\n    @Column(length = 50)\n    private String detail;\n    \n    @Embedded\n    private Direction direction;\n}\n```\nPerson类如下：\n```java\n@Entity\npublic class Person implements Serializable{\n    private static final long serialVersionUID = 8849870114127659929L;\n\n    @Id\n    @GeneratedValue\n    private Long id;\n    \n    @Column(nullable = false)\n    private String name;\n    \n    @Column(nullable = false)\n    private Integer age;\n    \n    @Embedded\n    @AttributeOverrides({@AttributeOverride(name=\"direction.latitude\", column=@Column(name = \"person_latitude\")),\n                        @AttributeOverride(name=\"direction.longitude\", column = @Column(name = \"person_longitude\"))})\n    private Address address;\n}\n```\n生成的数据表如下：\n\n![](http://wumu.sciento.cn/img/20190810111050.png)\n\n# 在上面需要注意如下几点：\n\n在Person中定义Direction中的属性时，需要用”.”将所有相关的属性连接起来；\n在Direction中longitude属性定义为not null，但是由于使用了@AttributeOverride注解，其中虽然没有定义null属性，但是这时使用的是默认的nullable属性，默认为true;\n\n# 参考\n> https://blog.csdn.net/lmy86263/article/details/52108130","slug":"java/hibernate-@Embedded和-Embeddable","published":1,"updated":"2019-09-01T12:22:36.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbloi006i4tjeudnzwozn","content":"<p>在使用实体类生成对应的数据库表时，很多的时候都会遇到这种情况：在一个实体类中引用另外的实体类，一般遇上这种情况，我们使用@OneToOne、@OneToMany、@ManyToOne、@ManyToMany这4个注解比较多，但是好奇害死猫，除了这四个有没有别的使用情况，尤其是一个实体类要在多个不同的实体类中进行使用，而本身又不需要独立生成一个数据库表，这就是需要@Embedded、@Embeddable的时候了，下面分成4类来说明在一个实体类中引用另外的实体类的情况，具体的数据库环境是MySQL 5.7。</p>\n<p>使用的两个实体类如下：</p>\n<p>Address类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114128959929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String country;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String province;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String detail;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//setter、getter&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>Person类：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114127659929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Address address;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//setter、getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"两个注解全不使用\"><a href=\"#两个注解全不使用\" class=\"headerlink\" title=\"两个注解全不使用\"></a>两个注解全不使用</h1><p>当这两个注解都不使用时，那么两个实体类和上面的相同，那么生成的表结构如下： </p>\n<p><img src=\"http://wumu.sciento.cn/img/20190810110112.png\" alt=\"\"></p>\n<p>Address属性字段会映射成tinyblob类型的字段，这是用来存储不超过255字符的二进制字符串的数据类型，显然我们通常不会这么使用。</p>\n<h1 id=\"只使用-Embeddable\"><a href=\"#只使用-Embeddable\" class=\"headerlink\" title=\"只使用@Embeddable\"></a>只使用@Embeddable</h1><p>我们在Address实体类上加上@Embeddable注解，变成如下类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Embeddable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114128959929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String country;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String province;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String detail;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//setter、getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而Person实体类不变，生成的数据库表结构如下： </p>\n<p><img src=\"http://wumu.sciento.cn/img/20190810110330.png\" alt=\"\"></p>\n<p>可以看出这次是把Address中的字段映射成数据库列嵌入到Person表中了，而这些字段的类型和长度也使用默认值。如果我们在Address中的字段中设置列的相关属性，则会按照我们设定的值去生成，如下Address类：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Embeddable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114128959929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String country;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(length = <span class=\"number\">30</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String province;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(unique = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(length = <span class=\"number\">50</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String detail;</span><br><span class=\"line\">    <span class=\"comment\">//setter、getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成的表结构如下：</p>\n<p> <img src=\"http://wumu.sciento.cn/img/20190810110454.png\" alt=\"\"></p>\n<p>我们在Address中配置的属性全部成功映射到Person表中。</p>\n<h1 id=\"只使用-Embedded\"><a href=\"#只使用-Embedded\" class=\"headerlink\" title=\"只使用@Embedded\"></a>只使用@Embedded</h1><p>这里我们只在Person中使用@Embedded,如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114127659929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Embedded</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Address address;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//setter、getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Adddress类和最开始的不同POJO类相同，此时生成的表结构如下： </p>\n<p><img src=\"http://wumu.sciento.cn/img/20190810110619.png\" alt=\"\"></p>\n<p>可以看出这个表结构和在Address中只使用@Embeddable注解时相同，在进入深一步试验，我们在Address中加入列属性，但是不使用@Embeddable注解会发生什么？<br>Address类如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114128959929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String country;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(length = <span class=\"number\">30</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String province;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(unique = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(length = <span class=\"number\">50</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String detail;</span><br><span class=\"line\">    <span class=\"comment\">//setter、getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成数据表结构如下： </p>\n<p><img src=\"http://wumu.sciento.cn/img/20190810110728.png\" alt=\"\"></p>\n<p>所以只使用@Embedded和只使用@Embeddable产生的效果是相同的。</p>\n<h1 id=\"两个注解全使用\"><a href=\"#两个注解全使用\" class=\"headerlink\" title=\"两个注解全使用\"></a>两个注解全使用</h1><p>既然单独使用@Embedded或者只使用@Embeddable都会产生作用，那么这两个都使用效果也一定是一样的，我们平时也是这么用的。所以在这部分我们就不演示和上面相同的效果了，而是说两个深入的话题。</p>\n<h2 id=\"覆盖-Embeddable类中字段的列属性\"><a href=\"#覆盖-Embeddable类中字段的列属性\" class=\"headerlink\" title=\"覆盖@Embeddable类中字段的列属性\"></a>覆盖@Embeddable类中字段的列属性</h2><p>这里就要使用另外的两个注解@AttributeOverrides和@AttributeOverride，这两个注解是用来覆盖@Embeddable类中字段的属性的。</p>\n<p>@AttributeOverrides：里面只包含了@AttributeOverride类型数组；<br>@AttributeOverride：包含要覆盖的@Embeddable类中字段名name和新增的@Column字段的属性；<br>使用如下：<br>Person类如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114127659929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Embedded</span></span><br><span class=\"line\">    <span class=\"meta\">@AttributeOverrides</span>(&#123;<span class=\"meta\">@AttributeOverride</span>(name=<span class=\"string\">\"country\"</span>, column=<span class=\"meta\">@Column</span>(name = <span class=\"string\">\"person_country\"</span>, length = <span class=\"number\">25</span>, nullable = <span class=\"keyword\">false</span>)),</span><br><span class=\"line\">                        <span class=\"meta\">@AttributeOverride</span>(name=<span class=\"string\">\"city\"</span>, column = <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"person_city\"</span>, length = <span class=\"number\">15</span>))&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Address address;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//setter、getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Address类如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Embeddable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114128959929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String country;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(length = <span class=\"number\">30</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String province;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(unique = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(length = <span class=\"number\">50</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String detail;</span><br><span class=\"line\">    <span class=\"comment\">//setter、getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成的数据表如下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://wumu.sciento.cn/img/20190810110901.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>可以看出我们的@AttributeOverrides和@AttributeOverride两个注解起作用了。</p>\n<h2 id=\"多层嵌入实体类属性\"><a href=\"#多层嵌入实体类属性\" class=\"headerlink\" title=\"多层嵌入实体类属性\"></a>多层嵌入实体类属性</h2><p>上面所有的例子都是使用两层实体类嵌入，其实这种实体类的嵌入映射是可以使用多层的，具体的例子如下。<br>我们新建立一个类Direction表示方位如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Embeddable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Direction</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer longitude;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer latitude;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Address如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Embeddable</span><br><span class=\"line\">public class Address implements Serializable&#123;</span><br><span class=\"line\">    private static final long serialVersionUID = 8849870114128959929L;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Column(nullable = false)</span><br><span class=\"line\">    private String country;</span><br><span class=\"line\">    @Column(length = 30)</span><br><span class=\"line\">    private String province;</span><br><span class=\"line\">    @Column(unique = true)</span><br><span class=\"line\">    private String city;</span><br><span class=\"line\">    @Column(length = 50)</span><br><span class=\"line\">    private String detail;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Embedded</span><br><span class=\"line\">    private Direction direction;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Person类如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114127659929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Embedded</span></span><br><span class=\"line\">    <span class=\"meta\">@AttributeOverrides</span>(&#123;<span class=\"meta\">@AttributeOverride</span>(name=<span class=\"string\">\"direction.latitude\"</span>, column=<span class=\"meta\">@Column</span>(name = <span class=\"string\">\"person_latitude\"</span>)),</span><br><span class=\"line\">                        <span class=\"meta\">@AttributeOverride</span>(name=<span class=\"string\">\"direction.longitude\"</span>, column = <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"person_longitude\"</span>))&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Address address;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成的数据表如下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://wumu.sciento.cn/img/20190810111050.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h1 id=\"在上面需要注意如下几点：\"><a href=\"#在上面需要注意如下几点：\" class=\"headerlink\" title=\"在上面需要注意如下几点：\"></a>在上面需要注意如下几点：</h1><p>在Person中定义Direction中的属性时，需要用”.”将所有相关的属性连接起来；<br>在Direction中longitude属性定义为not null，但是由于使用了@AttributeOverride注解，其中虽然没有定义null属性，但是这时使用的是默认的nullable属性，默认为true;</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://blog.csdn.net/lmy86263/article/details/52108130\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/lmy86263/article/details/52108130</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>在使用实体类生成对应的数据库表时，很多的时候都会遇到这种情况：在一个实体类中引用另外的实体类，一般遇上这种情况，我们使用@OneToOne、@OneToMany、@ManyToOne、@ManyToMany这4个注解比较多，但是好奇害死猫，除了这四个有没有别的使用情况，尤其是一个实体类要在多个不同的实体类中进行使用，而本身又不需要独立生成一个数据库表，这就是需要@Embedded、@Embeddable的时候了，下面分成4类来说明在一个实体类中引用另外的实体类的情况，具体的数据库环境是MySQL 5.7。</p>\n<p>使用的两个实体类如下：</p>\n<p>Address类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114128959929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String country;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String province;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String detail;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//setter、getter&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>Person类：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114127659929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Address address;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//setter、getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"两个注解全不使用\"><a href=\"#两个注解全不使用\" class=\"headerlink\" title=\"两个注解全不使用\"></a>两个注解全不使用</h1><p>当这两个注解都不使用时，那么两个实体类和上面的相同，那么生成的表结构如下： </p>\n<p><img src=\"http://wumu.sciento.cn/img/20190810110112.png\" alt=\"\"></p>\n<p>Address属性字段会映射成tinyblob类型的字段，这是用来存储不超过255字符的二进制字符串的数据类型，显然我们通常不会这么使用。</p>\n<h1 id=\"只使用-Embeddable\"><a href=\"#只使用-Embeddable\" class=\"headerlink\" title=\"只使用@Embeddable\"></a>只使用@Embeddable</h1><p>我们在Address实体类上加上@Embeddable注解，变成如下类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Embeddable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114128959929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String country;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String province;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String detail;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//setter、getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而Person实体类不变，生成的数据库表结构如下： </p>\n<p><img src=\"http://wumu.sciento.cn/img/20190810110330.png\" alt=\"\"></p>\n<p>可以看出这次是把Address中的字段映射成数据库列嵌入到Person表中了，而这些字段的类型和长度也使用默认值。如果我们在Address中的字段中设置列的相关属性，则会按照我们设定的值去生成，如下Address类：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Embeddable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114128959929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String country;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(length = <span class=\"number\">30</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String province;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(unique = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(length = <span class=\"number\">50</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String detail;</span><br><span class=\"line\">    <span class=\"comment\">//setter、getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成的表结构如下：</p>\n<p> <img src=\"http://wumu.sciento.cn/img/20190810110454.png\" alt=\"\"></p>\n<p>我们在Address中配置的属性全部成功映射到Person表中。</p>\n<h1 id=\"只使用-Embedded\"><a href=\"#只使用-Embedded\" class=\"headerlink\" title=\"只使用@Embedded\"></a>只使用@Embedded</h1><p>这里我们只在Person中使用@Embedded,如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114127659929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Embedded</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Address address;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//setter、getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Adddress类和最开始的不同POJO类相同，此时生成的表结构如下： </p>\n<p><img src=\"http://wumu.sciento.cn/img/20190810110619.png\" alt=\"\"></p>\n<p>可以看出这个表结构和在Address中只使用@Embeddable注解时相同，在进入深一步试验，我们在Address中加入列属性，但是不使用@Embeddable注解会发生什么？<br>Address类如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114128959929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String country;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(length = <span class=\"number\">30</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String province;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(unique = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(length = <span class=\"number\">50</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String detail;</span><br><span class=\"line\">    <span class=\"comment\">//setter、getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成数据表结构如下： </p>\n<p><img src=\"http://wumu.sciento.cn/img/20190810110728.png\" alt=\"\"></p>\n<p>所以只使用@Embedded和只使用@Embeddable产生的效果是相同的。</p>\n<h1 id=\"两个注解全使用\"><a href=\"#两个注解全使用\" class=\"headerlink\" title=\"两个注解全使用\"></a>两个注解全使用</h1><p>既然单独使用@Embedded或者只使用@Embeddable都会产生作用，那么这两个都使用效果也一定是一样的，我们平时也是这么用的。所以在这部分我们就不演示和上面相同的效果了，而是说两个深入的话题。</p>\n<h2 id=\"覆盖-Embeddable类中字段的列属性\"><a href=\"#覆盖-Embeddable类中字段的列属性\" class=\"headerlink\" title=\"覆盖@Embeddable类中字段的列属性\"></a>覆盖@Embeddable类中字段的列属性</h2><p>这里就要使用另外的两个注解@AttributeOverrides和@AttributeOverride，这两个注解是用来覆盖@Embeddable类中字段的属性的。</p>\n<p>@AttributeOverrides：里面只包含了@AttributeOverride类型数组；<br>@AttributeOverride：包含要覆盖的@Embeddable类中字段名name和新增的@Column字段的属性；<br>使用如下：<br>Person类如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114127659929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Embedded</span></span><br><span class=\"line\">    <span class=\"meta\">@AttributeOverrides</span>(&#123;<span class=\"meta\">@AttributeOverride</span>(name=<span class=\"string\">\"country\"</span>, column=<span class=\"meta\">@Column</span>(name = <span class=\"string\">\"person_country\"</span>, length = <span class=\"number\">25</span>, nullable = <span class=\"keyword\">false</span>)),</span><br><span class=\"line\">                        <span class=\"meta\">@AttributeOverride</span>(name=<span class=\"string\">\"city\"</span>, column = <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"person_city\"</span>, length = <span class=\"number\">15</span>))&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Address address;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//setter、getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Address类如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Embeddable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114128959929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String country;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(length = <span class=\"number\">30</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String province;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(unique = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(length = <span class=\"number\">50</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String detail;</span><br><span class=\"line\">    <span class=\"comment\">//setter、getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成的数据表如下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://wumu.sciento.cn/img/20190810110901.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>可以看出我们的@AttributeOverrides和@AttributeOverride两个注解起作用了。</p>\n<h2 id=\"多层嵌入实体类属性\"><a href=\"#多层嵌入实体类属性\" class=\"headerlink\" title=\"多层嵌入实体类属性\"></a>多层嵌入实体类属性</h2><p>上面所有的例子都是使用两层实体类嵌入，其实这种实体类的嵌入映射是可以使用多层的，具体的例子如下。<br>我们新建立一个类Direction表示方位如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Embeddable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Direction</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer longitude;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer latitude;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Address如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Embeddable</span><br><span class=\"line\">public class Address implements Serializable&#123;</span><br><span class=\"line\">    private static final long serialVersionUID = 8849870114128959929L;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Column(nullable = false)</span><br><span class=\"line\">    private String country;</span><br><span class=\"line\">    @Column(length = 30)</span><br><span class=\"line\">    private String province;</span><br><span class=\"line\">    @Column(unique = true)</span><br><span class=\"line\">    private String city;</span><br><span class=\"line\">    @Column(length = 50)</span><br><span class=\"line\">    private String detail;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Embedded</span><br><span class=\"line\">    private Direction direction;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Person类如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">8849870114127659929L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Column</span>(nullable = <span class=\"keyword\">false</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Embedded</span></span><br><span class=\"line\">    <span class=\"meta\">@AttributeOverrides</span>(&#123;<span class=\"meta\">@AttributeOverride</span>(name=<span class=\"string\">\"direction.latitude\"</span>, column=<span class=\"meta\">@Column</span>(name = <span class=\"string\">\"person_latitude\"</span>)),</span><br><span class=\"line\">                        <span class=\"meta\">@AttributeOverride</span>(name=<span class=\"string\">\"direction.longitude\"</span>, column = <span class=\"meta\">@Column</span>(name = <span class=\"string\">\"person_longitude\"</span>))&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Address address;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>生成的数据表如下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://wumu.sciento.cn/img/20190810111050.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h1 id=\"在上面需要注意如下几点：\"><a href=\"#在上面需要注意如下几点：\" class=\"headerlink\" title=\"在上面需要注意如下几点：\"></a>在上面需要注意如下几点：</h1><p>在Person中定义Direction中的属性时，需要用”.”将所有相关的属性连接起来；<br>在Direction中longitude属性定义为not null，但是由于使用了@AttributeOverride注解，其中虽然没有定义null属性，但是这时使用的是默认的nullable属性，默认为true;</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://blog.csdn.net/lmy86263/article/details/52108130\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/lmy86263/article/details/52108130</a></p>\n</blockquote>\n"},{"title":"事务隔离级别","date":"2020-10-19T06:00:00.000Z","_content":"\n\n\n\n## 事务隔离级别(图文详解)\n\n### 什么是事务?\n\n事务是逻辑上的一组操作，要么都执行，要么都不执行。\n\n事务最经典也经常被拿出来说例子就是转账了。假如小明要给小红转账1000元，这个转账会涉及到两个关键操作就是：将小明的余额减少1000元，将小红的余额增加1000元。万一在这两个操作之间突然出现错误比如银行系统崩溃，导致小明余额减少而小红的余额没有增加，这样就不对了。事务就是保证这两个关键操作要么都成功，要么都要失败。\n\n### 事务的特性(ACID)\n\n![事务的特性](https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/事务特性.png)\n\n\n1.  **原子性：** 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\n2.  **一致性：** 执行事务前后，数据保持一致，例如转账业务中，无论事务是否成功，转账者和收款人的总额应该是不变的；\n3.  **隔离性：** 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；\n4.  **持久性：** 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。\n\n### 并发事务带来的问题\n\n在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对统一数据进行操作）。并发虽然是必须的，但可能会导致以下的问题。\n\n- **脏读（Dirty read）:** 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。\n- **丢失修改（Lost to modify）:** 指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。\t例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\n- **不可重复读（Unrepeatableread）:** 指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。\n- **幻读（Phantom read）:** 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。\n\n**不可重复度和幻读区别：**\n\n不可重复读的重点是修改，幻读的重点在于新增或者删除。\n\n例1（同样的条件, 你读取过的数据, 再次读取出来发现值不一样了 ）：事务1中的A先生读取自己的工资为     1000的操作还没完成，事务2中的B先生就修改了A的工资为2000，导        致A再读自己的工资时工资变为  2000；这就是不可重复读。\n\n 例2（同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\n\n### 事务隔离级别\n\n**SQL 标准定义了四个隔离级别：**\n\n- **READ-UNCOMMITTED(读取未提交)：** 最低的隔离级别，允许读取尚未提交的数据变更，**可能会导致脏读、幻读或不可重复读**。\n- **READ-COMMITTED(读取已提交)：** 允许读取并发事务已经提交的数据，**可以阻止脏读，但是幻读或不可重复读仍有可能发生**。\n- **REPEATABLE-READ(可重复读)：**  对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，**可以阻止脏读和不可重复读，但幻读仍有可能发生**。\n- **SERIALIZABLE(可串行化)：** 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，**该级别可以防止脏读、不可重复读以及幻读**。\n\n----\n\n| 隔离级别 | 脏读 | 不可重复读 | 幻影读 |\n| :---: | :---: | :---:| :---: |\n| READ-UNCOMMITTED | √ | √ | √ |\n| READ-COMMITTED | × | √ | √ |\n| REPEATABLE-READ | × | × | √ |\n| SERIALIZABLE | × | × | × |\n\nMySQL InnoDB 存储引擎的默认支持的隔离级别是 **REPEATABLE-READ（可重读）**。我们可以通过`SELECT @@tx_isolation;`命令来查看,MySQL 8.0 该命令改为`SELECT @@transaction_isolation;`\n\n​```sql\nmysql> SELECT @@tx_isolation;\n+-----------------+\n| @@tx_isolation  |\n+-----------------+\n| REPEATABLE-READ |\n+-----------------+\n​```\n\n这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 **REPEATABLE-READ（可重读）** 事务隔离级别下，允许应用使用 Next-Key Lock 锁算法来避免幻读的产生。这与其他数据库系统(如 SQL Server)是不同的。所以说虽然 InnoDB 存储引擎的默认支持的隔离级别是 **REPEATABLE-READ（可重读）**，但是可以通过应用加锁读（例如 `select * from table for update` 语句）来保证不会产生幻读，而这个加锁度使用到的机制就是 Next-Key Lock 锁算法。从而达到了 SQL 标准的 **SERIALIZABLE(可串行化)** 隔离级别。\n\n因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是**READ-COMMITTED(读取提交内容):**，但是你要知道的是InnoDB 存储引擎默认使用 **REPEATABLE-READ（可重读）**并不会有任何性能损失。\n\nInnoDB 存储引擎在 **分布式事务** 的情况下一般会用到**SERIALIZABLE(可串行化)**隔离级别。\n\n### 实际情况演示\n\n在下面我会使用 2 个命令行mysql ，模拟多线程（多事务）对同一份数据的脏读问题。\n\nMySQL 命令行的默认配置中事务都是自动提交的，即执行SQL语句后就会马上执行 COMMIT 操作。如果要显式地开启一个事务需要使用命令：`START TARNSACTION`。\n\n我们可以通过下面的命令来设置隔离级别。\n\n​```sql\nSET [SESSION|GLOBAL] TRANSACTION ISOLATION LEVEL [READ UNCOMMITTED|READ COMMITTED|REPEATABLE READ|SERIALIZABLE]\n​```\n\n我们再来看一下我们在下面实际操作中使用到的一些并发控制语句:\n\n- `START TARNSACTION` |`BEGIN`：显式地开启一个事务。\n- `COMMIT`：提交事务，使得对数据库做的所有修改成为永久性。\n- `ROLLBACK`：回滚会结束用户的事务，并撤销正在进行的所有未提交的修改。\n\n#### 脏读(读未提交)\n\n<div align=\"center\">  \n<img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-31-1脏读(读未提交)实例.jpg\" width=\"800px\"/>\n</div>\n\n#### 避免脏读(读已提交)\n\n<div align=\"center\">  \n<img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-31-2读已提交实例.jpg\" width=\"800px\"/>\n</div>\n\n#### 不可重复读\n\n还是刚才上面的读已提交的图，虽然避免了读未提交，但是却出现了，一个事务还没有结束，就发生了 不可重复读问题。\n\n<div align=\"center\">  \n<img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-32-1不可重复读实例.jpg\"/>\n</div>\n\n#### 可重复读\n\n<div align=\"center\">  \n<img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-33-2可重复读.jpg\"/>\n</div>\n\n#### 防止幻读(可重复读)\n\n<div align=\"center\">  \n<img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-33防止幻读(使用可重复读).jpg\"/>\n</div>\n\n一个事务对数据库进行操作，这种操作的范围是数据库的全部行，然后第二个事务也在对这个数据库操作，这种操作可以是插入一行记录或删除一行记录，那么第一个是事务就会觉得自己出现了幻觉，怎么还有没有处理的记录呢? 或者 怎么多处理了一行记录呢?\n\n幻读和不可重复读有些相似之处 ，但是不可重复读的重点是修改，幻读的重点在于新增或者删除。\n\n### 参考\n\n- 《MySQL技术内幕：InnoDB存储引擎》\n- <https://dev.mysql.com/doc/refman/5.7/en/>\n- [Mysql 锁：灵魂七拷问](https://tech.youzan.com/seven-questions-about-the-lock-of-mysql/)\n- [Innodb 中的事务隔离级别和锁的关系](https://tech.meituan.com/2014/08/20/innodb-lock.html)\n","source":"_posts/java/事务隔离级别.md","raw":"---\ntitle: 事务隔离级别\ndate: 2020-10-19 14:00:00\n---\n\n\n\n\n## 事务隔离级别(图文详解)\n\n### 什么是事务?\n\n事务是逻辑上的一组操作，要么都执行，要么都不执行。\n\n事务最经典也经常被拿出来说例子就是转账了。假如小明要给小红转账1000元，这个转账会涉及到两个关键操作就是：将小明的余额减少1000元，将小红的余额增加1000元。万一在这两个操作之间突然出现错误比如银行系统崩溃，导致小明余额减少而小红的余额没有增加，这样就不对了。事务就是保证这两个关键操作要么都成功，要么都要失败。\n\n### 事务的特性(ACID)\n\n![事务的特性](https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/事务特性.png)\n\n\n1.  **原子性：** 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\n2.  **一致性：** 执行事务前后，数据保持一致，例如转账业务中，无论事务是否成功，转账者和收款人的总额应该是不变的；\n3.  **隔离性：** 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；\n4.  **持久性：** 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。\n\n### 并发事务带来的问题\n\n在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对统一数据进行操作）。并发虽然是必须的，但可能会导致以下的问题。\n\n- **脏读（Dirty read）:** 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。\n- **丢失修改（Lost to modify）:** 指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。\t例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\n- **不可重复读（Unrepeatableread）:** 指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。\n- **幻读（Phantom read）:** 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。\n\n**不可重复度和幻读区别：**\n\n不可重复读的重点是修改，幻读的重点在于新增或者删除。\n\n例1（同样的条件, 你读取过的数据, 再次读取出来发现值不一样了 ）：事务1中的A先生读取自己的工资为     1000的操作还没完成，事务2中的B先生就修改了A的工资为2000，导        致A再读自己的工资时工资变为  2000；这就是不可重复读。\n\n 例2（同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\n\n### 事务隔离级别\n\n**SQL 标准定义了四个隔离级别：**\n\n- **READ-UNCOMMITTED(读取未提交)：** 最低的隔离级别，允许读取尚未提交的数据变更，**可能会导致脏读、幻读或不可重复读**。\n- **READ-COMMITTED(读取已提交)：** 允许读取并发事务已经提交的数据，**可以阻止脏读，但是幻读或不可重复读仍有可能发生**。\n- **REPEATABLE-READ(可重复读)：**  对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，**可以阻止脏读和不可重复读，但幻读仍有可能发生**。\n- **SERIALIZABLE(可串行化)：** 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，**该级别可以防止脏读、不可重复读以及幻读**。\n\n----\n\n| 隔离级别 | 脏读 | 不可重复读 | 幻影读 |\n| :---: | :---: | :---:| :---: |\n| READ-UNCOMMITTED | √ | √ | √ |\n| READ-COMMITTED | × | √ | √ |\n| REPEATABLE-READ | × | × | √ |\n| SERIALIZABLE | × | × | × |\n\nMySQL InnoDB 存储引擎的默认支持的隔离级别是 **REPEATABLE-READ（可重读）**。我们可以通过`SELECT @@tx_isolation;`命令来查看,MySQL 8.0 该命令改为`SELECT @@transaction_isolation;`\n\n​```sql\nmysql> SELECT @@tx_isolation;\n+-----------------+\n| @@tx_isolation  |\n+-----------------+\n| REPEATABLE-READ |\n+-----------------+\n​```\n\n这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 **REPEATABLE-READ（可重读）** 事务隔离级别下，允许应用使用 Next-Key Lock 锁算法来避免幻读的产生。这与其他数据库系统(如 SQL Server)是不同的。所以说虽然 InnoDB 存储引擎的默认支持的隔离级别是 **REPEATABLE-READ（可重读）**，但是可以通过应用加锁读（例如 `select * from table for update` 语句）来保证不会产生幻读，而这个加锁度使用到的机制就是 Next-Key Lock 锁算法。从而达到了 SQL 标准的 **SERIALIZABLE(可串行化)** 隔离级别。\n\n因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是**READ-COMMITTED(读取提交内容):**，但是你要知道的是InnoDB 存储引擎默认使用 **REPEATABLE-READ（可重读）**并不会有任何性能损失。\n\nInnoDB 存储引擎在 **分布式事务** 的情况下一般会用到**SERIALIZABLE(可串行化)**隔离级别。\n\n### 实际情况演示\n\n在下面我会使用 2 个命令行mysql ，模拟多线程（多事务）对同一份数据的脏读问题。\n\nMySQL 命令行的默认配置中事务都是自动提交的，即执行SQL语句后就会马上执行 COMMIT 操作。如果要显式地开启一个事务需要使用命令：`START TARNSACTION`。\n\n我们可以通过下面的命令来设置隔离级别。\n\n​```sql\nSET [SESSION|GLOBAL] TRANSACTION ISOLATION LEVEL [READ UNCOMMITTED|READ COMMITTED|REPEATABLE READ|SERIALIZABLE]\n​```\n\n我们再来看一下我们在下面实际操作中使用到的一些并发控制语句:\n\n- `START TARNSACTION` |`BEGIN`：显式地开启一个事务。\n- `COMMIT`：提交事务，使得对数据库做的所有修改成为永久性。\n- `ROLLBACK`：回滚会结束用户的事务，并撤销正在进行的所有未提交的修改。\n\n#### 脏读(读未提交)\n\n<div align=\"center\">  \n<img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-31-1脏读(读未提交)实例.jpg\" width=\"800px\"/>\n</div>\n\n#### 避免脏读(读已提交)\n\n<div align=\"center\">  \n<img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-31-2读已提交实例.jpg\" width=\"800px\"/>\n</div>\n\n#### 不可重复读\n\n还是刚才上面的读已提交的图，虽然避免了读未提交，但是却出现了，一个事务还没有结束，就发生了 不可重复读问题。\n\n<div align=\"center\">  \n<img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-32-1不可重复读实例.jpg\"/>\n</div>\n\n#### 可重复读\n\n<div align=\"center\">  \n<img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-33-2可重复读.jpg\"/>\n</div>\n\n#### 防止幻读(可重复读)\n\n<div align=\"center\">  \n<img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-33防止幻读(使用可重复读).jpg\"/>\n</div>\n\n一个事务对数据库进行操作，这种操作的范围是数据库的全部行，然后第二个事务也在对这个数据库操作，这种操作可以是插入一行记录或删除一行记录，那么第一个是事务就会觉得自己出现了幻觉，怎么还有没有处理的记录呢? 或者 怎么多处理了一行记录呢?\n\n幻读和不可重复读有些相似之处 ，但是不可重复读的重点是修改，幻读的重点在于新增或者删除。\n\n### 参考\n\n- 《MySQL技术内幕：InnoDB存储引擎》\n- <https://dev.mysql.com/doc/refman/5.7/en/>\n- [Mysql 锁：灵魂七拷问](https://tech.youzan.com/seven-questions-about-the-lock-of-mysql/)\n- [Innodb 中的事务隔离级别和锁的关系](https://tech.meituan.com/2014/08/20/innodb-lock.html)\n","slug":"java/事务隔离级别","published":1,"updated":"2020-10-18T05:29:45.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbloi006k4tjeu6tabncz","content":"<h2 id=\"事务隔离级别-图文详解\"><a href=\"#事务隔离级别-图文详解\" class=\"headerlink\" title=\"事务隔离级别(图文详解)\"></a>事务隔离级别(图文详解)</h2><h3 id=\"什么是事务\"><a href=\"#什么是事务\" class=\"headerlink\" title=\"什么是事务?\"></a>什么是事务?</h3><p>事务是逻辑上的一组操作，要么都执行，要么都不执行。</p>\n<p>事务最经典也经常被拿出来说例子就是转账了。假如小明要给小红转账1000元，这个转账会涉及到两个关键操作就是：将小明的余额减少1000元，将小红的余额增加1000元。万一在这两个操作之间突然出现错误比如银行系统崩溃，导致小明余额减少而小红的余额没有增加，这样就不对了。事务就是保证这两个关键操作要么都成功，要么都要失败。</p>\n<h3 id=\"事务的特性-ACID\"><a href=\"#事务的特性-ACID\" class=\"headerlink\" title=\"事务的特性(ACID)\"></a>事务的特性(ACID)</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/事务特性.png\" alt=\"事务的特性\" title=\"\">\n                </div>\n                <div class=\"image-caption\">事务的特性</div>\n            </figure>\n<ol>\n<li><strong>原子性：</strong> 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</li>\n<li><strong>一致性：</strong> 执行事务前后，数据保持一致，例如转账业务中，无论事务是否成功，转账者和收款人的总额应该是不变的；</li>\n<li><strong>隔离性：</strong> 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；</li>\n<li><strong>持久性：</strong> 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</li>\n</ol>\n<h3 id=\"并发事务带来的问题\"><a href=\"#并发事务带来的问题\" class=\"headerlink\" title=\"并发事务带来的问题\"></a>并发事务带来的问题</h3><p>在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对统一数据进行操作）。并发虽然是必须的，但可能会导致以下的问题。</p>\n<ul>\n<li><strong>脏读（Dirty read）:</strong> 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。</li>\n<li><strong>丢失修改（Lost to modify）:</strong> 指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。    例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。</li>\n<li><strong>不可重复读（Unrepeatableread）:</strong> 指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</li>\n<li><strong>幻读（Phantom read）:</strong> 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</li>\n</ul>\n<p><strong>不可重复度和幻读区别：</strong></p>\n<p>不可重复读的重点是修改，幻读的重点在于新增或者删除。</p>\n<p>例1（同样的条件, 你读取过的数据, 再次读取出来发现值不一样了 ）：事务1中的A先生读取自己的工资为     1000的操作还没完成，事务2中的B先生就修改了A的工资为2000，导        致A再读自己的工资时工资变为  2000；这就是不可重复读。</p>\n<p> 例2（同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。</p>\n<h3 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h3><p><strong>SQL 标准定义了四个隔离级别：</strong></p>\n<ul>\n<li><strong>READ-UNCOMMITTED(读取未提交)：</strong> 最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能会导致脏读、幻读或不可重复读</strong>。</li>\n<li><strong>READ-COMMITTED(读取已提交)：</strong> 允许读取并发事务已经提交的数据，<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong>。</li>\n<li><strong>REPEATABLE-READ(可重复读)：</strong>  对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生</strong>。</li>\n<li><strong>SERIALIZABLE(可串行化)：</strong> 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读</strong>。</li>\n</ul>\n<hr>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">隔离级别</th>\n<th style=\"text-align:center\">脏读</th>\n<th style=\"text-align:center\">不可重复读</th>\n<th style=\"text-align:center\">幻影读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">READ-UNCOMMITTED</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">READ-COMMITTED</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">REPEATABLE-READ</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SERIALIZABLE</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n</tbody>\n</table>\n<p>MySQL InnoDB 存储引擎的默认支持的隔离级别是 <strong>REPEATABLE-READ（可重读）</strong>。我们可以通过<code>SELECT @@tx_isolation;</code>命令来查看,MySQL 8.0 该命令改为<code>SELECT @@transaction_isolation;</code></p>\n<p>​<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT @@tx_isolation;</span><br><span class=\"line\">+<span class=\"comment\">-----------------+</span></span><br><span class=\"line\">| @@tx_isolation  |</span><br><span class=\"line\">+<span class=\"comment\">-----------------+</span></span><br><span class=\"line\">| REPEATABLE-READ |</span><br><span class=\"line\">+<span class=\"comment\">-----------------+</span></span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 <strong>REPEATABLE-READ（可重读）</strong> 事务隔离级别下，允许应用使用 Next-Key Lock 锁算法来避免幻读的产生。这与其他数据库系统(如 SQL Server)是不同的。所以说虽然 InnoDB 存储引擎的默认支持的隔离级别是 <strong>REPEATABLE-READ（可重读）</strong>，但是可以通过应用加锁读（例如 <code>select * from table for update</code> 语句）来保证不会产生幻读，而这个加锁度使用到的机制就是 Next-Key Lock 锁算法。从而达到了 SQL 标准的 <strong>SERIALIZABLE(可串行化)</strong> 隔离级别。</p>\n<p>因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是<strong>READ-COMMITTED(读取提交内容):</strong>，但是你要知道的是InnoDB 存储引擎默认使用 <strong>REPEATABLE-READ（可重读）</strong>并不会有任何性能损失。</p>\n<p>InnoDB 存储引擎在 <strong>分布式事务</strong> 的情况下一般会用到<strong>SERIALIZABLE(可串行化)</strong>隔离级别。</p>\n<h3 id=\"实际情况演示\"><a href=\"#实际情况演示\" class=\"headerlink\" title=\"实际情况演示\"></a>实际情况演示</h3><p>在下面我会使用 2 个命令行mysql ，模拟多线程（多事务）对同一份数据的脏读问题。</p>\n<p>MySQL 命令行的默认配置中事务都是自动提交的，即执行SQL语句后就会马上执行 COMMIT 操作。如果要显式地开启一个事务需要使用命令：<code>START TARNSACTION</code>。</p>\n<p>我们可以通过下面的命令来设置隔离级别。</p>\n<p>​<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span> [<span class=\"keyword\">SESSION</span>|<span class=\"keyword\">GLOBAL</span>] <span class=\"keyword\">TRANSACTION</span> <span class=\"keyword\">ISOLATION</span> <span class=\"keyword\">LEVEL</span> [<span class=\"keyword\">READ</span> UNCOMMITTED|<span class=\"keyword\">READ</span> COMMITTED|REPEATABLE <span class=\"keyword\">READ</span>|<span class=\"keyword\">SERIALIZABLE</span>]</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>我们再来看一下我们在下面实际操作中使用到的一些并发控制语句:</p>\n<ul>\n<li><code>START TARNSACTION</code> |<code>BEGIN</code>：显式地开启一个事务。</li>\n<li><code>COMMIT</code>：提交事务，使得对数据库做的所有修改成为永久性。</li>\n<li><code>ROLLBACK</code>：回滚会结束用户的事务，并撤销正在进行的所有未提交的修改。</li>\n</ul>\n<h4 id=\"脏读-读未提交\"><a href=\"#脏读-读未提交\" class=\"headerlink\" title=\"脏读(读未提交)\"></a>脏读(读未提交)</h4><div align=\"center\"><br><img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-31-1脏读(读未提交)实例.jpg\" width=\"800px\"><br></div>\n\n<h4 id=\"避免脏读-读已提交\"><a href=\"#避免脏读-读已提交\" class=\"headerlink\" title=\"避免脏读(读已提交)\"></a>避免脏读(读已提交)</h4><div align=\"center\"><br><img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-31-2读已提交实例.jpg\" width=\"800px\"><br></div>\n\n<h4 id=\"不可重复读\"><a href=\"#不可重复读\" class=\"headerlink\" title=\"不可重复读\"></a>不可重复读</h4><p>还是刚才上面的读已提交的图，虽然避免了读未提交，但是却出现了，一个事务还没有结束，就发生了 不可重复读问题。</p>\n<div align=\"center\"><br><img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-32-1不可重复读实例.jpg\"><br></div>\n\n<h4 id=\"可重复读\"><a href=\"#可重复读\" class=\"headerlink\" title=\"可重复读\"></a>可重复读</h4><div align=\"center\"><br><img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-33-2可重复读.jpg\"><br></div>\n\n<h4 id=\"防止幻读-可重复读\"><a href=\"#防止幻读-可重复读\" class=\"headerlink\" title=\"防止幻读(可重复读)\"></a>防止幻读(可重复读)</h4><div align=\"center\"><br><img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-33防止幻读(使用可重复读).jpg\"><br></div>\n\n<p>一个事务对数据库进行操作，这种操作的范围是数据库的全部行，然后第二个事务也在对这个数据库操作，这种操作可以是插入一行记录或删除一行记录，那么第一个是事务就会觉得自己出现了幻觉，怎么还有没有处理的记录呢? 或者 怎么多处理了一行记录呢?</p>\n<p>幻读和不可重复读有些相似之处 ，但是不可重复读的重点是修改，幻读的重点在于新增或者删除。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li>《MySQL技术内幕：InnoDB存储引擎》</li>\n<li><a href=\"https://dev.mysql.com/doc/refman/5.7/en/\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/doc/refman/5.7/en/</a></li>\n<li><a href=\"https://tech.youzan.com/seven-questions-about-the-lock-of-mysql/\" target=\"_blank\" rel=\"noopener\">Mysql 锁：灵魂七拷问</a></li>\n<li><a href=\"https://tech.meituan.com/2014/08/20/innodb-lock.html\" target=\"_blank\" rel=\"noopener\">Innodb 中的事务隔离级别和锁的关系</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"事务隔离级别-图文详解\"><a href=\"#事务隔离级别-图文详解\" class=\"headerlink\" title=\"事务隔离级别(图文详解)\"></a>事务隔离级别(图文详解)</h2><h3 id=\"什么是事务\"><a href=\"#什么是事务\" class=\"headerlink\" title=\"什么是事务?\"></a>什么是事务?</h3><p>事务是逻辑上的一组操作，要么都执行，要么都不执行。</p>\n<p>事务最经典也经常被拿出来说例子就是转账了。假如小明要给小红转账1000元，这个转账会涉及到两个关键操作就是：将小明的余额减少1000元，将小红的余额增加1000元。万一在这两个操作之间突然出现错误比如银行系统崩溃，导致小明余额减少而小红的余额没有增加，这样就不对了。事务就是保证这两个关键操作要么都成功，要么都要失败。</p>\n<h3 id=\"事务的特性-ACID\"><a href=\"#事务的特性-ACID\" class=\"headerlink\" title=\"事务的特性(ACID)\"></a>事务的特性(ACID)</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/事务特性.png\" alt=\"事务的特性\" title=\"\">\n                </div>\n                <div class=\"image-caption\">事务的特性</div>\n            </figure>\n<ol>\n<li><strong>原子性：</strong> 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</li>\n<li><strong>一致性：</strong> 执行事务前后，数据保持一致，例如转账业务中，无论事务是否成功，转账者和收款人的总额应该是不变的；</li>\n<li><strong>隔离性：</strong> 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；</li>\n<li><strong>持久性：</strong> 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</li>\n</ol>\n<h3 id=\"并发事务带来的问题\"><a href=\"#并发事务带来的问题\" class=\"headerlink\" title=\"并发事务带来的问题\"></a>并发事务带来的问题</h3><p>在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对统一数据进行操作）。并发虽然是必须的，但可能会导致以下的问题。</p>\n<ul>\n<li><strong>脏读（Dirty read）:</strong> 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。</li>\n<li><strong>丢失修改（Lost to modify）:</strong> 指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。    例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。</li>\n<li><strong>不可重复读（Unrepeatableread）:</strong> 指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</li>\n<li><strong>幻读（Phantom read）:</strong> 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</li>\n</ul>\n<p><strong>不可重复度和幻读区别：</strong></p>\n<p>不可重复读的重点是修改，幻读的重点在于新增或者删除。</p>\n<p>例1（同样的条件, 你读取过的数据, 再次读取出来发现值不一样了 ）：事务1中的A先生读取自己的工资为     1000的操作还没完成，事务2中的B先生就修改了A的工资为2000，导        致A再读自己的工资时工资变为  2000；这就是不可重复读。</p>\n<p> 例2（同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。</p>\n<h3 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h3><p><strong>SQL 标准定义了四个隔离级别：</strong></p>\n<ul>\n<li><strong>READ-UNCOMMITTED(读取未提交)：</strong> 最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能会导致脏读、幻读或不可重复读</strong>。</li>\n<li><strong>READ-COMMITTED(读取已提交)：</strong> 允许读取并发事务已经提交的数据，<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong>。</li>\n<li><strong>REPEATABLE-READ(可重复读)：</strong>  对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生</strong>。</li>\n<li><strong>SERIALIZABLE(可串行化)：</strong> 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读</strong>。</li>\n</ul>\n<hr>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">隔离级别</th>\n<th style=\"text-align:center\">脏读</th>\n<th style=\"text-align:center\">不可重复读</th>\n<th style=\"text-align:center\">幻影读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">READ-UNCOMMITTED</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">READ-COMMITTED</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">REPEATABLE-READ</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SERIALIZABLE</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n<td style=\"text-align:center\">×</td>\n</tr>\n</tbody>\n</table>\n<p>MySQL InnoDB 存储引擎的默认支持的隔离级别是 <strong>REPEATABLE-READ（可重读）</strong>。我们可以通过<code>SELECT @@tx_isolation;</code>命令来查看,MySQL 8.0 该命令改为<code>SELECT @@transaction_isolation;</code></p>\n<p>​<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT @@tx_isolation;</span><br><span class=\"line\">+<span class=\"comment\">-----------------+</span></span><br><span class=\"line\">| @@tx_isolation  |</span><br><span class=\"line\">+<span class=\"comment\">-----------------+</span></span><br><span class=\"line\">| REPEATABLE-READ |</span><br><span class=\"line\">+<span class=\"comment\">-----------------+</span></span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 <strong>REPEATABLE-READ（可重读）</strong> 事务隔离级别下，允许应用使用 Next-Key Lock 锁算法来避免幻读的产生。这与其他数据库系统(如 SQL Server)是不同的。所以说虽然 InnoDB 存储引擎的默认支持的隔离级别是 <strong>REPEATABLE-READ（可重读）</strong>，但是可以通过应用加锁读（例如 <code>select * from table for update</code> 语句）来保证不会产生幻读，而这个加锁度使用到的机制就是 Next-Key Lock 锁算法。从而达到了 SQL 标准的 <strong>SERIALIZABLE(可串行化)</strong> 隔离级别。</p>\n<p>因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是<strong>READ-COMMITTED(读取提交内容):</strong>，但是你要知道的是InnoDB 存储引擎默认使用 <strong>REPEATABLE-READ（可重读）</strong>并不会有任何性能损失。</p>\n<p>InnoDB 存储引擎在 <strong>分布式事务</strong> 的情况下一般会用到<strong>SERIALIZABLE(可串行化)</strong>隔离级别。</p>\n<h3 id=\"实际情况演示\"><a href=\"#实际情况演示\" class=\"headerlink\" title=\"实际情况演示\"></a>实际情况演示</h3><p>在下面我会使用 2 个命令行mysql ，模拟多线程（多事务）对同一份数据的脏读问题。</p>\n<p>MySQL 命令行的默认配置中事务都是自动提交的，即执行SQL语句后就会马上执行 COMMIT 操作。如果要显式地开启一个事务需要使用命令：<code>START TARNSACTION</code>。</p>\n<p>我们可以通过下面的命令来设置隔离级别。</p>\n<p>​<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span> [<span class=\"keyword\">SESSION</span>|<span class=\"keyword\">GLOBAL</span>] <span class=\"keyword\">TRANSACTION</span> <span class=\"keyword\">ISOLATION</span> <span class=\"keyword\">LEVEL</span> [<span class=\"keyword\">READ</span> UNCOMMITTED|<span class=\"keyword\">READ</span> COMMITTED|REPEATABLE <span class=\"keyword\">READ</span>|<span class=\"keyword\">SERIALIZABLE</span>]</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<p>我们再来看一下我们在下面实际操作中使用到的一些并发控制语句:</p>\n<ul>\n<li><code>START TARNSACTION</code> |<code>BEGIN</code>：显式地开启一个事务。</li>\n<li><code>COMMIT</code>：提交事务，使得对数据库做的所有修改成为永久性。</li>\n<li><code>ROLLBACK</code>：回滚会结束用户的事务，并撤销正在进行的所有未提交的修改。</li>\n</ul>\n<h4 id=\"脏读-读未提交\"><a href=\"#脏读-读未提交\" class=\"headerlink\" title=\"脏读(读未提交)\"></a>脏读(读未提交)</h4><div align=\"center\"><br><img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-31-1脏读(读未提交)实例.jpg\" width=\"800px\"><br></div>\n\n<h4 id=\"避免脏读-读已提交\"><a href=\"#避免脏读-读已提交\" class=\"headerlink\" title=\"避免脏读(读已提交)\"></a>避免脏读(读已提交)</h4><div align=\"center\"><br><img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-31-2读已提交实例.jpg\" width=\"800px\"><br></div>\n\n<h4 id=\"不可重复读\"><a href=\"#不可重复读\" class=\"headerlink\" title=\"不可重复读\"></a>不可重复读</h4><p>还是刚才上面的读已提交的图，虽然避免了读未提交，但是却出现了，一个事务还没有结束，就发生了 不可重复读问题。</p>\n<div align=\"center\"><br><img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-32-1不可重复读实例.jpg\"><br></div>\n\n<h4 id=\"可重复读\"><a href=\"#可重复读\" class=\"headerlink\" title=\"可重复读\"></a>可重复读</h4><div align=\"center\"><br><img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-33-2可重复读.jpg\"><br></div>\n\n<h4 id=\"防止幻读-可重复读\"><a href=\"#防止幻读-可重复读\" class=\"headerlink\" title=\"防止幻读(可重复读)\"></a>防止幻读(可重复读)</h4><div align=\"center\"><br><img src=\"https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-33防止幻读(使用可重复读).jpg\"><br></div>\n\n<p>一个事务对数据库进行操作，这种操作的范围是数据库的全部行，然后第二个事务也在对这个数据库操作，这种操作可以是插入一行记录或删除一行记录，那么第一个是事务就会觉得自己出现了幻觉，怎么还有没有处理的记录呢? 或者 怎么多处理了一行记录呢?</p>\n<p>幻读和不可重复读有些相似之处 ，但是不可重复读的重点是修改，幻读的重点在于新增或者删除。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li>《MySQL技术内幕：InnoDB存储引擎》</li>\n<li><a href=\"https://dev.mysql.com/doc/refman/5.7/en/\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/doc/refman/5.7/en/</a></li>\n<li><a href=\"https://tech.youzan.com/seven-questions-about-the-lock-of-mysql/\" target=\"_blank\" rel=\"noopener\">Mysql 锁：灵魂七拷问</a></li>\n<li><a href=\"https://tech.meituan.com/2014/08/20/innodb-lock.html\" target=\"_blank\" rel=\"noopener\">Innodb 中的事务隔离级别和锁的关系</a></li>\n</ul>\n"},{"title":"mybatis拦截器","date":"2020-09-19T08:00:00.000Z","_content":"\n# 基本知识\n\n## 拦截器注解的规则：\n\n具体规则如下：\n\n```css\n@Intercepts({\n    @Signature(type = StatementHandler.class, method = \"query\", args = {Statement.class, ResultHandler.class}),\n    @Signature(type = StatementHandler.class, method = \"update\", args = {Statement.class}),\n    @Signature(type = StatementHandler.class, method = \"batch\", args = {Statement.class})\n})\n```\n\n1. @Intercepts：标识该类是一个拦截器；\n2. @Signature：指明自定义拦截器需要拦截哪一个类型，哪一个方法；\n    2.1 type：对应四种类型中的一种；\n    2.2 method：对应接口中的哪类方法（因为可能存在重载方法）；\n    2.3 args：对应哪一个方法；\n\n> **5. 拦截器可拦截的方法：**\n\n| 拦截的类         | 拦截的方法                                                   |\n| ---------------- | ------------------------------------------------------------ |\n| Executor         | update, query, flushStatements, commit, rollback,getTransaction, close, isClosed |\n| ParameterHandler | getParameterObject, setParameters                            |\n| StatementHandler | prepare, parameterize, batch, update, query                  |\n| ResultSetHandler | handleResultSets, handleOutputParameters                     |\n\n```java\n@Intercepts({@Signature(type = Executor.class, method = \"query\",\n        args = {MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class})})\npublic class TestInterceptor implements Interceptor {\n   public Object intercept(Invocation invocation) throws Throwable {\n     Object target = invocation.getTarget(); //被代理对象\n     Method method = invocation.getMethod(); //代理方法\n     Object[] args = invocation.getArgs(); //方法参数\n     // do something ...... 方法拦截前执行代码块\n     Object result = invocation.proceed();\n     // do something .......方法拦截后执行代码块\n     return result;\n   }\n   public Object plugin(Object target) {\n     return Plugin.wrap(target, this);\n   }\n}\n```\n\n## setProperties方法\n\n如果我们的拦截器需要一些变量对象，而且这个对象是支持可配置的。\n 类似于Spring中的@Value(\"${}\")从[application.properties](https://links.jianshu.com/go?to=http%3A%2F%2Fapplication.properties)文件中获取。\n 使用方法：\n\n```xml\n<plugin interceptor=\"com.plugin.mybatis.MyInterceptor\">\n     <property name=\"username\" value=\"xxx\"/>\n     <property name=\"password\" value=\"xxx\"/>\n</plugin>\n```\n\n## plugin方法\n\n这个方法的作用是就是让mybatis判断，是否要进行拦截，然后做出决定是否生成一个代理。\n\n```kotlin\n    @Override\n    public Object plugin(Object target) {\n        if (target instanceof StatementHandler) {\n            return Plugin.wrap(target, this);\n        }\n        return target;\n    }\n```\n\n**需要注意的是：每经过一个拦截器对象都会调用插件的plugin方法，也就是说，该方法会调用4次。根据@Intercepts注解来决定是否进行拦截处理。**\n\n> 问题1：**Plugin.wrap(target, this)**方法的作用？\n\n解答：判断是否拦截这个类型对象（根据@Intercepts注解决定），然后决定是返回一个代理对象还是返回原对象。\n\n故我们在实现plugin方法时，要判断一下目标类型，是本插件要拦截的对象时才执行Plugin.wrap方法，否则的话，直接返回目标本身。\n\n> 问题2：拦截器代理对象可能经过多层代理，如何获取到真实的拦截器对象？\n\n```dart\n    /**\n     * <p>\n     * 获得真正的处理对象,可能多层代理.\n     * </p>\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T realTarget(Object target) {\n        if (Proxy.isProxyClass(target.getClass())) {\n            MetaObject metaObject = SystemMetaObject.forObject(target);\n            return realTarget(metaObject.getValue(\"h.target\"));\n        }\n        return (T) target;\n```\n\n# 配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n\n<configuration>\n    <properties resource=\"top/sciento/wumu/jdbc/mybatis/db.properties\"></properties>\n    <plugins>\n        <plugin interceptor=\"top.sciento.wumu.jdbc.mybatis.plugin.ExamplePlugin\">\n\n        </plugin>\n        <plugin interceptor=\"top.sciento.wumu.jdbc.mybatis.plugin.PagePlugin\"/>\n    </plugins>\n    <environments default=\"development\">\n        <environment id=\"development\">\n            <transactionManager type=\"JDBC\"/>\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"${driver}\"/>\n                <property name=\"url\" value=\"${url}\"/>\n                <property name=\"username\" value=\"${username}\"/>\n                <property name=\"password\" value=\"${password}\"/>\n            </dataSource>\n        </environment>\n    </environments>\n\n    <mappers>\n        <package name=\"top.sciento.wumu.jdbc.mybatis.mapper\"/>\n    </mappers>\n</configuration>\n```\n\n# 实战\n\n```java\n\n@Intercepts({@Signature(\n        type= Executor.class,\n        method = \"update\",\n        args = {MappedStatement.class,Object.class})})\npublic class ExamplePlugin implements Interceptor {\n    public Object intercept(Invocation invocation) throws Throwable {\n        System.out.println(\"被拦截方法执行之前，做的辅助服务······\");\n        Object[] args = invocation.getArgs();\n        Method method = invocation.getMethod();\n        Object target  = invocation.getTarget();\n        MappedStatement mappedStatement = (MappedStatement) args[0];\n\n        Object proceed = invocation.proceed();\n        System.out.println(\"被拦截方法执行之后，做的辅助服务······\");\n        return proceed;\n    }\n    public Object plugin(Object target) {\n        return Plugin.wrap(target, this);\n    }\n    public void setProperties(Properties properties) {\n    }\n}\n\n```\n\n```java\n@Slf4j\n@Intercepts(\n        @Signature(type = Executor.class, method = \"query\", args = {MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class})\n)\npublic class PagePlugin implements Interceptor {\n    @Override\n    public Object intercept(Invocation invocation) throws Throwable {\n        Object[] args = invocation.getArgs();\n        MappedStatement mappedStatement = (MappedStatement) args[0];\n\n        //获取参数\n        Object param = invocation.getArgs()[1];\n        BoundSql boundSql = mappedStatement.getBoundSql(param);\n        Object parameterObject = boundSql.getParameterObject();\n\n        /**\n         * 判断是否是继承PageVo来判断是否需要进行分页\n         */\n        if (parameterObject instanceof Page) {\n            //强转 为了拿到分页数据\n            Page pagevo = (Page) param;\n            String sql = boundSql.getSql();\n\n\n            //获取相关配置\n            Configuration config = mappedStatement.getConfiguration();\n            Connection connection = config.getEnvironment().getDataSource().getConnection();\n\n            //拼接查询当前条件的sql的总条数\n            String countSql = \"select count(*) from (\" + sql + \") a\";\n            PreparedStatement preparedStatement = connection.prepareStatement(countSql);\n            BoundSql countBoundSql = new BoundSql(config, countSql, boundSql.getParameterMappings(), boundSql.getParameterObject());\n            ParameterHandler parameterHandler = new DefaultParameterHandler(mappedStatement, parameterObject, countBoundSql);\n            parameterHandler.setParameters(preparedStatement);\n            //执行获得总条数\n            ResultSet rs = preparedStatement.executeQuery();\n            int count = 0;\n            if (rs.next()) {\n                count = rs.getInt(1);\n            }\n\n\n            //拼接分页sql\n            String pageSql = sql + \" limit \" + pagevo.getOffset() + \" , \" + pagevo.getSize();\n            //重新执行新的sql\n            doNewSql(invocation, pageSql);\n\n            Object result = invocation.proceed();\n            connection.close();\n            // 这是使用了两种不同的方式返回最终的结果\n            pagevo.setList((List)result);\n            pagevo.setTotal(count);\n            //处理新的结构\n            PageResult<?> pageResult = new PageResult<List>((List) result,pagevo.getPage(), pagevo.getSize(), count );\n            return new ArrayList<PageResult>(){{add(pageResult);}} ;\n        }\n        return invocation.proceed();\n    }\n\n    private void doNewSql(Invocation invocation, String sql){\n        final Object[] args = invocation.getArgs();\n        MappedStatement statement = (MappedStatement) args[0];\n        Object parameterObject = args[1];\n        BoundSql boundSql = statement.getBoundSql(parameterObject);\n        MappedStatement newStatement = newMappedStatement(statement, new BoundSqlSqlSource(boundSql));\n        MetaObject msObject = MetaObject.forObject(newStatement, new DefaultObjectFactory(), new DefaultObjectWrapperFactory(), new DefaultReflectorFactory());\n        msObject.setValue(\"sqlSource.boundSql.sql\", sql);\n        args[0] = newStatement;\n    }\n\n    private MappedStatement newMappedStatement(MappedStatement ms, SqlSource newSqlSource) {\n        MappedStatement.Builder builder =\n                new MappedStatement.Builder(ms.getConfiguration(), ms.getId(), newSqlSource, ms.getSqlCommandType());\n        builder.resource(ms.getResource());\n        builder.fetchSize(ms.getFetchSize());\n        builder.statementType(ms.getStatementType());\n        builder.keyGenerator(ms.getKeyGenerator());\n        if (ms.getKeyProperties() != null && ms.getKeyProperties().length != 0) {\n            StringBuilder keyProperties = new StringBuilder();\n            for (String keyProperty : ms.getKeyProperties()) {\n                keyProperties.append(keyProperty).append(\",\");\n            }\n            keyProperties.delete(keyProperties.length() - 1, keyProperties.length());\n            builder.keyProperty(keyProperties.toString());\n        }\n        builder.timeout(ms.getTimeout());\n        builder.parameterMap(ms.getParameterMap());\n        builder.resultMaps(ms.getResultMaps());\n        builder.resultSetType(ms.getResultSetType());\n        builder.cache(ms.getCache());\n        builder.flushCacheRequired(ms.isFlushCacheRequired());\n        builder.useCache(ms.isUseCache());\n\n        return builder.build();\n    }\n    /**\n     * 新的SqlSource需要实现\n     */\n    class BoundSqlSqlSource implements SqlSource {\n        private BoundSql boundSql;\n\n        public BoundSqlSqlSource(BoundSql boundSql) {\n            this.boundSql = boundSql;\n        }\n\n        @Override\n        public BoundSql getBoundSql(Object parameterObject) {\n            return boundSql;\n        }\n    }\n}\n```\n\n","source":"_posts/mybatis/mybaits拦截器.md","raw":"---\ntitle: mybatis拦截器\ndate: 2020-9-19 16:00:00\n---\n\n# 基本知识\n\n## 拦截器注解的规则：\n\n具体规则如下：\n\n```css\n@Intercepts({\n    @Signature(type = StatementHandler.class, method = \"query\", args = {Statement.class, ResultHandler.class}),\n    @Signature(type = StatementHandler.class, method = \"update\", args = {Statement.class}),\n    @Signature(type = StatementHandler.class, method = \"batch\", args = {Statement.class})\n})\n```\n\n1. @Intercepts：标识该类是一个拦截器；\n2. @Signature：指明自定义拦截器需要拦截哪一个类型，哪一个方法；\n    2.1 type：对应四种类型中的一种；\n    2.2 method：对应接口中的哪类方法（因为可能存在重载方法）；\n    2.3 args：对应哪一个方法；\n\n> **5. 拦截器可拦截的方法：**\n\n| 拦截的类         | 拦截的方法                                                   |\n| ---------------- | ------------------------------------------------------------ |\n| Executor         | update, query, flushStatements, commit, rollback,getTransaction, close, isClosed |\n| ParameterHandler | getParameterObject, setParameters                            |\n| StatementHandler | prepare, parameterize, batch, update, query                  |\n| ResultSetHandler | handleResultSets, handleOutputParameters                     |\n\n```java\n@Intercepts({@Signature(type = Executor.class, method = \"query\",\n        args = {MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class})})\npublic class TestInterceptor implements Interceptor {\n   public Object intercept(Invocation invocation) throws Throwable {\n     Object target = invocation.getTarget(); //被代理对象\n     Method method = invocation.getMethod(); //代理方法\n     Object[] args = invocation.getArgs(); //方法参数\n     // do something ...... 方法拦截前执行代码块\n     Object result = invocation.proceed();\n     // do something .......方法拦截后执行代码块\n     return result;\n   }\n   public Object plugin(Object target) {\n     return Plugin.wrap(target, this);\n   }\n}\n```\n\n## setProperties方法\n\n如果我们的拦截器需要一些变量对象，而且这个对象是支持可配置的。\n 类似于Spring中的@Value(\"${}\")从[application.properties](https://links.jianshu.com/go?to=http%3A%2F%2Fapplication.properties)文件中获取。\n 使用方法：\n\n```xml\n<plugin interceptor=\"com.plugin.mybatis.MyInterceptor\">\n     <property name=\"username\" value=\"xxx\"/>\n     <property name=\"password\" value=\"xxx\"/>\n</plugin>\n```\n\n## plugin方法\n\n这个方法的作用是就是让mybatis判断，是否要进行拦截，然后做出决定是否生成一个代理。\n\n```kotlin\n    @Override\n    public Object plugin(Object target) {\n        if (target instanceof StatementHandler) {\n            return Plugin.wrap(target, this);\n        }\n        return target;\n    }\n```\n\n**需要注意的是：每经过一个拦截器对象都会调用插件的plugin方法，也就是说，该方法会调用4次。根据@Intercepts注解来决定是否进行拦截处理。**\n\n> 问题1：**Plugin.wrap(target, this)**方法的作用？\n\n解答：判断是否拦截这个类型对象（根据@Intercepts注解决定），然后决定是返回一个代理对象还是返回原对象。\n\n故我们在实现plugin方法时，要判断一下目标类型，是本插件要拦截的对象时才执行Plugin.wrap方法，否则的话，直接返回目标本身。\n\n> 问题2：拦截器代理对象可能经过多层代理，如何获取到真实的拦截器对象？\n\n```dart\n    /**\n     * <p>\n     * 获得真正的处理对象,可能多层代理.\n     * </p>\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T realTarget(Object target) {\n        if (Proxy.isProxyClass(target.getClass())) {\n            MetaObject metaObject = SystemMetaObject.forObject(target);\n            return realTarget(metaObject.getValue(\"h.target\"));\n        }\n        return (T) target;\n```\n\n# 配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n\n<configuration>\n    <properties resource=\"top/sciento/wumu/jdbc/mybatis/db.properties\"></properties>\n    <plugins>\n        <plugin interceptor=\"top.sciento.wumu.jdbc.mybatis.plugin.ExamplePlugin\">\n\n        </plugin>\n        <plugin interceptor=\"top.sciento.wumu.jdbc.mybatis.plugin.PagePlugin\"/>\n    </plugins>\n    <environments default=\"development\">\n        <environment id=\"development\">\n            <transactionManager type=\"JDBC\"/>\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"${driver}\"/>\n                <property name=\"url\" value=\"${url}\"/>\n                <property name=\"username\" value=\"${username}\"/>\n                <property name=\"password\" value=\"${password}\"/>\n            </dataSource>\n        </environment>\n    </environments>\n\n    <mappers>\n        <package name=\"top.sciento.wumu.jdbc.mybatis.mapper\"/>\n    </mappers>\n</configuration>\n```\n\n# 实战\n\n```java\n\n@Intercepts({@Signature(\n        type= Executor.class,\n        method = \"update\",\n        args = {MappedStatement.class,Object.class})})\npublic class ExamplePlugin implements Interceptor {\n    public Object intercept(Invocation invocation) throws Throwable {\n        System.out.println(\"被拦截方法执行之前，做的辅助服务······\");\n        Object[] args = invocation.getArgs();\n        Method method = invocation.getMethod();\n        Object target  = invocation.getTarget();\n        MappedStatement mappedStatement = (MappedStatement) args[0];\n\n        Object proceed = invocation.proceed();\n        System.out.println(\"被拦截方法执行之后，做的辅助服务······\");\n        return proceed;\n    }\n    public Object plugin(Object target) {\n        return Plugin.wrap(target, this);\n    }\n    public void setProperties(Properties properties) {\n    }\n}\n\n```\n\n```java\n@Slf4j\n@Intercepts(\n        @Signature(type = Executor.class, method = \"query\", args = {MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class})\n)\npublic class PagePlugin implements Interceptor {\n    @Override\n    public Object intercept(Invocation invocation) throws Throwable {\n        Object[] args = invocation.getArgs();\n        MappedStatement mappedStatement = (MappedStatement) args[0];\n\n        //获取参数\n        Object param = invocation.getArgs()[1];\n        BoundSql boundSql = mappedStatement.getBoundSql(param);\n        Object parameterObject = boundSql.getParameterObject();\n\n        /**\n         * 判断是否是继承PageVo来判断是否需要进行分页\n         */\n        if (parameterObject instanceof Page) {\n            //强转 为了拿到分页数据\n            Page pagevo = (Page) param;\n            String sql = boundSql.getSql();\n\n\n            //获取相关配置\n            Configuration config = mappedStatement.getConfiguration();\n            Connection connection = config.getEnvironment().getDataSource().getConnection();\n\n            //拼接查询当前条件的sql的总条数\n            String countSql = \"select count(*) from (\" + sql + \") a\";\n            PreparedStatement preparedStatement = connection.prepareStatement(countSql);\n            BoundSql countBoundSql = new BoundSql(config, countSql, boundSql.getParameterMappings(), boundSql.getParameterObject());\n            ParameterHandler parameterHandler = new DefaultParameterHandler(mappedStatement, parameterObject, countBoundSql);\n            parameterHandler.setParameters(preparedStatement);\n            //执行获得总条数\n            ResultSet rs = preparedStatement.executeQuery();\n            int count = 0;\n            if (rs.next()) {\n                count = rs.getInt(1);\n            }\n\n\n            //拼接分页sql\n            String pageSql = sql + \" limit \" + pagevo.getOffset() + \" , \" + pagevo.getSize();\n            //重新执行新的sql\n            doNewSql(invocation, pageSql);\n\n            Object result = invocation.proceed();\n            connection.close();\n            // 这是使用了两种不同的方式返回最终的结果\n            pagevo.setList((List)result);\n            pagevo.setTotal(count);\n            //处理新的结构\n            PageResult<?> pageResult = new PageResult<List>((List) result,pagevo.getPage(), pagevo.getSize(), count );\n            return new ArrayList<PageResult>(){{add(pageResult);}} ;\n        }\n        return invocation.proceed();\n    }\n\n    private void doNewSql(Invocation invocation, String sql){\n        final Object[] args = invocation.getArgs();\n        MappedStatement statement = (MappedStatement) args[0];\n        Object parameterObject = args[1];\n        BoundSql boundSql = statement.getBoundSql(parameterObject);\n        MappedStatement newStatement = newMappedStatement(statement, new BoundSqlSqlSource(boundSql));\n        MetaObject msObject = MetaObject.forObject(newStatement, new DefaultObjectFactory(), new DefaultObjectWrapperFactory(), new DefaultReflectorFactory());\n        msObject.setValue(\"sqlSource.boundSql.sql\", sql);\n        args[0] = newStatement;\n    }\n\n    private MappedStatement newMappedStatement(MappedStatement ms, SqlSource newSqlSource) {\n        MappedStatement.Builder builder =\n                new MappedStatement.Builder(ms.getConfiguration(), ms.getId(), newSqlSource, ms.getSqlCommandType());\n        builder.resource(ms.getResource());\n        builder.fetchSize(ms.getFetchSize());\n        builder.statementType(ms.getStatementType());\n        builder.keyGenerator(ms.getKeyGenerator());\n        if (ms.getKeyProperties() != null && ms.getKeyProperties().length != 0) {\n            StringBuilder keyProperties = new StringBuilder();\n            for (String keyProperty : ms.getKeyProperties()) {\n                keyProperties.append(keyProperty).append(\",\");\n            }\n            keyProperties.delete(keyProperties.length() - 1, keyProperties.length());\n            builder.keyProperty(keyProperties.toString());\n        }\n        builder.timeout(ms.getTimeout());\n        builder.parameterMap(ms.getParameterMap());\n        builder.resultMaps(ms.getResultMaps());\n        builder.resultSetType(ms.getResultSetType());\n        builder.cache(ms.getCache());\n        builder.flushCacheRequired(ms.isFlushCacheRequired());\n        builder.useCache(ms.isUseCache());\n\n        return builder.build();\n    }\n    /**\n     * 新的SqlSource需要实现\n     */\n    class BoundSqlSqlSource implements SqlSource {\n        private BoundSql boundSql;\n\n        public BoundSqlSqlSource(BoundSql boundSql) {\n            this.boundSql = boundSql;\n        }\n\n        @Override\n        public BoundSql getBoundSql(Object parameterObject) {\n            return boundSql;\n        }\n    }\n}\n```\n\n","slug":"mybatis/mybaits拦截器","published":1,"updated":"2020-09-20T03:22:55.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbloj006m4tjex8nykpqc","content":"<h1 id=\"基本知识\"><a href=\"#基本知识\" class=\"headerlink\" title=\"基本知识\"></a>基本知识</h1><h2 id=\"拦截器注解的规则：\"><a href=\"#拦截器注解的规则：\" class=\"headerlink\" title=\"拦截器注解的规则：\"></a>拦截器注解的规则：</h2><p>具体规则如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">Intercepts</span>(&#123;</span><br><span class=\"line\">    @<span class=\"keyword\">Signature</span>(<span class=\"keyword\">type</span> = StatementHandler.class, method = <span class=\"string\">\"query\"</span>, args = &#123;<span class=\"selector-tag\">Statement</span><span class=\"selector-class\">.class</span>, <span class=\"selector-tag\">ResultHandler</span><span class=\"selector-class\">.class</span>&#125;),</span><br><span class=\"line\">    @<span class=\"keyword\">Signature</span>(<span class=\"keyword\">type</span> = StatementHandler.class, method = <span class=\"string\">\"update\"</span>, args = &#123;<span class=\"selector-tag\">Statement</span><span class=\"selector-class\">.class</span>&#125;),</span><br><span class=\"line\">    @<span class=\"keyword\">Signature</span>(<span class=\"keyword\">type</span> = StatementHandler.class, method = <span class=\"string\">\"batch\"</span>, args = &#123;<span class=\"selector-tag\">Statement</span><span class=\"selector-class\">.class</span>&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ol>\n<li>@Intercepts：标识该类是一个拦截器；</li>\n<li>@Signature：指明自定义拦截器需要拦截哪一个类型，哪一个方法；<br> 2.1 type：对应四种类型中的一种；<br> 2.2 method：对应接口中的哪类方法（因为可能存在重载方法）；<br> 2.3 args：对应哪一个方法；</li>\n</ol>\n<blockquote>\n<p><strong>5. 拦截器可拦截的方法：</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>拦截的类</th>\n<th>拦截的方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Executor</td>\n<td>update, query, flushStatements, commit, rollback,getTransaction, close, isClosed</td>\n</tr>\n<tr>\n<td>ParameterHandler</td>\n<td>getParameterObject, setParameters</td>\n</tr>\n<tr>\n<td>StatementHandler</td>\n<td>prepare, parameterize, batch, update, query</td>\n</tr>\n<tr>\n<td>ResultSetHandler</td>\n<td>handleResultSets, handleOutputParameters</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Intercepts</span>(&#123;<span class=\"meta\">@Signature</span>(type = Executor.class, method = <span class=\"string\">\"query\"</span>,</span><br><span class=\"line\">        args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;)&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interceptor</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Invocation invocation)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">     Object target = invocation.getTarget(); <span class=\"comment\">//被代理对象</span></span><br><span class=\"line\">     Method method = invocation.getMethod(); <span class=\"comment\">//代理方法</span></span><br><span class=\"line\">     Object[] args = invocation.getArgs(); <span class=\"comment\">//方法参数</span></span><br><span class=\"line\">     <span class=\"comment\">// do something ...... 方法拦截前执行代码块</span></span><br><span class=\"line\">     Object result = invocation.proceed();</span><br><span class=\"line\">     <span class=\"comment\">// do something .......方法拦截后执行代码块</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">plugin</span><span class=\"params\">(Object target)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> Plugin.wrap(target, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"setProperties方法\"><a href=\"#setProperties方法\" class=\"headerlink\" title=\"setProperties方法\"></a>setProperties方法</h2><p>如果我们的拦截器需要一些变量对象，而且这个对象是支持可配置的。<br> 类似于Spring中的@Value(“${}”)从<a href=\"https://links.jianshu.com/go?to=http%3A%2F%2Fapplication.properties\" target=\"_blank\" rel=\"noopener\">application.properties</a>文件中获取。<br> 使用方法：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">interceptor</span>=<span class=\"string\">\"com.plugin.mybatis.MyInterceptor\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"xxx\"</span>/&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"xxx\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"plugin方法\"><a href=\"#plugin方法\" class=\"headerlink\" title=\"plugin方法\"></a>plugin方法</h2><p>这个方法的作用是就是让mybatis判断，是否要进行拦截，然后做出决定是否生成一个代理。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Object plugin(Object target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target instanceof StatementHandler) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Plugin.wrap(target, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>需要注意的是：每经过一个拦截器对象都会调用插件的plugin方法，也就是说，该方法会调用4次。根据@Intercepts注解来决定是否进行拦截处理。</strong></p>\n<blockquote>\n<p>问题1：<strong>Plugin.wrap(target, this)</strong>方法的作用？</p>\n</blockquote>\n<p>解答：判断是否拦截这个类型对象（根据@Intercepts注解决定），然后决定是返回一个代理对象还是返回原对象。</p>\n<p>故我们在实现plugin方法时，要判断一下目标类型，是本插件要拦截的对象时才执行Plugin.wrap方法，否则的话，直接返回目标本身。</p>\n<blockquote>\n<p>问题2：拦截器代理对象可能经过多层代理，如何获取到真实的拦截器对象？</p>\n</blockquote>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 获得真正的处理对象,可能多层代理.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">public <span class=\"keyword\">static</span> &lt;T&gt; T realTarget(<span class=\"built_in\">Object</span> target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Proxy.isProxyClass(target.getClass())) &#123;</span><br><span class=\"line\">        MetaObject metaObject = SystemMetaObject.forObject(target);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> realTarget(metaObject.getValue(<span class=\"string\">\"h.target\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) target;</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">        \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"top/sciento/wumu/jdbc/mybatis/db.properties\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">interceptor</span>=<span class=\"string\">\"top.sciento.wumu.jdbc.mybatis.plugin.ExamplePlugin\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">interceptor</span>=<span class=\"string\">\"top.sciento.wumu.jdbc.mybatis.plugin.PagePlugin\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">environments</span> <span class=\"attr\">default</span>=<span class=\"string\">\"development\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">\"development\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">\"JDBC\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">\"POOLED\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driver\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;driver&#125;\"</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;password&#125;\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">environments</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"top.sciento.wumu.jdbc.mybatis.mapper\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Intercepts</span>(&#123;<span class=\"meta\">@Signature</span>(</span><br><span class=\"line\">        type= Executor.class,</span><br><span class=\"line\">        method = <span class=\"string\">\"update\"</span>,</span><br><span class=\"line\">        args = &#123;MappedStatement.class,Object.class&#125;)&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExamplePlugin</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Invocation invocation)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"被拦截方法执行之前，做的辅助服务······\"</span>);</span><br><span class=\"line\">        Object[] args = invocation.getArgs();</span><br><span class=\"line\">        Method method = invocation.getMethod();</span><br><span class=\"line\">        Object target  = invocation.getTarget();</span><br><span class=\"line\">        MappedStatement mappedStatement = (MappedStatement) args[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        Object proceed = invocation.proceed();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"被拦截方法执行之后，做的辅助服务······\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> proceed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">plugin</span><span class=\"params\">(Object target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Plugin.wrap(target, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setProperties</span><span class=\"params\">(Properties properties)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"meta\">@Intercepts</span>(</span><br><span class=\"line\">        <span class=\"meta\">@Signature</span>(type = Executor.class, method = <span class=\"string\">\"query\"</span>, args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;)</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PagePlugin</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Invocation invocation)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        Object[] args = invocation.getArgs();</span><br><span class=\"line\">        MappedStatement mappedStatement = (MappedStatement) args[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取参数</span></span><br><span class=\"line\">        Object param = invocation.getArgs()[<span class=\"number\">1</span>];</span><br><span class=\"line\">        BoundSql boundSql = mappedStatement.getBoundSql(param);</span><br><span class=\"line\">        Object parameterObject = boundSql.getParameterObject();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 判断是否是继承PageVo来判断是否需要进行分页</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (parameterObject <span class=\"keyword\">instanceof</span> Page) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//强转 为了拿到分页数据</span></span><br><span class=\"line\">            Page pagevo = (Page) param;</span><br><span class=\"line\">            String sql = boundSql.getSql();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//获取相关配置</span></span><br><span class=\"line\">            Configuration config = mappedStatement.getConfiguration();</span><br><span class=\"line\">            Connection connection = config.getEnvironment().getDataSource().getConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//拼接查询当前条件的sql的总条数</span></span><br><span class=\"line\">            String countSql = <span class=\"string\">\"select count(*) from (\"</span> + sql + <span class=\"string\">\") a\"</span>;</span><br><span class=\"line\">            PreparedStatement preparedStatement = connection.prepareStatement(countSql);</span><br><span class=\"line\">            BoundSql countBoundSql = <span class=\"keyword\">new</span> BoundSql(config, countSql, boundSql.getParameterMappings(), boundSql.getParameterObject());</span><br><span class=\"line\">            ParameterHandler parameterHandler = <span class=\"keyword\">new</span> DefaultParameterHandler(mappedStatement, parameterObject, countBoundSql);</span><br><span class=\"line\">            parameterHandler.setParameters(preparedStatement);</span><br><span class=\"line\">            <span class=\"comment\">//执行获得总条数</span></span><br><span class=\"line\">            ResultSet rs = preparedStatement.executeQuery();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rs.next()) &#123;</span><br><span class=\"line\">                count = rs.getInt(<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//拼接分页sql</span></span><br><span class=\"line\">            String pageSql = sql + <span class=\"string\">\" limit \"</span> + pagevo.getOffset() + <span class=\"string\">\" , \"</span> + pagevo.getSize();</span><br><span class=\"line\">            <span class=\"comment\">//重新执行新的sql</span></span><br><span class=\"line\">            doNewSql(invocation, pageSql);</span><br><span class=\"line\"></span><br><span class=\"line\">            Object result = invocation.proceed();</span><br><span class=\"line\">            connection.close();</span><br><span class=\"line\">            <span class=\"comment\">// 这是使用了两种不同的方式返回最终的结果</span></span><br><span class=\"line\">            pagevo.setList((List)result);</span><br><span class=\"line\">            pagevo.setTotal(count);</span><br><span class=\"line\">            <span class=\"comment\">//处理新的结构</span></span><br><span class=\"line\">            PageResult&lt;?&gt; pageResult = <span class=\"keyword\">new</span> PageResult&lt;List&gt;((List) result,pagevo.getPage(), pagevo.getSize(), count );</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;PageResult&gt;()&#123;&#123;add(pageResult);&#125;&#125; ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> invocation.proceed();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doNewSql</span><span class=\"params\">(Invocation invocation, String sql)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Object[] args = invocation.getArgs();</span><br><span class=\"line\">        MappedStatement statement = (MappedStatement) args[<span class=\"number\">0</span>];</span><br><span class=\"line\">        Object parameterObject = args[<span class=\"number\">1</span>];</span><br><span class=\"line\">        BoundSql boundSql = statement.getBoundSql(parameterObject);</span><br><span class=\"line\">        MappedStatement newStatement = newMappedStatement(statement, <span class=\"keyword\">new</span> BoundSqlSqlSource(boundSql));</span><br><span class=\"line\">        MetaObject msObject = MetaObject.forObject(newStatement, <span class=\"keyword\">new</span> DefaultObjectFactory(), <span class=\"keyword\">new</span> DefaultObjectWrapperFactory(), <span class=\"keyword\">new</span> DefaultReflectorFactory());</span><br><span class=\"line\">        msObject.setValue(<span class=\"string\">\"sqlSource.boundSql.sql\"</span>, sql);</span><br><span class=\"line\">        args[<span class=\"number\">0</span>] = newStatement;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> MappedStatement <span class=\"title\">newMappedStatement</span><span class=\"params\">(MappedStatement ms, SqlSource newSqlSource)</span> </span>&#123;</span><br><span class=\"line\">        MappedStatement.Builder builder =</span><br><span class=\"line\">                <span class=\"keyword\">new</span> MappedStatement.Builder(ms.getConfiguration(), ms.getId(), newSqlSource, ms.getSqlCommandType());</span><br><span class=\"line\">        builder.resource(ms.getResource());</span><br><span class=\"line\">        builder.fetchSize(ms.getFetchSize());</span><br><span class=\"line\">        builder.statementType(ms.getStatementType());</span><br><span class=\"line\">        builder.keyGenerator(ms.getKeyGenerator());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ms.getKeyProperties() != <span class=\"keyword\">null</span> &amp;&amp; ms.getKeyProperties().length != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            StringBuilder keyProperties = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String keyProperty : ms.getKeyProperties()) &#123;</span><br><span class=\"line\">                keyProperties.append(keyProperty).append(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            keyProperties.delete(keyProperties.length() - <span class=\"number\">1</span>, keyProperties.length());</span><br><span class=\"line\">            builder.keyProperty(keyProperties.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        builder.timeout(ms.getTimeout());</span><br><span class=\"line\">        builder.parameterMap(ms.getParameterMap());</span><br><span class=\"line\">        builder.resultMaps(ms.getResultMaps());</span><br><span class=\"line\">        builder.resultSetType(ms.getResultSetType());</span><br><span class=\"line\">        builder.cache(ms.getCache());</span><br><span class=\"line\">        builder.flushCacheRequired(ms.isFlushCacheRequired());</span><br><span class=\"line\">        builder.useCache(ms.isUseCache());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 新的SqlSource需要实现</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BoundSqlSqlSource</span> <span class=\"keyword\">implements</span> <span class=\"title\">SqlSource</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> BoundSql boundSql;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BoundSqlSqlSource</span><span class=\"params\">(BoundSql boundSql)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.boundSql = boundSql;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> BoundSql <span class=\"title\">getBoundSql</span><span class=\"params\">(Object parameterObject)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> boundSql;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基本知识\"><a href=\"#基本知识\" class=\"headerlink\" title=\"基本知识\"></a>基本知识</h1><h2 id=\"拦截器注解的规则：\"><a href=\"#拦截器注解的规则：\" class=\"headerlink\" title=\"拦截器注解的规则：\"></a>拦截器注解的规则：</h2><p>具体规则如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">Intercepts</span>(&#123;</span><br><span class=\"line\">    @<span class=\"keyword\">Signature</span>(<span class=\"keyword\">type</span> = StatementHandler.class, method = <span class=\"string\">\"query\"</span>, args = &#123;<span class=\"selector-tag\">Statement</span><span class=\"selector-class\">.class</span>, <span class=\"selector-tag\">ResultHandler</span><span class=\"selector-class\">.class</span>&#125;),</span><br><span class=\"line\">    @<span class=\"keyword\">Signature</span>(<span class=\"keyword\">type</span> = StatementHandler.class, method = <span class=\"string\">\"update\"</span>, args = &#123;<span class=\"selector-tag\">Statement</span><span class=\"selector-class\">.class</span>&#125;),</span><br><span class=\"line\">    @<span class=\"keyword\">Signature</span>(<span class=\"keyword\">type</span> = StatementHandler.class, method = <span class=\"string\">\"batch\"</span>, args = &#123;<span class=\"selector-tag\">Statement</span><span class=\"selector-class\">.class</span>&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ol>\n<li>@Intercepts：标识该类是一个拦截器；</li>\n<li>@Signature：指明自定义拦截器需要拦截哪一个类型，哪一个方法；<br> 2.1 type：对应四种类型中的一种；<br> 2.2 method：对应接口中的哪类方法（因为可能存在重载方法）；<br> 2.3 args：对应哪一个方法；</li>\n</ol>\n<blockquote>\n<p><strong>5. 拦截器可拦截的方法：</strong></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>拦截的类</th>\n<th>拦截的方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Executor</td>\n<td>update, query, flushStatements, commit, rollback,getTransaction, close, isClosed</td>\n</tr>\n<tr>\n<td>ParameterHandler</td>\n<td>getParameterObject, setParameters</td>\n</tr>\n<tr>\n<td>StatementHandler</td>\n<td>prepare, parameterize, batch, update, query</td>\n</tr>\n<tr>\n<td>ResultSetHandler</td>\n<td>handleResultSets, handleOutputParameters</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Intercepts</span>(&#123;<span class=\"meta\">@Signature</span>(type = Executor.class, method = <span class=\"string\">\"query\"</span>,</span><br><span class=\"line\">        args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;)&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interceptor</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Invocation invocation)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">     Object target = invocation.getTarget(); <span class=\"comment\">//被代理对象</span></span><br><span class=\"line\">     Method method = invocation.getMethod(); <span class=\"comment\">//代理方法</span></span><br><span class=\"line\">     Object[] args = invocation.getArgs(); <span class=\"comment\">//方法参数</span></span><br><span class=\"line\">     <span class=\"comment\">// do something ...... 方法拦截前执行代码块</span></span><br><span class=\"line\">     Object result = invocation.proceed();</span><br><span class=\"line\">     <span class=\"comment\">// do something .......方法拦截后执行代码块</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">plugin</span><span class=\"params\">(Object target)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> Plugin.wrap(target, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"setProperties方法\"><a href=\"#setProperties方法\" class=\"headerlink\" title=\"setProperties方法\"></a>setProperties方法</h2><p>如果我们的拦截器需要一些变量对象，而且这个对象是支持可配置的。<br> 类似于Spring中的@Value(“${}”)从<a href=\"https://links.jianshu.com/go?to=http%3A%2F%2Fapplication.properties\" target=\"_blank\" rel=\"noopener\">application.properties</a>文件中获取。<br> 使用方法：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">interceptor</span>=<span class=\"string\">\"com.plugin.mybatis.MyInterceptor\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"xxx\"</span>/&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"xxx\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"plugin方法\"><a href=\"#plugin方法\" class=\"headerlink\" title=\"plugin方法\"></a>plugin方法</h2><p>这个方法的作用是就是让mybatis判断，是否要进行拦截，然后做出决定是否生成一个代理。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Object plugin(Object target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target instanceof StatementHandler) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Plugin.wrap(target, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>需要注意的是：每经过一个拦截器对象都会调用插件的plugin方法，也就是说，该方法会调用4次。根据@Intercepts注解来决定是否进行拦截处理。</strong></p>\n<blockquote>\n<p>问题1：<strong>Plugin.wrap(target, this)</strong>方法的作用？</p>\n</blockquote>\n<p>解答：判断是否拦截这个类型对象（根据@Intercepts注解决定），然后决定是返回一个代理对象还是返回原对象。</p>\n<p>故我们在实现plugin方法时，要判断一下目标类型，是本插件要拦截的对象时才执行Plugin.wrap方法，否则的话，直接返回目标本身。</p>\n<blockquote>\n<p>问题2：拦截器代理对象可能经过多层代理，如何获取到真实的拦截器对象？</p>\n</blockquote>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 获得真正的处理对象,可能多层代理.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">public <span class=\"keyword\">static</span> &lt;T&gt; T realTarget(<span class=\"built_in\">Object</span> target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Proxy.isProxyClass(target.getClass())) &#123;</span><br><span class=\"line\">        MetaObject metaObject = SystemMetaObject.forObject(target);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> realTarget(metaObject.getValue(<span class=\"string\">\"h.target\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) target;</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">        \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"top/sciento/wumu/jdbc/mybatis/db.properties\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">interceptor</span>=<span class=\"string\">\"top.sciento.wumu.jdbc.mybatis.plugin.ExamplePlugin\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">interceptor</span>=<span class=\"string\">\"top.sciento.wumu.jdbc.mybatis.plugin.PagePlugin\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">environments</span> <span class=\"attr\">default</span>=<span class=\"string\">\"development\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">\"development\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">\"JDBC\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">\"POOLED\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driver\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;driver&#125;\"</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;password&#125;\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">environments</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"top.sciento.wumu.jdbc.mybatis.mapper\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Intercepts</span>(&#123;<span class=\"meta\">@Signature</span>(</span><br><span class=\"line\">        type= Executor.class,</span><br><span class=\"line\">        method = <span class=\"string\">\"update\"</span>,</span><br><span class=\"line\">        args = &#123;MappedStatement.class,Object.class&#125;)&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExamplePlugin</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Invocation invocation)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"被拦截方法执行之前，做的辅助服务······\"</span>);</span><br><span class=\"line\">        Object[] args = invocation.getArgs();</span><br><span class=\"line\">        Method method = invocation.getMethod();</span><br><span class=\"line\">        Object target  = invocation.getTarget();</span><br><span class=\"line\">        MappedStatement mappedStatement = (MappedStatement) args[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        Object proceed = invocation.proceed();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"被拦截方法执行之后，做的辅助服务······\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> proceed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">plugin</span><span class=\"params\">(Object target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Plugin.wrap(target, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setProperties</span><span class=\"params\">(Properties properties)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"meta\">@Intercepts</span>(</span><br><span class=\"line\">        <span class=\"meta\">@Signature</span>(type = Executor.class, method = <span class=\"string\">\"query\"</span>, args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;)</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PagePlugin</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Invocation invocation)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        Object[] args = invocation.getArgs();</span><br><span class=\"line\">        MappedStatement mappedStatement = (MappedStatement) args[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取参数</span></span><br><span class=\"line\">        Object param = invocation.getArgs()[<span class=\"number\">1</span>];</span><br><span class=\"line\">        BoundSql boundSql = mappedStatement.getBoundSql(param);</span><br><span class=\"line\">        Object parameterObject = boundSql.getParameterObject();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 判断是否是继承PageVo来判断是否需要进行分页</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (parameterObject <span class=\"keyword\">instanceof</span> Page) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//强转 为了拿到分页数据</span></span><br><span class=\"line\">            Page pagevo = (Page) param;</span><br><span class=\"line\">            String sql = boundSql.getSql();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//获取相关配置</span></span><br><span class=\"line\">            Configuration config = mappedStatement.getConfiguration();</span><br><span class=\"line\">            Connection connection = config.getEnvironment().getDataSource().getConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//拼接查询当前条件的sql的总条数</span></span><br><span class=\"line\">            String countSql = <span class=\"string\">\"select count(*) from (\"</span> + sql + <span class=\"string\">\") a\"</span>;</span><br><span class=\"line\">            PreparedStatement preparedStatement = connection.prepareStatement(countSql);</span><br><span class=\"line\">            BoundSql countBoundSql = <span class=\"keyword\">new</span> BoundSql(config, countSql, boundSql.getParameterMappings(), boundSql.getParameterObject());</span><br><span class=\"line\">            ParameterHandler parameterHandler = <span class=\"keyword\">new</span> DefaultParameterHandler(mappedStatement, parameterObject, countBoundSql);</span><br><span class=\"line\">            parameterHandler.setParameters(preparedStatement);</span><br><span class=\"line\">            <span class=\"comment\">//执行获得总条数</span></span><br><span class=\"line\">            ResultSet rs = preparedStatement.executeQuery();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rs.next()) &#123;</span><br><span class=\"line\">                count = rs.getInt(<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//拼接分页sql</span></span><br><span class=\"line\">            String pageSql = sql + <span class=\"string\">\" limit \"</span> + pagevo.getOffset() + <span class=\"string\">\" , \"</span> + pagevo.getSize();</span><br><span class=\"line\">            <span class=\"comment\">//重新执行新的sql</span></span><br><span class=\"line\">            doNewSql(invocation, pageSql);</span><br><span class=\"line\"></span><br><span class=\"line\">            Object result = invocation.proceed();</span><br><span class=\"line\">            connection.close();</span><br><span class=\"line\">            <span class=\"comment\">// 这是使用了两种不同的方式返回最终的结果</span></span><br><span class=\"line\">            pagevo.setList((List)result);</span><br><span class=\"line\">            pagevo.setTotal(count);</span><br><span class=\"line\">            <span class=\"comment\">//处理新的结构</span></span><br><span class=\"line\">            PageResult&lt;?&gt; pageResult = <span class=\"keyword\">new</span> PageResult&lt;List&gt;((List) result,pagevo.getPage(), pagevo.getSize(), count );</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;PageResult&gt;()&#123;&#123;add(pageResult);&#125;&#125; ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> invocation.proceed();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">doNewSql</span><span class=\"params\">(Invocation invocation, String sql)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Object[] args = invocation.getArgs();</span><br><span class=\"line\">        MappedStatement statement = (MappedStatement) args[<span class=\"number\">0</span>];</span><br><span class=\"line\">        Object parameterObject = args[<span class=\"number\">1</span>];</span><br><span class=\"line\">        BoundSql boundSql = statement.getBoundSql(parameterObject);</span><br><span class=\"line\">        MappedStatement newStatement = newMappedStatement(statement, <span class=\"keyword\">new</span> BoundSqlSqlSource(boundSql));</span><br><span class=\"line\">        MetaObject msObject = MetaObject.forObject(newStatement, <span class=\"keyword\">new</span> DefaultObjectFactory(), <span class=\"keyword\">new</span> DefaultObjectWrapperFactory(), <span class=\"keyword\">new</span> DefaultReflectorFactory());</span><br><span class=\"line\">        msObject.setValue(<span class=\"string\">\"sqlSource.boundSql.sql\"</span>, sql);</span><br><span class=\"line\">        args[<span class=\"number\">0</span>] = newStatement;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> MappedStatement <span class=\"title\">newMappedStatement</span><span class=\"params\">(MappedStatement ms, SqlSource newSqlSource)</span> </span>&#123;</span><br><span class=\"line\">        MappedStatement.Builder builder =</span><br><span class=\"line\">                <span class=\"keyword\">new</span> MappedStatement.Builder(ms.getConfiguration(), ms.getId(), newSqlSource, ms.getSqlCommandType());</span><br><span class=\"line\">        builder.resource(ms.getResource());</span><br><span class=\"line\">        builder.fetchSize(ms.getFetchSize());</span><br><span class=\"line\">        builder.statementType(ms.getStatementType());</span><br><span class=\"line\">        builder.keyGenerator(ms.getKeyGenerator());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ms.getKeyProperties() != <span class=\"keyword\">null</span> &amp;&amp; ms.getKeyProperties().length != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            StringBuilder keyProperties = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String keyProperty : ms.getKeyProperties()) &#123;</span><br><span class=\"line\">                keyProperties.append(keyProperty).append(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            keyProperties.delete(keyProperties.length() - <span class=\"number\">1</span>, keyProperties.length());</span><br><span class=\"line\">            builder.keyProperty(keyProperties.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        builder.timeout(ms.getTimeout());</span><br><span class=\"line\">        builder.parameterMap(ms.getParameterMap());</span><br><span class=\"line\">        builder.resultMaps(ms.getResultMaps());</span><br><span class=\"line\">        builder.resultSetType(ms.getResultSetType());</span><br><span class=\"line\">        builder.cache(ms.getCache());</span><br><span class=\"line\">        builder.flushCacheRequired(ms.isFlushCacheRequired());</span><br><span class=\"line\">        builder.useCache(ms.isUseCache());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 新的SqlSource需要实现</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BoundSqlSqlSource</span> <span class=\"keyword\">implements</span> <span class=\"title\">SqlSource</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> BoundSql boundSql;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BoundSqlSqlSource</span><span class=\"params\">(BoundSql boundSql)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.boundSql = boundSql;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> BoundSql <span class=\"title\">getBoundSql</span><span class=\"params\">(Object parameterObject)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> boundSql;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"mybatis入门","date":"2020-09-19T06:00:00.000Z","_content":"\n# 添加依赖\n\n```xml\n<dependency>\n  <groupId>org.mybatis</groupId>\n  <artifactId>mybatis</artifactId>\n  <version>x.x.x</version>\n</dependency>\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>5.1.44</version>\n</dependency>\n```\n\n# 创建配置文件\n\nmybatis-config.xml\n\n配置文件的标签顺序不能打乱，不然会报错。\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <properties resource=\"top/sciento/wumu/jdbc/mybatis/db.properties\"></properties>\n    <environments default=\"development\">\n        <environment id=\"development\">\n            <transactionManager type=\"JDBC\"/>\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"${driver}\"/>\n                <property name=\"url\" value=\"${url}\"/>\n                <property name=\"username\" value=\"${username}\"/>\n                <property name=\"password\" value=\"${password}\"/>\n            </dataSource>\n        </environment>\n    </environments>\n    <mappers>\n        <package name=\"top.sciento.wumu.jdbc.mybatis.mapper\"/>\n    </mappers>\n</configuration>\n```\n\ndb.properties\n\n```properties\ndriver=com.mysql.jdbc.Driver\nurl=jdbc:mysql://:3306/test\nusername=\npassword=\n```\n\n# 编写执行文件\n\n```java\n\npackage top.sciento.wumu.jdbc.mybatis;\n\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.Configuration;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\nimport top.sciento.wumu.jdbc.mybatis.entity.User;\nimport top.sciento.wumu.jdbc.mybatis.mapper.UserMapper;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.Reader;\nimport java.util.List;\n\npublic class MybatisRunner {\n\n    public static void main(String[] args) throws IOException {\n        System.out.println(MybatisRunner.class.getResource(\"\"));\n        InputStream reader = MybatisRunner.class.getResourceAsStream(\"mybatis-config.xml\");\n        SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(reader);\n        Configuration configuration  = sessionFactory.getConfiguration();\n        // 默认是不会提交的，需要手动提交\n        SqlSession sqlSession = sessionFactory.openSession();\n        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);\n        List<User> userList = userMapper.selectList();\n        System.out.println(userList);\n        User user  = new User();\n        user.setName(\"wumu\");\n        user.setAge(12);\n        int id = userMapper.insert(user);\n        System.out.println(id);\n        System.out.println(user);\n    }\n}\n\n```\n\n```java\npublic interface UserMapper {\n    List<User> list();\n\n    @SelectProvider(value = UserSqlBuilder.class,method = \"selectList\")\n    List<User> selectList();\n\n    // 这里使用动态sql\n    @InsertProvider(value = UserSqlBuilder.class,method = \"insert\")\n//    @Options(useGeneratedKeys = true, keyProperty = \"id\", keyColumn = \"id\")\n    @SelectKey(statement = \"select last_insert_id()\", keyProperty = \"id\", before = false, resultType = int.class)\n    int insert(User user);\n    \n}\n\n```\n\n```java\npublic class UserSqlBuilder {\n    public static String selectList() {\n        return new SQL().SELECT(\"id\",\"name\",\"age\").FROM(\"base_user\").toString();\n    }\n\n\n    public static String insert(User user){\n//        return new SQL().INSERT_INTO(\"base_user\").INTO_COLUMNS(\"name\",\"age\")\n//                .INTO_VALUES(user.getName(),String.valueOf(user.getAge())).toString();\n        return new SQL().INSERT_INTO(\"base_user\").VALUES(\"name\",\"#{name}\")\n                .VALUES(\"age\",\"#{age}\").toString();\n    }\n}\n\n```\n\n```java\n@Data\npublic class User {\n    private Integer id;\n    private String name;\n    private Integer age;\n}\n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<!-- namespace属性是名称空间，必须唯一 -->\n<mapper namespace=\"top.sciento.wumu.jdbc.mybatis.mapper.UserMapper\">\n\n    <!-- resultMap标签:映射实体与表\n         type属性：表示实体全路径名\n         id属性：为实体与表的映射取一个任意的唯一的名字\n    -->\n    <resultMap type=\"top.sciento.wumu.jdbc.mybatis.entity.User\" id=\"UserMap\">\n        <!-- id标签:映射主键属性\n             result标签：映射非主键属性\n             property属性:实体的属性名\n             column属性：表的字段名\n        -->\n        <id property=\"id\" column=\"id\"/>\n        <result property=\"name\" column=\"name\"/>\n        <result property=\"age\" column=\"age\"/>\n    </resultMap>\n    <select id=\"list\" resultMap=\"UserMap\">\n        select * from base_user\n    </select>\n\n\n</mapper>\n```\n\n# 知识分析\n\n## 返回主键\n\n1、使用options\n\noptions可以配置sql的大部分属性，对应着我们标签`<select>`上写的相关属性。\n\n| --         | --     |                | 描述                                                         |\n| ---------- | ------ | -------------- | ------------------------------------------------------------ |\n| `@Options` | `方法` | 映射语句的属性 | 该注解允许你指定大部分开关和配置选项，它们通常在映射语句上作为属性出现。与在注解上提供大量的属性相比，`Options` 注解提供了一致、清晰的方式来指定选项。属性：`useCache=true`、`flushCache=FlushCachePolicy.DEFAULT`、`resultSetType=DEFAULT`、`statementType=PREPARED`、`fetchSize=-1`、`timeout=-1`、`useGeneratedKeys=false`、`keyProperty=\"\"`、`keyColumn=\"\"`、`resultSets=\"\"`, `databaseId=\"\"`。注意，Java 注解无法指定 `null` 值。因此，一旦你使用了 `Options` 注解，你的语句就会被上述属性的默认值所影响。要注意避免默认值带来的非预期行为。 The `databaseId`(Available since 3.5.5), in case there is a configured `DatabaseIdProvider`, the MyBatis use the `Options` with no `databaseId` attribute or with a `databaseId` that matches the current one. If found with and without the `databaseId` the latter will be discarded.         注意：`keyColumn` 属性只在某些数据库中有效（如 Oracle、PostgreSQL 等）。要了解更多关于 `keyColumn` 和 `keyProperty` 可选值信息，请查看“insert, update 和 delete”一节。 |\n\n2、使用SelectKey\n\n对应着SelectKey标签\n\n| --           | --     | --            | -                                                            |\n| ------------ | ------ | ------------- | ------------------------------------------------------------ |\n| `@SelectKey` | `方法` | `<selectKey>` | 这个注解的功能与 `<selectKey>` 标签完全一致。该注解只能在 `@Insert` 或 `@InsertProvider` 或 `@Update` 或 `@UpdateProvider` 标注的方法上使用，否则将会被忽略。如果标注了 `@SelectKey` 注解，MyBatis 将会忽略掉由 `@Options` 注解所设置的生成主键或设置（configuration）属性。属性：`statement` 以字符串数组形式指定将会被执行的 SQL 语句，`keyProperty` 指定作为参数传入的对象对应属性的名称，该属性将会更新成新的值，`before` 可以指定为 `true` 或 `false` 以指明 SQL 语句应被在插入语句的之前还是之后执行。`resultType` 则指定 `keyProperty` 的 Java 类型。`statementType` 则用于选择语句类型，可以选择 `STATEMENT`、`PREPARED` 或 `CALLABLE` 之一，它们分别对应于 `Statement`、`PreparedStatement` 和 `CallableStatement`。默认值是 `PREPARED`。 The `databaseId`(Available since 3.5.5), in case there is a configured `DatabaseIdProvider`, the MyBatis will use a statement with no `databaseId` attribute or with a `databaseId` that matches the current one. If found with and without the `databaseId` the latter will be discarded. |\n\n描述：\n\n@SelctKey(statement=\"SQL语句\",keyProperty=\"将SQL语句查询结果存放到keyProperty中去\",before=\"true表示先查询再插入，false反之\",resultType=int.class)\n其中：\n\n- statement是要运行的SQL语句，它的返回值通过resultType来指定\n- before表示查询语句statement运行的时机\n- keyProperty表示查询结果赋值给代码中的哪个对象，keyColumn表示将查询结果赋值给数据库表中哪一列\n- keyProperty和keyColumn都不是必需的，有没有都可以\n- before=true，插入之前进行查询，可以将查询结果赋给keyProperty和keyColumn，赋给keyColumn相当于更改数据库\n- befaore=false，先插入，再查询，这时只能将结果赋给keyProperty\n- 赋值给keyProperty用来“读”数据库，赋值给keyColumn用来写数据库\n- selectKey的两大作用：1、生成主键；2、获取刚刚插入数据的主键。\n- 使用selectKey，并且使用MySQL的last_insert_id()函数时，before必为false，也就是说必须先插入然后执行last_insert_id()才能获得刚刚插入数据的ID。\n\n## maven打包xml文件\n\n```xml\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <configuration>\n                <source>8</source>\n                <target>8</target>\n            </configuration>\n        </plugin>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-war-plugin</artifactId>\n            <version>2.1.1</version>\n        </plugin>\n    </plugins>\n    <resources>\n        <resource>\n            <directory>src/main/java</directory>\n            <includes>\n                <include>**/*.properties</include>\n                <include>**/*.xml</include>\n            </includes>\n            <filtering>false</filtering>\n        </resource>\n        <resource>\n            <directory>src/main/resources</directory>\n        </resource>\n    </resources>\n</build>\n```\n\n\n\n\n\n\n\n","source":"_posts/mybatis/mybatis入门.md","raw":"---\ntitle: mybatis入门\ndate: 2020-9-19 14:00:00\n---\n\n# 添加依赖\n\n```xml\n<dependency>\n  <groupId>org.mybatis</groupId>\n  <artifactId>mybatis</artifactId>\n  <version>x.x.x</version>\n</dependency>\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>5.1.44</version>\n</dependency>\n```\n\n# 创建配置文件\n\nmybatis-config.xml\n\n配置文件的标签顺序不能打乱，不然会报错。\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <properties resource=\"top/sciento/wumu/jdbc/mybatis/db.properties\"></properties>\n    <environments default=\"development\">\n        <environment id=\"development\">\n            <transactionManager type=\"JDBC\"/>\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"${driver}\"/>\n                <property name=\"url\" value=\"${url}\"/>\n                <property name=\"username\" value=\"${username}\"/>\n                <property name=\"password\" value=\"${password}\"/>\n            </dataSource>\n        </environment>\n    </environments>\n    <mappers>\n        <package name=\"top.sciento.wumu.jdbc.mybatis.mapper\"/>\n    </mappers>\n</configuration>\n```\n\ndb.properties\n\n```properties\ndriver=com.mysql.jdbc.Driver\nurl=jdbc:mysql://:3306/test\nusername=\npassword=\n```\n\n# 编写执行文件\n\n```java\n\npackage top.sciento.wumu.jdbc.mybatis;\n\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.Configuration;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\nimport top.sciento.wumu.jdbc.mybatis.entity.User;\nimport top.sciento.wumu.jdbc.mybatis.mapper.UserMapper;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.Reader;\nimport java.util.List;\n\npublic class MybatisRunner {\n\n    public static void main(String[] args) throws IOException {\n        System.out.println(MybatisRunner.class.getResource(\"\"));\n        InputStream reader = MybatisRunner.class.getResourceAsStream(\"mybatis-config.xml\");\n        SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(reader);\n        Configuration configuration  = sessionFactory.getConfiguration();\n        // 默认是不会提交的，需要手动提交\n        SqlSession sqlSession = sessionFactory.openSession();\n        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);\n        List<User> userList = userMapper.selectList();\n        System.out.println(userList);\n        User user  = new User();\n        user.setName(\"wumu\");\n        user.setAge(12);\n        int id = userMapper.insert(user);\n        System.out.println(id);\n        System.out.println(user);\n    }\n}\n\n```\n\n```java\npublic interface UserMapper {\n    List<User> list();\n\n    @SelectProvider(value = UserSqlBuilder.class,method = \"selectList\")\n    List<User> selectList();\n\n    // 这里使用动态sql\n    @InsertProvider(value = UserSqlBuilder.class,method = \"insert\")\n//    @Options(useGeneratedKeys = true, keyProperty = \"id\", keyColumn = \"id\")\n    @SelectKey(statement = \"select last_insert_id()\", keyProperty = \"id\", before = false, resultType = int.class)\n    int insert(User user);\n    \n}\n\n```\n\n```java\npublic class UserSqlBuilder {\n    public static String selectList() {\n        return new SQL().SELECT(\"id\",\"name\",\"age\").FROM(\"base_user\").toString();\n    }\n\n\n    public static String insert(User user){\n//        return new SQL().INSERT_INTO(\"base_user\").INTO_COLUMNS(\"name\",\"age\")\n//                .INTO_VALUES(user.getName(),String.valueOf(user.getAge())).toString();\n        return new SQL().INSERT_INTO(\"base_user\").VALUES(\"name\",\"#{name}\")\n                .VALUES(\"age\",\"#{age}\").toString();\n    }\n}\n\n```\n\n```java\n@Data\npublic class User {\n    private Integer id;\n    private String name;\n    private Integer age;\n}\n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<!-- namespace属性是名称空间，必须唯一 -->\n<mapper namespace=\"top.sciento.wumu.jdbc.mybatis.mapper.UserMapper\">\n\n    <!-- resultMap标签:映射实体与表\n         type属性：表示实体全路径名\n         id属性：为实体与表的映射取一个任意的唯一的名字\n    -->\n    <resultMap type=\"top.sciento.wumu.jdbc.mybatis.entity.User\" id=\"UserMap\">\n        <!-- id标签:映射主键属性\n             result标签：映射非主键属性\n             property属性:实体的属性名\n             column属性：表的字段名\n        -->\n        <id property=\"id\" column=\"id\"/>\n        <result property=\"name\" column=\"name\"/>\n        <result property=\"age\" column=\"age\"/>\n    </resultMap>\n    <select id=\"list\" resultMap=\"UserMap\">\n        select * from base_user\n    </select>\n\n\n</mapper>\n```\n\n# 知识分析\n\n## 返回主键\n\n1、使用options\n\noptions可以配置sql的大部分属性，对应着我们标签`<select>`上写的相关属性。\n\n| --         | --     |                | 描述                                                         |\n| ---------- | ------ | -------------- | ------------------------------------------------------------ |\n| `@Options` | `方法` | 映射语句的属性 | 该注解允许你指定大部分开关和配置选项，它们通常在映射语句上作为属性出现。与在注解上提供大量的属性相比，`Options` 注解提供了一致、清晰的方式来指定选项。属性：`useCache=true`、`flushCache=FlushCachePolicy.DEFAULT`、`resultSetType=DEFAULT`、`statementType=PREPARED`、`fetchSize=-1`、`timeout=-1`、`useGeneratedKeys=false`、`keyProperty=\"\"`、`keyColumn=\"\"`、`resultSets=\"\"`, `databaseId=\"\"`。注意，Java 注解无法指定 `null` 值。因此，一旦你使用了 `Options` 注解，你的语句就会被上述属性的默认值所影响。要注意避免默认值带来的非预期行为。 The `databaseId`(Available since 3.5.5), in case there is a configured `DatabaseIdProvider`, the MyBatis use the `Options` with no `databaseId` attribute or with a `databaseId` that matches the current one. If found with and without the `databaseId` the latter will be discarded.         注意：`keyColumn` 属性只在某些数据库中有效（如 Oracle、PostgreSQL 等）。要了解更多关于 `keyColumn` 和 `keyProperty` 可选值信息，请查看“insert, update 和 delete”一节。 |\n\n2、使用SelectKey\n\n对应着SelectKey标签\n\n| --           | --     | --            | -                                                            |\n| ------------ | ------ | ------------- | ------------------------------------------------------------ |\n| `@SelectKey` | `方法` | `<selectKey>` | 这个注解的功能与 `<selectKey>` 标签完全一致。该注解只能在 `@Insert` 或 `@InsertProvider` 或 `@Update` 或 `@UpdateProvider` 标注的方法上使用，否则将会被忽略。如果标注了 `@SelectKey` 注解，MyBatis 将会忽略掉由 `@Options` 注解所设置的生成主键或设置（configuration）属性。属性：`statement` 以字符串数组形式指定将会被执行的 SQL 语句，`keyProperty` 指定作为参数传入的对象对应属性的名称，该属性将会更新成新的值，`before` 可以指定为 `true` 或 `false` 以指明 SQL 语句应被在插入语句的之前还是之后执行。`resultType` 则指定 `keyProperty` 的 Java 类型。`statementType` 则用于选择语句类型，可以选择 `STATEMENT`、`PREPARED` 或 `CALLABLE` 之一，它们分别对应于 `Statement`、`PreparedStatement` 和 `CallableStatement`。默认值是 `PREPARED`。 The `databaseId`(Available since 3.5.5), in case there is a configured `DatabaseIdProvider`, the MyBatis will use a statement with no `databaseId` attribute or with a `databaseId` that matches the current one. If found with and without the `databaseId` the latter will be discarded. |\n\n描述：\n\n@SelctKey(statement=\"SQL语句\",keyProperty=\"将SQL语句查询结果存放到keyProperty中去\",before=\"true表示先查询再插入，false反之\",resultType=int.class)\n其中：\n\n- statement是要运行的SQL语句，它的返回值通过resultType来指定\n- before表示查询语句statement运行的时机\n- keyProperty表示查询结果赋值给代码中的哪个对象，keyColumn表示将查询结果赋值给数据库表中哪一列\n- keyProperty和keyColumn都不是必需的，有没有都可以\n- before=true，插入之前进行查询，可以将查询结果赋给keyProperty和keyColumn，赋给keyColumn相当于更改数据库\n- befaore=false，先插入，再查询，这时只能将结果赋给keyProperty\n- 赋值给keyProperty用来“读”数据库，赋值给keyColumn用来写数据库\n- selectKey的两大作用：1、生成主键；2、获取刚刚插入数据的主键。\n- 使用selectKey，并且使用MySQL的last_insert_id()函数时，before必为false，也就是说必须先插入然后执行last_insert_id()才能获得刚刚插入数据的ID。\n\n## maven打包xml文件\n\n```xml\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <configuration>\n                <source>8</source>\n                <target>8</target>\n            </configuration>\n        </plugin>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-war-plugin</artifactId>\n            <version>2.1.1</version>\n        </plugin>\n    </plugins>\n    <resources>\n        <resource>\n            <directory>src/main/java</directory>\n            <includes>\n                <include>**/*.properties</include>\n                <include>**/*.xml</include>\n            </includes>\n            <filtering>false</filtering>\n        </resource>\n        <resource>\n            <directory>src/main/resources</directory>\n        </resource>\n    </resources>\n</build>\n```\n\n\n\n\n\n\n\n","slug":"mybatis/mybatis入门","published":1,"updated":"2020-09-20T03:22:55.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbloj006n4tje5x4ad069","content":"<h1 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>x.x.x<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.44<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h1><p>mybatis-config.xml</p>\n<p>配置文件的标签顺序不能打乱，不然会报错。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE configuration</span></span><br><span class=\"line\"><span class=\"meta\">        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">        \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"top/sciento/wumu/jdbc/mybatis/db.properties\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">environments</span> <span class=\"attr\">default</span>=<span class=\"string\">\"development\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">\"development\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">\"JDBC\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">\"POOLED\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driver\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;driver&#125;\"</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;password&#125;\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">environments</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"top.sciento.wumu.jdbc.mybatis.mapper\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>db.properties</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver=com.mysql.jdbc.Driver</span><br><span class=\"line\">url=jdbc:mysql://:3306/test</span><br><span class=\"line\">username=</span><br><span class=\"line\">password=</span><br></pre></td></tr></table></figure>\n<h1 id=\"编写执行文件\"><a href=\"#编写执行文件\" class=\"headerlink\" title=\"编写执行文件\"></a>编写执行文件</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> top.sciento.wumu.jdbc.mybatis;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.io.Resources;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> top.sciento.wumu.jdbc.mybatis.entity.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> top.sciento.wumu.jdbc.mybatis.mapper.UserMapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Reader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MybatisRunner</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(MybatisRunner.class.getResource(<span class=\"string\">\"\"</span>));</span><br><span class=\"line\">        InputStream reader = MybatisRunner.class.getResourceAsStream(<span class=\"string\">\"mybatis-config.xml\"</span>);</span><br><span class=\"line\">        SqlSessionFactory sessionFactory = <span class=\"keyword\">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class=\"line\">        Configuration configuration  = sessionFactory.getConfiguration();</span><br><span class=\"line\">        <span class=\"comment\">// 默认是不会提交的，需要手动提交</span></span><br><span class=\"line\">        SqlSession sqlSession = sessionFactory.openSession();</span><br><span class=\"line\">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.selectList();</span><br><span class=\"line\">        System.out.println(userList);</span><br><span class=\"line\">        User user  = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        user.setName(<span class=\"string\">\"wumu\"</span>);</span><br><span class=\"line\">        user.setAge(<span class=\"number\">12</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> id = userMapper.insert(user);</span><br><span class=\"line\">        System.out.println(id);</span><br><span class=\"line\">        System.out.println(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">List&lt;User&gt; <span class=\"title\">list</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SelectProvider</span>(value = UserSqlBuilder.class,method = <span class=\"string\">\"selectList\"</span>)</span><br><span class=\"line\">    <span class=\"function\">List&lt;User&gt; <span class=\"title\">selectList</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里使用动态sql</span></span><br><span class=\"line\">    <span class=\"meta\">@InsertProvider</span>(value = UserSqlBuilder.class,method = <span class=\"string\">\"insert\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//    @Options(useGeneratedKeys = true, keyProperty = \"id\", keyColumn = \"id\")</span></span><br><span class=\"line\">    <span class=\"meta\">@SelectKey</span>(statement = <span class=\"string\">\"select last_insert_id()\"</span>, keyProperty = <span class=\"string\">\"id\"</span>, before = <span class=\"keyword\">false</span>, resultType = <span class=\"keyword\">int</span>.class)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">insert</span><span class=\"params\">(User user)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserSqlBuilder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">selectList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SQL().SELECT(<span class=\"string\">\"id\"</span>,<span class=\"string\">\"name\"</span>,<span class=\"string\">\"age\"</span>).FROM(<span class=\"string\">\"base_user\"</span>).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">insert</span><span class=\"params\">(User user)</span></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        return new SQL().INSERT_INTO(\"base_user\").INTO_COLUMNS(\"name\",\"age\")</span></span><br><span class=\"line\"><span class=\"comment\">//                .INTO_VALUES(user.getName(),String.valueOf(user.getAge())).toString();</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SQL().INSERT_INTO(<span class=\"string\">\"base_user\"</span>).VALUES(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"#&#123;name&#125;\"</span>)</span><br><span class=\"line\">                .VALUES(<span class=\"string\">\"age\"</span>,<span class=\"string\">\"#&#123;age&#125;\"</span>).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- namespace属性是名称空间，必须唯一 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"top.sciento.wumu.jdbc.mybatis.mapper.UserMapper\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- resultMap标签:映射实体与表</span></span><br><span class=\"line\"><span class=\"comment\">         type属性：表示实体全路径名</span></span><br><span class=\"line\"><span class=\"comment\">         id属性：为实体与表的映射取一个任意的唯一的名字</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">type</span>=<span class=\"string\">\"top.sciento.wumu.jdbc.mybatis.entity.User\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"UserMap\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- id标签:映射主键属性</span></span><br><span class=\"line\"><span class=\"comment\">             result标签：映射非主键属性</span></span><br><span class=\"line\"><span class=\"comment\">             property属性:实体的属性名</span></span><br><span class=\"line\"><span class=\"comment\">             column属性：表的字段名</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">column</span>=<span class=\"string\">\"name\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">column</span>=<span class=\"string\">\"age\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"list\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"UserMap\"</span>&gt;</span></span><br><span class=\"line\">        select * from base_user</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"知识分析\"><a href=\"#知识分析\" class=\"headerlink\" title=\"知识分析\"></a>知识分析</h1><h2 id=\"返回主键\"><a href=\"#返回主键\" class=\"headerlink\" title=\"返回主键\"></a>返回主键</h2><p>1、使用options</p>\n<p>options可以配置sql的大部分属性，对应着我们标签<code>&lt;select&gt;</code>上写的相关属性。</p>\n<table>\n<thead>\n<tr>\n<th>–</th>\n<th>–</th>\n<th></th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>@Options</code></td>\n<td><code>方法</code></td>\n<td>映射语句的属性</td>\n<td>该注解允许你指定大部分开关和配置选项，它们通常在映射语句上作为属性出现。与在注解上提供大量的属性相比，<code>Options</code> 注解提供了一致、清晰的方式来指定选项。属性：<code>useCache=true</code>、<code>flushCache=FlushCachePolicy.DEFAULT</code>、<code>resultSetType=DEFAULT</code>、<code>statementType=PREPARED</code>、<code>fetchSize=-1</code>、<code>timeout=-1</code>、<code>useGeneratedKeys=false</code>、<code>keyProperty=&quot;&quot;</code>、<code>keyColumn=&quot;&quot;</code>、<code>resultSets=&quot;&quot;</code>, <code>databaseId=&quot;&quot;</code>。注意，Java 注解无法指定 <code>null</code> 值。因此，一旦你使用了 <code>Options</code> 注解，你的语句就会被上述属性的默认值所影响。要注意避免默认值带来的非预期行为。 The <code>databaseId</code>(Available since 3.5.5), in case there is a configured <code>DatabaseIdProvider</code>, the MyBatis use the <code>Options</code> with no <code>databaseId</code> attribute or with a <code>databaseId</code> that matches the current one. If found with and without the <code>databaseId</code> the latter will be discarded.         注意：<code>keyColumn</code> 属性只在某些数据库中有效（如 Oracle、PostgreSQL 等）。要了解更多关于 <code>keyColumn</code> 和 <code>keyProperty</code> 可选值信息，请查看“insert, update 和 delete”一节。</td>\n</tr>\n</tbody>\n</table>\n<p>2、使用SelectKey</p>\n<p>对应着SelectKey标签</p>\n<table>\n<thead>\n<tr>\n<th>–</th>\n<th>–</th>\n<th>–</th>\n<th>-</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>@SelectKey</code></td>\n<td><code>方法</code></td>\n<td><code>&lt;selectKey&gt;</code></td>\n<td>这个注解的功能与 <code>&lt;selectKey&gt;</code> 标签完全一致。该注解只能在 <code>@Insert</code> 或 <code>@InsertProvider</code> 或 <code>@Update</code> 或 <code>@UpdateProvider</code> 标注的方法上使用，否则将会被忽略。如果标注了 <code>@SelectKey</code> 注解，MyBatis 将会忽略掉由 <code>@Options</code> 注解所设置的生成主键或设置（configuration）属性。属性：<code>statement</code> 以字符串数组形式指定将会被执行的 SQL 语句，<code>keyProperty</code> 指定作为参数传入的对象对应属性的名称，该属性将会更新成新的值，<code>before</code> 可以指定为 <code>true</code> 或 <code>false</code> 以指明 SQL 语句应被在插入语句的之前还是之后执行。<code>resultType</code> 则指定 <code>keyProperty</code> 的 Java 类型。<code>statementType</code> 则用于选择语句类型，可以选择 <code>STATEMENT</code>、<code>PREPARED</code> 或 <code>CALLABLE</code> 之一，它们分别对应于 <code>Statement</code>、<code>PreparedStatement</code> 和 <code>CallableStatement</code>。默认值是 <code>PREPARED</code>。 The <code>databaseId</code>(Available since 3.5.5), in case there is a configured <code>DatabaseIdProvider</code>, the MyBatis will use a statement with no <code>databaseId</code> attribute or with a <code>databaseId</code> that matches the current one. If found with and without the <code>databaseId</code> the latter will be discarded.</td>\n</tr>\n</tbody>\n</table>\n<p>描述：</p>\n<p>@SelctKey(statement=”SQL语句”,keyProperty=”将SQL语句查询结果存放到keyProperty中去”,before=”true表示先查询再插入，false反之”,resultType=int.class)<br>其中：</p>\n<ul>\n<li>statement是要运行的SQL语句，它的返回值通过resultType来指定</li>\n<li>before表示查询语句statement运行的时机</li>\n<li>keyProperty表示查询结果赋值给代码中的哪个对象，keyColumn表示将查询结果赋值给数据库表中哪一列</li>\n<li>keyProperty和keyColumn都不是必需的，有没有都可以</li>\n<li>before=true，插入之前进行查询，可以将查询结果赋给keyProperty和keyColumn，赋给keyColumn相当于更改数据库</li>\n<li>befaore=false，先插入，再查询，这时只能将结果赋给keyProperty</li>\n<li>赋值给keyProperty用来“读”数据库，赋值给keyColumn用来写数据库</li>\n<li>selectKey的两大作用：1、生成主键；2、获取刚刚插入数据的主键。</li>\n<li>使用selectKey，并且使用MySQL的last_insert_id()函数时，before必为false，也就是说必须先插入然后执行last_insert_id()才能获得刚刚插入数据的ID。</li>\n</ul>\n<h2 id=\"maven打包xml文件\"><a href=\"#maven打包xml文件\" class=\"headerlink\" title=\"maven打包xml文件\"></a>maven打包xml文件</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-war-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>x.x.x<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.44<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h1><p>mybatis-config.xml</p>\n<p>配置文件的标签顺序不能打乱，不然会报错。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE configuration</span></span><br><span class=\"line\"><span class=\"meta\">        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">        \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"top/sciento/wumu/jdbc/mybatis/db.properties\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">environments</span> <span class=\"attr\">default</span>=<span class=\"string\">\"development\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">\"development\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">\"JDBC\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">\"POOLED\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driver\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;driver&#125;\"</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;username&#125;\"</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;password&#125;\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">environments</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"top.sciento.wumu.jdbc.mybatis.mapper\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>db.properties</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver=com.mysql.jdbc.Driver</span><br><span class=\"line\">url=jdbc:mysql://:3306/test</span><br><span class=\"line\">username=</span><br><span class=\"line\">password=</span><br></pre></td></tr></table></figure>\n<h1 id=\"编写执行文件\"><a href=\"#编写执行文件\" class=\"headerlink\" title=\"编写执行文件\"></a>编写执行文件</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> top.sciento.wumu.jdbc.mybatis;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.io.Resources;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> top.sciento.wumu.jdbc.mybatis.entity.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> top.sciento.wumu.jdbc.mybatis.mapper.UserMapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Reader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MybatisRunner</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(MybatisRunner.class.getResource(<span class=\"string\">\"\"</span>));</span><br><span class=\"line\">        InputStream reader = MybatisRunner.class.getResourceAsStream(<span class=\"string\">\"mybatis-config.xml\"</span>);</span><br><span class=\"line\">        SqlSessionFactory sessionFactory = <span class=\"keyword\">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class=\"line\">        Configuration configuration  = sessionFactory.getConfiguration();</span><br><span class=\"line\">        <span class=\"comment\">// 默认是不会提交的，需要手动提交</span></span><br><span class=\"line\">        SqlSession sqlSession = sessionFactory.openSession();</span><br><span class=\"line\">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\">        List&lt;User&gt; userList = userMapper.selectList();</span><br><span class=\"line\">        System.out.println(userList);</span><br><span class=\"line\">        User user  = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        user.setName(<span class=\"string\">\"wumu\"</span>);</span><br><span class=\"line\">        user.setAge(<span class=\"number\">12</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> id = userMapper.insert(user);</span><br><span class=\"line\">        System.out.println(id);</span><br><span class=\"line\">        System.out.println(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">List&lt;User&gt; <span class=\"title\">list</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SelectProvider</span>(value = UserSqlBuilder.class,method = <span class=\"string\">\"selectList\"</span>)</span><br><span class=\"line\">    <span class=\"function\">List&lt;User&gt; <span class=\"title\">selectList</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里使用动态sql</span></span><br><span class=\"line\">    <span class=\"meta\">@InsertProvider</span>(value = UserSqlBuilder.class,method = <span class=\"string\">\"insert\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//    @Options(useGeneratedKeys = true, keyProperty = \"id\", keyColumn = \"id\")</span></span><br><span class=\"line\">    <span class=\"meta\">@SelectKey</span>(statement = <span class=\"string\">\"select last_insert_id()\"</span>, keyProperty = <span class=\"string\">\"id\"</span>, before = <span class=\"keyword\">false</span>, resultType = <span class=\"keyword\">int</span>.class)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">insert</span><span class=\"params\">(User user)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserSqlBuilder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">selectList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SQL().SELECT(<span class=\"string\">\"id\"</span>,<span class=\"string\">\"name\"</span>,<span class=\"string\">\"age\"</span>).FROM(<span class=\"string\">\"base_user\"</span>).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">insert</span><span class=\"params\">(User user)</span></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        return new SQL().INSERT_INTO(\"base_user\").INTO_COLUMNS(\"name\",\"age\")</span></span><br><span class=\"line\"><span class=\"comment\">//                .INTO_VALUES(user.getName(),String.valueOf(user.getAge())).toString();</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SQL().INSERT_INTO(<span class=\"string\">\"base_user\"</span>).VALUES(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"#&#123;name&#125;\"</span>)</span><br><span class=\"line\">                .VALUES(<span class=\"string\">\"age\"</span>,<span class=\"string\">\"#&#123;age&#125;\"</span>).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- namespace属性是名称空间，必须唯一 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"top.sciento.wumu.jdbc.mybatis.mapper.UserMapper\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- resultMap标签:映射实体与表</span></span><br><span class=\"line\"><span class=\"comment\">         type属性：表示实体全路径名</span></span><br><span class=\"line\"><span class=\"comment\">         id属性：为实体与表的映射取一个任意的唯一的名字</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">type</span>=<span class=\"string\">\"top.sciento.wumu.jdbc.mybatis.entity.User\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"UserMap\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- id标签:映射主键属性</span></span><br><span class=\"line\"><span class=\"comment\">             result标签：映射非主键属性</span></span><br><span class=\"line\"><span class=\"comment\">             property属性:实体的属性名</span></span><br><span class=\"line\"><span class=\"comment\">             column属性：表的字段名</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">column</span>=<span class=\"string\">\"name\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">column</span>=<span class=\"string\">\"age\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"list\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"UserMap\"</span>&gt;</span></span><br><span class=\"line\">        select * from base_user</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"知识分析\"><a href=\"#知识分析\" class=\"headerlink\" title=\"知识分析\"></a>知识分析</h1><h2 id=\"返回主键\"><a href=\"#返回主键\" class=\"headerlink\" title=\"返回主键\"></a>返回主键</h2><p>1、使用options</p>\n<p>options可以配置sql的大部分属性，对应着我们标签<code>&lt;select&gt;</code>上写的相关属性。</p>\n<table>\n<thead>\n<tr>\n<th>–</th>\n<th>–</th>\n<th></th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>@Options</code></td>\n<td><code>方法</code></td>\n<td>映射语句的属性</td>\n<td>该注解允许你指定大部分开关和配置选项，它们通常在映射语句上作为属性出现。与在注解上提供大量的属性相比，<code>Options</code> 注解提供了一致、清晰的方式来指定选项。属性：<code>useCache=true</code>、<code>flushCache=FlushCachePolicy.DEFAULT</code>、<code>resultSetType=DEFAULT</code>、<code>statementType=PREPARED</code>、<code>fetchSize=-1</code>、<code>timeout=-1</code>、<code>useGeneratedKeys=false</code>、<code>keyProperty=&quot;&quot;</code>、<code>keyColumn=&quot;&quot;</code>、<code>resultSets=&quot;&quot;</code>, <code>databaseId=&quot;&quot;</code>。注意，Java 注解无法指定 <code>null</code> 值。因此，一旦你使用了 <code>Options</code> 注解，你的语句就会被上述属性的默认值所影响。要注意避免默认值带来的非预期行为。 The <code>databaseId</code>(Available since 3.5.5), in case there is a configured <code>DatabaseIdProvider</code>, the MyBatis use the <code>Options</code> with no <code>databaseId</code> attribute or with a <code>databaseId</code> that matches the current one. If found with and without the <code>databaseId</code> the latter will be discarded.         注意：<code>keyColumn</code> 属性只在某些数据库中有效（如 Oracle、PostgreSQL 等）。要了解更多关于 <code>keyColumn</code> 和 <code>keyProperty</code> 可选值信息，请查看“insert, update 和 delete”一节。</td>\n</tr>\n</tbody>\n</table>\n<p>2、使用SelectKey</p>\n<p>对应着SelectKey标签</p>\n<table>\n<thead>\n<tr>\n<th>–</th>\n<th>–</th>\n<th>–</th>\n<th>-</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>@SelectKey</code></td>\n<td><code>方法</code></td>\n<td><code>&lt;selectKey&gt;</code></td>\n<td>这个注解的功能与 <code>&lt;selectKey&gt;</code> 标签完全一致。该注解只能在 <code>@Insert</code> 或 <code>@InsertProvider</code> 或 <code>@Update</code> 或 <code>@UpdateProvider</code> 标注的方法上使用，否则将会被忽略。如果标注了 <code>@SelectKey</code> 注解，MyBatis 将会忽略掉由 <code>@Options</code> 注解所设置的生成主键或设置（configuration）属性。属性：<code>statement</code> 以字符串数组形式指定将会被执行的 SQL 语句，<code>keyProperty</code> 指定作为参数传入的对象对应属性的名称，该属性将会更新成新的值，<code>before</code> 可以指定为 <code>true</code> 或 <code>false</code> 以指明 SQL 语句应被在插入语句的之前还是之后执行。<code>resultType</code> 则指定 <code>keyProperty</code> 的 Java 类型。<code>statementType</code> 则用于选择语句类型，可以选择 <code>STATEMENT</code>、<code>PREPARED</code> 或 <code>CALLABLE</code> 之一，它们分别对应于 <code>Statement</code>、<code>PreparedStatement</code> 和 <code>CallableStatement</code>。默认值是 <code>PREPARED</code>。 The <code>databaseId</code>(Available since 3.5.5), in case there is a configured <code>DatabaseIdProvider</code>, the MyBatis will use a statement with no <code>databaseId</code> attribute or with a <code>databaseId</code> that matches the current one. If found with and without the <code>databaseId</code> the latter will be discarded.</td>\n</tr>\n</tbody>\n</table>\n<p>描述：</p>\n<p>@SelctKey(statement=”SQL语句”,keyProperty=”将SQL语句查询结果存放到keyProperty中去”,before=”true表示先查询再插入，false反之”,resultType=int.class)<br>其中：</p>\n<ul>\n<li>statement是要运行的SQL语句，它的返回值通过resultType来指定</li>\n<li>before表示查询语句statement运行的时机</li>\n<li>keyProperty表示查询结果赋值给代码中的哪个对象，keyColumn表示将查询结果赋值给数据库表中哪一列</li>\n<li>keyProperty和keyColumn都不是必需的，有没有都可以</li>\n<li>before=true，插入之前进行查询，可以将查询结果赋给keyProperty和keyColumn，赋给keyColumn相当于更改数据库</li>\n<li>befaore=false，先插入，再查询，这时只能将结果赋给keyProperty</li>\n<li>赋值给keyProperty用来“读”数据库，赋值给keyColumn用来写数据库</li>\n<li>selectKey的两大作用：1、生成主键；2、获取刚刚插入数据的主键。</li>\n<li>使用selectKey，并且使用MySQL的last_insert_id()函数时，before必为false，也就是说必须先插入然后执行last_insert_id()才能获得刚刚插入数据的ID。</li>\n</ul>\n<h2 id=\"maven打包xml文件\"><a href=\"#maven打包xml文件\" class=\"headerlink\" title=\"maven打包xml文件\"></a>maven打包xml文件</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-war-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"nginx的servername配置","date":"2019-12-16T09:42:19.000Z","_content":"\n编译自：\n [server_names](https://link.jianshu.com?t=http://nginx.org/en/docs/http/server_names.html)\n\n**目录**：\n\n- 通配符主机名\n- 正则表达式主机名\n- 混杂主机名\n- 对主机名的优化\n- 兼容性\n\nnginx 的 server names 由 server_name 指令定义，server name 是 nginx 用于选择以哪个 server 区块处理访问请求的依据参数。可参考 《nginx 是如何处理请求的》 的描述。\n\nserver name 可以用三种方式定义：\n\n- 定义准确的名字\n- 定义通配符名字\n- 定义正则表达式名字\n\n例如：\n\n```nginx\nserver {\n    listen       80;\n    server_name  example.org  www.example.org;\n    ...\n}\n\nserver {\n    listen       80;\n    server_name  *.example.org;\n    ...\n}\n\nserver {\n    listen       80;\n    server_name  mail.*;\n    ...\n}\n\nserver {\n    listen       80;\n    server_name  ~^(?<user>.+)\\.example\\.net$;\n    ...\n}\n```\n\n当 nginx 以请求的 server name 查找匹配的虚拟主机时，如果匹配的 server 区块不止一个，nginx 按照如下的优先顺序选择 server 区块：\n\n1. 准确的主机名\n2. 以 “*” 起始的最长的通配主机名\n3. 以 “*” 结尾的最长的通配主机名\n4. 第一个匹配的正则表达式（按照配置文件中的顺序）\n\n所以，如果同时有一个通配主机名和正则表达式主机名与访问请求的 server name 匹配，nginx 会选择通配主机名的 server 区块处理请求。\n\n## 通配主机名\n\n------\n\n通配主机名只能在起始和末尾使用 “`*`” 字符，而且必须以 “`.`” 分隔。形如 “`www.*.example.org`” 或者 “`w*.example.org`” 的通配主机名是无效的。要达到这个匹配效果，只有使用正则表达式：\n\n```ruby\n“www.*.example.org” ->  “~^www\\..+\\.example\\.org$”\n“w*.example.org”    ->  “~^w.*\\.example\\.org$”\n```\n\n“`*`” 号可以匹配多个名字区域，“`*.example.org`” 不仅可以匹配 [www.example.org](https://link.jianshu.com?t=http://www.example.org)，也能够匹配 [www.sub.example.org](https://link.jianshu.com?t=http://www.sub.example.org)。\n\n## 正则表达式主机名\n\n------\n\nnginx 使用的正则表达式与 Perl 语言的正则表达式（PCRE）兼容。使用正则表达式主机名，server name 必须以 “~” 字符为起始字符。\n\n```ruby\nserver_name  ~^www\\d+\\.example\\.net$;\n```\n\n如果不以 “~” 字符为起始字符，该 server name 将被视为 “准确的主机名” 或者当 server name 包含 “`*`” 时被视为 “通配主机名” (多数情况是非法通配主机名，因为只有当 “`*`” 在 server name 的起始或结尾时才合法)。\n\n不要忘记设置 “`^`” 和 “`$`” 锚定符对主机名进行界定，这不是 nginx 的配置语法要求，而是为了使正则表达式能正确匹配。\n\n同时也要注意，域名的分隔符 “.” 在正则表达式中应该以 “\\” 引用。如果在正则表达式中使用了 “`{`” 和 “`}`” 字符，应该将整个正则表达式引用起来，因为花括弧在 nginx 配置中也有特殊意义，引用起来以避免被 nginx 错误解析。例如：\n\n```bash\nserver_name  \"~^(?<name>\\w\\d{1,3}+)\\.example\\.net$\";\n```\n\n如果不引用起来，nginx 会启动失败，并显示如下错误信息：\n\n```csharp\ndirective \"server_name\" is not terminated by \";\" in ...\n```\n\n正则表达式的 named capture （使用一个名字对匹配的字符串进行引用）可被视为一个变量，在后面的配置中使用：\n\n```ruby\nserver {\n    server_name   ~^(www\\.)?(?<domain>.+)$;\n\n    location / {\n        root   /sites/$domain;\n    }\n}\n```\n\nPCRE 库支持 named capture，有如下几种语法：\n\n```ruby\n?<name>     Perl 5.10 compatible syntax, supported since PCRE-7.0\n?'name'     Perl 5.10 compatible syntax, supported since PCRE-7.0\n?P<name>    Python compatible syntax, supported since PCRE-4.0\n```\n\n可参考：[pcre2pattern](https://link.jianshu.com?t=http://www.pcre.org/current/doc/html/pcre2pattern.html#SEC16)：\n\n```tsx\n \\d     any decimal digit\n \\D     any character that is not a decimal digit\n \\h     any horizontal white space character\n \\H     any character that is not a horizontal white space character\n \\s     any white space character\n \\S     any character that is not a white space character\n \\v     any vertical white space character\n \\V     any character that is not a vertical white space character\n \\w     any \"word\" character\n \\W     any \"non-word\" character\n```\n\n如果 nginx 启动失败，并显示如下信息：\n\n```undefined\npcre_compile() failed: unrecognized character after (?< in ...\n```\n\n这表示 PCRE 库太老旧，可尝试使用 “`?P<name>`” 替代 “`?<name>`”。\n\nnamed capture 也能以数字形式使用：\n\n```ruby\nserver {\n    server_name   ~^(www\\.)?(.+)$;\n\n    location / {\n        root   /sites/$2;\n    }\n}\n```\n\n无论如何，数字形式的使用应尽量简单，因为数字是只是顺序标识，而不是被匹配的字符串的标识，这导致数字引用很容易被覆盖。\n\n## 混杂主机名\n\n------\n\n有一些主机名是被特殊对待的。\n\n对于未定义 “Host” 请求首部的请求，如果希望在某个 server 区块中处理这样的请求，应在 server_name 指令的参数中添加 \"\" 空字符串参数：\n\n```nginx\nserver {\n    listen       80;\n    server_name  example.org  www.example.org  \"\";\n    ...\n}\n```\n\n在《nginx 是如何处理访问请求的》一文中曾经介绍过，如果 server 区块中没有定义 server_name 指令，便如同定义了 server_name \"\"。\n\n```css\nNote:\n在 0.8.48 版以前，遇到 server 区块中没有定义 server_name 指令的情况，\n会将系统的主机名设置为 server 区块的 server name，而不是自动设置 \"\" 为\nserver name。\n```\n\n在 0.9.4 版本，如果设置：`server_name $hostname`，会将系统的主机名设置为 server name。\n\n如果某个访问使用了 IP 地址 而不是 server name，“Host” 请求首部会包含 IP 地址。对于这样的请求，可使用如下的配置：\n\n```nginx\nserver {\n    listen       80;\n    server_name  example.org\n                 www.example.org\n                 \"\"\n                 192.168.1.1\n                 ;\n    ...\n}\n```\n\n下面是一个 catch-all server 区块的配置，使用了 “_” 作为 server name:\n\n```nginx\nserver {\n    listen       80  default_server;\n    server_name  _;\n    return       444;\n}\n```\n\n这个 server name 并没有什么特殊之处，它仅是一个无效的域名而已，也可以使用其他类似的名字，如 “--” and “!@#” 。\n\n0.6.25 版以前的 nginx 曾经支持一个特殊的 server name: “`*`”，这个特殊主机名被错误的解释成一个 catch-all 主机名。但它从未以一个 catch-all 或者 通配主机名工作，它的功能实际上与现在的 server_name_in_redirect 指令的功能相同：[server_name_in_redirect](https://link.jianshu.com?t=http://nginx.org/en/docs/http/ngx_http_core_module.html#server_name_in_redirect)\n\n特殊的 server name “`*`” 现在已经被弃用，应使用 server_name_in_redirect 指令。\n\n要注意的是，使用 server_name 指令无法指定 defalt server 或是 catch-all name，这是 listen 指令的属性，不是 server_name 指令的属性。可参考《nginx 是如何处理访问请求的》。\n\n我们可以定义两个 server，它们都同时监听于 *:80 端口 和 *:8080 端口，将其中一个设置为 *:80 端口的默认 server，将另一个设置为 *:8080 端口的默认 server：\n\n```nginx\nserver {\n    listen       80;\n    listen       8080  default_server;\n    server_name  example.net;\n    ...\n}\n\nserver {\n    listen       80  default_server;\n    listen       8080;\n    server_name  example.org;\n    ...\n}\n```\n\n## 对主机名的优化\n\n------\n\n准确的主机名、以 “`*`” 起始的通配主机名、以 “`*`” 结尾的通配主机名，这三种主机名被存放在三个 hash table 中。这三个 hash table 是与监听端口绑定的。hash table 的大小在配置阶段被优化，优化的目的是努力降低这些名字在 CPU 缓存中命中失败的几率。关于设置 hash table 的详细讨论请参考：[hash](https://link.jianshu.com?t=http://nginx.org/en/docs/hash.html)\n\n在匹配主机名时，首先查找“准确主机名”的 hash table，如果没有找到，会查找以 “`*`” 起始的“通配主机名”的 hash table，如果没有仍未找到，会查找以 “`*`” 结尾的“通配主机名”的 hash table。\n\n对于“通配主机名”的 hash table 的检索会更慢，因为是以主机名的域名部分去检索的。\n\n注意，对于特殊的通配主机名，形如 “.example.org”，这样的主机名是存放在“通配主机名”的 hash table 中，而不是存放在“准确主机名”的 hash table 中。\n\n如果前面都未找到，正则表达式会按写在配置文件中的顺序被测试，因此正则表达式是最慢的方法，并且没有可扩展性。\n\n因为以上这些原因，在可能的情况下最好使用 “准确的主机名”。例如，如果对于 [example.org](https://link.jianshu.com?t=http://example.org) 和 [www.example.org](https://link.jianshu.com?t=http://www.example.org) 的请求最为频繁，对他们进行显式的定义会更有效率：\n\n```nginx\nserver {\n    listen       80;\n    server_name  example.org  www.example.org  *.example.org;\n    ...\n}\n```\n\n下面的定义方法不如上面的配置有效率：\n\n```nginx\nserver {\n    listen       80;\n    server_name  .example.org;\n    ...\n}\n```\n\n如果定义了大量的主机名，或者使用了很长的主机名，应在配置文件的 http context 中调整这个两个参数：\n\n- [server_names_hash_max_size](https://link.jianshu.com?t=http://nginx.org/en/docs/http/ngx_http_core_module.html#server_names_hash_max_size)\n- [server_names_hash_bucket_size](https://link.jianshu.com?t=http://nginx.org/en/docs/http/ngx_http_core_module.html#server_names_hash_bucket_size)\n\n`server_names_hash_bucket_size` 指令的默认值可能为 32 或 64 或 其他数字，这是根据 CPU 缓存线大小而定的。如果默认值为 32，而且定义了一个 server name 为：“`too.long.server.name.example.org`” 这时 nginx 就不能启动，而且显示如下的错误信息：\n\n```undefined\ncould not build the server_names_hash,\nyou should increase server_names_hash_bucket_size: 32\n```\n\n遇到这种情况，应将默认值设置为原来的两倍：\n\n```undefined\nhttp {\n    server_names_hash_bucket_size  64;\n    ...\n```\n\n如果定义了大量的主机名，可能显示如下的错误信息：\n\n```undefined\ncould not build the server_names_hash,\nyou should increase either server_names_hash_max_size: 512\nor server_names_hash_bucket_size: 32\n```\n\n遇到这种情况，首先尝试调整 `server_names_hash_max_size` 的值，设置为大于 server name 总数的值。如果这样设置仍不能让 nginx 正常启动，或者 nginx 启动的时间变得过长，再尝试增加 `server_names_hash_bucket_size` 的值。\n\n如果一个 server 是某个监听端口唯一的 server，这时 nginx 根本不会去测试 server name，同时也不会为该监听端口构建 hash table。但其中又有一个例外，如果 server name 是正则表达式，而且正则表达式中包含了 captures，这时 nginx 不得不执行该正则表达式以获取 captures。（正则表达式的 capture 是指被圆括号引用的表达式部分，它们所匹配的字符串，可通过名字或数字引用）\n\n## 兼容性\n\n------\n\n从 0.9.4 开始支持特殊主机名 “$hostname”\n\n从 0.8.48 开始，如果 server 区块中未定义 server_name 指令，nginx 默认设定空字符串为主机名，如同定义了 server_name \"\"\n\n从 0.8.25 开始支持在“正则表达式主机名”中使用 named capture 特性\n\n从 0.7.40 开始支持在“正则表达式主机名”中使用 capture 特性\n\n从 0.7.12 开始支持 \"\" 空字符串主机名\n\n从 0.6.25 开始，支持使用“正则表达式主机名”或者“通配主机名”作为第一个主机名。\n\n从 0.6.7 开始支持“正则表达式主机名”\n\n从 0.6.0 开始支持形如 example.* 的“通配主机名”\n\n从 0.3.18 开始支持形如 .example.org 的特殊“通配主机名”\n\n从 0.1.13 开始支持形如 *.example.org 的“通配主机名”\n\n# 参考\n\nhttps://www.jianshu.com/p/1430e4046fd9","source":"_posts/nginx/nginx的servername配置.md","raw":"---\ntitle: nginx的servername配置\ndate: 2019-12-16 17:42:19\ntags:\n- nginx\n---\n\n编译自：\n [server_names](https://link.jianshu.com?t=http://nginx.org/en/docs/http/server_names.html)\n\n**目录**：\n\n- 通配符主机名\n- 正则表达式主机名\n- 混杂主机名\n- 对主机名的优化\n- 兼容性\n\nnginx 的 server names 由 server_name 指令定义，server name 是 nginx 用于选择以哪个 server 区块处理访问请求的依据参数。可参考 《nginx 是如何处理请求的》 的描述。\n\nserver name 可以用三种方式定义：\n\n- 定义准确的名字\n- 定义通配符名字\n- 定义正则表达式名字\n\n例如：\n\n```nginx\nserver {\n    listen       80;\n    server_name  example.org  www.example.org;\n    ...\n}\n\nserver {\n    listen       80;\n    server_name  *.example.org;\n    ...\n}\n\nserver {\n    listen       80;\n    server_name  mail.*;\n    ...\n}\n\nserver {\n    listen       80;\n    server_name  ~^(?<user>.+)\\.example\\.net$;\n    ...\n}\n```\n\n当 nginx 以请求的 server name 查找匹配的虚拟主机时，如果匹配的 server 区块不止一个，nginx 按照如下的优先顺序选择 server 区块：\n\n1. 准确的主机名\n2. 以 “*” 起始的最长的通配主机名\n3. 以 “*” 结尾的最长的通配主机名\n4. 第一个匹配的正则表达式（按照配置文件中的顺序）\n\n所以，如果同时有一个通配主机名和正则表达式主机名与访问请求的 server name 匹配，nginx 会选择通配主机名的 server 区块处理请求。\n\n## 通配主机名\n\n------\n\n通配主机名只能在起始和末尾使用 “`*`” 字符，而且必须以 “`.`” 分隔。形如 “`www.*.example.org`” 或者 “`w*.example.org`” 的通配主机名是无效的。要达到这个匹配效果，只有使用正则表达式：\n\n```ruby\n“www.*.example.org” ->  “~^www\\..+\\.example\\.org$”\n“w*.example.org”    ->  “~^w.*\\.example\\.org$”\n```\n\n“`*`” 号可以匹配多个名字区域，“`*.example.org`” 不仅可以匹配 [www.example.org](https://link.jianshu.com?t=http://www.example.org)，也能够匹配 [www.sub.example.org](https://link.jianshu.com?t=http://www.sub.example.org)。\n\n## 正则表达式主机名\n\n------\n\nnginx 使用的正则表达式与 Perl 语言的正则表达式（PCRE）兼容。使用正则表达式主机名，server name 必须以 “~” 字符为起始字符。\n\n```ruby\nserver_name  ~^www\\d+\\.example\\.net$;\n```\n\n如果不以 “~” 字符为起始字符，该 server name 将被视为 “准确的主机名” 或者当 server name 包含 “`*`” 时被视为 “通配主机名” (多数情况是非法通配主机名，因为只有当 “`*`” 在 server name 的起始或结尾时才合法)。\n\n不要忘记设置 “`^`” 和 “`$`” 锚定符对主机名进行界定，这不是 nginx 的配置语法要求，而是为了使正则表达式能正确匹配。\n\n同时也要注意，域名的分隔符 “.” 在正则表达式中应该以 “\\” 引用。如果在正则表达式中使用了 “`{`” 和 “`}`” 字符，应该将整个正则表达式引用起来，因为花括弧在 nginx 配置中也有特殊意义，引用起来以避免被 nginx 错误解析。例如：\n\n```bash\nserver_name  \"~^(?<name>\\w\\d{1,3}+)\\.example\\.net$\";\n```\n\n如果不引用起来，nginx 会启动失败，并显示如下错误信息：\n\n```csharp\ndirective \"server_name\" is not terminated by \";\" in ...\n```\n\n正则表达式的 named capture （使用一个名字对匹配的字符串进行引用）可被视为一个变量，在后面的配置中使用：\n\n```ruby\nserver {\n    server_name   ~^(www\\.)?(?<domain>.+)$;\n\n    location / {\n        root   /sites/$domain;\n    }\n}\n```\n\nPCRE 库支持 named capture，有如下几种语法：\n\n```ruby\n?<name>     Perl 5.10 compatible syntax, supported since PCRE-7.0\n?'name'     Perl 5.10 compatible syntax, supported since PCRE-7.0\n?P<name>    Python compatible syntax, supported since PCRE-4.0\n```\n\n可参考：[pcre2pattern](https://link.jianshu.com?t=http://www.pcre.org/current/doc/html/pcre2pattern.html#SEC16)：\n\n```tsx\n \\d     any decimal digit\n \\D     any character that is not a decimal digit\n \\h     any horizontal white space character\n \\H     any character that is not a horizontal white space character\n \\s     any white space character\n \\S     any character that is not a white space character\n \\v     any vertical white space character\n \\V     any character that is not a vertical white space character\n \\w     any \"word\" character\n \\W     any \"non-word\" character\n```\n\n如果 nginx 启动失败，并显示如下信息：\n\n```undefined\npcre_compile() failed: unrecognized character after (?< in ...\n```\n\n这表示 PCRE 库太老旧，可尝试使用 “`?P<name>`” 替代 “`?<name>`”。\n\nnamed capture 也能以数字形式使用：\n\n```ruby\nserver {\n    server_name   ~^(www\\.)?(.+)$;\n\n    location / {\n        root   /sites/$2;\n    }\n}\n```\n\n无论如何，数字形式的使用应尽量简单，因为数字是只是顺序标识，而不是被匹配的字符串的标识，这导致数字引用很容易被覆盖。\n\n## 混杂主机名\n\n------\n\n有一些主机名是被特殊对待的。\n\n对于未定义 “Host” 请求首部的请求，如果希望在某个 server 区块中处理这样的请求，应在 server_name 指令的参数中添加 \"\" 空字符串参数：\n\n```nginx\nserver {\n    listen       80;\n    server_name  example.org  www.example.org  \"\";\n    ...\n}\n```\n\n在《nginx 是如何处理访问请求的》一文中曾经介绍过，如果 server 区块中没有定义 server_name 指令，便如同定义了 server_name \"\"。\n\n```css\nNote:\n在 0.8.48 版以前，遇到 server 区块中没有定义 server_name 指令的情况，\n会将系统的主机名设置为 server 区块的 server name，而不是自动设置 \"\" 为\nserver name。\n```\n\n在 0.9.4 版本，如果设置：`server_name $hostname`，会将系统的主机名设置为 server name。\n\n如果某个访问使用了 IP 地址 而不是 server name，“Host” 请求首部会包含 IP 地址。对于这样的请求，可使用如下的配置：\n\n```nginx\nserver {\n    listen       80;\n    server_name  example.org\n                 www.example.org\n                 \"\"\n                 192.168.1.1\n                 ;\n    ...\n}\n```\n\n下面是一个 catch-all server 区块的配置，使用了 “_” 作为 server name:\n\n```nginx\nserver {\n    listen       80  default_server;\n    server_name  _;\n    return       444;\n}\n```\n\n这个 server name 并没有什么特殊之处，它仅是一个无效的域名而已，也可以使用其他类似的名字，如 “--” and “!@#” 。\n\n0.6.25 版以前的 nginx 曾经支持一个特殊的 server name: “`*`”，这个特殊主机名被错误的解释成一个 catch-all 主机名。但它从未以一个 catch-all 或者 通配主机名工作，它的功能实际上与现在的 server_name_in_redirect 指令的功能相同：[server_name_in_redirect](https://link.jianshu.com?t=http://nginx.org/en/docs/http/ngx_http_core_module.html#server_name_in_redirect)\n\n特殊的 server name “`*`” 现在已经被弃用，应使用 server_name_in_redirect 指令。\n\n要注意的是，使用 server_name 指令无法指定 defalt server 或是 catch-all name，这是 listen 指令的属性，不是 server_name 指令的属性。可参考《nginx 是如何处理访问请求的》。\n\n我们可以定义两个 server，它们都同时监听于 *:80 端口 和 *:8080 端口，将其中一个设置为 *:80 端口的默认 server，将另一个设置为 *:8080 端口的默认 server：\n\n```nginx\nserver {\n    listen       80;\n    listen       8080  default_server;\n    server_name  example.net;\n    ...\n}\n\nserver {\n    listen       80  default_server;\n    listen       8080;\n    server_name  example.org;\n    ...\n}\n```\n\n## 对主机名的优化\n\n------\n\n准确的主机名、以 “`*`” 起始的通配主机名、以 “`*`” 结尾的通配主机名，这三种主机名被存放在三个 hash table 中。这三个 hash table 是与监听端口绑定的。hash table 的大小在配置阶段被优化，优化的目的是努力降低这些名字在 CPU 缓存中命中失败的几率。关于设置 hash table 的详细讨论请参考：[hash](https://link.jianshu.com?t=http://nginx.org/en/docs/hash.html)\n\n在匹配主机名时，首先查找“准确主机名”的 hash table，如果没有找到，会查找以 “`*`” 起始的“通配主机名”的 hash table，如果没有仍未找到，会查找以 “`*`” 结尾的“通配主机名”的 hash table。\n\n对于“通配主机名”的 hash table 的检索会更慢，因为是以主机名的域名部分去检索的。\n\n注意，对于特殊的通配主机名，形如 “.example.org”，这样的主机名是存放在“通配主机名”的 hash table 中，而不是存放在“准确主机名”的 hash table 中。\n\n如果前面都未找到，正则表达式会按写在配置文件中的顺序被测试，因此正则表达式是最慢的方法，并且没有可扩展性。\n\n因为以上这些原因，在可能的情况下最好使用 “准确的主机名”。例如，如果对于 [example.org](https://link.jianshu.com?t=http://example.org) 和 [www.example.org](https://link.jianshu.com?t=http://www.example.org) 的请求最为频繁，对他们进行显式的定义会更有效率：\n\n```nginx\nserver {\n    listen       80;\n    server_name  example.org  www.example.org  *.example.org;\n    ...\n}\n```\n\n下面的定义方法不如上面的配置有效率：\n\n```nginx\nserver {\n    listen       80;\n    server_name  .example.org;\n    ...\n}\n```\n\n如果定义了大量的主机名，或者使用了很长的主机名，应在配置文件的 http context 中调整这个两个参数：\n\n- [server_names_hash_max_size](https://link.jianshu.com?t=http://nginx.org/en/docs/http/ngx_http_core_module.html#server_names_hash_max_size)\n- [server_names_hash_bucket_size](https://link.jianshu.com?t=http://nginx.org/en/docs/http/ngx_http_core_module.html#server_names_hash_bucket_size)\n\n`server_names_hash_bucket_size` 指令的默认值可能为 32 或 64 或 其他数字，这是根据 CPU 缓存线大小而定的。如果默认值为 32，而且定义了一个 server name 为：“`too.long.server.name.example.org`” 这时 nginx 就不能启动，而且显示如下的错误信息：\n\n```undefined\ncould not build the server_names_hash,\nyou should increase server_names_hash_bucket_size: 32\n```\n\n遇到这种情况，应将默认值设置为原来的两倍：\n\n```undefined\nhttp {\n    server_names_hash_bucket_size  64;\n    ...\n```\n\n如果定义了大量的主机名，可能显示如下的错误信息：\n\n```undefined\ncould not build the server_names_hash,\nyou should increase either server_names_hash_max_size: 512\nor server_names_hash_bucket_size: 32\n```\n\n遇到这种情况，首先尝试调整 `server_names_hash_max_size` 的值，设置为大于 server name 总数的值。如果这样设置仍不能让 nginx 正常启动，或者 nginx 启动的时间变得过长，再尝试增加 `server_names_hash_bucket_size` 的值。\n\n如果一个 server 是某个监听端口唯一的 server，这时 nginx 根本不会去测试 server name，同时也不会为该监听端口构建 hash table。但其中又有一个例外，如果 server name 是正则表达式，而且正则表达式中包含了 captures，这时 nginx 不得不执行该正则表达式以获取 captures。（正则表达式的 capture 是指被圆括号引用的表达式部分，它们所匹配的字符串，可通过名字或数字引用）\n\n## 兼容性\n\n------\n\n从 0.9.4 开始支持特殊主机名 “$hostname”\n\n从 0.8.48 开始，如果 server 区块中未定义 server_name 指令，nginx 默认设定空字符串为主机名，如同定义了 server_name \"\"\n\n从 0.8.25 开始支持在“正则表达式主机名”中使用 named capture 特性\n\n从 0.7.40 开始支持在“正则表达式主机名”中使用 capture 特性\n\n从 0.7.12 开始支持 \"\" 空字符串主机名\n\n从 0.6.25 开始，支持使用“正则表达式主机名”或者“通配主机名”作为第一个主机名。\n\n从 0.6.7 开始支持“正则表达式主机名”\n\n从 0.6.0 开始支持形如 example.* 的“通配主机名”\n\n从 0.3.18 开始支持形如 .example.org 的特殊“通配主机名”\n\n从 0.1.13 开始支持形如 *.example.org 的“通配主机名”\n\n# 参考\n\nhttps://www.jianshu.com/p/1430e4046fd9","slug":"nginx/nginx的servername配置","published":1,"updated":"2020-08-27T15:25:48.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblok006o4tjecx9aexjy","content":"<p>编译自：<br> <a href=\"https://link.jianshu.com?t=http://nginx.org/en/docs/http/server_names.html\" target=\"_blank\" rel=\"noopener\">server_names</a></p>\n<p><strong>目录</strong>：</p>\n<ul>\n<li>通配符主机名</li>\n<li>正则表达式主机名</li>\n<li>混杂主机名</li>\n<li>对主机名的优化</li>\n<li>兼容性</li>\n</ul>\n<p>nginx 的 server names 由 server_name 指令定义，server name 是 nginx 用于选择以哪个 server 区块处理访问请求的依据参数。可参考 《nginx 是如何处理请求的》 的描述。</p>\n<p>server name 可以用三种方式定义：</p>\n<ul>\n<li>定义准确的名字</li>\n<li>定义通配符名字</li>\n<li>定义正则表达式名字</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  example.org  www.example.org;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  <span class=\"regexp\">*.example.org</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  <span class=\"regexp\">mail.*</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  ~^(?&lt;user&gt;.+)\\.example\\.net$;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当 nginx 以请求的 server name 查找匹配的虚拟主机时，如果匹配的 server 区块不止一个，nginx 按照如下的优先顺序选择 server 区块：</p>\n<ol>\n<li>准确的主机名</li>\n<li>以 “*” 起始的最长的通配主机名</li>\n<li>以 “*” 结尾的最长的通配主机名</li>\n<li>第一个匹配的正则表达式（按照配置文件中的顺序）</li>\n</ol>\n<p>所以，如果同时有一个通配主机名和正则表达式主机名与访问请求的 server name 匹配，nginx 会选择通配主机名的 server 区块处理请求。</p>\n<h2 id=\"通配主机名\"><a href=\"#通配主机名\" class=\"headerlink\" title=\"通配主机名\"></a>通配主机名</h2><hr>\n<p>通配主机名只能在起始和末尾使用 “<code>*</code>” 字符，而且必须以 “<code>.</code>” 分隔。形如 “<code>www.*.example.org</code>” 或者 “<code>w*.example.org</code>” 的通配主机名是无效的。要达到这个匹配效果，只有使用正则表达式：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">“www.*.example.org” -&gt;  “~^www\\..+\\.example\\.org$”</span><br><span class=\"line\">“w*.example.org”    -&gt;  “~^w.*\\.example\\.org$”</span><br></pre></td></tr></table></figure>\n<p>“<code>*</code>” 号可以匹配多个名字区域，“<code>*.example.org</code>” 不仅可以匹配 <a href=\"https://link.jianshu.com?t=http://www.example.org\" target=\"_blank\" rel=\"noopener\">www.example.org</a>，也能够匹配 <a href=\"https://link.jianshu.com?t=http://www.sub.example.org\" target=\"_blank\" rel=\"noopener\">www.sub.example.org</a>。</p>\n<h2 id=\"正则表达式主机名\"><a href=\"#正则表达式主机名\" class=\"headerlink\" title=\"正则表达式主机名\"></a>正则表达式主机名</h2><hr>\n<p>nginx 使用的正则表达式与 Perl 语言的正则表达式（PCRE）兼容。使用正则表达式主机名，server name 必须以 “~” 字符为起始字符。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server_name  ~^www\\d+\\.example\\.net$;</span><br></pre></td></tr></table></figure>\n<p>如果不以 “~” 字符为起始字符，该 server name 将被视为 “准确的主机名” 或者当 server name 包含 “<code>*</code>” 时被视为 “通配主机名” (多数情况是非法通配主机名，因为只有当 “<code>*</code>” 在 server name 的起始或结尾时才合法)。</p>\n<p>不要忘记设置 “<code>^</code>” 和 “<code>$</code>” 锚定符对主机名进行界定，这不是 nginx 的配置语法要求，而是为了使正则表达式能正确匹配。</p>\n<p>同时也要注意，域名的分隔符 “.” 在正则表达式中应该以 “\\” 引用。如果在正则表达式中使用了 “<code>{</code>” 和 “<code>}</code>” 字符，应该将整个正则表达式引用起来，因为花括弧在 nginx 配置中也有特殊意义，引用起来以避免被 nginx 错误解析。例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server_name  <span class=\"string\">\"~^(?&lt;name&gt;\\w\\d&#123;1,3&#125;+)\\.example\\.net$\"</span>;</span><br></pre></td></tr></table></figure>\n<p>如果不引用起来，nginx 会启动失败，并显示如下错误信息：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">directive <span class=\"string\">\"server_name\"</span> <span class=\"keyword\">is</span> not terminated <span class=\"keyword\">by</span> <span class=\"string\">\";\"</span> <span class=\"keyword\">in</span> ...</span><br></pre></td></tr></table></figure>\n<p>正则表达式的 named capture （使用一个名字对匹配的字符串进行引用）可被视为一个变量，在后面的配置中使用：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    server_name   ~^(www\\.)?(?&lt;domain&gt;.+)$;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /sites/$domain;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>PCRE 库支持 named capture，有如下几种语法：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?&lt;name&gt;     Perl <span class=\"number\">5.10</span> compatible syntax, supported since PCRE-<span class=\"number\">7.0</span></span><br><span class=\"line\">?'name<span class=\"string\">'     Perl 5.10 compatible syntax, supported since PCRE-7.0</span></span><br><span class=\"line\"><span class=\"string\">?P&lt;name&gt;    Python compatible syntax, supported since PCRE-4.0</span></span><br></pre></td></tr></table></figure>\n<p>可参考：<a href=\"https://link.jianshu.com?t=http://www.pcre.org/current/doc/html/pcre2pattern.html#SEC16\" target=\"_blank\" rel=\"noopener\">pcre2pattern</a>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\d     any decimal digit</span><br><span class=\"line\">\\D     any character that is not a decimal digit</span><br><span class=\"line\">\\h     any horizontal white space character</span><br><span class=\"line\">\\H     any character that is not a horizontal white space character</span><br><span class=\"line\">\\s     any white space character</span><br><span class=\"line\">\\S     any character that is not a white space character</span><br><span class=\"line\">\\v     any vertical white space character</span><br><span class=\"line\">\\V     any character that is not a vertical white space character</span><br><span class=\"line\">\\w     any &quot;word&quot; character</span><br><span class=\"line\">\\W     any &quot;non-word&quot; character</span><br></pre></td></tr></table></figure>\n<p>如果 nginx 启动失败，并显示如下信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pcre_compile() failed: unrecognized character after (?&lt; in ...</span><br></pre></td></tr></table></figure>\n<p>这表示 PCRE 库太老旧，可尝试使用 “<code>?P&lt;name&gt;</code>” 替代 “<code>?&lt;name&gt;</code>”。</p>\n<p>named capture 也能以数字形式使用：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    server_name   ~^(www\\.)?(.+)$;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /sites/$2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>无论如何，数字形式的使用应尽量简单，因为数字是只是顺序标识，而不是被匹配的字符串的标识，这导致数字引用很容易被覆盖。</p>\n<h2 id=\"混杂主机名\"><a href=\"#混杂主机名\" class=\"headerlink\" title=\"混杂主机名\"></a>混杂主机名</h2><hr>\n<p>有一些主机名是被特殊对待的。</p>\n<p>对于未定义 “Host” 请求首部的请求，如果希望在某个 server 区块中处理这样的请求，应在 server_name 指令的参数中添加 “” 空字符串参数：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  example.org  www.example.org  <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在《nginx 是如何处理访问请求的》一文中曾经介绍过，如果 server 区块中没有定义 server_name 指令，便如同定义了 server_name “”。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">Note</span>:</span><br><span class=\"line\">在 0<span class=\"selector-class\">.8</span><span class=\"selector-class\">.48</span> 版以前，遇到 <span class=\"selector-tag\">server</span> 区块中没有定义 <span class=\"selector-tag\">server_name</span> 指令的情况，</span><br><span class=\"line\">会将系统的主机名设置为 <span class=\"selector-tag\">server</span> 区块的 <span class=\"selector-tag\">server</span> <span class=\"selector-tag\">name</span>，而不是自动设置 \"\" 为</span><br><span class=\"line\"><span class=\"selector-tag\">server</span> <span class=\"selector-tag\">name</span>。</span><br></pre></td></tr></table></figure>\n<p>在 0.9.4 版本，如果设置：<code>server_name $hostname</code>，会将系统的主机名设置为 server name。</p>\n<p>如果某个访问使用了 IP 地址 而不是 server name，“Host” 请求首部会包含 IP 地址。对于这样的请求，可使用如下的配置：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  example.org</span><br><span class=\"line\">                 www.example.org</span><br><span class=\"line\">                 <span class=\"string\">\"\"</span></span><br><span class=\"line\">                 <span class=\"number\">192.168.1.1</span></span><br><span class=\"line\">                 ;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面是一个 catch-all server 区块的配置，使用了 “_” 作为 server name:</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>  default_server;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  _;</span><br><span class=\"line\">    <span class=\"attribute\">return</span>       <span class=\"number\">444</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个 server name 并没有什么特殊之处，它仅是一个无效的域名而已，也可以使用其他类似的名字，如 “–” and “!@#” 。</p>\n<p>0.6.25 版以前的 nginx 曾经支持一个特殊的 server name: “<code>*</code>”，这个特殊主机名被错误的解释成一个 catch-all 主机名。但它从未以一个 catch-all 或者 通配主机名工作，它的功能实际上与现在的 server_name_in_redirect 指令的功能相同：<a href=\"https://link.jianshu.com?t=http://nginx.org/en/docs/http/ngx_http_core_module.html#server_name_in_redirect\" target=\"_blank\" rel=\"noopener\">server_name_in_redirect</a></p>\n<p>特殊的 server name “<code>*</code>” 现在已经被弃用，应使用 server_name_in_redirect 指令。</p>\n<p>要注意的是，使用 server_name 指令无法指定 defalt server 或是 catch-all name，这是 listen 指令的属性，不是 server_name 指令的属性。可参考《nginx 是如何处理访问请求的》。</p>\n<p>我们可以定义两个 server，它们都同时监听于 <em>:80 端口 和 </em>:8080 端口，将其中一个设置为 <em>:80 端口的默认 server，将另一个设置为 </em>:8080 端口的默认 server：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">8080</span>  default_server;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  example.net;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>  default_server;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">8080</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  example.org;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"对主机名的优化\"><a href=\"#对主机名的优化\" class=\"headerlink\" title=\"对主机名的优化\"></a>对主机名的优化</h2><hr>\n<p>准确的主机名、以 “<code>*</code>” 起始的通配主机名、以 “<code>*</code>” 结尾的通配主机名，这三种主机名被存放在三个 hash table 中。这三个 hash table 是与监听端口绑定的。hash table 的大小在配置阶段被优化，优化的目的是努力降低这些名字在 CPU 缓存中命中失败的几率。关于设置 hash table 的详细讨论请参考：<a href=\"https://link.jianshu.com?t=http://nginx.org/en/docs/hash.html\" target=\"_blank\" rel=\"noopener\">hash</a></p>\n<p>在匹配主机名时，首先查找“准确主机名”的 hash table，如果没有找到，会查找以 “<code>*</code>” 起始的“通配主机名”的 hash table，如果没有仍未找到，会查找以 “<code>*</code>” 结尾的“通配主机名”的 hash table。</p>\n<p>对于“通配主机名”的 hash table 的检索会更慢，因为是以主机名的域名部分去检索的。</p>\n<p>注意，对于特殊的通配主机名，形如 “.example.org”，这样的主机名是存放在“通配主机名”的 hash table 中，而不是存放在“准确主机名”的 hash table 中。</p>\n<p>如果前面都未找到，正则表达式会按写在配置文件中的顺序被测试，因此正则表达式是最慢的方法，并且没有可扩展性。</p>\n<p>因为以上这些原因，在可能的情况下最好使用 “准确的主机名”。例如，如果对于 <a href=\"https://link.jianshu.com?t=http://example.org\" target=\"_blank\" rel=\"noopener\">example.org</a> 和 <a href=\"https://link.jianshu.com?t=http://www.example.org\" target=\"_blank\" rel=\"noopener\">www.example.org</a> 的请求最为频繁，对他们进行显式的定义会更有效率：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  example.org  www.example.org  <span class=\"regexp\">*.example.org</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面的定义方法不如上面的配置有效率：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  .example.org;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果定义了大量的主机名，或者使用了很长的主机名，应在配置文件的 http context 中调整这个两个参数：</p>\n<ul>\n<li><a href=\"https://link.jianshu.com?t=http://nginx.org/en/docs/http/ngx_http_core_module.html#server_names_hash_max_size\" target=\"_blank\" rel=\"noopener\">server_names_hash_max_size</a></li>\n<li><a href=\"https://link.jianshu.com?t=http://nginx.org/en/docs/http/ngx_http_core_module.html#server_names_hash_bucket_size\" target=\"_blank\" rel=\"noopener\">server_names_hash_bucket_size</a></li>\n</ul>\n<p><code>server_names_hash_bucket_size</code> 指令的默认值可能为 32 或 64 或 其他数字，这是根据 CPU 缓存线大小而定的。如果默认值为 32，而且定义了一个 server name 为：“<code>too.long.server.name.example.org</code>” 这时 nginx 就不能启动，而且显示如下的错误信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">could not build the server_names_hash,</span><br><span class=\"line\">you should increase server_names_hash_bucket_size: 32</span><br></pre></td></tr></table></figure>\n<p>遇到这种情况，应将默认值设置为原来的两倍：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    server_names_hash_bucket_size  64;</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n<p>如果定义了大量的主机名，可能显示如下的错误信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">could not build the server_names_hash,</span><br><span class=\"line\">you should increase either server_names_hash_max_size: 512</span><br><span class=\"line\">or server_names_hash_bucket_size: 32</span><br></pre></td></tr></table></figure>\n<p>遇到这种情况，首先尝试调整 <code>server_names_hash_max_size</code> 的值，设置为大于 server name 总数的值。如果这样设置仍不能让 nginx 正常启动，或者 nginx 启动的时间变得过长，再尝试增加 <code>server_names_hash_bucket_size</code> 的值。</p>\n<p>如果一个 server 是某个监听端口唯一的 server，这时 nginx 根本不会去测试 server name，同时也不会为该监听端口构建 hash table。但其中又有一个例外，如果 server name 是正则表达式，而且正则表达式中包含了 captures，这时 nginx 不得不执行该正则表达式以获取 captures。（正则表达式的 capture 是指被圆括号引用的表达式部分，它们所匹配的字符串，可通过名字或数字引用）</p>\n<h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><hr>\n<p>从 0.9.4 开始支持特殊主机名 “$hostname”</p>\n<p>从 0.8.48 开始，如果 server 区块中未定义 server_name 指令，nginx 默认设定空字符串为主机名，如同定义了 server_name “”</p>\n<p>从 0.8.25 开始支持在“正则表达式主机名”中使用 named capture 特性</p>\n<p>从 0.7.40 开始支持在“正则表达式主机名”中使用 capture 特性</p>\n<p>从 0.7.12 开始支持 “” 空字符串主机名</p>\n<p>从 0.6.25 开始，支持使用“正则表达式主机名”或者“通配主机名”作为第一个主机名。</p>\n<p>从 0.6.7 开始支持“正则表达式主机名”</p>\n<p>从 0.6.0 开始支持形如 example.* 的“通配主机名”</p>\n<p>从 0.3.18 开始支持形如 .example.org 的特殊“通配主机名”</p>\n<p>从 0.1.13 开始支持形如 *.example.org 的“通配主机名”</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.jianshu.com/p/1430e4046fd9\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/1430e4046fd9</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>编译自：<br> <a href=\"https://link.jianshu.com?t=http://nginx.org/en/docs/http/server_names.html\" target=\"_blank\" rel=\"noopener\">server_names</a></p>\n<p><strong>目录</strong>：</p>\n<ul>\n<li>通配符主机名</li>\n<li>正则表达式主机名</li>\n<li>混杂主机名</li>\n<li>对主机名的优化</li>\n<li>兼容性</li>\n</ul>\n<p>nginx 的 server names 由 server_name 指令定义，server name 是 nginx 用于选择以哪个 server 区块处理访问请求的依据参数。可参考 《nginx 是如何处理请求的》 的描述。</p>\n<p>server name 可以用三种方式定义：</p>\n<ul>\n<li>定义准确的名字</li>\n<li>定义通配符名字</li>\n<li>定义正则表达式名字</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  example.org  www.example.org;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  <span class=\"regexp\">*.example.org</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  <span class=\"regexp\">mail.*</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  ~^(?&lt;user&gt;.+)\\.example\\.net$;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当 nginx 以请求的 server name 查找匹配的虚拟主机时，如果匹配的 server 区块不止一个，nginx 按照如下的优先顺序选择 server 区块：</p>\n<ol>\n<li>准确的主机名</li>\n<li>以 “*” 起始的最长的通配主机名</li>\n<li>以 “*” 结尾的最长的通配主机名</li>\n<li>第一个匹配的正则表达式（按照配置文件中的顺序）</li>\n</ol>\n<p>所以，如果同时有一个通配主机名和正则表达式主机名与访问请求的 server name 匹配，nginx 会选择通配主机名的 server 区块处理请求。</p>\n<h2 id=\"通配主机名\"><a href=\"#通配主机名\" class=\"headerlink\" title=\"通配主机名\"></a>通配主机名</h2><hr>\n<p>通配主机名只能在起始和末尾使用 “<code>*</code>” 字符，而且必须以 “<code>.</code>” 分隔。形如 “<code>www.*.example.org</code>” 或者 “<code>w*.example.org</code>” 的通配主机名是无效的。要达到这个匹配效果，只有使用正则表达式：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">“www.*.example.org” -&gt;  “~^www\\..+\\.example\\.org$”</span><br><span class=\"line\">“w*.example.org”    -&gt;  “~^w.*\\.example\\.org$”</span><br></pre></td></tr></table></figure>\n<p>“<code>*</code>” 号可以匹配多个名字区域，“<code>*.example.org</code>” 不仅可以匹配 <a href=\"https://link.jianshu.com?t=http://www.example.org\" target=\"_blank\" rel=\"noopener\">www.example.org</a>，也能够匹配 <a href=\"https://link.jianshu.com?t=http://www.sub.example.org\" target=\"_blank\" rel=\"noopener\">www.sub.example.org</a>。</p>\n<h2 id=\"正则表达式主机名\"><a href=\"#正则表达式主机名\" class=\"headerlink\" title=\"正则表达式主机名\"></a>正则表达式主机名</h2><hr>\n<p>nginx 使用的正则表达式与 Perl 语言的正则表达式（PCRE）兼容。使用正则表达式主机名，server name 必须以 “~” 字符为起始字符。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server_name  ~^www\\d+\\.example\\.net$;</span><br></pre></td></tr></table></figure>\n<p>如果不以 “~” 字符为起始字符，该 server name 将被视为 “准确的主机名” 或者当 server name 包含 “<code>*</code>” 时被视为 “通配主机名” (多数情况是非法通配主机名，因为只有当 “<code>*</code>” 在 server name 的起始或结尾时才合法)。</p>\n<p>不要忘记设置 “<code>^</code>” 和 “<code>$</code>” 锚定符对主机名进行界定，这不是 nginx 的配置语法要求，而是为了使正则表达式能正确匹配。</p>\n<p>同时也要注意，域名的分隔符 “.” 在正则表达式中应该以 “\\” 引用。如果在正则表达式中使用了 “<code>{</code>” 和 “<code>}</code>” 字符，应该将整个正则表达式引用起来，因为花括弧在 nginx 配置中也有特殊意义，引用起来以避免被 nginx 错误解析。例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server_name  <span class=\"string\">\"~^(?&lt;name&gt;\\w\\d&#123;1,3&#125;+)\\.example\\.net$\"</span>;</span><br></pre></td></tr></table></figure>\n<p>如果不引用起来，nginx 会启动失败，并显示如下错误信息：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">directive <span class=\"string\">\"server_name\"</span> <span class=\"keyword\">is</span> not terminated <span class=\"keyword\">by</span> <span class=\"string\">\";\"</span> <span class=\"keyword\">in</span> ...</span><br></pre></td></tr></table></figure>\n<p>正则表达式的 named capture （使用一个名字对匹配的字符串进行引用）可被视为一个变量，在后面的配置中使用：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    server_name   ~^(www\\.)?(?&lt;domain&gt;.+)$;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /sites/$domain;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>PCRE 库支持 named capture，有如下几种语法：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?&lt;name&gt;     Perl <span class=\"number\">5.10</span> compatible syntax, supported since PCRE-<span class=\"number\">7.0</span></span><br><span class=\"line\">?'name<span class=\"string\">'     Perl 5.10 compatible syntax, supported since PCRE-7.0</span></span><br><span class=\"line\"><span class=\"string\">?P&lt;name&gt;    Python compatible syntax, supported since PCRE-4.0</span></span><br></pre></td></tr></table></figure>\n<p>可参考：<a href=\"https://link.jianshu.com?t=http://www.pcre.org/current/doc/html/pcre2pattern.html#SEC16\" target=\"_blank\" rel=\"noopener\">pcre2pattern</a>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\d     any decimal digit</span><br><span class=\"line\">\\D     any character that is not a decimal digit</span><br><span class=\"line\">\\h     any horizontal white space character</span><br><span class=\"line\">\\H     any character that is not a horizontal white space character</span><br><span class=\"line\">\\s     any white space character</span><br><span class=\"line\">\\S     any character that is not a white space character</span><br><span class=\"line\">\\v     any vertical white space character</span><br><span class=\"line\">\\V     any character that is not a vertical white space character</span><br><span class=\"line\">\\w     any &quot;word&quot; character</span><br><span class=\"line\">\\W     any &quot;non-word&quot; character</span><br></pre></td></tr></table></figure>\n<p>如果 nginx 启动失败，并显示如下信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pcre_compile() failed: unrecognized character after (?&lt; in ...</span><br></pre></td></tr></table></figure>\n<p>这表示 PCRE 库太老旧，可尝试使用 “<code>?P&lt;name&gt;</code>” 替代 “<code>?&lt;name&gt;</code>”。</p>\n<p>named capture 也能以数字形式使用：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    server_name   ~^(www\\.)?(.+)$;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /sites/$2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>无论如何，数字形式的使用应尽量简单，因为数字是只是顺序标识，而不是被匹配的字符串的标识，这导致数字引用很容易被覆盖。</p>\n<h2 id=\"混杂主机名\"><a href=\"#混杂主机名\" class=\"headerlink\" title=\"混杂主机名\"></a>混杂主机名</h2><hr>\n<p>有一些主机名是被特殊对待的。</p>\n<p>对于未定义 “Host” 请求首部的请求，如果希望在某个 server 区块中处理这样的请求，应在 server_name 指令的参数中添加 “” 空字符串参数：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  example.org  www.example.org  <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在《nginx 是如何处理访问请求的》一文中曾经介绍过，如果 server 区块中没有定义 server_name 指令，便如同定义了 server_name “”。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">Note</span>:</span><br><span class=\"line\">在 0<span class=\"selector-class\">.8</span><span class=\"selector-class\">.48</span> 版以前，遇到 <span class=\"selector-tag\">server</span> 区块中没有定义 <span class=\"selector-tag\">server_name</span> 指令的情况，</span><br><span class=\"line\">会将系统的主机名设置为 <span class=\"selector-tag\">server</span> 区块的 <span class=\"selector-tag\">server</span> <span class=\"selector-tag\">name</span>，而不是自动设置 \"\" 为</span><br><span class=\"line\"><span class=\"selector-tag\">server</span> <span class=\"selector-tag\">name</span>。</span><br></pre></td></tr></table></figure>\n<p>在 0.9.4 版本，如果设置：<code>server_name $hostname</code>，会将系统的主机名设置为 server name。</p>\n<p>如果某个访问使用了 IP 地址 而不是 server name，“Host” 请求首部会包含 IP 地址。对于这样的请求，可使用如下的配置：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  example.org</span><br><span class=\"line\">                 www.example.org</span><br><span class=\"line\">                 <span class=\"string\">\"\"</span></span><br><span class=\"line\">                 <span class=\"number\">192.168.1.1</span></span><br><span class=\"line\">                 ;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面是一个 catch-all server 区块的配置，使用了 “_” 作为 server name:</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>  default_server;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  _;</span><br><span class=\"line\">    <span class=\"attribute\">return</span>       <span class=\"number\">444</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个 server name 并没有什么特殊之处，它仅是一个无效的域名而已，也可以使用其他类似的名字，如 “–” and “!@#” 。</p>\n<p>0.6.25 版以前的 nginx 曾经支持一个特殊的 server name: “<code>*</code>”，这个特殊主机名被错误的解释成一个 catch-all 主机名。但它从未以一个 catch-all 或者 通配主机名工作，它的功能实际上与现在的 server_name_in_redirect 指令的功能相同：<a href=\"https://link.jianshu.com?t=http://nginx.org/en/docs/http/ngx_http_core_module.html#server_name_in_redirect\" target=\"_blank\" rel=\"noopener\">server_name_in_redirect</a></p>\n<p>特殊的 server name “<code>*</code>” 现在已经被弃用，应使用 server_name_in_redirect 指令。</p>\n<p>要注意的是，使用 server_name 指令无法指定 defalt server 或是 catch-all name，这是 listen 指令的属性，不是 server_name 指令的属性。可参考《nginx 是如何处理访问请求的》。</p>\n<p>我们可以定义两个 server，它们都同时监听于 <em>:80 端口 和 </em>:8080 端口，将其中一个设置为 <em>:80 端口的默认 server，将另一个设置为 </em>:8080 端口的默认 server：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">8080</span>  default_server;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  example.net;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>  default_server;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">8080</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  example.org;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"对主机名的优化\"><a href=\"#对主机名的优化\" class=\"headerlink\" title=\"对主机名的优化\"></a>对主机名的优化</h2><hr>\n<p>准确的主机名、以 “<code>*</code>” 起始的通配主机名、以 “<code>*</code>” 结尾的通配主机名，这三种主机名被存放在三个 hash table 中。这三个 hash table 是与监听端口绑定的。hash table 的大小在配置阶段被优化，优化的目的是努力降低这些名字在 CPU 缓存中命中失败的几率。关于设置 hash table 的详细讨论请参考：<a href=\"https://link.jianshu.com?t=http://nginx.org/en/docs/hash.html\" target=\"_blank\" rel=\"noopener\">hash</a></p>\n<p>在匹配主机名时，首先查找“准确主机名”的 hash table，如果没有找到，会查找以 “<code>*</code>” 起始的“通配主机名”的 hash table，如果没有仍未找到，会查找以 “<code>*</code>” 结尾的“通配主机名”的 hash table。</p>\n<p>对于“通配主机名”的 hash table 的检索会更慢，因为是以主机名的域名部分去检索的。</p>\n<p>注意，对于特殊的通配主机名，形如 “.example.org”，这样的主机名是存放在“通配主机名”的 hash table 中，而不是存放在“准确主机名”的 hash table 中。</p>\n<p>如果前面都未找到，正则表达式会按写在配置文件中的顺序被测试，因此正则表达式是最慢的方法，并且没有可扩展性。</p>\n<p>因为以上这些原因，在可能的情况下最好使用 “准确的主机名”。例如，如果对于 <a href=\"https://link.jianshu.com?t=http://example.org\" target=\"_blank\" rel=\"noopener\">example.org</a> 和 <a href=\"https://link.jianshu.com?t=http://www.example.org\" target=\"_blank\" rel=\"noopener\">www.example.org</a> 的请求最为频繁，对他们进行显式的定义会更有效率：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  example.org  www.example.org  <span class=\"regexp\">*.example.org</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面的定义方法不如上面的配置有效率：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  .example.org;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果定义了大量的主机名，或者使用了很长的主机名，应在配置文件的 http context 中调整这个两个参数：</p>\n<ul>\n<li><a href=\"https://link.jianshu.com?t=http://nginx.org/en/docs/http/ngx_http_core_module.html#server_names_hash_max_size\" target=\"_blank\" rel=\"noopener\">server_names_hash_max_size</a></li>\n<li><a href=\"https://link.jianshu.com?t=http://nginx.org/en/docs/http/ngx_http_core_module.html#server_names_hash_bucket_size\" target=\"_blank\" rel=\"noopener\">server_names_hash_bucket_size</a></li>\n</ul>\n<p><code>server_names_hash_bucket_size</code> 指令的默认值可能为 32 或 64 或 其他数字，这是根据 CPU 缓存线大小而定的。如果默认值为 32，而且定义了一个 server name 为：“<code>too.long.server.name.example.org</code>” 这时 nginx 就不能启动，而且显示如下的错误信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">could not build the server_names_hash,</span><br><span class=\"line\">you should increase server_names_hash_bucket_size: 32</span><br></pre></td></tr></table></figure>\n<p>遇到这种情况，应将默认值设置为原来的两倍：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    server_names_hash_bucket_size  64;</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n<p>如果定义了大量的主机名，可能显示如下的错误信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">could not build the server_names_hash,</span><br><span class=\"line\">you should increase either server_names_hash_max_size: 512</span><br><span class=\"line\">or server_names_hash_bucket_size: 32</span><br></pre></td></tr></table></figure>\n<p>遇到这种情况，首先尝试调整 <code>server_names_hash_max_size</code> 的值，设置为大于 server name 总数的值。如果这样设置仍不能让 nginx 正常启动，或者 nginx 启动的时间变得过长，再尝试增加 <code>server_names_hash_bucket_size</code> 的值。</p>\n<p>如果一个 server 是某个监听端口唯一的 server，这时 nginx 根本不会去测试 server name，同时也不会为该监听端口构建 hash table。但其中又有一个例外，如果 server name 是正则表达式，而且正则表达式中包含了 captures，这时 nginx 不得不执行该正则表达式以获取 captures。（正则表达式的 capture 是指被圆括号引用的表达式部分，它们所匹配的字符串，可通过名字或数字引用）</p>\n<h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><hr>\n<p>从 0.9.4 开始支持特殊主机名 “$hostname”</p>\n<p>从 0.8.48 开始，如果 server 区块中未定义 server_name 指令，nginx 默认设定空字符串为主机名，如同定义了 server_name “”</p>\n<p>从 0.8.25 开始支持在“正则表达式主机名”中使用 named capture 特性</p>\n<p>从 0.7.40 开始支持在“正则表达式主机名”中使用 capture 特性</p>\n<p>从 0.7.12 开始支持 “” 空字符串主机名</p>\n<p>从 0.6.25 开始，支持使用“正则表达式主机名”或者“通配主机名”作为第一个主机名。</p>\n<p>从 0.6.7 开始支持“正则表达式主机名”</p>\n<p>从 0.6.0 开始支持形如 example.* 的“通配主机名”</p>\n<p>从 0.3.18 开始支持形如 .example.org 的特殊“通配主机名”</p>\n<p>从 0.1.13 开始支持形如 *.example.org 的“通配主机名”</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.jianshu.com/p/1430e4046fd9\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/1430e4046fd9</a></p>\n"},{"title":"odoo模块加载机制","date":"2019-11-08T12:36:34.000Z","_content":"\n**Odoo的启动通过openerp-server脚本完成，它是系统的入口。**\n\n**然后加载配置文件openerp-server.conf 或者 openerp_serverrc；**\n\nopenerp-server.conf的主要内容：\n\n这个文件缺省是没有的，Odoo系统会有一个默认值，但是一般情况我们都需配置这个文件。\n\n启动http服务器，监听端口。\n\n**模块加载：**\n\n模块加载外层就是封装一个Registry(Mapping)对象:实际是一个字典，它包含对应的db，model等映射关系，一个DB对应一个Registry。后续的操作都会围绕这个Registry进行，将相关的数据赋值给相应的属性项。\n\n## 初始化数据库（初次运行)\n\n**1)加载base模块下的base.sql文件并执行。**\n此时数据库表为：\n\n```sql\nCREATE TABLE ir_actions (\n  id serial,\n  primary key(id)\n);\nCREATE TABLE ir_act_window (primary key(id)) INHERITS (ir_actions);\nCREATE TABLE ir_act_report_xml (primary key(id)) INHERITS (ir_actions);\nCREATE TABLE ir_act_url (primary key(id)) INHERITS (ir_actions);\nCREATE TABLE ir_act_server (primary key(id)) INHERITS (ir_actions);\nCREATE TABLE ir_act_client (primary key(id)) INHERITS (ir_actions);\n\n\nCREATE TABLE ir_model (\n  id serial,\n  model varchar NOT NULL,\n  name varchar,\n  state varchar,\n  info text,\n  primary key(id)\n);\n\nCREATE TABLE ir_model_fields (\n  id serial,\n  model varchar NOT NULL,\n  model_id integer references ir_model on delete cascade,\n  name varchar NOT NULL,\n  relation varchar,\n  select_level varchar,\n  field_description varchar,\n  ttype varchar,\n  state varchar default 'base',\n  relation_field varchar,\n  translate boolean default False,\n  serialization_field_id integer references ir_model_fields on delete cascade, \n  primary key(id)\n);\n\nCREATE TABLE res_lang (\n    id serial,\n    name VARCHAR(64) NOT NULL UNIQUE,\n    code VARCHAR(16) NOT NULL UNIQUE,\n    primary key(id)\n);\n\nCREATE TABLE res_users (\n    id serial NOT NULL,\n    active boolean default True,\n    login varchar(64) NOT NULL UNIQUE,\n    password varchar(64) default null,\n    -- No FK references below, will be added later by ORM\n    -- (when the destination rows exist)\n    company_id integer, -- references res_company,\n    partner_id integer, -- references res_partner,\n    primary key(id)\n);\n\ncreate table wkf (\n    id serial,\n    name varchar(64),\n    osv varchar(64),\n    on_create bool default false,\n    primary key(id)\n);\n\nCREATE TABLE ir_module_category (\n    id serial NOT NULL,\n    create_uid integer, -- references res_users on delete set null,\n    create_date timestamp without time zone,\n    write_date timestamp without time zone,\n    write_uid integer, -- references res_users on delete set null,\n    parent_id integer REFERENCES ir_module_category ON DELETE SET NULL,\n    name character varying(128) NOT NULL,\n    primary key(id)\n);\n\nCREATE TABLE ir_module_module (\n    id serial NOT NULL,\n    create_uid integer, -- references res_users on delete set null,\n    create_date timestamp without time zone,\n    write_date timestamp without time zone,\n    write_uid integer, -- references res_users on delete set null,\n    website character varying(256),\n    summary character varying(256),\n    name character varying(128) NOT NULL,\n    author character varying(128),\n    icon varchar,\n    state character varying(16),\n    latest_version character varying(64),\n    shortdesc character varying(256),\n    category_id integer REFERENCES ir_module_category ON DELETE SET NULL,\n    description text,\n    application boolean default False,\n    demo boolean default False,\n    web boolean DEFAULT FALSE,\n    license character varying(32),\n    sequence integer DEFAULT 100,\n    auto_install boolean default False,\n    primary key(id)\n);\nALTER TABLE ir_module_module add constraint name_uniq unique (name);\n\nCREATE TABLE ir_module_module_dependency (\n    id serial NOT NULL,\n    create_uid integer, -- references res_users on delete set null,\n    create_date timestamp without time zone,\n    write_date timestamp without time zone,\n    write_uid integer, -- references res_users on delete set null,\n    name character varying(128),\n    module_id integer REFERENCES ir_module_module ON DELETE cascade,\n    primary key(id)\n);\n\nCREATE TABLE ir_model_data (\n    id serial NOT NULL,\n    create_uid integer,\n    create_date timestamp without time zone,\n    write_date timestamp without time zone,\n    write_uid integer,\n    noupdate boolean,\n    name varchar NOT NULL,\n    date_init timestamp without time zone,\n    date_update timestamp without time zone,\n    module varchar NOT NULL,\n    model varchar NOT NULL,\n    res_id integer,\n    primary key(id)\n);\n\n-- Records foreign keys and constraints installed by a module (so they can be\n-- removed when the module is uninstalled):\n--   - for a foreign key: type is 'f',\n--   - for a constraint: type is 'u' (this is the convention PostgreSQL uses).\nCREATE TABLE ir_model_constraint (\n    id serial NOT NULL,\n    date_init timestamp without time zone,\n    date_update timestamp without time zone,\n    module integer NOT NULL references ir_module_module on delete restrict,\n    model integer NOT NULL references ir_model on delete restrict,\n    type character varying(1) NOT NULL,\n    name varchar NOT NULL,\n    primary key(id)\n);\n\n-- Records relation tables (i.e. implementing many2many) installed by a module\n-- (so they can be removed when the module is uninstalled).\nCREATE TABLE ir_model_relation (\n    id serial NOT NULL,\n    date_init timestamp without time zone,\n    date_update timestamp without time zone,\n    module integer NOT NULL references ir_module_module on delete restrict,\n    model integer NOT NULL references ir_model on delete restrict,\n    name varchar NOT NULL,\n    primary key(id)\n);  \n\nCREATE TABLE res_currency (\n    id serial,\n    name varchar NOT NULL,\n    primary key(id)\n);\n\nCREATE TABLE res_company (\n    id serial,\n    name varchar NOT NULL,\n    partner_id integer,\n    currency_id integer,\n    primary key(id)\n);\n\nCREATE TABLE res_partner (\n    id serial,\n    name varchar,\n    company_id integer,\n    primary key(id)\n);\n\n```\n\n这20张表是odoo系统级的，它是模块加载及系统运行的基础。后续模块生成的表及相关数据都可以在这20张中找到蛛丝马迹。\n## 数据库表初始化后，就可以加载模块数据（addons）到数据库了，这个也是odoo作为平台灵活的原因，所有的数据都在数据库。\n找到addons-path下所有的模块,然后一个一个的加载到数据库中。\nInfo就是load模块的__openerp__.py文件，它是一个dict。\n\n根据__openerp__.py中定义的category创建分类信息：\n将模块信息写入ir_module_module表：\n将module信息写入ir_model_data表：\n一个module要写两次ir_model_data表，\n写module的dependency表：\n\n根据依赖关系进行判断，递归更新那些需要auto_install的模块状态为“to install”。\n\n\n到目前为止，模块的加载都是在数据库级别，只是将“模块文件”信息存入数据库表，但是还没有真正加载到程序中。\nOdoo运行时查找object是通过Registry.get()获取的，而不是通过python自己的机制来找到相应的object，所以odoo在加载模块时会把模块下包含的model全部注册到models.py的module_to_models字典中。\n\n**下面的步骤就是加载模块到内存：\n\n## 加载base模块\n\n创建一个包含model层级的节点图，第二行代码将从数据库更新数据到graph中。然后调用load_module_graph方法加载模块，最终执行加载的方法：\n\n这个方法是odoo加载model的核心，通过 __import__方法加载模块，这个是python的机制，当import到某个继承了BaseModel类的class时，它的实例化将有别于python自身的实例化操作，\n后者说它根本不会通过python自身的__new__方法创建实例，所有的实例创建都是通过 _build_model 方法及元类创建，并注册到module_to_models中。通过这种方式实例化model就可以解决我们在xml中配置model时指定的继承，字段，约束等各种属性。\n\n## 标记需要加载或者更新的模块（db）\n\n## 加载被标记的模块（加载过程与加载base模块一致）\n\n##  完成及清理安装\n\n## 清理菜单\n\n## 删除卸载的模块\n\n## 核实model的view\n\n## 运行post-install测试","source":"_posts/odoo/odoo模块加载机制.md","raw":"---\ntitle: odoo模块加载机制\ndate: 2019-11-08 20:36:34\ntags:\n- odoo\n- python\n---\n\n**Odoo的启动通过openerp-server脚本完成，它是系统的入口。**\n\n**然后加载配置文件openerp-server.conf 或者 openerp_serverrc；**\n\nopenerp-server.conf的主要内容：\n\n这个文件缺省是没有的，Odoo系统会有一个默认值，但是一般情况我们都需配置这个文件。\n\n启动http服务器，监听端口。\n\n**模块加载：**\n\n模块加载外层就是封装一个Registry(Mapping)对象:实际是一个字典，它包含对应的db，model等映射关系，一个DB对应一个Registry。后续的操作都会围绕这个Registry进行，将相关的数据赋值给相应的属性项。\n\n## 初始化数据库（初次运行)\n\n**1)加载base模块下的base.sql文件并执行。**\n此时数据库表为：\n\n```sql\nCREATE TABLE ir_actions (\n  id serial,\n  primary key(id)\n);\nCREATE TABLE ir_act_window (primary key(id)) INHERITS (ir_actions);\nCREATE TABLE ir_act_report_xml (primary key(id)) INHERITS (ir_actions);\nCREATE TABLE ir_act_url (primary key(id)) INHERITS (ir_actions);\nCREATE TABLE ir_act_server (primary key(id)) INHERITS (ir_actions);\nCREATE TABLE ir_act_client (primary key(id)) INHERITS (ir_actions);\n\n\nCREATE TABLE ir_model (\n  id serial,\n  model varchar NOT NULL,\n  name varchar,\n  state varchar,\n  info text,\n  primary key(id)\n);\n\nCREATE TABLE ir_model_fields (\n  id serial,\n  model varchar NOT NULL,\n  model_id integer references ir_model on delete cascade,\n  name varchar NOT NULL,\n  relation varchar,\n  select_level varchar,\n  field_description varchar,\n  ttype varchar,\n  state varchar default 'base',\n  relation_field varchar,\n  translate boolean default False,\n  serialization_field_id integer references ir_model_fields on delete cascade, \n  primary key(id)\n);\n\nCREATE TABLE res_lang (\n    id serial,\n    name VARCHAR(64) NOT NULL UNIQUE,\n    code VARCHAR(16) NOT NULL UNIQUE,\n    primary key(id)\n);\n\nCREATE TABLE res_users (\n    id serial NOT NULL,\n    active boolean default True,\n    login varchar(64) NOT NULL UNIQUE,\n    password varchar(64) default null,\n    -- No FK references below, will be added later by ORM\n    -- (when the destination rows exist)\n    company_id integer, -- references res_company,\n    partner_id integer, -- references res_partner,\n    primary key(id)\n);\n\ncreate table wkf (\n    id serial,\n    name varchar(64),\n    osv varchar(64),\n    on_create bool default false,\n    primary key(id)\n);\n\nCREATE TABLE ir_module_category (\n    id serial NOT NULL,\n    create_uid integer, -- references res_users on delete set null,\n    create_date timestamp without time zone,\n    write_date timestamp without time zone,\n    write_uid integer, -- references res_users on delete set null,\n    parent_id integer REFERENCES ir_module_category ON DELETE SET NULL,\n    name character varying(128) NOT NULL,\n    primary key(id)\n);\n\nCREATE TABLE ir_module_module (\n    id serial NOT NULL,\n    create_uid integer, -- references res_users on delete set null,\n    create_date timestamp without time zone,\n    write_date timestamp without time zone,\n    write_uid integer, -- references res_users on delete set null,\n    website character varying(256),\n    summary character varying(256),\n    name character varying(128) NOT NULL,\n    author character varying(128),\n    icon varchar,\n    state character varying(16),\n    latest_version character varying(64),\n    shortdesc character varying(256),\n    category_id integer REFERENCES ir_module_category ON DELETE SET NULL,\n    description text,\n    application boolean default False,\n    demo boolean default False,\n    web boolean DEFAULT FALSE,\n    license character varying(32),\n    sequence integer DEFAULT 100,\n    auto_install boolean default False,\n    primary key(id)\n);\nALTER TABLE ir_module_module add constraint name_uniq unique (name);\n\nCREATE TABLE ir_module_module_dependency (\n    id serial NOT NULL,\n    create_uid integer, -- references res_users on delete set null,\n    create_date timestamp without time zone,\n    write_date timestamp without time zone,\n    write_uid integer, -- references res_users on delete set null,\n    name character varying(128),\n    module_id integer REFERENCES ir_module_module ON DELETE cascade,\n    primary key(id)\n);\n\nCREATE TABLE ir_model_data (\n    id serial NOT NULL,\n    create_uid integer,\n    create_date timestamp without time zone,\n    write_date timestamp without time zone,\n    write_uid integer,\n    noupdate boolean,\n    name varchar NOT NULL,\n    date_init timestamp without time zone,\n    date_update timestamp without time zone,\n    module varchar NOT NULL,\n    model varchar NOT NULL,\n    res_id integer,\n    primary key(id)\n);\n\n-- Records foreign keys and constraints installed by a module (so they can be\n-- removed when the module is uninstalled):\n--   - for a foreign key: type is 'f',\n--   - for a constraint: type is 'u' (this is the convention PostgreSQL uses).\nCREATE TABLE ir_model_constraint (\n    id serial NOT NULL,\n    date_init timestamp without time zone,\n    date_update timestamp without time zone,\n    module integer NOT NULL references ir_module_module on delete restrict,\n    model integer NOT NULL references ir_model on delete restrict,\n    type character varying(1) NOT NULL,\n    name varchar NOT NULL,\n    primary key(id)\n);\n\n-- Records relation tables (i.e. implementing many2many) installed by a module\n-- (so they can be removed when the module is uninstalled).\nCREATE TABLE ir_model_relation (\n    id serial NOT NULL,\n    date_init timestamp without time zone,\n    date_update timestamp without time zone,\n    module integer NOT NULL references ir_module_module on delete restrict,\n    model integer NOT NULL references ir_model on delete restrict,\n    name varchar NOT NULL,\n    primary key(id)\n);  \n\nCREATE TABLE res_currency (\n    id serial,\n    name varchar NOT NULL,\n    primary key(id)\n);\n\nCREATE TABLE res_company (\n    id serial,\n    name varchar NOT NULL,\n    partner_id integer,\n    currency_id integer,\n    primary key(id)\n);\n\nCREATE TABLE res_partner (\n    id serial,\n    name varchar,\n    company_id integer,\n    primary key(id)\n);\n\n```\n\n这20张表是odoo系统级的，它是模块加载及系统运行的基础。后续模块生成的表及相关数据都可以在这20张中找到蛛丝马迹。\n## 数据库表初始化后，就可以加载模块数据（addons）到数据库了，这个也是odoo作为平台灵活的原因，所有的数据都在数据库。\n找到addons-path下所有的模块,然后一个一个的加载到数据库中。\nInfo就是load模块的__openerp__.py文件，它是一个dict。\n\n根据__openerp__.py中定义的category创建分类信息：\n将模块信息写入ir_module_module表：\n将module信息写入ir_model_data表：\n一个module要写两次ir_model_data表，\n写module的dependency表：\n\n根据依赖关系进行判断，递归更新那些需要auto_install的模块状态为“to install”。\n\n\n到目前为止，模块的加载都是在数据库级别，只是将“模块文件”信息存入数据库表，但是还没有真正加载到程序中。\nOdoo运行时查找object是通过Registry.get()获取的，而不是通过python自己的机制来找到相应的object，所以odoo在加载模块时会把模块下包含的model全部注册到models.py的module_to_models字典中。\n\n**下面的步骤就是加载模块到内存：\n\n## 加载base模块\n\n创建一个包含model层级的节点图，第二行代码将从数据库更新数据到graph中。然后调用load_module_graph方法加载模块，最终执行加载的方法：\n\n这个方法是odoo加载model的核心，通过 __import__方法加载模块，这个是python的机制，当import到某个继承了BaseModel类的class时，它的实例化将有别于python自身的实例化操作，\n后者说它根本不会通过python自身的__new__方法创建实例，所有的实例创建都是通过 _build_model 方法及元类创建，并注册到module_to_models中。通过这种方式实例化model就可以解决我们在xml中配置model时指定的继承，字段，约束等各种属性。\n\n## 标记需要加载或者更新的模块（db）\n\n## 加载被标记的模块（加载过程与加载base模块一致）\n\n##  完成及清理安装\n\n## 清理菜单\n\n## 删除卸载的模块\n\n## 核实model的view\n\n## 运行post-install测试","slug":"odoo/odoo模块加载机制","published":1,"updated":"2020-08-27T15:25:48.712Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblol006p4tje2h04ryho","content":"<p><strong>Odoo的启动通过openerp-server脚本完成，它是系统的入口。</strong></p>\n<p><strong>然后加载配置文件openerp-server.conf 或者 openerp_serverrc；</strong></p>\n<p>openerp-server.conf的主要内容：</p>\n<p>这个文件缺省是没有的，Odoo系统会有一个默认值，但是一般情况我们都需配置这个文件。</p>\n<p>启动http服务器，监听端口。</p>\n<p><strong>模块加载：</strong></p>\n<p>模块加载外层就是封装一个Registry(Mapping)对象:实际是一个字典，它包含对应的db，model等映射关系，一个DB对应一个Registry。后续的操作都会围绕这个Registry进行，将相关的数据赋值给相应的属性项。</p>\n<h2 id=\"初始化数据库（初次运行\"><a href=\"#初始化数据库（初次运行\" class=\"headerlink\" title=\"初始化数据库（初次运行)\"></a>初始化数据库（初次运行)</h2><p><strong>1)加载base模块下的base.sql文件并执行。</strong><br>此时数据库表为：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ir_actions (</span><br><span class=\"line\">  <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span>,</span><br><span class=\"line\">  primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ir_act_window (primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)) INHERITS (ir_actions);</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ir_act_report_xml (primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)) INHERITS (ir_actions);</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ir_act_url (primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)) INHERITS (ir_actions);</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ir_act_server (primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)) INHERITS (ir_actions);</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ir_act_client (primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)) INHERITS (ir_actions);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ir_model (</span><br><span class=\"line\">  <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span>,</span><br><span class=\"line\">  <span class=\"keyword\">model</span> <span class=\"built_in\">varchar</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>,</span><br><span class=\"line\">  state <span class=\"built_in\">varchar</span>,</span><br><span class=\"line\">  info <span class=\"built_in\">text</span>,</span><br><span class=\"line\">  primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ir_model_fields (</span><br><span class=\"line\">  <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span>,</span><br><span class=\"line\">  <span class=\"keyword\">model</span> <span class=\"built_in\">varchar</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  model_id <span class=\"built_in\">integer</span> <span class=\"keyword\">references</span> ir_model <span class=\"keyword\">on</span> <span class=\"keyword\">delete</span> <span class=\"keyword\">cascade</span>,</span><br><span class=\"line\">  <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  relation <span class=\"built_in\">varchar</span>,</span><br><span class=\"line\">  select_level <span class=\"built_in\">varchar</span>,</span><br><span class=\"line\">  field_description <span class=\"built_in\">varchar</span>,</span><br><span class=\"line\">  ttype <span class=\"built_in\">varchar</span>,</span><br><span class=\"line\">  state <span class=\"built_in\">varchar</span> <span class=\"keyword\">default</span> <span class=\"string\">'base'</span>,</span><br><span class=\"line\">  relation_field <span class=\"built_in\">varchar</span>,</span><br><span class=\"line\">  <span class=\"keyword\">translate</span> <span class=\"built_in\">boolean</span> <span class=\"keyword\">default</span> <span class=\"literal\">False</span>,</span><br><span class=\"line\">  serialization_field_id <span class=\"built_in\">integer</span> <span class=\"keyword\">references</span> ir_model_fields <span class=\"keyword\">on</span> <span class=\"keyword\">delete</span> <span class=\"keyword\">cascade</span>, </span><br><span class=\"line\">  primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> res_lang (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">UNIQUE</span>,</span><br><span class=\"line\">    code <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">16</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">UNIQUE</span>,</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> res_users (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    active <span class=\"built_in\">boolean</span> <span class=\"keyword\">default</span> <span class=\"literal\">True</span>,</span><br><span class=\"line\">    login <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">UNIQUE</span>,</span><br><span class=\"line\">    <span class=\"keyword\">password</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">default</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">-- No FK references below, will be added later by ORM</span></span><br><span class=\"line\">    <span class=\"comment\">-- (when the destination rows exist)</span></span><br><span class=\"line\">    company_id <span class=\"built_in\">integer</span>, <span class=\"comment\">-- references res_company,</span></span><br><span class=\"line\">    partner_id <span class=\"built_in\">integer</span>, <span class=\"comment\">-- references res_partner,</span></span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> wkf (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>),</span><br><span class=\"line\">    osv <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>),</span><br><span class=\"line\">    on_create <span class=\"built_in\">bool</span> <span class=\"keyword\">default</span> <span class=\"literal\">false</span>,</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ir_module_category (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    create_uid <span class=\"built_in\">integer</span>, <span class=\"comment\">-- references res_users on delete set null,</span></span><br><span class=\"line\">    create_date <span class=\"built_in\">timestamp</span> <span class=\"keyword\">without</span> <span class=\"built_in\">time</span> zone,</span><br><span class=\"line\">    write_date <span class=\"built_in\">timestamp</span> <span class=\"keyword\">without</span> <span class=\"built_in\">time</span> zone,</span><br><span class=\"line\">    write_uid <span class=\"built_in\">integer</span>, <span class=\"comment\">-- references res_users on delete set null,</span></span><br><span class=\"line\">    parent_id <span class=\"built_in\">integer</span> <span class=\"keyword\">REFERENCES</span> ir_module_category <span class=\"keyword\">ON</span> <span class=\"keyword\">DELETE</span> <span class=\"keyword\">SET</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">character</span> <span class=\"built_in\">varying</span>(<span class=\"number\">128</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ir_module_module (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    create_uid <span class=\"built_in\">integer</span>, <span class=\"comment\">-- references res_users on delete set null,</span></span><br><span class=\"line\">    create_date <span class=\"built_in\">timestamp</span> <span class=\"keyword\">without</span> <span class=\"built_in\">time</span> zone,</span><br><span class=\"line\">    write_date <span class=\"built_in\">timestamp</span> <span class=\"keyword\">without</span> <span class=\"built_in\">time</span> zone,</span><br><span class=\"line\">    write_uid <span class=\"built_in\">integer</span>, <span class=\"comment\">-- references res_users on delete set null,</span></span><br><span class=\"line\">    website <span class=\"built_in\">character</span> <span class=\"built_in\">varying</span>(<span class=\"number\">256</span>),</span><br><span class=\"line\">    summary <span class=\"built_in\">character</span> <span class=\"built_in\">varying</span>(<span class=\"number\">256</span>),</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">character</span> <span class=\"built_in\">varying</span>(<span class=\"number\">128</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    author <span class=\"built_in\">character</span> <span class=\"built_in\">varying</span>(<span class=\"number\">128</span>),</span><br><span class=\"line\">    icon <span class=\"built_in\">varchar</span>,</span><br><span class=\"line\">    state <span class=\"built_in\">character</span> <span class=\"built_in\">varying</span>(<span class=\"number\">16</span>),</span><br><span class=\"line\">    latest_version <span class=\"built_in\">character</span> <span class=\"built_in\">varying</span>(<span class=\"number\">64</span>),</span><br><span class=\"line\">    shortdesc <span class=\"built_in\">character</span> <span class=\"built_in\">varying</span>(<span class=\"number\">256</span>),</span><br><span class=\"line\">    category_id <span class=\"built_in\">integer</span> <span class=\"keyword\">REFERENCES</span> ir_module_category <span class=\"keyword\">ON</span> <span class=\"keyword\">DELETE</span> <span class=\"keyword\">SET</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    description <span class=\"built_in\">text</span>,</span><br><span class=\"line\">    application <span class=\"built_in\">boolean</span> <span class=\"keyword\">default</span> <span class=\"literal\">False</span>,</span><br><span class=\"line\">    demo <span class=\"built_in\">boolean</span> <span class=\"keyword\">default</span> <span class=\"literal\">False</span>,</span><br><span class=\"line\">    web <span class=\"built_in\">boolean</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">FALSE</span>,</span><br><span class=\"line\">    license <span class=\"built_in\">character</span> <span class=\"built_in\">varying</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">    <span class=\"keyword\">sequence</span> <span class=\"built_in\">integer</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">100</span>,</span><br><span class=\"line\">    auto_install <span class=\"built_in\">boolean</span> <span class=\"keyword\">default</span> <span class=\"literal\">False</span>,</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> ir_module_module <span class=\"keyword\">add</span> <span class=\"keyword\">constraint</span> name_uniq <span class=\"keyword\">unique</span> (<span class=\"keyword\">name</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ir_module_module_dependency (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    create_uid <span class=\"built_in\">integer</span>, <span class=\"comment\">-- references res_users on delete set null,</span></span><br><span class=\"line\">    create_date <span class=\"built_in\">timestamp</span> <span class=\"keyword\">without</span> <span class=\"built_in\">time</span> zone,</span><br><span class=\"line\">    write_date <span class=\"built_in\">timestamp</span> <span class=\"keyword\">without</span> <span class=\"built_in\">time</span> zone,</span><br><span class=\"line\">    write_uid <span class=\"built_in\">integer</span>, <span class=\"comment\">-- references res_users on delete set null,</span></span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">character</span> <span class=\"built_in\">varying</span>(<span class=\"number\">128</span>),</span><br><span class=\"line\">    module_id <span class=\"built_in\">integer</span> <span class=\"keyword\">REFERENCES</span> ir_module_module <span class=\"keyword\">ON</span> <span class=\"keyword\">DELETE</span> <span class=\"keyword\">cascade</span>,</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ir_model_data (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    create_uid <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">    create_date <span class=\"built_in\">timestamp</span> <span class=\"keyword\">without</span> <span class=\"built_in\">time</span> zone,</span><br><span class=\"line\">    write_date <span class=\"built_in\">timestamp</span> <span class=\"keyword\">without</span> <span class=\"built_in\">time</span> zone,</span><br><span class=\"line\">    write_uid <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">    noupdate <span class=\"built_in\">boolean</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    date_init <span class=\"built_in\">timestamp</span> <span class=\"keyword\">without</span> <span class=\"built_in\">time</span> zone,</span><br><span class=\"line\">    date_update <span class=\"built_in\">timestamp</span> <span class=\"keyword\">without</span> <span class=\"built_in\">time</span> zone,</span><br><span class=\"line\">    <span class=\"keyword\">module</span> <span class=\"built_in\">varchar</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    <span class=\"keyword\">model</span> <span class=\"built_in\">varchar</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    res_id <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Records foreign keys and constraints installed by a module (so they can be</span></span><br><span class=\"line\"><span class=\"comment\">-- removed when the module is uninstalled):</span></span><br><span class=\"line\"><span class=\"comment\">--   - for a foreign key: type is 'f',</span></span><br><span class=\"line\"><span class=\"comment\">--   - for a constraint: type is 'u' (this is the convention PostgreSQL uses).</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ir_model_constraint (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    date_init <span class=\"built_in\">timestamp</span> <span class=\"keyword\">without</span> <span class=\"built_in\">time</span> zone,</span><br><span class=\"line\">    date_update <span class=\"built_in\">timestamp</span> <span class=\"keyword\">without</span> <span class=\"built_in\">time</span> zone,</span><br><span class=\"line\">    <span class=\"keyword\">module</span> <span class=\"built_in\">integer</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">references</span> ir_module_module <span class=\"keyword\">on</span> <span class=\"keyword\">delete</span> restrict,</span><br><span class=\"line\">    <span class=\"keyword\">model</span> <span class=\"built_in\">integer</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">references</span> ir_model <span class=\"keyword\">on</span> <span class=\"keyword\">delete</span> restrict,</span><br><span class=\"line\">    <span class=\"keyword\">type</span> <span class=\"built_in\">character</span> <span class=\"built_in\">varying</span>(<span class=\"number\">1</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Records relation tables (i.e. implementing many2many) installed by a module</span></span><br><span class=\"line\"><span class=\"comment\">-- (so they can be removed when the module is uninstalled).</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ir_model_relation (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    date_init <span class=\"built_in\">timestamp</span> <span class=\"keyword\">without</span> <span class=\"built_in\">time</span> zone,</span><br><span class=\"line\">    date_update <span class=\"built_in\">timestamp</span> <span class=\"keyword\">without</span> <span class=\"built_in\">time</span> zone,</span><br><span class=\"line\">    <span class=\"keyword\">module</span> <span class=\"built_in\">integer</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">references</span> ir_module_module <span class=\"keyword\">on</span> <span class=\"keyword\">delete</span> restrict,</span><br><span class=\"line\">    <span class=\"keyword\">model</span> <span class=\"built_in\">integer</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">references</span> ir_model <span class=\"keyword\">on</span> <span class=\"keyword\">delete</span> restrict,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> res_currency (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> res_company (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    partner_id <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">    currency_id <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> res_partner (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>,</span><br><span class=\"line\">    company_id <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>这20张表是odoo系统级的，它是模块加载及系统运行的基础。后续模块生成的表及相关数据都可以在这20张中找到蛛丝马迹。</p>\n<h2 id=\"数据库表初始化后，就可以加载模块数据（addons）到数据库了，这个也是odoo作为平台灵活的原因，所有的数据都在数据库。\"><a href=\"#数据库表初始化后，就可以加载模块数据（addons）到数据库了，这个也是odoo作为平台灵活的原因，所有的数据都在数据库。\" class=\"headerlink\" title=\"数据库表初始化后，就可以加载模块数据（addons）到数据库了，这个也是odoo作为平台灵活的原因，所有的数据都在数据库。\"></a>数据库表初始化后，就可以加载模块数据（addons）到数据库了，这个也是odoo作为平台灵活的原因，所有的数据都在数据库。</h2><p>找到addons-path下所有的模块,然后一个一个的加载到数据库中。<br>Info就是load模块的<strong>openerp</strong>.py文件，它是一个dict。</p>\n<p>根据<strong>openerp</strong>.py中定义的category创建分类信息：<br>将模块信息写入ir_module_module表：<br>将module信息写入ir_model_data表：<br>一个module要写两次ir_model_data表，<br>写module的dependency表：</p>\n<p>根据依赖关系进行判断，递归更新那些需要auto_install的模块状态为“to install”。</p>\n<p>到目前为止，模块的加载都是在数据库级别，只是将“模块文件”信息存入数据库表，但是还没有真正加载到程序中。<br>Odoo运行时查找object是通过Registry.get()获取的，而不是通过python自己的机制来找到相应的object，所以odoo在加载模块时会把模块下包含的model全部注册到models.py的module_to_models字典中。</p>\n<p>**下面的步骤就是加载模块到内存：</p>\n<h2 id=\"加载base模块\"><a href=\"#加载base模块\" class=\"headerlink\" title=\"加载base模块\"></a>加载base模块</h2><p>创建一个包含model层级的节点图，第二行代码将从数据库更新数据到graph中。然后调用load_module_graph方法加载模块，最终执行加载的方法：</p>\n<p>这个方法是odoo加载model的核心，通过 <strong>import</strong>方法加载模块，这个是python的机制，当import到某个继承了BaseModel类的class时，它的实例化将有别于python自身的实例化操作，<br>后者说它根本不会通过python自身的<strong>new</strong>方法创建实例，所有的实例创建都是通过 _build_model 方法及元类创建，并注册到module_to_models中。通过这种方式实例化model就可以解决我们在xml中配置model时指定的继承，字段，约束等各种属性。</p>\n<h2 id=\"标记需要加载或者更新的模块（db）\"><a href=\"#标记需要加载或者更新的模块（db）\" class=\"headerlink\" title=\"标记需要加载或者更新的模块（db）\"></a>标记需要加载或者更新的模块（db）</h2><h2 id=\"加载被标记的模块（加载过程与加载base模块一致）\"><a href=\"#加载被标记的模块（加载过程与加载base模块一致）\" class=\"headerlink\" title=\"加载被标记的模块（加载过程与加载base模块一致）\"></a>加载被标记的模块（加载过程与加载base模块一致）</h2><h2 id=\"完成及清理安装\"><a href=\"#完成及清理安装\" class=\"headerlink\" title=\"完成及清理安装\"></a>完成及清理安装</h2><h2 id=\"清理菜单\"><a href=\"#清理菜单\" class=\"headerlink\" title=\"清理菜单\"></a>清理菜单</h2><h2 id=\"删除卸载的模块\"><a href=\"#删除卸载的模块\" class=\"headerlink\" title=\"删除卸载的模块\"></a>删除卸载的模块</h2><h2 id=\"核实model的view\"><a href=\"#核实model的view\" class=\"headerlink\" title=\"核实model的view\"></a>核实model的view</h2><h2 id=\"运行post-install测试\"><a href=\"#运行post-install测试\" class=\"headerlink\" title=\"运行post-install测试\"></a>运行post-install测试</h2>","site":{"data":{}},"excerpt":"","more":"<p><strong>Odoo的启动通过openerp-server脚本完成，它是系统的入口。</strong></p>\n<p><strong>然后加载配置文件openerp-server.conf 或者 openerp_serverrc；</strong></p>\n<p>openerp-server.conf的主要内容：</p>\n<p>这个文件缺省是没有的，Odoo系统会有一个默认值，但是一般情况我们都需配置这个文件。</p>\n<p>启动http服务器，监听端口。</p>\n<p><strong>模块加载：</strong></p>\n<p>模块加载外层就是封装一个Registry(Mapping)对象:实际是一个字典，它包含对应的db，model等映射关系，一个DB对应一个Registry。后续的操作都会围绕这个Registry进行，将相关的数据赋值给相应的属性项。</p>\n<h2 id=\"初始化数据库（初次运行\"><a href=\"#初始化数据库（初次运行\" class=\"headerlink\" title=\"初始化数据库（初次运行)\"></a>初始化数据库（初次运行)</h2><p><strong>1)加载base模块下的base.sql文件并执行。</strong><br>此时数据库表为：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ir_actions (</span><br><span class=\"line\">  <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span>,</span><br><span class=\"line\">  primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ir_act_window (primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)) INHERITS (ir_actions);</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ir_act_report_xml (primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)) INHERITS (ir_actions);</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ir_act_url (primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)) INHERITS (ir_actions);</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ir_act_server (primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)) INHERITS (ir_actions);</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ir_act_client (primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)) INHERITS (ir_actions);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ir_model (</span><br><span class=\"line\">  <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span>,</span><br><span class=\"line\">  <span class=\"keyword\">model</span> <span class=\"built_in\">varchar</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>,</span><br><span class=\"line\">  state <span class=\"built_in\">varchar</span>,</span><br><span class=\"line\">  info <span class=\"built_in\">text</span>,</span><br><span class=\"line\">  primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ir_model_fields (</span><br><span class=\"line\">  <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span>,</span><br><span class=\"line\">  <span class=\"keyword\">model</span> <span class=\"built_in\">varchar</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  model_id <span class=\"built_in\">integer</span> <span class=\"keyword\">references</span> ir_model <span class=\"keyword\">on</span> <span class=\"keyword\">delete</span> <span class=\"keyword\">cascade</span>,</span><br><span class=\"line\">  <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  relation <span class=\"built_in\">varchar</span>,</span><br><span class=\"line\">  select_level <span class=\"built_in\">varchar</span>,</span><br><span class=\"line\">  field_description <span class=\"built_in\">varchar</span>,</span><br><span class=\"line\">  ttype <span class=\"built_in\">varchar</span>,</span><br><span class=\"line\">  state <span class=\"built_in\">varchar</span> <span class=\"keyword\">default</span> <span class=\"string\">'base'</span>,</span><br><span class=\"line\">  relation_field <span class=\"built_in\">varchar</span>,</span><br><span class=\"line\">  <span class=\"keyword\">translate</span> <span class=\"built_in\">boolean</span> <span class=\"keyword\">default</span> <span class=\"literal\">False</span>,</span><br><span class=\"line\">  serialization_field_id <span class=\"built_in\">integer</span> <span class=\"keyword\">references</span> ir_model_fields <span class=\"keyword\">on</span> <span class=\"keyword\">delete</span> <span class=\"keyword\">cascade</span>, </span><br><span class=\"line\">  primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> res_lang (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">UNIQUE</span>,</span><br><span class=\"line\">    code <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">16</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">UNIQUE</span>,</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> res_users (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    active <span class=\"built_in\">boolean</span> <span class=\"keyword\">default</span> <span class=\"literal\">True</span>,</span><br><span class=\"line\">    login <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">UNIQUE</span>,</span><br><span class=\"line\">    <span class=\"keyword\">password</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">default</span> <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"comment\">-- No FK references below, will be added later by ORM</span></span><br><span class=\"line\">    <span class=\"comment\">-- (when the destination rows exist)</span></span><br><span class=\"line\">    company_id <span class=\"built_in\">integer</span>, <span class=\"comment\">-- references res_company,</span></span><br><span class=\"line\">    partner_id <span class=\"built_in\">integer</span>, <span class=\"comment\">-- references res_partner,</span></span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> wkf (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>),</span><br><span class=\"line\">    osv <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>),</span><br><span class=\"line\">    on_create <span class=\"built_in\">bool</span> <span class=\"keyword\">default</span> <span class=\"literal\">false</span>,</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ir_module_category (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    create_uid <span class=\"built_in\">integer</span>, <span class=\"comment\">-- references res_users on delete set null,</span></span><br><span class=\"line\">    create_date <span class=\"built_in\">timestamp</span> <span class=\"keyword\">without</span> <span class=\"built_in\">time</span> zone,</span><br><span class=\"line\">    write_date <span class=\"built_in\">timestamp</span> <span class=\"keyword\">without</span> <span class=\"built_in\">time</span> zone,</span><br><span class=\"line\">    write_uid <span class=\"built_in\">integer</span>, <span class=\"comment\">-- references res_users on delete set null,</span></span><br><span class=\"line\">    parent_id <span class=\"built_in\">integer</span> <span class=\"keyword\">REFERENCES</span> ir_module_category <span class=\"keyword\">ON</span> <span class=\"keyword\">DELETE</span> <span class=\"keyword\">SET</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">character</span> <span class=\"built_in\">varying</span>(<span class=\"number\">128</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ir_module_module (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    create_uid <span class=\"built_in\">integer</span>, <span class=\"comment\">-- references res_users on delete set null,</span></span><br><span class=\"line\">    create_date <span class=\"built_in\">timestamp</span> <span class=\"keyword\">without</span> <span class=\"built_in\">time</span> zone,</span><br><span class=\"line\">    write_date <span class=\"built_in\">timestamp</span> <span class=\"keyword\">without</span> <span class=\"built_in\">time</span> zone,</span><br><span class=\"line\">    write_uid <span class=\"built_in\">integer</span>, <span class=\"comment\">-- references res_users on delete set null,</span></span><br><span class=\"line\">    website <span class=\"built_in\">character</span> <span class=\"built_in\">varying</span>(<span class=\"number\">256</span>),</span><br><span class=\"line\">    summary <span class=\"built_in\">character</span> <span class=\"built_in\">varying</span>(<span class=\"number\">256</span>),</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">character</span> <span class=\"built_in\">varying</span>(<span class=\"number\">128</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    author <span class=\"built_in\">character</span> <span class=\"built_in\">varying</span>(<span class=\"number\">128</span>),</span><br><span class=\"line\">    icon <span class=\"built_in\">varchar</span>,</span><br><span class=\"line\">    state <span class=\"built_in\">character</span> <span class=\"built_in\">varying</span>(<span class=\"number\">16</span>),</span><br><span class=\"line\">    latest_version <span class=\"built_in\">character</span> <span class=\"built_in\">varying</span>(<span class=\"number\">64</span>),</span><br><span class=\"line\">    shortdesc <span class=\"built_in\">character</span> <span class=\"built_in\">varying</span>(<span class=\"number\">256</span>),</span><br><span class=\"line\">    category_id <span class=\"built_in\">integer</span> <span class=\"keyword\">REFERENCES</span> ir_module_category <span class=\"keyword\">ON</span> <span class=\"keyword\">DELETE</span> <span class=\"keyword\">SET</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    description <span class=\"built_in\">text</span>,</span><br><span class=\"line\">    application <span class=\"built_in\">boolean</span> <span class=\"keyword\">default</span> <span class=\"literal\">False</span>,</span><br><span class=\"line\">    demo <span class=\"built_in\">boolean</span> <span class=\"keyword\">default</span> <span class=\"literal\">False</span>,</span><br><span class=\"line\">    web <span class=\"built_in\">boolean</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">FALSE</span>,</span><br><span class=\"line\">    license <span class=\"built_in\">character</span> <span class=\"built_in\">varying</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">    <span class=\"keyword\">sequence</span> <span class=\"built_in\">integer</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">100</span>,</span><br><span class=\"line\">    auto_install <span class=\"built_in\">boolean</span> <span class=\"keyword\">default</span> <span class=\"literal\">False</span>,</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> ir_module_module <span class=\"keyword\">add</span> <span class=\"keyword\">constraint</span> name_uniq <span class=\"keyword\">unique</span> (<span class=\"keyword\">name</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ir_module_module_dependency (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    create_uid <span class=\"built_in\">integer</span>, <span class=\"comment\">-- references res_users on delete set null,</span></span><br><span class=\"line\">    create_date <span class=\"built_in\">timestamp</span> <span class=\"keyword\">without</span> <span class=\"built_in\">time</span> zone,</span><br><span class=\"line\">    write_date <span class=\"built_in\">timestamp</span> <span class=\"keyword\">without</span> <span class=\"built_in\">time</span> zone,</span><br><span class=\"line\">    write_uid <span class=\"built_in\">integer</span>, <span class=\"comment\">-- references res_users on delete set null,</span></span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">character</span> <span class=\"built_in\">varying</span>(<span class=\"number\">128</span>),</span><br><span class=\"line\">    module_id <span class=\"built_in\">integer</span> <span class=\"keyword\">REFERENCES</span> ir_module_module <span class=\"keyword\">ON</span> <span class=\"keyword\">DELETE</span> <span class=\"keyword\">cascade</span>,</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ir_model_data (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    create_uid <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">    create_date <span class=\"built_in\">timestamp</span> <span class=\"keyword\">without</span> <span class=\"built_in\">time</span> zone,</span><br><span class=\"line\">    write_date <span class=\"built_in\">timestamp</span> <span class=\"keyword\">without</span> <span class=\"built_in\">time</span> zone,</span><br><span class=\"line\">    write_uid <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">    noupdate <span class=\"built_in\">boolean</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    date_init <span class=\"built_in\">timestamp</span> <span class=\"keyword\">without</span> <span class=\"built_in\">time</span> zone,</span><br><span class=\"line\">    date_update <span class=\"built_in\">timestamp</span> <span class=\"keyword\">without</span> <span class=\"built_in\">time</span> zone,</span><br><span class=\"line\">    <span class=\"keyword\">module</span> <span class=\"built_in\">varchar</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    <span class=\"keyword\">model</span> <span class=\"built_in\">varchar</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    res_id <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Records foreign keys and constraints installed by a module (so they can be</span></span><br><span class=\"line\"><span class=\"comment\">-- removed when the module is uninstalled):</span></span><br><span class=\"line\"><span class=\"comment\">--   - for a foreign key: type is 'f',</span></span><br><span class=\"line\"><span class=\"comment\">--   - for a constraint: type is 'u' (this is the convention PostgreSQL uses).</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ir_model_constraint (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    date_init <span class=\"built_in\">timestamp</span> <span class=\"keyword\">without</span> <span class=\"built_in\">time</span> zone,</span><br><span class=\"line\">    date_update <span class=\"built_in\">timestamp</span> <span class=\"keyword\">without</span> <span class=\"built_in\">time</span> zone,</span><br><span class=\"line\">    <span class=\"keyword\">module</span> <span class=\"built_in\">integer</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">references</span> ir_module_module <span class=\"keyword\">on</span> <span class=\"keyword\">delete</span> restrict,</span><br><span class=\"line\">    <span class=\"keyword\">model</span> <span class=\"built_in\">integer</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">references</span> ir_model <span class=\"keyword\">on</span> <span class=\"keyword\">delete</span> restrict,</span><br><span class=\"line\">    <span class=\"keyword\">type</span> <span class=\"built_in\">character</span> <span class=\"built_in\">varying</span>(<span class=\"number\">1</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- Records relation tables (i.e. implementing many2many) installed by a module</span></span><br><span class=\"line\"><span class=\"comment\">-- (so they can be removed when the module is uninstalled).</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> ir_model_relation (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    date_init <span class=\"built_in\">timestamp</span> <span class=\"keyword\">without</span> <span class=\"built_in\">time</span> zone,</span><br><span class=\"line\">    date_update <span class=\"built_in\">timestamp</span> <span class=\"keyword\">without</span> <span class=\"built_in\">time</span> zone,</span><br><span class=\"line\">    <span class=\"keyword\">module</span> <span class=\"built_in\">integer</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">references</span> ir_module_module <span class=\"keyword\">on</span> <span class=\"keyword\">delete</span> restrict,</span><br><span class=\"line\">    <span class=\"keyword\">model</span> <span class=\"built_in\">integer</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">references</span> ir_model <span class=\"keyword\">on</span> <span class=\"keyword\">delete</span> restrict,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> res_currency (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> res_company (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">    partner_id <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">    currency_id <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> res_partner (</span><br><span class=\"line\">    <span class=\"keyword\">id</span> <span class=\"built_in\">serial</span>,</span><br><span class=\"line\">    <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>,</span><br><span class=\"line\">    company_id <span class=\"built_in\">integer</span>,</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(<span class=\"keyword\">id</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>这20张表是odoo系统级的，它是模块加载及系统运行的基础。后续模块生成的表及相关数据都可以在这20张中找到蛛丝马迹。</p>\n<h2 id=\"数据库表初始化后，就可以加载模块数据（addons）到数据库了，这个也是odoo作为平台灵活的原因，所有的数据都在数据库。\"><a href=\"#数据库表初始化后，就可以加载模块数据（addons）到数据库了，这个也是odoo作为平台灵活的原因，所有的数据都在数据库。\" class=\"headerlink\" title=\"数据库表初始化后，就可以加载模块数据（addons）到数据库了，这个也是odoo作为平台灵活的原因，所有的数据都在数据库。\"></a>数据库表初始化后，就可以加载模块数据（addons）到数据库了，这个也是odoo作为平台灵活的原因，所有的数据都在数据库。</h2><p>找到addons-path下所有的模块,然后一个一个的加载到数据库中。<br>Info就是load模块的<strong>openerp</strong>.py文件，它是一个dict。</p>\n<p>根据<strong>openerp</strong>.py中定义的category创建分类信息：<br>将模块信息写入ir_module_module表：<br>将module信息写入ir_model_data表：<br>一个module要写两次ir_model_data表，<br>写module的dependency表：</p>\n<p>根据依赖关系进行判断，递归更新那些需要auto_install的模块状态为“to install”。</p>\n<p>到目前为止，模块的加载都是在数据库级别，只是将“模块文件”信息存入数据库表，但是还没有真正加载到程序中。<br>Odoo运行时查找object是通过Registry.get()获取的，而不是通过python自己的机制来找到相应的object，所以odoo在加载模块时会把模块下包含的model全部注册到models.py的module_to_models字典中。</p>\n<p>**下面的步骤就是加载模块到内存：</p>\n<h2 id=\"加载base模块\"><a href=\"#加载base模块\" class=\"headerlink\" title=\"加载base模块\"></a>加载base模块</h2><p>创建一个包含model层级的节点图，第二行代码将从数据库更新数据到graph中。然后调用load_module_graph方法加载模块，最终执行加载的方法：</p>\n<p>这个方法是odoo加载model的核心，通过 <strong>import</strong>方法加载模块，这个是python的机制，当import到某个继承了BaseModel类的class时，它的实例化将有别于python自身的实例化操作，<br>后者说它根本不会通过python自身的<strong>new</strong>方法创建实例，所有的实例创建都是通过 _build_model 方法及元类创建，并注册到module_to_models中。通过这种方式实例化model就可以解决我们在xml中配置model时指定的继承，字段，约束等各种属性。</p>\n<h2 id=\"标记需要加载或者更新的模块（db）\"><a href=\"#标记需要加载或者更新的模块（db）\" class=\"headerlink\" title=\"标记需要加载或者更新的模块（db）\"></a>标记需要加载或者更新的模块（db）</h2><h2 id=\"加载被标记的模块（加载过程与加载base模块一致）\"><a href=\"#加载被标记的模块（加载过程与加载base模块一致）\" class=\"headerlink\" title=\"加载被标记的模块（加载过程与加载base模块一致）\"></a>加载被标记的模块（加载过程与加载base模块一致）</h2><h2 id=\"完成及清理安装\"><a href=\"#完成及清理安装\" class=\"headerlink\" title=\"完成及清理安装\"></a>完成及清理安装</h2><h2 id=\"清理菜单\"><a href=\"#清理菜单\" class=\"headerlink\" title=\"清理菜单\"></a>清理菜单</h2><h2 id=\"删除卸载的模块\"><a href=\"#删除卸载的模块\" class=\"headerlink\" title=\"删除卸载的模块\"></a>删除卸载的模块</h2><h2 id=\"核实model的view\"><a href=\"#核实model的view\" class=\"headerlink\" title=\"核实model的view\"></a>核实model的view</h2><h2 id=\"运行post-install测试\"><a href=\"#运行post-install测试\" class=\"headerlink\" title=\"运行post-install测试\"></a>运行post-install测试</h2>"},{"title":"nginx伪静态","date":"2019-09-02T14:26:40.000Z","_content":"# 伪静态\n\n伪静态是一种可以把文件后缀改成任何可能的一种方法，如果我想把PHP文件伪静态成html文件，这种相当简单的。\nnginx里使用伪静态是直接在nginx.conf 中写规则的，而apache要开启写模块(mod_rewrite)才能进行伪静态。\nnginx只需要打开nginx.conf配置文件,然后在里面写需要的规则就可以了。\n\n**1、Nginx伪静态案例：（Nginx用伪静态是不需要配置的）**\n\n找到nginx.conf配置文件：nginx.conf，然后打开，找到server {} 在里面加上：\n\n下面加的意思是隐藏掉index.php：\n\n```nginx\nlocation / {         \n    # 其他的一些规则，自己加\n    if(!-e $request_filename) {         \n        rewrite  ^(.*)$  /index.php?s=$1  last; \n        break;  \n    }\n}\n```\n\n**2、每个网站独立的配置文件（独立的伪静态规则）：**\n\n我们正常的时候每个网站都会有独立的配置文件，直接去改配置文件就好了。然后nginx.conf引入他们所有的配置文件就好了：\n\n如：在nginx.conf配置文件最下面添加以下代码：\n\n```nginx\ninclude vhost/*.conf;\n```\n\n说明：引入nginx.conf配置文件所在目录下vhost目录下的所有以.conf的配置文件！\n\n以下就是其中一个网站的配置文件内容：规则就是隐藏掉index.php\n\n```nginx\nserver {\n        listen       80;\n        root /www/web/admin/public;\n        server_name www.admin.com;\n        index  index.html index.php index.htm;\n        error_page  400 /errpage/400.html;\n        error_page  403 /errpage/403.html;\n        error_page  404 /errpage/404.html;\n        error_page  503 /errpage/503.html;\n        location ~ \\.php$ {\n                fastcgi_pass   127.0.0.1:9000;\n                fastcgi_index  index.php;\n                include fcgi.conf;\n        }\n        location ~ /\\.ht {\n                deny  all;\n        }\n        location / { \n            if (!-e $request_filename) {\n                 rewrite  ^(.*)$  /index.php?s=$1  last;\n                 break;\n            }\n        }\n}\n```\n\n# nginx url重写\n\nurl重写是指通过配置conf文件，以让网站的url中达到某种状态时则定向/跳转到某个规则，比如常见的伪静态、301重定向、浏览器定向等\n\n## rewrite\n\n### 语法\n\n在配置文件的`server`块中写，如：\n\n```nginx\nserver {   \n    rewrite 规则 定向路径 重写类型;\n}\n```\n\n- 规则：可以是字符串或者正则来表示想匹配的目标url\n- 定向路径：表示匹配到规则后要定向的路径，如果规则里有正则，则可以使用`$index`来表示正则里的捕获分组\n- 重写类型：\n  - last ：相当于Apache里德(L)标记，表示完成rewrite，浏览器地址栏URL地址不变\n  - break；本条规则匹配完成后，终止匹配，不再匹配后面的规则，浏览器地址栏URL地址不变\n  - redirect：返回302临时重定向，浏览器地址会显示跳转后的URL地址\n  - permanent：返回301永久重定向，浏览器地址栏会显示跳转后的URL地址\n\n### 简单例子\n\n```nginx\nserver {\n    # 访问 /last.html 的时候，页面内容重写到 /index.html 中\n    rewrite /last.html /index.html last;\n    # 访问 /break.html 的时候，页面内容重写到 /index.html 中，并停止后续的匹配\n    rewrite /break.html /index.html break;\n    # 访问 /redirect.html 的时候，页面直接302定向到 /index.html中\n    rewrite /redirect.html /index.html redirect;\n    # 访问 /permanent.html 的时候，页面直接301定向到 /index.html中\n    rewrite /permanent.html /index.html permanent;\n    # 把 /html/*.html => /post/*.html ，301定向\n    rewrite ^/html/(.+?).html$ /post/$1.html permanent;\n    # 把 /search/key => /search.html?keyword=key\n    rewrite ^/search\\/([^\\/]+?)(\\/|$) /search.html?keyword=$1 permanent;\n}\n```\n\n#### last和break的区别\n\n因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里 last 和 break 区别有点难以理解：\n\n- last一般写在server和if中，而break一般使用在location中\n- last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配\n- break和last都能组织继续执行后面的rewrite指令\n\n在`location`里一旦返回`break`则直接生效并停止后续的匹配`location`\n\n```nginx\nserver {\n    location / {\n        rewrite /last/ /q.html last;\n        rewrite /break/ /q.html break;\n    }\n    location = /q.html {\n        return 400;\n    }\n}\n```\n\n- 访问`/last/`时重写到`/q.html`，然后使用新的`uri`再匹配，正好匹配到`locatoin = /q.html`然后返回了`400`\n- 访问`/break`时重写到`/q.html`，由于返回了`break`，则直接停止了\n\n## if判断\n\n只是上面的简单重写很多时候满足不了需求，比如需要判断当文件不存在时、当路径包含xx时等条件，则需要用到`if`\n\n### 语法\n\n```undefined\nif (表达式) {}\n```\n\n- 当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false\n- 直接比较变量和内容时，使用=或!=\n- ~正则表达式匹配，~*不区分大小写的匹配，!~区分大小写的不匹配\n\n一些内置的条件判断：\n\n- -f和!-f用来判断是否存在文件\n- -d和!-d用来判断是否存在目录\n- -e和!-e用来判断是否存在文件或目录\n- -x和!-x用来判断文件是否可执行\n\n### 内置的全局变量\n\n```\n$args ：这个变量等于请求行中的参数，同$query_string\n$content_length ： 请求头中的Content-length字段。\n$content_type ： 请求头中的Content-Type字段。\n$document_root ： 当前请求在root指令中指定的值。\n$host ： 请求主机头字段，否则为服务器名称。\n$http_user_agent ： 客户端agent信息\n$http_cookie ： 客户端cookie信息\n$limit_rate ： 这个变量可以限制连接速率。\n$request_method ： 客户端请求的动作，通常为GET或POST。\n$remote_addr ： 客户端的IP地址。\n$remote_port ： 客户端的端口。\n$remote_user ： 已经经过Auth Basic Module验证的用户名。\n$request_filename ： 当前请求的文件路径，由root或alias指令与URI请求生成。\n$scheme ： HTTP方法（如http，https）。\n$server_protocol ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。\n$server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。\n$server_name ： 服务器名称。\n$server_port ： 请求到达服务器的端口号。\n$request_uri ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。\n$uri ： 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。\n$document_uri ： 与$uri相同。\n```\n\n如：\n\n```stylus\n访问链接是：http://localhost:88/test1/test2/test.php \n网站路径是：/var/www/html\n$host：localhost\n$server_port：88\n$request_uri：http://localhost:88/test1/test2/test.php\n$document_uri：/test1/test2/test.php\n$document_root：/var/www/html\n$request_filename：/var/www/html/test1/test2/test.php\n```\n\n### 例子\n\n```nginx\n# 如果文件不存在则返回400\nif (!-f $request_filename) {\n    return 400;\n}\n# 如果host不是xuexb.com，则301到xuexb.com中\nif ( $host != 'xuexb.com' ){\n    rewrite ^/(.*)$ https://xuexb.com/$1 permanent;\n}\n# 如果请求类型不是POST则返回405\nif ($request_method = POST) {\n    return 405;\n}\n# 如果参数中有 a=1 则301到指定域名\nif ($args ~ a=1) {\n    rewrite ^ http://example.com/ permanent;\n}\n```\n\n在某种场景下可结合`location`规则来使用，如：\n\n```nginx\n# 访问 /test.html 时\nlocation = /test.html {\n    # 默认值为xiaowu\n    set $name xiaowu;\n    # 如果参数中有 name=xx 则使用该值\n    if ($args ~* name=(\\w+?)(&|$)) {\n        set $name $1;\n    }\n    # 301\n    rewrite ^ /$name.html permanent;\n}\n```\n\n上面表示：\n\n- /test.html => /xiaowu.html\n- /test.html?name=ok => /ok.html?name=ok\n\n## location\n\n### 语法\n\n在`server`块中使用，如：\n\n```nginx\nserver { \n    location 表达式 {    }\n}\n```\n\nlocation表达式类型\n\n- 如果直接写一个路径，则匹配该路径下的\n- ~ 表示执行一个正则匹配，区分大小写\n- ~* 表示执行一个正则匹配，不区分大小写\n- ^~ 表示普通字符匹配。使用前缀匹配。如果匹配成功，则不再匹配其他location。\n- = 进行普通字符精确匹配。也就是完全匹配。\n\n### 优先级\n\n1. 等号类型（=）的优先级最高。一旦匹配成功，则不再查找其他匹配项。\n2. ^~类型表达式。一旦匹配成功，则不再查找其他匹配项。\n3. 正则表达式类型（~ ~*）的优先级次之。如果有多个location的正则能匹配的话，则使用正则表达式最长的那个。\n4. 常规字符串匹配类型。按前缀匹配。\n\n### 例子 - 假地址掩饰真地址\n\n```nginx\nserver {\n    # 用 xxoo_admin 来掩饰 admin\n    location / {\n        # 使用break拿一旦匹配成功则忽略后续location\n        rewrite /xxoo_admin /admin break;\n    }\n    # 访问真实地址直接报没权限\n    location /admin {\n        return 403;\n    }\n}\n```\n\n# 参考\n\n<https://www.toolnb.com/tools/rewriteTools.html>","source":"_posts/nginx/nginx伪静态.md","raw":"---\ntitle: nginx伪静态\ndate: 2019-09-02 22:26:40\ntags:\n- nginx\n---\n# 伪静态\n\n伪静态是一种可以把文件后缀改成任何可能的一种方法，如果我想把PHP文件伪静态成html文件，这种相当简单的。\nnginx里使用伪静态是直接在nginx.conf 中写规则的，而apache要开启写模块(mod_rewrite)才能进行伪静态。\nnginx只需要打开nginx.conf配置文件,然后在里面写需要的规则就可以了。\n\n**1、Nginx伪静态案例：（Nginx用伪静态是不需要配置的）**\n\n找到nginx.conf配置文件：nginx.conf，然后打开，找到server {} 在里面加上：\n\n下面加的意思是隐藏掉index.php：\n\n```nginx\nlocation / {         \n    # 其他的一些规则，自己加\n    if(!-e $request_filename) {         \n        rewrite  ^(.*)$  /index.php?s=$1  last; \n        break;  \n    }\n}\n```\n\n**2、每个网站独立的配置文件（独立的伪静态规则）：**\n\n我们正常的时候每个网站都会有独立的配置文件，直接去改配置文件就好了。然后nginx.conf引入他们所有的配置文件就好了：\n\n如：在nginx.conf配置文件最下面添加以下代码：\n\n```nginx\ninclude vhost/*.conf;\n```\n\n说明：引入nginx.conf配置文件所在目录下vhost目录下的所有以.conf的配置文件！\n\n以下就是其中一个网站的配置文件内容：规则就是隐藏掉index.php\n\n```nginx\nserver {\n        listen       80;\n        root /www/web/admin/public;\n        server_name www.admin.com;\n        index  index.html index.php index.htm;\n        error_page  400 /errpage/400.html;\n        error_page  403 /errpage/403.html;\n        error_page  404 /errpage/404.html;\n        error_page  503 /errpage/503.html;\n        location ~ \\.php$ {\n                fastcgi_pass   127.0.0.1:9000;\n                fastcgi_index  index.php;\n                include fcgi.conf;\n        }\n        location ~ /\\.ht {\n                deny  all;\n        }\n        location / { \n            if (!-e $request_filename) {\n                 rewrite  ^(.*)$  /index.php?s=$1  last;\n                 break;\n            }\n        }\n}\n```\n\n# nginx url重写\n\nurl重写是指通过配置conf文件，以让网站的url中达到某种状态时则定向/跳转到某个规则，比如常见的伪静态、301重定向、浏览器定向等\n\n## rewrite\n\n### 语法\n\n在配置文件的`server`块中写，如：\n\n```nginx\nserver {   \n    rewrite 规则 定向路径 重写类型;\n}\n```\n\n- 规则：可以是字符串或者正则来表示想匹配的目标url\n- 定向路径：表示匹配到规则后要定向的路径，如果规则里有正则，则可以使用`$index`来表示正则里的捕获分组\n- 重写类型：\n  - last ：相当于Apache里德(L)标记，表示完成rewrite，浏览器地址栏URL地址不变\n  - break；本条规则匹配完成后，终止匹配，不再匹配后面的规则，浏览器地址栏URL地址不变\n  - redirect：返回302临时重定向，浏览器地址会显示跳转后的URL地址\n  - permanent：返回301永久重定向，浏览器地址栏会显示跳转后的URL地址\n\n### 简单例子\n\n```nginx\nserver {\n    # 访问 /last.html 的时候，页面内容重写到 /index.html 中\n    rewrite /last.html /index.html last;\n    # 访问 /break.html 的时候，页面内容重写到 /index.html 中，并停止后续的匹配\n    rewrite /break.html /index.html break;\n    # 访问 /redirect.html 的时候，页面直接302定向到 /index.html中\n    rewrite /redirect.html /index.html redirect;\n    # 访问 /permanent.html 的时候，页面直接301定向到 /index.html中\n    rewrite /permanent.html /index.html permanent;\n    # 把 /html/*.html => /post/*.html ，301定向\n    rewrite ^/html/(.+?).html$ /post/$1.html permanent;\n    # 把 /search/key => /search.html?keyword=key\n    rewrite ^/search\\/([^\\/]+?)(\\/|$) /search.html?keyword=$1 permanent;\n}\n```\n\n#### last和break的区别\n\n因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里 last 和 break 区别有点难以理解：\n\n- last一般写在server和if中，而break一般使用在location中\n- last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配\n- break和last都能组织继续执行后面的rewrite指令\n\n在`location`里一旦返回`break`则直接生效并停止后续的匹配`location`\n\n```nginx\nserver {\n    location / {\n        rewrite /last/ /q.html last;\n        rewrite /break/ /q.html break;\n    }\n    location = /q.html {\n        return 400;\n    }\n}\n```\n\n- 访问`/last/`时重写到`/q.html`，然后使用新的`uri`再匹配，正好匹配到`locatoin = /q.html`然后返回了`400`\n- 访问`/break`时重写到`/q.html`，由于返回了`break`，则直接停止了\n\n## if判断\n\n只是上面的简单重写很多时候满足不了需求，比如需要判断当文件不存在时、当路径包含xx时等条件，则需要用到`if`\n\n### 语法\n\n```undefined\nif (表达式) {}\n```\n\n- 当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false\n- 直接比较变量和内容时，使用=或!=\n- ~正则表达式匹配，~*不区分大小写的匹配，!~区分大小写的不匹配\n\n一些内置的条件判断：\n\n- -f和!-f用来判断是否存在文件\n- -d和!-d用来判断是否存在目录\n- -e和!-e用来判断是否存在文件或目录\n- -x和!-x用来判断文件是否可执行\n\n### 内置的全局变量\n\n```\n$args ：这个变量等于请求行中的参数，同$query_string\n$content_length ： 请求头中的Content-length字段。\n$content_type ： 请求头中的Content-Type字段。\n$document_root ： 当前请求在root指令中指定的值。\n$host ： 请求主机头字段，否则为服务器名称。\n$http_user_agent ： 客户端agent信息\n$http_cookie ： 客户端cookie信息\n$limit_rate ： 这个变量可以限制连接速率。\n$request_method ： 客户端请求的动作，通常为GET或POST。\n$remote_addr ： 客户端的IP地址。\n$remote_port ： 客户端的端口。\n$remote_user ： 已经经过Auth Basic Module验证的用户名。\n$request_filename ： 当前请求的文件路径，由root或alias指令与URI请求生成。\n$scheme ： HTTP方法（如http，https）。\n$server_protocol ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。\n$server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。\n$server_name ： 服务器名称。\n$server_port ： 请求到达服务器的端口号。\n$request_uri ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。\n$uri ： 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。\n$document_uri ： 与$uri相同。\n```\n\n如：\n\n```stylus\n访问链接是：http://localhost:88/test1/test2/test.php \n网站路径是：/var/www/html\n$host：localhost\n$server_port：88\n$request_uri：http://localhost:88/test1/test2/test.php\n$document_uri：/test1/test2/test.php\n$document_root：/var/www/html\n$request_filename：/var/www/html/test1/test2/test.php\n```\n\n### 例子\n\n```nginx\n# 如果文件不存在则返回400\nif (!-f $request_filename) {\n    return 400;\n}\n# 如果host不是xuexb.com，则301到xuexb.com中\nif ( $host != 'xuexb.com' ){\n    rewrite ^/(.*)$ https://xuexb.com/$1 permanent;\n}\n# 如果请求类型不是POST则返回405\nif ($request_method = POST) {\n    return 405;\n}\n# 如果参数中有 a=1 则301到指定域名\nif ($args ~ a=1) {\n    rewrite ^ http://example.com/ permanent;\n}\n```\n\n在某种场景下可结合`location`规则来使用，如：\n\n```nginx\n# 访问 /test.html 时\nlocation = /test.html {\n    # 默认值为xiaowu\n    set $name xiaowu;\n    # 如果参数中有 name=xx 则使用该值\n    if ($args ~* name=(\\w+?)(&|$)) {\n        set $name $1;\n    }\n    # 301\n    rewrite ^ /$name.html permanent;\n}\n```\n\n上面表示：\n\n- /test.html => /xiaowu.html\n- /test.html?name=ok => /ok.html?name=ok\n\n## location\n\n### 语法\n\n在`server`块中使用，如：\n\n```nginx\nserver { \n    location 表达式 {    }\n}\n```\n\nlocation表达式类型\n\n- 如果直接写一个路径，则匹配该路径下的\n- ~ 表示执行一个正则匹配，区分大小写\n- ~* 表示执行一个正则匹配，不区分大小写\n- ^~ 表示普通字符匹配。使用前缀匹配。如果匹配成功，则不再匹配其他location。\n- = 进行普通字符精确匹配。也就是完全匹配。\n\n### 优先级\n\n1. 等号类型（=）的优先级最高。一旦匹配成功，则不再查找其他匹配项。\n2. ^~类型表达式。一旦匹配成功，则不再查找其他匹配项。\n3. 正则表达式类型（~ ~*）的优先级次之。如果有多个location的正则能匹配的话，则使用正则表达式最长的那个。\n4. 常规字符串匹配类型。按前缀匹配。\n\n### 例子 - 假地址掩饰真地址\n\n```nginx\nserver {\n    # 用 xxoo_admin 来掩饰 admin\n    location / {\n        # 使用break拿一旦匹配成功则忽略后续location\n        rewrite /xxoo_admin /admin break;\n    }\n    # 访问真实地址直接报没权限\n    location /admin {\n        return 403;\n    }\n}\n```\n\n# 参考\n\n<https://www.toolnb.com/tools/rewriteTools.html>","slug":"nginx/nginx伪静态","published":1,"updated":"2019-09-02T14:46:20.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblol006r4tjesx5zckoz","content":"<h1 id=\"伪静态\"><a href=\"#伪静态\" class=\"headerlink\" title=\"伪静态\"></a>伪静态</h1><p>伪静态是一种可以把文件后缀改成任何可能的一种方法，如果我想把PHP文件伪静态成html文件，这种相当简单的。<br>nginx里使用伪静态是直接在nginx.conf 中写规则的，而apache要开启写模块(mod_rewrite)才能进行伪静态。<br>nginx只需要打开nginx.conf配置文件,然后在里面写需要的规则就可以了。</p>\n<p><strong>1、Nginx伪静态案例：（Nginx用伪静态是不需要配置的）</strong></p>\n<p>找到nginx.conf配置文件：nginx.conf，然后打开，找到server {} 在里面加上：</p>\n<p>下面加的意思是隐藏掉index.php：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> / &#123;         </span><br><span class=\"line\">    <span class=\"comment\"># 其他的一些规则，自己加</span></span><br><span class=\"line\">    if(!-e $request_filename) &#123;         </span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span> <span class=\"regexp\"> ^(.*)$</span>  /index.php?s=<span class=\"variable\">$1</span>  <span class=\"literal\">last</span>; </span><br><span class=\"line\">        break;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2、每个网站独立的配置文件（独立的伪静态规则）：</strong></p>\n<p>我们正常的时候每个网站都会有独立的配置文件，直接去改配置文件就好了。然后nginx.conf引入他们所有的配置文件就好了：</p>\n<p>如：在nginx.conf配置文件最下面添加以下代码：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">include</span> vhost/<span class=\"regexp\">*.conf</span>;</span><br></pre></td></tr></table></figure>\n<p>说明：引入nginx.conf配置文件所在目录下vhost目录下的所有以.conf的配置文件！</p>\n<p>以下就是其中一个网站的配置文件内容：规则就是隐藏掉index.php</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">        <span class=\"attribute\">root</span> /www/web/admin/public;</span><br><span class=\"line\">        <span class=\"attribute\">server_name</span> www.admin.com;</span><br><span class=\"line\">        <span class=\"attribute\">index</span>  index.html index.php index.htm;</span><br><span class=\"line\">        <span class=\"attribute\">error_page</span>  <span class=\"number\">400</span> /errpage/<span class=\"number\">400</span>.html;</span><br><span class=\"line\">        <span class=\"attribute\">error_page</span>  <span class=\"number\">403</span> /errpage/<span class=\"number\">403</span>.html;</span><br><span class=\"line\">        <span class=\"attribute\">error_page</span>  <span class=\"number\">404</span> /errpage/<span class=\"number\">404</span>.html;</span><br><span class=\"line\">        <span class=\"attribute\">error_page</span>  <span class=\"number\">503</span> /errpage/<span class=\"number\">503</span>.html;</span><br><span class=\"line\">        <span class=\"attribute\">location</span> <span class=\"regexp\">~ \\.php$</span> &#123;</span><br><span class=\"line\">                <span class=\"attribute\">fastcgi_pass</span>   <span class=\"number\">127.0.0.1:9000</span>;</span><br><span class=\"line\">                <span class=\"attribute\">fastcgi_index</span>  index.php;</span><br><span class=\"line\">                <span class=\"attribute\">include</span> fcgi.conf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"attribute\">location</span> <span class=\"regexp\">~ /\\.ht</span> &#123;</span><br><span class=\"line\">                <span class=\"attribute\">deny</span>  all;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">            <span class=\"attribute\">if</span> (!-e <span class=\"variable\">$request_filename</span>) &#123;</span><br><span class=\"line\">                 <span class=\"attribute\">rewrite</span> <span class=\"regexp\"> ^(.*)$</span>  /index.php?s=<span class=\"variable\">$1</span>  <span class=\"literal\">last</span>;</span><br><span class=\"line\">                 break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"nginx-url重写\"><a href=\"#nginx-url重写\" class=\"headerlink\" title=\"nginx url重写\"></a>nginx url重写</h1><p>url重写是指通过配置conf文件，以让网站的url中达到某种状态时则定向/跳转到某个规则，比如常见的伪静态、301重定向、浏览器定向等</p>\n<h2 id=\"rewrite\"><a href=\"#rewrite\" class=\"headerlink\" title=\"rewrite\"></a>rewrite</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>在配置文件的<code>server</code>块中写，如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;   </span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span> 规则 定向路径 重写类型;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>规则：可以是字符串或者正则来表示想匹配的目标url</li>\n<li>定向路径：表示匹配到规则后要定向的路径，如果规则里有正则，则可以使用<code>$index</code>来表示正则里的捕获分组</li>\n<li>重写类型：<ul>\n<li>last ：相当于Apache里德(L)标记，表示完成rewrite，浏览器地址栏URL地址不变</li>\n<li>break；本条规则匹配完成后，终止匹配，不再匹配后面的规则，浏览器地址栏URL地址不变</li>\n<li>redirect：返回302临时重定向，浏览器地址会显示跳转后的URL地址</li>\n<li>permanent：返回301永久重定向，浏览器地址栏会显示跳转后的URL地址</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 访问 /last.html 的时候，页面内容重写到 /index.html 中</span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span> /last.html /index.html <span class=\"literal\">last</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 访问 /break.html 的时候，页面内容重写到 /index.html 中，并停止后续的匹配</span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span> /break.html /index.html <span class=\"literal\">break</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 访问 /redirect.html 的时候，页面直接302定向到 /index.html中</span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span> /redirect.html /index.html <span class=\"literal\">redirect</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 访问 /permanent.html 的时候，页面直接301定向到 /index.html中</span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span> /permanent.html /index.html <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 把 /html/*.html =&gt; /post/*.html ，301定向</span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/html/(.+?).html$</span> /post/<span class=\"variable\">$1</span>.html <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 把 /search/key =&gt; /search.html?keyword=key</span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/search\\/([^\\/]+?)(\\/|$)</span> /search.html?keyword=<span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"last和break的区别\"><a href=\"#last和break的区别\" class=\"headerlink\" title=\"last和break的区别\"></a>last和break的区别</h4><p>因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里 last 和 break 区别有点难以理解：</p>\n<ul>\n<li>last一般写在server和if中，而break一般使用在location中</li>\n<li>last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配</li>\n<li>break和last都能组织继续执行后面的rewrite指令</li>\n</ul>\n<p>在<code>location</code>里一旦返回<code>break</code>则直接生效并停止后续的匹配<code>location</code></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span> /last/ /q.html <span class=\"literal\">last</span>;</span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span> /break/ /q.html <span class=\"literal\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> = /q.html &#123;</span><br><span class=\"line\">        <span class=\"attribute\">return</span> <span class=\"number\">400</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>访问<code>/last/</code>时重写到<code>/q.html</code>，然后使用新的<code>uri</code>再匹配，正好匹配到<code>locatoin = /q.html</code>然后返回了<code>400</code></li>\n<li>访问<code>/break</code>时重写到<code>/q.html</code>，由于返回了<code>break</code>，则直接停止了</li>\n</ul>\n<h2 id=\"if判断\"><a href=\"#if判断\" class=\"headerlink\" title=\"if判断\"></a>if判断</h2><p>只是上面的简单重写很多时候满足不了需求，比如需要判断当文件不存在时、当路径包含xx时等条件，则需要用到<code>if</code></p>\n<h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (表达式) &#123;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false</li>\n<li>直接比较变量和内容时，使用=或!=</li>\n<li>~正则表达式匹配，~*不区分大小写的匹配，!~区分大小写的不匹配</li>\n</ul>\n<p>一些内置的条件判断：</p>\n<ul>\n<li>-f和!-f用来判断是否存在文件</li>\n<li>-d和!-d用来判断是否存在目录</li>\n<li>-e和!-e用来判断是否存在文件或目录</li>\n<li>-x和!-x用来判断文件是否可执行</li>\n</ul>\n<h3 id=\"内置的全局变量\"><a href=\"#内置的全局变量\" class=\"headerlink\" title=\"内置的全局变量\"></a>内置的全局变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$args ：这个变量等于请求行中的参数，同$query_string</span><br><span class=\"line\">$content_length ： 请求头中的Content-length字段。</span><br><span class=\"line\">$content_type ： 请求头中的Content-Type字段。</span><br><span class=\"line\">$document_root ： 当前请求在root指令中指定的值。</span><br><span class=\"line\">$host ： 请求主机头字段，否则为服务器名称。</span><br><span class=\"line\">$http_user_agent ： 客户端agent信息</span><br><span class=\"line\">$http_cookie ： 客户端cookie信息</span><br><span class=\"line\">$limit_rate ： 这个变量可以限制连接速率。</span><br><span class=\"line\">$request_method ： 客户端请求的动作，通常为GET或POST。</span><br><span class=\"line\">$remote_addr ： 客户端的IP地址。</span><br><span class=\"line\">$remote_port ： 客户端的端口。</span><br><span class=\"line\">$remote_user ： 已经经过Auth Basic Module验证的用户名。</span><br><span class=\"line\">$request_filename ： 当前请求的文件路径，由root或alias指令与URI请求生成。</span><br><span class=\"line\">$scheme ： HTTP方法（如http，https）。</span><br><span class=\"line\">$server_protocol ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</span><br><span class=\"line\">$server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。</span><br><span class=\"line\">$server_name ： 服务器名称。</span><br><span class=\"line\">$server_port ： 请求到达服务器的端口号。</span><br><span class=\"line\">$request_uri ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。</span><br><span class=\"line\">$uri ： 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。</span><br><span class=\"line\">$document_uri ： 与$uri相同。</span><br></pre></td></tr></table></figure>\n<p>如：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">访问链接是：http:<span class=\"comment\">//localhost:88/test1/test2/test.php </span></span><br><span class=\"line\">网站路径是：/var/www/html</span><br><span class=\"line\"><span class=\"variable\">$host</span>：localhost</span><br><span class=\"line\"><span class=\"variable\">$server_port</span>：<span class=\"number\">88</span></span><br><span class=\"line\"><span class=\"variable\">$request_uri</span>：http:<span class=\"comment\">//localhost:88/test1/test2/test.php</span></span><br><span class=\"line\"><span class=\"variable\">$document_uri</span>：/test1/test2/test.php</span><br><span class=\"line\"><span class=\"variable\">$document_root</span>：/var/www/html</span><br><span class=\"line\"><span class=\"variable\">$request_filename</span>：/var/www/html/test1/test2/test.php</span><br></pre></td></tr></table></figure>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果文件不存在则返回400</span></span><br><span class=\"line\"><span class=\"attribute\">if</span> (!-f <span class=\"variable\">$request_filename</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">400</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 如果host不是xuexb.com，则301到xuexb.com中</span></span><br><span class=\"line\"><span class=\"attribute\">if</span> ( <span class=\"variable\">$host</span> != <span class=\"string\">'xuexb.com'</span> )&#123;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/(.*)$</span> https://xuexb.com/<span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 如果请求类型不是POST则返回405</span></span><br><span class=\"line\"><span class=\"attribute\">if</span> (<span class=\"variable\">$request_method</span> = POST) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">405</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 如果参数中有 a=1 则301到指定域名</span></span><br><span class=\"line\"><span class=\"attribute\">if</span> (<span class=\"variable\">$args</span> <span class=\"regexp\">~ a=1)</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^</span> http://example.com/ <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在某种场景下可结合<code>location</code>规则来使用，如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 访问 /test.html 时</span></span><br><span class=\"line\"><span class=\"attribute\">location</span> = /test.html &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 默认值为xiaowu</span></span><br><span class=\"line\">    <span class=\"attribute\">set</span> <span class=\"variable\">$name</span> xiaowu;</span><br><span class=\"line\">    <span class=\"comment\"># 如果参数中有 name=xx 则使用该值</span></span><br><span class=\"line\">    <span class=\"attribute\">if</span> (<span class=\"variable\">$args</span> <span class=\"regexp\">~* name=(\\w+?)(&amp;|$))</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">set</span> <span class=\"variable\">$name</span> <span class=\"variable\">$1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># 301</span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^</span> /<span class=\"variable\">$name</span>.html <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面表示：</p>\n<ul>\n<li>/test.html =&gt; /xiaowu.html</li>\n<li>/test.html?name=ok =&gt; /ok.html?name=ok</li>\n</ul>\n<h2 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h2><h3 id=\"语法-2\"><a href=\"#语法-2\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>在<code>server</code>块中使用，如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">location</span> 表达式 &#123;    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>location表达式类型</p>\n<ul>\n<li>如果直接写一个路径，则匹配该路径下的</li>\n<li>~ 表示执行一个正则匹配，区分大小写</li>\n<li>~* 表示执行一个正则匹配，不区分大小写</li>\n<li>^~ 表示普通字符匹配。使用前缀匹配。如果匹配成功，则不再匹配其他location。</li>\n<li>= 进行普通字符精确匹配。也就是完全匹配。</li>\n</ul>\n<h3 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h3><ol>\n<li>等号类型（=）的优先级最高。一旦匹配成功，则不再查找其他匹配项。</li>\n<li>^~类型表达式。一旦匹配成功，则不再查找其他匹配项。</li>\n<li>正则表达式类型（~ ~*）的优先级次之。如果有多个location的正则能匹配的话，则使用正则表达式最长的那个。</li>\n<li>常规字符串匹配类型。按前缀匹配。</li>\n</ol>\n<h3 id=\"例子-假地址掩饰真地址\"><a href=\"#例子-假地址掩饰真地址\" class=\"headerlink\" title=\"例子 - 假地址掩饰真地址\"></a>例子 - 假地址掩饰真地址</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 用 xxoo_admin 来掩饰 admin</span></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"comment\"># 使用break拿一旦匹配成功则忽略后续location</span></span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span> /xxoo_admin /admin <span class=\"literal\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># 访问真实地址直接报没权限</span></span><br><span class=\"line\">    <span class=\"attribute\">location</span> /admin &#123;</span><br><span class=\"line\">        <span class=\"attribute\">return</span> <span class=\"number\">403</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.toolnb.com/tools/rewriteTools.html\" target=\"_blank\" rel=\"noopener\">https://www.toolnb.com/tools/rewriteTools.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"伪静态\"><a href=\"#伪静态\" class=\"headerlink\" title=\"伪静态\"></a>伪静态</h1><p>伪静态是一种可以把文件后缀改成任何可能的一种方法，如果我想把PHP文件伪静态成html文件，这种相当简单的。<br>nginx里使用伪静态是直接在nginx.conf 中写规则的，而apache要开启写模块(mod_rewrite)才能进行伪静态。<br>nginx只需要打开nginx.conf配置文件,然后在里面写需要的规则就可以了。</p>\n<p><strong>1、Nginx伪静态案例：（Nginx用伪静态是不需要配置的）</strong></p>\n<p>找到nginx.conf配置文件：nginx.conf，然后打开，找到server {} 在里面加上：</p>\n<p>下面加的意思是隐藏掉index.php：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> / &#123;         </span><br><span class=\"line\">    <span class=\"comment\"># 其他的一些规则，自己加</span></span><br><span class=\"line\">    if(!-e $request_filename) &#123;         </span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span> <span class=\"regexp\"> ^(.*)$</span>  /index.php?s=<span class=\"variable\">$1</span>  <span class=\"literal\">last</span>; </span><br><span class=\"line\">        break;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2、每个网站独立的配置文件（独立的伪静态规则）：</strong></p>\n<p>我们正常的时候每个网站都会有独立的配置文件，直接去改配置文件就好了。然后nginx.conf引入他们所有的配置文件就好了：</p>\n<p>如：在nginx.conf配置文件最下面添加以下代码：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">include</span> vhost/<span class=\"regexp\">*.conf</span>;</span><br></pre></td></tr></table></figure>\n<p>说明：引入nginx.conf配置文件所在目录下vhost目录下的所有以.conf的配置文件！</p>\n<p>以下就是其中一个网站的配置文件内容：规则就是隐藏掉index.php</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">        <span class=\"attribute\">root</span> /www/web/admin/public;</span><br><span class=\"line\">        <span class=\"attribute\">server_name</span> www.admin.com;</span><br><span class=\"line\">        <span class=\"attribute\">index</span>  index.html index.php index.htm;</span><br><span class=\"line\">        <span class=\"attribute\">error_page</span>  <span class=\"number\">400</span> /errpage/<span class=\"number\">400</span>.html;</span><br><span class=\"line\">        <span class=\"attribute\">error_page</span>  <span class=\"number\">403</span> /errpage/<span class=\"number\">403</span>.html;</span><br><span class=\"line\">        <span class=\"attribute\">error_page</span>  <span class=\"number\">404</span> /errpage/<span class=\"number\">404</span>.html;</span><br><span class=\"line\">        <span class=\"attribute\">error_page</span>  <span class=\"number\">503</span> /errpage/<span class=\"number\">503</span>.html;</span><br><span class=\"line\">        <span class=\"attribute\">location</span> <span class=\"regexp\">~ \\.php$</span> &#123;</span><br><span class=\"line\">                <span class=\"attribute\">fastcgi_pass</span>   <span class=\"number\">127.0.0.1:9000</span>;</span><br><span class=\"line\">                <span class=\"attribute\">fastcgi_index</span>  index.php;</span><br><span class=\"line\">                <span class=\"attribute\">include</span> fcgi.conf;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"attribute\">location</span> <span class=\"regexp\">~ /\\.ht</span> &#123;</span><br><span class=\"line\">                <span class=\"attribute\">deny</span>  all;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">            <span class=\"attribute\">if</span> (!-e <span class=\"variable\">$request_filename</span>) &#123;</span><br><span class=\"line\">                 <span class=\"attribute\">rewrite</span> <span class=\"regexp\"> ^(.*)$</span>  /index.php?s=<span class=\"variable\">$1</span>  <span class=\"literal\">last</span>;</span><br><span class=\"line\">                 break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"nginx-url重写\"><a href=\"#nginx-url重写\" class=\"headerlink\" title=\"nginx url重写\"></a>nginx url重写</h1><p>url重写是指通过配置conf文件，以让网站的url中达到某种状态时则定向/跳转到某个规则，比如常见的伪静态、301重定向、浏览器定向等</p>\n<h2 id=\"rewrite\"><a href=\"#rewrite\" class=\"headerlink\" title=\"rewrite\"></a>rewrite</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>在配置文件的<code>server</code>块中写，如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;   </span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span> 规则 定向路径 重写类型;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>规则：可以是字符串或者正则来表示想匹配的目标url</li>\n<li>定向路径：表示匹配到规则后要定向的路径，如果规则里有正则，则可以使用<code>$index</code>来表示正则里的捕获分组</li>\n<li>重写类型：<ul>\n<li>last ：相当于Apache里德(L)标记，表示完成rewrite，浏览器地址栏URL地址不变</li>\n<li>break；本条规则匹配完成后，终止匹配，不再匹配后面的规则，浏览器地址栏URL地址不变</li>\n<li>redirect：返回302临时重定向，浏览器地址会显示跳转后的URL地址</li>\n<li>permanent：返回301永久重定向，浏览器地址栏会显示跳转后的URL地址</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 访问 /last.html 的时候，页面内容重写到 /index.html 中</span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span> /last.html /index.html <span class=\"literal\">last</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 访问 /break.html 的时候，页面内容重写到 /index.html 中，并停止后续的匹配</span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span> /break.html /index.html <span class=\"literal\">break</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 访问 /redirect.html 的时候，页面直接302定向到 /index.html中</span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span> /redirect.html /index.html <span class=\"literal\">redirect</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 访问 /permanent.html 的时候，页面直接301定向到 /index.html中</span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span> /permanent.html /index.html <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 把 /html/*.html =&gt; /post/*.html ，301定向</span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/html/(.+?).html$</span> /post/<span class=\"variable\">$1</span>.html <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">    <span class=\"comment\"># 把 /search/key =&gt; /search.html?keyword=key</span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/search\\/([^\\/]+?)(\\/|$)</span> /search.html?keyword=<span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"last和break的区别\"><a href=\"#last和break的区别\" class=\"headerlink\" title=\"last和break的区别\"></a>last和break的区别</h4><p>因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里 last 和 break 区别有点难以理解：</p>\n<ul>\n<li>last一般写在server和if中，而break一般使用在location中</li>\n<li>last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配</li>\n<li>break和last都能组织继续执行后面的rewrite指令</li>\n</ul>\n<p>在<code>location</code>里一旦返回<code>break</code>则直接生效并停止后续的匹配<code>location</code></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span> /last/ /q.html <span class=\"literal\">last</span>;</span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span> /break/ /q.html <span class=\"literal\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> = /q.html &#123;</span><br><span class=\"line\">        <span class=\"attribute\">return</span> <span class=\"number\">400</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>访问<code>/last/</code>时重写到<code>/q.html</code>，然后使用新的<code>uri</code>再匹配，正好匹配到<code>locatoin = /q.html</code>然后返回了<code>400</code></li>\n<li>访问<code>/break</code>时重写到<code>/q.html</code>，由于返回了<code>break</code>，则直接停止了</li>\n</ul>\n<h2 id=\"if判断\"><a href=\"#if判断\" class=\"headerlink\" title=\"if判断\"></a>if判断</h2><p>只是上面的简单重写很多时候满足不了需求，比如需要判断当文件不存在时、当路径包含xx时等条件，则需要用到<code>if</code></p>\n<h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (表达式) &#123;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false</li>\n<li>直接比较变量和内容时，使用=或!=</li>\n<li>~正则表达式匹配，~*不区分大小写的匹配，!~区分大小写的不匹配</li>\n</ul>\n<p>一些内置的条件判断：</p>\n<ul>\n<li>-f和!-f用来判断是否存在文件</li>\n<li>-d和!-d用来判断是否存在目录</li>\n<li>-e和!-e用来判断是否存在文件或目录</li>\n<li>-x和!-x用来判断文件是否可执行</li>\n</ul>\n<h3 id=\"内置的全局变量\"><a href=\"#内置的全局变量\" class=\"headerlink\" title=\"内置的全局变量\"></a>内置的全局变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$args ：这个变量等于请求行中的参数，同$query_string</span><br><span class=\"line\">$content_length ： 请求头中的Content-length字段。</span><br><span class=\"line\">$content_type ： 请求头中的Content-Type字段。</span><br><span class=\"line\">$document_root ： 当前请求在root指令中指定的值。</span><br><span class=\"line\">$host ： 请求主机头字段，否则为服务器名称。</span><br><span class=\"line\">$http_user_agent ： 客户端agent信息</span><br><span class=\"line\">$http_cookie ： 客户端cookie信息</span><br><span class=\"line\">$limit_rate ： 这个变量可以限制连接速率。</span><br><span class=\"line\">$request_method ： 客户端请求的动作，通常为GET或POST。</span><br><span class=\"line\">$remote_addr ： 客户端的IP地址。</span><br><span class=\"line\">$remote_port ： 客户端的端口。</span><br><span class=\"line\">$remote_user ： 已经经过Auth Basic Module验证的用户名。</span><br><span class=\"line\">$request_filename ： 当前请求的文件路径，由root或alias指令与URI请求生成。</span><br><span class=\"line\">$scheme ： HTTP方法（如http，https）。</span><br><span class=\"line\">$server_protocol ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</span><br><span class=\"line\">$server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。</span><br><span class=\"line\">$server_name ： 服务器名称。</span><br><span class=\"line\">$server_port ： 请求到达服务器的端口号。</span><br><span class=\"line\">$request_uri ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。</span><br><span class=\"line\">$uri ： 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。</span><br><span class=\"line\">$document_uri ： 与$uri相同。</span><br></pre></td></tr></table></figure>\n<p>如：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">访问链接是：http:<span class=\"comment\">//localhost:88/test1/test2/test.php </span></span><br><span class=\"line\">网站路径是：/var/www/html</span><br><span class=\"line\"><span class=\"variable\">$host</span>：localhost</span><br><span class=\"line\"><span class=\"variable\">$server_port</span>：<span class=\"number\">88</span></span><br><span class=\"line\"><span class=\"variable\">$request_uri</span>：http:<span class=\"comment\">//localhost:88/test1/test2/test.php</span></span><br><span class=\"line\"><span class=\"variable\">$document_uri</span>：/test1/test2/test.php</span><br><span class=\"line\"><span class=\"variable\">$document_root</span>：/var/www/html</span><br><span class=\"line\"><span class=\"variable\">$request_filename</span>：/var/www/html/test1/test2/test.php</span><br></pre></td></tr></table></figure>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如果文件不存在则返回400</span></span><br><span class=\"line\"><span class=\"attribute\">if</span> (!-f <span class=\"variable\">$request_filename</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">400</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 如果host不是xuexb.com，则301到xuexb.com中</span></span><br><span class=\"line\"><span class=\"attribute\">if</span> ( <span class=\"variable\">$host</span> != <span class=\"string\">'xuexb.com'</span> )&#123;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/(.*)$</span> https://xuexb.com/<span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 如果请求类型不是POST则返回405</span></span><br><span class=\"line\"><span class=\"attribute\">if</span> (<span class=\"variable\">$request_method</span> = POST) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">405</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 如果参数中有 a=1 则301到指定域名</span></span><br><span class=\"line\"><span class=\"attribute\">if</span> (<span class=\"variable\">$args</span> <span class=\"regexp\">~ a=1)</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^</span> http://example.com/ <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在某种场景下可结合<code>location</code>规则来使用，如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 访问 /test.html 时</span></span><br><span class=\"line\"><span class=\"attribute\">location</span> = /test.html &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 默认值为xiaowu</span></span><br><span class=\"line\">    <span class=\"attribute\">set</span> <span class=\"variable\">$name</span> xiaowu;</span><br><span class=\"line\">    <span class=\"comment\"># 如果参数中有 name=xx 则使用该值</span></span><br><span class=\"line\">    <span class=\"attribute\">if</span> (<span class=\"variable\">$args</span> <span class=\"regexp\">~* name=(\\w+?)(&amp;|$))</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">set</span> <span class=\"variable\">$name</span> <span class=\"variable\">$1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># 301</span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^</span> /<span class=\"variable\">$name</span>.html <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面表示：</p>\n<ul>\n<li>/test.html =&gt; /xiaowu.html</li>\n<li>/test.html?name=ok =&gt; /ok.html?name=ok</li>\n</ul>\n<h2 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h2><h3 id=\"语法-2\"><a href=\"#语法-2\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>在<code>server</code>块中使用，如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">location</span> 表达式 &#123;    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>location表达式类型</p>\n<ul>\n<li>如果直接写一个路径，则匹配该路径下的</li>\n<li>~ 表示执行一个正则匹配，区分大小写</li>\n<li>~* 表示执行一个正则匹配，不区分大小写</li>\n<li>^~ 表示普通字符匹配。使用前缀匹配。如果匹配成功，则不再匹配其他location。</li>\n<li>= 进行普通字符精确匹配。也就是完全匹配。</li>\n</ul>\n<h3 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h3><ol>\n<li>等号类型（=）的优先级最高。一旦匹配成功，则不再查找其他匹配项。</li>\n<li>^~类型表达式。一旦匹配成功，则不再查找其他匹配项。</li>\n<li>正则表达式类型（~ ~*）的优先级次之。如果有多个location的正则能匹配的话，则使用正则表达式最长的那个。</li>\n<li>常规字符串匹配类型。按前缀匹配。</li>\n</ol>\n<h3 id=\"例子-假地址掩饰真地址\"><a href=\"#例子-假地址掩饰真地址\" class=\"headerlink\" title=\"例子 - 假地址掩饰真地址\"></a>例子 - 假地址掩饰真地址</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 用 xxoo_admin 来掩饰 admin</span></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"comment\"># 使用break拿一旦匹配成功则忽略后续location</span></span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span> /xxoo_admin /admin <span class=\"literal\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># 访问真实地址直接报没权限</span></span><br><span class=\"line\">    <span class=\"attribute\">location</span> /admin &#123;</span><br><span class=\"line\">        <span class=\"attribute\">return</span> <span class=\"number\">403</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.toolnb.com/tools/rewriteTools.html\" target=\"_blank\" rel=\"noopener\">https://www.toolnb.com/tools/rewriteTools.html</a></p>\n"},{"title":"odoo源码解析-启动web服务器","date":"2019-11-16T06:41:42.000Z","_content":"\n\n\n# 启动\n\n```python\n\ndef start(preload=None, stop=False):\n    \"\"\" Start the odoo http server and cron processor.\n    \"\"\"\n    global server\n\t## 这里加载两个模块web和web_kan，在这里加载模块才能够在用户没有登录的时候才能够访问路由\n    load_server_wide_modules()\n    odoo.service.wsgi_server._patch_xmlrpc_marshaller()\n\t\n    \"\"\"\n    ·GeventServer\n    ·PreforkServer\n    ·ThreadedServer(默认)\n    CommonServer是后面三个类的父类\n\tOdoo服务器通过ThreadedServer.run()运行\n    \"\"\"\n    if odoo.evented:\n        server = GeventServer(odoo.service.wsgi_server.application)\n    elif config['workers']:\n        if config['test_enable'] or config['test_file']:\n            _logger.warning(\"Unit testing in workers mode could fail; use --workers 0.\")\n\n        server = PreforkServer(odoo.service.wsgi_server.application)\n\n        # Workaround for Python issue24291, fixed in 3.6 (see Python issue26721)\n        if sys.version_info[:2] == (3,5):\n            # turn on buffering also for wfile, to avoid partial writes (Default buffer = 8k)\n            werkzeug.serving.WSGIRequestHandler.wbufsize = -1\n    else:\n        server = ThreadedServer(odoo.service.wsgi_server.application)\n\n    watcher = None\n    if 'reload' in config['dev_mode'] and not odoo.evented:\n        if inotify:\n            watcher = FSWatcherInotify()\n            watcher.start()\n        elif watchdog:\n            watcher = FSWatcherWatchdog()\n            watcher.start()\n        else:\n            if os.name == 'posix' and platform.system() != 'Darwin':\n                module = 'inotify'\n            else:\n                module = 'watchdog'\n            _logger.warning(\"'%s' module not installed. Code autoreload feature is disabled\", module)\n    if 'werkzeug' in config['dev_mode']:\n        server.app = DebuggedApplication(server.app, evalex=True)\n\n    ##  启动web服务器\n    rc = server.run(preload, stop)\n\n    if watcher:\n        watcher.stop()\n    # like the legend of the phoenix, all ends with beginnings\n    if getattr(odoo, 'phoenix', False):\n        _reexec()\n\n    return rc if rc else 0\n```\n\n# ThreadedServer(CommandServer)\n\n## Run\n\n```python\n\"\"\" Start the http server and the cron thread then wait for a signal.\n\n        The first SIGINT or SIGTERM signal will initiate a graceful shutdown while\n        a second one if any will force an immediate exit.\n        \"\"\"\n## 启动一个系统命令监测。。。\nself.start(stop=stop)\n\n## 安装、更新、加载模块\nrc = preload_registries(preload)\n\nif stop:\n    self.stop()\n    return rc\n\n## 加载定时任务\nself.cron_spawn()\n\n# Wait for a first signal to be handled. (time.sleep will be interrupted\n# by the signal handler)\ntry:\n    while self.quit_signals_received == 0:\n        self.process_limit()\n        if self.limit_reached_time:\n            has_other_valid_requests = any(\n                not t.daemon and\n                t not in self.limits_reached_threads\n                for t in threading.enumerate()\n                if getattr(t, 'type', None) == 'http')\n            if (not has_other_valid_requests or\n                (time.time() - self.limit_reached_time) > SLEEP_INTERVAL):\n                # We wait there is no processing requests\n                # other than the ones exceeding the limits, up to 1 min,\n                # before asking for a reload.\n                _logger.info('Dumping stacktrace of limit exceeding threads before reloading')\n                dumpstacks(thread_idents=[thread.ident for thread in self.limits_reached_threads])\n                self.reload()\n                # `reload` increments `self.quit_signals_received`\n                # and the loop will end after this iteration,\n                # therefore leading to the server stop.\n                # `reload` also sets the `phoenix` flag\n                # to tell the server to restart the server after shutting down.\n                else:\n                    time.sleep(1)\n                    else:\n                        time.sleep(SLEEP_INTERVAL)\n                        except KeyboardInterrupt:\n                            pass\n\n                        self.stop()\n```\n\n## start\n\n```python\ndef start(self, stop=False):\n    _logger.debug(\"Setting signal handlers\")\n    set_limit_memory_hard()\n    if os.name == 'posix':\n        signal.signal(signal.SIGINT, self.signal_handler)\n        signal.signal(signal.SIGTERM, self.signal_handler)\n        signal.signal(signal.SIGCHLD, self.signal_handler)\n        signal.signal(signal.SIGHUP, self.signal_handler)\n        signal.signal(signal.SIGXCPU, self.signal_handler)\n        signal.signal(signal.SIGQUIT, dumpstacks)\n        signal.signal(signal.SIGUSR1, log_ormcache_stats)\n        elif os.name == 'nt':\n            import win32api\n            win32api.SetConsoleCtrlHandler(lambda sig: self.signal_handler(sig, None), 1)\n\n            test_mode = config['test_enable'] or config['test_file']\n            if test_mode or (config['http_enable'] and not stop):\n                # some tests need the http deamon to be available...\n                self.http_spawn()\n```\n\n\n\n# ThreadedWSGIServerReloadable\n\n这个服务可以不启动也能够运行程序。他的作用是debug保持端口是开启的。\n\nWerkzeug是Python的WSGI规范的实现函数库。基于BSD协议。\nWSGI(Web Server Gateway Interface)\nWSGI服务允许重用环境提供的监听套接字，它通过自动重加载使用，用于保持当有重加载的时候监听套接字是打开状态\n\n```python\n\nclass ThreadedWSGIServerReloadable(LoggingBaseWSGIServerMixIn, werkzeug.serving.ThreadedWSGIServer):\n    \"\"\" werkzeug Threaded WSGI Server patched to allow reusing a listen socket\n    given by the environement, this is used by autoreload to keep the listen\n    socket open when a reload happens.\n    \"\"\"\n    def __init__(self, host, port, app):\n        super(ThreadedWSGIServerReloadable, self).__init__(host, port, app,\n                                                           handler=RequestHandler)\n\n        # See https://github.com/pallets/werkzeug/pull/770\n        # This allow the request threads to not be set as daemon\n        # so the server waits for them when shutting down gracefully.\n        self.daemon_threads = False\n\n    def server_bind(self):\n        SD_LISTEN_FDS_START = 3\n        if os.environ.get('LISTEN_FDS') == '1' and os.environ.get('LISTEN_PID') == str(os.getpid()):\n            self.reload_socket = True\n            self.socket = socket.fromfd(SD_LISTEN_FDS_START, socket.AF_INET, socket.SOCK_STREAM)\n            _logger.info('HTTP service (werkzeug) running through socket activation')\n        else:\n            self.reload_socket = False\n            super(ThreadedWSGIServerReloadable, self).server_bind()\n            _logger.info('HTTP service (werkzeug) running on %s:%s', self.server_name, self.server_port)\n\n    def server_activate(self):\n        if not self.reload_socket:\n            super(ThreadedWSGIServerReloadable, self).server_activate()\n\n    def process_request(self, request, client_address):\n        \"\"\"\n        Start a new thread to process the request.\n        Override the default method of class socketserver.ThreadingMixIn\n        to be able to get the thread object which is instantiated\n        and set its start time as an attribute\n        \"\"\"\n        t = threading.Thread(target = self.process_request_thread,\n                             args = (request, client_address))\n        t.daemon = self.daemon_threads\n        t.type = 'http'\n        t.start_time = time.time()\n        t.start()\n\n    # TODO: Remove this method as soon as either of the revision\n    # - python/cpython@8b1f52b5a93403acd7d112cd1c1bc716b31a418a for Python 3.6,\n    # - python/cpython@908082451382b8b3ba09ebba638db660edbf5d8e for Python 3.7,\n    # is included in all Python 3 releases installed on all operating systems supported by Odoo.\n    # These revisions are included in Python from releases 3.6.8 and Python 3.7.2 respectively.\n    def _handle_request_noblock(self):\n        \"\"\"\n        In the python module `socketserver` `process_request` loop,\n        the __shutdown_request flag is not checked between select and accept.\n        Thus when we set it to `True` thanks to the call `httpd.shutdown`,\n        a last request is accepted before exiting the loop.\n        We override this function to add an additional check before the accept().\n        \"\"\"\n        if self._BaseServer__shutdown_request:\n            return\n        super(ThreadedWSGIServerReloadable, self)._handle_request_noblock()\n\n\n```\n\n\n\n\n\n# 参考\n\n> <https://blog.csdn.net/weixin_35737303/article/details/79038879>","source":"_posts/odoo/odoo源码解析3-启动web服务器.md","raw":"---\ntitle: odoo源码解析-启动web服务器\ndate: 2019-11-16 14:41:42\ntags:\n- odoo\n---\n\n\n\n# 启动\n\n```python\n\ndef start(preload=None, stop=False):\n    \"\"\" Start the odoo http server and cron processor.\n    \"\"\"\n    global server\n\t## 这里加载两个模块web和web_kan，在这里加载模块才能够在用户没有登录的时候才能够访问路由\n    load_server_wide_modules()\n    odoo.service.wsgi_server._patch_xmlrpc_marshaller()\n\t\n    \"\"\"\n    ·GeventServer\n    ·PreforkServer\n    ·ThreadedServer(默认)\n    CommonServer是后面三个类的父类\n\tOdoo服务器通过ThreadedServer.run()运行\n    \"\"\"\n    if odoo.evented:\n        server = GeventServer(odoo.service.wsgi_server.application)\n    elif config['workers']:\n        if config['test_enable'] or config['test_file']:\n            _logger.warning(\"Unit testing in workers mode could fail; use --workers 0.\")\n\n        server = PreforkServer(odoo.service.wsgi_server.application)\n\n        # Workaround for Python issue24291, fixed in 3.6 (see Python issue26721)\n        if sys.version_info[:2] == (3,5):\n            # turn on buffering also for wfile, to avoid partial writes (Default buffer = 8k)\n            werkzeug.serving.WSGIRequestHandler.wbufsize = -1\n    else:\n        server = ThreadedServer(odoo.service.wsgi_server.application)\n\n    watcher = None\n    if 'reload' in config['dev_mode'] and not odoo.evented:\n        if inotify:\n            watcher = FSWatcherInotify()\n            watcher.start()\n        elif watchdog:\n            watcher = FSWatcherWatchdog()\n            watcher.start()\n        else:\n            if os.name == 'posix' and platform.system() != 'Darwin':\n                module = 'inotify'\n            else:\n                module = 'watchdog'\n            _logger.warning(\"'%s' module not installed. Code autoreload feature is disabled\", module)\n    if 'werkzeug' in config['dev_mode']:\n        server.app = DebuggedApplication(server.app, evalex=True)\n\n    ##  启动web服务器\n    rc = server.run(preload, stop)\n\n    if watcher:\n        watcher.stop()\n    # like the legend of the phoenix, all ends with beginnings\n    if getattr(odoo, 'phoenix', False):\n        _reexec()\n\n    return rc if rc else 0\n```\n\n# ThreadedServer(CommandServer)\n\n## Run\n\n```python\n\"\"\" Start the http server and the cron thread then wait for a signal.\n\n        The first SIGINT or SIGTERM signal will initiate a graceful shutdown while\n        a second one if any will force an immediate exit.\n        \"\"\"\n## 启动一个系统命令监测。。。\nself.start(stop=stop)\n\n## 安装、更新、加载模块\nrc = preload_registries(preload)\n\nif stop:\n    self.stop()\n    return rc\n\n## 加载定时任务\nself.cron_spawn()\n\n# Wait for a first signal to be handled. (time.sleep will be interrupted\n# by the signal handler)\ntry:\n    while self.quit_signals_received == 0:\n        self.process_limit()\n        if self.limit_reached_time:\n            has_other_valid_requests = any(\n                not t.daemon and\n                t not in self.limits_reached_threads\n                for t in threading.enumerate()\n                if getattr(t, 'type', None) == 'http')\n            if (not has_other_valid_requests or\n                (time.time() - self.limit_reached_time) > SLEEP_INTERVAL):\n                # We wait there is no processing requests\n                # other than the ones exceeding the limits, up to 1 min,\n                # before asking for a reload.\n                _logger.info('Dumping stacktrace of limit exceeding threads before reloading')\n                dumpstacks(thread_idents=[thread.ident for thread in self.limits_reached_threads])\n                self.reload()\n                # `reload` increments `self.quit_signals_received`\n                # and the loop will end after this iteration,\n                # therefore leading to the server stop.\n                # `reload` also sets the `phoenix` flag\n                # to tell the server to restart the server after shutting down.\n                else:\n                    time.sleep(1)\n                    else:\n                        time.sleep(SLEEP_INTERVAL)\n                        except KeyboardInterrupt:\n                            pass\n\n                        self.stop()\n```\n\n## start\n\n```python\ndef start(self, stop=False):\n    _logger.debug(\"Setting signal handlers\")\n    set_limit_memory_hard()\n    if os.name == 'posix':\n        signal.signal(signal.SIGINT, self.signal_handler)\n        signal.signal(signal.SIGTERM, self.signal_handler)\n        signal.signal(signal.SIGCHLD, self.signal_handler)\n        signal.signal(signal.SIGHUP, self.signal_handler)\n        signal.signal(signal.SIGXCPU, self.signal_handler)\n        signal.signal(signal.SIGQUIT, dumpstacks)\n        signal.signal(signal.SIGUSR1, log_ormcache_stats)\n        elif os.name == 'nt':\n            import win32api\n            win32api.SetConsoleCtrlHandler(lambda sig: self.signal_handler(sig, None), 1)\n\n            test_mode = config['test_enable'] or config['test_file']\n            if test_mode or (config['http_enable'] and not stop):\n                # some tests need the http deamon to be available...\n                self.http_spawn()\n```\n\n\n\n# ThreadedWSGIServerReloadable\n\n这个服务可以不启动也能够运行程序。他的作用是debug保持端口是开启的。\n\nWerkzeug是Python的WSGI规范的实现函数库。基于BSD协议。\nWSGI(Web Server Gateway Interface)\nWSGI服务允许重用环境提供的监听套接字，它通过自动重加载使用，用于保持当有重加载的时候监听套接字是打开状态\n\n```python\n\nclass ThreadedWSGIServerReloadable(LoggingBaseWSGIServerMixIn, werkzeug.serving.ThreadedWSGIServer):\n    \"\"\" werkzeug Threaded WSGI Server patched to allow reusing a listen socket\n    given by the environement, this is used by autoreload to keep the listen\n    socket open when a reload happens.\n    \"\"\"\n    def __init__(self, host, port, app):\n        super(ThreadedWSGIServerReloadable, self).__init__(host, port, app,\n                                                           handler=RequestHandler)\n\n        # See https://github.com/pallets/werkzeug/pull/770\n        # This allow the request threads to not be set as daemon\n        # so the server waits for them when shutting down gracefully.\n        self.daemon_threads = False\n\n    def server_bind(self):\n        SD_LISTEN_FDS_START = 3\n        if os.environ.get('LISTEN_FDS') == '1' and os.environ.get('LISTEN_PID') == str(os.getpid()):\n            self.reload_socket = True\n            self.socket = socket.fromfd(SD_LISTEN_FDS_START, socket.AF_INET, socket.SOCK_STREAM)\n            _logger.info('HTTP service (werkzeug) running through socket activation')\n        else:\n            self.reload_socket = False\n            super(ThreadedWSGIServerReloadable, self).server_bind()\n            _logger.info('HTTP service (werkzeug) running on %s:%s', self.server_name, self.server_port)\n\n    def server_activate(self):\n        if not self.reload_socket:\n            super(ThreadedWSGIServerReloadable, self).server_activate()\n\n    def process_request(self, request, client_address):\n        \"\"\"\n        Start a new thread to process the request.\n        Override the default method of class socketserver.ThreadingMixIn\n        to be able to get the thread object which is instantiated\n        and set its start time as an attribute\n        \"\"\"\n        t = threading.Thread(target = self.process_request_thread,\n                             args = (request, client_address))\n        t.daemon = self.daemon_threads\n        t.type = 'http'\n        t.start_time = time.time()\n        t.start()\n\n    # TODO: Remove this method as soon as either of the revision\n    # - python/cpython@8b1f52b5a93403acd7d112cd1c1bc716b31a418a for Python 3.6,\n    # - python/cpython@908082451382b8b3ba09ebba638db660edbf5d8e for Python 3.7,\n    # is included in all Python 3 releases installed on all operating systems supported by Odoo.\n    # These revisions are included in Python from releases 3.6.8 and Python 3.7.2 respectively.\n    def _handle_request_noblock(self):\n        \"\"\"\n        In the python module `socketserver` `process_request` loop,\n        the __shutdown_request flag is not checked between select and accept.\n        Thus when we set it to `True` thanks to the call `httpd.shutdown`,\n        a last request is accepted before exiting the loop.\n        We override this function to add an additional check before the accept().\n        \"\"\"\n        if self._BaseServer__shutdown_request:\n            return\n        super(ThreadedWSGIServerReloadable, self)._handle_request_noblock()\n\n\n```\n\n\n\n\n\n# 参考\n\n> <https://blog.csdn.net/weixin_35737303/article/details/79038879>","slug":"odoo/odoo源码解析3-启动web服务器","published":1,"updated":"2020-08-27T15:25:48.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblom006t4tje31w7c0mr","content":"<h1 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start</span><span class=\"params\">(preload=None, stop=False)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\" Start the odoo http server and cron processor.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> server</span><br><span class=\"line\">\t<span class=\"comment\">## 这里加载两个模块web和web_kan，在这里加载模块才能够在用户没有登录的时候才能够访问路由</span></span><br><span class=\"line\">    load_server_wide_modules()</span><br><span class=\"line\">    odoo.service.wsgi_server._patch_xmlrpc_marshaller()</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    ·GeventServer</span></span><br><span class=\"line\"><span class=\"string\">    ·PreforkServer</span></span><br><span class=\"line\"><span class=\"string\">    ·ThreadedServer(默认)</span></span><br><span class=\"line\"><span class=\"string\">    CommonServer是后面三个类的父类</span></span><br><span class=\"line\"><span class=\"string\">\tOdoo服务器通过ThreadedServer.run()运行</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> odoo.evented:</span><br><span class=\"line\">        server = GeventServer(odoo.service.wsgi_server.application)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> config[<span class=\"string\">'workers'</span>]:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> config[<span class=\"string\">'test_enable'</span>] <span class=\"keyword\">or</span> config[<span class=\"string\">'test_file'</span>]:</span><br><span class=\"line\">            _logger.warning(<span class=\"string\">\"Unit testing in workers mode could fail; use --workers 0.\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        server = PreforkServer(odoo.service.wsgi_server.application)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Workaround for Python issue24291, fixed in 3.6 (see Python issue26721)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> sys.version_info[:<span class=\"number\">2</span>] == (<span class=\"number\">3</span>,<span class=\"number\">5</span>):</span><br><span class=\"line\">            <span class=\"comment\"># turn on buffering also for wfile, to avoid partial writes (Default buffer = 8k)</span></span><br><span class=\"line\">            werkzeug.serving.WSGIRequestHandler.wbufsize = <span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        server = ThreadedServer(odoo.service.wsgi_server.application)</span><br><span class=\"line\"></span><br><span class=\"line\">    watcher = <span class=\"keyword\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">'reload'</span> <span class=\"keyword\">in</span> config[<span class=\"string\">'dev_mode'</span>] <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> odoo.evented:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> inotify:</span><br><span class=\"line\">            watcher = FSWatcherInotify()</span><br><span class=\"line\">            watcher.start()</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> watchdog:</span><br><span class=\"line\">            watcher = FSWatcherWatchdog()</span><br><span class=\"line\">            watcher.start()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> os.name == <span class=\"string\">'posix'</span> <span class=\"keyword\">and</span> platform.system() != <span class=\"string\">'Darwin'</span>:</span><br><span class=\"line\">                module = <span class=\"string\">'inotify'</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                module = <span class=\"string\">'watchdog'</span></span><br><span class=\"line\">            _logger.warning(<span class=\"string\">\"'%s' module not installed. Code autoreload feature is disabled\"</span>, module)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">'werkzeug'</span> <span class=\"keyword\">in</span> config[<span class=\"string\">'dev_mode'</span>]:</span><br><span class=\"line\">        server.app = DebuggedApplication(server.app, evalex=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">##  启动web服务器</span></span><br><span class=\"line\">    rc = server.run(preload, stop)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> watcher:</span><br><span class=\"line\">        watcher.stop()</span><br><span class=\"line\">    <span class=\"comment\"># like the legend of the phoenix, all ends with beginnings</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> getattr(odoo, <span class=\"string\">'phoenix'</span>, <span class=\"keyword\">False</span>):</span><br><span class=\"line\">        _reexec()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> rc <span class=\"keyword\">if</span> rc <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"ThreadedServer-CommandServer\"><a href=\"#ThreadedServer-CommandServer\" class=\"headerlink\" title=\"ThreadedServer(CommandServer)\"></a>ThreadedServer(CommandServer)</h1><h2 id=\"Run\"><a href=\"#Run\" class=\"headerlink\" title=\"Run\"></a>Run</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\" Start the http server and the cron thread then wait for a signal.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        The first SIGINT or SIGTERM signal will initiate a graceful shutdown while</span></span><br><span class=\"line\"><span class=\"string\">        a second one if any will force an immediate exit.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\"><span class=\"comment\">## 启动一个系统命令监测。。。</span></span><br><span class=\"line\">self.start(stop=stop)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 安装、更新、加载模块</span></span><br><span class=\"line\">rc = preload_registries(preload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> stop:</span><br><span class=\"line\">    self.stop()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 加载定时任务</span></span><br><span class=\"line\">self.cron_spawn()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Wait for a first signal to be handled. (time.sleep will be interrupted</span></span><br><span class=\"line\"><span class=\"comment\"># by the signal handler)</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">while</span> self.quit_signals_received == <span class=\"number\">0</span>:</span><br><span class=\"line\">        self.process_limit()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.limit_reached_time:</span><br><span class=\"line\">            has_other_valid_requests = any(</span><br><span class=\"line\">                <span class=\"keyword\">not</span> t.daemon <span class=\"keyword\">and</span></span><br><span class=\"line\">                t <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self.limits_reached_threads</span><br><span class=\"line\">                <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> threading.enumerate()</span><br><span class=\"line\">                <span class=\"keyword\">if</span> getattr(t, <span class=\"string\">'type'</span>, <span class=\"keyword\">None</span>) == <span class=\"string\">'http'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">not</span> has_other_valid_requests <span class=\"keyword\">or</span></span><br><span class=\"line\">                (time.time() - self.limit_reached_time) &gt; SLEEP_INTERVAL):</span><br><span class=\"line\">                <span class=\"comment\"># We wait there is no processing requests</span></span><br><span class=\"line\">                <span class=\"comment\"># other than the ones exceeding the limits, up to 1 min,</span></span><br><span class=\"line\">                <span class=\"comment\"># before asking for a reload.</span></span><br><span class=\"line\">                _logger.info(<span class=\"string\">'Dumping stacktrace of limit exceeding threads before reloading'</span>)</span><br><span class=\"line\">                dumpstacks(thread_idents=[thread.ident <span class=\"keyword\">for</span> thread <span class=\"keyword\">in</span> self.limits_reached_threads])</span><br><span class=\"line\">                self.reload()</span><br><span class=\"line\">                <span class=\"comment\"># `reload` increments `self.quit_signals_received`</span></span><br><span class=\"line\">                <span class=\"comment\"># and the loop will end after this iteration,</span></span><br><span class=\"line\">                <span class=\"comment\"># therefore leading to the server stop.</span></span><br><span class=\"line\">                <span class=\"comment\"># `reload` also sets the `phoenix` flag</span></span><br><span class=\"line\">                <span class=\"comment\"># to tell the server to restart the server after shutting down.</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        time.sleep(SLEEP_INTERVAL)</span><br><span class=\"line\">                        <span class=\"keyword\">except</span> KeyboardInterrupt:</span><br><span class=\"line\">                            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        self.stop()</span><br></pre></td></tr></table></figure>\n<h2 id=\"start\"><a href=\"#start\" class=\"headerlink\" title=\"start\"></a>start</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start</span><span class=\"params\">(self, stop=False)</span>:</span></span><br><span class=\"line\">    _logger.debug(<span class=\"string\">\"Setting signal handlers\"</span>)</span><br><span class=\"line\">    set_limit_memory_hard()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> os.name == <span class=\"string\">'posix'</span>:</span><br><span class=\"line\">        signal.signal(signal.SIGINT, self.signal_handler)</span><br><span class=\"line\">        signal.signal(signal.SIGTERM, self.signal_handler)</span><br><span class=\"line\">        signal.signal(signal.SIGCHLD, self.signal_handler)</span><br><span class=\"line\">        signal.signal(signal.SIGHUP, self.signal_handler)</span><br><span class=\"line\">        signal.signal(signal.SIGXCPU, self.signal_handler)</span><br><span class=\"line\">        signal.signal(signal.SIGQUIT, dumpstacks)</span><br><span class=\"line\">        signal.signal(signal.SIGUSR1, log_ormcache_stats)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> os.name == <span class=\"string\">'nt'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">import</span> win32api</span><br><span class=\"line\">            win32api.SetConsoleCtrlHandler(<span class=\"keyword\">lambda</span> sig: self.signal_handler(sig, <span class=\"keyword\">None</span>), <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            test_mode = config[<span class=\"string\">'test_enable'</span>] <span class=\"keyword\">or</span> config[<span class=\"string\">'test_file'</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> test_mode <span class=\"keyword\">or</span> (config[<span class=\"string\">'http_enable'</span>] <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> stop):</span><br><span class=\"line\">                <span class=\"comment\"># some tests need the http deamon to be available...</span></span><br><span class=\"line\">                self.http_spawn()</span><br></pre></td></tr></table></figure>\n<h1 id=\"ThreadedWSGIServerReloadable\"><a href=\"#ThreadedWSGIServerReloadable\" class=\"headerlink\" title=\"ThreadedWSGIServerReloadable\"></a>ThreadedWSGIServerReloadable</h1><p>这个服务可以不启动也能够运行程序。他的作用是debug保持端口是开启的。</p>\n<p>Werkzeug是Python的WSGI规范的实现函数库。基于BSD协议。<br>WSGI(Web Server Gateway Interface)<br>WSGI服务允许重用环境提供的监听套接字，它通过自动重加载使用，用于保持当有重加载的时候监听套接字是打开状态</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadedWSGIServerReloadable</span><span class=\"params\">(LoggingBaseWSGIServerMixIn, werkzeug.serving.ThreadedWSGIServer)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\" werkzeug Threaded WSGI Server patched to allow reusing a listen socket</span></span><br><span class=\"line\"><span class=\"string\">    given by the environement, this is used by autoreload to keep the listen</span></span><br><span class=\"line\"><span class=\"string\">    socket open when a reload happens.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, host, port, app)</span>:</span></span><br><span class=\"line\">        super(ThreadedWSGIServerReloadable, self).__init__(host, port, app,</span><br><span class=\"line\">                                                           handler=RequestHandler)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># See https://github.com/pallets/werkzeug/pull/770</span></span><br><span class=\"line\">        <span class=\"comment\"># This allow the request threads to not be set as daemon</span></span><br><span class=\"line\">        <span class=\"comment\"># so the server waits for them when shutting down gracefully.</span></span><br><span class=\"line\">        self.daemon_threads = <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">server_bind</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        SD_LISTEN_FDS_START = <span class=\"number\">3</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.environ.get(<span class=\"string\">'LISTEN_FDS'</span>) == <span class=\"string\">'1'</span> <span class=\"keyword\">and</span> os.environ.get(<span class=\"string\">'LISTEN_PID'</span>) == str(os.getpid()):</span><br><span class=\"line\">            self.reload_socket = <span class=\"keyword\">True</span></span><br><span class=\"line\">            self.socket = socket.fromfd(SD_LISTEN_FDS_START, socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">            _logger.info(<span class=\"string\">'HTTP service (werkzeug) running through socket activation'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.reload_socket = <span class=\"keyword\">False</span></span><br><span class=\"line\">            super(ThreadedWSGIServerReloadable, self).server_bind()</span><br><span class=\"line\">            _logger.info(<span class=\"string\">'HTTP service (werkzeug) running on %s:%s'</span>, self.server_name, self.server_port)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">server_activate</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.reload_socket:</span><br><span class=\"line\">            super(ThreadedWSGIServerReloadable, self).server_activate()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_request</span><span class=\"params\">(self, request, client_address)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Start a new thread to process the request.</span></span><br><span class=\"line\"><span class=\"string\">        Override the default method of class socketserver.ThreadingMixIn</span></span><br><span class=\"line\"><span class=\"string\">        to be able to get the thread object which is instantiated</span></span><br><span class=\"line\"><span class=\"string\">        and set its start time as an attribute</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        t = threading.Thread(target = self.process_request_thread,</span><br><span class=\"line\">                             args = (request, client_address))</span><br><span class=\"line\">        t.daemon = self.daemon_threads</span><br><span class=\"line\">        t.type = <span class=\"string\">'http'</span></span><br><span class=\"line\">        t.start_time = time.time()</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># <span class=\"doctag\">TODO:</span> Remove this method as soon as either of the revision</span></span><br><span class=\"line\">    <span class=\"comment\"># - python/cpython@8b1f52b5a93403acd7d112cd1c1bc716b31a418a for Python 3.6,</span></span><br><span class=\"line\">    <span class=\"comment\"># - python/cpython@908082451382b8b3ba09ebba638db660edbf5d8e for Python 3.7,</span></span><br><span class=\"line\">    <span class=\"comment\"># is included in all Python 3 releases installed on all operating systems supported by Odoo.</span></span><br><span class=\"line\">    <span class=\"comment\"># These revisions are included in Python from releases 3.6.8 and Python 3.7.2 respectively.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_handle_request_noblock</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        In the python module `socketserver` `process_request` loop,</span></span><br><span class=\"line\"><span class=\"string\">        the __shutdown_request flag is not checked between select and accept.</span></span><br><span class=\"line\"><span class=\"string\">        Thus when we set it to `True` thanks to the call `httpd.shutdown`,</span></span><br><span class=\"line\"><span class=\"string\">        a last request is accepted before exiting the loop.</span></span><br><span class=\"line\"><span class=\"string\">        We override this function to add an additional check before the accept().</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self._BaseServer__shutdown_request:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        super(ThreadedWSGIServerReloadable, self)._handle_request_noblock()</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://blog.csdn.net/weixin_35737303/article/details/79038879\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_35737303/article/details/79038879</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start</span><span class=\"params\">(preload=None, stop=False)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\" Start the odoo http server and cron processor.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> server</span><br><span class=\"line\">\t<span class=\"comment\">## 这里加载两个模块web和web_kan，在这里加载模块才能够在用户没有登录的时候才能够访问路由</span></span><br><span class=\"line\">    load_server_wide_modules()</span><br><span class=\"line\">    odoo.service.wsgi_server._patch_xmlrpc_marshaller()</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    ·GeventServer</span></span><br><span class=\"line\"><span class=\"string\">    ·PreforkServer</span></span><br><span class=\"line\"><span class=\"string\">    ·ThreadedServer(默认)</span></span><br><span class=\"line\"><span class=\"string\">    CommonServer是后面三个类的父类</span></span><br><span class=\"line\"><span class=\"string\">\tOdoo服务器通过ThreadedServer.run()运行</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> odoo.evented:</span><br><span class=\"line\">        server = GeventServer(odoo.service.wsgi_server.application)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> config[<span class=\"string\">'workers'</span>]:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> config[<span class=\"string\">'test_enable'</span>] <span class=\"keyword\">or</span> config[<span class=\"string\">'test_file'</span>]:</span><br><span class=\"line\">            _logger.warning(<span class=\"string\">\"Unit testing in workers mode could fail; use --workers 0.\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        server = PreforkServer(odoo.service.wsgi_server.application)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Workaround for Python issue24291, fixed in 3.6 (see Python issue26721)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> sys.version_info[:<span class=\"number\">2</span>] == (<span class=\"number\">3</span>,<span class=\"number\">5</span>):</span><br><span class=\"line\">            <span class=\"comment\"># turn on buffering also for wfile, to avoid partial writes (Default buffer = 8k)</span></span><br><span class=\"line\">            werkzeug.serving.WSGIRequestHandler.wbufsize = <span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        server = ThreadedServer(odoo.service.wsgi_server.application)</span><br><span class=\"line\"></span><br><span class=\"line\">    watcher = <span class=\"keyword\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">'reload'</span> <span class=\"keyword\">in</span> config[<span class=\"string\">'dev_mode'</span>] <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> odoo.evented:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> inotify:</span><br><span class=\"line\">            watcher = FSWatcherInotify()</span><br><span class=\"line\">            watcher.start()</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> watchdog:</span><br><span class=\"line\">            watcher = FSWatcherWatchdog()</span><br><span class=\"line\">            watcher.start()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> os.name == <span class=\"string\">'posix'</span> <span class=\"keyword\">and</span> platform.system() != <span class=\"string\">'Darwin'</span>:</span><br><span class=\"line\">                module = <span class=\"string\">'inotify'</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                module = <span class=\"string\">'watchdog'</span></span><br><span class=\"line\">            _logger.warning(<span class=\"string\">\"'%s' module not installed. Code autoreload feature is disabled\"</span>, module)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">'werkzeug'</span> <span class=\"keyword\">in</span> config[<span class=\"string\">'dev_mode'</span>]:</span><br><span class=\"line\">        server.app = DebuggedApplication(server.app, evalex=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">##  启动web服务器</span></span><br><span class=\"line\">    rc = server.run(preload, stop)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> watcher:</span><br><span class=\"line\">        watcher.stop()</span><br><span class=\"line\">    <span class=\"comment\"># like the legend of the phoenix, all ends with beginnings</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> getattr(odoo, <span class=\"string\">'phoenix'</span>, <span class=\"keyword\">False</span>):</span><br><span class=\"line\">        _reexec()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> rc <span class=\"keyword\">if</span> rc <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"ThreadedServer-CommandServer\"><a href=\"#ThreadedServer-CommandServer\" class=\"headerlink\" title=\"ThreadedServer(CommandServer)\"></a>ThreadedServer(CommandServer)</h1><h2 id=\"Run\"><a href=\"#Run\" class=\"headerlink\" title=\"Run\"></a>Run</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\" Start the http server and the cron thread then wait for a signal.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        The first SIGINT or SIGTERM signal will initiate a graceful shutdown while</span></span><br><span class=\"line\"><span class=\"string\">        a second one if any will force an immediate exit.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\"><span class=\"comment\">## 启动一个系统命令监测。。。</span></span><br><span class=\"line\">self.start(stop=stop)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 安装、更新、加载模块</span></span><br><span class=\"line\">rc = preload_registries(preload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> stop:</span><br><span class=\"line\">    self.stop()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 加载定时任务</span></span><br><span class=\"line\">self.cron_spawn()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Wait for a first signal to be handled. (time.sleep will be interrupted</span></span><br><span class=\"line\"><span class=\"comment\"># by the signal handler)</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">while</span> self.quit_signals_received == <span class=\"number\">0</span>:</span><br><span class=\"line\">        self.process_limit()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.limit_reached_time:</span><br><span class=\"line\">            has_other_valid_requests = any(</span><br><span class=\"line\">                <span class=\"keyword\">not</span> t.daemon <span class=\"keyword\">and</span></span><br><span class=\"line\">                t <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self.limits_reached_threads</span><br><span class=\"line\">                <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> threading.enumerate()</span><br><span class=\"line\">                <span class=\"keyword\">if</span> getattr(t, <span class=\"string\">'type'</span>, <span class=\"keyword\">None</span>) == <span class=\"string\">'http'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">not</span> has_other_valid_requests <span class=\"keyword\">or</span></span><br><span class=\"line\">                (time.time() - self.limit_reached_time) &gt; SLEEP_INTERVAL):</span><br><span class=\"line\">                <span class=\"comment\"># We wait there is no processing requests</span></span><br><span class=\"line\">                <span class=\"comment\"># other than the ones exceeding the limits, up to 1 min,</span></span><br><span class=\"line\">                <span class=\"comment\"># before asking for a reload.</span></span><br><span class=\"line\">                _logger.info(<span class=\"string\">'Dumping stacktrace of limit exceeding threads before reloading'</span>)</span><br><span class=\"line\">                dumpstacks(thread_idents=[thread.ident <span class=\"keyword\">for</span> thread <span class=\"keyword\">in</span> self.limits_reached_threads])</span><br><span class=\"line\">                self.reload()</span><br><span class=\"line\">                <span class=\"comment\"># `reload` increments `self.quit_signals_received`</span></span><br><span class=\"line\">                <span class=\"comment\"># and the loop will end after this iteration,</span></span><br><span class=\"line\">                <span class=\"comment\"># therefore leading to the server stop.</span></span><br><span class=\"line\">                <span class=\"comment\"># `reload` also sets the `phoenix` flag</span></span><br><span class=\"line\">                <span class=\"comment\"># to tell the server to restart the server after shutting down.</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        time.sleep(SLEEP_INTERVAL)</span><br><span class=\"line\">                        <span class=\"keyword\">except</span> KeyboardInterrupt:</span><br><span class=\"line\">                            <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        self.stop()</span><br></pre></td></tr></table></figure>\n<h2 id=\"start\"><a href=\"#start\" class=\"headerlink\" title=\"start\"></a>start</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start</span><span class=\"params\">(self, stop=False)</span>:</span></span><br><span class=\"line\">    _logger.debug(<span class=\"string\">\"Setting signal handlers\"</span>)</span><br><span class=\"line\">    set_limit_memory_hard()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> os.name == <span class=\"string\">'posix'</span>:</span><br><span class=\"line\">        signal.signal(signal.SIGINT, self.signal_handler)</span><br><span class=\"line\">        signal.signal(signal.SIGTERM, self.signal_handler)</span><br><span class=\"line\">        signal.signal(signal.SIGCHLD, self.signal_handler)</span><br><span class=\"line\">        signal.signal(signal.SIGHUP, self.signal_handler)</span><br><span class=\"line\">        signal.signal(signal.SIGXCPU, self.signal_handler)</span><br><span class=\"line\">        signal.signal(signal.SIGQUIT, dumpstacks)</span><br><span class=\"line\">        signal.signal(signal.SIGUSR1, log_ormcache_stats)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> os.name == <span class=\"string\">'nt'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">import</span> win32api</span><br><span class=\"line\">            win32api.SetConsoleCtrlHandler(<span class=\"keyword\">lambda</span> sig: self.signal_handler(sig, <span class=\"keyword\">None</span>), <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            test_mode = config[<span class=\"string\">'test_enable'</span>] <span class=\"keyword\">or</span> config[<span class=\"string\">'test_file'</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> test_mode <span class=\"keyword\">or</span> (config[<span class=\"string\">'http_enable'</span>] <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> stop):</span><br><span class=\"line\">                <span class=\"comment\"># some tests need the http deamon to be available...</span></span><br><span class=\"line\">                self.http_spawn()</span><br></pre></td></tr></table></figure>\n<h1 id=\"ThreadedWSGIServerReloadable\"><a href=\"#ThreadedWSGIServerReloadable\" class=\"headerlink\" title=\"ThreadedWSGIServerReloadable\"></a>ThreadedWSGIServerReloadable</h1><p>这个服务可以不启动也能够运行程序。他的作用是debug保持端口是开启的。</p>\n<p>Werkzeug是Python的WSGI规范的实现函数库。基于BSD协议。<br>WSGI(Web Server Gateway Interface)<br>WSGI服务允许重用环境提供的监听套接字，它通过自动重加载使用，用于保持当有重加载的时候监听套接字是打开状态</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadedWSGIServerReloadable</span><span class=\"params\">(LoggingBaseWSGIServerMixIn, werkzeug.serving.ThreadedWSGIServer)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\" werkzeug Threaded WSGI Server patched to allow reusing a listen socket</span></span><br><span class=\"line\"><span class=\"string\">    given by the environement, this is used by autoreload to keep the listen</span></span><br><span class=\"line\"><span class=\"string\">    socket open when a reload happens.</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, host, port, app)</span>:</span></span><br><span class=\"line\">        super(ThreadedWSGIServerReloadable, self).__init__(host, port, app,</span><br><span class=\"line\">                                                           handler=RequestHandler)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># See https://github.com/pallets/werkzeug/pull/770</span></span><br><span class=\"line\">        <span class=\"comment\"># This allow the request threads to not be set as daemon</span></span><br><span class=\"line\">        <span class=\"comment\"># so the server waits for them when shutting down gracefully.</span></span><br><span class=\"line\">        self.daemon_threads = <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">server_bind</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        SD_LISTEN_FDS_START = <span class=\"number\">3</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.environ.get(<span class=\"string\">'LISTEN_FDS'</span>) == <span class=\"string\">'1'</span> <span class=\"keyword\">and</span> os.environ.get(<span class=\"string\">'LISTEN_PID'</span>) == str(os.getpid()):</span><br><span class=\"line\">            self.reload_socket = <span class=\"keyword\">True</span></span><br><span class=\"line\">            self.socket = socket.fromfd(SD_LISTEN_FDS_START, socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">            _logger.info(<span class=\"string\">'HTTP service (werkzeug) running through socket activation'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.reload_socket = <span class=\"keyword\">False</span></span><br><span class=\"line\">            super(ThreadedWSGIServerReloadable, self).server_bind()</span><br><span class=\"line\">            _logger.info(<span class=\"string\">'HTTP service (werkzeug) running on %s:%s'</span>, self.server_name, self.server_port)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">server_activate</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.reload_socket:</span><br><span class=\"line\">            super(ThreadedWSGIServerReloadable, self).server_activate()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_request</span><span class=\"params\">(self, request, client_address)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Start a new thread to process the request.</span></span><br><span class=\"line\"><span class=\"string\">        Override the default method of class socketserver.ThreadingMixIn</span></span><br><span class=\"line\"><span class=\"string\">        to be able to get the thread object which is instantiated</span></span><br><span class=\"line\"><span class=\"string\">        and set its start time as an attribute</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        t = threading.Thread(target = self.process_request_thread,</span><br><span class=\"line\">                             args = (request, client_address))</span><br><span class=\"line\">        t.daemon = self.daemon_threads</span><br><span class=\"line\">        t.type = <span class=\"string\">'http'</span></span><br><span class=\"line\">        t.start_time = time.time()</span><br><span class=\"line\">        t.start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># <span class=\"doctag\">TODO:</span> Remove this method as soon as either of the revision</span></span><br><span class=\"line\">    <span class=\"comment\"># - python/cpython@8b1f52b5a93403acd7d112cd1c1bc716b31a418a for Python 3.6,</span></span><br><span class=\"line\">    <span class=\"comment\"># - python/cpython@908082451382b8b3ba09ebba638db660edbf5d8e for Python 3.7,</span></span><br><span class=\"line\">    <span class=\"comment\"># is included in all Python 3 releases installed on all operating systems supported by Odoo.</span></span><br><span class=\"line\">    <span class=\"comment\"># These revisions are included in Python from releases 3.6.8 and Python 3.7.2 respectively.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_handle_request_noblock</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        In the python module `socketserver` `process_request` loop,</span></span><br><span class=\"line\"><span class=\"string\">        the __shutdown_request flag is not checked between select and accept.</span></span><br><span class=\"line\"><span class=\"string\">        Thus when we set it to `True` thanks to the call `httpd.shutdown`,</span></span><br><span class=\"line\"><span class=\"string\">        a last request is accepted before exiting the loop.</span></span><br><span class=\"line\"><span class=\"string\">        We override this function to add an additional check before the accept().</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self._BaseServer__shutdown_request:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        super(ThreadedWSGIServerReloadable, self)._handle_request_noblock()</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"https://blog.csdn.net/weixin_35737303/article/details/79038879\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_35737303/article/details/79038879</a></p>\n</blockquote>\n"},{"title":"python原类","date":"2019-11-03T02:05:32.000Z","_content":"\n# Python中一切皆对象，类也是对象 \n​    之前我们说Python中一切都是对象。对象从哪里来，对象是类的实例。如下，使用type()函数查看对象所属的类型。我们可以看到Python中所以实例都是类的对象。那么类呢，既然一切都是对象，那么类也应该是对象。如下代码中发现我们创建的Person类原来也是对象，是type的对象。\n\n```python\na =10; b = 12.12; c=\"hello\" ;d =[1,2,3,\"rr\"];e = {\"aa\":1,\"bb\":\"cc\"}\ntype(a);type(b);type(c);type(d);type(e)\n<class 'int'>   #a = 10;a也是对象，即10是对象，是int类型的对象\n<class 'float'> #float也是类，注意python很多类的写法是小写，有的则是大写\n<class 'str'>\n<class 'list'>\n<class 'dict'>class Person(object):\n    print(\"不调用类，也会执行我\")\n    def __init__(self,name):\n        self.name = name\n    def p(self):\n        print(\"this is a  methond\")\n        \nprint(Person)  \ntom = Person(\"tom\")\nprint(\"tom实例的类型是：%s\"%type(tom))  # 实例tom是Person类的对象。\nprint(\"Peron类的类型：%s\"%type(Person))  #结果看出我们创建的类属于type类,也就是说Person是type类的对象\nprint(\"type的类型是：%s\"%type(type))  #type是type自己的对象\n\n不调用类，也会执行我\n<class '__main__.Person'>\ntom实例的类型是：<class '__main__.Person'>\nPeron类的类型：<class 'type'>\ntype的类型是：<class 'type'>\n```\n# 动态创建类\n## **通过class动态的构建需要的类**\n\n因为类也是对象，你可以在运行时动态的创建它们，就像其他任何对象一样。首先，你可以在函数中创建类，使用class关键字即可。 \n\n```python\ndef choose_class(name):\n    if name == 'foo':\n        class Foo(object):\n            pass\n        return Foo     # 返回的是类，不是类的实例\n    else:\n        class Bar(object):\n            pass\n        return Bar\nMyClass = choose_class('foo')\n\nprint MyClass              # 函数返回的是类，不是类的实例\n#输出：<class '__main__.Foo'>\n\nprint MyClass()            # 你可以通过这个类创建类实例，也就是对象\n#输出：<__main__.Foo object at 0x1085ed950\n```\n\n## **通过type函数构造类**\n\n但这还不够动态，因为你仍然需要自己编写整个类的代码。由于类也是对象，所以它们必须是通过什么东西来生成的才对。当你使用class关键字时，Python解释器自动创建这个对象。但就和Python中的大多数事情一样，Python仍然提供给你手动处理的方法。还记得内建函数type吗？这个古老但强大的函数能够让你知道一个对象的类型是什么，就像这样：\n\n```python\nprint type(1)\n#输出：<type 'int'>\nprint type(\"1\")\n#输出：<type 'str'>\nprint type(ObjectCreator)\n#输出：<type 'type'>\nprint type(ObjectCreator())\n#输出：<class '__main__.ObjectCreator'>\n```\n\n这里，type有一种完全不同的能力，它也能动态的创建类。type可以接受一个类的描述作为参数，然后返回一个类。（我知道，根据传入参数的不同，同一个函数拥有两种完全不同的用法是一件很傻的事情，但这在Python中是为了保持向后兼容性）\n\n**type的语法：**\n\n```\ntype(类名, 父类的元组（针对继承的情况，可以为空），包含属性的字典（名称和值）)\n```\n\n比如下面的代码：\n\n```\nclass MyShinyClass(object):\n    pass\n```\n\n可以手动通过type创建，其实\n\n```python\nMyShinyClass = type('MyShinyClass', (), {})  # 返回一个类对象\nprint MyShinyClass\n#输出：<class '__main__.MyShinyClass'>\nprint MyShinyClass()  #  创建一个该类的实例\n#输出：<__main__.MyShinyClass object at 0x1085cd810>\n```\n\n 你会发现我们使用“MyShinyClass”作为类名，并且也可以把它当做一个变量来作为类的引用。\n\n接下来我们通过一个具体的例子看看type是如何创建类的，范例：javascript:void(0);)\n\n```python\n1、构建Foo类\n#构建目标代码\nclass Foo(object):\n    bar = True\n#使用type构建\nFoo = type('Foo', (), {'bar':True})\n\n2.继承Foo类\n#构建目标代码：\nclass FooChild(Foo):\n    pass\n#使用type构建\nFooChild = type('FooChild', (Foo,),{})\n\nprint FooChild\n#输出：<class '__main__.FooChild'>\nprint FooChild.bar   # bar属性是由Foo继承而来\n#输出：True\n\n3.为Foochild类增加方法\ndef echo_bar(self):\n    print self.bar\n\nFooChild = type('FooChild', (Foo,), {'echo_bar': echo_bar})\nhasattr(Foo, 'echo_bar')\n#输出：False\nhasattr(FooChild, 'echo_bar')\n#输出：True\nmy_foo = FooChild()\nmy_foo.echo_bar()\n#输出：True\n```\n\n可以看到，在Python中，类也是对象，你可以动态的创建类。这就是当我们使用关键字class时Python在幕后做的事情，而这就是通过元类来实现的。\n\n### type创建类与class的比较\n\n### **使用type创建带属性和方法的类**\n\n```python\n\n1.使用type创建带有属性的类,添加的属性是类属性，并不是实例属性\nGirl = type(\"Girl\",(),{\"country\":\"china\",\"sex\":\"male\"})\ngirl = Girl()\nprint(girl.country,girl.sex)  #使用type创建的类，调用属性时IDE不会自动提示补全\nprint(type(girl),type(Girl))\n'''\nchina male\n<class '__main__.Girl'> <class 'type'>\n'''\n \n2.使用type创建带有方法的类\n#python中方法有普通方法，类方法，静态方法。\ndef speak(self): #要带有参数self,因为类中方法默认带self参数。\n    print(\"这是给类添加的普通方法\")\n \n@classmethod\ndef c_run(cls):\n    print(\"这是给类添加的类方法\")\n \n@staticmethod\ndef s_eat():\n    print(\"这是给类添加的静态方法\")\n \n#创建类，给类添加静态方法，类方法，普通方法。跟添加类属性差不多.\nBoy = type(\"Boy\",(),{\"speak\":speak,\"c_run\":c_run,\"s_eat\":s_eat,\"sex\":\"female\"})\nboy = Boy()\nboy.speak()\nboy.s_eat() #调用类中的静态方法\nboy.c_run() #调用类中类方法\nprint(\"boy.sex:\",boy.sex)\nprint(type(boy),type(Boy))\n'''\n这是给类添加的普通方法\n这是给类添加的静态方法\n这是给类添加的类方法\nboy.sex: female\n<class '__main__.Boy'> <class 'type'>\n'''\n```\n\n### **使用type定义带继承，属性和方法的类**\n\n```python\nclass Person(object):\n    def __init__(self,name):\n        self.name = name\n    def p(self):\n        print(\"这是Person的方法\")\nclass Animal(object):\n    def run(self):\n        print(\"animal can run \")\n#定义一个拥有继承的类，继承的效果和性质和class一样。\nWorker = type(\"Worker\",(Person,Animal),{\"job\":\"程序员\"})\nw1 = Worker(\"tom\")\nw1.p()\nw1.run()\nprint(type(w1),type(Worker))\n'''\n这是Person的方法\nanimal can run \n<class '__main__.Worker'> <class 'type'>\n<class '__main__.Person'>\n'''\n```\n\n 总结：\n\n通过type添加的属性是类属性，并不是实例属性\n通过type可以给类添加普通方法，静态方法，类方法，效果跟class一样\ntype创建类的效果，包括继承等的使用性质和class创建的类一样。本质class创建类的本质就是用type创建。所以可以说python中所有类都是type创建的。\n\n# 自定义元类\n\n元类的主要目的就是为了当创建类时能够自动地改变类。通常，你会为API做这样的事情，你希望可以创建符合当前上下文的类。假想一个很傻的例子，你决定在你的模块里所有的类的属性都应该是大写形式。有好几种方法可以办到，但其中一种就是通过设定__metaclass__。采用这种方法，这个模块中的所有类都会通过这个元类来创建，我们只需要告诉元类把所有的属性都改成大写形式就万事大吉了。\n\n__metaclass__实际上可以被任意调用，它并不需要是一个正式的类。所以，我们这里就先以一个简单的函数作为例子开始。\n\n## 1、使用函数当做元类\n\n```python\n# 元类会自动将你通常传给‘type’的参数作为自己的参数传入\ndef upper_attr(future_class_name, future_class_parents, future_class_attr):\n    '''返回一个类对象，将属性都转为大写形式'''\n    #选择所有不以'__'开头的属性\n    attrs = ((name, value) for name, value in future_class_attr.items() if not name.startswith('__'))\n    # 将它们转为大写形式\n    uppercase_attr = dict((name.upper(), value) for name, value in attrs)\n    #通过'type'来做类对象的创建\n    return type(future_class_name, future_class_parents, uppercase_attr)#返回一个类\n\nclass Foo(object):\n    __metaclass__ = upper_attr\n    bar = 'bip' \n```\n\n```python\nprint hasattr(Foo, 'bar')\n# 输出: False\nprint hasattr(Foo, 'BAR')\n# 输出:True\n \nf = Foo()\nprint f.BAR\n# 输出:'bip'\n```\n\n## 2、使用class来当做元类\n\n由于__metaclass__必须返回一个类。\n\n```python\n# 请记住，'type'实际上是一个类，就像'str'和'int'一样。所以，你可以从type继承\n# __new__ 是在__init__之前被调用的特殊方法，__new__是用来创建对象并返回之的方法，__new_()是一个类方法\n# 而__init__只是用来将传入的参数初始化给对象，它是在对象创建之后执行的方法。\n# 你很少用到__new__，除非你希望能够控制对象的创建。这里，创建的对象是类，我们希望能够自定义它，所以我们这里改写__new__\n# 如果你希望的话，你也可以在__init__中做些事情。还有一些高级的用法会涉及到改写__call__特殊方法，但是我们这里不用，下面我们可以单独的讨论这个使用\n\nclass UpperAttrMetaClass(type):\n    def __new__(upperattr_metaclass, future_class_name, future_class_parents, future_class_attr):\n        attrs = ((name, value) for name, value in future_class_attr.items() if not name.startswith('__'))\n        uppercase_attr = dict((name.upper(), value) for name, value in attrs)\n        return type(future_class_name, future_class_parents, uppercase_attr)#返回一个对象，但同时这个对象是一个类\n```\n\n 但是，这种方式其实不是OOP。我们直接调用了type，而且我们没有改写父类的__new__方法。现在让我们这样去处理:\n\n```python\nclass UpperAttrMetaclass(type):\n    def __new__(upperattr_metaclass, future_class_name, future_class_parents, future_class_attr):\n        attrs = ((name, value) for name, value in future_class_attr.items() if not name.startswith('__'))\n        uppercase_attr = dict((name.upper(), value) for name, value in attrs)\n \n        # 复用type.__new__方法\n        # 这就是基本的OOP编程，没什么魔法。由于type是元类也就是类，因此它本身也是通过__new__方法生成其实例，只不过这个实例是一个类.\n        return type.__new__(upperattr_metaclass, future_class_name, future_class_parents, uppercase_attr)\n```\n\n你可能已经注意到了有个额外的参数upperattr_metaclass，这并没有什么特别的。类方法的第一个参数总是表示当前的实例，就像在普通的类方法中的self参数一样。当然了，为了清晰起见，这里的名字我起的比较长。但是就像self一样，所有的参数都有它们的传统名称。因此，在真实的产品代码中一个元类应该是像这样的：\n\n```python\nclass UpperAttrMetaclass(type):\n    def __new__(cls, name, bases, dct):\n        attrs = ((name, value) for name, value in dct.items() if not name.startswith('__')\n        uppercase_attr  = dict((name.upper(), value) for name, value in attrs)\n        return type.__new__(cls, name, bases, uppercase_attr)\n```\n\n如果使用super方法的话，我们还可以使它变得更清晰一些。\n\n```python\nclass UpperAttrMetaclass(type):\n    def __new__(cls, name, bases, dct):\n        attrs = ((name, value) for name, value in dct.items() if not name.startswith('__'))\n        uppercase_attr = dict((name.upper(), value) for name, value in attrs)\n        return super(UpperAttrMetaclass, cls).__new__(cls, name, bases, uppercase_attr)\n```\n\n# 参考\n\n<https://www.cnblogs.com/tkqasn/p/6524879.html>\n\n<https://blog.csdn.net/qq_26442553/article/details/82459234>\n\n","source":"_posts/python/python原类.md","raw":"---\ntitle: python原类\ndate: 2019-11-03 10:05:32\ntags:\n- python\n---\n\n# Python中一切皆对象，类也是对象 \n​    之前我们说Python中一切都是对象。对象从哪里来，对象是类的实例。如下，使用type()函数查看对象所属的类型。我们可以看到Python中所以实例都是类的对象。那么类呢，既然一切都是对象，那么类也应该是对象。如下代码中发现我们创建的Person类原来也是对象，是type的对象。\n\n```python\na =10; b = 12.12; c=\"hello\" ;d =[1,2,3,\"rr\"];e = {\"aa\":1,\"bb\":\"cc\"}\ntype(a);type(b);type(c);type(d);type(e)\n<class 'int'>   #a = 10;a也是对象，即10是对象，是int类型的对象\n<class 'float'> #float也是类，注意python很多类的写法是小写，有的则是大写\n<class 'str'>\n<class 'list'>\n<class 'dict'>class Person(object):\n    print(\"不调用类，也会执行我\")\n    def __init__(self,name):\n        self.name = name\n    def p(self):\n        print(\"this is a  methond\")\n        \nprint(Person)  \ntom = Person(\"tom\")\nprint(\"tom实例的类型是：%s\"%type(tom))  # 实例tom是Person类的对象。\nprint(\"Peron类的类型：%s\"%type(Person))  #结果看出我们创建的类属于type类,也就是说Person是type类的对象\nprint(\"type的类型是：%s\"%type(type))  #type是type自己的对象\n\n不调用类，也会执行我\n<class '__main__.Person'>\ntom实例的类型是：<class '__main__.Person'>\nPeron类的类型：<class 'type'>\ntype的类型是：<class 'type'>\n```\n# 动态创建类\n## **通过class动态的构建需要的类**\n\n因为类也是对象，你可以在运行时动态的创建它们，就像其他任何对象一样。首先，你可以在函数中创建类，使用class关键字即可。 \n\n```python\ndef choose_class(name):\n    if name == 'foo':\n        class Foo(object):\n            pass\n        return Foo     # 返回的是类，不是类的实例\n    else:\n        class Bar(object):\n            pass\n        return Bar\nMyClass = choose_class('foo')\n\nprint MyClass              # 函数返回的是类，不是类的实例\n#输出：<class '__main__.Foo'>\n\nprint MyClass()            # 你可以通过这个类创建类实例，也就是对象\n#输出：<__main__.Foo object at 0x1085ed950\n```\n\n## **通过type函数构造类**\n\n但这还不够动态，因为你仍然需要自己编写整个类的代码。由于类也是对象，所以它们必须是通过什么东西来生成的才对。当你使用class关键字时，Python解释器自动创建这个对象。但就和Python中的大多数事情一样，Python仍然提供给你手动处理的方法。还记得内建函数type吗？这个古老但强大的函数能够让你知道一个对象的类型是什么，就像这样：\n\n```python\nprint type(1)\n#输出：<type 'int'>\nprint type(\"1\")\n#输出：<type 'str'>\nprint type(ObjectCreator)\n#输出：<type 'type'>\nprint type(ObjectCreator())\n#输出：<class '__main__.ObjectCreator'>\n```\n\n这里，type有一种完全不同的能力，它也能动态的创建类。type可以接受一个类的描述作为参数，然后返回一个类。（我知道，根据传入参数的不同，同一个函数拥有两种完全不同的用法是一件很傻的事情，但这在Python中是为了保持向后兼容性）\n\n**type的语法：**\n\n```\ntype(类名, 父类的元组（针对继承的情况，可以为空），包含属性的字典（名称和值）)\n```\n\n比如下面的代码：\n\n```\nclass MyShinyClass(object):\n    pass\n```\n\n可以手动通过type创建，其实\n\n```python\nMyShinyClass = type('MyShinyClass', (), {})  # 返回一个类对象\nprint MyShinyClass\n#输出：<class '__main__.MyShinyClass'>\nprint MyShinyClass()  #  创建一个该类的实例\n#输出：<__main__.MyShinyClass object at 0x1085cd810>\n```\n\n 你会发现我们使用“MyShinyClass”作为类名，并且也可以把它当做一个变量来作为类的引用。\n\n接下来我们通过一个具体的例子看看type是如何创建类的，范例：javascript:void(0);)\n\n```python\n1、构建Foo类\n#构建目标代码\nclass Foo(object):\n    bar = True\n#使用type构建\nFoo = type('Foo', (), {'bar':True})\n\n2.继承Foo类\n#构建目标代码：\nclass FooChild(Foo):\n    pass\n#使用type构建\nFooChild = type('FooChild', (Foo,),{})\n\nprint FooChild\n#输出：<class '__main__.FooChild'>\nprint FooChild.bar   # bar属性是由Foo继承而来\n#输出：True\n\n3.为Foochild类增加方法\ndef echo_bar(self):\n    print self.bar\n\nFooChild = type('FooChild', (Foo,), {'echo_bar': echo_bar})\nhasattr(Foo, 'echo_bar')\n#输出：False\nhasattr(FooChild, 'echo_bar')\n#输出：True\nmy_foo = FooChild()\nmy_foo.echo_bar()\n#输出：True\n```\n\n可以看到，在Python中，类也是对象，你可以动态的创建类。这就是当我们使用关键字class时Python在幕后做的事情，而这就是通过元类来实现的。\n\n### type创建类与class的比较\n\n### **使用type创建带属性和方法的类**\n\n```python\n\n1.使用type创建带有属性的类,添加的属性是类属性，并不是实例属性\nGirl = type(\"Girl\",(),{\"country\":\"china\",\"sex\":\"male\"})\ngirl = Girl()\nprint(girl.country,girl.sex)  #使用type创建的类，调用属性时IDE不会自动提示补全\nprint(type(girl),type(Girl))\n'''\nchina male\n<class '__main__.Girl'> <class 'type'>\n'''\n \n2.使用type创建带有方法的类\n#python中方法有普通方法，类方法，静态方法。\ndef speak(self): #要带有参数self,因为类中方法默认带self参数。\n    print(\"这是给类添加的普通方法\")\n \n@classmethod\ndef c_run(cls):\n    print(\"这是给类添加的类方法\")\n \n@staticmethod\ndef s_eat():\n    print(\"这是给类添加的静态方法\")\n \n#创建类，给类添加静态方法，类方法，普通方法。跟添加类属性差不多.\nBoy = type(\"Boy\",(),{\"speak\":speak,\"c_run\":c_run,\"s_eat\":s_eat,\"sex\":\"female\"})\nboy = Boy()\nboy.speak()\nboy.s_eat() #调用类中的静态方法\nboy.c_run() #调用类中类方法\nprint(\"boy.sex:\",boy.sex)\nprint(type(boy),type(Boy))\n'''\n这是给类添加的普通方法\n这是给类添加的静态方法\n这是给类添加的类方法\nboy.sex: female\n<class '__main__.Boy'> <class 'type'>\n'''\n```\n\n### **使用type定义带继承，属性和方法的类**\n\n```python\nclass Person(object):\n    def __init__(self,name):\n        self.name = name\n    def p(self):\n        print(\"这是Person的方法\")\nclass Animal(object):\n    def run(self):\n        print(\"animal can run \")\n#定义一个拥有继承的类，继承的效果和性质和class一样。\nWorker = type(\"Worker\",(Person,Animal),{\"job\":\"程序员\"})\nw1 = Worker(\"tom\")\nw1.p()\nw1.run()\nprint(type(w1),type(Worker))\n'''\n这是Person的方法\nanimal can run \n<class '__main__.Worker'> <class 'type'>\n<class '__main__.Person'>\n'''\n```\n\n 总结：\n\n通过type添加的属性是类属性，并不是实例属性\n通过type可以给类添加普通方法，静态方法，类方法，效果跟class一样\ntype创建类的效果，包括继承等的使用性质和class创建的类一样。本质class创建类的本质就是用type创建。所以可以说python中所有类都是type创建的。\n\n# 自定义元类\n\n元类的主要目的就是为了当创建类时能够自动地改变类。通常，你会为API做这样的事情，你希望可以创建符合当前上下文的类。假想一个很傻的例子，你决定在你的模块里所有的类的属性都应该是大写形式。有好几种方法可以办到，但其中一种就是通过设定__metaclass__。采用这种方法，这个模块中的所有类都会通过这个元类来创建，我们只需要告诉元类把所有的属性都改成大写形式就万事大吉了。\n\n__metaclass__实际上可以被任意调用，它并不需要是一个正式的类。所以，我们这里就先以一个简单的函数作为例子开始。\n\n## 1、使用函数当做元类\n\n```python\n# 元类会自动将你通常传给‘type’的参数作为自己的参数传入\ndef upper_attr(future_class_name, future_class_parents, future_class_attr):\n    '''返回一个类对象，将属性都转为大写形式'''\n    #选择所有不以'__'开头的属性\n    attrs = ((name, value) for name, value in future_class_attr.items() if not name.startswith('__'))\n    # 将它们转为大写形式\n    uppercase_attr = dict((name.upper(), value) for name, value in attrs)\n    #通过'type'来做类对象的创建\n    return type(future_class_name, future_class_parents, uppercase_attr)#返回一个类\n\nclass Foo(object):\n    __metaclass__ = upper_attr\n    bar = 'bip' \n```\n\n```python\nprint hasattr(Foo, 'bar')\n# 输出: False\nprint hasattr(Foo, 'BAR')\n# 输出:True\n \nf = Foo()\nprint f.BAR\n# 输出:'bip'\n```\n\n## 2、使用class来当做元类\n\n由于__metaclass__必须返回一个类。\n\n```python\n# 请记住，'type'实际上是一个类，就像'str'和'int'一样。所以，你可以从type继承\n# __new__ 是在__init__之前被调用的特殊方法，__new__是用来创建对象并返回之的方法，__new_()是一个类方法\n# 而__init__只是用来将传入的参数初始化给对象，它是在对象创建之后执行的方法。\n# 你很少用到__new__，除非你希望能够控制对象的创建。这里，创建的对象是类，我们希望能够自定义它，所以我们这里改写__new__\n# 如果你希望的话，你也可以在__init__中做些事情。还有一些高级的用法会涉及到改写__call__特殊方法，但是我们这里不用，下面我们可以单独的讨论这个使用\n\nclass UpperAttrMetaClass(type):\n    def __new__(upperattr_metaclass, future_class_name, future_class_parents, future_class_attr):\n        attrs = ((name, value) for name, value in future_class_attr.items() if not name.startswith('__'))\n        uppercase_attr = dict((name.upper(), value) for name, value in attrs)\n        return type(future_class_name, future_class_parents, uppercase_attr)#返回一个对象，但同时这个对象是一个类\n```\n\n 但是，这种方式其实不是OOP。我们直接调用了type，而且我们没有改写父类的__new__方法。现在让我们这样去处理:\n\n```python\nclass UpperAttrMetaclass(type):\n    def __new__(upperattr_metaclass, future_class_name, future_class_parents, future_class_attr):\n        attrs = ((name, value) for name, value in future_class_attr.items() if not name.startswith('__'))\n        uppercase_attr = dict((name.upper(), value) for name, value in attrs)\n \n        # 复用type.__new__方法\n        # 这就是基本的OOP编程，没什么魔法。由于type是元类也就是类，因此它本身也是通过__new__方法生成其实例，只不过这个实例是一个类.\n        return type.__new__(upperattr_metaclass, future_class_name, future_class_parents, uppercase_attr)\n```\n\n你可能已经注意到了有个额外的参数upperattr_metaclass，这并没有什么特别的。类方法的第一个参数总是表示当前的实例，就像在普通的类方法中的self参数一样。当然了，为了清晰起见，这里的名字我起的比较长。但是就像self一样，所有的参数都有它们的传统名称。因此，在真实的产品代码中一个元类应该是像这样的：\n\n```python\nclass UpperAttrMetaclass(type):\n    def __new__(cls, name, bases, dct):\n        attrs = ((name, value) for name, value in dct.items() if not name.startswith('__')\n        uppercase_attr  = dict((name.upper(), value) for name, value in attrs)\n        return type.__new__(cls, name, bases, uppercase_attr)\n```\n\n如果使用super方法的话，我们还可以使它变得更清晰一些。\n\n```python\nclass UpperAttrMetaclass(type):\n    def __new__(cls, name, bases, dct):\n        attrs = ((name, value) for name, value in dct.items() if not name.startswith('__'))\n        uppercase_attr = dict((name.upper(), value) for name, value in attrs)\n        return super(UpperAttrMetaclass, cls).__new__(cls, name, bases, uppercase_attr)\n```\n\n# 参考\n\n<https://www.cnblogs.com/tkqasn/p/6524879.html>\n\n<https://blog.csdn.net/qq_26442553/article/details/82459234>\n\n","slug":"python/python原类","published":1,"updated":"2019-11-03T02:24:17.690Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblon006v4tjehgqp1rw0","content":"<h1 id=\"Python中一切皆对象，类也是对象\"><a href=\"#Python中一切皆对象，类也是对象\" class=\"headerlink\" title=\"Python中一切皆对象，类也是对象\"></a>Python中一切皆对象，类也是对象</h1><p>​    之前我们说Python中一切都是对象。对象从哪里来，对象是类的实例。如下，使用type()函数查看对象所属的类型。我们可以看到Python中所以实例都是类的对象。那么类呢，既然一切都是对象，那么类也应该是对象。如下代码中发现我们创建的Person类原来也是对象，是type的对象。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a =<span class=\"number\">10</span>; b = <span class=\"number\">12.12</span>; c=<span class=\"string\">\"hello\"</span> ;d =[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">\"rr\"</span>];e = &#123;<span class=\"string\">\"aa\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"bb\"</span>:<span class=\"string\">\"cc\"</span>&#125;</span><br><span class=\"line\">type(a);type(b);type(c);type(d);type(e)</span><br><span class=\"line\">&lt;class 'int'&gt;   #a = 10;a也是对象，即10是对象，是int类型的对象</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">float</span>'&gt; #<span class=\"title\">float</span>也是类，注意<span class=\"title\">python</span>很多类的写法是小写，有的则是大写</span></span><br><span class=\"line\"><span class=\"class\">&lt;<span class=\"title\">class</span> '<span class=\"title\">str</span>'&gt;</span></span><br><span class=\"line\"><span class=\"class\">&lt;<span class=\"title\">class</span> '<span class=\"title\">list</span>'&gt;</span></span><br><span class=\"line\"><span class=\"class\">&lt;<span class=\"title\">class</span> '<span class=\"title\">dict</span>'&gt;<span class=\"title\">class</span> <span class=\"title\">Person</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"不调用类，也会执行我\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">p</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"this is a  methond\"</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">print(Person)  </span><br><span class=\"line\">tom = Person(<span class=\"string\">\"tom\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"tom实例的类型是：%s\"</span>%type(tom))  <span class=\"comment\"># 实例tom是Person类的对象。</span></span><br><span class=\"line\">print(<span class=\"string\">\"Peron类的类型：%s\"</span>%type(Person))  <span class=\"comment\">#结果看出我们创建的类属于type类,也就是说Person是type类的对象</span></span><br><span class=\"line\">print(<span class=\"string\">\"type的类型是：%s\"</span>%type(type))  <span class=\"comment\">#type是type自己的对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">不调用类，也会执行我</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">__main__</span>.<span class=\"title\">Person</span>'&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">tom</span>实例的类型是：&lt;<span class=\"title\">class</span> '<span class=\"title\">__main__</span>.<span class=\"title\">Person</span>'&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">Peron</span>类的类型：&lt;<span class=\"title\">class</span> '<span class=\"title\">type</span>'&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">type</span>的类型是：&lt;<span class=\"title\">class</span> '<span class=\"title\">type</span>'&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"动态创建类\"><a href=\"#动态创建类\" class=\"headerlink\" title=\"动态创建类\"></a>动态创建类</h1><h2 id=\"通过class动态的构建需要的类\"><a href=\"#通过class动态的构建需要的类\" class=\"headerlink\" title=\"通过class动态的构建需要的类\"></a><strong>通过class动态的构建需要的类</strong></h2><p>因为类也是对象，你可以在运行时动态的创建它们，就像其他任何对象一样。首先，你可以在函数中创建类，使用class关键字即可。 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">choose_class</span><span class=\"params\">(name)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> name == <span class=\"string\">'foo'</span>:</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Foo     <span class=\"comment\"># 返回的是类，不是类的实例</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Bar</span><br><span class=\"line\">MyClass = choose_class(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> MyClass              <span class=\"comment\"># 函数返回的是类，不是类的实例</span></span><br><span class=\"line\"><span class=\"comment\">#输出：&lt;class '__main__.Foo'&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> MyClass()            <span class=\"comment\"># 你可以通过这个类创建类实例，也就是对象</span></span><br><span class=\"line\"><span class=\"comment\">#输出：&lt;__main__.Foo object at 0x1085ed950</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"通过type函数构造类\"><a href=\"#通过type函数构造类\" class=\"headerlink\" title=\"通过type函数构造类\"></a><strong>通过type函数构造类</strong></h2><p>但这还不够动态，因为你仍然需要自己编写整个类的代码。由于类也是对象，所以它们必须是通过什么东西来生成的才对。当你使用class关键字时，Python解释器自动创建这个对象。但就和Python中的大多数事情一样，Python仍然提供给你手动处理的方法。还记得内建函数type吗？这个古老但强大的函数能够让你知道一个对象的类型是什么，就像这样：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">print</span> type(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出：&lt;type 'int'&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> type(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出：&lt;type 'str'&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> type(ObjectCreator)</span><br><span class=\"line\"><span class=\"comment\">#输出：&lt;type 'type'&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> type(ObjectCreator())</span><br><span class=\"line\"><span class=\"comment\">#输出：&lt;class '__main__.ObjectCreator'&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里，type有一种完全不同的能力，它也能动态的创建类。type可以接受一个类的描述作为参数，然后返回一个类。（我知道，根据传入参数的不同，同一个函数拥有两种完全不同的用法是一件很傻的事情，但这在Python中是为了保持向后兼容性）</p>\n<p><strong>type的语法：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type(类名, 父类的元组（针对继承的情况，可以为空），包含属性的字典（名称和值）)</span><br></pre></td></tr></table></figure>\n<p>比如下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MyShinyClass(object):</span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n<p>可以手动通过type创建，其实</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyShinyClass = type(<span class=\"string\">'MyShinyClass'</span>, (), &#123;&#125;)  <span class=\"comment\"># 返回一个类对象</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> MyShinyClass</span><br><span class=\"line\"><span class=\"comment\">#输出：&lt;class '__main__.MyShinyClass'&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> MyShinyClass()  <span class=\"comment\">#  创建一个该类的实例</span></span><br><span class=\"line\"><span class=\"comment\">#输出：&lt;__main__.MyShinyClass object at 0x1085cd810&gt;</span></span><br></pre></td></tr></table></figure>\n<p> 你会发现我们使用“MyShinyClass”作为类名，并且也可以把它当做一个变量来作为类的引用。</p>\n<p>接下来我们通过一个具体的例子看看type是如何创建类的，范例：javascript:void(0);)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、构建Foo类</span><br><span class=\"line\"><span class=\"comment\">#构建目标代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    bar = <span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"comment\">#使用type构建</span></span><br><span class=\"line\">Foo = type(<span class=\"string\">'Foo'</span>, (), &#123;<span class=\"string\">'bar'</span>:<span class=\"keyword\">True</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>继承Foo类</span><br><span class=\"line\"><span class=\"comment\">#构建目标代码：</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooChild</span><span class=\"params\">(Foo)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"comment\">#使用type构建</span></span><br><span class=\"line\">FooChild = type(<span class=\"string\">'FooChild'</span>, (Foo,),&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> FooChild</span><br><span class=\"line\"><span class=\"comment\">#输出：&lt;class '__main__.FooChild'&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> FooChild.bar   <span class=\"comment\"># bar属性是由Foo继承而来</span></span><br><span class=\"line\"><span class=\"comment\">#输出：True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>为Foochild类增加方法</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">echo_bar</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> self.bar</span><br><span class=\"line\"></span><br><span class=\"line\">FooChild = type(<span class=\"string\">'FooChild'</span>, (Foo,), &#123;<span class=\"string\">'echo_bar'</span>: echo_bar&#125;)</span><br><span class=\"line\">hasattr(Foo, <span class=\"string\">'echo_bar'</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出：False</span></span><br><span class=\"line\">hasattr(FooChild, <span class=\"string\">'echo_bar'</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出：True</span></span><br><span class=\"line\">my_foo = FooChild()</span><br><span class=\"line\">my_foo.echo_bar()</span><br><span class=\"line\"><span class=\"comment\">#输出：True</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，在Python中，类也是对象，你可以动态的创建类。这就是当我们使用关键字class时Python在幕后做的事情，而这就是通过元类来实现的。</p>\n<h3 id=\"type创建类与class的比较\"><a href=\"#type创建类与class的比较\" class=\"headerlink\" title=\"type创建类与class的比较\"></a>type创建类与class的比较</h3><h3 id=\"使用type创建带属性和方法的类\"><a href=\"#使用type创建带属性和方法的类\" class=\"headerlink\" title=\"使用type创建带属性和方法的类\"></a><strong>使用type创建带属性和方法的类</strong></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span>使用type创建带有属性的类,添加的属性是类属性，并不是实例属性</span><br><span class=\"line\">Girl = type(<span class=\"string\">\"Girl\"</span>,(),&#123;<span class=\"string\">\"country\"</span>:<span class=\"string\">\"china\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"string\">\"male\"</span>&#125;)</span><br><span class=\"line\">girl = Girl()</span><br><span class=\"line\">print(girl.country,girl.sex)  <span class=\"comment\">#使用type创建的类，调用属性时IDE不会自动提示补全</span></span><br><span class=\"line\">print(type(girl),type(Girl))</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">china male</span></span><br><span class=\"line\"><span class=\"string\">&lt;class '__main__.Girl'&gt; &lt;class 'type'&gt;</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"number\">2.</span>使用type创建带有方法的类</span><br><span class=\"line\"><span class=\"comment\">#python中方法有普通方法，类方法，静态方法。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">speak</span><span class=\"params\">(self)</span>:</span> <span class=\"comment\">#要带有参数self,因为类中方法默认带self参数。</span></span><br><span class=\"line\">    print(<span class=\"string\">\"这是给类添加的普通方法\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@classmethod</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">c_run</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"这是给类添加的类方法\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@staticmethod</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">s_eat</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"这是给类添加的静态方法\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#创建类，给类添加静态方法，类方法，普通方法。跟添加类属性差不多.</span></span><br><span class=\"line\">Boy = type(<span class=\"string\">\"Boy\"</span>,(),&#123;<span class=\"string\">\"speak\"</span>:speak,<span class=\"string\">\"c_run\"</span>:c_run,<span class=\"string\">\"s_eat\"</span>:s_eat,<span class=\"string\">\"sex\"</span>:<span class=\"string\">\"female\"</span>&#125;)</span><br><span class=\"line\">boy = Boy()</span><br><span class=\"line\">boy.speak()</span><br><span class=\"line\">boy.s_eat() <span class=\"comment\">#调用类中的静态方法</span></span><br><span class=\"line\">boy.c_run() <span class=\"comment\">#调用类中类方法</span></span><br><span class=\"line\">print(<span class=\"string\">\"boy.sex:\"</span>,boy.sex)</span><br><span class=\"line\">print(type(boy),type(Boy))</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">这是给类添加的普通方法</span></span><br><span class=\"line\"><span class=\"string\">这是给类添加的静态方法</span></span><br><span class=\"line\"><span class=\"string\">这是给类添加的类方法</span></span><br><span class=\"line\"><span class=\"string\">boy.sex: female</span></span><br><span class=\"line\"><span class=\"string\">&lt;class '__main__.Boy'&gt; &lt;class 'type'&gt;</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用type定义带继承，属性和方法的类\"><a href=\"#使用type定义带继承，属性和方法的类\" class=\"headerlink\" title=\"使用type定义带继承，属性和方法的类\"></a><strong>使用type定义带继承，属性和方法的类</strong></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">p</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"这是Person的方法\"</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"animal can run \"</span>)</span><br><span class=\"line\"><span class=\"comment\">#定义一个拥有继承的类，继承的效果和性质和class一样。</span></span><br><span class=\"line\">Worker = type(<span class=\"string\">\"Worker\"</span>,(Person,Animal),&#123;<span class=\"string\">\"job\"</span>:<span class=\"string\">\"程序员\"</span>&#125;)</span><br><span class=\"line\">w1 = Worker(<span class=\"string\">\"tom\"</span>)</span><br><span class=\"line\">w1.p()</span><br><span class=\"line\">w1.run()</span><br><span class=\"line\">print(type(w1),type(Worker))</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">这是Person的方法</span></span><br><span class=\"line\"><span class=\"string\">animal can run </span></span><br><span class=\"line\"><span class=\"string\">&lt;class '__main__.Worker'&gt; &lt;class 'type'&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;class '__main__.Person'&gt;</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<p> 总结：</p>\n<p>通过type添加的属性是类属性，并不是实例属性<br>通过type可以给类添加普通方法，静态方法，类方法，效果跟class一样<br>type创建类的效果，包括继承等的使用性质和class创建的类一样。本质class创建类的本质就是用type创建。所以可以说python中所有类都是type创建的。</p>\n<h1 id=\"自定义元类\"><a href=\"#自定义元类\" class=\"headerlink\" title=\"自定义元类\"></a>自定义元类</h1><p>元类的主要目的就是为了当创建类时能够自动地改变类。通常，你会为API做这样的事情，你希望可以创建符合当前上下文的类。假想一个很傻的例子，你决定在你的模块里所有的类的属性都应该是大写形式。有好几种方法可以办到，但其中一种就是通过设定<strong>metaclass</strong>。采用这种方法，这个模块中的所有类都会通过这个元类来创建，我们只需要告诉元类把所有的属性都改成大写形式就万事大吉了。</p>\n<p><strong>metaclass</strong>实际上可以被任意调用，它并不需要是一个正式的类。所以，我们这里就先以一个简单的函数作为例子开始。</p>\n<h2 id=\"1、使用函数当做元类\"><a href=\"#1、使用函数当做元类\" class=\"headerlink\" title=\"1、使用函数当做元类\"></a>1、使用函数当做元类</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 元类会自动将你通常传给‘type’的参数作为自己的参数传入</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">upper_attr</span><span class=\"params\">(future_class_name, future_class_parents, future_class_attr)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''返回一个类对象，将属性都转为大写形式'''</span></span><br><span class=\"line\">    <span class=\"comment\">#选择所有不以'__'开头的属性</span></span><br><span class=\"line\">    attrs = ((name, value) <span class=\"keyword\">for</span> name, value <span class=\"keyword\">in</span> future_class_attr.items() <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name.startswith(<span class=\"string\">'__'</span>))</span><br><span class=\"line\">    <span class=\"comment\"># 将它们转为大写形式</span></span><br><span class=\"line\">    uppercase_attr = dict((name.upper(), value) <span class=\"keyword\">for</span> name, value <span class=\"keyword\">in</span> attrs)</span><br><span class=\"line\">    <span class=\"comment\">#通过'type'来做类对象的创建</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> type(future_class_name, future_class_parents, uppercase_attr)<span class=\"comment\">#返回一个类</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    __metaclass__ = upper_attr</span><br><span class=\"line\">    bar = <span class=\"string\">'bip'</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">print</span> hasattr(Foo, <span class=\"string\">'bar'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出: False</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> hasattr(Foo, <span class=\"string\">'BAR'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出:True</span></span><br><span class=\"line\"> </span><br><span class=\"line\">f = Foo()</span><br><span class=\"line\"><span class=\"keyword\">print</span> f.BAR</span><br><span class=\"line\"><span class=\"comment\"># 输出:'bip'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2、使用class来当做元类\"><a href=\"#2、使用class来当做元类\" class=\"headerlink\" title=\"2、使用class来当做元类\"></a>2、使用class来当做元类</h2><p>由于<strong>metaclass</strong>必须返回一个类。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 请记住，'type'实际上是一个类，就像'str'和'int'一样。所以，你可以从type继承</span></span><br><span class=\"line\"><span class=\"comment\"># __new__ 是在__init__之前被调用的特殊方法，__new__是用来创建对象并返回之的方法，__new_()是一个类方法</span></span><br><span class=\"line\"><span class=\"comment\"># 而__init__只是用来将传入的参数初始化给对象，它是在对象创建之后执行的方法。</span></span><br><span class=\"line\"><span class=\"comment\"># 你很少用到__new__，除非你希望能够控制对象的创建。这里，创建的对象是类，我们希望能够自定义它，所以我们这里改写__new__</span></span><br><span class=\"line\"><span class=\"comment\"># 如果你希望的话，你也可以在__init__中做些事情。还有一些高级的用法会涉及到改写__call__特殊方法，但是我们这里不用，下面我们可以单独的讨论这个使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UpperAttrMetaClass</span><span class=\"params\">(type)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(upperattr_metaclass, future_class_name, future_class_parents, future_class_attr)</span>:</span></span><br><span class=\"line\">        attrs = ((name, value) <span class=\"keyword\">for</span> name, value <span class=\"keyword\">in</span> future_class_attr.items() <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name.startswith(<span class=\"string\">'__'</span>))</span><br><span class=\"line\">        uppercase_attr = dict((name.upper(), value) <span class=\"keyword\">for</span> name, value <span class=\"keyword\">in</span> attrs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> type(future_class_name, future_class_parents, uppercase_attr)<span class=\"comment\">#返回一个对象，但同时这个对象是一个类</span></span><br></pre></td></tr></table></figure>\n<p> 但是，这种方式其实不是OOP。我们直接调用了type，而且我们没有改写父类的<strong>new</strong>方法。现在让我们这样去处理:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UpperAttrMetaclass</span><span class=\"params\">(type)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(upperattr_metaclass, future_class_name, future_class_parents, future_class_attr)</span>:</span></span><br><span class=\"line\">        attrs = ((name, value) <span class=\"keyword\">for</span> name, value <span class=\"keyword\">in</span> future_class_attr.items() <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name.startswith(<span class=\"string\">'__'</span>))</span><br><span class=\"line\">        uppercase_attr = dict((name.upper(), value) <span class=\"keyword\">for</span> name, value <span class=\"keyword\">in</span> attrs)</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># 复用type.__new__方法</span></span><br><span class=\"line\">        <span class=\"comment\"># 这就是基本的OOP编程，没什么魔法。由于type是元类也就是类，因此它本身也是通过__new__方法生成其实例，只不过这个实例是一个类.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> type.__new__(upperattr_metaclass, future_class_name, future_class_parents, uppercase_attr)</span><br></pre></td></tr></table></figure>\n<p>你可能已经注意到了有个额外的参数upperattr_metaclass，这并没有什么特别的。类方法的第一个参数总是表示当前的实例，就像在普通的类方法中的self参数一样。当然了，为了清晰起见，这里的名字我起的比较长。但是就像self一样，所有的参数都有它们的传统名称。因此，在真实的产品代码中一个元类应该是像这样的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UpperAttrMetaclass</span><span class=\"params\">(type)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, name, bases, dct)</span>:</span></span><br><span class=\"line\">        attrs = ((name, value) <span class=\"keyword\">for</span> name, value <span class=\"keyword\">in</span> dct.items() <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name.startswith(<span class=\"string\">'__'</span>)</span><br><span class=\"line\">        uppercase_attr  = dict((name.upper(), value) <span class=\"keyword\">for</span> name, value <span class=\"keyword\">in</span> attrs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> type.__new__(cls, name, bases, uppercase_attr)</span><br></pre></td></tr></table></figure>\n<p>如果使用super方法的话，我们还可以使它变得更清晰一些。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UpperAttrMetaclass</span><span class=\"params\">(type)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, name, bases, dct)</span>:</span></span><br><span class=\"line\">        attrs = ((name, value) <span class=\"keyword\">for</span> name, value <span class=\"keyword\">in</span> dct.items() <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name.startswith(<span class=\"string\">'__'</span>))</span><br><span class=\"line\">        uppercase_attr = dict((name.upper(), value) <span class=\"keyword\">for</span> name, value <span class=\"keyword\">in</span> attrs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> super(UpperAttrMetaclass, cls).__new__(cls, name, bases, uppercase_attr)</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.cnblogs.com/tkqasn/p/6524879.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/tkqasn/p/6524879.html</a></p>\n<p><a href=\"https://blog.csdn.net/qq_26442553/article/details/82459234\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_26442553/article/details/82459234</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Python中一切皆对象，类也是对象\"><a href=\"#Python中一切皆对象，类也是对象\" class=\"headerlink\" title=\"Python中一切皆对象，类也是对象\"></a>Python中一切皆对象，类也是对象</h1><p>​    之前我们说Python中一切都是对象。对象从哪里来，对象是类的实例。如下，使用type()函数查看对象所属的类型。我们可以看到Python中所以实例都是类的对象。那么类呢，既然一切都是对象，那么类也应该是对象。如下代码中发现我们创建的Person类原来也是对象，是type的对象。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a =<span class=\"number\">10</span>; b = <span class=\"number\">12.12</span>; c=<span class=\"string\">\"hello\"</span> ;d =[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">\"rr\"</span>];e = &#123;<span class=\"string\">\"aa\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"bb\"</span>:<span class=\"string\">\"cc\"</span>&#125;</span><br><span class=\"line\">type(a);type(b);type(c);type(d);type(e)</span><br><span class=\"line\">&lt;class 'int'&gt;   #a = 10;a也是对象，即10是对象，是int类型的对象</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">float</span>'&gt; #<span class=\"title\">float</span>也是类，注意<span class=\"title\">python</span>很多类的写法是小写，有的则是大写</span></span><br><span class=\"line\"><span class=\"class\">&lt;<span class=\"title\">class</span> '<span class=\"title\">str</span>'&gt;</span></span><br><span class=\"line\"><span class=\"class\">&lt;<span class=\"title\">class</span> '<span class=\"title\">list</span>'&gt;</span></span><br><span class=\"line\"><span class=\"class\">&lt;<span class=\"title\">class</span> '<span class=\"title\">dict</span>'&gt;<span class=\"title\">class</span> <span class=\"title\">Person</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"不调用类，也会执行我\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">p</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"this is a  methond\"</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">print(Person)  </span><br><span class=\"line\">tom = Person(<span class=\"string\">\"tom\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"tom实例的类型是：%s\"</span>%type(tom))  <span class=\"comment\"># 实例tom是Person类的对象。</span></span><br><span class=\"line\">print(<span class=\"string\">\"Peron类的类型：%s\"</span>%type(Person))  <span class=\"comment\">#结果看出我们创建的类属于type类,也就是说Person是type类的对象</span></span><br><span class=\"line\">print(<span class=\"string\">\"type的类型是：%s\"</span>%type(type))  <span class=\"comment\">#type是type自己的对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">不调用类，也会执行我</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">__main__</span>.<span class=\"title\">Person</span>'&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">tom</span>实例的类型是：&lt;<span class=\"title\">class</span> '<span class=\"title\">__main__</span>.<span class=\"title\">Person</span>'&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">Peron</span>类的类型：&lt;<span class=\"title\">class</span> '<span class=\"title\">type</span>'&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">type</span>的类型是：&lt;<span class=\"title\">class</span> '<span class=\"title\">type</span>'&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"动态创建类\"><a href=\"#动态创建类\" class=\"headerlink\" title=\"动态创建类\"></a>动态创建类</h1><h2 id=\"通过class动态的构建需要的类\"><a href=\"#通过class动态的构建需要的类\" class=\"headerlink\" title=\"通过class动态的构建需要的类\"></a><strong>通过class动态的构建需要的类</strong></h2><p>因为类也是对象，你可以在运行时动态的创建它们，就像其他任何对象一样。首先，你可以在函数中创建类，使用class关键字即可。 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">choose_class</span><span class=\"params\">(name)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> name == <span class=\"string\">'foo'</span>:</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Foo     <span class=\"comment\"># 返回的是类，不是类的实例</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Bar</span><br><span class=\"line\">MyClass = choose_class(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> MyClass              <span class=\"comment\"># 函数返回的是类，不是类的实例</span></span><br><span class=\"line\"><span class=\"comment\">#输出：&lt;class '__main__.Foo'&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> MyClass()            <span class=\"comment\"># 你可以通过这个类创建类实例，也就是对象</span></span><br><span class=\"line\"><span class=\"comment\">#输出：&lt;__main__.Foo object at 0x1085ed950</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"通过type函数构造类\"><a href=\"#通过type函数构造类\" class=\"headerlink\" title=\"通过type函数构造类\"></a><strong>通过type函数构造类</strong></h2><p>但这还不够动态，因为你仍然需要自己编写整个类的代码。由于类也是对象，所以它们必须是通过什么东西来生成的才对。当你使用class关键字时，Python解释器自动创建这个对象。但就和Python中的大多数事情一样，Python仍然提供给你手动处理的方法。还记得内建函数type吗？这个古老但强大的函数能够让你知道一个对象的类型是什么，就像这样：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">print</span> type(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出：&lt;type 'int'&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> type(<span class=\"string\">\"1\"</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出：&lt;type 'str'&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> type(ObjectCreator)</span><br><span class=\"line\"><span class=\"comment\">#输出：&lt;type 'type'&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> type(ObjectCreator())</span><br><span class=\"line\"><span class=\"comment\">#输出：&lt;class '__main__.ObjectCreator'&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里，type有一种完全不同的能力，它也能动态的创建类。type可以接受一个类的描述作为参数，然后返回一个类。（我知道，根据传入参数的不同，同一个函数拥有两种完全不同的用法是一件很傻的事情，但这在Python中是为了保持向后兼容性）</p>\n<p><strong>type的语法：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type(类名, 父类的元组（针对继承的情况，可以为空），包含属性的字典（名称和值）)</span><br></pre></td></tr></table></figure>\n<p>比如下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MyShinyClass(object):</span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n<p>可以手动通过type创建，其实</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyShinyClass = type(<span class=\"string\">'MyShinyClass'</span>, (), &#123;&#125;)  <span class=\"comment\"># 返回一个类对象</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> MyShinyClass</span><br><span class=\"line\"><span class=\"comment\">#输出：&lt;class '__main__.MyShinyClass'&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> MyShinyClass()  <span class=\"comment\">#  创建一个该类的实例</span></span><br><span class=\"line\"><span class=\"comment\">#输出：&lt;__main__.MyShinyClass object at 0x1085cd810&gt;</span></span><br></pre></td></tr></table></figure>\n<p> 你会发现我们使用“MyShinyClass”作为类名，并且也可以把它当做一个变量来作为类的引用。</p>\n<p>接下来我们通过一个具体的例子看看type是如何创建类的，范例：javascript:void(0);)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、构建Foo类</span><br><span class=\"line\"><span class=\"comment\">#构建目标代码</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    bar = <span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"comment\">#使用type构建</span></span><br><span class=\"line\">Foo = type(<span class=\"string\">'Foo'</span>, (), &#123;<span class=\"string\">'bar'</span>:<span class=\"keyword\">True</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2.</span>继承Foo类</span><br><span class=\"line\"><span class=\"comment\">#构建目标代码：</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooChild</span><span class=\"params\">(Foo)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"comment\">#使用type构建</span></span><br><span class=\"line\">FooChild = type(<span class=\"string\">'FooChild'</span>, (Foo,),&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> FooChild</span><br><span class=\"line\"><span class=\"comment\">#输出：&lt;class '__main__.FooChild'&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> FooChild.bar   <span class=\"comment\"># bar属性是由Foo继承而来</span></span><br><span class=\"line\"><span class=\"comment\">#输出：True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3.</span>为Foochild类增加方法</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">echo_bar</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> self.bar</span><br><span class=\"line\"></span><br><span class=\"line\">FooChild = type(<span class=\"string\">'FooChild'</span>, (Foo,), &#123;<span class=\"string\">'echo_bar'</span>: echo_bar&#125;)</span><br><span class=\"line\">hasattr(Foo, <span class=\"string\">'echo_bar'</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出：False</span></span><br><span class=\"line\">hasattr(FooChild, <span class=\"string\">'echo_bar'</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出：True</span></span><br><span class=\"line\">my_foo = FooChild()</span><br><span class=\"line\">my_foo.echo_bar()</span><br><span class=\"line\"><span class=\"comment\">#输出：True</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，在Python中，类也是对象，你可以动态的创建类。这就是当我们使用关键字class时Python在幕后做的事情，而这就是通过元类来实现的。</p>\n<h3 id=\"type创建类与class的比较\"><a href=\"#type创建类与class的比较\" class=\"headerlink\" title=\"type创建类与class的比较\"></a>type创建类与class的比较</h3><h3 id=\"使用type创建带属性和方法的类\"><a href=\"#使用type创建带属性和方法的类\" class=\"headerlink\" title=\"使用type创建带属性和方法的类\"></a><strong>使用type创建带属性和方法的类</strong></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span>使用type创建带有属性的类,添加的属性是类属性，并不是实例属性</span><br><span class=\"line\">Girl = type(<span class=\"string\">\"Girl\"</span>,(),&#123;<span class=\"string\">\"country\"</span>:<span class=\"string\">\"china\"</span>,<span class=\"string\">\"sex\"</span>:<span class=\"string\">\"male\"</span>&#125;)</span><br><span class=\"line\">girl = Girl()</span><br><span class=\"line\">print(girl.country,girl.sex)  <span class=\"comment\">#使用type创建的类，调用属性时IDE不会自动提示补全</span></span><br><span class=\"line\">print(type(girl),type(Girl))</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">china male</span></span><br><span class=\"line\"><span class=\"string\">&lt;class '__main__.Girl'&gt; &lt;class 'type'&gt;</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"number\">2.</span>使用type创建带有方法的类</span><br><span class=\"line\"><span class=\"comment\">#python中方法有普通方法，类方法，静态方法。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">speak</span><span class=\"params\">(self)</span>:</span> <span class=\"comment\">#要带有参数self,因为类中方法默认带self参数。</span></span><br><span class=\"line\">    print(<span class=\"string\">\"这是给类添加的普通方法\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@classmethod</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">c_run</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"这是给类添加的类方法\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@staticmethod</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">s_eat</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"这是给类添加的静态方法\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#创建类，给类添加静态方法，类方法，普通方法。跟添加类属性差不多.</span></span><br><span class=\"line\">Boy = type(<span class=\"string\">\"Boy\"</span>,(),&#123;<span class=\"string\">\"speak\"</span>:speak,<span class=\"string\">\"c_run\"</span>:c_run,<span class=\"string\">\"s_eat\"</span>:s_eat,<span class=\"string\">\"sex\"</span>:<span class=\"string\">\"female\"</span>&#125;)</span><br><span class=\"line\">boy = Boy()</span><br><span class=\"line\">boy.speak()</span><br><span class=\"line\">boy.s_eat() <span class=\"comment\">#调用类中的静态方法</span></span><br><span class=\"line\">boy.c_run() <span class=\"comment\">#调用类中类方法</span></span><br><span class=\"line\">print(<span class=\"string\">\"boy.sex:\"</span>,boy.sex)</span><br><span class=\"line\">print(type(boy),type(Boy))</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">这是给类添加的普通方法</span></span><br><span class=\"line\"><span class=\"string\">这是给类添加的静态方法</span></span><br><span class=\"line\"><span class=\"string\">这是给类添加的类方法</span></span><br><span class=\"line\"><span class=\"string\">boy.sex: female</span></span><br><span class=\"line\"><span class=\"string\">&lt;class '__main__.Boy'&gt; &lt;class 'type'&gt;</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用type定义带继承，属性和方法的类\"><a href=\"#使用type定义带继承，属性和方法的类\" class=\"headerlink\" title=\"使用type定义带继承，属性和方法的类\"></a><strong>使用type定义带继承，属性和方法的类</strong></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">p</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"这是Person的方法\"</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"animal can run \"</span>)</span><br><span class=\"line\"><span class=\"comment\">#定义一个拥有继承的类，继承的效果和性质和class一样。</span></span><br><span class=\"line\">Worker = type(<span class=\"string\">\"Worker\"</span>,(Person,Animal),&#123;<span class=\"string\">\"job\"</span>:<span class=\"string\">\"程序员\"</span>&#125;)</span><br><span class=\"line\">w1 = Worker(<span class=\"string\">\"tom\"</span>)</span><br><span class=\"line\">w1.p()</span><br><span class=\"line\">w1.run()</span><br><span class=\"line\">print(type(w1),type(Worker))</span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">这是Person的方法</span></span><br><span class=\"line\"><span class=\"string\">animal can run </span></span><br><span class=\"line\"><span class=\"string\">&lt;class '__main__.Worker'&gt; &lt;class 'type'&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;class '__main__.Person'&gt;</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br></pre></td></tr></table></figure>\n<p> 总结：</p>\n<p>通过type添加的属性是类属性，并不是实例属性<br>通过type可以给类添加普通方法，静态方法，类方法，效果跟class一样<br>type创建类的效果，包括继承等的使用性质和class创建的类一样。本质class创建类的本质就是用type创建。所以可以说python中所有类都是type创建的。</p>\n<h1 id=\"自定义元类\"><a href=\"#自定义元类\" class=\"headerlink\" title=\"自定义元类\"></a>自定义元类</h1><p>元类的主要目的就是为了当创建类时能够自动地改变类。通常，你会为API做这样的事情，你希望可以创建符合当前上下文的类。假想一个很傻的例子，你决定在你的模块里所有的类的属性都应该是大写形式。有好几种方法可以办到，但其中一种就是通过设定<strong>metaclass</strong>。采用这种方法，这个模块中的所有类都会通过这个元类来创建，我们只需要告诉元类把所有的属性都改成大写形式就万事大吉了。</p>\n<p><strong>metaclass</strong>实际上可以被任意调用，它并不需要是一个正式的类。所以，我们这里就先以一个简单的函数作为例子开始。</p>\n<h2 id=\"1、使用函数当做元类\"><a href=\"#1、使用函数当做元类\" class=\"headerlink\" title=\"1、使用函数当做元类\"></a>1、使用函数当做元类</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 元类会自动将你通常传给‘type’的参数作为自己的参数传入</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">upper_attr</span><span class=\"params\">(future_class_name, future_class_parents, future_class_attr)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''返回一个类对象，将属性都转为大写形式'''</span></span><br><span class=\"line\">    <span class=\"comment\">#选择所有不以'__'开头的属性</span></span><br><span class=\"line\">    attrs = ((name, value) <span class=\"keyword\">for</span> name, value <span class=\"keyword\">in</span> future_class_attr.items() <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name.startswith(<span class=\"string\">'__'</span>))</span><br><span class=\"line\">    <span class=\"comment\"># 将它们转为大写形式</span></span><br><span class=\"line\">    uppercase_attr = dict((name.upper(), value) <span class=\"keyword\">for</span> name, value <span class=\"keyword\">in</span> attrs)</span><br><span class=\"line\">    <span class=\"comment\">#通过'type'来做类对象的创建</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> type(future_class_name, future_class_parents, uppercase_attr)<span class=\"comment\">#返回一个类</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    __metaclass__ = upper_attr</span><br><span class=\"line\">    bar = <span class=\"string\">'bip'</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">print</span> hasattr(Foo, <span class=\"string\">'bar'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出: False</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> hasattr(Foo, <span class=\"string\">'BAR'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出:True</span></span><br><span class=\"line\"> </span><br><span class=\"line\">f = Foo()</span><br><span class=\"line\"><span class=\"keyword\">print</span> f.BAR</span><br><span class=\"line\"><span class=\"comment\"># 输出:'bip'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2、使用class来当做元类\"><a href=\"#2、使用class来当做元类\" class=\"headerlink\" title=\"2、使用class来当做元类\"></a>2、使用class来当做元类</h2><p>由于<strong>metaclass</strong>必须返回一个类。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 请记住，'type'实际上是一个类，就像'str'和'int'一样。所以，你可以从type继承</span></span><br><span class=\"line\"><span class=\"comment\"># __new__ 是在__init__之前被调用的特殊方法，__new__是用来创建对象并返回之的方法，__new_()是一个类方法</span></span><br><span class=\"line\"><span class=\"comment\"># 而__init__只是用来将传入的参数初始化给对象，它是在对象创建之后执行的方法。</span></span><br><span class=\"line\"><span class=\"comment\"># 你很少用到__new__，除非你希望能够控制对象的创建。这里，创建的对象是类，我们希望能够自定义它，所以我们这里改写__new__</span></span><br><span class=\"line\"><span class=\"comment\"># 如果你希望的话，你也可以在__init__中做些事情。还有一些高级的用法会涉及到改写__call__特殊方法，但是我们这里不用，下面我们可以单独的讨论这个使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UpperAttrMetaClass</span><span class=\"params\">(type)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(upperattr_metaclass, future_class_name, future_class_parents, future_class_attr)</span>:</span></span><br><span class=\"line\">        attrs = ((name, value) <span class=\"keyword\">for</span> name, value <span class=\"keyword\">in</span> future_class_attr.items() <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name.startswith(<span class=\"string\">'__'</span>))</span><br><span class=\"line\">        uppercase_attr = dict((name.upper(), value) <span class=\"keyword\">for</span> name, value <span class=\"keyword\">in</span> attrs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> type(future_class_name, future_class_parents, uppercase_attr)<span class=\"comment\">#返回一个对象，但同时这个对象是一个类</span></span><br></pre></td></tr></table></figure>\n<p> 但是，这种方式其实不是OOP。我们直接调用了type，而且我们没有改写父类的<strong>new</strong>方法。现在让我们这样去处理:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UpperAttrMetaclass</span><span class=\"params\">(type)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(upperattr_metaclass, future_class_name, future_class_parents, future_class_attr)</span>:</span></span><br><span class=\"line\">        attrs = ((name, value) <span class=\"keyword\">for</span> name, value <span class=\"keyword\">in</span> future_class_attr.items() <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name.startswith(<span class=\"string\">'__'</span>))</span><br><span class=\"line\">        uppercase_attr = dict((name.upper(), value) <span class=\"keyword\">for</span> name, value <span class=\"keyword\">in</span> attrs)</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># 复用type.__new__方法</span></span><br><span class=\"line\">        <span class=\"comment\"># 这就是基本的OOP编程，没什么魔法。由于type是元类也就是类，因此它本身也是通过__new__方法生成其实例，只不过这个实例是一个类.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> type.__new__(upperattr_metaclass, future_class_name, future_class_parents, uppercase_attr)</span><br></pre></td></tr></table></figure>\n<p>你可能已经注意到了有个额外的参数upperattr_metaclass，这并没有什么特别的。类方法的第一个参数总是表示当前的实例，就像在普通的类方法中的self参数一样。当然了，为了清晰起见，这里的名字我起的比较长。但是就像self一样，所有的参数都有它们的传统名称。因此，在真实的产品代码中一个元类应该是像这样的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UpperAttrMetaclass</span><span class=\"params\">(type)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, name, bases, dct)</span>:</span></span><br><span class=\"line\">        attrs = ((name, value) <span class=\"keyword\">for</span> name, value <span class=\"keyword\">in</span> dct.items() <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name.startswith(<span class=\"string\">'__'</span>)</span><br><span class=\"line\">        uppercase_attr  = dict((name.upper(), value) <span class=\"keyword\">for</span> name, value <span class=\"keyword\">in</span> attrs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> type.__new__(cls, name, bases, uppercase_attr)</span><br></pre></td></tr></table></figure>\n<p>如果使用super方法的话，我们还可以使它变得更清晰一些。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UpperAttrMetaclass</span><span class=\"params\">(type)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, name, bases, dct)</span>:</span></span><br><span class=\"line\">        attrs = ((name, value) <span class=\"keyword\">for</span> name, value <span class=\"keyword\">in</span> dct.items() <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name.startswith(<span class=\"string\">'__'</span>))</span><br><span class=\"line\">        uppercase_attr = dict((name.upper(), value) <span class=\"keyword\">for</span> name, value <span class=\"keyword\">in</span> attrs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> super(UpperAttrMetaclass, cls).__new__(cls, name, bases, uppercase_attr)</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.cnblogs.com/tkqasn/p/6524879.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/tkqasn/p/6524879.html</a></p>\n<p><a href=\"https://blog.csdn.net/qq_26442553/article/details/82459234\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_26442553/article/details/82459234</a></p>\n"},{"title":"Spring优秀工具类Resource","date":"2020-10-11T16:00:00.000Z","_content":"\n<http://www.blogjava.net/coolingverse/articles/149364.html>\n\n文件资源的操作是应用程序中常见的功能，如当上传一个文件后将其保存在特定目录下，从指定地址加载一个配置文件等等。我们一般使用 JDK 的 I/O 处理类完成这些操作，但对于一般的应用程序来说，JDK 的这些操作类所提供的方法过于底层，直接使用它们进行文件操作不但程序编写复杂而且容易产生错误。相比于 JDK 的 File，Spring 的 Resource 接口（资源概念的描述接口）抽象层面更高且涵盖面更广，Spring 提供了许多方便易用的资源操作工具类，它们大大降低资源操作的复杂度，同时具有更强的普适性。这些工具类不依赖于 Spring 容器，这意味着您可以在程序中象一般普通类一样使用它们。\n\n加载文件资源\n\nSpring 定义了一个 org.springframework.core.io.Resource 接口，Resource 接口是为了统一各种类型不同的资源而定义的，Spring 提供了若干 Resource 接口的实现类，这些实现类可以轻松地加载不同类型的底层资源，并提供了获取文件名、URL 地址以及资源内容的操作方法。\n\n**访问文件资源**\n\n假设有一个文件地位于 Web 应用的类路径下，您可以通过以下方式对这个文件资源进行访问：\n\n- 通过 FileSystemResource 以文件系统绝对路径的方式进行访问；\n- 通过 ClassPathResource 以类路径的方式进行访问；\n- 通过 ServletContextResource 以相对于Web应用根目录的方式进行访问。\n\n相比于通过 JDK 的 File 类访问文件资源的方式，Spring 的 Resource 实现类无疑提供了更加灵活的操作方式，您可以根据情况选择适合的 Resource 实现类访问资源。下面，我们分别通过 FileSystemResource 和 ClassPathResource 访问同一个文件资源：\n\n\n**清单 1. FileSourceExample**\n\n```\n`package com.baobaotao.io; import java.io.IOException; import java.io.InputStream; import org.springframework.core.io.ClassPathResource; import org.springframework.core.io.FileSystemResource; import org.springframework.core.io.Resource; public class FileSourceExample {     public static void main(String[] args) {         try {             String filePath =              \"D:/masterSpring/chapter23/webapp/WEB-INF/classes/conf/file1.txt\";             // ① 使用系统文件路径方式加载文件             Resource res1 = new FileSystemResource(filePath);              // ② 使用类路径方式加载文件             Resource res2 = new ClassPathResource(\"conf/file1.txt\");             InputStream ins1 = res1.getInputStream();             InputStream ins2 = res2.getInputStream();             System.out.println(\"res1:\"+res1.getFilename());             System.out.println(\"res2:\"+res2.getFilename());         } catch (IOException e) {             e.printStackTrace();         }     } } `\n```\n\n \n\n在获取资源后，您就可以通过 Resource 接口定义的多个方法访问文件的数据和其它的信息：如您可以通过 getFileName() 获取文件名，通过 getFile() 获取资源对应的 File 对象，通过 getInputStream() 直接获取文件的输入流。此外，您还可以通过 createRelative(String relativePath) 在资源相对地址上创建新的资源。\n\n在 Web 应用中，您还可以通过 ServletContextResource 以相对于 Web 应用根目录的方式访问文件资源，如下所示：\n\n```\n`<%@ page language=\"java\" contentType=\"text/html; charset=utf-8\" pageEncoding=\"utf-8\"%> <jsp:directive.page import=\"     org.springframework.web.context.support.ServletContextResource\"/> <jsp:directive.page import=\"org.springframework.core.io.Resource\"/> <%     // ① 注意文件资源地址以相对于 Web 应用根路径的方式表示     Resource res3 = new ServletContextResource(application,          \"/WEB-INF/classes/conf/file1.txt\");     out.print(res3.getFilename()); %> `\n```\n\n \n\n对于位于远程服务器（Web 服务器或 FTP 服务器）的文件资源，您则可以方便地通过 UrlResource 进行访问。\n\n为了方便访问不同类型的资源，您必须使用相应的 Resource 实现类，是否可以在不显式使用 Resource 实现类的情况下，仅根据带特殊前缀的资源地址直接加载文件资源呢？Spring 提供了一个 ResourceUtils 工具类，它支持\"classpath:\"和\"file:\"的地址前缀，它能够从指定的地址加载文件资源，请看下面的例子：\n\n\n**清单 2. ResourceUtilsExample**\n\n```\n`package com.baobaotao.io; import java.io.File; import org.springframework.util.ResourceUtils; public class ResourceUtilsExample {     public static void main(String[] args) throws Throwable{         File clsFile = ResourceUtils.getFile(\"classpath:conf/file1.txt\");         System.out.println(clsFile.isFile());          String httpFilePath = \"file:D:/masterSpring/chapter23/src/conf/file1.txt\";         File httpFile = ResourceUtils.getFile(httpFilePath);         System.out.println(httpFile.isFile());             } } `\n```\n\n \n\nResourceUtils 的 getFile(String resourceLocation) 方法支持带特殊前缀的资源地址，这样，我们就可以在不和 Resource 实现类打交道的情况下使用 Spring 文件资源加载的功能了。\n\n**本地化文件资源**\n\n本地化文件资源是一组通过本地化标识名进行特殊命名的文件，Spring 提供的 LocalizedResourceHelper 允许通过文件资源基名和本地化实体获取匹配的本地化文件资源并以 Resource 对象返回。假设在类路径的 i18n 目录下，拥有一组基名为 message 的本地化文件资源，我们通过以下实例演示获取对应中国大陆和美国的本地化文件资源：\n\n\n**清单 3. LocaleResourceTest**\n\n```\n`package com.baobaotao.io; import java.util.Locale; import org.springframework.core.io.Resource; import org.springframework.core.io.support.LocalizedResourceHelper; public class LocaleResourceTest {     public static void main(String[] args) {         LocalizedResourceHelper lrHalper = new LocalizedResourceHelper();         // ① 获取对应美国的本地化文件资源         Resource msg_us = lrHalper.findLocalizedResource(\"i18n/message\", \".properties\",          Locale.US);         // ② 获取对应中国大陆的本地化文件资源         Resource msg_cn = lrHalper.findLocalizedResource(\"i18n/message\", \".properties\",          Locale.CHINA);         System.out.println(\"fileName(us):\"+msg_us.getFilename());          System.out.println(\"fileName(cn):\"+msg_cn.getFilename());     } } `\n```\n\n \n\n虽然 JDK 的 java.util.ResourceBundle 类也可以通过相似的方式获取本地化文件资源，但是其返回的是 ResourceBundle 类型的对象。如果您决定统一使用 Spring 的 Resource 接表征文件资源，那么 LocalizedResourceHelper 就是获取文件资源的非常适合的帮助类了。\n\n文件操作\n\n在使用各种 Resource 接口的实现类加载文件资源后，经常需要对文件资源进行读取、拷贝、转存等不同类型的操作。您可以通过 Resource 接口所提供了方法完成这些功能，不过在大多数情况下，通过 Spring 为 Resource 所配备的工具类完成文件资源的操作将更加方便。\n\n**文件内容拷贝**\n\n第一个我们要认识的是 FileCopyUtils，它提供了许多一步式的静态操作方法，能够将文件内容拷贝到一个目标 byte[]、String 甚至一个输出流或输出文件中。下面的实例展示了 FileCopyUtils 具体使用方法：\n\n\n**清单 4. FileCopyUtilsExample**\n\n往往我们都通过直接操作 InputStream 读取文件的内容，但是流操作的代码是比较底层的，代码的面向对象性并不强。通过 FileCopyUtils 读取和拷贝文件内容易于操作且相当直观。如在 ① 处，我们通过 FileCopyUtils 的 copyToByteArray(File in) 方法就可以直接将文件内容读到一个 byte[] 中；另一个可用的方法是 copyToByteArray(InputStream in)，它将输入流读取到一个 byte[] 中。\n\n如果是文本文件，您可能希望将文件内容读取到 String 中，此时您可以使用 copyToString(Reader in) 方法，如 ② 所示。使用 FileReader 对 File 进行封装，或使用 InputStreamReader 对 InputStream 进行封装就可以了。\n\nFileCopyUtils 还提供了多个将文件内容拷贝到各种目标对象中的方法，这些方法包括：\n\n| 方法                                                | 说明                                             |\n| --------------------------------------------------- | ------------------------------------------------ |\n| `static void copy(byte[] in, File out)`             | 将 byte[] 拷贝到一个文件中                       |\n| `static void copy(byte[] in, OutputStream out)`     | 将 byte[] 拷贝到一个输出流中                     |\n| `static int copy(File in, File out)`                | 将文件拷贝到另一个文件中                         |\n| `static int copy(InputStream in, OutputStream out)` | 将输入流拷贝到输出流中                           |\n| `static int copy(Reader in, Writer out)`            | 将 Reader 读取的内容拷贝到 Writer 指向目标输出中 |\n| `static void copy(String in, Writer out)`           | 将字符串拷贝到一个 Writer 指向的目标中           |\n\n在实例中，我们虽然使用 Resource 加载文件资源，但 FileCopyUtils 本身和 Resource 没有任何关系，您完全可以在基于 JDK I/O API 的程序中使用这个工具类。\n\n**属性文件操作**\n\n我们知道可以通过 java.util.Properties的load(InputStream inStream) 方法从一个输入流中加载属性资源。Spring 提供的 PropertiesLoaderUtils 允许您直接通过基于类路径的文件地址加载属性资源，请看下面的例子：\n\n```\n`package com.baobaotao.io; import java.util.Properties; import org.springframework.core.io.support.PropertiesLoaderUtils; public class PropertiesLoaderUtilsExample {     public static void main(String[] args) throws Throwable {             // ① jdbc.properties 是位于类路径下的文件         Properties props = PropertiesLoaderUtils.loadAllProperties(\"jdbc.properties\");         System.out.println(props.getProperty(\"jdbc.driverClassName\"));     } } `\n```\n\n \n\n一般情况下，应用程序的属性文件都放置在类路径下，所以 PropertiesLoaderUtils 比之于 Properties#load(InputStream inStream) 方法显然具有更强的实用性。此外，PropertiesLoaderUtils 还可以直接从 Resource 对象中加载属性资源：\n\n| 方法                                                         | 说明                                                         |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| `static Properties loadProperties(Resource resource)`        | 从 Resource 中加载属性                                       |\n| `static void fillProperties(Properties props, Resource resource)` | 将 Resource 中的属性数据添加到一个已经存在的 Properties 对象中 |\n\n**特殊编码的资源**\n\n当您使用 Resource 实现类加载文件资源时，它默认采用操作系统的编码格式。如果文件资源采用了特殊的编码格式（如 UTF-8），则在读取资源内容时必须事先通过 EncodedResource 指定编码格式，否则将会产生中文乱码的问题。\n\n\n**清单 5. EncodedResourceExample**\n\n```\n`package com.baobaotao.io; import org.springframework.core.io.ClassPathResource; import org.springframework.core.io.Resource; import org.springframework.core.io.support.EncodedResource; import org.springframework.util.FileCopyUtils; public class EncodedResourceExample {         public static void main(String[] args) throws Throwable  {             Resource res = new ClassPathResource(\"conf/file1.txt\");             // ① 指定文件资源对应的编码格式（UTF-8）             EncodedResource encRes = new EncodedResource(res,\"UTF-8\");             // ② 这样才能正确读取文件的内容，而不会出现乱码             String content  = FileCopyUtils.copyToString(encRes.getReader());             System.out.println(content);       } } `\n```\n\n\n\nEncodedResource 拥有一个 getResource() 方法获取 Resource，但该方法返回的是通过构造函数传入的原 Resource 对象，所以必须通过 EncodedResource#getReader() 获取应用编码后的 Reader 对象，然后再通过该 Reader 读取文件的内容。","source":"_posts/spring/Spring优秀工具类Resource.md","raw":"---\ntitle: Spring优秀工具类Resource\ndate: 2020-10-12\n---\n\n<http://www.blogjava.net/coolingverse/articles/149364.html>\n\n文件资源的操作是应用程序中常见的功能，如当上传一个文件后将其保存在特定目录下，从指定地址加载一个配置文件等等。我们一般使用 JDK 的 I/O 处理类完成这些操作，但对于一般的应用程序来说，JDK 的这些操作类所提供的方法过于底层，直接使用它们进行文件操作不但程序编写复杂而且容易产生错误。相比于 JDK 的 File，Spring 的 Resource 接口（资源概念的描述接口）抽象层面更高且涵盖面更广，Spring 提供了许多方便易用的资源操作工具类，它们大大降低资源操作的复杂度，同时具有更强的普适性。这些工具类不依赖于 Spring 容器，这意味着您可以在程序中象一般普通类一样使用它们。\n\n加载文件资源\n\nSpring 定义了一个 org.springframework.core.io.Resource 接口，Resource 接口是为了统一各种类型不同的资源而定义的，Spring 提供了若干 Resource 接口的实现类，这些实现类可以轻松地加载不同类型的底层资源，并提供了获取文件名、URL 地址以及资源内容的操作方法。\n\n**访问文件资源**\n\n假设有一个文件地位于 Web 应用的类路径下，您可以通过以下方式对这个文件资源进行访问：\n\n- 通过 FileSystemResource 以文件系统绝对路径的方式进行访问；\n- 通过 ClassPathResource 以类路径的方式进行访问；\n- 通过 ServletContextResource 以相对于Web应用根目录的方式进行访问。\n\n相比于通过 JDK 的 File 类访问文件资源的方式，Spring 的 Resource 实现类无疑提供了更加灵活的操作方式，您可以根据情况选择适合的 Resource 实现类访问资源。下面，我们分别通过 FileSystemResource 和 ClassPathResource 访问同一个文件资源：\n\n\n**清单 1. FileSourceExample**\n\n```\n`package com.baobaotao.io; import java.io.IOException; import java.io.InputStream; import org.springframework.core.io.ClassPathResource; import org.springframework.core.io.FileSystemResource; import org.springframework.core.io.Resource; public class FileSourceExample {     public static void main(String[] args) {         try {             String filePath =              \"D:/masterSpring/chapter23/webapp/WEB-INF/classes/conf/file1.txt\";             // ① 使用系统文件路径方式加载文件             Resource res1 = new FileSystemResource(filePath);              // ② 使用类路径方式加载文件             Resource res2 = new ClassPathResource(\"conf/file1.txt\");             InputStream ins1 = res1.getInputStream();             InputStream ins2 = res2.getInputStream();             System.out.println(\"res1:\"+res1.getFilename());             System.out.println(\"res2:\"+res2.getFilename());         } catch (IOException e) {             e.printStackTrace();         }     } } `\n```\n\n \n\n在获取资源后，您就可以通过 Resource 接口定义的多个方法访问文件的数据和其它的信息：如您可以通过 getFileName() 获取文件名，通过 getFile() 获取资源对应的 File 对象，通过 getInputStream() 直接获取文件的输入流。此外，您还可以通过 createRelative(String relativePath) 在资源相对地址上创建新的资源。\n\n在 Web 应用中，您还可以通过 ServletContextResource 以相对于 Web 应用根目录的方式访问文件资源，如下所示：\n\n```\n`<%@ page language=\"java\" contentType=\"text/html; charset=utf-8\" pageEncoding=\"utf-8\"%> <jsp:directive.page import=\"     org.springframework.web.context.support.ServletContextResource\"/> <jsp:directive.page import=\"org.springframework.core.io.Resource\"/> <%     // ① 注意文件资源地址以相对于 Web 应用根路径的方式表示     Resource res3 = new ServletContextResource(application,          \"/WEB-INF/classes/conf/file1.txt\");     out.print(res3.getFilename()); %> `\n```\n\n \n\n对于位于远程服务器（Web 服务器或 FTP 服务器）的文件资源，您则可以方便地通过 UrlResource 进行访问。\n\n为了方便访问不同类型的资源，您必须使用相应的 Resource 实现类，是否可以在不显式使用 Resource 实现类的情况下，仅根据带特殊前缀的资源地址直接加载文件资源呢？Spring 提供了一个 ResourceUtils 工具类，它支持\"classpath:\"和\"file:\"的地址前缀，它能够从指定的地址加载文件资源，请看下面的例子：\n\n\n**清单 2. ResourceUtilsExample**\n\n```\n`package com.baobaotao.io; import java.io.File; import org.springframework.util.ResourceUtils; public class ResourceUtilsExample {     public static void main(String[] args) throws Throwable{         File clsFile = ResourceUtils.getFile(\"classpath:conf/file1.txt\");         System.out.println(clsFile.isFile());          String httpFilePath = \"file:D:/masterSpring/chapter23/src/conf/file1.txt\";         File httpFile = ResourceUtils.getFile(httpFilePath);         System.out.println(httpFile.isFile());             } } `\n```\n\n \n\nResourceUtils 的 getFile(String resourceLocation) 方法支持带特殊前缀的资源地址，这样，我们就可以在不和 Resource 实现类打交道的情况下使用 Spring 文件资源加载的功能了。\n\n**本地化文件资源**\n\n本地化文件资源是一组通过本地化标识名进行特殊命名的文件，Spring 提供的 LocalizedResourceHelper 允许通过文件资源基名和本地化实体获取匹配的本地化文件资源并以 Resource 对象返回。假设在类路径的 i18n 目录下，拥有一组基名为 message 的本地化文件资源，我们通过以下实例演示获取对应中国大陆和美国的本地化文件资源：\n\n\n**清单 3. LocaleResourceTest**\n\n```\n`package com.baobaotao.io; import java.util.Locale; import org.springframework.core.io.Resource; import org.springframework.core.io.support.LocalizedResourceHelper; public class LocaleResourceTest {     public static void main(String[] args) {         LocalizedResourceHelper lrHalper = new LocalizedResourceHelper();         // ① 获取对应美国的本地化文件资源         Resource msg_us = lrHalper.findLocalizedResource(\"i18n/message\", \".properties\",          Locale.US);         // ② 获取对应中国大陆的本地化文件资源         Resource msg_cn = lrHalper.findLocalizedResource(\"i18n/message\", \".properties\",          Locale.CHINA);         System.out.println(\"fileName(us):\"+msg_us.getFilename());          System.out.println(\"fileName(cn):\"+msg_cn.getFilename());     } } `\n```\n\n \n\n虽然 JDK 的 java.util.ResourceBundle 类也可以通过相似的方式获取本地化文件资源，但是其返回的是 ResourceBundle 类型的对象。如果您决定统一使用 Spring 的 Resource 接表征文件资源，那么 LocalizedResourceHelper 就是获取文件资源的非常适合的帮助类了。\n\n文件操作\n\n在使用各种 Resource 接口的实现类加载文件资源后，经常需要对文件资源进行读取、拷贝、转存等不同类型的操作。您可以通过 Resource 接口所提供了方法完成这些功能，不过在大多数情况下，通过 Spring 为 Resource 所配备的工具类完成文件资源的操作将更加方便。\n\n**文件内容拷贝**\n\n第一个我们要认识的是 FileCopyUtils，它提供了许多一步式的静态操作方法，能够将文件内容拷贝到一个目标 byte[]、String 甚至一个输出流或输出文件中。下面的实例展示了 FileCopyUtils 具体使用方法：\n\n\n**清单 4. FileCopyUtilsExample**\n\n往往我们都通过直接操作 InputStream 读取文件的内容，但是流操作的代码是比较底层的，代码的面向对象性并不强。通过 FileCopyUtils 读取和拷贝文件内容易于操作且相当直观。如在 ① 处，我们通过 FileCopyUtils 的 copyToByteArray(File in) 方法就可以直接将文件内容读到一个 byte[] 中；另一个可用的方法是 copyToByteArray(InputStream in)，它将输入流读取到一个 byte[] 中。\n\n如果是文本文件，您可能希望将文件内容读取到 String 中，此时您可以使用 copyToString(Reader in) 方法，如 ② 所示。使用 FileReader 对 File 进行封装，或使用 InputStreamReader 对 InputStream 进行封装就可以了。\n\nFileCopyUtils 还提供了多个将文件内容拷贝到各种目标对象中的方法，这些方法包括：\n\n| 方法                                                | 说明                                             |\n| --------------------------------------------------- | ------------------------------------------------ |\n| `static void copy(byte[] in, File out)`             | 将 byte[] 拷贝到一个文件中                       |\n| `static void copy(byte[] in, OutputStream out)`     | 将 byte[] 拷贝到一个输出流中                     |\n| `static int copy(File in, File out)`                | 将文件拷贝到另一个文件中                         |\n| `static int copy(InputStream in, OutputStream out)` | 将输入流拷贝到输出流中                           |\n| `static int copy(Reader in, Writer out)`            | 将 Reader 读取的内容拷贝到 Writer 指向目标输出中 |\n| `static void copy(String in, Writer out)`           | 将字符串拷贝到一个 Writer 指向的目标中           |\n\n在实例中，我们虽然使用 Resource 加载文件资源，但 FileCopyUtils 本身和 Resource 没有任何关系，您完全可以在基于 JDK I/O API 的程序中使用这个工具类。\n\n**属性文件操作**\n\n我们知道可以通过 java.util.Properties的load(InputStream inStream) 方法从一个输入流中加载属性资源。Spring 提供的 PropertiesLoaderUtils 允许您直接通过基于类路径的文件地址加载属性资源，请看下面的例子：\n\n```\n`package com.baobaotao.io; import java.util.Properties; import org.springframework.core.io.support.PropertiesLoaderUtils; public class PropertiesLoaderUtilsExample {     public static void main(String[] args) throws Throwable {             // ① jdbc.properties 是位于类路径下的文件         Properties props = PropertiesLoaderUtils.loadAllProperties(\"jdbc.properties\");         System.out.println(props.getProperty(\"jdbc.driverClassName\"));     } } `\n```\n\n \n\n一般情况下，应用程序的属性文件都放置在类路径下，所以 PropertiesLoaderUtils 比之于 Properties#load(InputStream inStream) 方法显然具有更强的实用性。此外，PropertiesLoaderUtils 还可以直接从 Resource 对象中加载属性资源：\n\n| 方法                                                         | 说明                                                         |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| `static Properties loadProperties(Resource resource)`        | 从 Resource 中加载属性                                       |\n| `static void fillProperties(Properties props, Resource resource)` | 将 Resource 中的属性数据添加到一个已经存在的 Properties 对象中 |\n\n**特殊编码的资源**\n\n当您使用 Resource 实现类加载文件资源时，它默认采用操作系统的编码格式。如果文件资源采用了特殊的编码格式（如 UTF-8），则在读取资源内容时必须事先通过 EncodedResource 指定编码格式，否则将会产生中文乱码的问题。\n\n\n**清单 5. EncodedResourceExample**\n\n```\n`package com.baobaotao.io; import org.springframework.core.io.ClassPathResource; import org.springframework.core.io.Resource; import org.springframework.core.io.support.EncodedResource; import org.springframework.util.FileCopyUtils; public class EncodedResourceExample {         public static void main(String[] args) throws Throwable  {             Resource res = new ClassPathResource(\"conf/file1.txt\");             // ① 指定文件资源对应的编码格式（UTF-8）             EncodedResource encRes = new EncodedResource(res,\"UTF-8\");             // ② 这样才能正确读取文件的内容，而不会出现乱码             String content  = FileCopyUtils.copyToString(encRes.getReader());             System.out.println(content);       } } `\n```\n\n\n\nEncodedResource 拥有一个 getResource() 方法获取 Resource，但该方法返回的是通过构造函数传入的原 Resource 对象，所以必须通过 EncodedResource#getReader() 获取应用编码后的 Reader 对象，然后再通过该 Reader 读取文件的内容。","slug":"spring/Spring优秀工具类Resource","published":1,"updated":"2020-10-17T10:01:55.956Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepbloo006y4tjej3judy9k","content":"<p><a href=\"http://www.blogjava.net/coolingverse/articles/149364.html\" target=\"_blank\" rel=\"noopener\">http://www.blogjava.net/coolingverse/articles/149364.html</a></p>\n<p>文件资源的操作是应用程序中常见的功能，如当上传一个文件后将其保存在特定目录下，从指定地址加载一个配置文件等等。我们一般使用 JDK 的 I/O 处理类完成这些操作，但对于一般的应用程序来说，JDK 的这些操作类所提供的方法过于底层，直接使用它们进行文件操作不但程序编写复杂而且容易产生错误。相比于 JDK 的 File，Spring 的 Resource 接口（资源概念的描述接口）抽象层面更高且涵盖面更广，Spring 提供了许多方便易用的资源操作工具类，它们大大降低资源操作的复杂度，同时具有更强的普适性。这些工具类不依赖于 Spring 容器，这意味着您可以在程序中象一般普通类一样使用它们。</p>\n<p>加载文件资源</p>\n<p>Spring 定义了一个 org.springframework.core.io.Resource 接口，Resource 接口是为了统一各种类型不同的资源而定义的，Spring 提供了若干 Resource 接口的实现类，这些实现类可以轻松地加载不同类型的底层资源，并提供了获取文件名、URL 地址以及资源内容的操作方法。</p>\n<p><strong>访问文件资源</strong></p>\n<p>假设有一个文件地位于 Web 应用的类路径下，您可以通过以下方式对这个文件资源进行访问：</p>\n<ul>\n<li>通过 FileSystemResource 以文件系统绝对路径的方式进行访问；</li>\n<li>通过 ClassPathResource 以类路径的方式进行访问；</li>\n<li>通过 ServletContextResource 以相对于Web应用根目录的方式进行访问。</li>\n</ul>\n<p>相比于通过 JDK 的 File 类访问文件资源的方式，Spring 的 Resource 实现类无疑提供了更加灵活的操作方式，您可以根据情况选择适合的 Resource 实现类访问资源。下面，我们分别通过 FileSystemResource 和 ClassPathResource 访问同一个文件资源：</p>\n<p><strong>清单 1. FileSourceExample</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`package com.baobaotao.io; import java.io.IOException; import java.io.InputStream; import org.springframework.core.io.ClassPathResource; import org.springframework.core.io.FileSystemResource; import org.springframework.core.io.Resource; public class FileSourceExample &#123;     public static void main(String[] args) &#123;         try &#123;             String filePath =              &quot;D:/masterSpring/chapter23/webapp/WEB-INF/classes/conf/file1.txt&quot;;             // ① 使用系统文件路径方式加载文件             Resource res1 = new FileSystemResource(filePath);              // ② 使用类路径方式加载文件             Resource res2 = new ClassPathResource(&quot;conf/file1.txt&quot;);             InputStream ins1 = res1.getInputStream();             InputStream ins2 = res2.getInputStream();             System.out.println(&quot;res1:&quot;+res1.getFilename());             System.out.println(&quot;res2:&quot;+res2.getFilename());         &#125; catch (IOException e) &#123;             e.printStackTrace();         &#125;     &#125; &#125; `</span><br></pre></td></tr></table></figure>\n<p>在获取资源后，您就可以通过 Resource 接口定义的多个方法访问文件的数据和其它的信息：如您可以通过 getFileName() 获取文件名，通过 getFile() 获取资源对应的 File 对象，通过 getInputStream() 直接获取文件的输入流。此外，您还可以通过 createRelative(String relativePath) 在资源相对地址上创建新的资源。</p>\n<p>在 Web 应用中，您还可以通过 ServletContextResource 以相对于 Web 应用根目录的方式访问文件资源，如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt; &lt;jsp:directive.page import=&quot;     org.springframework.web.context.support.ServletContextResource&quot;/&gt; &lt;jsp:directive.page import=&quot;org.springframework.core.io.Resource&quot;/&gt; &lt;%     // ① 注意文件资源地址以相对于 Web 应用根路径的方式表示     Resource res3 = new ServletContextResource(application,          &quot;/WEB-INF/classes/conf/file1.txt&quot;);     out.print(res3.getFilename()); %&gt; `</span><br></pre></td></tr></table></figure>\n<p>对于位于远程服务器（Web 服务器或 FTP 服务器）的文件资源，您则可以方便地通过 UrlResource 进行访问。</p>\n<p>为了方便访问不同类型的资源，您必须使用相应的 Resource 实现类，是否可以在不显式使用 Resource 实现类的情况下，仅根据带特殊前缀的资源地址直接加载文件资源呢？Spring 提供了一个 ResourceUtils 工具类，它支持”classpath:”和”file:”的地址前缀，它能够从指定的地址加载文件资源，请看下面的例子：</p>\n<p><strong>清单 2. ResourceUtilsExample</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`package com.baobaotao.io; import java.io.File; import org.springframework.util.ResourceUtils; public class ResourceUtilsExample &#123;     public static void main(String[] args) throws Throwable&#123;         File clsFile = ResourceUtils.getFile(&quot;classpath:conf/file1.txt&quot;);         System.out.println(clsFile.isFile());          String httpFilePath = &quot;file:D:/masterSpring/chapter23/src/conf/file1.txt&quot;;         File httpFile = ResourceUtils.getFile(httpFilePath);         System.out.println(httpFile.isFile());             &#125; &#125; `</span><br></pre></td></tr></table></figure>\n<p>ResourceUtils 的 getFile(String resourceLocation) 方法支持带特殊前缀的资源地址，这样，我们就可以在不和 Resource 实现类打交道的情况下使用 Spring 文件资源加载的功能了。</p>\n<p><strong>本地化文件资源</strong></p>\n<p>本地化文件资源是一组通过本地化标识名进行特殊命名的文件，Spring 提供的 LocalizedResourceHelper 允许通过文件资源基名和本地化实体获取匹配的本地化文件资源并以 Resource 对象返回。假设在类路径的 i18n 目录下，拥有一组基名为 message 的本地化文件资源，我们通过以下实例演示获取对应中国大陆和美国的本地化文件资源：</p>\n<p><strong>清单 3. LocaleResourceTest</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`package com.baobaotao.io; import java.util.Locale; import org.springframework.core.io.Resource; import org.springframework.core.io.support.LocalizedResourceHelper; public class LocaleResourceTest &#123;     public static void main(String[] args) &#123;         LocalizedResourceHelper lrHalper = new LocalizedResourceHelper();         // ① 获取对应美国的本地化文件资源         Resource msg_us = lrHalper.findLocalizedResource(&quot;i18n/message&quot;, &quot;.properties&quot;,          Locale.US);         // ② 获取对应中国大陆的本地化文件资源         Resource msg_cn = lrHalper.findLocalizedResource(&quot;i18n/message&quot;, &quot;.properties&quot;,          Locale.CHINA);         System.out.println(&quot;fileName(us):&quot;+msg_us.getFilename());          System.out.println(&quot;fileName(cn):&quot;+msg_cn.getFilename());     &#125; &#125; `</span><br></pre></td></tr></table></figure>\n<p>虽然 JDK 的 java.util.ResourceBundle 类也可以通过相似的方式获取本地化文件资源，但是其返回的是 ResourceBundle 类型的对象。如果您决定统一使用 Spring 的 Resource 接表征文件资源，那么 LocalizedResourceHelper 就是获取文件资源的非常适合的帮助类了。</p>\n<p>文件操作</p>\n<p>在使用各种 Resource 接口的实现类加载文件资源后，经常需要对文件资源进行读取、拷贝、转存等不同类型的操作。您可以通过 Resource 接口所提供了方法完成这些功能，不过在大多数情况下，通过 Spring 为 Resource 所配备的工具类完成文件资源的操作将更加方便。</p>\n<p><strong>文件内容拷贝</strong></p>\n<p>第一个我们要认识的是 FileCopyUtils，它提供了许多一步式的静态操作方法，能够将文件内容拷贝到一个目标 byte[]、String 甚至一个输出流或输出文件中。下面的实例展示了 FileCopyUtils 具体使用方法：</p>\n<p><strong>清单 4. FileCopyUtilsExample</strong></p>\n<p>往往我们都通过直接操作 InputStream 读取文件的内容，但是流操作的代码是比较底层的，代码的面向对象性并不强。通过 FileCopyUtils 读取和拷贝文件内容易于操作且相当直观。如在 ① 处，我们通过 FileCopyUtils 的 copyToByteArray(File in) 方法就可以直接将文件内容读到一个 byte[] 中；另一个可用的方法是 copyToByteArray(InputStream in)，它将输入流读取到一个 byte[] 中。</p>\n<p>如果是文本文件，您可能希望将文件内容读取到 String 中，此时您可以使用 copyToString(Reader in) 方法，如 ② 所示。使用 FileReader 对 File 进行封装，或使用 InputStreamReader 对 InputStream 进行封装就可以了。</p>\n<p>FileCopyUtils 还提供了多个将文件内容拷贝到各种目标对象中的方法，这些方法包括：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>static void copy(byte[] in, File out)</code></td>\n<td>将 byte[] 拷贝到一个文件中</td>\n</tr>\n<tr>\n<td><code>static void copy(byte[] in, OutputStream out)</code></td>\n<td>将 byte[] 拷贝到一个输出流中</td>\n</tr>\n<tr>\n<td><code>static int copy(File in, File out)</code></td>\n<td>将文件拷贝到另一个文件中</td>\n</tr>\n<tr>\n<td><code>static int copy(InputStream in, OutputStream out)</code></td>\n<td>将输入流拷贝到输出流中</td>\n</tr>\n<tr>\n<td><code>static int copy(Reader in, Writer out)</code></td>\n<td>将 Reader 读取的内容拷贝到 Writer 指向目标输出中</td>\n</tr>\n<tr>\n<td><code>static void copy(String in, Writer out)</code></td>\n<td>将字符串拷贝到一个 Writer 指向的目标中</td>\n</tr>\n</tbody>\n</table>\n<p>在实例中，我们虽然使用 Resource 加载文件资源，但 FileCopyUtils 本身和 Resource 没有任何关系，您完全可以在基于 JDK I/O API 的程序中使用这个工具类。</p>\n<p><strong>属性文件操作</strong></p>\n<p>我们知道可以通过 java.util.Properties的load(InputStream inStream) 方法从一个输入流中加载属性资源。Spring 提供的 PropertiesLoaderUtils 允许您直接通过基于类路径的文件地址加载属性资源，请看下面的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`package com.baobaotao.io; import java.util.Properties; import org.springframework.core.io.support.PropertiesLoaderUtils; public class PropertiesLoaderUtilsExample &#123;     public static void main(String[] args) throws Throwable &#123;             // ① jdbc.properties 是位于类路径下的文件         Properties props = PropertiesLoaderUtils.loadAllProperties(&quot;jdbc.properties&quot;);         System.out.println(props.getProperty(&quot;jdbc.driverClassName&quot;));     &#125; &#125; `</span><br></pre></td></tr></table></figure>\n<p>一般情况下，应用程序的属性文件都放置在类路径下，所以 PropertiesLoaderUtils 比之于 Properties#load(InputStream inStream) 方法显然具有更强的实用性。此外，PropertiesLoaderUtils 还可以直接从 Resource 对象中加载属性资源：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>static Properties loadProperties(Resource resource)</code></td>\n<td>从 Resource 中加载属性</td>\n</tr>\n<tr>\n<td><code>static void fillProperties(Properties props, Resource resource)</code></td>\n<td>将 Resource 中的属性数据添加到一个已经存在的 Properties 对象中</td>\n</tr>\n</tbody>\n</table>\n<p><strong>特殊编码的资源</strong></p>\n<p>当您使用 Resource 实现类加载文件资源时，它默认采用操作系统的编码格式。如果文件资源采用了特殊的编码格式（如 UTF-8），则在读取资源内容时必须事先通过 EncodedResource 指定编码格式，否则将会产生中文乱码的问题。</p>\n<p><strong>清单 5. EncodedResourceExample</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`package com.baobaotao.io; import org.springframework.core.io.ClassPathResource; import org.springframework.core.io.Resource; import org.springframework.core.io.support.EncodedResource; import org.springframework.util.FileCopyUtils; public class EncodedResourceExample &#123;         public static void main(String[] args) throws Throwable  &#123;             Resource res = new ClassPathResource(&quot;conf/file1.txt&quot;);             // ① 指定文件资源对应的编码格式（UTF-8）             EncodedResource encRes = new EncodedResource(res,&quot;UTF-8&quot;);             // ② 这样才能正确读取文件的内容，而不会出现乱码             String content  = FileCopyUtils.copyToString(encRes.getReader());             System.out.println(content);       &#125; &#125; `</span><br></pre></td></tr></table></figure>\n<p>EncodedResource 拥有一个 getResource() 方法获取 Resource，但该方法返回的是通过构造函数传入的原 Resource 对象，所以必须通过 EncodedResource#getReader() 获取应用编码后的 Reader 对象，然后再通过该 Reader 读取文件的内容。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.blogjava.net/coolingverse/articles/149364.html\" target=\"_blank\" rel=\"noopener\">http://www.blogjava.net/coolingverse/articles/149364.html</a></p>\n<p>文件资源的操作是应用程序中常见的功能，如当上传一个文件后将其保存在特定目录下，从指定地址加载一个配置文件等等。我们一般使用 JDK 的 I/O 处理类完成这些操作，但对于一般的应用程序来说，JDK 的这些操作类所提供的方法过于底层，直接使用它们进行文件操作不但程序编写复杂而且容易产生错误。相比于 JDK 的 File，Spring 的 Resource 接口（资源概念的描述接口）抽象层面更高且涵盖面更广，Spring 提供了许多方便易用的资源操作工具类，它们大大降低资源操作的复杂度，同时具有更强的普适性。这些工具类不依赖于 Spring 容器，这意味着您可以在程序中象一般普通类一样使用它们。</p>\n<p>加载文件资源</p>\n<p>Spring 定义了一个 org.springframework.core.io.Resource 接口，Resource 接口是为了统一各种类型不同的资源而定义的，Spring 提供了若干 Resource 接口的实现类，这些实现类可以轻松地加载不同类型的底层资源，并提供了获取文件名、URL 地址以及资源内容的操作方法。</p>\n<p><strong>访问文件资源</strong></p>\n<p>假设有一个文件地位于 Web 应用的类路径下，您可以通过以下方式对这个文件资源进行访问：</p>\n<ul>\n<li>通过 FileSystemResource 以文件系统绝对路径的方式进行访问；</li>\n<li>通过 ClassPathResource 以类路径的方式进行访问；</li>\n<li>通过 ServletContextResource 以相对于Web应用根目录的方式进行访问。</li>\n</ul>\n<p>相比于通过 JDK 的 File 类访问文件资源的方式，Spring 的 Resource 实现类无疑提供了更加灵活的操作方式，您可以根据情况选择适合的 Resource 实现类访问资源。下面，我们分别通过 FileSystemResource 和 ClassPathResource 访问同一个文件资源：</p>\n<p><strong>清单 1. FileSourceExample</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`package com.baobaotao.io; import java.io.IOException; import java.io.InputStream; import org.springframework.core.io.ClassPathResource; import org.springframework.core.io.FileSystemResource; import org.springframework.core.io.Resource; public class FileSourceExample &#123;     public static void main(String[] args) &#123;         try &#123;             String filePath =              &quot;D:/masterSpring/chapter23/webapp/WEB-INF/classes/conf/file1.txt&quot;;             // ① 使用系统文件路径方式加载文件             Resource res1 = new FileSystemResource(filePath);              // ② 使用类路径方式加载文件             Resource res2 = new ClassPathResource(&quot;conf/file1.txt&quot;);             InputStream ins1 = res1.getInputStream();             InputStream ins2 = res2.getInputStream();             System.out.println(&quot;res1:&quot;+res1.getFilename());             System.out.println(&quot;res2:&quot;+res2.getFilename());         &#125; catch (IOException e) &#123;             e.printStackTrace();         &#125;     &#125; &#125; `</span><br></pre></td></tr></table></figure>\n<p>在获取资源后，您就可以通过 Resource 接口定义的多个方法访问文件的数据和其它的信息：如您可以通过 getFileName() 获取文件名，通过 getFile() 获取资源对应的 File 对象，通过 getInputStream() 直接获取文件的输入流。此外，您还可以通过 createRelative(String relativePath) 在资源相对地址上创建新的资源。</p>\n<p>在 Web 应用中，您还可以通过 ServletContextResource 以相对于 Web 应用根目录的方式访问文件资源，如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt; &lt;jsp:directive.page import=&quot;     org.springframework.web.context.support.ServletContextResource&quot;/&gt; &lt;jsp:directive.page import=&quot;org.springframework.core.io.Resource&quot;/&gt; &lt;%     // ① 注意文件资源地址以相对于 Web 应用根路径的方式表示     Resource res3 = new ServletContextResource(application,          &quot;/WEB-INF/classes/conf/file1.txt&quot;);     out.print(res3.getFilename()); %&gt; `</span><br></pre></td></tr></table></figure>\n<p>对于位于远程服务器（Web 服务器或 FTP 服务器）的文件资源，您则可以方便地通过 UrlResource 进行访问。</p>\n<p>为了方便访问不同类型的资源，您必须使用相应的 Resource 实现类，是否可以在不显式使用 Resource 实现类的情况下，仅根据带特殊前缀的资源地址直接加载文件资源呢？Spring 提供了一个 ResourceUtils 工具类，它支持”classpath:”和”file:”的地址前缀，它能够从指定的地址加载文件资源，请看下面的例子：</p>\n<p><strong>清单 2. ResourceUtilsExample</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`package com.baobaotao.io; import java.io.File; import org.springframework.util.ResourceUtils; public class ResourceUtilsExample &#123;     public static void main(String[] args) throws Throwable&#123;         File clsFile = ResourceUtils.getFile(&quot;classpath:conf/file1.txt&quot;);         System.out.println(clsFile.isFile());          String httpFilePath = &quot;file:D:/masterSpring/chapter23/src/conf/file1.txt&quot;;         File httpFile = ResourceUtils.getFile(httpFilePath);         System.out.println(httpFile.isFile());             &#125; &#125; `</span><br></pre></td></tr></table></figure>\n<p>ResourceUtils 的 getFile(String resourceLocation) 方法支持带特殊前缀的资源地址，这样，我们就可以在不和 Resource 实现类打交道的情况下使用 Spring 文件资源加载的功能了。</p>\n<p><strong>本地化文件资源</strong></p>\n<p>本地化文件资源是一组通过本地化标识名进行特殊命名的文件，Spring 提供的 LocalizedResourceHelper 允许通过文件资源基名和本地化实体获取匹配的本地化文件资源并以 Resource 对象返回。假设在类路径的 i18n 目录下，拥有一组基名为 message 的本地化文件资源，我们通过以下实例演示获取对应中国大陆和美国的本地化文件资源：</p>\n<p><strong>清单 3. LocaleResourceTest</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`package com.baobaotao.io; import java.util.Locale; import org.springframework.core.io.Resource; import org.springframework.core.io.support.LocalizedResourceHelper; public class LocaleResourceTest &#123;     public static void main(String[] args) &#123;         LocalizedResourceHelper lrHalper = new LocalizedResourceHelper();         // ① 获取对应美国的本地化文件资源         Resource msg_us = lrHalper.findLocalizedResource(&quot;i18n/message&quot;, &quot;.properties&quot;,          Locale.US);         // ② 获取对应中国大陆的本地化文件资源         Resource msg_cn = lrHalper.findLocalizedResource(&quot;i18n/message&quot;, &quot;.properties&quot;,          Locale.CHINA);         System.out.println(&quot;fileName(us):&quot;+msg_us.getFilename());          System.out.println(&quot;fileName(cn):&quot;+msg_cn.getFilename());     &#125; &#125; `</span><br></pre></td></tr></table></figure>\n<p>虽然 JDK 的 java.util.ResourceBundle 类也可以通过相似的方式获取本地化文件资源，但是其返回的是 ResourceBundle 类型的对象。如果您决定统一使用 Spring 的 Resource 接表征文件资源，那么 LocalizedResourceHelper 就是获取文件资源的非常适合的帮助类了。</p>\n<p>文件操作</p>\n<p>在使用各种 Resource 接口的实现类加载文件资源后，经常需要对文件资源进行读取、拷贝、转存等不同类型的操作。您可以通过 Resource 接口所提供了方法完成这些功能，不过在大多数情况下，通过 Spring 为 Resource 所配备的工具类完成文件资源的操作将更加方便。</p>\n<p><strong>文件内容拷贝</strong></p>\n<p>第一个我们要认识的是 FileCopyUtils，它提供了许多一步式的静态操作方法，能够将文件内容拷贝到一个目标 byte[]、String 甚至一个输出流或输出文件中。下面的实例展示了 FileCopyUtils 具体使用方法：</p>\n<p><strong>清单 4. FileCopyUtilsExample</strong></p>\n<p>往往我们都通过直接操作 InputStream 读取文件的内容，但是流操作的代码是比较底层的，代码的面向对象性并不强。通过 FileCopyUtils 读取和拷贝文件内容易于操作且相当直观。如在 ① 处，我们通过 FileCopyUtils 的 copyToByteArray(File in) 方法就可以直接将文件内容读到一个 byte[] 中；另一个可用的方法是 copyToByteArray(InputStream in)，它将输入流读取到一个 byte[] 中。</p>\n<p>如果是文本文件，您可能希望将文件内容读取到 String 中，此时您可以使用 copyToString(Reader in) 方法，如 ② 所示。使用 FileReader 对 File 进行封装，或使用 InputStreamReader 对 InputStream 进行封装就可以了。</p>\n<p>FileCopyUtils 还提供了多个将文件内容拷贝到各种目标对象中的方法，这些方法包括：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>static void copy(byte[] in, File out)</code></td>\n<td>将 byte[] 拷贝到一个文件中</td>\n</tr>\n<tr>\n<td><code>static void copy(byte[] in, OutputStream out)</code></td>\n<td>将 byte[] 拷贝到一个输出流中</td>\n</tr>\n<tr>\n<td><code>static int copy(File in, File out)</code></td>\n<td>将文件拷贝到另一个文件中</td>\n</tr>\n<tr>\n<td><code>static int copy(InputStream in, OutputStream out)</code></td>\n<td>将输入流拷贝到输出流中</td>\n</tr>\n<tr>\n<td><code>static int copy(Reader in, Writer out)</code></td>\n<td>将 Reader 读取的内容拷贝到 Writer 指向目标输出中</td>\n</tr>\n<tr>\n<td><code>static void copy(String in, Writer out)</code></td>\n<td>将字符串拷贝到一个 Writer 指向的目标中</td>\n</tr>\n</tbody>\n</table>\n<p>在实例中，我们虽然使用 Resource 加载文件资源，但 FileCopyUtils 本身和 Resource 没有任何关系，您完全可以在基于 JDK I/O API 的程序中使用这个工具类。</p>\n<p><strong>属性文件操作</strong></p>\n<p>我们知道可以通过 java.util.Properties的load(InputStream inStream) 方法从一个输入流中加载属性资源。Spring 提供的 PropertiesLoaderUtils 允许您直接通过基于类路径的文件地址加载属性资源，请看下面的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`package com.baobaotao.io; import java.util.Properties; import org.springframework.core.io.support.PropertiesLoaderUtils; public class PropertiesLoaderUtilsExample &#123;     public static void main(String[] args) throws Throwable &#123;             // ① jdbc.properties 是位于类路径下的文件         Properties props = PropertiesLoaderUtils.loadAllProperties(&quot;jdbc.properties&quot;);         System.out.println(props.getProperty(&quot;jdbc.driverClassName&quot;));     &#125; &#125; `</span><br></pre></td></tr></table></figure>\n<p>一般情况下，应用程序的属性文件都放置在类路径下，所以 PropertiesLoaderUtils 比之于 Properties#load(InputStream inStream) 方法显然具有更强的实用性。此外，PropertiesLoaderUtils 还可以直接从 Resource 对象中加载属性资源：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>static Properties loadProperties(Resource resource)</code></td>\n<td>从 Resource 中加载属性</td>\n</tr>\n<tr>\n<td><code>static void fillProperties(Properties props, Resource resource)</code></td>\n<td>将 Resource 中的属性数据添加到一个已经存在的 Properties 对象中</td>\n</tr>\n</tbody>\n</table>\n<p><strong>特殊编码的资源</strong></p>\n<p>当您使用 Resource 实现类加载文件资源时，它默认采用操作系统的编码格式。如果文件资源采用了特殊的编码格式（如 UTF-8），则在读取资源内容时必须事先通过 EncodedResource 指定编码格式，否则将会产生中文乱码的问题。</p>\n<p><strong>清单 5. EncodedResourceExample</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`package com.baobaotao.io; import org.springframework.core.io.ClassPathResource; import org.springframework.core.io.Resource; import org.springframework.core.io.support.EncodedResource; import org.springframework.util.FileCopyUtils; public class EncodedResourceExample &#123;         public static void main(String[] args) throws Throwable  &#123;             Resource res = new ClassPathResource(&quot;conf/file1.txt&quot;);             // ① 指定文件资源对应的编码格式（UTF-8）             EncodedResource encRes = new EncodedResource(res,&quot;UTF-8&quot;);             // ② 这样才能正确读取文件的内容，而不会出现乱码             String content  = FileCopyUtils.copyToString(encRes.getReader());             System.out.println(content);       &#125; &#125; `</span><br></pre></td></tr></table></figure>\n<p>EncodedResource 拥有一个 getResource() 方法获取 Resource，但该方法返回的是通过构造函数传入的原 Resource 对象，所以必须通过 EncodedResource#getReader() 获取应用编码后的 Reader 对象，然后再通过该 Reader 读取文件的内容。</p>\n"},{"title":"python原类实践","date":"2019-11-03T02:24:27.000Z","_content":"\n# 使用原来创建ORM的实例 \n\n我们通过创建一个类似Django中的ORM来熟悉一下元类的使用，通常元类用来创建API是非常好的选择，使用元类的编写很复杂但使用者可以非常简洁的调用API。\n\n```python\n#我们想创建一个类似Django的ORM，只要定义字段就可以实现对数据库表和字段的操作。\nclass User(Model):\n    # 定义类的属性到列的映射：\n    id = IntegerField('id')\n    name = StringField('username')\n    email = StringField('email')\n    password = StringField('password')\n```\n\n例如：\n\n```python\n# 创建一个实例：\nu = User(id=12345, name='Michael', email='test@orm.org', password='my-pwd')\n# 保存到数据库：\nu.save()\n```\n\n接下来我么来实现这么个功能：\n\n```python\n#coding:utf-8\n#一、首先来定义Field类，它负责保存数据库表的字段名和字段类型：\nclass Field(object):\n    def __init__(self, name, column_type):\n        self.name = name\n        self.column_type = column_type\n    def __str__(self):\n        return '<%s:%s>' % (self.__class__.__name__, self.name)\n\nclass StringField(Field):\n    def __init__(self, name):\n        super(StringField, self).__init__(name, 'varchar(100)')\n\nclass IntegerField(Field):\n    def __init__(self, name):\n        super(IntegerField, self).__init__(name, 'bigint')\n\n#二、定义元类，控制Model对象的创建\nclass ModelMetaclass(type):\n    '''定义元类'''\n    def __new__(cls, name, bases, attrs):\n        if name=='Model':\n            return super(ModelMetaclass,cls).__new__(cls, name, bases, attrs)\n        mappings = dict()\n        for k, v in attrs.iteritems():\n            # 保存类属性和列的映射关系到mappings字典\n            if isinstance(v, Field):\n                print('Found mapping: %s==>%s' % (k, v))\n                mappings[k] = v\n        for k in mappings.iterkeys():\n            #将类属性移除，使定义的类字段不污染User类属性，只在实例中可以访问这些key\n            attrs.pop(k)\n        attrs['__table__'] = name.lower() # 假设表名和为类名的小写,创建类时添加一个__table__类属性\n        attrs['__mappings__'] = mappings # 保存属性和列的映射关系，创建类时添加一个__mappings__类属性\n        return super(ModelMetaclass,cls).__new__(cls, name, bases, attrs)\n\n#三、编写Model基类\nclass Model(dict):\n    __metaclass__ = ModelMetaclass\n\n    def __init__(self, **kw):\n        super(Model, self).__init__(**kw)\n\n    def __getattr__(self, key):\n        try:\n            return self[key]\n        except KeyError:\n            raise AttributeError(r\"'Model' object has no attribute '%s'\" % key)\n\n    def __setattr__(self, key, value):\n        self[key] = value\n\n    def save(self):\n        fields = []\n        params = []\n        args = []\n        for k, v in self.__mappings__.iteritems():\n            fields.append(v.name)\n            params.append('?')\n            args.append(getattr(self, k, None))\n        sql = 'insert into %s (%s) values (%s)' % (self.__table__, ','.join(fields), ','.join(params))\n        print('SQL: %s' % sql)\n        print('ARGS: %s' % str(args))\n\n#最后，我们使用定义好的ORM接口，使用起来非常的简单。\nclass User(Model):\n    # 定义类的属性到列的映射：\n    id = IntegerField('id')\n    name = StringField('username')\n    email = StringField('email')\n    password = StringField('password')\n\n# 创建一个实例：\nu = User(id=12345, name='Michael', email='test@orm.org', password='my-pwd')\n# 保存到数据库：\nu.save()\n\n#输出\n# Found mapping: email==><StringField:email>\n# Found mapping: password==><StringField:password>\n# Found mapping: id==><IntegerField:id>\n# Found mapping: name==><StringField:username>\n# SQL: insert into User (password,email,username,id) values (?,?,?,?)\n# ARGS: ['my-pwd', 'test@orm.org', 'Michael', 12345]\n```\n\n# 使用__new__方法和元类方式分别实现单例模式\n\n## 1、__new__、__init__、__call__的介绍\n\n在讲到使用元类创建单例模式之前，比需了解__new__这个内置方法的作用，在上面讲元类的时候我们用到了__new__方法来实现类的创建。然而我在那之前还是对__new__这个方法和__init__方法有一定的疑惑。因此这里花点时间对其概念做一次了解和区分。\n\n__new__方法负责创建一个实例对象，在对象被创建的时候调用该方法它是一个类方法。__new__方法在返回一个实例之后，会自动的调用__init__方法，对实例进行初始化。如果__new__方法不返回值，或者返回的不是实例，那么它就不会自动的去调用__init__方法。\n\n__init__ 方法负责将该实例对象进行初始化，在对象被创建之后调用该方法，在__new__方法创建出一个实例后对实例属性进行初始化。__init__方法可以没有返回值。\n\n__call__方法其实和类的创建过程和实例化没有多大关系了，定义了__call__方法才能被使用函数的方式执行。\n\n```python\n例如：\nclass A(object):\n    def __call__(self):\n        print \"__call__ be called\"\n\na = A()\na()\n#输出\n#__call__ be called \n```\n\n打个比方帮助理解：如果将创建实例的过程比作建一个房子。\n\n- 那么class就是一个房屋的设计图，他规定了这个房子有几个房间，每个人房间的大小朝向等。这个设计图就是累的结构\n- __new__就是一个房屋的框架，每个具体的房屋都需要先搭好框架后才能进行专修，当然现有了房屋设计才能有具体的房屋框架出来。这个就是从类到类实例的创建。\n- __init__就是装修房子的过程，对房屋的墙面和地板等颜色材质的丰富就是它该做的事情，当然先有具体的房子框架出来才能进行装饰了。这个就是实例属性的初始化，它是在__new__出一个实例后才能初始化。\n- __call__就是房子的电话，有了固定电话，才能被打电话嘛（就是通过括号的方式像函数一样执行）。\n\n```python\n#coding:utf-8\nclass Foo(object):\n    def __new__(cls, *args, **kwargs):\n        #__new__是一个类方法，在对象创建的时候调用\n        print \"excute __new__\"\n        return super(Foo,cls).__new__(cls,*args,**kwargs)\n\n\n    def __init__(self,value):\n        #__init__是一个实例方法，在对象创建后调用，对实例属性做初始化\n        print \"excute __init\"\n        self.value = value\n\n\nf1 = Foo(1)\nprint f1.value\nf2 = Foo(2)\nprint f2.value\n\n#输出===：\nexcute __new__\nexcute __init\n1\nexcute __new__\nexcute __init\n2\n#====可以看出new方法在init方法之前执行\n```\n\n 子类如果重写__new__方法，一般依然要调用父类的__new__方法。\n\n```python\nclass Child(Foo):\n    def __new__(cls, *args, **kwargs):        \n        return suyper(Child, cls).__new__(cls, *args, **kwargs)\n```\n\n 必须注意的是，类的__new__方法之后，必须生成本类的实例才能自动调用本类的__init__方法进行初始化，否则不会自动调用__init__.\n\n```python\nclass Foo(object):\n    def __init__(self, *args, **kwargs):\n        print \"Foo __init__\"\n    def __new__(cls, *args, **kwargs):\n        return object.__new__(Stranger, *args, **kwargs)\n\nclass Stranger(object):\n    def __init__(self,name):\n        print \"class Stranger's __init__ be called\"\n        self.name = name\n\nfoo = Foo(\"test\")\nprint type(foo) #<class '__main__.Stranger'>\nprint foo.name #AttributeError: 'Stranger' object has no attribute 'name'\n\n#说明：如果new方法返回的不是本类的实例，那么本类（Foo）的init和生成的类(Stranger)的init都不会被调用\n```\n\n## 2.实现单例模式\n\n依照Python官方文档的说法，__new__方法主要是当你继承一些不可变的class时(比如int, str, tuple)， 提供给你一个自定义这些类的实例化过程的途径。还有就是实现自定义的metaclass。接下来我们分别通过这两种方式来实现单例模式。当初在看到cookbook中的元类来实现单例模式的时候对其相当疑惑，因此才有了上面这些对元类的总结。\n\n简单来说，单例模式的原理就是通过在类属性中添加一个单例判定位ins_flag，通过这个flag判断是否已经被实例化过了,如果被实例化过了就返回该实例。\n\n### __new__方法实现单例：\n\n```python\nclass Singleton(object):\n    def __new__(cls, *args, **kwargs):\n        if not hasattr(cls,\"_instance\"):\n            cls._instance = super(Singleton, cls).__new__(cls, *args, **kwargs)\n        return cls._instance\n\n\ns1 = Singleton()\ns2 = Singleton()\n\nprint s1 is s2\n```\n\n\n\n因为重写__new__方法，所以继承至Singleton的类，在不重写__new__的情况下都将是单例模式。\n\n### 元类实现单例\n\n当初我也很疑惑为什么我们是从写使用元类的__init__方法，而不是使用__new__方法来初为元类增加一个属性。其实我只是上面那一段关于元类中__new__方法迷惑了，它主要用于我们需要对类的结构进行改变的时候我们才要重写这个方法。\n\n```python\nclass Singleton(type):\n    def __init__(self, *args, **kwargs):\n        print \"__init__\"\n        self.__instance = None\n        super(Singleton,self).__init__(*args, **kwargs)\n\n    def __call__(self, *args, **kwargs):\n        print \"__call__\"\n        if self.__instance is None:\n            self.__instance = super(Singleton,self).__call__(*args, **kwargs)\n        return self.__instance\n\n\nclass Foo(object):\n    __metaclass__ = Singleton #在代码执行到这里的时候，元类中的__new__方法和__init__方法其实已经被执行了，而不是在Foo实例化的时候执行。且仅会执行一次。\n\n\nfoo1 = Foo()\nfoo2 = Foo()\nprint Foo.__dict__  #_Singleton__instance': <__main__.Foo object at 0x100c52f10> 存在一个私有属性来保存属性，而不会污染Foo类（其实还是会污染，只是无法直接通过__instance属性访问）\n\nprint foo1 is foo2  # True\n\n# 输出\n# __init__\n# __call__\n# __call__\n# {'__module__': '__main__', '__metaclass__': <class '__main__.Singleton'>, '_Singleton__instance': <__main__.Foo object at 0x100c52f10>, '__dict__': <attribute '__dict__' of 'Foo' objects>, '__weakref__': <attribute '__weakref__' of 'Foo' objects>, '__doc__': None}\n# True \n```\n\n基于这个例子：\n\n- 我们知道元类(Singleton)生成的实例是一个类(Foo),而这里我们仅仅需要对这个实例(Foo)增加一个属性(__instance)来判断和保存生成的单例。想想也知道为一个类添加一个属性当然是在__init__中实现了。\n- 关于__call__方法的调用，因为Foo是Singleton的一个实例。所以Foo()这样的方式就调用了Singleton的__call__方法。不明白就回头看看上一节中的__call__方法介绍。\n\n假如我们通过元类的__new__方法来也可以实现，但显然没有通过__init__来实现优雅，因为我们不会为了为实例增加一个属性而重写__new__方法。所以这个形式不推荐。\n\n```python\nclass Singleton(type):\n    def __new__(cls, name,bases,attrs):\n        print \"__new__\"\n        attrs[\"_instance\"] = None\n        return  super(Singleton,cls).__new__(cls,name,bases,attrs)\n\n    def __call__(self, *args, **kwargs):\n        print \"__call__\"\n        if self._instance is None:\n            self._instance = super(Singleton,self).__call__(*args, **kwargs)\n        return self._instance\n\nclass Foo(object):\n    __metaclass__ = Singleton\n\nfoo1 = Foo()\nfoo2 = Foo()\nprint Foo.__dict__ \nprint foo1 is foo2  # True\n\n# 输出\n# __new__\n# __call__\n# __call__\n# {'__module__': '__main__', '__metaclass__': <class '__main__.Singleton'>, '_instance': <__main__.Foo object at 0x103e07ed0>, '__dict__': <attribute '__dict__' of 'Foo' objects>, '__weakref__': <attribute '__weakref__' of 'Foo' objects>, '__doc__': None}\n# True\n```","source":"_posts/python/python原类实践.md","raw":"---\ntitle: python原类实践\ndate: 2019-11-03 10:24:27\ntags:\n- python\n---\n\n# 使用原来创建ORM的实例 \n\n我们通过创建一个类似Django中的ORM来熟悉一下元类的使用，通常元类用来创建API是非常好的选择，使用元类的编写很复杂但使用者可以非常简洁的调用API。\n\n```python\n#我们想创建一个类似Django的ORM，只要定义字段就可以实现对数据库表和字段的操作。\nclass User(Model):\n    # 定义类的属性到列的映射：\n    id = IntegerField('id')\n    name = StringField('username')\n    email = StringField('email')\n    password = StringField('password')\n```\n\n例如：\n\n```python\n# 创建一个实例：\nu = User(id=12345, name='Michael', email='test@orm.org', password='my-pwd')\n# 保存到数据库：\nu.save()\n```\n\n接下来我么来实现这么个功能：\n\n```python\n#coding:utf-8\n#一、首先来定义Field类，它负责保存数据库表的字段名和字段类型：\nclass Field(object):\n    def __init__(self, name, column_type):\n        self.name = name\n        self.column_type = column_type\n    def __str__(self):\n        return '<%s:%s>' % (self.__class__.__name__, self.name)\n\nclass StringField(Field):\n    def __init__(self, name):\n        super(StringField, self).__init__(name, 'varchar(100)')\n\nclass IntegerField(Field):\n    def __init__(self, name):\n        super(IntegerField, self).__init__(name, 'bigint')\n\n#二、定义元类，控制Model对象的创建\nclass ModelMetaclass(type):\n    '''定义元类'''\n    def __new__(cls, name, bases, attrs):\n        if name=='Model':\n            return super(ModelMetaclass,cls).__new__(cls, name, bases, attrs)\n        mappings = dict()\n        for k, v in attrs.iteritems():\n            # 保存类属性和列的映射关系到mappings字典\n            if isinstance(v, Field):\n                print('Found mapping: %s==>%s' % (k, v))\n                mappings[k] = v\n        for k in mappings.iterkeys():\n            #将类属性移除，使定义的类字段不污染User类属性，只在实例中可以访问这些key\n            attrs.pop(k)\n        attrs['__table__'] = name.lower() # 假设表名和为类名的小写,创建类时添加一个__table__类属性\n        attrs['__mappings__'] = mappings # 保存属性和列的映射关系，创建类时添加一个__mappings__类属性\n        return super(ModelMetaclass,cls).__new__(cls, name, bases, attrs)\n\n#三、编写Model基类\nclass Model(dict):\n    __metaclass__ = ModelMetaclass\n\n    def __init__(self, **kw):\n        super(Model, self).__init__(**kw)\n\n    def __getattr__(self, key):\n        try:\n            return self[key]\n        except KeyError:\n            raise AttributeError(r\"'Model' object has no attribute '%s'\" % key)\n\n    def __setattr__(self, key, value):\n        self[key] = value\n\n    def save(self):\n        fields = []\n        params = []\n        args = []\n        for k, v in self.__mappings__.iteritems():\n            fields.append(v.name)\n            params.append('?')\n            args.append(getattr(self, k, None))\n        sql = 'insert into %s (%s) values (%s)' % (self.__table__, ','.join(fields), ','.join(params))\n        print('SQL: %s' % sql)\n        print('ARGS: %s' % str(args))\n\n#最后，我们使用定义好的ORM接口，使用起来非常的简单。\nclass User(Model):\n    # 定义类的属性到列的映射：\n    id = IntegerField('id')\n    name = StringField('username')\n    email = StringField('email')\n    password = StringField('password')\n\n# 创建一个实例：\nu = User(id=12345, name='Michael', email='test@orm.org', password='my-pwd')\n# 保存到数据库：\nu.save()\n\n#输出\n# Found mapping: email==><StringField:email>\n# Found mapping: password==><StringField:password>\n# Found mapping: id==><IntegerField:id>\n# Found mapping: name==><StringField:username>\n# SQL: insert into User (password,email,username,id) values (?,?,?,?)\n# ARGS: ['my-pwd', 'test@orm.org', 'Michael', 12345]\n```\n\n# 使用__new__方法和元类方式分别实现单例模式\n\n## 1、__new__、__init__、__call__的介绍\n\n在讲到使用元类创建单例模式之前，比需了解__new__这个内置方法的作用，在上面讲元类的时候我们用到了__new__方法来实现类的创建。然而我在那之前还是对__new__这个方法和__init__方法有一定的疑惑。因此这里花点时间对其概念做一次了解和区分。\n\n__new__方法负责创建一个实例对象，在对象被创建的时候调用该方法它是一个类方法。__new__方法在返回一个实例之后，会自动的调用__init__方法，对实例进行初始化。如果__new__方法不返回值，或者返回的不是实例，那么它就不会自动的去调用__init__方法。\n\n__init__ 方法负责将该实例对象进行初始化，在对象被创建之后调用该方法，在__new__方法创建出一个实例后对实例属性进行初始化。__init__方法可以没有返回值。\n\n__call__方法其实和类的创建过程和实例化没有多大关系了，定义了__call__方法才能被使用函数的方式执行。\n\n```python\n例如：\nclass A(object):\n    def __call__(self):\n        print \"__call__ be called\"\n\na = A()\na()\n#输出\n#__call__ be called \n```\n\n打个比方帮助理解：如果将创建实例的过程比作建一个房子。\n\n- 那么class就是一个房屋的设计图，他规定了这个房子有几个房间，每个人房间的大小朝向等。这个设计图就是累的结构\n- __new__就是一个房屋的框架，每个具体的房屋都需要先搭好框架后才能进行专修，当然现有了房屋设计才能有具体的房屋框架出来。这个就是从类到类实例的创建。\n- __init__就是装修房子的过程，对房屋的墙面和地板等颜色材质的丰富就是它该做的事情，当然先有具体的房子框架出来才能进行装饰了。这个就是实例属性的初始化，它是在__new__出一个实例后才能初始化。\n- __call__就是房子的电话，有了固定电话，才能被打电话嘛（就是通过括号的方式像函数一样执行）。\n\n```python\n#coding:utf-8\nclass Foo(object):\n    def __new__(cls, *args, **kwargs):\n        #__new__是一个类方法，在对象创建的时候调用\n        print \"excute __new__\"\n        return super(Foo,cls).__new__(cls,*args,**kwargs)\n\n\n    def __init__(self,value):\n        #__init__是一个实例方法，在对象创建后调用，对实例属性做初始化\n        print \"excute __init\"\n        self.value = value\n\n\nf1 = Foo(1)\nprint f1.value\nf2 = Foo(2)\nprint f2.value\n\n#输出===：\nexcute __new__\nexcute __init\n1\nexcute __new__\nexcute __init\n2\n#====可以看出new方法在init方法之前执行\n```\n\n 子类如果重写__new__方法，一般依然要调用父类的__new__方法。\n\n```python\nclass Child(Foo):\n    def __new__(cls, *args, **kwargs):        \n        return suyper(Child, cls).__new__(cls, *args, **kwargs)\n```\n\n 必须注意的是，类的__new__方法之后，必须生成本类的实例才能自动调用本类的__init__方法进行初始化，否则不会自动调用__init__.\n\n```python\nclass Foo(object):\n    def __init__(self, *args, **kwargs):\n        print \"Foo __init__\"\n    def __new__(cls, *args, **kwargs):\n        return object.__new__(Stranger, *args, **kwargs)\n\nclass Stranger(object):\n    def __init__(self,name):\n        print \"class Stranger's __init__ be called\"\n        self.name = name\n\nfoo = Foo(\"test\")\nprint type(foo) #<class '__main__.Stranger'>\nprint foo.name #AttributeError: 'Stranger' object has no attribute 'name'\n\n#说明：如果new方法返回的不是本类的实例，那么本类（Foo）的init和生成的类(Stranger)的init都不会被调用\n```\n\n## 2.实现单例模式\n\n依照Python官方文档的说法，__new__方法主要是当你继承一些不可变的class时(比如int, str, tuple)， 提供给你一个自定义这些类的实例化过程的途径。还有就是实现自定义的metaclass。接下来我们分别通过这两种方式来实现单例模式。当初在看到cookbook中的元类来实现单例模式的时候对其相当疑惑，因此才有了上面这些对元类的总结。\n\n简单来说，单例模式的原理就是通过在类属性中添加一个单例判定位ins_flag，通过这个flag判断是否已经被实例化过了,如果被实例化过了就返回该实例。\n\n### __new__方法实现单例：\n\n```python\nclass Singleton(object):\n    def __new__(cls, *args, **kwargs):\n        if not hasattr(cls,\"_instance\"):\n            cls._instance = super(Singleton, cls).__new__(cls, *args, **kwargs)\n        return cls._instance\n\n\ns1 = Singleton()\ns2 = Singleton()\n\nprint s1 is s2\n```\n\n\n\n因为重写__new__方法，所以继承至Singleton的类，在不重写__new__的情况下都将是单例模式。\n\n### 元类实现单例\n\n当初我也很疑惑为什么我们是从写使用元类的__init__方法，而不是使用__new__方法来初为元类增加一个属性。其实我只是上面那一段关于元类中__new__方法迷惑了，它主要用于我们需要对类的结构进行改变的时候我们才要重写这个方法。\n\n```python\nclass Singleton(type):\n    def __init__(self, *args, **kwargs):\n        print \"__init__\"\n        self.__instance = None\n        super(Singleton,self).__init__(*args, **kwargs)\n\n    def __call__(self, *args, **kwargs):\n        print \"__call__\"\n        if self.__instance is None:\n            self.__instance = super(Singleton,self).__call__(*args, **kwargs)\n        return self.__instance\n\n\nclass Foo(object):\n    __metaclass__ = Singleton #在代码执行到这里的时候，元类中的__new__方法和__init__方法其实已经被执行了，而不是在Foo实例化的时候执行。且仅会执行一次。\n\n\nfoo1 = Foo()\nfoo2 = Foo()\nprint Foo.__dict__  #_Singleton__instance': <__main__.Foo object at 0x100c52f10> 存在一个私有属性来保存属性，而不会污染Foo类（其实还是会污染，只是无法直接通过__instance属性访问）\n\nprint foo1 is foo2  # True\n\n# 输出\n# __init__\n# __call__\n# __call__\n# {'__module__': '__main__', '__metaclass__': <class '__main__.Singleton'>, '_Singleton__instance': <__main__.Foo object at 0x100c52f10>, '__dict__': <attribute '__dict__' of 'Foo' objects>, '__weakref__': <attribute '__weakref__' of 'Foo' objects>, '__doc__': None}\n# True \n```\n\n基于这个例子：\n\n- 我们知道元类(Singleton)生成的实例是一个类(Foo),而这里我们仅仅需要对这个实例(Foo)增加一个属性(__instance)来判断和保存生成的单例。想想也知道为一个类添加一个属性当然是在__init__中实现了。\n- 关于__call__方法的调用，因为Foo是Singleton的一个实例。所以Foo()这样的方式就调用了Singleton的__call__方法。不明白就回头看看上一节中的__call__方法介绍。\n\n假如我们通过元类的__new__方法来也可以实现，但显然没有通过__init__来实现优雅，因为我们不会为了为实例增加一个属性而重写__new__方法。所以这个形式不推荐。\n\n```python\nclass Singleton(type):\n    def __new__(cls, name,bases,attrs):\n        print \"__new__\"\n        attrs[\"_instance\"] = None\n        return  super(Singleton,cls).__new__(cls,name,bases,attrs)\n\n    def __call__(self, *args, **kwargs):\n        print \"__call__\"\n        if self._instance is None:\n            self._instance = super(Singleton,self).__call__(*args, **kwargs)\n        return self._instance\n\nclass Foo(object):\n    __metaclass__ = Singleton\n\nfoo1 = Foo()\nfoo2 = Foo()\nprint Foo.__dict__ \nprint foo1 is foo2  # True\n\n# 输出\n# __new__\n# __call__\n# __call__\n# {'__module__': '__main__', '__metaclass__': <class '__main__.Singleton'>, '_instance': <__main__.Foo object at 0x103e07ed0>, '__dict__': <attribute '__dict__' of 'Foo' objects>, '__weakref__': <attribute '__weakref__' of 'Foo' objects>, '__doc__': None}\n# True\n```","slug":"python/python原类实践","published":1,"updated":"2019-11-03T10:49:32.016Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblor00704tje6a0z8j17","content":"<h1 id=\"使用原来创建ORM的实例\"><a href=\"#使用原来创建ORM的实例\" class=\"headerlink\" title=\"使用原来创建ORM的实例\"></a>使用原来创建ORM的实例</h1><p>我们通过创建一个类似Django中的ORM来熟悉一下元类的使用，通常元类用来创建API是非常好的选择，使用元类的编写很复杂但使用者可以非常简洁的调用API。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#我们想创建一个类似Django的ORM，只要定义字段就可以实现对数据库表和字段的操作。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span><span class=\"params\">(Model)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 定义类的属性到列的映射：</span></span><br><span class=\"line\">    id = IntegerField(<span class=\"string\">'id'</span>)</span><br><span class=\"line\">    name = StringField(<span class=\"string\">'username'</span>)</span><br><span class=\"line\">    email = StringField(<span class=\"string\">'email'</span>)</span><br><span class=\"line\">    password = StringField(<span class=\"string\">'password'</span>)</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个实例：</span></span><br><span class=\"line\">u = User(id=<span class=\"number\">12345</span>, name=<span class=\"string\">'Michael'</span>, email=<span class=\"string\">'test@orm.org'</span>, password=<span class=\"string\">'my-pwd'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 保存到数据库：</span></span><br><span class=\"line\">u.save()</span><br></pre></td></tr></table></figure>\n<p>接下来我么来实现这么个功能：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\">#一、首先来定义Field类，它负责保存数据库表的字段名和字段类型：</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Field</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, column_type)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.column_type = column_type</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;%s:%s&gt;'</span> % (self.__class__.__name__, self.name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringField</span><span class=\"params\">(Field)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        super(StringField, self).__init__(name, <span class=\"string\">'varchar(100)'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerField</span><span class=\"params\">(Field)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        super(IntegerField, self).__init__(name, <span class=\"string\">'bigint'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#二、定义元类，控制Model对象的创建</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ModelMetaclass</span><span class=\"params\">(type)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''定义元类'''</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, name, bases, attrs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> name==<span class=\"string\">'Model'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> super(ModelMetaclass,cls).__new__(cls, name, bases, attrs)</span><br><span class=\"line\">        mappings = dict()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> attrs.iteritems():</span><br><span class=\"line\">            <span class=\"comment\"># 保存类属性和列的映射关系到mappings字典</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> isinstance(v, Field):</span><br><span class=\"line\">                print(<span class=\"string\">'Found mapping: %s==&gt;%s'</span> % (k, v))</span><br><span class=\"line\">                mappings[k] = v</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> mappings.iterkeys():</span><br><span class=\"line\">            <span class=\"comment\">#将类属性移除，使定义的类字段不污染User类属性，只在实例中可以访问这些key</span></span><br><span class=\"line\">            attrs.pop(k)</span><br><span class=\"line\">        attrs[<span class=\"string\">'__table__'</span>] = name.lower() <span class=\"comment\"># 假设表名和为类名的小写,创建类时添加一个__table__类属性</span></span><br><span class=\"line\">        attrs[<span class=\"string\">'__mappings__'</span>] = mappings <span class=\"comment\"># 保存属性和列的映射关系，创建类时添加一个__mappings__类属性</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> super(ModelMetaclass,cls).__new__(cls, name, bases, attrs)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#三、编写Model基类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Model</span><span class=\"params\">(dict)</span>:</span></span><br><span class=\"line\">    __metaclass__ = ModelMetaclass</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, **kw)</span>:</span></span><br><span class=\"line\">        super(Model, self).__init__(**kw)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self[key]</span><br><span class=\"line\">        <span class=\"keyword\">except</span> KeyError:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> AttributeError(<span class=\"string\">r\"'Model' object has no attribute '%s'\"</span> % key)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setattr__</span><span class=\"params\">(self, key, value)</span>:</span></span><br><span class=\"line\">        self[key] = value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        fields = []</span><br><span class=\"line\">        params = []</span><br><span class=\"line\">        args = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> self.__mappings__.iteritems():</span><br><span class=\"line\">            fields.append(v.name)</span><br><span class=\"line\">            params.append(<span class=\"string\">'?'</span>)</span><br><span class=\"line\">            args.append(getattr(self, k, <span class=\"keyword\">None</span>))</span><br><span class=\"line\">        sql = <span class=\"string\">'insert into %s (%s) values (%s)'</span> % (self.__table__, <span class=\"string\">','</span>.join(fields), <span class=\"string\">','</span>.join(params))</span><br><span class=\"line\">        print(<span class=\"string\">'SQL: %s'</span> % sql)</span><br><span class=\"line\">        print(<span class=\"string\">'ARGS: %s'</span> % str(args))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#最后，我们使用定义好的ORM接口，使用起来非常的简单。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span><span class=\"params\">(Model)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 定义类的属性到列的映射：</span></span><br><span class=\"line\">    id = IntegerField(<span class=\"string\">'id'</span>)</span><br><span class=\"line\">    name = StringField(<span class=\"string\">'username'</span>)</span><br><span class=\"line\">    email = StringField(<span class=\"string\">'email'</span>)</span><br><span class=\"line\">    password = StringField(<span class=\"string\">'password'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个实例：</span></span><br><span class=\"line\">u = User(id=<span class=\"number\">12345</span>, name=<span class=\"string\">'Michael'</span>, email=<span class=\"string\">'test@orm.org'</span>, password=<span class=\"string\">'my-pwd'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 保存到数据库：</span></span><br><span class=\"line\">u.save()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\"><span class=\"comment\"># Found mapping: email==&gt;&lt;StringField:email&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># Found mapping: password==&gt;&lt;StringField:password&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># Found mapping: id==&gt;&lt;IntegerField:id&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># Found mapping: name==&gt;&lt;StringField:username&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># SQL: insert into User (password,email,username,id) values (?,?,?,?)</span></span><br><span class=\"line\"><span class=\"comment\"># ARGS: ['my-pwd', 'test@orm.org', 'Michael', 12345]</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"使用new方法和元类方式分别实现单例模式\"><a href=\"#使用new方法和元类方式分别实现单例模式\" class=\"headerlink\" title=\"使用new方法和元类方式分别实现单例模式\"></a>使用<strong>new</strong>方法和元类方式分别实现单例模式</h1><h2 id=\"1、new、init、call的介绍\"><a href=\"#1、new、init、call的介绍\" class=\"headerlink\" title=\"1、new、init、call的介绍\"></a>1、<strong>new</strong>、<strong>init</strong>、<strong>call</strong>的介绍</h2><p>在讲到使用元类创建单例模式之前，比需了解<strong>new</strong>这个内置方法的作用，在上面讲元类的时候我们用到了<strong>new</strong>方法来实现类的创建。然而我在那之前还是对<strong>new</strong>这个方法和<strong>init</strong>方法有一定的疑惑。因此这里花点时间对其概念做一次了解和区分。</p>\n<p><strong>new</strong>方法负责创建一个实例对象，在对象被创建的时候调用该方法它是一个类方法。<strong>new</strong>方法在返回一个实例之后，会自动的调用<strong>init</strong>方法，对实例进行初始化。如果<strong>new</strong>方法不返回值，或者返回的不是实例，那么它就不会自动的去调用<strong>init</strong>方法。</p>\n<p><strong>init</strong> 方法负责将该实例对象进行初始化，在对象被创建之后调用该方法，在<strong>new</strong>方法创建出一个实例后对实例属性进行初始化。<strong>init</strong>方法可以没有返回值。</p>\n<p><strong>call</strong>方法其实和类的创建过程和实例化没有多大关系了，定义了<strong>call</strong>方法才能被使用函数的方式执行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例如：</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"__call__ be called\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = A()</span><br><span class=\"line\">a()</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\"><span class=\"comment\">#__call__ be called</span></span><br></pre></td></tr></table></figure>\n<p>打个比方帮助理解：如果将创建实例的过程比作建一个房子。</p>\n<ul>\n<li>那么class就是一个房屋的设计图，他规定了这个房子有几个房间，每个人房间的大小朝向等。这个设计图就是累的结构</li>\n<li><strong>new</strong>就是一个房屋的框架，每个具体的房屋都需要先搭好框架后才能进行专修，当然现有了房屋设计才能有具体的房屋框架出来。这个就是从类到类实例的创建。</li>\n<li><strong>init</strong>就是装修房子的过程，对房屋的墙面和地板等颜色材质的丰富就是它该做的事情，当然先有具体的房子框架出来才能进行装饰了。这个就是实例属性的初始化，它是在<strong>new</strong>出一个实例后才能初始化。</li>\n<li><strong>call</strong>就是房子的电话，有了固定电话，才能被打电话嘛（就是通过括号的方式像函数一样执行）。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\">#__new__是一个类方法，在对象创建的时候调用</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"excute __new__\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> super(Foo,cls).__new__(cls,*args,**kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,value)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\">#__init__是一个实例方法，在对象创建后调用，对实例属性做初始化</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"excute __init\"</span></span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">f1 = Foo(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> f1.value</span><br><span class=\"line\">f2 = Foo(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> f2.value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出===：</span></span><br><span class=\"line\">excute __new__</span><br><span class=\"line\">excute __init</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">excute __new__</span><br><span class=\"line\">excute __init</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\">#====可以看出new方法在init方法之前执行</span></span><br></pre></td></tr></table></figure>\n<p> 子类如果重写<strong>new</strong>方法，一般依然要调用父类的<strong>new</strong>方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span><span class=\"params\">(Foo)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, *args, **kwargs)</span>:</span>        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> suyper(Child, cls).__new__(cls, *args, **kwargs)</span><br></pre></td></tr></table></figure>\n<p> 必须注意的是，类的<strong>new</strong>方法之后，必须生成本类的实例才能自动调用本类的<strong>init</strong>方法进行初始化，否则不会自动调用<strong>init</strong>.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"Foo __init__\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> object.__new__(Stranger, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stranger</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"class Stranger's __init__ be called\"</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\"></span><br><span class=\"line\">foo = Foo(<span class=\"string\">\"test\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> type(foo) <span class=\"comment\">#&lt;class '__main__.Stranger'&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> foo.name <span class=\"comment\">#AttributeError: 'Stranger' object has no attribute 'name'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#说明：如果new方法返回的不是本类的实例，那么本类（Foo）的init和生成的类(Stranger)的init都不会被调用</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-实现单例模式\"><a href=\"#2-实现单例模式\" class=\"headerlink\" title=\"2.实现单例模式\"></a>2.实现单例模式</h2><p>依照Python官方文档的说法，<strong>new</strong>方法主要是当你继承一些不可变的class时(比如int, str, tuple)， 提供给你一个自定义这些类的实例化过程的途径。还有就是实现自定义的metaclass。接下来我们分别通过这两种方式来实现单例模式。当初在看到cookbook中的元类来实现单例模式的时候对其相当疑惑，因此才有了上面这些对元类的总结。</p>\n<p>简单来说，单例模式的原理就是通过在类属性中添加一个单例判定位ins_flag，通过这个flag判断是否已经被实例化过了,如果被实例化过了就返回该实例。</p>\n<h3 id=\"new方法实现单例：\"><a href=\"#new方法实现单例：\" class=\"headerlink\" title=\"new方法实现单例：\"></a><strong>new</strong>方法实现单例：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(cls,<span class=\"string\">\"_instance\"</span>):</span><br><span class=\"line\">            cls._instance = super(Singleton, cls).__new__(cls, *args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls._instance</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">s1 = Singleton()</span><br><span class=\"line\">s2 = Singleton()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> s1 <span class=\"keyword\">is</span> s2</span><br></pre></td></tr></table></figure>\n<p>因为重写<strong>new</strong>方法，所以继承至Singleton的类，在不重写<strong>new</strong>的情况下都将是单例模式。</p>\n<h3 id=\"元类实现单例\"><a href=\"#元类实现单例\" class=\"headerlink\" title=\"元类实现单例\"></a>元类实现单例</h3><p>当初我也很疑惑为什么我们是从写使用元类的<strong>init</strong>方法，而不是使用<strong>new</strong>方法来初为元类增加一个属性。其实我只是上面那一段关于元类中<strong>new</strong>方法迷惑了，它主要用于我们需要对类的结构进行改变的时候我们才要重写这个方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span><span class=\"params\">(type)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"__init__\"</span></span><br><span class=\"line\">        self.__instance = <span class=\"keyword\">None</span></span><br><span class=\"line\">        super(Singleton,self).__init__(*args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"__call__\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.__instance <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            self.__instance = super(Singleton,self).__call__(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__instance</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    __metaclass__ = Singleton <span class=\"comment\">#在代码执行到这里的时候，元类中的__new__方法和__init__方法其实已经被执行了，而不是在Foo实例化的时候执行。且仅会执行一次。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">foo1 = Foo()</span><br><span class=\"line\">foo2 = Foo()</span><br><span class=\"line\"><span class=\"keyword\">print</span> Foo.__dict__  <span class=\"comment\">#_Singleton__instance': &lt;__main__.Foo object at 0x100c52f10&gt; 存在一个私有属性来保存属性，而不会污染Foo类（其实还是会污染，只是无法直接通过__instance属性访问）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> foo1 <span class=\"keyword\">is</span> foo2  <span class=\"comment\"># True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\"><span class=\"comment\"># __init__</span></span><br><span class=\"line\"><span class=\"comment\"># __call__</span></span><br><span class=\"line\"><span class=\"comment\"># __call__</span></span><br><span class=\"line\"><span class=\"comment\"># &#123;'__module__': '__main__', '__metaclass__': &lt;class '__main__.Singleton'&gt;, '_Singleton__instance': &lt;__main__.Foo object at 0x100c52f10&gt;, '__dict__': &lt;attribute '__dict__' of 'Foo' objects&gt;, '__weakref__': &lt;attribute '__weakref__' of 'Foo' objects&gt;, '__doc__': None&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># True</span></span><br></pre></td></tr></table></figure>\n<p>基于这个例子：</p>\n<ul>\n<li>我们知道元类(Singleton)生成的实例是一个类(Foo),而这里我们仅仅需要对这个实例(Foo)增加一个属性(<strong>instance)来判断和保存生成的单例。想想也知道为一个类添加一个属性当然是在</strong>init__中实现了。</li>\n<li>关于<strong>call</strong>方法的调用，因为Foo是Singleton的一个实例。所以Foo()这样的方式就调用了Singleton的<strong>call</strong>方法。不明白就回头看看上一节中的<strong>call</strong>方法介绍。</li>\n</ul>\n<p>假如我们通过元类的<strong>new</strong>方法来也可以实现，但显然没有通过<strong>init</strong>来实现优雅，因为我们不会为了为实例增加一个属性而重写<strong>new</strong>方法。所以这个形式不推荐。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span><span class=\"params\">(type)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, name,bases,attrs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"__new__\"</span></span><br><span class=\"line\">        attrs[<span class=\"string\">\"_instance\"</span>] = <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>  super(Singleton,cls).__new__(cls,name,bases,attrs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"__call__\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self._instance <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            self._instance = super(Singleton,self).__call__(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._instance</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    __metaclass__ = Singleton</span><br><span class=\"line\"></span><br><span class=\"line\">foo1 = Foo()</span><br><span class=\"line\">foo2 = Foo()</span><br><span class=\"line\"><span class=\"keyword\">print</span> Foo.__dict__ </span><br><span class=\"line\"><span class=\"keyword\">print</span> foo1 <span class=\"keyword\">is</span> foo2  <span class=\"comment\"># True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\"><span class=\"comment\"># __new__</span></span><br><span class=\"line\"><span class=\"comment\"># __call__</span></span><br><span class=\"line\"><span class=\"comment\"># __call__</span></span><br><span class=\"line\"><span class=\"comment\"># &#123;'__module__': '__main__', '__metaclass__': &lt;class '__main__.Singleton'&gt;, '_instance': &lt;__main__.Foo object at 0x103e07ed0&gt;, '__dict__': &lt;attribute '__dict__' of 'Foo' objects&gt;, '__weakref__': &lt;attribute '__weakref__' of 'Foo' objects&gt;, '__doc__': None&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># True</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"使用原来创建ORM的实例\"><a href=\"#使用原来创建ORM的实例\" class=\"headerlink\" title=\"使用原来创建ORM的实例\"></a>使用原来创建ORM的实例</h1><p>我们通过创建一个类似Django中的ORM来熟悉一下元类的使用，通常元类用来创建API是非常好的选择，使用元类的编写很复杂但使用者可以非常简洁的调用API。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#我们想创建一个类似Django的ORM，只要定义字段就可以实现对数据库表和字段的操作。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span><span class=\"params\">(Model)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 定义类的属性到列的映射：</span></span><br><span class=\"line\">    id = IntegerField(<span class=\"string\">'id'</span>)</span><br><span class=\"line\">    name = StringField(<span class=\"string\">'username'</span>)</span><br><span class=\"line\">    email = StringField(<span class=\"string\">'email'</span>)</span><br><span class=\"line\">    password = StringField(<span class=\"string\">'password'</span>)</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个实例：</span></span><br><span class=\"line\">u = User(id=<span class=\"number\">12345</span>, name=<span class=\"string\">'Michael'</span>, email=<span class=\"string\">'test@orm.org'</span>, password=<span class=\"string\">'my-pwd'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 保存到数据库：</span></span><br><span class=\"line\">u.save()</span><br></pre></td></tr></table></figure>\n<p>接下来我么来实现这么个功能：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\">#一、首先来定义Field类，它负责保存数据库表的字段名和字段类型：</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Field</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, column_type)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.column_type = column_type</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'&lt;%s:%s&gt;'</span> % (self.__class__.__name__, self.name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringField</span><span class=\"params\">(Field)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        super(StringField, self).__init__(name, <span class=\"string\">'varchar(100)'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerField</span><span class=\"params\">(Field)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        super(IntegerField, self).__init__(name, <span class=\"string\">'bigint'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#二、定义元类，控制Model对象的创建</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ModelMetaclass</span><span class=\"params\">(type)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''定义元类'''</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, name, bases, attrs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> name==<span class=\"string\">'Model'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> super(ModelMetaclass,cls).__new__(cls, name, bases, attrs)</span><br><span class=\"line\">        mappings = dict()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> attrs.iteritems():</span><br><span class=\"line\">            <span class=\"comment\"># 保存类属性和列的映射关系到mappings字典</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> isinstance(v, Field):</span><br><span class=\"line\">                print(<span class=\"string\">'Found mapping: %s==&gt;%s'</span> % (k, v))</span><br><span class=\"line\">                mappings[k] = v</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> mappings.iterkeys():</span><br><span class=\"line\">            <span class=\"comment\">#将类属性移除，使定义的类字段不污染User类属性，只在实例中可以访问这些key</span></span><br><span class=\"line\">            attrs.pop(k)</span><br><span class=\"line\">        attrs[<span class=\"string\">'__table__'</span>] = name.lower() <span class=\"comment\"># 假设表名和为类名的小写,创建类时添加一个__table__类属性</span></span><br><span class=\"line\">        attrs[<span class=\"string\">'__mappings__'</span>] = mappings <span class=\"comment\"># 保存属性和列的映射关系，创建类时添加一个__mappings__类属性</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> super(ModelMetaclass,cls).__new__(cls, name, bases, attrs)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#三、编写Model基类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Model</span><span class=\"params\">(dict)</span>:</span></span><br><span class=\"line\">    __metaclass__ = ModelMetaclass</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, **kw)</span>:</span></span><br><span class=\"line\">        super(Model, self).__init__(**kw)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self[key]</span><br><span class=\"line\">        <span class=\"keyword\">except</span> KeyError:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> AttributeError(<span class=\"string\">r\"'Model' object has no attribute '%s'\"</span> % key)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setattr__</span><span class=\"params\">(self, key, value)</span>:</span></span><br><span class=\"line\">        self[key] = value</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        fields = []</span><br><span class=\"line\">        params = []</span><br><span class=\"line\">        args = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> self.__mappings__.iteritems():</span><br><span class=\"line\">            fields.append(v.name)</span><br><span class=\"line\">            params.append(<span class=\"string\">'?'</span>)</span><br><span class=\"line\">            args.append(getattr(self, k, <span class=\"keyword\">None</span>))</span><br><span class=\"line\">        sql = <span class=\"string\">'insert into %s (%s) values (%s)'</span> % (self.__table__, <span class=\"string\">','</span>.join(fields), <span class=\"string\">','</span>.join(params))</span><br><span class=\"line\">        print(<span class=\"string\">'SQL: %s'</span> % sql)</span><br><span class=\"line\">        print(<span class=\"string\">'ARGS: %s'</span> % str(args))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#最后，我们使用定义好的ORM接口，使用起来非常的简单。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span><span class=\"params\">(Model)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 定义类的属性到列的映射：</span></span><br><span class=\"line\">    id = IntegerField(<span class=\"string\">'id'</span>)</span><br><span class=\"line\">    name = StringField(<span class=\"string\">'username'</span>)</span><br><span class=\"line\">    email = StringField(<span class=\"string\">'email'</span>)</span><br><span class=\"line\">    password = StringField(<span class=\"string\">'password'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个实例：</span></span><br><span class=\"line\">u = User(id=<span class=\"number\">12345</span>, name=<span class=\"string\">'Michael'</span>, email=<span class=\"string\">'test@orm.org'</span>, password=<span class=\"string\">'my-pwd'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 保存到数据库：</span></span><br><span class=\"line\">u.save()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\"><span class=\"comment\"># Found mapping: email==&gt;&lt;StringField:email&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># Found mapping: password==&gt;&lt;StringField:password&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># Found mapping: id==&gt;&lt;IntegerField:id&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># Found mapping: name==&gt;&lt;StringField:username&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># SQL: insert into User (password,email,username,id) values (?,?,?,?)</span></span><br><span class=\"line\"><span class=\"comment\"># ARGS: ['my-pwd', 'test@orm.org', 'Michael', 12345]</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"使用new方法和元类方式分别实现单例模式\"><a href=\"#使用new方法和元类方式分别实现单例模式\" class=\"headerlink\" title=\"使用new方法和元类方式分别实现单例模式\"></a>使用<strong>new</strong>方法和元类方式分别实现单例模式</h1><h2 id=\"1、new、init、call的介绍\"><a href=\"#1、new、init、call的介绍\" class=\"headerlink\" title=\"1、new、init、call的介绍\"></a>1、<strong>new</strong>、<strong>init</strong>、<strong>call</strong>的介绍</h2><p>在讲到使用元类创建单例模式之前，比需了解<strong>new</strong>这个内置方法的作用，在上面讲元类的时候我们用到了<strong>new</strong>方法来实现类的创建。然而我在那之前还是对<strong>new</strong>这个方法和<strong>init</strong>方法有一定的疑惑。因此这里花点时间对其概念做一次了解和区分。</p>\n<p><strong>new</strong>方法负责创建一个实例对象，在对象被创建的时候调用该方法它是一个类方法。<strong>new</strong>方法在返回一个实例之后，会自动的调用<strong>init</strong>方法，对实例进行初始化。如果<strong>new</strong>方法不返回值，或者返回的不是实例，那么它就不会自动的去调用<strong>init</strong>方法。</p>\n<p><strong>init</strong> 方法负责将该实例对象进行初始化，在对象被创建之后调用该方法，在<strong>new</strong>方法创建出一个实例后对实例属性进行初始化。<strong>init</strong>方法可以没有返回值。</p>\n<p><strong>call</strong>方法其实和类的创建过程和实例化没有多大关系了，定义了<strong>call</strong>方法才能被使用函数的方式执行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例如：</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"__call__ be called\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = A()</span><br><span class=\"line\">a()</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\"><span class=\"comment\">#__call__ be called</span></span><br></pre></td></tr></table></figure>\n<p>打个比方帮助理解：如果将创建实例的过程比作建一个房子。</p>\n<ul>\n<li>那么class就是一个房屋的设计图，他规定了这个房子有几个房间，每个人房间的大小朝向等。这个设计图就是累的结构</li>\n<li><strong>new</strong>就是一个房屋的框架，每个具体的房屋都需要先搭好框架后才能进行专修，当然现有了房屋设计才能有具体的房屋框架出来。这个就是从类到类实例的创建。</li>\n<li><strong>init</strong>就是装修房子的过程，对房屋的墙面和地板等颜色材质的丰富就是它该做的事情，当然先有具体的房子框架出来才能进行装饰了。这个就是实例属性的初始化，它是在<strong>new</strong>出一个实例后才能初始化。</li>\n<li><strong>call</strong>就是房子的电话，有了固定电话，才能被打电话嘛（就是通过括号的方式像函数一样执行）。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\">#__new__是一个类方法，在对象创建的时候调用</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"excute __new__\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> super(Foo,cls).__new__(cls,*args,**kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,value)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\">#__init__是一个实例方法，在对象创建后调用，对实例属性做初始化</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"excute __init\"</span></span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">f1 = Foo(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> f1.value</span><br><span class=\"line\">f2 = Foo(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> f2.value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出===：</span></span><br><span class=\"line\">excute __new__</span><br><span class=\"line\">excute __init</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">excute __new__</span><br><span class=\"line\">excute __init</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\">#====可以看出new方法在init方法之前执行</span></span><br></pre></td></tr></table></figure>\n<p> 子类如果重写<strong>new</strong>方法，一般依然要调用父类的<strong>new</strong>方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span><span class=\"params\">(Foo)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, *args, **kwargs)</span>:</span>        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> suyper(Child, cls).__new__(cls, *args, **kwargs)</span><br></pre></td></tr></table></figure>\n<p> 必须注意的是，类的<strong>new</strong>方法之后，必须生成本类的实例才能自动调用本类的<strong>init</strong>方法进行初始化，否则不会自动调用<strong>init</strong>.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"Foo __init__\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> object.__new__(Stranger, *args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stranger</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"class Stranger's __init__ be called\"</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\"></span><br><span class=\"line\">foo = Foo(<span class=\"string\">\"test\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> type(foo) <span class=\"comment\">#&lt;class '__main__.Stranger'&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> foo.name <span class=\"comment\">#AttributeError: 'Stranger' object has no attribute 'name'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#说明：如果new方法返回的不是本类的实例，那么本类（Foo）的init和生成的类(Stranger)的init都不会被调用</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-实现单例模式\"><a href=\"#2-实现单例模式\" class=\"headerlink\" title=\"2.实现单例模式\"></a>2.实现单例模式</h2><p>依照Python官方文档的说法，<strong>new</strong>方法主要是当你继承一些不可变的class时(比如int, str, tuple)， 提供给你一个自定义这些类的实例化过程的途径。还有就是实现自定义的metaclass。接下来我们分别通过这两种方式来实现单例模式。当初在看到cookbook中的元类来实现单例模式的时候对其相当疑惑，因此才有了上面这些对元类的总结。</p>\n<p>简单来说，单例模式的原理就是通过在类属性中添加一个单例判定位ins_flag，通过这个flag判断是否已经被实例化过了,如果被实例化过了就返回该实例。</p>\n<h3 id=\"new方法实现单例：\"><a href=\"#new方法实现单例：\" class=\"headerlink\" title=\"new方法实现单例：\"></a><strong>new</strong>方法实现单例：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> hasattr(cls,<span class=\"string\">\"_instance\"</span>):</span><br><span class=\"line\">            cls._instance = super(Singleton, cls).__new__(cls, *args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls._instance</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">s1 = Singleton()</span><br><span class=\"line\">s2 = Singleton()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> s1 <span class=\"keyword\">is</span> s2</span><br></pre></td></tr></table></figure>\n<p>因为重写<strong>new</strong>方法，所以继承至Singleton的类，在不重写<strong>new</strong>的情况下都将是单例模式。</p>\n<h3 id=\"元类实现单例\"><a href=\"#元类实现单例\" class=\"headerlink\" title=\"元类实现单例\"></a>元类实现单例</h3><p>当初我也很疑惑为什么我们是从写使用元类的<strong>init</strong>方法，而不是使用<strong>new</strong>方法来初为元类增加一个属性。其实我只是上面那一段关于元类中<strong>new</strong>方法迷惑了，它主要用于我们需要对类的结构进行改变的时候我们才要重写这个方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span><span class=\"params\">(type)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"__init__\"</span></span><br><span class=\"line\">        self.__instance = <span class=\"keyword\">None</span></span><br><span class=\"line\">        super(Singleton,self).__init__(*args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"__call__\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.__instance <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            self.__instance = super(Singleton,self).__call__(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.__instance</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    __metaclass__ = Singleton <span class=\"comment\">#在代码执行到这里的时候，元类中的__new__方法和__init__方法其实已经被执行了，而不是在Foo实例化的时候执行。且仅会执行一次。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">foo1 = Foo()</span><br><span class=\"line\">foo2 = Foo()</span><br><span class=\"line\"><span class=\"keyword\">print</span> Foo.__dict__  <span class=\"comment\">#_Singleton__instance': &lt;__main__.Foo object at 0x100c52f10&gt; 存在一个私有属性来保存属性，而不会污染Foo类（其实还是会污染，只是无法直接通过__instance属性访问）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> foo1 <span class=\"keyword\">is</span> foo2  <span class=\"comment\"># True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\"><span class=\"comment\"># __init__</span></span><br><span class=\"line\"><span class=\"comment\"># __call__</span></span><br><span class=\"line\"><span class=\"comment\"># __call__</span></span><br><span class=\"line\"><span class=\"comment\"># &#123;'__module__': '__main__', '__metaclass__': &lt;class '__main__.Singleton'&gt;, '_Singleton__instance': &lt;__main__.Foo object at 0x100c52f10&gt;, '__dict__': &lt;attribute '__dict__' of 'Foo' objects&gt;, '__weakref__': &lt;attribute '__weakref__' of 'Foo' objects&gt;, '__doc__': None&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># True</span></span><br></pre></td></tr></table></figure>\n<p>基于这个例子：</p>\n<ul>\n<li>我们知道元类(Singleton)生成的实例是一个类(Foo),而这里我们仅仅需要对这个实例(Foo)增加一个属性(<strong>instance)来判断和保存生成的单例。想想也知道为一个类添加一个属性当然是在</strong>init__中实现了。</li>\n<li>关于<strong>call</strong>方法的调用，因为Foo是Singleton的一个实例。所以Foo()这样的方式就调用了Singleton的<strong>call</strong>方法。不明白就回头看看上一节中的<strong>call</strong>方法介绍。</li>\n</ul>\n<p>假如我们通过元类的<strong>new</strong>方法来也可以实现，但显然没有通过<strong>init</strong>来实现优雅，因为我们不会为了为实例增加一个属性而重写<strong>new</strong>方法。所以这个形式不推荐。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span><span class=\"params\">(type)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(cls, name,bases,attrs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"__new__\"</span></span><br><span class=\"line\">        attrs[<span class=\"string\">\"_instance\"</span>] = <span class=\"keyword\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>  super(Singleton,cls).__new__(cls,name,bases,attrs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, *args, **kwargs)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"__call__\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self._instance <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            self._instance = super(Singleton,self).__call__(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._instance</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    __metaclass__ = Singleton</span><br><span class=\"line\"></span><br><span class=\"line\">foo1 = Foo()</span><br><span class=\"line\">foo2 = Foo()</span><br><span class=\"line\"><span class=\"keyword\">print</span> Foo.__dict__ </span><br><span class=\"line\"><span class=\"keyword\">print</span> foo1 <span class=\"keyword\">is</span> foo2  <span class=\"comment\"># True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\"><span class=\"comment\"># __new__</span></span><br><span class=\"line\"><span class=\"comment\"># __call__</span></span><br><span class=\"line\"><span class=\"comment\"># __call__</span></span><br><span class=\"line\"><span class=\"comment\"># &#123;'__module__': '__main__', '__metaclass__': &lt;class '__main__.Singleton'&gt;, '_instance': &lt;__main__.Foo object at 0x103e07ed0&gt;, '__dict__': &lt;attribute '__dict__' of 'Foo' objects&gt;, '__weakref__': &lt;attribute '__weakref__' of 'Foo' objects&gt;, '__doc__': None&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># True</span></span><br></pre></td></tr></table></figure>"},{"title":"centos8安装kvm","date":"2020-09-05T13:40:23.000Z","_content":"\n# 如何在CentOS/RHEL 8上安装KVM虚拟化\n\n基于内核的虚拟机（简称KVM）是一种开源的标准虚拟化解决方案，已紧密集成到Linux中。它是一个可加载的内核模块，将Linux转换为Type-1（裸机）虚拟机管理程序，该虚拟机管理程序创建了用于运行虚拟机（VM）的虚拟操作平台。\n\n### 精选回答\n\n在KVM下，每个VM是一个Linux进程，由内核调度和管理，并具有专用的虚拟化硬件（即CPU，网卡，磁盘等）。它还支持嵌套虚拟化，使您可以在另一个VM内运行一个VM。\n\n它的一些主要功能包括支持广泛的Linux支持的硬件平台（带有虚拟化扩展的x86硬件（Intel VT或AMD-V）），它使用SELinux和安全虚拟化（sVirt）提供增强的VM安全性和隔离，它继承了内核内存管理功能，并且支持脱机和实时迁移（在物理主机之间迁移正在运行的VM）。\n\n在本文中，您将学习如何在CentOS 8和RHEL 8 Linux中安装KVM虚拟化，创建和管理虚拟机。\n\n准备工作：\n\n全新安装的CentOS 8[服务器](https://www.a5idc.net/)\n\n全新安装的RHEL 8服务器\n\n在RHEL 8服务器上启用了RedHat订阅\n\n此外，通过运行以下命令，确保您的硬件平台支持虚拟化。\n\n```\n# grep -e 'vmx' /proc/cpuinfo #Intel systems\n# grep -e 'svm' /proc/cpuinfo #AMD systems\n```\n\n\n\n另外，请确认内核中已加载KVM模块（默认情况下应为KVM模块）。\n\n＃lsmod | grep kvm\n\n这是基于英特尔的测试系统上的示例输出：\n\n![img](https://tp.a5idc.net/wd/1a.png)\n\n在以前的KVM指南系列中，我们展示了如何使用KVM（基于内核的虚拟机）在Linux中创建虚拟机，并展示了如何使用virt-manager GUI工具（根据RHEL已弃用）创建和管理VM。8个文档）。对于本指南，我们将采用不同的方法，我们将使用Cockpit Web控制台。\n\n步骤1：在CentOS 8上设置Cockpit Web控制台\n\n1.在Cockpit是一个易于使用的集成和可扩展的基于Web的界面在网页浏览器来管理Linux服务器。它使您能够执行系统任务，例如配置网络，管理存储，创建VM和使用鼠标检查日志。它使用系统的普通用户登录名和特权，但也支持其他身份验证方法。\n\n它是预先安装的，并已在新安装的CentOS 8和RHEL 8系统上启用，如果尚未安装，请使用以下dnf命令进行安装。应安装cockpit-machines扩展程序以管理基于Libvirt的 VM 。\n\n\\# dnf install cockpit cockpit-machines\n\n2.软件包安装完成后，启动座舱插座，使其在系统启动时自动启动，并检查其状态以确认其已启动并正在运行。\n\n\\# systemctl start cockpit.socket\n\n\\# systemctl enable cockpit.socket\n\n\\# systemctl status cockpit.socket\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr7689tj30p807nwej.jpg)\n\n3.接下来，使用firewall-cmd命令将cockpit服务添加到默认启用的系统防火墙中，然后重新加载防火墙配置以应用新更改。\n\n\\# firewall-cmd --add-service=cockpit --permanent\n\n\\# firewall-cmd --reload\n\n4.要访问CockpitWeb控制台，请打开Web浏览器并使用以下URL进行导航。\n\nhttps://FQDN:9090/或者https://SERVER_IP:9090/\n\n该Cockpit采用的是自签名证书启用HTTPS，只需使用该连接，当你在浏览器的警告。在登录页面上，使用您的服务器用户帐户凭据。\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrar1fvj30wq0n4glu.jpg)\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrbov8uj30wq0nldgf.jpg)\n\n步骤2：安装KVM虚拟化CentOS 8\n\n5.接下来，如下安装虚拟化模块和其他虚拟化软件包。所述的virt安装包提供用于从所述命令行界面进行安装的虚拟机的工具，和一个的virt查看器用于查看虚拟机。\n\n\\# dnf module install virt\n\n\\# dnf install virt-install virt-viewer\n\n6.接下来，运行virt-host-validate命令以验证主机是否设置为运行libvirt系统管理程序驱动程序。\n\n\\# virt-host-validate\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr7hgijj30o506mt8o.jpg)\n\n7.接下来，启动libvirtd守护程序（libvirtd），并使它在每次引导时自动启动。然后检查其状态以确认它已启动并正在运行。\n\n\\# systemctl start libvirtd.service\n\n\\# systemctl enable libvirtd.service\n\n\\# systemctl status libvirtd.service\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrd3s9zj30vz0bj74i.jpg)\n\n步骤3：通过Cockpit设置网桥（虚拟网络交换机）\n\n8.现在创建一个网桥（虚拟网络交换机），将虚拟机集成到与主机相同的网络中。默认情况下，一旦启动libvirtd守护程序，它将激活默认网络接口virbr0，该接口代表以NAT模式运行的虚拟网络交换机。\n\n在本指南中，我们将以桥接模式创建名为br0的网络接口。这将使虚拟机可在主机网络上访问。\n\n在座舱主界面中，单击“ 网络”，然后单击“ 添加网桥”，如以下屏幕截图所示。\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrf0gggj30yd0n8dgd.jpg)\n\n9.从弹出窗口中，输入网桥名称，然后选择网桥从站或端口设备（例如，代表以太网接口的enp2s0），如以下屏幕截图所示。然后单击“ 应用”。\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr9t6d6j30ls0dedfu.jpg)\n\n10.现在，当您查看“ 接口 ”列表时，新的网桥应显示在此处，几秒钟后，应禁用以太网接口（关闭）。\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgraacb2j30ya0bz3yo.jpg)\n\n步骤4：通过Cockpit Web控制台创建和管理虚拟机\n\n11.在座舱主界面中，单击“ 虚拟机”选项，如以下屏幕快照中突出显示。在“ 虚拟机”页面上，单击创建虚拟机。\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrejb9rj30wm0ckq30.jpg)\n\n12.将显示一个带有用于创建新VM的选项的窗口。输入连接，名称（例如ubuntu18.04），安装源类型（在测试系统上，我们已将ISO映像存储在存储池下，即/ var / lib / libvirt / images /），安装源，存储，大小，内存如下图所示。输入安装源后，应自动选择OS供应商和操作系统。\n\n还要选中立即启动VM的选项，然后单击“ 创建”。\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr9d2jdj30hp0gedg2.jpg)\n\n13.在上一步中单击“ 创建”后，应自动启动VM，并使用提供的ISO映像启动VM。继续安装客户机操作系统（在本例中为Ubuntu 18.04）。\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr7y5kjj30wj0hst90.jpg)\n\n如果你点击网络接口的的虚拟机，网络源应注明新建桥网络接口。\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr8w9jwj30wm09o74g.jpg)\n\n并且在安装过程中，在配置网络接口的步骤中，您应该能够注意到VM以太网接口从主机网络的DHCP服务器接收IP地址。\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrcmjofj30wm0c1q33.jpg)\n\n请注意，您需要安装OpenSSH软件包才能从主机网络上的任何计算机通过SSH访问来宾OS，如上一节所述。\n\n14.客户机操作系统安装完成后，请重新引导VM，然后转到“ 磁盘”并分离/除去VM磁盘下的cdrom设备。然后单击“运行”以启动VM。\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrb8getj30rs090wek.jpg)\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrc5he7j30s206mdfr.jpg)\n\n15.现在，在Consoles（控制台）下，您可以使用在OS安装期间创建的用户帐户登录来宾OS。\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr8ep0jj30qu0il74f.jpg)\n\n步骤5：通过SSH访问虚拟机访客操作系统\n\n16.要通过SSH从主机网络访问新安装的来宾OS，请运行以下命令（将10.42.0.197替换为来宾的IP地址）。\n\n$ ssh tecmint@10.42.0.197\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrdqnrej30qj0ent91.jpg)\n\n17.要关闭，重新启动或删除VM，请从VM列表中单击它，然后使用以下屏幕快照中突出显示的按钮。\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgre19rij30sy0b2dfw.jpg)\n\n在本文中，介绍了如何安装KVM虚拟化软件包以及如何通过cockpit Web控制台创建和管理VM。","source":"_posts/运维/centos8安装kvm.md","raw":"---\ntitle: centos8安装kvm\ndate: 2020-9-05 21:40:23\ntags:\n- linux\n---\n\n# 如何在CentOS/RHEL 8上安装KVM虚拟化\n\n基于内核的虚拟机（简称KVM）是一种开源的标准虚拟化解决方案，已紧密集成到Linux中。它是一个可加载的内核模块，将Linux转换为Type-1（裸机）虚拟机管理程序，该虚拟机管理程序创建了用于运行虚拟机（VM）的虚拟操作平台。\n\n### 精选回答\n\n在KVM下，每个VM是一个Linux进程，由内核调度和管理，并具有专用的虚拟化硬件（即CPU，网卡，磁盘等）。它还支持嵌套虚拟化，使您可以在另一个VM内运行一个VM。\n\n它的一些主要功能包括支持广泛的Linux支持的硬件平台（带有虚拟化扩展的x86硬件（Intel VT或AMD-V）），它使用SELinux和安全虚拟化（sVirt）提供增强的VM安全性和隔离，它继承了内核内存管理功能，并且支持脱机和实时迁移（在物理主机之间迁移正在运行的VM）。\n\n在本文中，您将学习如何在CentOS 8和RHEL 8 Linux中安装KVM虚拟化，创建和管理虚拟机。\n\n准备工作：\n\n全新安装的CentOS 8[服务器](https://www.a5idc.net/)\n\n全新安装的RHEL 8服务器\n\n在RHEL 8服务器上启用了RedHat订阅\n\n此外，通过运行以下命令，确保您的硬件平台支持虚拟化。\n\n```\n# grep -e 'vmx' /proc/cpuinfo #Intel systems\n# grep -e 'svm' /proc/cpuinfo #AMD systems\n```\n\n\n\n另外，请确认内核中已加载KVM模块（默认情况下应为KVM模块）。\n\n＃lsmod | grep kvm\n\n这是基于英特尔的测试系统上的示例输出：\n\n![img](https://tp.a5idc.net/wd/1a.png)\n\n在以前的KVM指南系列中，我们展示了如何使用KVM（基于内核的虚拟机）在Linux中创建虚拟机，并展示了如何使用virt-manager GUI工具（根据RHEL已弃用）创建和管理VM。8个文档）。对于本指南，我们将采用不同的方法，我们将使用Cockpit Web控制台。\n\n步骤1：在CentOS 8上设置Cockpit Web控制台\n\n1.在Cockpit是一个易于使用的集成和可扩展的基于Web的界面在网页浏览器来管理Linux服务器。它使您能够执行系统任务，例如配置网络，管理存储，创建VM和使用鼠标检查日志。它使用系统的普通用户登录名和特权，但也支持其他身份验证方法。\n\n它是预先安装的，并已在新安装的CentOS 8和RHEL 8系统上启用，如果尚未安装，请使用以下dnf命令进行安装。应安装cockpit-machines扩展程序以管理基于Libvirt的 VM 。\n\n\\# dnf install cockpit cockpit-machines\n\n2.软件包安装完成后，启动座舱插座，使其在系统启动时自动启动，并检查其状态以确认其已启动并正在运行。\n\n\\# systemctl start cockpit.socket\n\n\\# systemctl enable cockpit.socket\n\n\\# systemctl status cockpit.socket\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr7689tj30p807nwej.jpg)\n\n3.接下来，使用firewall-cmd命令将cockpit服务添加到默认启用的系统防火墙中，然后重新加载防火墙配置以应用新更改。\n\n\\# firewall-cmd --add-service=cockpit --permanent\n\n\\# firewall-cmd --reload\n\n4.要访问CockpitWeb控制台，请打开Web浏览器并使用以下URL进行导航。\n\nhttps://FQDN:9090/或者https://SERVER_IP:9090/\n\n该Cockpit采用的是自签名证书启用HTTPS，只需使用该连接，当你在浏览器的警告。在登录页面上，使用您的服务器用户帐户凭据。\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrar1fvj30wq0n4glu.jpg)\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrbov8uj30wq0nldgf.jpg)\n\n步骤2：安装KVM虚拟化CentOS 8\n\n5.接下来，如下安装虚拟化模块和其他虚拟化软件包。所述的virt安装包提供用于从所述命令行界面进行安装的虚拟机的工具，和一个的virt查看器用于查看虚拟机。\n\n\\# dnf module install virt\n\n\\# dnf install virt-install virt-viewer\n\n6.接下来，运行virt-host-validate命令以验证主机是否设置为运行libvirt系统管理程序驱动程序。\n\n\\# virt-host-validate\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr7hgijj30o506mt8o.jpg)\n\n7.接下来，启动libvirtd守护程序（libvirtd），并使它在每次引导时自动启动。然后检查其状态以确认它已启动并正在运行。\n\n\\# systemctl start libvirtd.service\n\n\\# systemctl enable libvirtd.service\n\n\\# systemctl status libvirtd.service\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrd3s9zj30vz0bj74i.jpg)\n\n步骤3：通过Cockpit设置网桥（虚拟网络交换机）\n\n8.现在创建一个网桥（虚拟网络交换机），将虚拟机集成到与主机相同的网络中。默认情况下，一旦启动libvirtd守护程序，它将激活默认网络接口virbr0，该接口代表以NAT模式运行的虚拟网络交换机。\n\n在本指南中，我们将以桥接模式创建名为br0的网络接口。这将使虚拟机可在主机网络上访问。\n\n在座舱主界面中，单击“ 网络”，然后单击“ 添加网桥”，如以下屏幕截图所示。\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrf0gggj30yd0n8dgd.jpg)\n\n9.从弹出窗口中，输入网桥名称，然后选择网桥从站或端口设备（例如，代表以太网接口的enp2s0），如以下屏幕截图所示。然后单击“ 应用”。\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr9t6d6j30ls0dedfu.jpg)\n\n10.现在，当您查看“ 接口 ”列表时，新的网桥应显示在此处，几秒钟后，应禁用以太网接口（关闭）。\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgraacb2j30ya0bz3yo.jpg)\n\n步骤4：通过Cockpit Web控制台创建和管理虚拟机\n\n11.在座舱主界面中，单击“ 虚拟机”选项，如以下屏幕快照中突出显示。在“ 虚拟机”页面上，单击创建虚拟机。\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrejb9rj30wm0ckq30.jpg)\n\n12.将显示一个带有用于创建新VM的选项的窗口。输入连接，名称（例如ubuntu18.04），安装源类型（在测试系统上，我们已将ISO映像存储在存储池下，即/ var / lib / libvirt / images /），安装源，存储，大小，内存如下图所示。输入安装源后，应自动选择OS供应商和操作系统。\n\n还要选中立即启动VM的选项，然后单击“ 创建”。\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr9d2jdj30hp0gedg2.jpg)\n\n13.在上一步中单击“ 创建”后，应自动启动VM，并使用提供的ISO映像启动VM。继续安装客户机操作系统（在本例中为Ubuntu 18.04）。\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr7y5kjj30wj0hst90.jpg)\n\n如果你点击网络接口的的虚拟机，网络源应注明新建桥网络接口。\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr8w9jwj30wm09o74g.jpg)\n\n并且在安装过程中，在配置网络接口的步骤中，您应该能够注意到VM以太网接口从主机网络的DHCP服务器接收IP地址。\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrcmjofj30wm0c1q33.jpg)\n\n请注意，您需要安装OpenSSH软件包才能从主机网络上的任何计算机通过SSH访问来宾OS，如上一节所述。\n\n14.客户机操作系统安装完成后，请重新引导VM，然后转到“ 磁盘”并分离/除去VM磁盘下的cdrom设备。然后单击“运行”以启动VM。\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrb8getj30rs090wek.jpg)\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrc5he7j30s206mdfr.jpg)\n\n15.现在，在Consoles（控制台）下，您可以使用在OS安装期间创建的用户帐户登录来宾OS。\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr8ep0jj30qu0il74f.jpg)\n\n步骤5：通过SSH访问虚拟机访客操作系统\n\n16.要通过SSH从主机网络访问新安装的来宾OS，请运行以下命令（将10.42.0.197替换为来宾的IP地址）。\n\n$ ssh tecmint@10.42.0.197\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrdqnrej30qj0ent91.jpg)\n\n17.要关闭，重新启动或删除VM，请从VM列表中单击它，然后使用以下屏幕快照中突出显示的按钮。\n\n![img](https://tva1.sinaimg.cn/large/007S8ZIlgy1girgre19rij30sy0b2dfw.jpg)\n\n在本文中，介绍了如何安装KVM虚拟化软件包以及如何通过cockpit Web控制台创建和管理VM。","slug":"运维/centos8安装kvm","published":1,"updated":"2020-09-20T03:22:55.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblot00724tjerarvif4m","content":"<h1 id=\"如何在CentOS-RHEL-8上安装KVM虚拟化\"><a href=\"#如何在CentOS-RHEL-8上安装KVM虚拟化\" class=\"headerlink\" title=\"如何在CentOS/RHEL 8上安装KVM虚拟化\"></a>如何在CentOS/RHEL 8上安装KVM虚拟化</h1><p>基于内核的虚拟机（简称KVM）是一种开源的标准虚拟化解决方案，已紧密集成到Linux中。它是一个可加载的内核模块，将Linux转换为Type-1（裸机）虚拟机管理程序，该虚拟机管理程序创建了用于运行虚拟机（VM）的虚拟操作平台。</p>\n<h3 id=\"精选回答\"><a href=\"#精选回答\" class=\"headerlink\" title=\"精选回答\"></a>精选回答</h3><p>在KVM下，每个VM是一个Linux进程，由内核调度和管理，并具有专用的虚拟化硬件（即CPU，网卡，磁盘等）。它还支持嵌套虚拟化，使您可以在另一个VM内运行一个VM。</p>\n<p>它的一些主要功能包括支持广泛的Linux支持的硬件平台（带有虚拟化扩展的x86硬件（Intel VT或AMD-V）），它使用SELinux和安全虚拟化（sVirt）提供增强的VM安全性和隔离，它继承了内核内存管理功能，并且支持脱机和实时迁移（在物理主机之间迁移正在运行的VM）。</p>\n<p>在本文中，您将学习如何在CentOS 8和RHEL 8 Linux中安装KVM虚拟化，创建和管理虚拟机。</p>\n<p>准备工作：</p>\n<p>全新安装的CentOS 8<a href=\"https://www.a5idc.net/\" target=\"_blank\" rel=\"noopener\">服务器</a></p>\n<p>全新安装的RHEL 8服务器</p>\n<p>在RHEL 8服务器上启用了RedHat订阅</p>\n<p>此外，通过运行以下命令，确保您的硬件平台支持虚拟化。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># grep -e &apos;vmx&apos; /proc/cpuinfo #Intel systems</span><br><span class=\"line\"># grep -e &apos;svm&apos; /proc/cpuinfo #AMD systems</span><br></pre></td></tr></table></figure>\n<p>另外，请确认内核中已加载KVM模块（默认情况下应为KVM模块）。</p>\n<p>＃lsmod | grep kvm</p>\n<p>这是基于英特尔的测试系统上的示例输出：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tp.a5idc.net/wd/1a.png\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>在以前的KVM指南系列中，我们展示了如何使用KVM（基于内核的虚拟机）在Linux中创建虚拟机，并展示了如何使用virt-manager GUI工具（根据RHEL已弃用）创建和管理VM。8个文档）。对于本指南，我们将采用不同的方法，我们将使用Cockpit Web控制台。</p>\n<p>步骤1：在CentOS 8上设置Cockpit Web控制台</p>\n<p>1.在Cockpit是一个易于使用的集成和可扩展的基于Web的界面在网页浏览器来管理Linux服务器。它使您能够执行系统任务，例如配置网络，管理存储，创建VM和使用鼠标检查日志。它使用系统的普通用户登录名和特权，但也支持其他身份验证方法。</p>\n<p>它是预先安装的，并已在新安装的CentOS 8和RHEL 8系统上启用，如果尚未安装，请使用以下dnf命令进行安装。应安装cockpit-machines扩展程序以管理基于Libvirt的 VM 。</p>\n<p># dnf install cockpit cockpit-machines</p>\n<p>2.软件包安装完成后，启动座舱插座，使其在系统启动时自动启动，并检查其状态以确认其已启动并正在运行。</p>\n<p># systemctl start cockpit.socket</p>\n<p># systemctl enable cockpit.socket</p>\n<p># systemctl status cockpit.socket</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr7689tj30p807nwej.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>3.接下来，使用firewall-cmd命令将cockpit服务添加到默认启用的系统防火墙中，然后重新加载防火墙配置以应用新更改。</p>\n<p># firewall-cmd –add-service=cockpit –permanent</p>\n<p># firewall-cmd –reload</p>\n<p>4.要访问CockpitWeb控制台，请打开Web浏览器并使用以下URL进行导航。</p>\n<p><a href=\"https://FQDN:9090/或者https://SERVER_IP:9090/\" target=\"_blank\" rel=\"noopener\">https://FQDN:9090/或者https://SERVER_IP:9090/</a></p>\n<p>该Cockpit采用的是自签名证书启用HTTPS，只需使用该连接，当你在浏览器的警告。在登录页面上，使用您的服务器用户帐户凭据。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrar1fvj30wq0n4glu.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrbov8uj30wq0nldgf.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>步骤2：安装KVM虚拟化CentOS 8</p>\n<p>5.接下来，如下安装虚拟化模块和其他虚拟化软件包。所述的virt安装包提供用于从所述命令行界面进行安装的虚拟机的工具，和一个的virt查看器用于查看虚拟机。</p>\n<p># dnf module install virt</p>\n<p># dnf install virt-install virt-viewer</p>\n<p>6.接下来，运行virt-host-validate命令以验证主机是否设置为运行libvirt系统管理程序驱动程序。</p>\n<p># virt-host-validate</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr7hgijj30o506mt8o.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>7.接下来，启动libvirtd守护程序（libvirtd），并使它在每次引导时自动启动。然后检查其状态以确认它已启动并正在运行。</p>\n<p># systemctl start libvirtd.service</p>\n<p># systemctl enable libvirtd.service</p>\n<p># systemctl status libvirtd.service</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrd3s9zj30vz0bj74i.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>步骤3：通过Cockpit设置网桥（虚拟网络交换机）</p>\n<p>8.现在创建一个网桥（虚拟网络交换机），将虚拟机集成到与主机相同的网络中。默认情况下，一旦启动libvirtd守护程序，它将激活默认网络接口virbr0，该接口代表以NAT模式运行的虚拟网络交换机。</p>\n<p>在本指南中，我们将以桥接模式创建名为br0的网络接口。这将使虚拟机可在主机网络上访问。</p>\n<p>在座舱主界面中，单击“ 网络”，然后单击“ 添加网桥”，如以下屏幕截图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrf0gggj30yd0n8dgd.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>9.从弹出窗口中，输入网桥名称，然后选择网桥从站或端口设备（例如，代表以太网接口的enp2s0），如以下屏幕截图所示。然后单击“ 应用”。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr9t6d6j30ls0dedfu.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>10.现在，当您查看“ 接口 ”列表时，新的网桥应显示在此处，几秒钟后，应禁用以太网接口（关闭）。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgraacb2j30ya0bz3yo.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>步骤4：通过Cockpit Web控制台创建和管理虚拟机</p>\n<p>11.在座舱主界面中，单击“ 虚拟机”选项，如以下屏幕快照中突出显示。在“ 虚拟机”页面上，单击创建虚拟机。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrejb9rj30wm0ckq30.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>12.将显示一个带有用于创建新VM的选项的窗口。输入连接，名称（例如ubuntu18.04），安装源类型（在测试系统上，我们已将ISO映像存储在存储池下，即/ var / lib / libvirt / images /），安装源，存储，大小，内存如下图所示。输入安装源后，应自动选择OS供应商和操作系统。</p>\n<p>还要选中立即启动VM的选项，然后单击“ 创建”。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr9d2jdj30hp0gedg2.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>13.在上一步中单击“ 创建”后，应自动启动VM，并使用提供的ISO映像启动VM。继续安装客户机操作系统（在本例中为Ubuntu 18.04）。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr7y5kjj30wj0hst90.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>如果你点击网络接口的的虚拟机，网络源应注明新建桥网络接口。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr8w9jwj30wm09o74g.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>并且在安装过程中，在配置网络接口的步骤中，您应该能够注意到VM以太网接口从主机网络的DHCP服务器接收IP地址。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrcmjofj30wm0c1q33.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>请注意，您需要安装OpenSSH软件包才能从主机网络上的任何计算机通过SSH访问来宾OS，如上一节所述。</p>\n<p>14.客户机操作系统安装完成后，请重新引导VM，然后转到“ 磁盘”并分离/除去VM磁盘下的cdrom设备。然后单击“运行”以启动VM。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrb8getj30rs090wek.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrc5he7j30s206mdfr.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>15.现在，在Consoles（控制台）下，您可以使用在OS安装期间创建的用户帐户登录来宾OS。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr8ep0jj30qu0il74f.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>步骤5：通过SSH访问虚拟机访客操作系统</p>\n<p>16.要通过SSH从主机网络访问新安装的来宾OS，请运行以下命令（将10.42.0.197替换为来宾的IP地址）。</p>\n<p>$ ssh <a href=\"mailto:tecmint@10.42.0.197\" target=\"_blank\" rel=\"noopener\">tecmint@10.42.0.197</a></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrdqnrej30qj0ent91.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>17.要关闭，重新启动或删除VM，请从VM列表中单击它，然后使用以下屏幕快照中突出显示的按钮。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgre19rij30sy0b2dfw.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>在本文中，介绍了如何安装KVM虚拟化软件包以及如何通过cockpit Web控制台创建和管理VM。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"如何在CentOS-RHEL-8上安装KVM虚拟化\"><a href=\"#如何在CentOS-RHEL-8上安装KVM虚拟化\" class=\"headerlink\" title=\"如何在CentOS/RHEL 8上安装KVM虚拟化\"></a>如何在CentOS/RHEL 8上安装KVM虚拟化</h1><p>基于内核的虚拟机（简称KVM）是一种开源的标准虚拟化解决方案，已紧密集成到Linux中。它是一个可加载的内核模块，将Linux转换为Type-1（裸机）虚拟机管理程序，该虚拟机管理程序创建了用于运行虚拟机（VM）的虚拟操作平台。</p>\n<h3 id=\"精选回答\"><a href=\"#精选回答\" class=\"headerlink\" title=\"精选回答\"></a>精选回答</h3><p>在KVM下，每个VM是一个Linux进程，由内核调度和管理，并具有专用的虚拟化硬件（即CPU，网卡，磁盘等）。它还支持嵌套虚拟化，使您可以在另一个VM内运行一个VM。</p>\n<p>它的一些主要功能包括支持广泛的Linux支持的硬件平台（带有虚拟化扩展的x86硬件（Intel VT或AMD-V）），它使用SELinux和安全虚拟化（sVirt）提供增强的VM安全性和隔离，它继承了内核内存管理功能，并且支持脱机和实时迁移（在物理主机之间迁移正在运行的VM）。</p>\n<p>在本文中，您将学习如何在CentOS 8和RHEL 8 Linux中安装KVM虚拟化，创建和管理虚拟机。</p>\n<p>准备工作：</p>\n<p>全新安装的CentOS 8<a href=\"https://www.a5idc.net/\" target=\"_blank\" rel=\"noopener\">服务器</a></p>\n<p>全新安装的RHEL 8服务器</p>\n<p>在RHEL 8服务器上启用了RedHat订阅</p>\n<p>此外，通过运行以下命令，确保您的硬件平台支持虚拟化。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># grep -e &apos;vmx&apos; /proc/cpuinfo #Intel systems</span><br><span class=\"line\"># grep -e &apos;svm&apos; /proc/cpuinfo #AMD systems</span><br></pre></td></tr></table></figure>\n<p>另外，请确认内核中已加载KVM模块（默认情况下应为KVM模块）。</p>\n<p>＃lsmod | grep kvm</p>\n<p>这是基于英特尔的测试系统上的示例输出：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tp.a5idc.net/wd/1a.png\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>在以前的KVM指南系列中，我们展示了如何使用KVM（基于内核的虚拟机）在Linux中创建虚拟机，并展示了如何使用virt-manager GUI工具（根据RHEL已弃用）创建和管理VM。8个文档）。对于本指南，我们将采用不同的方法，我们将使用Cockpit Web控制台。</p>\n<p>步骤1：在CentOS 8上设置Cockpit Web控制台</p>\n<p>1.在Cockpit是一个易于使用的集成和可扩展的基于Web的界面在网页浏览器来管理Linux服务器。它使您能够执行系统任务，例如配置网络，管理存储，创建VM和使用鼠标检查日志。它使用系统的普通用户登录名和特权，但也支持其他身份验证方法。</p>\n<p>它是预先安装的，并已在新安装的CentOS 8和RHEL 8系统上启用，如果尚未安装，请使用以下dnf命令进行安装。应安装cockpit-machines扩展程序以管理基于Libvirt的 VM 。</p>\n<p># dnf install cockpit cockpit-machines</p>\n<p>2.软件包安装完成后，启动座舱插座，使其在系统启动时自动启动，并检查其状态以确认其已启动并正在运行。</p>\n<p># systemctl start cockpit.socket</p>\n<p># systemctl enable cockpit.socket</p>\n<p># systemctl status cockpit.socket</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr7689tj30p807nwej.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>3.接下来，使用firewall-cmd命令将cockpit服务添加到默认启用的系统防火墙中，然后重新加载防火墙配置以应用新更改。</p>\n<p># firewall-cmd –add-service=cockpit –permanent</p>\n<p># firewall-cmd –reload</p>\n<p>4.要访问CockpitWeb控制台，请打开Web浏览器并使用以下URL进行导航。</p>\n<p><a href=\"https://FQDN:9090/或者https://SERVER_IP:9090/\" target=\"_blank\" rel=\"noopener\">https://FQDN:9090/或者https://SERVER_IP:9090/</a></p>\n<p>该Cockpit采用的是自签名证书启用HTTPS，只需使用该连接，当你在浏览器的警告。在登录页面上，使用您的服务器用户帐户凭据。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrar1fvj30wq0n4glu.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrbov8uj30wq0nldgf.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>步骤2：安装KVM虚拟化CentOS 8</p>\n<p>5.接下来，如下安装虚拟化模块和其他虚拟化软件包。所述的virt安装包提供用于从所述命令行界面进行安装的虚拟机的工具，和一个的virt查看器用于查看虚拟机。</p>\n<p># dnf module install virt</p>\n<p># dnf install virt-install virt-viewer</p>\n<p>6.接下来，运行virt-host-validate命令以验证主机是否设置为运行libvirt系统管理程序驱动程序。</p>\n<p># virt-host-validate</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr7hgijj30o506mt8o.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>7.接下来，启动libvirtd守护程序（libvirtd），并使它在每次引导时自动启动。然后检查其状态以确认它已启动并正在运行。</p>\n<p># systemctl start libvirtd.service</p>\n<p># systemctl enable libvirtd.service</p>\n<p># systemctl status libvirtd.service</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrd3s9zj30vz0bj74i.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>步骤3：通过Cockpit设置网桥（虚拟网络交换机）</p>\n<p>8.现在创建一个网桥（虚拟网络交换机），将虚拟机集成到与主机相同的网络中。默认情况下，一旦启动libvirtd守护程序，它将激活默认网络接口virbr0，该接口代表以NAT模式运行的虚拟网络交换机。</p>\n<p>在本指南中，我们将以桥接模式创建名为br0的网络接口。这将使虚拟机可在主机网络上访问。</p>\n<p>在座舱主界面中，单击“ 网络”，然后单击“ 添加网桥”，如以下屏幕截图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrf0gggj30yd0n8dgd.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>9.从弹出窗口中，输入网桥名称，然后选择网桥从站或端口设备（例如，代表以太网接口的enp2s0），如以下屏幕截图所示。然后单击“ 应用”。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr9t6d6j30ls0dedfu.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>10.现在，当您查看“ 接口 ”列表时，新的网桥应显示在此处，几秒钟后，应禁用以太网接口（关闭）。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgraacb2j30ya0bz3yo.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>步骤4：通过Cockpit Web控制台创建和管理虚拟机</p>\n<p>11.在座舱主界面中，单击“ 虚拟机”选项，如以下屏幕快照中突出显示。在“ 虚拟机”页面上，单击创建虚拟机。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrejb9rj30wm0ckq30.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>12.将显示一个带有用于创建新VM的选项的窗口。输入连接，名称（例如ubuntu18.04），安装源类型（在测试系统上，我们已将ISO映像存储在存储池下，即/ var / lib / libvirt / images /），安装源，存储，大小，内存如下图所示。输入安装源后，应自动选择OS供应商和操作系统。</p>\n<p>还要选中立即启动VM的选项，然后单击“ 创建”。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr9d2jdj30hp0gedg2.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>13.在上一步中单击“ 创建”后，应自动启动VM，并使用提供的ISO映像启动VM。继续安装客户机操作系统（在本例中为Ubuntu 18.04）。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr7y5kjj30wj0hst90.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>如果你点击网络接口的的虚拟机，网络源应注明新建桥网络接口。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr8w9jwj30wm09o74g.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>并且在安装过程中，在配置网络接口的步骤中，您应该能够注意到VM以太网接口从主机网络的DHCP服务器接收IP地址。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrcmjofj30wm0c1q33.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>请注意，您需要安装OpenSSH软件包才能从主机网络上的任何计算机通过SSH访问来宾OS，如上一节所述。</p>\n<p>14.客户机操作系统安装完成后，请重新引导VM，然后转到“ 磁盘”并分离/除去VM磁盘下的cdrom设备。然后单击“运行”以启动VM。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrb8getj30rs090wek.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrc5he7j30s206mdfr.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>15.现在，在Consoles（控制台）下，您可以使用在OS安装期间创建的用户帐户登录来宾OS。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr8ep0jj30qu0il74f.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>步骤5：通过SSH访问虚拟机访客操作系统</p>\n<p>16.要通过SSH从主机网络访问新安装的来宾OS，请运行以下命令（将10.42.0.197替换为来宾的IP地址）。</p>\n<p>$ ssh <a href=\"mailto:tecmint@10.42.0.197\" target=\"_blank\" rel=\"noopener\">tecmint@10.42.0.197</a></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrdqnrej30qj0ent91.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>17.要关闭，重新启动或删除VM，请从VM列表中单击它，然后使用以下屏幕快照中突出显示的按钮。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1girgre19rij30sy0b2dfw.jpg\" alt=\"img\" title=\"\">\n                </div>\n                <div class=\"image-caption\">img</div>\n            </figure>\n<p>在本文中，介绍了如何安装KVM虚拟化软件包以及如何通过cockpit Web控制台创建和管理VM。</p>\n"},{"title":"spring事务实现","date":"2019-08-03T06:40:33.000Z","_content":"\n# 事务概念回顾\n\n> ## 什么是事务？\n\n事务是逻辑上的一组操作，要么都执行，要么都不执行.\n\n> ## 事物的特性（ACID）：\n\n1. **原子性：** 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\n2. **一致性：** 执行事务前后，数据保持一致；\n3. **隔离性：** 并发访问数据库时，一个用户的事物不被其他事物所干扰，各并发事务之间数据库是独立的；\n4. **持久性:**  一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。\n\n# Spring事务管理接口介绍\n\n> ## Spring事务管理接口：\n\n- **PlatformTransactionManager：** （平台）事务管理器\n- **TransactionDefinition：** 事务定义信息(事务隔离级别、传播行为、超时、只读、回滚规则)\n- **TransactionStatus：** 事务运行状态\n\n**所谓事务管理，其实就是“按照给定的事务规则来执行提交或者回滚操作”。**\n\n> ## PlatformTransactionManager接口介绍\n\n**Spring并不直接管理事务，而是提供了多种事务管理器** ，他们将事务管理的职责委托给Hibernate或者JTA等持久化机制所提供的相关平台框架的事务来实现。 Spring事务管理器的接口是： **org.springframework.transaction.PlatformTransactionManager** ，通过这个接口，Spring为各个平台如JDBC、Hibernate等都提供了对应的事务管理器，但是具体的实现就是各个平台自己的事情了。\n\n### PlatformTransactionManager接口代码如下：\n\nPlatformTransactionManager接口中定义了三个方法：\n\n```\nPublic interface PlatformTransactionManager()...{  \n    // Return a currently active transaction or create a new one, according to the specified propagation behavior（根据指定的传播行为，返回当前活动的事务或创建一个新事务。）\n    TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException; \n    // Commit the given transaction, with regard to its status（使用事务目前的状态提交事务）\n    Void commit(TransactionStatus status) throws TransactionException;  \n    // Perform a rollback of the given transaction（对执行的事务进行回滚）\n    Void rollback(TransactionStatus status) throws TransactionException;  \n    } \n复制代码\n```\n\n我们刚刚也说了Spring中PlatformTransactionManager根据不同持久层框架所对应的接口实现类,几个比较常见的如下图所示\n\n![](http://wumu.sciento.cn/img/20190803144836.png)\n\n比如我们在使用JDBC或者iBatis（就是Mybatis）进行数据持久化操作时,我们的xml配置通常如下：\n\n```\n\t<!-- 事务管理器 -->\n\t<bean id=\"transactionManager\"\n\t\tclass=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n\t\t<!-- 数据源 -->\n\t\t<property name=\"dataSource\" ref=\"dataSource\" />\n\t</bean>\n复制代码\n```\n\n> ## TransactionDefinition接口介绍\n\n事务管理器接口 **PlatformTransactionManager** 通过 **getTransaction(TransactionDefinition definition)** 方法来得到一个事务，这个方法里面的参数是 **TransactionDefinition类** ，这个类就定义了一些基本的事务属性。\n\n**那么什么是事务属性呢？**\n\n事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。事务属性包含了5个方面。 \n\n![](http://wumu.sciento.cn/img/20190803144913.png)\n\n\n\n### TransactionDefinition接口中的方法如下：\n\nTransactionDefinition接口中定义了5个方法以及一些表示事务属性的常量比如隔离级别、传播行为等等的常量。\n\n我下面只是列出了TransactionDefinition接口中的方法而没有给出接口中定义的常量，该接口中的常量信息会在后面依次介绍到。\n\n```\npublic interface TransactionDefinition {\n    // 返回事务的传播行为\n    int getPropagationBehavior(); \n    // 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据\n    int getIsolationLevel(); \n    // 返回事务必须在多少秒内完成\n    //返回事务的名字\n    String getName()；\n    int getTimeout();  \n    // 返回是否优化为只读事务。\n    boolean isReadOnly();\n} \n复制代码\n```\n\n### （1）事务隔离级别（定义了一个事务可能受其他并发事务影响的程度）：\n\n我们先来看一下 **并发事务带来的问题** ，然后再来介绍一下 **TransactionDefinition 接口** 中定义了五个表示隔离级别的常量。\n\n> #### 并发事务带来的问题\n\n在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对统一数据进行操作）。并发虽然是必须的，但可能会导致一下的问题。\n\n- **脏读（Dirty read）:** 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。\n\n- **丢失修改（Lost to modify）:** 指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。\n\n  例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\n\n- **不可重复读（Unrepeatableread）:** 指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。\n\n- **幻读（Phantom read）:** 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。\n\n**不可重复度和幻读区别：**\n\n不可重复读的重点是修改，幻读的重点在于新增或者删除。\n\n例1（同样的条件, 你读取过的数据, 再次读取出来发现值不一样了 ）：事务1中的A先生读取自己的工资为     1000的操作还没完成，事务2中的B先生就修改了A的工资为2000，导        致A再读自己的工资时工资变为  2000；这就是不可重复读。\n\n例2（同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\n\n> #### 隔离级别\n\nTransactionDefinition 接口中定义了五个表示隔离级别的常量：\n\n- **TransactionDefinition.ISOLATION_DEFAULT:**\t使用后端数据库默认的隔离级别，Mysql 默认采用的 REPEATABLE_READ隔离级别 Oracle 默认采用的 READ_COMMITTED隔离级别.\n- **TransactionDefinition.ISOLATION_READ_UNCOMMITTED:** 最低的隔离级别，允许读取尚未提交的数据变更，**可能会导致脏读、幻读或不可重复读**\n- **TransactionDefinition.ISOLATION_READ_COMMITTED:** \t允许读取并发事务已经提交的数据，**可以阻止脏读，但是幻读或不可重复读仍有可能发生**\n- **TransactionDefinition.ISOLATION_REPEATABLE_READ:** \t对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，**可以阻止脏读和不可重复读，但幻读仍有可能发生。**\n- **TransactionDefinition.ISOLATION_SERIALIZABLE:** \t最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，**该级别可以防止脏读、不可重复读以及幻读**。但是这将严重影响程序的性能。通常情况下也不会用到该级别。\n\n\n\n### （2）事务传播行为（为了解决业务层方法之间互相调用的事务问题）：\n\n当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：\n\n**支持当前事务的情况：**\n\n- **TransactionDefinition.PROPAGATION_REQUIRED：** 如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。\n- **TransactionDefinition.PROPAGATION_SUPPORTS：** 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。\n- **TransactionDefinition.PROPAGATION_MANDATORY：** 如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）\n\n**不支持当前事务的情况：**\n\n- **TransactionDefinition.PROPAGATION_REQUIRES_NEW：** 创建一个新的事务，如果当前存在事务，则把当前事务挂起。\n- **TransactionDefinition.PROPAGATION_NOT_SUPPORTED：** 以非事务方式运行，如果当前存在事务，则把当前事务挂起。\n- **TransactionDefinition.PROPAGATION_NEVER：** 以非事务方式运行，如果当前存在事务，则抛出异常。\n\n**其他情况：**\n\n- **TransactionDefinition.PROPAGATION_NESTED：** 如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。\n\n这里需要指出的是，前面的六种事务传播行为是 Spring 从 EJB 中引入的，他们共享相同的概念。而 **PROPAGATION_NESTED** 是 Spring 所特有的。以 PROPAGATION_NESTED 启动的事务内嵌于外部事务中（如果存在外部事务的话），此时，内嵌事务并不是一个独立的事务，它依赖于外部事务的存在，只有通过外部的事务提交，才能引起内部事务的提交，嵌套的子事务不能单独提交。如果熟悉 JDBC 中的保存点（SavePoint）的概念，那嵌套事务就很容易理解了，其实嵌套的子事务就是保存点的一个应用，一个事务中可以包括多个保存点，每一个嵌套子事务。另外，外部事务的回滚也会导致嵌套子事务的回滚。\n\n### (3) 事务超时属性(一个事务允许执行的最长时间)\n\n所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。\n\n### (4) 事务只读属性（对事物资源是否执行只读操作）\n\n事务的只读属性是指，对事务性资源进行只读操作或者是读写操作。所谓事务性资源就是指那些被事务管理的资源，比如数据源、 JMS 资源，以及自定义的事务性资源等等。如果确定只对事务性资源进行只读操作，那么我们可以将事务标志为只读的，以提高事务处理的性能。在 TransactionDefinition 中以 boolean 类型来表示该事务是否只读。\n\n### (5) 回滚规则（定义事务回滚规则）\n\n# 例子\n\n## 使用API\n\n下面给出一个基于底层 API 的编程式事务管理的示例， \n基于PlatformTransactionManager、TransactionDefinition 和 TransactionStatus 三个核心接口，我们完全可以通过编程的方式来进行事务管理。\n\n```java\npublic class BankServiceImpl implements BankService {\n    private BankDao bankDao;\n    private TransactionDefinition txDefinition;\n    private PlatformTransactionManager txManager;\n\npublic boolean transfer(Long fromId， Long toId， double amount) {\n    // 获取一个事务\n    TransactionStatus txStatus = txManager.getTransaction(txDefinition);\n    boolean result = false;\n    try {\n        result = bankDao.transfer(fromId， toId， amount);\n        txManager.commit(txStatus);    // 事务提交\n    } catch (Exception e) {\n        result = false;\n        txManager.rollback(txStatus);      // 事务回滚\n        System.out.println(\"Transfer Error!\");\n    }\n    return result;\n}\n相应的配置文件如下所示：\n```\n```xml\n<bean id=\"bankService\" class=\"footmark.spring.core.tx.programmatic.origin.BankServiceImpl\">\n    <property name=\"bankDao\" ref=\"bankDao\"/>\n    <property name=\"txManager\" ref=\"transactionManager\"/>\n    <property name=\"txDefinition\">\n    <bean class=\"org.springframework.transaction.support.DefaultTransactionDefinition\">\n        <property name=\"propagationBehaviorName\" value=\"PROPAGATION_REQUIRED\"/>\n    </bean>\n    </property>\n</bean>如上所示，我们在BankServiceImpl类中增加了两个属性：一个是 TransactionDefinition 类型的属性，它用于定义事务的规则；另一个是 PlatformTransactionManager 类型的属性，用于执行事务管理操作。如果一个业务方法需要添加事务，我们首先需要在方法开始执行前调用PlatformTransactionManager.getTransaction(…) 方法启动一个事务；创建并启动了事务之后，便可以开始编写业务逻辑代码，然后在适当的地方执行事务的提交或者回滚。\n```\n\n## 基于 TransactionTemplate 的编程式事务管理\n\n　　当然，除了可以使用基于底层 API 的编程式事务外，还可以使用基于 TransactionTemplate 的编程式事务管理。通过上面的示例可以发现，上述事务管理的代码散落在业务逻辑代码中，破坏了原有代码的条理性，并且每一个业务方法都包含了类似的启动事务、提交/回滚事务的样板代码。Spring 也意识到了这些，并提供了简化的方法，这就是 Spring 在数据访问层非常常见的 模板回调模式。\n\n```java\npublic class BankServiceImpl implements BankService {\n    private BankDao bankDao;\n    private TransactionTemplate transactionTemplate;\n    ......\n    public boolean transfer(final Long fromId， final Long toId， final double amount) {\n        return (Boolean) transactionTemplate.execute(new TransactionCallback(){\n            public Object doInTransaction(TransactionStatus status) {\n                Object result;\n                try {\n                        result = bankDao.transfer(fromId， toId， amount);\n                    } catch (Exception e) {\n                        status.setRollbackOnly();\n                        result = false;\n                        System.out.println(\"Transfer Error!\");\n                }\n                return result;\n            }\n        });\n    }\n}\n```\n\n相应的配置文件如下所示：\n\n```java\n<bean id=\"bankService\" class=\"footmark.spring.core.tx.programmatic.template.BankServiceImpl\">\n    <property name=\"bankDao\" ref=\"bankDao\"/>\n    <property name=\"transactionTemplate\" ref=\"transactionTemplate\"/>\n</bean>\n```\n\n\nTransactionTemplate 的 execute() 方法有一个 TransactionCallback 类型的参数，该接口中定义了一个 doInTransaction() 方法，通常我们以匿名内部类的方式实现 TransactionCallback 接口，并在其 doInTransaction() 方法中书写业务逻辑代码。这里可以使用默认的事务提交和回滚规则，这样在业务代码中就不需要显式调用任何事务管理的 API。doInTransaction() 方法有一个TransactionStatus 类型的参数，我们可以在方法的任何位置调用该参数的 setRollbackOnly() 方法将事务标识为回滚的，以执行事务回滚。\n\n​    此外，TransactionCallback 接口有一个子接口 TransactionCallbackWithoutResult，该接口中定义了一个 doInTransactionWithoutResult() 方法，TransactionCallbackWithoutResult 接口主要用于事务过程中不需要返回值的情况。当然，对于不需要返回值的情况，我们仍然可以使用 TransactionCallback 接口，并在方法中返回任意值即可。\n\n\n\n## 基于底层 API 的编程式事务管理 \n　　下面给出一个基于底层 API 的编程式事务管理的示例， \n基于PlatformTransactionManager、TransactionDefinition 和 TransactionStatus 三个核心接口，我们完全可以通过编程的方式来进行事务管理。\n\n```java\npublic class BankServiceImpl implements BankService {\n    private BankDao bankDao;\n    private TransactionDefinition txDefinition;\n    private PlatformTransactionManager txManager;\n    public boolean transfer(Long fromId， Long toId， double amount) {\n    // 获取一个事务\n    TransactionStatus txStatus = txManager.getTransaction(txDefinition);\n    boolean result = false;\n    try {\n        result = bankDao.transfer(fromId， toId， amount);\n        txManager.commit(txStatus);    // 事务提交\n    } catch (Exception e) {\n        result = false;\n        txManager.rollback(txStatus);      // 事务回滚\n        System.out.println(\"Transfer Error!\");\n    }\n    return result;\n}\n相应的配置文件如下所示：\n```\n\n```xml\n<bean id=\"bankService\" class=\"footmark.spring.core.tx.programmatic.origin.BankServiceImpl\">\n    <property name=\"bankDao\" ref=\"bankDao\"/>\n    <property name=\"txManager\" ref=\"transactionManager\"/>\n    <property name=\"txDefinition\">\n    <bean class=\"org.springframework.transaction.support.DefaultTransactionDefinition\">\n        <property name=\"propagationBehaviorName\" value=\"PROPAGATION_REQUIRED\"/>\n    </bean>\n    </property>\n</bean>\n```\n\n\n如上所示，我们在BankServiceImpl类中增加了两个属性：一个是 TransactionDefinition 类型的属性，它用于定义事务的规则；另一个是 PlatformTransactionManager 类型的属性，用于执行事务管理操作。如果一个业务方法需要添加事务，我们首先需要在方法开始执行前调用PlatformTransactionManager.getTransaction(…) 方法启动一个事务；创建并启动了事务之后，便可以开始编写业务逻辑代码，然后在适当的地方执行事务的提交或者回滚。\n\n## 基于 TransactionTemplate 的编程式事务管理\n\n　　当然，除了可以使用基于底层 API 的编程式事务外，还可以使用基于 TransactionTemplate 的编程式事务管理。通过上面的示例可以发现，上述事务管理的代码散落在业务逻辑代码中，破坏了原有代码的条理性，并且每一个业务方法都包含了类似的启动事务、提交/回滚事务的样板代码。Spring 也意识到了这些，并提供了简化的方法，这就是 Spring 在数据访问层非常常见的 模板回调模式。\n\n```java\npublic class BankServiceImpl implements BankService {\n    private BankDao bankDao;\n    private TransactionTemplate transactionTemplate;\n    ......\n    public boolean transfer(final Long fromId， final Long toId， final double amount) {\n        return (Boolean) transactionTemplate.execute(new TransactionCallback(){\n            public Object doInTransaction(TransactionStatus status) {\n                Object result;\n                try {\n                        result = bankDao.transfer(fromId， toId， amount);\n                    } catch (Exception e) {\n                        status.setRollbackOnly();\n                        result = false;\n                        System.out.println(\"Transfer Error!\");\n                }\n                return result;\n            }\n        });\n    }\n}\n```\n\n相应的配置文件如下所示：\n\n```xml\n<bean id=\"bankService\" class=\"footmark.spring.core.tx.programmatic.template.BankServiceImpl\">\n    <property name=\"bankDao\" ref=\"bankDao\"/>\n    <property name=\"transactionTemplate\" ref=\"transactionTemplate\"/>\n</bean>\n```\n\n\nTransactionTemplate 的 execute() 方法有一个 TransactionCallback 类型的参数，该接口中定义了一个 doInTransaction() 方法，通常我们以匿名内部类的方式实现 TransactionCallback 接口，并在其 doInTransaction() 方法中书写业务逻辑代码。这里可以使用默认的事务提交和回滚规则，这样在业务代码中就不需要显式调用任何事务管理的 API。doInTransaction() 方法有一个TransactionStatus 类型的参数，我们可以在方法的任何位置调用该参数的 setRollbackOnly() 方法将事务标识为回滚的，以执行事务回滚。\n\n　　此外，TransactionCallback 接口有一个子接口 TransactionCallbackWithoutResult，该接口中定义了一个 doInTransactionWithoutResult() 方法，TransactionCallbackWithoutResult 接口主要用于事务过程中不需要返回值的情况。当然，对于不需要返回值的情况，我们仍然可以使用 TransactionCallback 接口，并在方法中返回任意值即可。\n\n## Spring 声明式事务管理\n　　Spring 的声明式事务管理是建立在 Spring AOP 机制之上的，其本质是对目标方法前后进行拦截，并在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。\n\n　　声明式事务最大的优点就是不需要通过编程的方式管理事务，这样就不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中作相关的事务规则声明（或通过等价的基于标注的方式），便可以将事务规则应用到业务逻辑中。总的来说，声明式事务得益于 Spring IoC容器 和 Spring AOP 机制的支持：IoC容器为声明式事务管理提供了基础设施，使得 Bean 对于 Spring 框架而言是可管理的；而由于事务管理本身就是一个典型的横切逻辑（正是 AOP 的用武之地），因此 Spring AOP 机制是声明式事务管理的直接实现者。\n\n　　显然，声明式事务管理要优于编程式事务管理，这正是spring倡导的非侵入式的开发方式。声明式事务管理使业务代码不受污染，一个普通的POJO对象，只要在XML文件中配置或者添加注解就可以获得完全的事务支持。因此，通常情况下，笔者强烈建议在开发中使用声明式事务，不仅因为其简单，更主要是因为这样使得纯业务代码不被污染，极大方便后期的代码维护。\n\n## 基于 <tx> 命名空间的声明式事务管理 \n\n　　Spring 2.x 引入了 <tx> 命名空间，结合使用 <aop> 命名空间，带给开发人员配置声明式事务的全新体验，配置变得更加简单和灵活。总的来说，开发者只需基于<tx>和<aop>命名空间在XML中进行简答配置便可实现声明式事务管理。下面基于<tx>使用Hibernate事务管理的配置文件：\n\n```xml\n<!-- 配置 DataSourece -->\n<bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\"\n    destroy-method=\"close\">\n    <!-- results in a setDriverClassName(String) call -->\n    <property name=\"driverClassName\">\n        <value>com.mysql.jdbc.Driver</value>\n    </property>\n    <property name=\"url\">\n        <value>jdbc:mysql://localhost:3306/ssh</value>\n    </property>\n    <property name=\"username\">\n        <value>root</value>\n    </property>\n    <property name=\"password\">\n        <value>root</value>\n    </property>\n</bean>\n\n<!-- 配置 sessionFactory -->\n<bean id=\"sessionFactory\"\n    class=\"org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean\">\n    <!-- 数据源的设置 -->\n    <property name=\"dataSource\" ref=\"dataSource\" />\n    <!-- 用于持久化的实体类类列表 -->\n    <property name=\"annotatedClasses\">\n        <list>\n            <value>cn.edu.tju.rico.model.entity.User</value>\n            <value>cn.edu.tju.rico.model.entity.Log</value>\n        </list>\n    </property>\n    <!-- Hibernate 的配置 -->\n    <property name=\"hibernateProperties\">\n        <props>\n            <!-- 方言设置   -->\n            <prop key=\"hibernate.dialect\">org.hibernate.dialect.MySQLDialect</prop>\n            <!-- 显示sql -->\n            <prop key=\"hibernate.show_sql\">true</prop>\n           <!-- 格式化sql -->\n            <prop key=\"hibernate.format_sql\">true</prop>\n            <!-- 自动创建/更新数据表 -->\n            <prop key=\"hibernate.hbm2ddl.auto\">update</prop>\n        </props>\n    </property>\n</bean>\n\n<!-- 配置 TransactionManager -->\n<bean id=\"txManager\"\n    class=\"org.springframework.orm.hibernate3.HibernateTransactionManager\">\n    <property name=\"sessionFactory\" ref=\"sessionFactory\" />\n</bean>\n\n<!-- 配置事务增强处理的切入点，以保证其被恰当的织入 -->    \n<aop:config>\n    <!-- 切点 -->\n    <aop:pointcut expression=\"execution(* cn.edu.tju.rico.service.impl.*.*(..))\"\n        id=\"bussinessService\" />\n    <!-- 声明式事务的切入 -->\n    <aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"bussinessService\" />\n</aop:config>\n\n<!-- 由txAdvice切面定义事务增强处理 -->\n<tx:advice id=\"txAdvice\" transaction-manager=\"txManager\">\n    <tx:attributes>\n        <!-- get打头的方法为只读方法,因此将read-only设为 true -->\n        <tx:method name=\"get*\" read-only=\"true\" />\n        <!-- 其他方法为读写方法,因此将read-only设为 false -->\n        <tx:method name=\"*\" read-only=\"false\" propagation=\"REQUIRED\"\n            isolation=\"DEFAULT\" />\n    </tx:attributes>\n</tx:advice>\n```\n\n 事实上，Spring配置文件中关于事务的配置总是由三个部分组成，即：DataSource、TransactionManager和代理机制三部分，无论哪种配置方式，一般变化的只是代理机制这部分。其中，DataSource、TransactionManager这两部分只是会根据数据访问方式有所变化，比如使用hibernate进行数据访问时，DataSource实际为SessionFactory，TransactionManager的实现为 HibernateTransactionManager。如下图所示：\n\n## 基于 @Transactional 的声明式事务管理\n\n　　除了基于命名空间的事务配置方式，Spring 还引入了基于 Annotation 的方式，具体主要涉及@Transactional 标注。@Transactional 可以作用于接口、接口方法、类以及类方法上：当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性；当作用于方法上时，该标注来覆盖类级别的定义。如下所示：\n\n```java\n@Transactional(propagation = Propagation.REQUIRED)\npublic boolean transfer(Long fromId， Long toId， double amount) {\n    return bankDao.transfer(fromId， toId， amount);\n}\n```\n\n\nSpring 使用 BeanPostProcessor 来处理 Bean 中的标注，因此我们需要在配置文件中作如下声明来激活该后处理 Bean，如下所示：\n\n```java\n<tx:annotation-driven transaction-manager=\"transactionManager”/>\n```\n\n1 与前面相似，transaction-manager、datasource 和 sessionFactory的配置不变，只需将基于<tx>和<aop>命名空间的配置更换为上述配置即可。\n\n## Spring 声明式事务的本质\n\n　　就Spring 声明式事务而言，无论其基于 <tx> 命名空间的实现还是基于 @Transactional 的实现，其本质都是 Spring AOP 机制的应用：即通过以@Transactional的方式或者XML配置文件的方式向业务组件中的目标业务方法插入事务增强处理并生成相应的代理对象供应用程序(客户端)使用从而达到无污染地添加事务的目的。如下图所示：\n\n\n\n# 参考\n\nhttps://juejin.im/post/5b00c52ef265da0b95276091\n\nhttps://blog.csdn.net/justloveyou_/article/details/73733278 \n\n","source":"_posts/java/spring事务实现.md","raw":"---\ntitle: spring事务实现\ndate: 2019-08-03 14:40:33\ntags:\n- java\n- spring\n---\n\n# 事务概念回顾\n\n> ## 什么是事务？\n\n事务是逻辑上的一组操作，要么都执行，要么都不执行.\n\n> ## 事物的特性（ACID）：\n\n1. **原子性：** 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\n2. **一致性：** 执行事务前后，数据保持一致；\n3. **隔离性：** 并发访问数据库时，一个用户的事物不被其他事物所干扰，各并发事务之间数据库是独立的；\n4. **持久性:**  一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。\n\n# Spring事务管理接口介绍\n\n> ## Spring事务管理接口：\n\n- **PlatformTransactionManager：** （平台）事务管理器\n- **TransactionDefinition：** 事务定义信息(事务隔离级别、传播行为、超时、只读、回滚规则)\n- **TransactionStatus：** 事务运行状态\n\n**所谓事务管理，其实就是“按照给定的事务规则来执行提交或者回滚操作”。**\n\n> ## PlatformTransactionManager接口介绍\n\n**Spring并不直接管理事务，而是提供了多种事务管理器** ，他们将事务管理的职责委托给Hibernate或者JTA等持久化机制所提供的相关平台框架的事务来实现。 Spring事务管理器的接口是： **org.springframework.transaction.PlatformTransactionManager** ，通过这个接口，Spring为各个平台如JDBC、Hibernate等都提供了对应的事务管理器，但是具体的实现就是各个平台自己的事情了。\n\n### PlatformTransactionManager接口代码如下：\n\nPlatformTransactionManager接口中定义了三个方法：\n\n```\nPublic interface PlatformTransactionManager()...{  \n    // Return a currently active transaction or create a new one, according to the specified propagation behavior（根据指定的传播行为，返回当前活动的事务或创建一个新事务。）\n    TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException; \n    // Commit the given transaction, with regard to its status（使用事务目前的状态提交事务）\n    Void commit(TransactionStatus status) throws TransactionException;  \n    // Perform a rollback of the given transaction（对执行的事务进行回滚）\n    Void rollback(TransactionStatus status) throws TransactionException;  \n    } \n复制代码\n```\n\n我们刚刚也说了Spring中PlatformTransactionManager根据不同持久层框架所对应的接口实现类,几个比较常见的如下图所示\n\n![](http://wumu.sciento.cn/img/20190803144836.png)\n\n比如我们在使用JDBC或者iBatis（就是Mybatis）进行数据持久化操作时,我们的xml配置通常如下：\n\n```\n\t<!-- 事务管理器 -->\n\t<bean id=\"transactionManager\"\n\t\tclass=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n\t\t<!-- 数据源 -->\n\t\t<property name=\"dataSource\" ref=\"dataSource\" />\n\t</bean>\n复制代码\n```\n\n> ## TransactionDefinition接口介绍\n\n事务管理器接口 **PlatformTransactionManager** 通过 **getTransaction(TransactionDefinition definition)** 方法来得到一个事务，这个方法里面的参数是 **TransactionDefinition类** ，这个类就定义了一些基本的事务属性。\n\n**那么什么是事务属性呢？**\n\n事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。事务属性包含了5个方面。 \n\n![](http://wumu.sciento.cn/img/20190803144913.png)\n\n\n\n### TransactionDefinition接口中的方法如下：\n\nTransactionDefinition接口中定义了5个方法以及一些表示事务属性的常量比如隔离级别、传播行为等等的常量。\n\n我下面只是列出了TransactionDefinition接口中的方法而没有给出接口中定义的常量，该接口中的常量信息会在后面依次介绍到。\n\n```\npublic interface TransactionDefinition {\n    // 返回事务的传播行为\n    int getPropagationBehavior(); \n    // 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据\n    int getIsolationLevel(); \n    // 返回事务必须在多少秒内完成\n    //返回事务的名字\n    String getName()；\n    int getTimeout();  \n    // 返回是否优化为只读事务。\n    boolean isReadOnly();\n} \n复制代码\n```\n\n### （1）事务隔离级别（定义了一个事务可能受其他并发事务影响的程度）：\n\n我们先来看一下 **并发事务带来的问题** ，然后再来介绍一下 **TransactionDefinition 接口** 中定义了五个表示隔离级别的常量。\n\n> #### 并发事务带来的问题\n\n在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对统一数据进行操作）。并发虽然是必须的，但可能会导致一下的问题。\n\n- **脏读（Dirty read）:** 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。\n\n- **丢失修改（Lost to modify）:** 指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。\n\n  例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。\n\n- **不可重复读（Unrepeatableread）:** 指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。\n\n- **幻读（Phantom read）:** 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。\n\n**不可重复度和幻读区别：**\n\n不可重复读的重点是修改，幻读的重点在于新增或者删除。\n\n例1（同样的条件, 你读取过的数据, 再次读取出来发现值不一样了 ）：事务1中的A先生读取自己的工资为     1000的操作还没完成，事务2中的B先生就修改了A的工资为2000，导        致A再读自己的工资时工资变为  2000；这就是不可重复读。\n\n例2（同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。\n\n> #### 隔离级别\n\nTransactionDefinition 接口中定义了五个表示隔离级别的常量：\n\n- **TransactionDefinition.ISOLATION_DEFAULT:**\t使用后端数据库默认的隔离级别，Mysql 默认采用的 REPEATABLE_READ隔离级别 Oracle 默认采用的 READ_COMMITTED隔离级别.\n- **TransactionDefinition.ISOLATION_READ_UNCOMMITTED:** 最低的隔离级别，允许读取尚未提交的数据变更，**可能会导致脏读、幻读或不可重复读**\n- **TransactionDefinition.ISOLATION_READ_COMMITTED:** \t允许读取并发事务已经提交的数据，**可以阻止脏读，但是幻读或不可重复读仍有可能发生**\n- **TransactionDefinition.ISOLATION_REPEATABLE_READ:** \t对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，**可以阻止脏读和不可重复读，但幻读仍有可能发生。**\n- **TransactionDefinition.ISOLATION_SERIALIZABLE:** \t最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，**该级别可以防止脏读、不可重复读以及幻读**。但是这将严重影响程序的性能。通常情况下也不会用到该级别。\n\n\n\n### （2）事务传播行为（为了解决业务层方法之间互相调用的事务问题）：\n\n当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：\n\n**支持当前事务的情况：**\n\n- **TransactionDefinition.PROPAGATION_REQUIRED：** 如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。\n- **TransactionDefinition.PROPAGATION_SUPPORTS：** 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。\n- **TransactionDefinition.PROPAGATION_MANDATORY：** 如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）\n\n**不支持当前事务的情况：**\n\n- **TransactionDefinition.PROPAGATION_REQUIRES_NEW：** 创建一个新的事务，如果当前存在事务，则把当前事务挂起。\n- **TransactionDefinition.PROPAGATION_NOT_SUPPORTED：** 以非事务方式运行，如果当前存在事务，则把当前事务挂起。\n- **TransactionDefinition.PROPAGATION_NEVER：** 以非事务方式运行，如果当前存在事务，则抛出异常。\n\n**其他情况：**\n\n- **TransactionDefinition.PROPAGATION_NESTED：** 如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。\n\n这里需要指出的是，前面的六种事务传播行为是 Spring 从 EJB 中引入的，他们共享相同的概念。而 **PROPAGATION_NESTED** 是 Spring 所特有的。以 PROPAGATION_NESTED 启动的事务内嵌于外部事务中（如果存在外部事务的话），此时，内嵌事务并不是一个独立的事务，它依赖于外部事务的存在，只有通过外部的事务提交，才能引起内部事务的提交，嵌套的子事务不能单独提交。如果熟悉 JDBC 中的保存点（SavePoint）的概念，那嵌套事务就很容易理解了，其实嵌套的子事务就是保存点的一个应用，一个事务中可以包括多个保存点，每一个嵌套子事务。另外，外部事务的回滚也会导致嵌套子事务的回滚。\n\n### (3) 事务超时属性(一个事务允许执行的最长时间)\n\n所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。\n\n### (4) 事务只读属性（对事物资源是否执行只读操作）\n\n事务的只读属性是指，对事务性资源进行只读操作或者是读写操作。所谓事务性资源就是指那些被事务管理的资源，比如数据源、 JMS 资源，以及自定义的事务性资源等等。如果确定只对事务性资源进行只读操作，那么我们可以将事务标志为只读的，以提高事务处理的性能。在 TransactionDefinition 中以 boolean 类型来表示该事务是否只读。\n\n### (5) 回滚规则（定义事务回滚规则）\n\n# 例子\n\n## 使用API\n\n下面给出一个基于底层 API 的编程式事务管理的示例， \n基于PlatformTransactionManager、TransactionDefinition 和 TransactionStatus 三个核心接口，我们完全可以通过编程的方式来进行事务管理。\n\n```java\npublic class BankServiceImpl implements BankService {\n    private BankDao bankDao;\n    private TransactionDefinition txDefinition;\n    private PlatformTransactionManager txManager;\n\npublic boolean transfer(Long fromId， Long toId， double amount) {\n    // 获取一个事务\n    TransactionStatus txStatus = txManager.getTransaction(txDefinition);\n    boolean result = false;\n    try {\n        result = bankDao.transfer(fromId， toId， amount);\n        txManager.commit(txStatus);    // 事务提交\n    } catch (Exception e) {\n        result = false;\n        txManager.rollback(txStatus);      // 事务回滚\n        System.out.println(\"Transfer Error!\");\n    }\n    return result;\n}\n相应的配置文件如下所示：\n```\n```xml\n<bean id=\"bankService\" class=\"footmark.spring.core.tx.programmatic.origin.BankServiceImpl\">\n    <property name=\"bankDao\" ref=\"bankDao\"/>\n    <property name=\"txManager\" ref=\"transactionManager\"/>\n    <property name=\"txDefinition\">\n    <bean class=\"org.springframework.transaction.support.DefaultTransactionDefinition\">\n        <property name=\"propagationBehaviorName\" value=\"PROPAGATION_REQUIRED\"/>\n    </bean>\n    </property>\n</bean>如上所示，我们在BankServiceImpl类中增加了两个属性：一个是 TransactionDefinition 类型的属性，它用于定义事务的规则；另一个是 PlatformTransactionManager 类型的属性，用于执行事务管理操作。如果一个业务方法需要添加事务，我们首先需要在方法开始执行前调用PlatformTransactionManager.getTransaction(…) 方法启动一个事务；创建并启动了事务之后，便可以开始编写业务逻辑代码，然后在适当的地方执行事务的提交或者回滚。\n```\n\n## 基于 TransactionTemplate 的编程式事务管理\n\n　　当然，除了可以使用基于底层 API 的编程式事务外，还可以使用基于 TransactionTemplate 的编程式事务管理。通过上面的示例可以发现，上述事务管理的代码散落在业务逻辑代码中，破坏了原有代码的条理性，并且每一个业务方法都包含了类似的启动事务、提交/回滚事务的样板代码。Spring 也意识到了这些，并提供了简化的方法，这就是 Spring 在数据访问层非常常见的 模板回调模式。\n\n```java\npublic class BankServiceImpl implements BankService {\n    private BankDao bankDao;\n    private TransactionTemplate transactionTemplate;\n    ......\n    public boolean transfer(final Long fromId， final Long toId， final double amount) {\n        return (Boolean) transactionTemplate.execute(new TransactionCallback(){\n            public Object doInTransaction(TransactionStatus status) {\n                Object result;\n                try {\n                        result = bankDao.transfer(fromId， toId， amount);\n                    } catch (Exception e) {\n                        status.setRollbackOnly();\n                        result = false;\n                        System.out.println(\"Transfer Error!\");\n                }\n                return result;\n            }\n        });\n    }\n}\n```\n\n相应的配置文件如下所示：\n\n```java\n<bean id=\"bankService\" class=\"footmark.spring.core.tx.programmatic.template.BankServiceImpl\">\n    <property name=\"bankDao\" ref=\"bankDao\"/>\n    <property name=\"transactionTemplate\" ref=\"transactionTemplate\"/>\n</bean>\n```\n\n\nTransactionTemplate 的 execute() 方法有一个 TransactionCallback 类型的参数，该接口中定义了一个 doInTransaction() 方法，通常我们以匿名内部类的方式实现 TransactionCallback 接口，并在其 doInTransaction() 方法中书写业务逻辑代码。这里可以使用默认的事务提交和回滚规则，这样在业务代码中就不需要显式调用任何事务管理的 API。doInTransaction() 方法有一个TransactionStatus 类型的参数，我们可以在方法的任何位置调用该参数的 setRollbackOnly() 方法将事务标识为回滚的，以执行事务回滚。\n\n​    此外，TransactionCallback 接口有一个子接口 TransactionCallbackWithoutResult，该接口中定义了一个 doInTransactionWithoutResult() 方法，TransactionCallbackWithoutResult 接口主要用于事务过程中不需要返回值的情况。当然，对于不需要返回值的情况，我们仍然可以使用 TransactionCallback 接口，并在方法中返回任意值即可。\n\n\n\n## 基于底层 API 的编程式事务管理 \n　　下面给出一个基于底层 API 的编程式事务管理的示例， \n基于PlatformTransactionManager、TransactionDefinition 和 TransactionStatus 三个核心接口，我们完全可以通过编程的方式来进行事务管理。\n\n```java\npublic class BankServiceImpl implements BankService {\n    private BankDao bankDao;\n    private TransactionDefinition txDefinition;\n    private PlatformTransactionManager txManager;\n    public boolean transfer(Long fromId， Long toId， double amount) {\n    // 获取一个事务\n    TransactionStatus txStatus = txManager.getTransaction(txDefinition);\n    boolean result = false;\n    try {\n        result = bankDao.transfer(fromId， toId， amount);\n        txManager.commit(txStatus);    // 事务提交\n    } catch (Exception e) {\n        result = false;\n        txManager.rollback(txStatus);      // 事务回滚\n        System.out.println(\"Transfer Error!\");\n    }\n    return result;\n}\n相应的配置文件如下所示：\n```\n\n```xml\n<bean id=\"bankService\" class=\"footmark.spring.core.tx.programmatic.origin.BankServiceImpl\">\n    <property name=\"bankDao\" ref=\"bankDao\"/>\n    <property name=\"txManager\" ref=\"transactionManager\"/>\n    <property name=\"txDefinition\">\n    <bean class=\"org.springframework.transaction.support.DefaultTransactionDefinition\">\n        <property name=\"propagationBehaviorName\" value=\"PROPAGATION_REQUIRED\"/>\n    </bean>\n    </property>\n</bean>\n```\n\n\n如上所示，我们在BankServiceImpl类中增加了两个属性：一个是 TransactionDefinition 类型的属性，它用于定义事务的规则；另一个是 PlatformTransactionManager 类型的属性，用于执行事务管理操作。如果一个业务方法需要添加事务，我们首先需要在方法开始执行前调用PlatformTransactionManager.getTransaction(…) 方法启动一个事务；创建并启动了事务之后，便可以开始编写业务逻辑代码，然后在适当的地方执行事务的提交或者回滚。\n\n## 基于 TransactionTemplate 的编程式事务管理\n\n　　当然，除了可以使用基于底层 API 的编程式事务外，还可以使用基于 TransactionTemplate 的编程式事务管理。通过上面的示例可以发现，上述事务管理的代码散落在业务逻辑代码中，破坏了原有代码的条理性，并且每一个业务方法都包含了类似的启动事务、提交/回滚事务的样板代码。Spring 也意识到了这些，并提供了简化的方法，这就是 Spring 在数据访问层非常常见的 模板回调模式。\n\n```java\npublic class BankServiceImpl implements BankService {\n    private BankDao bankDao;\n    private TransactionTemplate transactionTemplate;\n    ......\n    public boolean transfer(final Long fromId， final Long toId， final double amount) {\n        return (Boolean) transactionTemplate.execute(new TransactionCallback(){\n            public Object doInTransaction(TransactionStatus status) {\n                Object result;\n                try {\n                        result = bankDao.transfer(fromId， toId， amount);\n                    } catch (Exception e) {\n                        status.setRollbackOnly();\n                        result = false;\n                        System.out.println(\"Transfer Error!\");\n                }\n                return result;\n            }\n        });\n    }\n}\n```\n\n相应的配置文件如下所示：\n\n```xml\n<bean id=\"bankService\" class=\"footmark.spring.core.tx.programmatic.template.BankServiceImpl\">\n    <property name=\"bankDao\" ref=\"bankDao\"/>\n    <property name=\"transactionTemplate\" ref=\"transactionTemplate\"/>\n</bean>\n```\n\n\nTransactionTemplate 的 execute() 方法有一个 TransactionCallback 类型的参数，该接口中定义了一个 doInTransaction() 方法，通常我们以匿名内部类的方式实现 TransactionCallback 接口，并在其 doInTransaction() 方法中书写业务逻辑代码。这里可以使用默认的事务提交和回滚规则，这样在业务代码中就不需要显式调用任何事务管理的 API。doInTransaction() 方法有一个TransactionStatus 类型的参数，我们可以在方法的任何位置调用该参数的 setRollbackOnly() 方法将事务标识为回滚的，以执行事务回滚。\n\n　　此外，TransactionCallback 接口有一个子接口 TransactionCallbackWithoutResult，该接口中定义了一个 doInTransactionWithoutResult() 方法，TransactionCallbackWithoutResult 接口主要用于事务过程中不需要返回值的情况。当然，对于不需要返回值的情况，我们仍然可以使用 TransactionCallback 接口，并在方法中返回任意值即可。\n\n## Spring 声明式事务管理\n　　Spring 的声明式事务管理是建立在 Spring AOP 机制之上的，其本质是对目标方法前后进行拦截，并在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。\n\n　　声明式事务最大的优点就是不需要通过编程的方式管理事务，这样就不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中作相关的事务规则声明（或通过等价的基于标注的方式），便可以将事务规则应用到业务逻辑中。总的来说，声明式事务得益于 Spring IoC容器 和 Spring AOP 机制的支持：IoC容器为声明式事务管理提供了基础设施，使得 Bean 对于 Spring 框架而言是可管理的；而由于事务管理本身就是一个典型的横切逻辑（正是 AOP 的用武之地），因此 Spring AOP 机制是声明式事务管理的直接实现者。\n\n　　显然，声明式事务管理要优于编程式事务管理，这正是spring倡导的非侵入式的开发方式。声明式事务管理使业务代码不受污染，一个普通的POJO对象，只要在XML文件中配置或者添加注解就可以获得完全的事务支持。因此，通常情况下，笔者强烈建议在开发中使用声明式事务，不仅因为其简单，更主要是因为这样使得纯业务代码不被污染，极大方便后期的代码维护。\n\n## 基于 <tx> 命名空间的声明式事务管理 \n\n　　Spring 2.x 引入了 <tx> 命名空间，结合使用 <aop> 命名空间，带给开发人员配置声明式事务的全新体验，配置变得更加简单和灵活。总的来说，开发者只需基于<tx>和<aop>命名空间在XML中进行简答配置便可实现声明式事务管理。下面基于<tx>使用Hibernate事务管理的配置文件：\n\n```xml\n<!-- 配置 DataSourece -->\n<bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\"\n    destroy-method=\"close\">\n    <!-- results in a setDriverClassName(String) call -->\n    <property name=\"driverClassName\">\n        <value>com.mysql.jdbc.Driver</value>\n    </property>\n    <property name=\"url\">\n        <value>jdbc:mysql://localhost:3306/ssh</value>\n    </property>\n    <property name=\"username\">\n        <value>root</value>\n    </property>\n    <property name=\"password\">\n        <value>root</value>\n    </property>\n</bean>\n\n<!-- 配置 sessionFactory -->\n<bean id=\"sessionFactory\"\n    class=\"org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean\">\n    <!-- 数据源的设置 -->\n    <property name=\"dataSource\" ref=\"dataSource\" />\n    <!-- 用于持久化的实体类类列表 -->\n    <property name=\"annotatedClasses\">\n        <list>\n            <value>cn.edu.tju.rico.model.entity.User</value>\n            <value>cn.edu.tju.rico.model.entity.Log</value>\n        </list>\n    </property>\n    <!-- Hibernate 的配置 -->\n    <property name=\"hibernateProperties\">\n        <props>\n            <!-- 方言设置   -->\n            <prop key=\"hibernate.dialect\">org.hibernate.dialect.MySQLDialect</prop>\n            <!-- 显示sql -->\n            <prop key=\"hibernate.show_sql\">true</prop>\n           <!-- 格式化sql -->\n            <prop key=\"hibernate.format_sql\">true</prop>\n            <!-- 自动创建/更新数据表 -->\n            <prop key=\"hibernate.hbm2ddl.auto\">update</prop>\n        </props>\n    </property>\n</bean>\n\n<!-- 配置 TransactionManager -->\n<bean id=\"txManager\"\n    class=\"org.springframework.orm.hibernate3.HibernateTransactionManager\">\n    <property name=\"sessionFactory\" ref=\"sessionFactory\" />\n</bean>\n\n<!-- 配置事务增强处理的切入点，以保证其被恰当的织入 -->    \n<aop:config>\n    <!-- 切点 -->\n    <aop:pointcut expression=\"execution(* cn.edu.tju.rico.service.impl.*.*(..))\"\n        id=\"bussinessService\" />\n    <!-- 声明式事务的切入 -->\n    <aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"bussinessService\" />\n</aop:config>\n\n<!-- 由txAdvice切面定义事务增强处理 -->\n<tx:advice id=\"txAdvice\" transaction-manager=\"txManager\">\n    <tx:attributes>\n        <!-- get打头的方法为只读方法,因此将read-only设为 true -->\n        <tx:method name=\"get*\" read-only=\"true\" />\n        <!-- 其他方法为读写方法,因此将read-only设为 false -->\n        <tx:method name=\"*\" read-only=\"false\" propagation=\"REQUIRED\"\n            isolation=\"DEFAULT\" />\n    </tx:attributes>\n</tx:advice>\n```\n\n 事实上，Spring配置文件中关于事务的配置总是由三个部分组成，即：DataSource、TransactionManager和代理机制三部分，无论哪种配置方式，一般变化的只是代理机制这部分。其中，DataSource、TransactionManager这两部分只是会根据数据访问方式有所变化，比如使用hibernate进行数据访问时，DataSource实际为SessionFactory，TransactionManager的实现为 HibernateTransactionManager。如下图所示：\n\n## 基于 @Transactional 的声明式事务管理\n\n　　除了基于命名空间的事务配置方式，Spring 还引入了基于 Annotation 的方式，具体主要涉及@Transactional 标注。@Transactional 可以作用于接口、接口方法、类以及类方法上：当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性；当作用于方法上时，该标注来覆盖类级别的定义。如下所示：\n\n```java\n@Transactional(propagation = Propagation.REQUIRED)\npublic boolean transfer(Long fromId， Long toId， double amount) {\n    return bankDao.transfer(fromId， toId， amount);\n}\n```\n\n\nSpring 使用 BeanPostProcessor 来处理 Bean 中的标注，因此我们需要在配置文件中作如下声明来激活该后处理 Bean，如下所示：\n\n```java\n<tx:annotation-driven transaction-manager=\"transactionManager”/>\n```\n\n1 与前面相似，transaction-manager、datasource 和 sessionFactory的配置不变，只需将基于<tx>和<aop>命名空间的配置更换为上述配置即可。\n\n## Spring 声明式事务的本质\n\n　　就Spring 声明式事务而言，无论其基于 <tx> 命名空间的实现还是基于 @Transactional 的实现，其本质都是 Spring AOP 机制的应用：即通过以@Transactional的方式或者XML配置文件的方式向业务组件中的目标业务方法插入事务增强处理并生成相应的代理对象供应用程序(客户端)使用从而达到无污染地添加事务的目的。如下图所示：\n\n\n\n# 参考\n\nhttps://juejin.im/post/5b00c52ef265da0b95276091\n\nhttps://blog.csdn.net/justloveyou_/article/details/73733278 \n\n","slug":"java/spring事务实现","published":1,"updated":"2019-09-01T12:22:36.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblpd00764tjeanagmrvy","content":"<h1 id=\"事务概念回顾\"><a href=\"#事务概念回顾\" class=\"headerlink\" title=\"事务概念回顾\"></a>事务概念回顾</h1><blockquote>\n<h2 id=\"什么是事务？\"><a href=\"#什么是事务？\" class=\"headerlink\" title=\"什么是事务？\"></a>什么是事务？</h2></blockquote>\n<p>事务是逻辑上的一组操作，要么都执行，要么都不执行.</p>\n<blockquote>\n<h2 id=\"事物的特性（ACID）：\"><a href=\"#事物的特性（ACID）：\" class=\"headerlink\" title=\"事物的特性（ACID）：\"></a>事物的特性（ACID）：</h2></blockquote>\n<ol>\n<li><strong>原子性：</strong> 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</li>\n<li><strong>一致性：</strong> 执行事务前后，数据保持一致；</li>\n<li><strong>隔离性：</strong> 并发访问数据库时，一个用户的事物不被其他事物所干扰，各并发事务之间数据库是独立的；</li>\n<li><strong>持久性:</strong>  一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</li>\n</ol>\n<h1 id=\"Spring事务管理接口介绍\"><a href=\"#Spring事务管理接口介绍\" class=\"headerlink\" title=\"Spring事务管理接口介绍\"></a>Spring事务管理接口介绍</h1><blockquote>\n<h2 id=\"Spring事务管理接口：\"><a href=\"#Spring事务管理接口：\" class=\"headerlink\" title=\"Spring事务管理接口：\"></a>Spring事务管理接口：</h2></blockquote>\n<ul>\n<li><strong>PlatformTransactionManager：</strong> （平台）事务管理器</li>\n<li><strong>TransactionDefinition：</strong> 事务定义信息(事务隔离级别、传播行为、超时、只读、回滚规则)</li>\n<li><strong>TransactionStatus：</strong> 事务运行状态</li>\n</ul>\n<p><strong>所谓事务管理，其实就是“按照给定的事务规则来执行提交或者回滚操作”。</strong></p>\n<blockquote>\n<h2 id=\"PlatformTransactionManager接口介绍\"><a href=\"#PlatformTransactionManager接口介绍\" class=\"headerlink\" title=\"PlatformTransactionManager接口介绍\"></a>PlatformTransactionManager接口介绍</h2></blockquote>\n<p><strong>Spring并不直接管理事务，而是提供了多种事务管理器</strong> ，他们将事务管理的职责委托给Hibernate或者JTA等持久化机制所提供的相关平台框架的事务来实现。 Spring事务管理器的接口是： <strong>org.springframework.transaction.PlatformTransactionManager</strong> ，通过这个接口，Spring为各个平台如JDBC、Hibernate等都提供了对应的事务管理器，但是具体的实现就是各个平台自己的事情了。</p>\n<h3 id=\"PlatformTransactionManager接口代码如下：\"><a href=\"#PlatformTransactionManager接口代码如下：\" class=\"headerlink\" title=\"PlatformTransactionManager接口代码如下：\"></a>PlatformTransactionManager接口代码如下：</h3><p>PlatformTransactionManager接口中定义了三个方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Public interface PlatformTransactionManager()...&#123;  </span><br><span class=\"line\">    // Return a currently active transaction or create a new one, according to the specified propagation behavior（根据指定的传播行为，返回当前活动的事务或创建一个新事务。）</span><br><span class=\"line\">    TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException; </span><br><span class=\"line\">    // Commit the given transaction, with regard to its status（使用事务目前的状态提交事务）</span><br><span class=\"line\">    Void commit(TransactionStatus status) throws TransactionException;  </span><br><span class=\"line\">    // Perform a rollback of the given transaction（对执行的事务进行回滚）</span><br><span class=\"line\">    Void rollback(TransactionStatus status) throws TransactionException;  </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>我们刚刚也说了Spring中PlatformTransactionManager根据不同持久层框架所对应的接口实现类,几个比较常见的如下图所示</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://wumu.sciento.cn/img/20190803144836.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>比如我们在使用JDBC或者iBatis（就是Mybatis）进行数据持久化操作时,我们的xml配置通常如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t&lt;!-- 事务管理器 --&gt;</span><br><span class=\"line\">\t&lt;bean id=&quot;transactionManager&quot;</span><br><span class=\"line\">\t\tclass=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class=\"line\">\t\t&lt;!-- 数据源 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h2 id=\"TransactionDefinition接口介绍\"><a href=\"#TransactionDefinition接口介绍\" class=\"headerlink\" title=\"TransactionDefinition接口介绍\"></a>TransactionDefinition接口介绍</h2></blockquote>\n<p>事务管理器接口 <strong>PlatformTransactionManager</strong> 通过 <strong>getTransaction(TransactionDefinition definition)</strong> 方法来得到一个事务，这个方法里面的参数是 <strong>TransactionDefinition类</strong> ，这个类就定义了一些基本的事务属性。</p>\n<p><strong>那么什么是事务属性呢？</strong></p>\n<p>事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。事务属性包含了5个方面。 </p>\n<p><img src=\"http://wumu.sciento.cn/img/20190803144913.png\" alt=\"\"></p>\n<h3 id=\"TransactionDefinition接口中的方法如下：\"><a href=\"#TransactionDefinition接口中的方法如下：\" class=\"headerlink\" title=\"TransactionDefinition接口中的方法如下：\"></a>TransactionDefinition接口中的方法如下：</h3><p>TransactionDefinition接口中定义了5个方法以及一些表示事务属性的常量比如隔离级别、传播行为等等的常量。</p>\n<p>我下面只是列出了TransactionDefinition接口中的方法而没有给出接口中定义的常量，该接口中的常量信息会在后面依次介绍到。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface TransactionDefinition &#123;</span><br><span class=\"line\">    // 返回事务的传播行为</span><br><span class=\"line\">    int getPropagationBehavior(); </span><br><span class=\"line\">    // 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据</span><br><span class=\"line\">    int getIsolationLevel(); </span><br><span class=\"line\">    // 返回事务必须在多少秒内完成</span><br><span class=\"line\">    //返回事务的名字</span><br><span class=\"line\">    String getName()；</span><br><span class=\"line\">    int getTimeout();  </span><br><span class=\"line\">    // 返回是否优化为只读事务。</span><br><span class=\"line\">    boolean isReadOnly();</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<h3 id=\"（1）事务隔离级别（定义了一个事务可能受其他并发事务影响的程度）：\"><a href=\"#（1）事务隔离级别（定义了一个事务可能受其他并发事务影响的程度）：\" class=\"headerlink\" title=\"（1）事务隔离级别（定义了一个事务可能受其他并发事务影响的程度）：\"></a>（1）事务隔离级别（定义了一个事务可能受其他并发事务影响的程度）：</h3><p>我们先来看一下 <strong>并发事务带来的问题</strong> ，然后再来介绍一下 <strong>TransactionDefinition 接口</strong> 中定义了五个表示隔离级别的常量。</p>\n<blockquote>\n<h4 id=\"并发事务带来的问题\"><a href=\"#并发事务带来的问题\" class=\"headerlink\" title=\"并发事务带来的问题\"></a>并发事务带来的问题</h4></blockquote>\n<p>在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对统一数据进行操作）。并发虽然是必须的，但可能会导致一下的问题。</p>\n<ul>\n<li><p><strong>脏读（Dirty read）:</strong> 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。</p>\n</li>\n<li><p><strong>丢失修改（Lost to modify）:</strong> 指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。</p>\n<p>例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。</p>\n</li>\n<li><p><strong>不可重复读（Unrepeatableread）:</strong> 指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</p>\n</li>\n<li><p><strong>幻读（Phantom read）:</strong> 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</p>\n</li>\n</ul>\n<p><strong>不可重复度和幻读区别：</strong></p>\n<p>不可重复读的重点是修改，幻读的重点在于新增或者删除。</p>\n<p>例1（同样的条件, 你读取过的数据, 再次读取出来发现值不一样了 ）：事务1中的A先生读取自己的工资为     1000的操作还没完成，事务2中的B先生就修改了A的工资为2000，导        致A再读自己的工资时工资变为  2000；这就是不可重复读。</p>\n<p>例2（同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。</p>\n<blockquote>\n<h4 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h4></blockquote>\n<p>TransactionDefinition 接口中定义了五个表示隔离级别的常量：</p>\n<ul>\n<li><strong>TransactionDefinition.ISOLATION_DEFAULT:</strong>    使用后端数据库默认的隔离级别，Mysql 默认采用的 REPEATABLE_READ隔离级别 Oracle 默认采用的 READ_COMMITTED隔离级别.</li>\n<li><strong>TransactionDefinition.ISOLATION_READ_UNCOMMITTED:</strong> 最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能会导致脏读、幻读或不可重复读</strong></li>\n<li><strong>TransactionDefinition.ISOLATION_READ_COMMITTED:</strong>     允许读取并发事务已经提交的数据，<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong></li>\n<li><strong>TransactionDefinition.ISOLATION_REPEATABLE_READ:</strong>     对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生。</strong></li>\n<li><strong>TransactionDefinition.ISOLATION_SERIALIZABLE:</strong>     最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读</strong>。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</li>\n</ul>\n<h3 id=\"（2）事务传播行为（为了解决业务层方法之间互相调用的事务问题）：\"><a href=\"#（2）事务传播行为（为了解决业务层方法之间互相调用的事务问题）：\" class=\"headerlink\" title=\"（2）事务传播行为（为了解决业务层方法之间互相调用的事务问题）：\"></a>（2）事务传播行为（为了解决业务层方法之间互相调用的事务问题）：</h3><p>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：</p>\n<p><strong>支持当前事务的情况：</strong></p>\n<ul>\n<li><strong>TransactionDefinition.PROPAGATION_REQUIRED：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li>\n<li><strong>TransactionDefinition.PROPAGATION_SUPPORTS：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li>\n<li><strong>TransactionDefinition.PROPAGATION_MANDATORY：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）</li>\n</ul>\n<p><strong>不支持当前事务的情况：</strong></p>\n<ul>\n<li><strong>TransactionDefinition.PROPAGATION_REQUIRES_NEW：</strong> 创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li>\n<li><strong>TransactionDefinition.PROPAGATION_NOT_SUPPORTED：</strong> 以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li>\n<li><strong>TransactionDefinition.PROPAGATION_NEVER：</strong> 以非事务方式运行，如果当前存在事务，则抛出异常。</li>\n</ul>\n<p><strong>其他情况：</strong></p>\n<ul>\n<li><strong>TransactionDefinition.PROPAGATION_NESTED：</strong> 如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</li>\n</ul>\n<p>这里需要指出的是，前面的六种事务传播行为是 Spring 从 EJB 中引入的，他们共享相同的概念。而 <strong>PROPAGATION_NESTED</strong> 是 Spring 所特有的。以 PROPAGATION_NESTED 启动的事务内嵌于外部事务中（如果存在外部事务的话），此时，内嵌事务并不是一个独立的事务，它依赖于外部事务的存在，只有通过外部的事务提交，才能引起内部事务的提交，嵌套的子事务不能单独提交。如果熟悉 JDBC 中的保存点（SavePoint）的概念，那嵌套事务就很容易理解了，其实嵌套的子事务就是保存点的一个应用，一个事务中可以包括多个保存点，每一个嵌套子事务。另外，外部事务的回滚也会导致嵌套子事务的回滚。</p>\n<h3 id=\"3-事务超时属性-一个事务允许执行的最长时间\"><a href=\"#3-事务超时属性-一个事务允许执行的最长时间\" class=\"headerlink\" title=\"(3) 事务超时属性(一个事务允许执行的最长时间)\"></a>(3) 事务超时属性(一个事务允许执行的最长时间)</h3><p>所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。</p>\n<h3 id=\"4-事务只读属性（对事物资源是否执行只读操作）\"><a href=\"#4-事务只读属性（对事物资源是否执行只读操作）\" class=\"headerlink\" title=\"(4) 事务只读属性（对事物资源是否执行只读操作）\"></a>(4) 事务只读属性（对事物资源是否执行只读操作）</h3><p>事务的只读属性是指，对事务性资源进行只读操作或者是读写操作。所谓事务性资源就是指那些被事务管理的资源，比如数据源、 JMS 资源，以及自定义的事务性资源等等。如果确定只对事务性资源进行只读操作，那么我们可以将事务标志为只读的，以提高事务处理的性能。在 TransactionDefinition 中以 boolean 类型来表示该事务是否只读。</p>\n<h3 id=\"5-回滚规则（定义事务回滚规则）\"><a href=\"#5-回滚规则（定义事务回滚规则）\" class=\"headerlink\" title=\"(5) 回滚规则（定义事务回滚规则）\"></a>(5) 回滚规则（定义事务回滚规则）</h3><h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><h2 id=\"使用API\"><a href=\"#使用API\" class=\"headerlink\" title=\"使用API\"></a>使用API</h2><p>下面给出一个基于底层 API 的编程式事务管理的示例，<br>基于PlatformTransactionManager、TransactionDefinition 和 TransactionStatus 三个核心接口，我们完全可以通过编程的方式来进行事务管理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BankServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">BankService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BankDao bankDao;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TransactionDefinition txDefinition;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PlatformTransactionManager txManager;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">transfer</span><span class=\"params\">(Long fromId， Long toId， <span class=\"keyword\">double</span> amount)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取一个事务</span></span><br><span class=\"line\">    TransactionStatus txStatus = txManager.getTransaction(txDefinition);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        result = bankDao.transfer(fromId， toId， amount);</span><br><span class=\"line\">        txManager.commit(txStatus);    <span class=\"comment\">// 事务提交</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        txManager.rollback(txStatus);      <span class=\"comment\">// 事务回滚</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Transfer Error!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">相应的配置文件如下所示：</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bankService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footmark.spring.core.tx.programmatic.origin.BankServiceImpl\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bankDao\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"bankDao\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"txManager\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"transactionManager\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"txDefinition\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.transaction.support.DefaultTransactionDefinition\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"propagationBehaviorName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"PROPAGATION_REQUIRED\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span>如上所示，我们在BankServiceImpl类中增加了两个属性：一个是 TransactionDefinition 类型的属性，它用于定义事务的规则；另一个是 PlatformTransactionManager 类型的属性，用于执行事务管理操作。如果一个业务方法需要添加事务，我们首先需要在方法开始执行前调用PlatformTransactionManager.getTransaction(…) 方法启动一个事务；创建并启动了事务之后，便可以开始编写业务逻辑代码，然后在适当的地方执行事务的提交或者回滚。</span><br></pre></td></tr></table></figure>\n<h2 id=\"基于-TransactionTemplate-的编程式事务管理\"><a href=\"#基于-TransactionTemplate-的编程式事务管理\" class=\"headerlink\" title=\"基于 TransactionTemplate 的编程式事务管理\"></a>基于 TransactionTemplate 的编程式事务管理</h2><p>　　当然，除了可以使用基于底层 API 的编程式事务外，还可以使用基于 TransactionTemplate 的编程式事务管理。通过上面的示例可以发现，上述事务管理的代码散落在业务逻辑代码中，破坏了原有代码的条理性，并且每一个业务方法都包含了类似的启动事务、提交/回滚事务的样板代码。Spring 也意识到了这些，并提供了简化的方法，这就是 Spring 在数据访问层非常常见的 模板回调模式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BankServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">BankService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BankDao bankDao;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TransactionTemplate transactionTemplate;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">transfer</span><span class=\"params\">(<span class=\"keyword\">final</span> Long fromId， <span class=\"keyword\">final</span> Long toId， <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> amount)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Boolean) transactionTemplate.execute(<span class=\"keyword\">new</span> TransactionCallback()&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">doInTransaction</span><span class=\"params\">(TransactionStatus status)</span> </span>&#123;</span><br><span class=\"line\">                Object result;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        result = bankDao.transfer(fromId， toId， amount);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                        status.setRollbackOnly();</span><br><span class=\"line\">                        result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"Transfer Error!\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相应的配置文件如下所示：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=<span class=\"string\">\"bankService\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"footmark.spring.core.tx.programmatic.template.BankServiceImpl\"</span>&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">\"bankDao\"</span> ref=<span class=\"string\">\"bankDao\"</span>/&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">\"transactionTemplate\"</span> ref=<span class=\"string\">\"transactionTemplate\"</span>/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<p>TransactionTemplate 的 execute() 方法有一个 TransactionCallback 类型的参数，该接口中定义了一个 doInTransaction() 方法，通常我们以匿名内部类的方式实现 TransactionCallback 接口，并在其 doInTransaction() 方法中书写业务逻辑代码。这里可以使用默认的事务提交和回滚规则，这样在业务代码中就不需要显式调用任何事务管理的 API。doInTransaction() 方法有一个TransactionStatus 类型的参数，我们可以在方法的任何位置调用该参数的 setRollbackOnly() 方法将事务标识为回滚的，以执行事务回滚。</p>\n<p>​    此外，TransactionCallback 接口有一个子接口 TransactionCallbackWithoutResult，该接口中定义了一个 doInTransactionWithoutResult() 方法，TransactionCallbackWithoutResult 接口主要用于事务过程中不需要返回值的情况。当然，对于不需要返回值的情况，我们仍然可以使用 TransactionCallback 接口，并在方法中返回任意值即可。</p>\n<h2 id=\"基于底层-API-的编程式事务管理\"><a href=\"#基于底层-API-的编程式事务管理\" class=\"headerlink\" title=\"基于底层 API 的编程式事务管理\"></a>基于底层 API 的编程式事务管理</h2><p>　　下面给出一个基于底层 API 的编程式事务管理的示例，<br>基于PlatformTransactionManager、TransactionDefinition 和 TransactionStatus 三个核心接口，我们完全可以通过编程的方式来进行事务管理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BankServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">BankService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BankDao bankDao;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TransactionDefinition txDefinition;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PlatformTransactionManager txManager;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">transfer</span><span class=\"params\">(Long fromId， Long toId， <span class=\"keyword\">double</span> amount)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取一个事务</span></span><br><span class=\"line\">    TransactionStatus txStatus = txManager.getTransaction(txDefinition);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        result = bankDao.transfer(fromId， toId， amount);</span><br><span class=\"line\">        txManager.commit(txStatus);    <span class=\"comment\">// 事务提交</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        txManager.rollback(txStatus);      <span class=\"comment\">// 事务回滚</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Transfer Error!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">相应的配置文件如下所示：</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bankService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footmark.spring.core.tx.programmatic.origin.BankServiceImpl\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bankDao\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"bankDao\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"txManager\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"transactionManager\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"txDefinition\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.transaction.support.DefaultTransactionDefinition\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"propagationBehaviorName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"PROPAGATION_REQUIRED\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如上所示，我们在BankServiceImpl类中增加了两个属性：一个是 TransactionDefinition 类型的属性，它用于定义事务的规则；另一个是 PlatformTransactionManager 类型的属性，用于执行事务管理操作。如果一个业务方法需要添加事务，我们首先需要在方法开始执行前调用PlatformTransactionManager.getTransaction(…) 方法启动一个事务；创建并启动了事务之后，便可以开始编写业务逻辑代码，然后在适当的地方执行事务的提交或者回滚。</p>\n<h2 id=\"基于-TransactionTemplate-的编程式事务管理-1\"><a href=\"#基于-TransactionTemplate-的编程式事务管理-1\" class=\"headerlink\" title=\"基于 TransactionTemplate 的编程式事务管理\"></a>基于 TransactionTemplate 的编程式事务管理</h2><p>　　当然，除了可以使用基于底层 API 的编程式事务外，还可以使用基于 TransactionTemplate 的编程式事务管理。通过上面的示例可以发现，上述事务管理的代码散落在业务逻辑代码中，破坏了原有代码的条理性，并且每一个业务方法都包含了类似的启动事务、提交/回滚事务的样板代码。Spring 也意识到了这些，并提供了简化的方法，这就是 Spring 在数据访问层非常常见的 模板回调模式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BankServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">BankService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BankDao bankDao;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TransactionTemplate transactionTemplate;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">transfer</span><span class=\"params\">(<span class=\"keyword\">final</span> Long fromId， <span class=\"keyword\">final</span> Long toId， <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> amount)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Boolean) transactionTemplate.execute(<span class=\"keyword\">new</span> TransactionCallback()&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">doInTransaction</span><span class=\"params\">(TransactionStatus status)</span> </span>&#123;</span><br><span class=\"line\">                Object result;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        result = bankDao.transfer(fromId， toId， amount);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                        status.setRollbackOnly();</span><br><span class=\"line\">                        result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"Transfer Error!\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相应的配置文件如下所示：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bankService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footmark.spring.core.tx.programmatic.template.BankServiceImpl\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bankDao\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"bankDao\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"transactionTemplate\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"transactionTemplate\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>TransactionTemplate 的 execute() 方法有一个 TransactionCallback 类型的参数，该接口中定义了一个 doInTransaction() 方法，通常我们以匿名内部类的方式实现 TransactionCallback 接口，并在其 doInTransaction() 方法中书写业务逻辑代码。这里可以使用默认的事务提交和回滚规则，这样在业务代码中就不需要显式调用任何事务管理的 API。doInTransaction() 方法有一个TransactionStatus 类型的参数，我们可以在方法的任何位置调用该参数的 setRollbackOnly() 方法将事务标识为回滚的，以执行事务回滚。</p>\n<p>　　此外，TransactionCallback 接口有一个子接口 TransactionCallbackWithoutResult，该接口中定义了一个 doInTransactionWithoutResult() 方法，TransactionCallbackWithoutResult 接口主要用于事务过程中不需要返回值的情况。当然，对于不需要返回值的情况，我们仍然可以使用 TransactionCallback 接口，并在方法中返回任意值即可。</p>\n<h2 id=\"Spring-声明式事务管理\"><a href=\"#Spring-声明式事务管理\" class=\"headerlink\" title=\"Spring 声明式事务管理\"></a>Spring 声明式事务管理</h2><p>　　Spring 的声明式事务管理是建立在 Spring AOP 机制之上的，其本质是对目标方法前后进行拦截，并在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。</p>\n<p>　　声明式事务最大的优点就是不需要通过编程的方式管理事务，这样就不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中作相关的事务规则声明（或通过等价的基于标注的方式），便可以将事务规则应用到业务逻辑中。总的来说，声明式事务得益于 Spring IoC容器 和 Spring AOP 机制的支持：IoC容器为声明式事务管理提供了基础设施，使得 Bean 对于 Spring 框架而言是可管理的；而由于事务管理本身就是一个典型的横切逻辑（正是 AOP 的用武之地），因此 Spring AOP 机制是声明式事务管理的直接实现者。</p>\n<p>　　显然，声明式事务管理要优于编程式事务管理，这正是spring倡导的非侵入式的开发方式。声明式事务管理使业务代码不受污染，一个普通的POJO对象，只要在XML文件中配置或者添加注解就可以获得完全的事务支持。因此，通常情况下，笔者强烈建议在开发中使用声明式事务，不仅因为其简单，更主要是因为这样使得纯业务代码不被污染，极大方便后期的代码维护。</p>\n<h2 id=\"基于-命名空间的声明式事务管理\"><a href=\"#基于-命名空间的声明式事务管理\" class=\"headerlink\" title=\"基于  命名空间的声明式事务管理\"></a>基于 <tx> 命名空间的声明式事务管理</tx></h2><p>　　Spring 2.x 引入了 <tx> 命名空间，结合使用 <aop> 命名空间，带给开发人员配置声明式事务的全新体验，配置变得更加简单和灵活。总的来说，开发者只需基于<tx>和<aop>命名空间在XML中进行简答配置便可实现声明式事务管理。下面基于<tx>使用Hibernate事务管理的配置文件：</tx></aop></tx></aop></tx></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 配置 DataSourece --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.commons.dbcp.BasicDataSource\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- results in a setDriverClassName(String) call --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>jdbc:mysql://localhost:3306/ssh<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置 sessionFactory --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sessionFactory\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 数据源的设置 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 用于持久化的实体类类列表 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"annotatedClasses\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>cn.edu.tju.rico.model.entity.User<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>cn.edu.tju.rico.model.entity.Log<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Hibernate 的配置 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernateProperties\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">props</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 方言设置   --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"hibernate.dialect\"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 显示sql --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"hibernate.show_sql\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">           <span class=\"comment\">&lt;!-- 格式化sql --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"hibernate.format_sql\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 自动创建/更新数据表 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"hibernate.hbm2ddl.auto\"</span>&gt;</span>update<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">props</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置 TransactionManager --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txManager\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.orm.hibernate3.HibernateTransactionManager\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sessionFactory\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"sessionFactory\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置事务增强处理的切入点，以保证其被恰当的织入 --&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 切点 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* cn.edu.tju.rico.service.impl.*.*(..))\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">id</span>=<span class=\"string\">\"bussinessService\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 声明式事务的切入 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"bussinessService\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 由txAdvice切面定义事务增强处理 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"txManager\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- get打头的方法为只读方法,因此将read-only设为 true --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"get*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 其他方法为读写方法,因此将read-only设为 false --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">isolation</span>=<span class=\"string\">\"DEFAULT\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p> 事实上，Spring配置文件中关于事务的配置总是由三个部分组成，即：DataSource、TransactionManager和代理机制三部分，无论哪种配置方式，一般变化的只是代理机制这部分。其中，DataSource、TransactionManager这两部分只是会根据数据访问方式有所变化，比如使用hibernate进行数据访问时，DataSource实际为SessionFactory，TransactionManager的实现为 HibernateTransactionManager。如下图所示：</p>\n<h2 id=\"基于-Transactional-的声明式事务管理\"><a href=\"#基于-Transactional-的声明式事务管理\" class=\"headerlink\" title=\"基于 @Transactional 的声明式事务管理\"></a>基于 @Transactional 的声明式事务管理</h2><p>　　除了基于命名空间的事务配置方式，Spring 还引入了基于 Annotation 的方式，具体主要涉及@Transactional 标注。@Transactional 可以作用于接口、接口方法、类以及类方法上：当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性；当作用于方法上时，该标注来覆盖类级别的定义。如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">transfer</span><span class=\"params\">(Long fromId， Long toId， <span class=\"keyword\">double</span> amount)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bankDao.transfer(fromId， toId， amount);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Spring 使用 BeanPostProcessor 来处理 Bean 中的标注，因此我们需要在配置文件中作如下声明来激活该后处理 Bean，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;tx:annotation-driven transaction-manager=<span class=\"string\">\"transactionManager”/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>1 与前面相似，transaction-manager、datasource 和 sessionFactory的配置不变，只需将基于<tx>和<aop>命名空间的配置更换为上述配置即可。</aop></tx></p>\n<h2 id=\"Spring-声明式事务的本质\"><a href=\"#Spring-声明式事务的本质\" class=\"headerlink\" title=\"Spring 声明式事务的本质\"></a>Spring 声明式事务的本质</h2><p>　　就Spring 声明式事务而言，无论其基于 <tx> 命名空间的实现还是基于 @Transactional 的实现，其本质都是 Spring AOP 机制的应用：即通过以@Transactional的方式或者XML配置文件的方式向业务组件中的目标业务方法插入事务增强处理并生成相应的代理对象供应用程序(客户端)使用从而达到无污染地添加事务的目的。如下图所示：</tx></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://juejin.im/post/5b00c52ef265da0b95276091\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5b00c52ef265da0b95276091</a></p>\n<p><a href=\"https://blog.csdn.net/justloveyou_/article/details/73733278\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/justloveyou_/article/details/73733278</a> </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"事务概念回顾\"><a href=\"#事务概念回顾\" class=\"headerlink\" title=\"事务概念回顾\"></a>事务概念回顾</h1><blockquote>\n<h2 id=\"什么是事务？\"><a href=\"#什么是事务？\" class=\"headerlink\" title=\"什么是事务？\"></a>什么是事务？</h2></blockquote>\n<p>事务是逻辑上的一组操作，要么都执行，要么都不执行.</p>\n<blockquote>\n<h2 id=\"事物的特性（ACID）：\"><a href=\"#事物的特性（ACID）：\" class=\"headerlink\" title=\"事物的特性（ACID）：\"></a>事物的特性（ACID）：</h2></blockquote>\n<ol>\n<li><strong>原子性：</strong> 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</li>\n<li><strong>一致性：</strong> 执行事务前后，数据保持一致；</li>\n<li><strong>隔离性：</strong> 并发访问数据库时，一个用户的事物不被其他事物所干扰，各并发事务之间数据库是独立的；</li>\n<li><strong>持久性:</strong>  一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</li>\n</ol>\n<h1 id=\"Spring事务管理接口介绍\"><a href=\"#Spring事务管理接口介绍\" class=\"headerlink\" title=\"Spring事务管理接口介绍\"></a>Spring事务管理接口介绍</h1><blockquote>\n<h2 id=\"Spring事务管理接口：\"><a href=\"#Spring事务管理接口：\" class=\"headerlink\" title=\"Spring事务管理接口：\"></a>Spring事务管理接口：</h2></blockquote>\n<ul>\n<li><strong>PlatformTransactionManager：</strong> （平台）事务管理器</li>\n<li><strong>TransactionDefinition：</strong> 事务定义信息(事务隔离级别、传播行为、超时、只读、回滚规则)</li>\n<li><strong>TransactionStatus：</strong> 事务运行状态</li>\n</ul>\n<p><strong>所谓事务管理，其实就是“按照给定的事务规则来执行提交或者回滚操作”。</strong></p>\n<blockquote>\n<h2 id=\"PlatformTransactionManager接口介绍\"><a href=\"#PlatformTransactionManager接口介绍\" class=\"headerlink\" title=\"PlatformTransactionManager接口介绍\"></a>PlatformTransactionManager接口介绍</h2></blockquote>\n<p><strong>Spring并不直接管理事务，而是提供了多种事务管理器</strong> ，他们将事务管理的职责委托给Hibernate或者JTA等持久化机制所提供的相关平台框架的事务来实现。 Spring事务管理器的接口是： <strong>org.springframework.transaction.PlatformTransactionManager</strong> ，通过这个接口，Spring为各个平台如JDBC、Hibernate等都提供了对应的事务管理器，但是具体的实现就是各个平台自己的事情了。</p>\n<h3 id=\"PlatformTransactionManager接口代码如下：\"><a href=\"#PlatformTransactionManager接口代码如下：\" class=\"headerlink\" title=\"PlatformTransactionManager接口代码如下：\"></a>PlatformTransactionManager接口代码如下：</h3><p>PlatformTransactionManager接口中定义了三个方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Public interface PlatformTransactionManager()...&#123;  </span><br><span class=\"line\">    // Return a currently active transaction or create a new one, according to the specified propagation behavior（根据指定的传播行为，返回当前活动的事务或创建一个新事务。）</span><br><span class=\"line\">    TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException; </span><br><span class=\"line\">    // Commit the given transaction, with regard to its status（使用事务目前的状态提交事务）</span><br><span class=\"line\">    Void commit(TransactionStatus status) throws TransactionException;  </span><br><span class=\"line\">    // Perform a rollback of the given transaction（对执行的事务进行回滚）</span><br><span class=\"line\">    Void rollback(TransactionStatus status) throws TransactionException;  </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>我们刚刚也说了Spring中PlatformTransactionManager根据不同持久层框架所对应的接口实现类,几个比较常见的如下图所示</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://wumu.sciento.cn/img/20190803144836.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>比如我们在使用JDBC或者iBatis（就是Mybatis）进行数据持久化操作时,我们的xml配置通常如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t&lt;!-- 事务管理器 --&gt;</span><br><span class=\"line\">\t&lt;bean id=&quot;transactionManager&quot;</span><br><span class=\"line\">\t\tclass=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class=\"line\">\t\t&lt;!-- 数据源 --&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h2 id=\"TransactionDefinition接口介绍\"><a href=\"#TransactionDefinition接口介绍\" class=\"headerlink\" title=\"TransactionDefinition接口介绍\"></a>TransactionDefinition接口介绍</h2></blockquote>\n<p>事务管理器接口 <strong>PlatformTransactionManager</strong> 通过 <strong>getTransaction(TransactionDefinition definition)</strong> 方法来得到一个事务，这个方法里面的参数是 <strong>TransactionDefinition类</strong> ，这个类就定义了一些基本的事务属性。</p>\n<p><strong>那么什么是事务属性呢？</strong></p>\n<p>事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。事务属性包含了5个方面。 </p>\n<p><img src=\"http://wumu.sciento.cn/img/20190803144913.png\" alt=\"\"></p>\n<h3 id=\"TransactionDefinition接口中的方法如下：\"><a href=\"#TransactionDefinition接口中的方法如下：\" class=\"headerlink\" title=\"TransactionDefinition接口中的方法如下：\"></a>TransactionDefinition接口中的方法如下：</h3><p>TransactionDefinition接口中定义了5个方法以及一些表示事务属性的常量比如隔离级别、传播行为等等的常量。</p>\n<p>我下面只是列出了TransactionDefinition接口中的方法而没有给出接口中定义的常量，该接口中的常量信息会在后面依次介绍到。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface TransactionDefinition &#123;</span><br><span class=\"line\">    // 返回事务的传播行为</span><br><span class=\"line\">    int getPropagationBehavior(); </span><br><span class=\"line\">    // 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据</span><br><span class=\"line\">    int getIsolationLevel(); </span><br><span class=\"line\">    // 返回事务必须在多少秒内完成</span><br><span class=\"line\">    //返回事务的名字</span><br><span class=\"line\">    String getName()；</span><br><span class=\"line\">    int getTimeout();  </span><br><span class=\"line\">    // 返回是否优化为只读事务。</span><br><span class=\"line\">    boolean isReadOnly();</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<h3 id=\"（1）事务隔离级别（定义了一个事务可能受其他并发事务影响的程度）：\"><a href=\"#（1）事务隔离级别（定义了一个事务可能受其他并发事务影响的程度）：\" class=\"headerlink\" title=\"（1）事务隔离级别（定义了一个事务可能受其他并发事务影响的程度）：\"></a>（1）事务隔离级别（定义了一个事务可能受其他并发事务影响的程度）：</h3><p>我们先来看一下 <strong>并发事务带来的问题</strong> ，然后再来介绍一下 <strong>TransactionDefinition 接口</strong> 中定义了五个表示隔离级别的常量。</p>\n<blockquote>\n<h4 id=\"并发事务带来的问题\"><a href=\"#并发事务带来的问题\" class=\"headerlink\" title=\"并发事务带来的问题\"></a>并发事务带来的问题</h4></blockquote>\n<p>在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对统一数据进行操作）。并发虽然是必须的，但可能会导致一下的问题。</p>\n<ul>\n<li><p><strong>脏读（Dirty read）:</strong> 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。</p>\n</li>\n<li><p><strong>丢失修改（Lost to modify）:</strong> 指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。</p>\n<p>例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。</p>\n</li>\n<li><p><strong>不可重复读（Unrepeatableread）:</strong> 指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</p>\n</li>\n<li><p><strong>幻读（Phantom read）:</strong> 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</p>\n</li>\n</ul>\n<p><strong>不可重复度和幻读区别：</strong></p>\n<p>不可重复读的重点是修改，幻读的重点在于新增或者删除。</p>\n<p>例1（同样的条件, 你读取过的数据, 再次读取出来发现值不一样了 ）：事务1中的A先生读取自己的工资为     1000的操作还没完成，事务2中的B先生就修改了A的工资为2000，导        致A再读自己的工资时工资变为  2000；这就是不可重复读。</p>\n<p>例2（同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。</p>\n<blockquote>\n<h4 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h4></blockquote>\n<p>TransactionDefinition 接口中定义了五个表示隔离级别的常量：</p>\n<ul>\n<li><strong>TransactionDefinition.ISOLATION_DEFAULT:</strong>    使用后端数据库默认的隔离级别，Mysql 默认采用的 REPEATABLE_READ隔离级别 Oracle 默认采用的 READ_COMMITTED隔离级别.</li>\n<li><strong>TransactionDefinition.ISOLATION_READ_UNCOMMITTED:</strong> 最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能会导致脏读、幻读或不可重复读</strong></li>\n<li><strong>TransactionDefinition.ISOLATION_READ_COMMITTED:</strong>     允许读取并发事务已经提交的数据，<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong></li>\n<li><strong>TransactionDefinition.ISOLATION_REPEATABLE_READ:</strong>     对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生。</strong></li>\n<li><strong>TransactionDefinition.ISOLATION_SERIALIZABLE:</strong>     最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读</strong>。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</li>\n</ul>\n<h3 id=\"（2）事务传播行为（为了解决业务层方法之间互相调用的事务问题）：\"><a href=\"#（2）事务传播行为（为了解决业务层方法之间互相调用的事务问题）：\" class=\"headerlink\" title=\"（2）事务传播行为（为了解决业务层方法之间互相调用的事务问题）：\"></a>（2）事务传播行为（为了解决业务层方法之间互相调用的事务问题）：</h3><p>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：</p>\n<p><strong>支持当前事务的情况：</strong></p>\n<ul>\n<li><strong>TransactionDefinition.PROPAGATION_REQUIRED：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li>\n<li><strong>TransactionDefinition.PROPAGATION_SUPPORTS：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li>\n<li><strong>TransactionDefinition.PROPAGATION_MANDATORY：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）</li>\n</ul>\n<p><strong>不支持当前事务的情况：</strong></p>\n<ul>\n<li><strong>TransactionDefinition.PROPAGATION_REQUIRES_NEW：</strong> 创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li>\n<li><strong>TransactionDefinition.PROPAGATION_NOT_SUPPORTED：</strong> 以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li>\n<li><strong>TransactionDefinition.PROPAGATION_NEVER：</strong> 以非事务方式运行，如果当前存在事务，则抛出异常。</li>\n</ul>\n<p><strong>其他情况：</strong></p>\n<ul>\n<li><strong>TransactionDefinition.PROPAGATION_NESTED：</strong> 如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</li>\n</ul>\n<p>这里需要指出的是，前面的六种事务传播行为是 Spring 从 EJB 中引入的，他们共享相同的概念。而 <strong>PROPAGATION_NESTED</strong> 是 Spring 所特有的。以 PROPAGATION_NESTED 启动的事务内嵌于外部事务中（如果存在外部事务的话），此时，内嵌事务并不是一个独立的事务，它依赖于外部事务的存在，只有通过外部的事务提交，才能引起内部事务的提交，嵌套的子事务不能单独提交。如果熟悉 JDBC 中的保存点（SavePoint）的概念，那嵌套事务就很容易理解了，其实嵌套的子事务就是保存点的一个应用，一个事务中可以包括多个保存点，每一个嵌套子事务。另外，外部事务的回滚也会导致嵌套子事务的回滚。</p>\n<h3 id=\"3-事务超时属性-一个事务允许执行的最长时间\"><a href=\"#3-事务超时属性-一个事务允许执行的最长时间\" class=\"headerlink\" title=\"(3) 事务超时属性(一个事务允许执行的最长时间)\"></a>(3) 事务超时属性(一个事务允许执行的最长时间)</h3><p>所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。</p>\n<h3 id=\"4-事务只读属性（对事物资源是否执行只读操作）\"><a href=\"#4-事务只读属性（对事物资源是否执行只读操作）\" class=\"headerlink\" title=\"(4) 事务只读属性（对事物资源是否执行只读操作）\"></a>(4) 事务只读属性（对事物资源是否执行只读操作）</h3><p>事务的只读属性是指，对事务性资源进行只读操作或者是读写操作。所谓事务性资源就是指那些被事务管理的资源，比如数据源、 JMS 资源，以及自定义的事务性资源等等。如果确定只对事务性资源进行只读操作，那么我们可以将事务标志为只读的，以提高事务处理的性能。在 TransactionDefinition 中以 boolean 类型来表示该事务是否只读。</p>\n<h3 id=\"5-回滚规则（定义事务回滚规则）\"><a href=\"#5-回滚规则（定义事务回滚规则）\" class=\"headerlink\" title=\"(5) 回滚规则（定义事务回滚规则）\"></a>(5) 回滚规则（定义事务回滚规则）</h3><h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><h2 id=\"使用API\"><a href=\"#使用API\" class=\"headerlink\" title=\"使用API\"></a>使用API</h2><p>下面给出一个基于底层 API 的编程式事务管理的示例，<br>基于PlatformTransactionManager、TransactionDefinition 和 TransactionStatus 三个核心接口，我们完全可以通过编程的方式来进行事务管理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BankServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">BankService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BankDao bankDao;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TransactionDefinition txDefinition;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PlatformTransactionManager txManager;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">transfer</span><span class=\"params\">(Long fromId， Long toId， <span class=\"keyword\">double</span> amount)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取一个事务</span></span><br><span class=\"line\">    TransactionStatus txStatus = txManager.getTransaction(txDefinition);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        result = bankDao.transfer(fromId， toId， amount);</span><br><span class=\"line\">        txManager.commit(txStatus);    <span class=\"comment\">// 事务提交</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        txManager.rollback(txStatus);      <span class=\"comment\">// 事务回滚</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Transfer Error!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">相应的配置文件如下所示：</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bankService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footmark.spring.core.tx.programmatic.origin.BankServiceImpl\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bankDao\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"bankDao\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"txManager\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"transactionManager\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"txDefinition\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.transaction.support.DefaultTransactionDefinition\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"propagationBehaviorName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"PROPAGATION_REQUIRED\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span>如上所示，我们在BankServiceImpl类中增加了两个属性：一个是 TransactionDefinition 类型的属性，它用于定义事务的规则；另一个是 PlatformTransactionManager 类型的属性，用于执行事务管理操作。如果一个业务方法需要添加事务，我们首先需要在方法开始执行前调用PlatformTransactionManager.getTransaction(…) 方法启动一个事务；创建并启动了事务之后，便可以开始编写业务逻辑代码，然后在适当的地方执行事务的提交或者回滚。</span><br></pre></td></tr></table></figure>\n<h2 id=\"基于-TransactionTemplate-的编程式事务管理\"><a href=\"#基于-TransactionTemplate-的编程式事务管理\" class=\"headerlink\" title=\"基于 TransactionTemplate 的编程式事务管理\"></a>基于 TransactionTemplate 的编程式事务管理</h2><p>　　当然，除了可以使用基于底层 API 的编程式事务外，还可以使用基于 TransactionTemplate 的编程式事务管理。通过上面的示例可以发现，上述事务管理的代码散落在业务逻辑代码中，破坏了原有代码的条理性，并且每一个业务方法都包含了类似的启动事务、提交/回滚事务的样板代码。Spring 也意识到了这些，并提供了简化的方法，这就是 Spring 在数据访问层非常常见的 模板回调模式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BankServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">BankService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BankDao bankDao;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TransactionTemplate transactionTemplate;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">transfer</span><span class=\"params\">(<span class=\"keyword\">final</span> Long fromId， <span class=\"keyword\">final</span> Long toId， <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> amount)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Boolean) transactionTemplate.execute(<span class=\"keyword\">new</span> TransactionCallback()&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">doInTransaction</span><span class=\"params\">(TransactionStatus status)</span> </span>&#123;</span><br><span class=\"line\">                Object result;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        result = bankDao.transfer(fromId， toId， amount);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                        status.setRollbackOnly();</span><br><span class=\"line\">                        result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"Transfer Error!\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相应的配置文件如下所示：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=<span class=\"string\">\"bankService\"</span> <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"footmark.spring.core.tx.programmatic.template.BankServiceImpl\"</span>&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">\"bankDao\"</span> ref=<span class=\"string\">\"bankDao\"</span>/&gt;</span><br><span class=\"line\">    &lt;property name=<span class=\"string\">\"transactionTemplate\"</span> ref=<span class=\"string\">\"transactionTemplate\"</span>/&gt;</span><br><span class=\"line\">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<p>TransactionTemplate 的 execute() 方法有一个 TransactionCallback 类型的参数，该接口中定义了一个 doInTransaction() 方法，通常我们以匿名内部类的方式实现 TransactionCallback 接口，并在其 doInTransaction() 方法中书写业务逻辑代码。这里可以使用默认的事务提交和回滚规则，这样在业务代码中就不需要显式调用任何事务管理的 API。doInTransaction() 方法有一个TransactionStatus 类型的参数，我们可以在方法的任何位置调用该参数的 setRollbackOnly() 方法将事务标识为回滚的，以执行事务回滚。</p>\n<p>​    此外，TransactionCallback 接口有一个子接口 TransactionCallbackWithoutResult，该接口中定义了一个 doInTransactionWithoutResult() 方法，TransactionCallbackWithoutResult 接口主要用于事务过程中不需要返回值的情况。当然，对于不需要返回值的情况，我们仍然可以使用 TransactionCallback 接口，并在方法中返回任意值即可。</p>\n<h2 id=\"基于底层-API-的编程式事务管理\"><a href=\"#基于底层-API-的编程式事务管理\" class=\"headerlink\" title=\"基于底层 API 的编程式事务管理\"></a>基于底层 API 的编程式事务管理</h2><p>　　下面给出一个基于底层 API 的编程式事务管理的示例，<br>基于PlatformTransactionManager、TransactionDefinition 和 TransactionStatus 三个核心接口，我们完全可以通过编程的方式来进行事务管理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BankServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">BankService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BankDao bankDao;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TransactionDefinition txDefinition;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PlatformTransactionManager txManager;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">transfer</span><span class=\"params\">(Long fromId， Long toId， <span class=\"keyword\">double</span> amount)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取一个事务</span></span><br><span class=\"line\">    TransactionStatus txStatus = txManager.getTransaction(txDefinition);</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        result = bankDao.transfer(fromId， toId， amount);</span><br><span class=\"line\">        txManager.commit(txStatus);    <span class=\"comment\">// 事务提交</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        txManager.rollback(txStatus);      <span class=\"comment\">// 事务回滚</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Transfer Error!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">相应的配置文件如下所示：</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bankService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footmark.spring.core.tx.programmatic.origin.BankServiceImpl\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bankDao\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"bankDao\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"txManager\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"transactionManager\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"txDefinition\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.transaction.support.DefaultTransactionDefinition\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"propagationBehaviorName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"PROPAGATION_REQUIRED\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如上所示，我们在BankServiceImpl类中增加了两个属性：一个是 TransactionDefinition 类型的属性，它用于定义事务的规则；另一个是 PlatformTransactionManager 类型的属性，用于执行事务管理操作。如果一个业务方法需要添加事务，我们首先需要在方法开始执行前调用PlatformTransactionManager.getTransaction(…) 方法启动一个事务；创建并启动了事务之后，便可以开始编写业务逻辑代码，然后在适当的地方执行事务的提交或者回滚。</p>\n<h2 id=\"基于-TransactionTemplate-的编程式事务管理-1\"><a href=\"#基于-TransactionTemplate-的编程式事务管理-1\" class=\"headerlink\" title=\"基于 TransactionTemplate 的编程式事务管理\"></a>基于 TransactionTemplate 的编程式事务管理</h2><p>　　当然，除了可以使用基于底层 API 的编程式事务外，还可以使用基于 TransactionTemplate 的编程式事务管理。通过上面的示例可以发现，上述事务管理的代码散落在业务逻辑代码中，破坏了原有代码的条理性，并且每一个业务方法都包含了类似的启动事务、提交/回滚事务的样板代码。Spring 也意识到了这些，并提供了简化的方法，这就是 Spring 在数据访问层非常常见的 模板回调模式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BankServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">BankService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BankDao bankDao;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TransactionTemplate transactionTemplate;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">transfer</span><span class=\"params\">(<span class=\"keyword\">final</span> Long fromId， <span class=\"keyword\">final</span> Long toId， <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> amount)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Boolean) transactionTemplate.execute(<span class=\"keyword\">new</span> TransactionCallback()&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">doInTransaction</span><span class=\"params\">(TransactionStatus status)</span> </span>&#123;</span><br><span class=\"line\">                Object result;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        result = bankDao.transfer(fromId， toId， amount);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                        status.setRollbackOnly();</span><br><span class=\"line\">                        result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">\"Transfer Error!\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相应的配置文件如下所示：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bankService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footmark.spring.core.tx.programmatic.template.BankServiceImpl\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bankDao\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"bankDao\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"transactionTemplate\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"transactionTemplate\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>TransactionTemplate 的 execute() 方法有一个 TransactionCallback 类型的参数，该接口中定义了一个 doInTransaction() 方法，通常我们以匿名内部类的方式实现 TransactionCallback 接口，并在其 doInTransaction() 方法中书写业务逻辑代码。这里可以使用默认的事务提交和回滚规则，这样在业务代码中就不需要显式调用任何事务管理的 API。doInTransaction() 方法有一个TransactionStatus 类型的参数，我们可以在方法的任何位置调用该参数的 setRollbackOnly() 方法将事务标识为回滚的，以执行事务回滚。</p>\n<p>　　此外，TransactionCallback 接口有一个子接口 TransactionCallbackWithoutResult，该接口中定义了一个 doInTransactionWithoutResult() 方法，TransactionCallbackWithoutResult 接口主要用于事务过程中不需要返回值的情况。当然，对于不需要返回值的情况，我们仍然可以使用 TransactionCallback 接口，并在方法中返回任意值即可。</p>\n<h2 id=\"Spring-声明式事务管理\"><a href=\"#Spring-声明式事务管理\" class=\"headerlink\" title=\"Spring 声明式事务管理\"></a>Spring 声明式事务管理</h2><p>　　Spring 的声明式事务管理是建立在 Spring AOP 机制之上的，其本质是对目标方法前后进行拦截，并在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。</p>\n<p>　　声明式事务最大的优点就是不需要通过编程的方式管理事务，这样就不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中作相关的事务规则声明（或通过等价的基于标注的方式），便可以将事务规则应用到业务逻辑中。总的来说，声明式事务得益于 Spring IoC容器 和 Spring AOP 机制的支持：IoC容器为声明式事务管理提供了基础设施，使得 Bean 对于 Spring 框架而言是可管理的；而由于事务管理本身就是一个典型的横切逻辑（正是 AOP 的用武之地），因此 Spring AOP 机制是声明式事务管理的直接实现者。</p>\n<p>　　显然，声明式事务管理要优于编程式事务管理，这正是spring倡导的非侵入式的开发方式。声明式事务管理使业务代码不受污染，一个普通的POJO对象，只要在XML文件中配置或者添加注解就可以获得完全的事务支持。因此，通常情况下，笔者强烈建议在开发中使用声明式事务，不仅因为其简单，更主要是因为这样使得纯业务代码不被污染，极大方便后期的代码维护。</p>\n<h2 id=\"基于-命名空间的声明式事务管理\"><a href=\"#基于-命名空间的声明式事务管理\" class=\"headerlink\" title=\"基于  命名空间的声明式事务管理\"></a>基于 <tx> 命名空间的声明式事务管理</tx></h2><p>　　Spring 2.x 引入了 <tx> 命名空间，结合使用 <aop> 命名空间，带给开发人员配置声明式事务的全新体验，配置变得更加简单和灵活。总的来说，开发者只需基于<tx>和<aop>命名空间在XML中进行简答配置便可实现声明式事务管理。下面基于<tx>使用Hibernate事务管理的配置文件：</tx></aop></tx></aop></tx></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 配置 DataSourece --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.commons.dbcp.BasicDataSource\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- results in a setDriverClassName(String) call --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>jdbc:mysql://localhost:3306/ssh<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置 sessionFactory --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sessionFactory\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 数据源的设置 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 用于持久化的实体类类列表 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"annotatedClasses\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>cn.edu.tju.rico.model.entity.User<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>cn.edu.tju.rico.model.entity.Log<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Hibernate 的配置 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernateProperties\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">props</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 方言设置   --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"hibernate.dialect\"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 显示sql --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"hibernate.show_sql\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">           <span class=\"comment\">&lt;!-- 格式化sql --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"hibernate.format_sql\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 自动创建/更新数据表 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"hibernate.hbm2ddl.auto\"</span>&gt;</span>update<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">props</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置 TransactionManager --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txManager\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.orm.hibernate3.HibernateTransactionManager\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sessionFactory\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"sessionFactory\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置事务增强处理的切入点，以保证其被恰当的织入 --&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 切点 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* cn.edu.tju.rico.service.impl.*.*(..))\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">id</span>=<span class=\"string\">\"bussinessService\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 声明式事务的切入 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"bussinessService\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 由txAdvice切面定义事务增强处理 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"txManager\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- get打头的方法为只读方法,因此将read-only设为 true --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"get*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 其他方法为读写方法,因此将read-only设为 false --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">isolation</span>=<span class=\"string\">\"DEFAULT\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p> 事实上，Spring配置文件中关于事务的配置总是由三个部分组成，即：DataSource、TransactionManager和代理机制三部分，无论哪种配置方式，一般变化的只是代理机制这部分。其中，DataSource、TransactionManager这两部分只是会根据数据访问方式有所变化，比如使用hibernate进行数据访问时，DataSource实际为SessionFactory，TransactionManager的实现为 HibernateTransactionManager。如下图所示：</p>\n<h2 id=\"基于-Transactional-的声明式事务管理\"><a href=\"#基于-Transactional-的声明式事务管理\" class=\"headerlink\" title=\"基于 @Transactional 的声明式事务管理\"></a>基于 @Transactional 的声明式事务管理</h2><p>　　除了基于命名空间的事务配置方式，Spring 还引入了基于 Annotation 的方式，具体主要涉及@Transactional 标注。@Transactional 可以作用于接口、接口方法、类以及类方法上：当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性；当作用于方法上时，该标注来覆盖类级别的定义。如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">transfer</span><span class=\"params\">(Long fromId， Long toId， <span class=\"keyword\">double</span> amount)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bankDao.transfer(fromId， toId， amount);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Spring 使用 BeanPostProcessor 来处理 Bean 中的标注，因此我们需要在配置文件中作如下声明来激活该后处理 Bean，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;tx:annotation-driven transaction-manager=<span class=\"string\">\"transactionManager”/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>1 与前面相似，transaction-manager、datasource 和 sessionFactory的配置不变，只需将基于<tx>和<aop>命名空间的配置更换为上述配置即可。</aop></tx></p>\n<h2 id=\"Spring-声明式事务的本质\"><a href=\"#Spring-声明式事务的本质\" class=\"headerlink\" title=\"Spring 声明式事务的本质\"></a>Spring 声明式事务的本质</h2><p>　　就Spring 声明式事务而言，无论其基于 <tx> 命名空间的实现还是基于 @Transactional 的实现，其本质都是 Spring AOP 机制的应用：即通过以@Transactional的方式或者XML配置文件的方式向业务组件中的目标业务方法插入事务增强处理并生成相应的代理对象供应用程序(客户端)使用从而达到无污染地添加事务的目的。如下图所示：</tx></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://juejin.im/post/5b00c52ef265da0b95276091\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5b00c52ef265da0b95276091</a></p>\n<p><a href=\"https://blog.csdn.net/justloveyou_/article/details/73733278\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/justloveyou_/article/details/73733278</a> </p>\n"},{"layout":"odoo","title":"管理Odoo服务器实例","date":"2019-06-18T06:02:38.000Z","_content":"\n全书完整目录请见：[Odoo 12开发者指南（Cookbook）第三版](https://alanhou.org/odoo12-cookbook/)\n\n本章中，我们将讲解如下内容：\n\n- 配置插件路径\n- 更新插件模块列表\n- 标准化你的实例目录布局\n- 安装并升级本地插件模块\n- 对插件应用修改\n- 应用及尝试建议的拉取请求\n\n## 引言\n\n在[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)中，我们看了如何使用与编辑器一同发布的标准核心插件来设置 Odoo 实例。本章集中讲解为 Odoo 实例添加非核心插件。Odoo中，你可以从多个目录中加载插件。此外，推荐你将第三方插件（如OCA模块）或你自定义的插件放在一个单独的文件夹中，这样可以避免与 Odoo 核心模块产生冲突。甚至Odoo 企业版也是一种类型的插件目录，你需要像普通插件目录一样加载它。\n\n> ℹ️**有关用词 – 插件(add-on) vs. 模块(module)**\n>\n> 本书中，我们使用插件或插件模块来指代 Odoo 所预期安装的 Python 包。用户界面常使用应用（app）或模块的表达 ，但我们更愿意保留模块一词来表示Python模块或包，它们不一定是 Odoo 插件，而应用（app）来表示适当定义为应用的插件模块，表示它不是Odoo主菜单中的入口。\n\n## 配置插件路径\n\n通过addons_path参数的配置，你可以在 Odoo 中加载自己的插件模块。在Odoo初始化一个新数据库时，它会搜索在addons_path配置参数中给定的这些目录。addons_path会在这些目录中搜索潜在的插件模块。addons_path中所列出的目录预期应包含子目录，每个子目录是一个插件模块。在数据库初始化完成后，你将能够安装这些目录中所给出的模块。\n\n### 准备工作\n\n这一部分假定你已经准备好了实例并生成了配置文件，如在[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)中*在一个文件中存储实例配置*一节所描述。Odoo的源码存放在~/odoo-dev/odoo中，而配置文件存放在~/odoo-dev/myinstance.cfg中。\n\n### 如何配置…\n\n按如下步骤在实例的addons_path中添加~/odoo-dev/local-addons目录：\n\n1. 编辑你的实例的配置文件，即 ~/odoo-dev/my-instance.cfg。\n\n2. 定位到以addons_path =开头一行，默认，你会看到如下内容：\n\n\n```\n  addons_path = ~/odoo-dev/odoo/odoo/addons,~/odoo-dev/odoo/add-ons \n```\n\n\n   译者注：\n\n   当前默认生成的配置文件中为绝对路径，且仅包含xxx/odoo/addons\n\n3. 修改该行，添加一个逗号（英文半角），并接你想想要添加为addons_的目录名称，如以下代码所示：\n\n\n\n  ```\naddons_path = ~/odoo-dev/odoo/odoo/addons,~/odoo-dev/odoo/addons,~/odoo-dev/local-addons \n  ```\n\n4. 重启你的实例\n\n   ```\n   $ ~/odoo-dev/odoo/odoo-bin -c my-instance.cfg \n   ```\n\n### 运行原理…\n\n在重启 Odoo 时，会读取配置文件。addons_path变量的值应为一个逗号分隔的目录列表。可接受相对路径，但它们是相对于当前工作目录的，因此应在配置文件中尽量避免。\n\n至此，~/odoo-dev/local-addons中包含的新插件尚不在该实例的可用模块列表中。为此，你需要执行一个额外的操作，在下一部分*更新插件模块列表*中会进行讲解。\n\n### 扩展知识…\n\n在第一次调用 odoo-bin脚本来初始化新数据库时，你可以传递一个带逗号分隔目录列表的–addons-path命令行参数。这会以所提供插件路径中所找到的所有插件来初始化可用插件模块列表。这么做时，你要显式地包含基础插件目录（odoo/odoo/addons）以及核心插件目录（odoo/addons）。\n\n与前面稍有不同的是本地插件目录不能为空（**译者注：**请先阅读下面的小贴士），它必须要至少包含一个子目录，并包含插件模块的最小化结构。在[第四章 创建Odoo插件模块](https://alanhou.org/creating-odoo-add-on-modules/)中，我们会来看如何编写你自己的模块。同时，这里有一个生成内容来满足Odoo要求的快捷版黑科技：\n\n\n\n```\n$ mkdir -p ~/odoo-dev/local-addons/dummy$ touch ~/odoo-dev/local-addons/dummy/__init__.py$ echo '{\"name\": \"dummy\", \"installable\": False}' > \\~/odoo-dev/local-addons/dummy/__manifest__.py \n```\n\n你可以使用–save选项来保存配置文件的路径：\n\n\n\n```\n$ odoo/odoo-bin -d mydatabase \\--add-ons-path=\"odoo/odoo/addons,odoo/addons,~/odoo-dev/local-addons\" \\--save -c ~/odoo-dev/my-instance.cfg --stop-after-init \n```\n\n本例中，使用相对路径不会有问题，因为它们会在配置文件中转化为绝对路径。\n\n> **小贴士：**因为Odoo仅当从命令行中设置路径时在插件路径的目录中查看插件，而不是在从配置文件中加载路径的时候，dummy已不再必要。因此，你可以删除它（或保留到你确定不需要新建一个配置文件时）。\n\n## 更新插件模块列表\n\n我们在前面的部分已经说到，在向插件路径添加目录时，仅仅重启Odoo服务是不足以安装其中一个新插件模块的。Odoo还需要有一个指定动作来扫描路径并更新可用插件模块的列表。\n\n### 准备工作\n\n启动你的实例并使用管理员账号连接它。然后，激活开发者模式（如果你不知道如何激活开发者模式，请参见[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)）。\n\n### 如何更新…\n\n要更新你实例中的可用插件模块列表，你需要执行如下步骤：\n\n1. 打开Apps菜单\n2. 点击Update Apps List：\n   [![Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902052063.jpg)](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902052063.jpg)\n3. 在弹出对话框中，点击Update按钮：\n   [![Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902070776.jpg)](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902070776.jpg)\n4. 在更新的最后，你可以点击Apps入口来查看已更新的可用插件模块列表。你将需要删除Apps搜索框中的默认过滤器来查看所有模块。\n\n### 运行原理…\n\n在点击了Update按钮之后，Odoo会读取插件路径配置变量。对于列表中的每一个目录，它会查看包含保存在插件模块目录中名为__manifest__.py的插件声明文件的直接子目录。Odoo读取声明内容，并预期查找其中的Python字典。除非声明内容中包含一个键installable的值为False，插件模块的元数据就会存储在数据库中。如果模块已存在，则更新相关信息。否则，会创建一条新记录。如果此前可用的插件模块未找到，则从列表中删除该记录。\n\n> ℹ️仅在初始化数据库后添加了新的插件路径时才需要更新应用列表。如果你在初始化数据库之前在配置文件中添加了新插件路径，那么就无需手动更新模块列表。\n\n## 标准化你的实例目录布局\n\n我们推荐你在开发和生产环境都使用相似的目录布局。这一标准化会在你要执行运维时体现出用处，它也会缓解你日常工作的压力。\n\n这一部分创建将相似生命周期或相似用途的文件分组放在标准化子目录中的目录结构。请自由按照自己的需求来调整这一结构，但请确保你将这一结构在某处进行记录存档。\n\n### 如何标准化…\n\n创建所推荐实例布局，你需要执行如下步骤：\n\n**译者注：**读者也可直接使用 Alan 在 GitHub 上准备的[安装脚本](https://github.com/alanhou/odoo12-cookbook/tree/master/Chapter02)进行操作\n\n1. 为实例创建一个目录：\n\n   ```\n   $ mkdir ~/odoo-dev/projectname$ cd ~/odoo-dev/projectname \n   ```\n\n2. 在名为env/的子目录中创建一个Python虚拟环境：\n\n  ```\n  $ virtualenv -p python3 env \n  ```\n\n3. 创建一些子目录，如下：\n\n  ```\n  $ mkdir src local bin filestore logs \n  ```\n\n   这些子目录的功能如下：\n\n   - src/：这包含Odoo本身的一个拷贝，以及一些第三方插件项目（我们在下一步中添加了Odoo源码）\n   - local/：这用于保存你针对具体实例的插件\n   - bin/：这包含各类帮助可执行shell脚本\n   - filestore/：这用于文件存储\n   - logs/（可选）：这用于存储服务日志文件\n\n4. 克隆Odoo并安装所需依赖包（参见\n\n   第一章 安装Odoo开发环境\n\n   获取更多内容）：\n\n   ```bash\n$ git clone https://github.com/odoo/odoo.git src/odoo\n$ env/bin/pip3 install -r src/odoo/requirements.txt \n   ```\n5. 以bin/odoo保存如下shell脚本：\n\n  ```bash\nROOT=$(dirname $0)/..\nPYTHON=$ROOT/env/bin/python3\nODOO=$ROOT/src/odoo/odoo-bin\n$PYTHON $ODOO -c $ROOT/projectname.cfg \"$@\"\nexit $?\n  ```\n\n6. 让该脚本可执行：\n\n  ```\n$ chmod +x bin/odoo \n  ```\n\n7. 创建一个空的本地模块dummy：\n\n```\n$ mkdir -p local/dummy\n$ touch local/dummy/__init__.py\n$ echo '{\"name\": \"dummy\", \"installable\": False}' >\\local/dummy/__manifest__.py \n```\n\n8. 为你的实例生成配置文件：\n\n\n\n```\n$ bin/odoo --stop-after-init --save \\ --addons-path src/odoo/odoo/addons,src/odoo/addons,local \\ --data-dir filestore \n```\n\n9. 添加一个.gitignore文件，用于告诉GitHub排除这些给定目录，这样Git在提交代码时就会忽略掉这些目录，例如 filestore/, env/, logs/和src/：\n\n```bash\n# dotfiles, with exceptions:\n.*\n!.gitignore\n# python compiled files\n*.py[co]\n# emacs backup files\n*~\n# not tracked subdirectories\n/env/\n/src/\n/filestore/\n/logs/\n```\n\n10. 为这个实例创建一个Git仓库并将已添加的文件添加到Git中：\n\n```bash\n$ git init\n$ git add .\n$ git commit -m \"initial version of projectname\"\n```\n\n### 运行原理…\n\n我们生成了一个有明确标签目录和独立角色的干净的目录结构。我使用了不同的目录来存储如下内容：\n\n- 由其它人所维护的代码（src/中）\n- 本地相关的具体代码\n- 实例的文件存储\n\n通过为每个项目建一个virtualenv环境，我们可以确保该项目的依赖文件不会与其它项目的依赖产生冲突，这些项目你可能运行着不同的Odoo版本或使用了不同的第三方插件模块，这将需要不同版本的Python依赖。这当然也会带来一部分磁盘空间的开销。\n\n以类似的方式，通过为我们不同的项目使用不同的Odoo拷贝以及第三方插件模块，我们可以让每个项目单独的进行推进并仅在需要时在这些实例上安装更新，因此也减少了引入回退的风险。\n\nbin/odoo允许我们不用记住各个路径或激活虚拟环境就可以运行服务。这还为我们设置了配置文件。你可以在其中添加其它脚本来协助你的日常工作。例如，你可以添加一个脚本来检查运行实例所需的第三方项目。\n\n有关配置文件，我们仅展示了这里需要设置的最小化选项，但很明显你可以设置更多，例如数据库名、数据库过滤器或项目所监听的端口。有关这一话题的更多信息，请参见[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)。\n\n最后，通过在Git仓库中管理所有这些，在不同的电脑上复制这一设置及在团队中分享开发内容变得相当容易。\n\n> **小贴士：**加速贴士\n>\n> 要加速项目的创建，你可以创建一个包含空结构的模板仓库，并为每个项目复制（fork）该仓库。这会省却你重新输入bin/odoo脚本、.gitignore及其它所需模板文件（持续集成配置、README.md、ChangeLog等等）所花费的时间。\n\n### 参见内容\n\n如果你喜欢这种方法，我们建议你尝试[第三章 服务器部署](https://alanhou.org/server-deployment/)中的使用 Docker 运行 Odoo 一部分的内容。\n\n### 扩展知识…\n\n复杂模块的开发要求有各类配置选项，在想要尝试任何配置选项时都会要更新配置文件。更新配置常常是一件头痛的事，避免它的一种方式是通过命令行传递所有配置选项，如下：\n\n1. 手动激活虚拟环境：\n\n```bash\n$ source env/bin/activate\n```\n\n2. 进行Odoo源代码目录：\n\n```bash\n$ cd src/odoo\n```\n\n3. 运行服务：\n\n```bash\n./odoo-bin --addons-path=addons,../../local -d test-12 -i account,sale,purchase --log-level=debug\n```\n\n第三步中，我们直接通过命令行传递了一些参数。第一个是–addons-path，它加载Odoo的核心插件目录addons，以及你自己的插件目录local，在其中你可以放自己的插件模块。选项-d会使用test-12数据库或者在该数据库不存在时新建一个数据库。选项-i 会安装会计、销售和采购模块。接着，我们传递了log-level选项来将日志级别提升为debug，这样日志中会显示更多的信息。\n\n> ℹ️通过使用命令行，你可以快速地修改配置选项。你也可以在Terminal中查看实时日志。所有可用选项可参见[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)，或使用-help命令来查看所有的选项列表及各个选项的描述。\n\n## 安装并升级本地插件模块\n\nOdoo 功能的核心来自于它的插件模块。Odoo自带的插件是你所拥有的财富，同时你也可以在应用商店下载一些插件模块或者自己写。\n\n这一部分中，我们将展示如何通过网页界面及命令行来安装并升级插件模块。\n\n对这些操作使用命令行的主要好处包含可以同时作用于一个以上的插件以及在安装或升级的过程中可以清晰地浏览到服务端日志，对于开发模式或编写脚本安装实例时都非常有用。\n\n### 准备工作\n\n确保你有一个运行中的 Odoo 实例，且数据库已初始化、插件路径已进行恰当地设置。在这一部分中，我们将安装/升级一些插件模块。\n\n### 如何安装升级…\n\n安装或升级插件有两种方法-可以使用网页界面或命令行。\n\n#### 通过网页界面\n\n可按照如下步骤来使用网页界面安装新的插件模块到数据库中：\n\n1. 使用管理员账户连接实例并打开Apps菜单\n   [![Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906002399.jpg)](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906002399.jpg)\n2. 使用搜索框来定位你想要安装的插件。这里有一些帮助你完成该任务的操作指南：\n   - 激活Not Installed过滤器\n   - 如果你要查找一个具体的功能插件而不是广泛的功能插件，删除Apps过滤器\n   - 在搜索框中输入模块名的一部分并使用它来作为模块过滤器\n   - 你会发现使用列表视图可以阅读到更多的信息\n3. 点击卡片中模块名下的Install按钮。\n\n注意有些Odoo插件模块需要有外部Python依赖，如果你的系统中未安装该Python依赖，那么 Odoo 会中止安装并显示如下的对话框：\n\n[![Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906125210.jpg)](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906125210.jpg)\n**译者注：**按正常安装不会出现一错误，需通过 pip uninstall pyldap 才能复现这一错误\n\n修复这一问题，仅需在你的系统中安装相关的Python依赖即可。\n\n要升级已安装到数据库的模块，使用如下步骤：\n\n1. 使用管理员账户连接到实例\n2. 打开Apps菜单\n3. 点击Apps:\n   [![Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906203077.jpg)](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906203077.jpg)\n4. 使用搜索框来定位你所安装的插件。有如下的小贴士：\n   - 激活Installed过滤器\n   - 如果你要查找一个具体的功能插件而不是广泛的功能插件，删除Apps过滤器\n   - 在搜索框中输入部分插件模块的名称并按下 Enter 来使用它作为模块过滤器。例如，输入CRM并按下 Enter 来搜索CRM应用\n   - 你会发现使用列表视图可以阅读到更多的信息\n5. 点击卡片右上角的的三个点，然后点击Upgrade选项：\n\n[![Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906265357.jpg)](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906265357.jpg)\n\n激活开发者模式来查看模块的技术名称。如果你不知道如何激活开发者模式，请参见[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)：\n\n[![Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906302261.jpg)](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906302261.jpg)\n\n在激活开发者模式之后，它会以红色显示模块的技术名称。如果你使用的是Odoo社区版，会看到一些带有Upgrade的附加应用。这些是Odoo企业版的应用，要想安装/使用它们，需要购买一个证书。\n\n#### 通过命令行\n\n要在你的数据库中安装新插件，可按照如下步骤：\n\n1. 查找插件的名称。这是包含__manifest__.py文件的目录名，不带前面的路径。\n\n2. 停止实例。如果你在操作生产数据库，请进行备份。\n\n3. 运行如下命令：\n\n   ```bash\n   odoo/odoo-bin -c instance.cfg -d dbname -i addon1,addon2 --stop-after-init\n   ```\n\n\n   译者注：\n\n   请将addon1,addon2替换为你所要安装的插件名\n\n\n\n   > **小贴士：**你可以省略掉-d dbname，因为这在配置文件中进行了设置。\n\n4. 重新启动实例\n\n### 运行原理…\n\n插件模块的安装和升级是两个紧密关联的操作，但有一些重要的区别，在下面两部分中进行了强调：\n\n#### 插件安装\n\n在你安装插件时，Odoo以提供的名称检查它的可用插件列表中未安装插件。它还会检查该插件的依赖，并且如果有依赖的话，它会在安装插件前递归安装这些依赖。\n\n单个模块的安装包含如下步骤：\n\n1. 如果存在，运行插件preinit钩子\n2. 从Python源代码中加载模型定义并在必要时更新数据库结构（参见[第五章 应用模型](https://alanhou.org/application-models/)了解更多信息）\n3. 加载插件的数据文件并在必要时更新数据库内容（参见[第七章 模块数据](https://alanhou.org/odoo12-module-data/)了解更多信息）\n4. 如果实例中启用了演示数据则安装插件演示数据\n5. 如果存在，运行插件postinit钩子\n6. 运行对插件视图定义的验证\n7. 如果启用了演示数据并启用了测试，运行该插件的测试（参见[第十八章 自动化测试用例](https://alanhou.org/automated-test-cases/)了解更多信息）\n8. 在数据库中更新模块状态\n9. 从插件的翻译文件中更新数据库中的翻译（参见[第十二章 国际化](https://alanhou.org/internationalization/)了解更多信息）\n\n> ℹ️preinit和postinit钩子分别使用pre_init_hook和post_init_hook键名在__manifest__.py文件中定义。这些钩子用于在插件模块的安装之前及之后触发Python函数。参见[第四章 创建Odoo插件模块](https://alanhou.org/creating-odoo-add-on-modules/)了解更多有关 init 钩子的知识。\n\n#### 插件升级\n\n升级插件时，Odoo以给定的名称在可用的插件模块列表中检查已安装插件。它还会检查该插件的反向依赖（即依赖于所升级插件的那些插件）。如果存在，则也会对它们进行递归升级。\n\n单个插件模块的升级过程包含如下步骤：\n\n1. 如果有的话，先运行插件模块的预迁移步骤（参见[第七章 模块数据](https://alanhou.org/odoo12-module-data/)了解更多信息）\n2. 从Python源码中加载模型定义并在必要时更新数据库结构（参见[第五章 应用模型](https://alanhou.org/application-models/)了解更多信息）\n3. 加载插件的数据文件并在必要时更新数据库内容（参见[第七章 模块数据](https://alanhou.org/odoo12-module-data/)了解更多信息）\n4. 如果实例中启用了演示数据更新插件演示数据\n5. 如果模块有任何迁移方法的话，先运行插件模块的后置迁移步骤（参见[第七章 模块数据](https://alanhou.org/odoo12-module-data/)了解更多信息）\n6. 运行对插件视图定义的验证\n7. 如果启用了演示数据并启用了测试，运行该插件的测试（参见[第十八章 自动化测试用例](https://alanhou.org/automated-test-cases/)了解更多信息）\n8. 在数据库中更新模块状态\n9. 从插件的翻译文件中更新数据库中的翻译（参见[第十二章 国际化](https://alanhou.org/internationalization/)了解更多信息）\n\n> ℹ️注意更新未安装的插件模块什么也不会做。但是安装已安装的插件模块会重新安装该插件，这会通过一些包含数据的数据文件产生一些预期外的问题，这些文件可能应由用户进行更新而非在常规的模块升级处理时进行更新（参见[第七章 模块数据](https://alanhou.org/odoo12-module-data/)中使用noupdate和forcecreate标记部分的内容）。通过用户界面不存在错误的风险，但通过命令行时则有可能发生。\n\n### 扩展知识…\n\n要当心依赖的处理。假定有一个实例你想要安装sale、sale_stock和sale_specific插件，sale_specific依赖于sale_stock，而sale_stock依赖于sale。要安装这三者，你只需要安装sale_specific，因为它会递归安装sale_stock和sale这两个依赖。要升级这两者，你需要升级sale，因为这样会递归升级其反向依赖，sale_stock和sale_specific。\n\n管理依赖另一个比较搞的地方是在你向已经有一个版本安装了的插件添加依赖的时候。我们继续通过前例来理解这一问题。想像一下你在sale_specific中添加了一个对stock_dropshipping的依赖。更新sale_specific插件不会自动安装新的依赖，也会要求安装sale_specific。在这种情况下，你会收到非常糟糕的错误消息，因为插件的Python代码没有成功的加载，而插件的数据和模型表则存在于数据库中。要解决这一问题，你需要停止该实例并手动安装新的依赖。\n\n## 从GitHub安装插件模块\n\nGitHub是第三方插件的一个很好的来源。很多Odoo合作伙伴使用GitHub来分享他们内部维护的插件，而Odoo社区联盟（OCA）在GitHub上共同维护着几百个插件。在你开始编写自己的插件之前，确保查看是否已有可用的插件或者作为初始以继续扩展插件。\n\n这一部分向你展示如何从GitHub上克隆OCA的partner-contact项目并让其中所包含的插件模块在我们实例中可用。\n\n### 准备工作\n\n假设你想要改变你的实例中地址的处理方式，你的客户需要在Odoo两个字段（街道和街道2）之外的第三个字段来存储地址。你肯定是可以编写自己的插件来为res.partne添加一个字段的，但如果想要让地址在发票上以合适的格式显示，问题就要比看上去麻烦一些了。所幸，你邮件列表上的某个人告诉了你partner_address_street3插件，由OCA作为partner-contact项目的一部分进行维护。\n\n本部分中所使用的路径反映了我们在*标准化你的实例目录布局*一节中所推荐的布局。\n\n### 如何安装…\n\n按照如下步骤来安装partner_address_street3：\n\n1. 进入你的项目目录：\n\n```bash\n$ cd ~/odoo-dev/my-odoo/src\n```\n\n\n\n2. 在src/目录中克隆partner-contact项目的12.0分支：\n\n```bash\n$ git clone --branch 12.0 \\https://github.com/OCA/partner-contact.git src/partner-contact\n```\n\n\n\n3. 修改插件路径来包含该目录并更新你的实例中的插件列表（参见本章中的配置插件路径和更新插件模块列表一节）。instance.cfg中的addons_path一行应该是这样的：\n\n   ```\n   addons_path = ~/odoo-dev/my-odoo/src/odoo/odoo/addons, \\~/odoo-dev/my-odoo/src/odoo/addons, \\~/odoo-dev/my-odoo/src/, \\~/odoo-dev/local-addons\n   ```\n\n4. 安装partner_address_street3插件（如果你不知道如何安装该模块，参见前面一节，安装并升级本地插件模块）\n\n### 运行原理…\n\n所有 Odoo社区联盟的代码仓库都将他们自己的插件放在单独的目录中，这与Odoo对插件路径中目录的预期是相一致的。因此，只需复制某处的仓库并将其添加到插件路径中就够了。\n\n### 扩展知识…\n\n有些维护者遵循不同的方法，每个插件模块一个仓库，放在仓库的根目录下。这种情况下，你需要创建一个新的目录，在这个目录中添加插件路径并克隆你所需的维护者的插件到该目录中。记住在每次添加一个新仓库拷贝时要更新插件模块列表。\n\n## 对插件应用修改\n\nGitHub上可用的大部分插件需要进行修改并且不遵循Odoo对其稳定发行版所强制的规则。它们可能收到漏洞修复或改善，包含你提交的问题或功能请求，这些修改可能会引入数据库模式的修改或数据文件和视图中的更新。这一部分讲解如何安装升级后的版本。\n\n### 准备工作\n\n假定你对partner_address_street3报告了一个问题并收到通知说该问题已在partner-contact项目12.0分支的最近一次修订中得以解决。这种情况下，你可以使用最新版本来更新你的实例。\n\n### 如何修改…\n\n要对GitHub的插件进行源的变更，需执行如下步骤：\n\n1. 停止使用该插件的实例。\n\n2. 如果是生产实例请做一个备份（参见[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)中*管理Odoo服务端数据库*一节）。\n\n3. 进入克隆了partner-contact的目录：\n\n```bash\n$ cd ~/odoo-dev/my-odoo/src/partner-contact\n```\n\n\n\n4. 为该项目创建一个本地标签，这样万一出现了崩溃你可以进行回退：\n\n```bash\n$ git checkout 12.0$ git tag 12.0-before-update-$(date --iso)\n```\n\n\n\n4. 获取源码的最新版本：\n\n```bash\n$ git pull --ff-only\n```\n\n\n\n6. 在你的数据库中更新partner_address_street3插件（参见*安装并升级本地插件模块*一节）\n\n7. 重启实例\n\n### 运行原理…\n\n通常，插件模块的开发者有时会发布插件的最新版本。这一更新一般包含漏洞修复及新功能。这里，我们将获取一个插件的新版本并在我们的实例中更新它。\n\n如果git pull –ff-only失败的话，你可以使用如下命令回退到前一个版本：\n\n```bash\n$  git reset --hard 12.0-before-update-$(date --iso)\n```\n\n\n\n然后，你可以尝试git pull（不添加–ff-only），它会产生一个合并，但这表示你对插件做了本地修改。\n\n### 扩展知识…\n\n如果更新这一步崩溃了，参见[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)*从源码更新Odoo*一节获取恢复的操作指南。记住要总是在一个生产数据库的拷贝上先进行测试。\n\n## 应用及尝试建议的拉取请求\n\n在GitHub的世界中，拉取请求（PR）是由开发者所提交的请求，这样项目维护人员可以添加一些新的开发。比如一个 PR 可能包含漏洞修复或新功能。这里请求在拉取到主分支之前会进行审核和测试。\n\n这一部分讲解如何对你的 Odoo 项目应用一个PR来测试漏洞修复的改进。\n\n### 准备工作\n\n在前一节中，假定你对partner_address_street3 报告了一个问题并收到一条通知在拉取请求中问题已修复，尚未合并到项目的12.0分支中。开发人员要求你验证PR #123中的修复状况。你需要使用这一分支更新一个测试实例。\n\n你不应在生产数据库直接使用该分支，因此先创建一个带有生产数据库拷贝的测试环境（参见[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)和[第三章 服务器部署](https://alanhou.org/server-deployment/)）。\n\n### 如何操作…\n\n应用并测试一个插件的GitHub拉取请求，你需要执行如下步骤：\n\n1. 停止实例\n\n2. 进入partner-contact所被克隆的目录：\n\n```bash\n$ cd ~/odoo-dev/my-odoo/src/partner-contact\n```\n\n\n\n3. 为该项目创建一个本地标签，这样万一出现崩溃时你可以回退：\n\n```bash\n$  git checkout 12.0$ git tag 12.0-before-update-$(date --iso\n```\n\n\n\n4. 拉取pull请求的分支。这么做最容易的方式是使用PR编号，在开发者与你沟通时你应该可以看到。在本例中，这个拉取请求编号是123：\n\n```bash\n$ git pull origin pull/123/head\n```\n\n\n\n5. 在你的数据库中更新partner_address_street3插件模块并重启该实例（如果你不知道如何更新该模块的话请参见*安装并升级本地插件模块*一节）\n\n6. 测试该更新 – 尝试重现问题，或测试你想要的功能。\n\n如果这不能运行，在GitHub的PR页面进行评论，说明你做了什么以及什么不能运行，这样开发者可以更新这个拉取请求。\n\n如果它没有问题，也在PR页面说下；这是PR验证流程中非常重要的一部分；这会加速主分支中的合并。\n\n### 运行原理…\n\n我们在使用一个GitHub功能，使用pull/nnnn/head分支名称来通过编号进行拉取请求的拉取，其中nnnn是PR的编号。Git pull命令合并远程分支到我们的分支，在我们基础代码中应用修改。在这之后，我们更新插件模块、对其测试并向作者报回修改是成功或是失败。\n\n### 扩展知识…\n\n如果你想要同步测试它们，你可以针对相同仓库的不同拉取请求重复本节中的第4步。如果你对结果很满意，你可以创建一个分支来保留对应用了改变的结果的引用：\n\n```bash\n$ git checkout -b 12.0-custom\n```\n\n\n\n使用一个不同的分支会帮助你记住你没有从GitHub使用该版本，而是一个自定义的版本。\n\n> ℹ️git branch命令可用于列出你仓库中的所有本地分支。\n\n从这开始，如果你需要应用来自GitHub中12.0分支的最近一个审核版本，你需要不使用–ff-only来拉取它：\n\n```bash\n$ git pull origin 12.0\n```\n\n\n\n","source":"_posts/odoo/Odoo 12开发者指南第二章 管理Odoo服务器实例.md","raw":"---\nlayout: odoo\ntitle: 管理Odoo服务器实例\ndate: 2019-06-18 14:02:38\ntags:\n- python\n- odoo\n---\n\n全书完整目录请见：[Odoo 12开发者指南（Cookbook）第三版](https://alanhou.org/odoo12-cookbook/)\n\n本章中，我们将讲解如下内容：\n\n- 配置插件路径\n- 更新插件模块列表\n- 标准化你的实例目录布局\n- 安装并升级本地插件模块\n- 对插件应用修改\n- 应用及尝试建议的拉取请求\n\n## 引言\n\n在[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)中，我们看了如何使用与编辑器一同发布的标准核心插件来设置 Odoo 实例。本章集中讲解为 Odoo 实例添加非核心插件。Odoo中，你可以从多个目录中加载插件。此外，推荐你将第三方插件（如OCA模块）或你自定义的插件放在一个单独的文件夹中，这样可以避免与 Odoo 核心模块产生冲突。甚至Odoo 企业版也是一种类型的插件目录，你需要像普通插件目录一样加载它。\n\n> ℹ️**有关用词 – 插件(add-on) vs. 模块(module)**\n>\n> 本书中，我们使用插件或插件模块来指代 Odoo 所预期安装的 Python 包。用户界面常使用应用（app）或模块的表达 ，但我们更愿意保留模块一词来表示Python模块或包，它们不一定是 Odoo 插件，而应用（app）来表示适当定义为应用的插件模块，表示它不是Odoo主菜单中的入口。\n\n## 配置插件路径\n\n通过addons_path参数的配置，你可以在 Odoo 中加载自己的插件模块。在Odoo初始化一个新数据库时，它会搜索在addons_path配置参数中给定的这些目录。addons_path会在这些目录中搜索潜在的插件模块。addons_path中所列出的目录预期应包含子目录，每个子目录是一个插件模块。在数据库初始化完成后，你将能够安装这些目录中所给出的模块。\n\n### 准备工作\n\n这一部分假定你已经准备好了实例并生成了配置文件，如在[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)中*在一个文件中存储实例配置*一节所描述。Odoo的源码存放在~/odoo-dev/odoo中，而配置文件存放在~/odoo-dev/myinstance.cfg中。\n\n### 如何配置…\n\n按如下步骤在实例的addons_path中添加~/odoo-dev/local-addons目录：\n\n1. 编辑你的实例的配置文件，即 ~/odoo-dev/my-instance.cfg。\n\n2. 定位到以addons_path =开头一行，默认，你会看到如下内容：\n\n\n```\n  addons_path = ~/odoo-dev/odoo/odoo/addons,~/odoo-dev/odoo/add-ons \n```\n\n\n   译者注：\n\n   当前默认生成的配置文件中为绝对路径，且仅包含xxx/odoo/addons\n\n3. 修改该行，添加一个逗号（英文半角），并接你想想要添加为addons_的目录名称，如以下代码所示：\n\n\n\n  ```\naddons_path = ~/odoo-dev/odoo/odoo/addons,~/odoo-dev/odoo/addons,~/odoo-dev/local-addons \n  ```\n\n4. 重启你的实例\n\n   ```\n   $ ~/odoo-dev/odoo/odoo-bin -c my-instance.cfg \n   ```\n\n### 运行原理…\n\n在重启 Odoo 时，会读取配置文件。addons_path变量的值应为一个逗号分隔的目录列表。可接受相对路径，但它们是相对于当前工作目录的，因此应在配置文件中尽量避免。\n\n至此，~/odoo-dev/local-addons中包含的新插件尚不在该实例的可用模块列表中。为此，你需要执行一个额外的操作，在下一部分*更新插件模块列表*中会进行讲解。\n\n### 扩展知识…\n\n在第一次调用 odoo-bin脚本来初始化新数据库时，你可以传递一个带逗号分隔目录列表的–addons-path命令行参数。这会以所提供插件路径中所找到的所有插件来初始化可用插件模块列表。这么做时，你要显式地包含基础插件目录（odoo/odoo/addons）以及核心插件目录（odoo/addons）。\n\n与前面稍有不同的是本地插件目录不能为空（**译者注：**请先阅读下面的小贴士），它必须要至少包含一个子目录，并包含插件模块的最小化结构。在[第四章 创建Odoo插件模块](https://alanhou.org/creating-odoo-add-on-modules/)中，我们会来看如何编写你自己的模块。同时，这里有一个生成内容来满足Odoo要求的快捷版黑科技：\n\n\n\n```\n$ mkdir -p ~/odoo-dev/local-addons/dummy$ touch ~/odoo-dev/local-addons/dummy/__init__.py$ echo '{\"name\": \"dummy\", \"installable\": False}' > \\~/odoo-dev/local-addons/dummy/__manifest__.py \n```\n\n你可以使用–save选项来保存配置文件的路径：\n\n\n\n```\n$ odoo/odoo-bin -d mydatabase \\--add-ons-path=\"odoo/odoo/addons,odoo/addons,~/odoo-dev/local-addons\" \\--save -c ~/odoo-dev/my-instance.cfg --stop-after-init \n```\n\n本例中，使用相对路径不会有问题，因为它们会在配置文件中转化为绝对路径。\n\n> **小贴士：**因为Odoo仅当从命令行中设置路径时在插件路径的目录中查看插件，而不是在从配置文件中加载路径的时候，dummy已不再必要。因此，你可以删除它（或保留到你确定不需要新建一个配置文件时）。\n\n## 更新插件模块列表\n\n我们在前面的部分已经说到，在向插件路径添加目录时，仅仅重启Odoo服务是不足以安装其中一个新插件模块的。Odoo还需要有一个指定动作来扫描路径并更新可用插件模块的列表。\n\n### 准备工作\n\n启动你的实例并使用管理员账号连接它。然后，激活开发者模式（如果你不知道如何激活开发者模式，请参见[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)）。\n\n### 如何更新…\n\n要更新你实例中的可用插件模块列表，你需要执行如下步骤：\n\n1. 打开Apps菜单\n2. 点击Update Apps List：\n   [![Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902052063.jpg)](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902052063.jpg)\n3. 在弹出对话框中，点击Update按钮：\n   [![Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902070776.jpg)](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902070776.jpg)\n4. 在更新的最后，你可以点击Apps入口来查看已更新的可用插件模块列表。你将需要删除Apps搜索框中的默认过滤器来查看所有模块。\n\n### 运行原理…\n\n在点击了Update按钮之后，Odoo会读取插件路径配置变量。对于列表中的每一个目录，它会查看包含保存在插件模块目录中名为__manifest__.py的插件声明文件的直接子目录。Odoo读取声明内容，并预期查找其中的Python字典。除非声明内容中包含一个键installable的值为False，插件模块的元数据就会存储在数据库中。如果模块已存在，则更新相关信息。否则，会创建一条新记录。如果此前可用的插件模块未找到，则从列表中删除该记录。\n\n> ℹ️仅在初始化数据库后添加了新的插件路径时才需要更新应用列表。如果你在初始化数据库之前在配置文件中添加了新插件路径，那么就无需手动更新模块列表。\n\n## 标准化你的实例目录布局\n\n我们推荐你在开发和生产环境都使用相似的目录布局。这一标准化会在你要执行运维时体现出用处，它也会缓解你日常工作的压力。\n\n这一部分创建将相似生命周期或相似用途的文件分组放在标准化子目录中的目录结构。请自由按照自己的需求来调整这一结构，但请确保你将这一结构在某处进行记录存档。\n\n### 如何标准化…\n\n创建所推荐实例布局，你需要执行如下步骤：\n\n**译者注：**读者也可直接使用 Alan 在 GitHub 上准备的[安装脚本](https://github.com/alanhou/odoo12-cookbook/tree/master/Chapter02)进行操作\n\n1. 为实例创建一个目录：\n\n   ```\n   $ mkdir ~/odoo-dev/projectname$ cd ~/odoo-dev/projectname \n   ```\n\n2. 在名为env/的子目录中创建一个Python虚拟环境：\n\n  ```\n  $ virtualenv -p python3 env \n  ```\n\n3. 创建一些子目录，如下：\n\n  ```\n  $ mkdir src local bin filestore logs \n  ```\n\n   这些子目录的功能如下：\n\n   - src/：这包含Odoo本身的一个拷贝，以及一些第三方插件项目（我们在下一步中添加了Odoo源码）\n   - local/：这用于保存你针对具体实例的插件\n   - bin/：这包含各类帮助可执行shell脚本\n   - filestore/：这用于文件存储\n   - logs/（可选）：这用于存储服务日志文件\n\n4. 克隆Odoo并安装所需依赖包（参见\n\n   第一章 安装Odoo开发环境\n\n   获取更多内容）：\n\n   ```bash\n$ git clone https://github.com/odoo/odoo.git src/odoo\n$ env/bin/pip3 install -r src/odoo/requirements.txt \n   ```\n5. 以bin/odoo保存如下shell脚本：\n\n  ```bash\nROOT=$(dirname $0)/..\nPYTHON=$ROOT/env/bin/python3\nODOO=$ROOT/src/odoo/odoo-bin\n$PYTHON $ODOO -c $ROOT/projectname.cfg \"$@\"\nexit $?\n  ```\n\n6. 让该脚本可执行：\n\n  ```\n$ chmod +x bin/odoo \n  ```\n\n7. 创建一个空的本地模块dummy：\n\n```\n$ mkdir -p local/dummy\n$ touch local/dummy/__init__.py\n$ echo '{\"name\": \"dummy\", \"installable\": False}' >\\local/dummy/__manifest__.py \n```\n\n8. 为你的实例生成配置文件：\n\n\n\n```\n$ bin/odoo --stop-after-init --save \\ --addons-path src/odoo/odoo/addons,src/odoo/addons,local \\ --data-dir filestore \n```\n\n9. 添加一个.gitignore文件，用于告诉GitHub排除这些给定目录，这样Git在提交代码时就会忽略掉这些目录，例如 filestore/, env/, logs/和src/：\n\n```bash\n# dotfiles, with exceptions:\n.*\n!.gitignore\n# python compiled files\n*.py[co]\n# emacs backup files\n*~\n# not tracked subdirectories\n/env/\n/src/\n/filestore/\n/logs/\n```\n\n10. 为这个实例创建一个Git仓库并将已添加的文件添加到Git中：\n\n```bash\n$ git init\n$ git add .\n$ git commit -m \"initial version of projectname\"\n```\n\n### 运行原理…\n\n我们生成了一个有明确标签目录和独立角色的干净的目录结构。我使用了不同的目录来存储如下内容：\n\n- 由其它人所维护的代码（src/中）\n- 本地相关的具体代码\n- 实例的文件存储\n\n通过为每个项目建一个virtualenv环境，我们可以确保该项目的依赖文件不会与其它项目的依赖产生冲突，这些项目你可能运行着不同的Odoo版本或使用了不同的第三方插件模块，这将需要不同版本的Python依赖。这当然也会带来一部分磁盘空间的开销。\n\n以类似的方式，通过为我们不同的项目使用不同的Odoo拷贝以及第三方插件模块，我们可以让每个项目单独的进行推进并仅在需要时在这些实例上安装更新，因此也减少了引入回退的风险。\n\nbin/odoo允许我们不用记住各个路径或激活虚拟环境就可以运行服务。这还为我们设置了配置文件。你可以在其中添加其它脚本来协助你的日常工作。例如，你可以添加一个脚本来检查运行实例所需的第三方项目。\n\n有关配置文件，我们仅展示了这里需要设置的最小化选项，但很明显你可以设置更多，例如数据库名、数据库过滤器或项目所监听的端口。有关这一话题的更多信息，请参见[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)。\n\n最后，通过在Git仓库中管理所有这些，在不同的电脑上复制这一设置及在团队中分享开发内容变得相当容易。\n\n> **小贴士：**加速贴士\n>\n> 要加速项目的创建，你可以创建一个包含空结构的模板仓库，并为每个项目复制（fork）该仓库。这会省却你重新输入bin/odoo脚本、.gitignore及其它所需模板文件（持续集成配置、README.md、ChangeLog等等）所花费的时间。\n\n### 参见内容\n\n如果你喜欢这种方法，我们建议你尝试[第三章 服务器部署](https://alanhou.org/server-deployment/)中的使用 Docker 运行 Odoo 一部分的内容。\n\n### 扩展知识…\n\n复杂模块的开发要求有各类配置选项，在想要尝试任何配置选项时都会要更新配置文件。更新配置常常是一件头痛的事，避免它的一种方式是通过命令行传递所有配置选项，如下：\n\n1. 手动激活虚拟环境：\n\n```bash\n$ source env/bin/activate\n```\n\n2. 进行Odoo源代码目录：\n\n```bash\n$ cd src/odoo\n```\n\n3. 运行服务：\n\n```bash\n./odoo-bin --addons-path=addons,../../local -d test-12 -i account,sale,purchase --log-level=debug\n```\n\n第三步中，我们直接通过命令行传递了一些参数。第一个是–addons-path，它加载Odoo的核心插件目录addons，以及你自己的插件目录local，在其中你可以放自己的插件模块。选项-d会使用test-12数据库或者在该数据库不存在时新建一个数据库。选项-i 会安装会计、销售和采购模块。接着，我们传递了log-level选项来将日志级别提升为debug，这样日志中会显示更多的信息。\n\n> ℹ️通过使用命令行，你可以快速地修改配置选项。你也可以在Terminal中查看实时日志。所有可用选项可参见[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)，或使用-help命令来查看所有的选项列表及各个选项的描述。\n\n## 安装并升级本地插件模块\n\nOdoo 功能的核心来自于它的插件模块。Odoo自带的插件是你所拥有的财富，同时你也可以在应用商店下载一些插件模块或者自己写。\n\n这一部分中，我们将展示如何通过网页界面及命令行来安装并升级插件模块。\n\n对这些操作使用命令行的主要好处包含可以同时作用于一个以上的插件以及在安装或升级的过程中可以清晰地浏览到服务端日志，对于开发模式或编写脚本安装实例时都非常有用。\n\n### 准备工作\n\n确保你有一个运行中的 Odoo 实例，且数据库已初始化、插件路径已进行恰当地设置。在这一部分中，我们将安装/升级一些插件模块。\n\n### 如何安装升级…\n\n安装或升级插件有两种方法-可以使用网页界面或命令行。\n\n#### 通过网页界面\n\n可按照如下步骤来使用网页界面安装新的插件模块到数据库中：\n\n1. 使用管理员账户连接实例并打开Apps菜单\n   [![Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906002399.jpg)](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906002399.jpg)\n2. 使用搜索框来定位你想要安装的插件。这里有一些帮助你完成该任务的操作指南：\n   - 激活Not Installed过滤器\n   - 如果你要查找一个具体的功能插件而不是广泛的功能插件，删除Apps过滤器\n   - 在搜索框中输入模块名的一部分并使用它来作为模块过滤器\n   - 你会发现使用列表视图可以阅读到更多的信息\n3. 点击卡片中模块名下的Install按钮。\n\n注意有些Odoo插件模块需要有外部Python依赖，如果你的系统中未安装该Python依赖，那么 Odoo 会中止安装并显示如下的对话框：\n\n[![Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906125210.jpg)](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906125210.jpg)\n**译者注：**按正常安装不会出现一错误，需通过 pip uninstall pyldap 才能复现这一错误\n\n修复这一问题，仅需在你的系统中安装相关的Python依赖即可。\n\n要升级已安装到数据库的模块，使用如下步骤：\n\n1. 使用管理员账户连接到实例\n2. 打开Apps菜单\n3. 点击Apps:\n   [![Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906203077.jpg)](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906203077.jpg)\n4. 使用搜索框来定位你所安装的插件。有如下的小贴士：\n   - 激活Installed过滤器\n   - 如果你要查找一个具体的功能插件而不是广泛的功能插件，删除Apps过滤器\n   - 在搜索框中输入部分插件模块的名称并按下 Enter 来使用它作为模块过滤器。例如，输入CRM并按下 Enter 来搜索CRM应用\n   - 你会发现使用列表视图可以阅读到更多的信息\n5. 点击卡片右上角的的三个点，然后点击Upgrade选项：\n\n[![Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906265357.jpg)](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906265357.jpg)\n\n激活开发者模式来查看模块的技术名称。如果你不知道如何激活开发者模式，请参见[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)：\n\n[![Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906302261.jpg)](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906302261.jpg)\n\n在激活开发者模式之后，它会以红色显示模块的技术名称。如果你使用的是Odoo社区版，会看到一些带有Upgrade的附加应用。这些是Odoo企业版的应用，要想安装/使用它们，需要购买一个证书。\n\n#### 通过命令行\n\n要在你的数据库中安装新插件，可按照如下步骤：\n\n1. 查找插件的名称。这是包含__manifest__.py文件的目录名，不带前面的路径。\n\n2. 停止实例。如果你在操作生产数据库，请进行备份。\n\n3. 运行如下命令：\n\n   ```bash\n   odoo/odoo-bin -c instance.cfg -d dbname -i addon1,addon2 --stop-after-init\n   ```\n\n\n   译者注：\n\n   请将addon1,addon2替换为你所要安装的插件名\n\n\n\n   > **小贴士：**你可以省略掉-d dbname，因为这在配置文件中进行了设置。\n\n4. 重新启动实例\n\n### 运行原理…\n\n插件模块的安装和升级是两个紧密关联的操作，但有一些重要的区别，在下面两部分中进行了强调：\n\n#### 插件安装\n\n在你安装插件时，Odoo以提供的名称检查它的可用插件列表中未安装插件。它还会检查该插件的依赖，并且如果有依赖的话，它会在安装插件前递归安装这些依赖。\n\n单个模块的安装包含如下步骤：\n\n1. 如果存在，运行插件preinit钩子\n2. 从Python源代码中加载模型定义并在必要时更新数据库结构（参见[第五章 应用模型](https://alanhou.org/application-models/)了解更多信息）\n3. 加载插件的数据文件并在必要时更新数据库内容（参见[第七章 模块数据](https://alanhou.org/odoo12-module-data/)了解更多信息）\n4. 如果实例中启用了演示数据则安装插件演示数据\n5. 如果存在，运行插件postinit钩子\n6. 运行对插件视图定义的验证\n7. 如果启用了演示数据并启用了测试，运行该插件的测试（参见[第十八章 自动化测试用例](https://alanhou.org/automated-test-cases/)了解更多信息）\n8. 在数据库中更新模块状态\n9. 从插件的翻译文件中更新数据库中的翻译（参见[第十二章 国际化](https://alanhou.org/internationalization/)了解更多信息）\n\n> ℹ️preinit和postinit钩子分别使用pre_init_hook和post_init_hook键名在__manifest__.py文件中定义。这些钩子用于在插件模块的安装之前及之后触发Python函数。参见[第四章 创建Odoo插件模块](https://alanhou.org/creating-odoo-add-on-modules/)了解更多有关 init 钩子的知识。\n\n#### 插件升级\n\n升级插件时，Odoo以给定的名称在可用的插件模块列表中检查已安装插件。它还会检查该插件的反向依赖（即依赖于所升级插件的那些插件）。如果存在，则也会对它们进行递归升级。\n\n单个插件模块的升级过程包含如下步骤：\n\n1. 如果有的话，先运行插件模块的预迁移步骤（参见[第七章 模块数据](https://alanhou.org/odoo12-module-data/)了解更多信息）\n2. 从Python源码中加载模型定义并在必要时更新数据库结构（参见[第五章 应用模型](https://alanhou.org/application-models/)了解更多信息）\n3. 加载插件的数据文件并在必要时更新数据库内容（参见[第七章 模块数据](https://alanhou.org/odoo12-module-data/)了解更多信息）\n4. 如果实例中启用了演示数据更新插件演示数据\n5. 如果模块有任何迁移方法的话，先运行插件模块的后置迁移步骤（参见[第七章 模块数据](https://alanhou.org/odoo12-module-data/)了解更多信息）\n6. 运行对插件视图定义的验证\n7. 如果启用了演示数据并启用了测试，运行该插件的测试（参见[第十八章 自动化测试用例](https://alanhou.org/automated-test-cases/)了解更多信息）\n8. 在数据库中更新模块状态\n9. 从插件的翻译文件中更新数据库中的翻译（参见[第十二章 国际化](https://alanhou.org/internationalization/)了解更多信息）\n\n> ℹ️注意更新未安装的插件模块什么也不会做。但是安装已安装的插件模块会重新安装该插件，这会通过一些包含数据的数据文件产生一些预期外的问题，这些文件可能应由用户进行更新而非在常规的模块升级处理时进行更新（参见[第七章 模块数据](https://alanhou.org/odoo12-module-data/)中使用noupdate和forcecreate标记部分的内容）。通过用户界面不存在错误的风险，但通过命令行时则有可能发生。\n\n### 扩展知识…\n\n要当心依赖的处理。假定有一个实例你想要安装sale、sale_stock和sale_specific插件，sale_specific依赖于sale_stock，而sale_stock依赖于sale。要安装这三者，你只需要安装sale_specific，因为它会递归安装sale_stock和sale这两个依赖。要升级这两者，你需要升级sale，因为这样会递归升级其反向依赖，sale_stock和sale_specific。\n\n管理依赖另一个比较搞的地方是在你向已经有一个版本安装了的插件添加依赖的时候。我们继续通过前例来理解这一问题。想像一下你在sale_specific中添加了一个对stock_dropshipping的依赖。更新sale_specific插件不会自动安装新的依赖，也会要求安装sale_specific。在这种情况下，你会收到非常糟糕的错误消息，因为插件的Python代码没有成功的加载，而插件的数据和模型表则存在于数据库中。要解决这一问题，你需要停止该实例并手动安装新的依赖。\n\n## 从GitHub安装插件模块\n\nGitHub是第三方插件的一个很好的来源。很多Odoo合作伙伴使用GitHub来分享他们内部维护的插件，而Odoo社区联盟（OCA）在GitHub上共同维护着几百个插件。在你开始编写自己的插件之前，确保查看是否已有可用的插件或者作为初始以继续扩展插件。\n\n这一部分向你展示如何从GitHub上克隆OCA的partner-contact项目并让其中所包含的插件模块在我们实例中可用。\n\n### 准备工作\n\n假设你想要改变你的实例中地址的处理方式，你的客户需要在Odoo两个字段（街道和街道2）之外的第三个字段来存储地址。你肯定是可以编写自己的插件来为res.partne添加一个字段的，但如果想要让地址在发票上以合适的格式显示，问题就要比看上去麻烦一些了。所幸，你邮件列表上的某个人告诉了你partner_address_street3插件，由OCA作为partner-contact项目的一部分进行维护。\n\n本部分中所使用的路径反映了我们在*标准化你的实例目录布局*一节中所推荐的布局。\n\n### 如何安装…\n\n按照如下步骤来安装partner_address_street3：\n\n1. 进入你的项目目录：\n\n```bash\n$ cd ~/odoo-dev/my-odoo/src\n```\n\n\n\n2. 在src/目录中克隆partner-contact项目的12.0分支：\n\n```bash\n$ git clone --branch 12.0 \\https://github.com/OCA/partner-contact.git src/partner-contact\n```\n\n\n\n3. 修改插件路径来包含该目录并更新你的实例中的插件列表（参见本章中的配置插件路径和更新插件模块列表一节）。instance.cfg中的addons_path一行应该是这样的：\n\n   ```\n   addons_path = ~/odoo-dev/my-odoo/src/odoo/odoo/addons, \\~/odoo-dev/my-odoo/src/odoo/addons, \\~/odoo-dev/my-odoo/src/, \\~/odoo-dev/local-addons\n   ```\n\n4. 安装partner_address_street3插件（如果你不知道如何安装该模块，参见前面一节，安装并升级本地插件模块）\n\n### 运行原理…\n\n所有 Odoo社区联盟的代码仓库都将他们自己的插件放在单独的目录中，这与Odoo对插件路径中目录的预期是相一致的。因此，只需复制某处的仓库并将其添加到插件路径中就够了。\n\n### 扩展知识…\n\n有些维护者遵循不同的方法，每个插件模块一个仓库，放在仓库的根目录下。这种情况下，你需要创建一个新的目录，在这个目录中添加插件路径并克隆你所需的维护者的插件到该目录中。记住在每次添加一个新仓库拷贝时要更新插件模块列表。\n\n## 对插件应用修改\n\nGitHub上可用的大部分插件需要进行修改并且不遵循Odoo对其稳定发行版所强制的规则。它们可能收到漏洞修复或改善，包含你提交的问题或功能请求，这些修改可能会引入数据库模式的修改或数据文件和视图中的更新。这一部分讲解如何安装升级后的版本。\n\n### 准备工作\n\n假定你对partner_address_street3报告了一个问题并收到通知说该问题已在partner-contact项目12.0分支的最近一次修订中得以解决。这种情况下，你可以使用最新版本来更新你的实例。\n\n### 如何修改…\n\n要对GitHub的插件进行源的变更，需执行如下步骤：\n\n1. 停止使用该插件的实例。\n\n2. 如果是生产实例请做一个备份（参见[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)中*管理Odoo服务端数据库*一节）。\n\n3. 进入克隆了partner-contact的目录：\n\n```bash\n$ cd ~/odoo-dev/my-odoo/src/partner-contact\n```\n\n\n\n4. 为该项目创建一个本地标签，这样万一出现了崩溃你可以进行回退：\n\n```bash\n$ git checkout 12.0$ git tag 12.0-before-update-$(date --iso)\n```\n\n\n\n4. 获取源码的最新版本：\n\n```bash\n$ git pull --ff-only\n```\n\n\n\n6. 在你的数据库中更新partner_address_street3插件（参见*安装并升级本地插件模块*一节）\n\n7. 重启实例\n\n### 运行原理…\n\n通常，插件模块的开发者有时会发布插件的最新版本。这一更新一般包含漏洞修复及新功能。这里，我们将获取一个插件的新版本并在我们的实例中更新它。\n\n如果git pull –ff-only失败的话，你可以使用如下命令回退到前一个版本：\n\n```bash\n$  git reset --hard 12.0-before-update-$(date --iso)\n```\n\n\n\n然后，你可以尝试git pull（不添加–ff-only），它会产生一个合并，但这表示你对插件做了本地修改。\n\n### 扩展知识…\n\n如果更新这一步崩溃了，参见[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)*从源码更新Odoo*一节获取恢复的操作指南。记住要总是在一个生产数据库的拷贝上先进行测试。\n\n## 应用及尝试建议的拉取请求\n\n在GitHub的世界中，拉取请求（PR）是由开发者所提交的请求，这样项目维护人员可以添加一些新的开发。比如一个 PR 可能包含漏洞修复或新功能。这里请求在拉取到主分支之前会进行审核和测试。\n\n这一部分讲解如何对你的 Odoo 项目应用一个PR来测试漏洞修复的改进。\n\n### 准备工作\n\n在前一节中，假定你对partner_address_street3 报告了一个问题并收到一条通知在拉取请求中问题已修复，尚未合并到项目的12.0分支中。开发人员要求你验证PR #123中的修复状况。你需要使用这一分支更新一个测试实例。\n\n你不应在生产数据库直接使用该分支，因此先创建一个带有生产数据库拷贝的测试环境（参见[第一章 安装Odoo开发环境](https://alanhou.org/installing-odoo-development-environment/)和[第三章 服务器部署](https://alanhou.org/server-deployment/)）。\n\n### 如何操作…\n\n应用并测试一个插件的GitHub拉取请求，你需要执行如下步骤：\n\n1. 停止实例\n\n2. 进入partner-contact所被克隆的目录：\n\n```bash\n$ cd ~/odoo-dev/my-odoo/src/partner-contact\n```\n\n\n\n3. 为该项目创建一个本地标签，这样万一出现崩溃时你可以回退：\n\n```bash\n$  git checkout 12.0$ git tag 12.0-before-update-$(date --iso\n```\n\n\n\n4. 拉取pull请求的分支。这么做最容易的方式是使用PR编号，在开发者与你沟通时你应该可以看到。在本例中，这个拉取请求编号是123：\n\n```bash\n$ git pull origin pull/123/head\n```\n\n\n\n5. 在你的数据库中更新partner_address_street3插件模块并重启该实例（如果你不知道如何更新该模块的话请参见*安装并升级本地插件模块*一节）\n\n6. 测试该更新 – 尝试重现问题，或测试你想要的功能。\n\n如果这不能运行，在GitHub的PR页面进行评论，说明你做了什么以及什么不能运行，这样开发者可以更新这个拉取请求。\n\n如果它没有问题，也在PR页面说下；这是PR验证流程中非常重要的一部分；这会加速主分支中的合并。\n\n### 运行原理…\n\n我们在使用一个GitHub功能，使用pull/nnnn/head分支名称来通过编号进行拉取请求的拉取，其中nnnn是PR的编号。Git pull命令合并远程分支到我们的分支，在我们基础代码中应用修改。在这之后，我们更新插件模块、对其测试并向作者报回修改是成功或是失败。\n\n### 扩展知识…\n\n如果你想要同步测试它们，你可以针对相同仓库的不同拉取请求重复本节中的第4步。如果你对结果很满意，你可以创建一个分支来保留对应用了改变的结果的引用：\n\n```bash\n$ git checkout -b 12.0-custom\n```\n\n\n\n使用一个不同的分支会帮助你记住你没有从GitHub使用该版本，而是一个自定义的版本。\n\n> ℹ️git branch命令可用于列出你仓库中的所有本地分支。\n\n从这开始，如果你需要应用来自GitHub中12.0分支的最近一个审核版本，你需要不使用–ff-only来拉取它：\n\n```bash\n$ git pull origin 12.0\n```\n\n\n\n","slug":"odoo/Odoo 12开发者指南第二章 管理Odoo服务器实例","published":1,"updated":"2020-08-27T15:25:49.129Z","comments":1,"photos":[],"link":"","_id":"ckgepblpe00774tjegahwo0h6","content":"<p>全书完整目录请见：<a href=\"https://alanhou.org/odoo12-cookbook/\" target=\"_blank\" rel=\"noopener\">Odoo 12开发者指南（Cookbook）第三版</a></p>\n<p>本章中，我们将讲解如下内容：</p>\n<ul>\n<li>配置插件路径</li>\n<li>更新插件模块列表</li>\n<li>标准化你的实例目录布局</li>\n<li>安装并升级本地插件模块</li>\n<li>对插件应用修改</li>\n<li>应用及尝试建议的拉取请求</li>\n</ul>\n<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>在<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>中，我们看了如何使用与编辑器一同发布的标准核心插件来设置 Odoo 实例。本章集中讲解为 Odoo 实例添加非核心插件。Odoo中，你可以从多个目录中加载插件。此外，推荐你将第三方插件（如OCA模块）或你自定义的插件放在一个单独的文件夹中，这样可以避免与 Odoo 核心模块产生冲突。甚至Odoo 企业版也是一种类型的插件目录，你需要像普通插件目录一样加载它。</p>\n<blockquote>\n<p>ℹ️<strong>有关用词 – 插件(add-on) vs. 模块(module)</strong></p>\n<p>本书中，我们使用插件或插件模块来指代 Odoo 所预期安装的 Python 包。用户界面常使用应用（app）或模块的表达 ，但我们更愿意保留模块一词来表示Python模块或包，它们不一定是 Odoo 插件，而应用（app）来表示适当定义为应用的插件模块，表示它不是Odoo主菜单中的入口。</p>\n</blockquote>\n<h2 id=\"配置插件路径\"><a href=\"#配置插件路径\" class=\"headerlink\" title=\"配置插件路径\"></a>配置插件路径</h2><p>通过addons_path参数的配置，你可以在 Odoo 中加载自己的插件模块。在Odoo初始化一个新数据库时，它会搜索在addons_path配置参数中给定的这些目录。addons_path会在这些目录中搜索潜在的插件模块。addons_path中所列出的目录预期应包含子目录，每个子目录是一个插件模块。在数据库初始化完成后，你将能够安装这些目录中所给出的模块。</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>这一部分假定你已经准备好了实例并生成了配置文件，如在<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>中<em>在一个文件中存储实例配置</em>一节所描述。Odoo的源码存放在~/odoo-dev/odoo中，而配置文件存放在~/odoo-dev/myinstance.cfg中。</p>\n<h3 id=\"如何配置…\"><a href=\"#如何配置…\" class=\"headerlink\" title=\"如何配置…\"></a>如何配置…</h3><p>按如下步骤在实例的addons_path中添加~/odoo-dev/local-addons目录：</p>\n<ol>\n<li><p>编辑你的实例的配置文件，即 ~/odoo-dev/my-instance.cfg。</p>\n</li>\n<li><p>定位到以addons_path =开头一行，默认，你会看到如下内容：</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addons_path = ~/odoo-dev/odoo/odoo/addons,~/odoo-dev/odoo/add-ons</span><br></pre></td></tr></table></figure>\n<p>   译者注：</p>\n<p>   当前默认生成的配置文件中为绝对路径，且仅包含xxx/odoo/addons</p>\n<ol start=\"3\">\n<li>修改该行，添加一个逗号（英文半角），并接你想想要添加为addons_的目录名称，如以下代码所示：</li>\n</ol>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addons_path = ~/odoo-dev/odoo/odoo/addons,~/odoo-dev/odoo/addons,~/odoo-dev/local-addons</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><p>重启你的实例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ~/odoo-dev/odoo/odoo-bin -c my-instance.cfg</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"运行原理…\"><a href=\"#运行原理…\" class=\"headerlink\" title=\"运行原理…\"></a>运行原理…</h3><p>在重启 Odoo 时，会读取配置文件。addons_path变量的值应为一个逗号分隔的目录列表。可接受相对路径，但它们是相对于当前工作目录的，因此应在配置文件中尽量避免。</p>\n<p>至此，~/odoo-dev/local-addons中包含的新插件尚不在该实例的可用模块列表中。为此，你需要执行一个额外的操作，在下一部分<em>更新插件模块列表</em>中会进行讲解。</p>\n<h3 id=\"扩展知识…\"><a href=\"#扩展知识…\" class=\"headerlink\" title=\"扩展知识…\"></a>扩展知识…</h3><p>在第一次调用 odoo-bin脚本来初始化新数据库时，你可以传递一个带逗号分隔目录列表的–addons-path命令行参数。这会以所提供插件路径中所找到的所有插件来初始化可用插件模块列表。这么做时，你要显式地包含基础插件目录（odoo/odoo/addons）以及核心插件目录（odoo/addons）。</p>\n<p>与前面稍有不同的是本地插件目录不能为空（<strong>译者注：</strong>请先阅读下面的小贴士），它必须要至少包含一个子目录，并包含插件模块的最小化结构。在<a href=\"https://alanhou.org/creating-odoo-add-on-modules/\" target=\"_blank\" rel=\"noopener\">第四章 创建Odoo插件模块</a>中，我们会来看如何编写你自己的模块。同时，这里有一个生成内容来满足Odoo要求的快捷版黑科技：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p ~/odoo-dev/local-addons/dummy$ touch ~/odoo-dev/local-addons/dummy/__init__.py$ echo &apos;&#123;&quot;name&quot;: &quot;dummy&quot;, &quot;installable&quot;: False&#125;&apos; &gt; \\~/odoo-dev/local-addons/dummy/__manifest__.py</span><br></pre></td></tr></table></figure>\n<p>你可以使用–save选项来保存配置文件的路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ odoo/odoo-bin -d mydatabase \\--add-ons-path=&quot;odoo/odoo/addons,odoo/addons,~/odoo-dev/local-addons&quot; \\--save -c ~/odoo-dev/my-instance.cfg --stop-after-init</span><br></pre></td></tr></table></figure>\n<p>本例中，使用相对路径不会有问题，因为它们会在配置文件中转化为绝对路径。</p>\n<blockquote>\n<p><strong>小贴士：</strong>因为Odoo仅当从命令行中设置路径时在插件路径的目录中查看插件，而不是在从配置文件中加载路径的时候，dummy已不再必要。因此，你可以删除它（或保留到你确定不需要新建一个配置文件时）。</p>\n</blockquote>\n<h2 id=\"更新插件模块列表\"><a href=\"#更新插件模块列表\" class=\"headerlink\" title=\"更新插件模块列表\"></a>更新插件模块列表</h2><p>我们在前面的部分已经说到，在向插件路径添加目录时，仅仅重启Odoo服务是不足以安装其中一个新插件模块的。Odoo还需要有一个指定动作来扫描路径并更新可用插件模块的列表。</p>\n<h3 id=\"准备工作-1\"><a href=\"#准备工作-1\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>启动你的实例并使用管理员账号连接它。然后，激活开发者模式（如果你不知道如何激活开发者模式，请参见<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>）。</p>\n<h3 id=\"如何更新…\"><a href=\"#如何更新…\" class=\"headerlink\" title=\"如何更新…\"></a>如何更新…</h3><p>要更新你实例中的可用插件模块列表，你需要执行如下步骤：</p>\n<ol>\n<li>打开Apps菜单</li>\n<li>点击Update Apps List：<br>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902052063.jpg\" alt=\"Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902052063.jpg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902052063.jpg)</div>\n            </figure></li>\n<li>在弹出对话框中，点击Update按钮：<br>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902070776.jpg\" alt=\"Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902070776.jpg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902070776.jpg)</div>\n            </figure></li>\n<li>在更新的最后，你可以点击Apps入口来查看已更新的可用插件模块列表。你将需要删除Apps搜索框中的默认过滤器来查看所有模块。</li>\n</ol>\n<h3 id=\"运行原理…-1\"><a href=\"#运行原理…-1\" class=\"headerlink\" title=\"运行原理…\"></a>运行原理…</h3><p>在点击了Update按钮之后，Odoo会读取插件路径配置变量。对于列表中的每一个目录，它会查看包含保存在插件模块目录中名为<strong>manifest</strong>.py的插件声明文件的直接子目录。Odoo读取声明内容，并预期查找其中的Python字典。除非声明内容中包含一个键installable的值为False，插件模块的元数据就会存储在数据库中。如果模块已存在，则更新相关信息。否则，会创建一条新记录。如果此前可用的插件模块未找到，则从列表中删除该记录。</p>\n<blockquote>\n<p>ℹ️仅在初始化数据库后添加了新的插件路径时才需要更新应用列表。如果你在初始化数据库之前在配置文件中添加了新插件路径，那么就无需手动更新模块列表。</p>\n</blockquote>\n<h2 id=\"标准化你的实例目录布局\"><a href=\"#标准化你的实例目录布局\" class=\"headerlink\" title=\"标准化你的实例目录布局\"></a>标准化你的实例目录布局</h2><p>我们推荐你在开发和生产环境都使用相似的目录布局。这一标准化会在你要执行运维时体现出用处，它也会缓解你日常工作的压力。</p>\n<p>这一部分创建将相似生命周期或相似用途的文件分组放在标准化子目录中的目录结构。请自由按照自己的需求来调整这一结构，但请确保你将这一结构在某处进行记录存档。</p>\n<h3 id=\"如何标准化…\"><a href=\"#如何标准化…\" class=\"headerlink\" title=\"如何标准化…\"></a>如何标准化…</h3><p>创建所推荐实例布局，你需要执行如下步骤：</p>\n<p><strong>译者注：</strong>读者也可直接使用 Alan 在 GitHub 上准备的<a href=\"https://github.com/alanhou/odoo12-cookbook/tree/master/Chapter02\" target=\"_blank\" rel=\"noopener\">安装脚本</a>进行操作</p>\n<ol>\n<li><p>为实例创建一个目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir ~/odoo-dev/projectname$ cd ~/odoo-dev/projectname</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在名为env/的子目录中创建一个Python虚拟环境：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ virtualenv -p python3 env</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一些子目录，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir src local bin filestore logs</span><br></pre></td></tr></table></figure>\n<p>这些子目录的功能如下：</p>\n<ul>\n<li>src/：这包含Odoo本身的一个拷贝，以及一些第三方插件项目（我们在下一步中添加了Odoo源码）</li>\n<li>local/：这用于保存你针对具体实例的插件</li>\n<li>bin/：这包含各类帮助可执行shell脚本</li>\n<li>filestore/：这用于文件存储</li>\n<li>logs/（可选）：这用于存储服务日志文件</li>\n</ul>\n</li>\n<li><p>克隆Odoo并安装所需依赖包（参见</p>\n<p>第一章 安装Odoo开发环境</p>\n<p>获取更多内容）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/odoo/odoo.git src/odoo</span><br><span class=\"line\">$ env/bin/pip3 install -r src/odoo/requirements.txt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>以bin/odoo保存如下shell脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ROOT=$(dirname <span class=\"variable\">$0</span>)/..</span><br><span class=\"line\">PYTHON=<span class=\"variable\">$ROOT</span>/env/bin/python3</span><br><span class=\"line\">ODOO=<span class=\"variable\">$ROOT</span>/src/odoo/odoo-bin</span><br><span class=\"line\"><span class=\"variable\">$PYTHON</span> <span class=\"variable\">$ODOO</span> -c <span class=\"variable\">$ROOT</span>/projectname.cfg <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> $?</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>让该脚本可执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod +x bin/odoo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个空的本地模块dummy：</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p local/dummy</span><br><span class=\"line\">$ touch local/dummy/__init__.py</span><br><span class=\"line\">$ echo &apos;&#123;&quot;name&quot;: &quot;dummy&quot;, &quot;installable&quot;: False&#125;&apos; &gt;\\local/dummy/__manifest__.py</span><br></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>为你的实例生成配置文件：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/odoo --stop-after-init --save \\ --addons-path src/odoo/odoo/addons,src/odoo/addons,local \\ --data-dir filestore</span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>添加一个.gitignore文件，用于告诉GitHub排除这些给定目录，这样Git在提交代码时就会忽略掉这些目录，例如 filestore/, env/, logs/和src/：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># dotfiles, with exceptions:</span></span><br><span class=\"line\">.*</span><br><span class=\"line\">!.gitignore</span><br><span class=\"line\"><span class=\"comment\"># python compiled files</span></span><br><span class=\"line\">*.py[co]</span><br><span class=\"line\"><span class=\"comment\"># emacs backup files</span></span><br><span class=\"line\">*~</span><br><span class=\"line\"><span class=\"comment\"># not tracked subdirectories</span></span><br><span class=\"line\">/env/</span><br><span class=\"line\">/src/</span><br><span class=\"line\">/filestore/</span><br><span class=\"line\">/logs/</span><br></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>为这个实例创建一个Git仓库并将已添加的文件添加到Git中：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"initial version of projectname\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"运行原理…-2\"><a href=\"#运行原理…-2\" class=\"headerlink\" title=\"运行原理…\"></a>运行原理…</h3><p>我们生成了一个有明确标签目录和独立角色的干净的目录结构。我使用了不同的目录来存储如下内容：</p>\n<ul>\n<li>由其它人所维护的代码（src/中）</li>\n<li>本地相关的具体代码</li>\n<li>实例的文件存储</li>\n</ul>\n<p>通过为每个项目建一个virtualenv环境，我们可以确保该项目的依赖文件不会与其它项目的依赖产生冲突，这些项目你可能运行着不同的Odoo版本或使用了不同的第三方插件模块，这将需要不同版本的Python依赖。这当然也会带来一部分磁盘空间的开销。</p>\n<p>以类似的方式，通过为我们不同的项目使用不同的Odoo拷贝以及第三方插件模块，我们可以让每个项目单独的进行推进并仅在需要时在这些实例上安装更新，因此也减少了引入回退的风险。</p>\n<p>bin/odoo允许我们不用记住各个路径或激活虚拟环境就可以运行服务。这还为我们设置了配置文件。你可以在其中添加其它脚本来协助你的日常工作。例如，你可以添加一个脚本来检查运行实例所需的第三方项目。</p>\n<p>有关配置文件，我们仅展示了这里需要设置的最小化选项，但很明显你可以设置更多，例如数据库名、数据库过滤器或项目所监听的端口。有关这一话题的更多信息，请参见<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>。</p>\n<p>最后，通过在Git仓库中管理所有这些，在不同的电脑上复制这一设置及在团队中分享开发内容变得相当容易。</p>\n<blockquote>\n<p><strong>小贴士：</strong>加速贴士</p>\n<p>要加速项目的创建，你可以创建一个包含空结构的模板仓库，并为每个项目复制（fork）该仓库。这会省却你重新输入bin/odoo脚本、.gitignore及其它所需模板文件（持续集成配置、README.md、ChangeLog等等）所花费的时间。</p>\n</blockquote>\n<h3 id=\"参见内容\"><a href=\"#参见内容\" class=\"headerlink\" title=\"参见内容\"></a>参见内容</h3><p>如果你喜欢这种方法，我们建议你尝试<a href=\"https://alanhou.org/server-deployment/\" target=\"_blank\" rel=\"noopener\">第三章 服务器部署</a>中的使用 Docker 运行 Odoo 一部分的内容。</p>\n<h3 id=\"扩展知识…-1\"><a href=\"#扩展知识…-1\" class=\"headerlink\" title=\"扩展知识…\"></a>扩展知识…</h3><p>复杂模块的开发要求有各类配置选项，在想要尝试任何配置选项时都会要更新配置文件。更新配置常常是一件头痛的事，避免它的一种方式是通过命令行传递所有配置选项，如下：</p>\n<ol>\n<li>手动激活虚拟环境：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> env/bin/activate</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>进行Odoo源代码目录：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> src/odoo</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>运行服务：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./odoo-bin --addons-path=addons,../../<span class=\"built_in\">local</span> -d <span class=\"built_in\">test</span>-12 -i account,sale,purchase --<span class=\"built_in\">log</span>-level=debug</span><br></pre></td></tr></table></figure>\n<p>第三步中，我们直接通过命令行传递了一些参数。第一个是–addons-path，它加载Odoo的核心插件目录addons，以及你自己的插件目录local，在其中你可以放自己的插件模块。选项-d会使用test-12数据库或者在该数据库不存在时新建一个数据库。选项-i 会安装会计、销售和采购模块。接着，我们传递了log-level选项来将日志级别提升为debug，这样日志中会显示更多的信息。</p>\n<blockquote>\n<p>ℹ️通过使用命令行，你可以快速地修改配置选项。你也可以在Terminal中查看实时日志。所有可用选项可参见<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>，或使用-help命令来查看所有的选项列表及各个选项的描述。</p>\n</blockquote>\n<h2 id=\"安装并升级本地插件模块\"><a href=\"#安装并升级本地插件模块\" class=\"headerlink\" title=\"安装并升级本地插件模块\"></a>安装并升级本地插件模块</h2><p>Odoo 功能的核心来自于它的插件模块。Odoo自带的插件是你所拥有的财富，同时你也可以在应用商店下载一些插件模块或者自己写。</p>\n<p>这一部分中，我们将展示如何通过网页界面及命令行来安装并升级插件模块。</p>\n<p>对这些操作使用命令行的主要好处包含可以同时作用于一个以上的插件以及在安装或升级的过程中可以清晰地浏览到服务端日志，对于开发模式或编写脚本安装实例时都非常有用。</p>\n<h3 id=\"准备工作-2\"><a href=\"#准备工作-2\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>确保你有一个运行中的 Odoo 实例，且数据库已初始化、插件路径已进行恰当地设置。在这一部分中，我们将安装/升级一些插件模块。</p>\n<h3 id=\"如何安装升级…\"><a href=\"#如何安装升级…\" class=\"headerlink\" title=\"如何安装升级…\"></a>如何安装升级…</h3><p>安装或升级插件有两种方法-可以使用网页界面或命令行。</p>\n<h4 id=\"通过网页界面\"><a href=\"#通过网页界面\" class=\"headerlink\" title=\"通过网页界面\"></a>通过网页界面</h4><p>可按照如下步骤来使用网页界面安装新的插件模块到数据库中：</p>\n<ol>\n<li>使用管理员账户连接实例并打开Apps菜单<br>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906002399.jpg\" alt=\"Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906002399.jpg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906002399.jpg)</div>\n            </figure></li>\n<li>使用搜索框来定位你想要安装的插件。这里有一些帮助你完成该任务的操作指南：<ul>\n<li>激活Not Installed过滤器</li>\n<li>如果你要查找一个具体的功能插件而不是广泛的功能插件，删除Apps过滤器</li>\n<li>在搜索框中输入模块名的一部分并使用它来作为模块过滤器</li>\n<li>你会发现使用列表视图可以阅读到更多的信息</li>\n</ul>\n</li>\n<li>点击卡片中模块名下的Install按钮。</li>\n</ol>\n<p>注意有些Odoo插件模块需要有外部Python依赖，如果你的系统中未安装该Python依赖，那么 Odoo 会中止安装并显示如下的对话框：</p>\n<p>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906125210.jpg\" alt=\"Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906125210.jpg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906125210.jpg)</div>\n            </figure><br><strong>译者注：</strong>按正常安装不会出现一错误，需通过 pip uninstall pyldap 才能复现这一错误</p>\n<p>修复这一问题，仅需在你的系统中安装相关的Python依赖即可。</p>\n<p>要升级已安装到数据库的模块，使用如下步骤：</p>\n<ol>\n<li>使用管理员账户连接到实例</li>\n<li>打开Apps菜单</li>\n<li>点击Apps:<br>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906203077.jpg\" alt=\"Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906203077.jpg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906203077.jpg)</div>\n            </figure></li>\n<li>使用搜索框来定位你所安装的插件。有如下的小贴士：<ul>\n<li>激活Installed过滤器</li>\n<li>如果你要查找一个具体的功能插件而不是广泛的功能插件，删除Apps过滤器</li>\n<li>在搜索框中输入部分插件模块的名称并按下 Enter 来使用它作为模块过滤器。例如，输入CRM并按下 Enter 来搜索CRM应用</li>\n<li>你会发现使用列表视图可以阅读到更多的信息</li>\n</ul>\n</li>\n<li>点击卡片右上角的的三个点，然后点击Upgrade选项：</li>\n</ol>\n<p>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906265357.jpg\" alt=\"Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906265357.jpg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906265357.jpg)</div>\n            </figure></p>\n<p>激活开发者模式来查看模块的技术名称。如果你不知道如何激活开发者模式，请参见<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>：</p>\n<p>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906302261.jpg\" alt=\"Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906302261.jpg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906302261.jpg)</div>\n            </figure></p>\n<p>在激活开发者模式之后，它会以红色显示模块的技术名称。如果你使用的是Odoo社区版，会看到一些带有Upgrade的附加应用。这些是Odoo企业版的应用，要想安装/使用它们，需要购买一个证书。</p>\n<h4 id=\"通过命令行\"><a href=\"#通过命令行\" class=\"headerlink\" title=\"通过命令行\"></a>通过命令行</h4><p>要在你的数据库中安装新插件，可按照如下步骤：</p>\n<ol>\n<li><p>查找插件的名称。这是包含<strong>manifest</strong>.py文件的目录名，不带前面的路径。</p>\n</li>\n<li><p>停止实例。如果你在操作生产数据库，请进行备份。</p>\n</li>\n<li><p>运行如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">odoo/odoo-bin -c instance.cfg -d dbname -i addon1,addon2 --stop-after-init</span><br></pre></td></tr></table></figure>\n<p>译者注：</p>\n<p>请将addon1,addon2替换为你所要安装的插件名</p>\n</li>\n</ol>\n<blockquote>\n<p><strong>小贴士：</strong>你可以省略掉-d dbname，因为这在配置文件中进行了设置。</p>\n</blockquote>\n<ol start=\"4\">\n<li>重新启动实例</li>\n</ol>\n<h3 id=\"运行原理…-3\"><a href=\"#运行原理…-3\" class=\"headerlink\" title=\"运行原理…\"></a>运行原理…</h3><p>插件模块的安装和升级是两个紧密关联的操作，但有一些重要的区别，在下面两部分中进行了强调：</p>\n<h4 id=\"插件安装\"><a href=\"#插件安装\" class=\"headerlink\" title=\"插件安装\"></a>插件安装</h4><p>在你安装插件时，Odoo以提供的名称检查它的可用插件列表中未安装插件。它还会检查该插件的依赖，并且如果有依赖的话，它会在安装插件前递归安装这些依赖。</p>\n<p>单个模块的安装包含如下步骤：</p>\n<ol>\n<li>如果存在，运行插件preinit钩子</li>\n<li>从Python源代码中加载模型定义并在必要时更新数据库结构（参见<a href=\"https://alanhou.org/application-models/\" target=\"_blank\" rel=\"noopener\">第五章 应用模型</a>了解更多信息）</li>\n<li>加载插件的数据文件并在必要时更新数据库内容（参见<a href=\"https://alanhou.org/odoo12-module-data/\" target=\"_blank\" rel=\"noopener\">第七章 模块数据</a>了解更多信息）</li>\n<li>如果实例中启用了演示数据则安装插件演示数据</li>\n<li>如果存在，运行插件postinit钩子</li>\n<li>运行对插件视图定义的验证</li>\n<li>如果启用了演示数据并启用了测试，运行该插件的测试（参见<a href=\"https://alanhou.org/automated-test-cases/\" target=\"_blank\" rel=\"noopener\">第十八章 自动化测试用例</a>了解更多信息）</li>\n<li>在数据库中更新模块状态</li>\n<li>从插件的翻译文件中更新数据库中的翻译（参见<a href=\"https://alanhou.org/internationalization/\" target=\"_blank\" rel=\"noopener\">第十二章 国际化</a>了解更多信息）</li>\n</ol>\n<blockquote>\n<p>ℹ️preinit和postinit钩子分别使用pre_init_hook和post_init_hook键名在<strong>manifest</strong>.py文件中定义。这些钩子用于在插件模块的安装之前及之后触发Python函数。参见<a href=\"https://alanhou.org/creating-odoo-add-on-modules/\" target=\"_blank\" rel=\"noopener\">第四章 创建Odoo插件模块</a>了解更多有关 init 钩子的知识。</p>\n</blockquote>\n<h4 id=\"插件升级\"><a href=\"#插件升级\" class=\"headerlink\" title=\"插件升级\"></a>插件升级</h4><p>升级插件时，Odoo以给定的名称在可用的插件模块列表中检查已安装插件。它还会检查该插件的反向依赖（即依赖于所升级插件的那些插件）。如果存在，则也会对它们进行递归升级。</p>\n<p>单个插件模块的升级过程包含如下步骤：</p>\n<ol>\n<li>如果有的话，先运行插件模块的预迁移步骤（参见<a href=\"https://alanhou.org/odoo12-module-data/\" target=\"_blank\" rel=\"noopener\">第七章 模块数据</a>了解更多信息）</li>\n<li>从Python源码中加载模型定义并在必要时更新数据库结构（参见<a href=\"https://alanhou.org/application-models/\" target=\"_blank\" rel=\"noopener\">第五章 应用模型</a>了解更多信息）</li>\n<li>加载插件的数据文件并在必要时更新数据库内容（参见<a href=\"https://alanhou.org/odoo12-module-data/\" target=\"_blank\" rel=\"noopener\">第七章 模块数据</a>了解更多信息）</li>\n<li>如果实例中启用了演示数据更新插件演示数据</li>\n<li>如果模块有任何迁移方法的话，先运行插件模块的后置迁移步骤（参见<a href=\"https://alanhou.org/odoo12-module-data/\" target=\"_blank\" rel=\"noopener\">第七章 模块数据</a>了解更多信息）</li>\n<li>运行对插件视图定义的验证</li>\n<li>如果启用了演示数据并启用了测试，运行该插件的测试（参见<a href=\"https://alanhou.org/automated-test-cases/\" target=\"_blank\" rel=\"noopener\">第十八章 自动化测试用例</a>了解更多信息）</li>\n<li>在数据库中更新模块状态</li>\n<li>从插件的翻译文件中更新数据库中的翻译（参见<a href=\"https://alanhou.org/internationalization/\" target=\"_blank\" rel=\"noopener\">第十二章 国际化</a>了解更多信息）</li>\n</ol>\n<blockquote>\n<p>ℹ️注意更新未安装的插件模块什么也不会做。但是安装已安装的插件模块会重新安装该插件，这会通过一些包含数据的数据文件产生一些预期外的问题，这些文件可能应由用户进行更新而非在常规的模块升级处理时进行更新（参见<a href=\"https://alanhou.org/odoo12-module-data/\" target=\"_blank\" rel=\"noopener\">第七章 模块数据</a>中使用noupdate和forcecreate标记部分的内容）。通过用户界面不存在错误的风险，但通过命令行时则有可能发生。</p>\n</blockquote>\n<h3 id=\"扩展知识…-2\"><a href=\"#扩展知识…-2\" class=\"headerlink\" title=\"扩展知识…\"></a>扩展知识…</h3><p>要当心依赖的处理。假定有一个实例你想要安装sale、sale_stock和sale_specific插件，sale_specific依赖于sale_stock，而sale_stock依赖于sale。要安装这三者，你只需要安装sale_specific，因为它会递归安装sale_stock和sale这两个依赖。要升级这两者，你需要升级sale，因为这样会递归升级其反向依赖，sale_stock和sale_specific。</p>\n<p>管理依赖另一个比较搞的地方是在你向已经有一个版本安装了的插件添加依赖的时候。我们继续通过前例来理解这一问题。想像一下你在sale_specific中添加了一个对stock_dropshipping的依赖。更新sale_specific插件不会自动安装新的依赖，也会要求安装sale_specific。在这种情况下，你会收到非常糟糕的错误消息，因为插件的Python代码没有成功的加载，而插件的数据和模型表则存在于数据库中。要解决这一问题，你需要停止该实例并手动安装新的依赖。</p>\n<h2 id=\"从GitHub安装插件模块\"><a href=\"#从GitHub安装插件模块\" class=\"headerlink\" title=\"从GitHub安装插件模块\"></a>从GitHub安装插件模块</h2><p>GitHub是第三方插件的一个很好的来源。很多Odoo合作伙伴使用GitHub来分享他们内部维护的插件，而Odoo社区联盟（OCA）在GitHub上共同维护着几百个插件。在你开始编写自己的插件之前，确保查看是否已有可用的插件或者作为初始以继续扩展插件。</p>\n<p>这一部分向你展示如何从GitHub上克隆OCA的partner-contact项目并让其中所包含的插件模块在我们实例中可用。</p>\n<h3 id=\"准备工作-3\"><a href=\"#准备工作-3\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>假设你想要改变你的实例中地址的处理方式，你的客户需要在Odoo两个字段（街道和街道2）之外的第三个字段来存储地址。你肯定是可以编写自己的插件来为res.partne添加一个字段的，但如果想要让地址在发票上以合适的格式显示，问题就要比看上去麻烦一些了。所幸，你邮件列表上的某个人告诉了你partner_address_street3插件，由OCA作为partner-contact项目的一部分进行维护。</p>\n<p>本部分中所使用的路径反映了我们在<em>标准化你的实例目录布局</em>一节中所推荐的布局。</p>\n<h3 id=\"如何安装…\"><a href=\"#如何安装…\" class=\"headerlink\" title=\"如何安装…\"></a>如何安装…</h3><p>按照如下步骤来安装partner_address_street3：</p>\n<ol>\n<li>进入你的项目目录：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/odoo-dev/my-odoo/src</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在src/目录中克隆partner-contact项目的12.0分支：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> --branch 12.0 \\https://github.com/OCA/partner-contact.git src/partner-contact</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><p>修改插件路径来包含该目录并更新你的实例中的插件列表（参见本章中的配置插件路径和更新插件模块列表一节）。instance.cfg中的addons_path一行应该是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addons_path = ~/odoo-dev/my-odoo/src/odoo/odoo/addons, \\~/odoo-dev/my-odoo/src/odoo/addons, \\~/odoo-dev/my-odoo/src/, \\~/odoo-dev/local-addons</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装partner_address_street3插件（如果你不知道如何安装该模块，参见前面一节，安装并升级本地插件模块）</p>\n</li>\n</ol>\n<h3 id=\"运行原理…-4\"><a href=\"#运行原理…-4\" class=\"headerlink\" title=\"运行原理…\"></a>运行原理…</h3><p>所有 Odoo社区联盟的代码仓库都将他们自己的插件放在单独的目录中，这与Odoo对插件路径中目录的预期是相一致的。因此，只需复制某处的仓库并将其添加到插件路径中就够了。</p>\n<h3 id=\"扩展知识…-3\"><a href=\"#扩展知识…-3\" class=\"headerlink\" title=\"扩展知识…\"></a>扩展知识…</h3><p>有些维护者遵循不同的方法，每个插件模块一个仓库，放在仓库的根目录下。这种情况下，你需要创建一个新的目录，在这个目录中添加插件路径并克隆你所需的维护者的插件到该目录中。记住在每次添加一个新仓库拷贝时要更新插件模块列表。</p>\n<h2 id=\"对插件应用修改\"><a href=\"#对插件应用修改\" class=\"headerlink\" title=\"对插件应用修改\"></a>对插件应用修改</h2><p>GitHub上可用的大部分插件需要进行修改并且不遵循Odoo对其稳定发行版所强制的规则。它们可能收到漏洞修复或改善，包含你提交的问题或功能请求，这些修改可能会引入数据库模式的修改或数据文件和视图中的更新。这一部分讲解如何安装升级后的版本。</p>\n<h3 id=\"准备工作-4\"><a href=\"#准备工作-4\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>假定你对partner_address_street3报告了一个问题并收到通知说该问题已在partner-contact项目12.0分支的最近一次修订中得以解决。这种情况下，你可以使用最新版本来更新你的实例。</p>\n<h3 id=\"如何修改…\"><a href=\"#如何修改…\" class=\"headerlink\" title=\"如何修改…\"></a>如何修改…</h3><p>要对GitHub的插件进行源的变更，需执行如下步骤：</p>\n<ol>\n<li><p>停止使用该插件的实例。</p>\n</li>\n<li><p>如果是生产实例请做一个备份（参见<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>中<em>管理Odoo服务端数据库</em>一节）。</p>\n</li>\n<li><p>进入克隆了partner-contact的目录：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/odoo-dev/my-odoo/src/partner-contact</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>为该项目创建一个本地标签，这样万一出现了崩溃你可以进行回退：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout 12.0$ git tag 12.0-before-update-$(date --iso)</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>获取源码的最新版本：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull --ff-only</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li><p>在你的数据库中更新partner_address_street3插件（参见<em>安装并升级本地插件模块</em>一节）</p>\n</li>\n<li><p>重启实例</p>\n</li>\n</ol>\n<h3 id=\"运行原理…-5\"><a href=\"#运行原理…-5\" class=\"headerlink\" title=\"运行原理…\"></a>运行原理…</h3><p>通常，插件模块的开发者有时会发布插件的最新版本。这一更新一般包含漏洞修复及新功能。这里，我们将获取一个插件的新版本并在我们的实例中更新它。</p>\n<p>如果git pull –ff-only失败的话，你可以使用如下命令回退到前一个版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  git reset --hard 12.0-before-update-$(date --iso)</span><br></pre></td></tr></table></figure>\n<p>然后，你可以尝试git pull（不添加–ff-only），它会产生一个合并，但这表示你对插件做了本地修改。</p>\n<h3 id=\"扩展知识…-4\"><a href=\"#扩展知识…-4\" class=\"headerlink\" title=\"扩展知识…\"></a>扩展知识…</h3><p>如果更新这一步崩溃了，参见<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a><em>从源码更新Odoo</em>一节获取恢复的操作指南。记住要总是在一个生产数据库的拷贝上先进行测试。</p>\n<h2 id=\"应用及尝试建议的拉取请求\"><a href=\"#应用及尝试建议的拉取请求\" class=\"headerlink\" title=\"应用及尝试建议的拉取请求\"></a>应用及尝试建议的拉取请求</h2><p>在GitHub的世界中，拉取请求（PR）是由开发者所提交的请求，这样项目维护人员可以添加一些新的开发。比如一个 PR 可能包含漏洞修复或新功能。这里请求在拉取到主分支之前会进行审核和测试。</p>\n<p>这一部分讲解如何对你的 Odoo 项目应用一个PR来测试漏洞修复的改进。</p>\n<h3 id=\"准备工作-5\"><a href=\"#准备工作-5\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>在前一节中，假定你对partner_address_street3 报告了一个问题并收到一条通知在拉取请求中问题已修复，尚未合并到项目的12.0分支中。开发人员要求你验证PR #123中的修复状况。你需要使用这一分支更新一个测试实例。</p>\n<p>你不应在生产数据库直接使用该分支，因此先创建一个带有生产数据库拷贝的测试环境（参见<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>和<a href=\"https://alanhou.org/server-deployment/\" target=\"_blank\" rel=\"noopener\">第三章 服务器部署</a>）。</p>\n<h3 id=\"如何操作…\"><a href=\"#如何操作…\" class=\"headerlink\" title=\"如何操作…\"></a>如何操作…</h3><p>应用并测试一个插件的GitHub拉取请求，你需要执行如下步骤：</p>\n<ol>\n<li><p>停止实例</p>\n</li>\n<li><p>进入partner-contact所被克隆的目录：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/odoo-dev/my-odoo/src/partner-contact</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>为该项目创建一个本地标签，这样万一出现崩溃时你可以回退：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  git checkout 12.0$ git tag 12.0-before-update-$(date --iso</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>拉取pull请求的分支。这么做最容易的方式是使用PR编号，在开发者与你沟通时你应该可以看到。在本例中，这个拉取请求编号是123：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull origin pull/123/head</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li><p>在你的数据库中更新partner_address_street3插件模块并重启该实例（如果你不知道如何更新该模块的话请参见<em>安装并升级本地插件模块</em>一节）</p>\n</li>\n<li><p>测试该更新 – 尝试重现问题，或测试你想要的功能。</p>\n</li>\n</ol>\n<p>如果这不能运行，在GitHub的PR页面进行评论，说明你做了什么以及什么不能运行，这样开发者可以更新这个拉取请求。</p>\n<p>如果它没有问题，也在PR页面说下；这是PR验证流程中非常重要的一部分；这会加速主分支中的合并。</p>\n<h3 id=\"运行原理…-6\"><a href=\"#运行原理…-6\" class=\"headerlink\" title=\"运行原理…\"></a>运行原理…</h3><p>我们在使用一个GitHub功能，使用pull/nnnn/head分支名称来通过编号进行拉取请求的拉取，其中nnnn是PR的编号。Git pull命令合并远程分支到我们的分支，在我们基础代码中应用修改。在这之后，我们更新插件模块、对其测试并向作者报回修改是成功或是失败。</p>\n<h3 id=\"扩展知识…-5\"><a href=\"#扩展知识…-5\" class=\"headerlink\" title=\"扩展知识…\"></a>扩展知识…</h3><p>如果你想要同步测试它们，你可以针对相同仓库的不同拉取请求重复本节中的第4步。如果你对结果很满意，你可以创建一个分支来保留对应用了改变的结果的引用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b 12.0-custom</span><br></pre></td></tr></table></figure>\n<p>使用一个不同的分支会帮助你记住你没有从GitHub使用该版本，而是一个自定义的版本。</p>\n<blockquote>\n<p>ℹ️git branch命令可用于列出你仓库中的所有本地分支。</p>\n</blockquote>\n<p>从这开始，如果你需要应用来自GitHub中12.0分支的最近一个审核版本，你需要不使用–ff-only来拉取它：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull origin 12.0</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>全书完整目录请见：<a href=\"https://alanhou.org/odoo12-cookbook/\" target=\"_blank\" rel=\"noopener\">Odoo 12开发者指南（Cookbook）第三版</a></p>\n<p>本章中，我们将讲解如下内容：</p>\n<ul>\n<li>配置插件路径</li>\n<li>更新插件模块列表</li>\n<li>标准化你的实例目录布局</li>\n<li>安装并升级本地插件模块</li>\n<li>对插件应用修改</li>\n<li>应用及尝试建议的拉取请求</li>\n</ul>\n<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>在<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>中，我们看了如何使用与编辑器一同发布的标准核心插件来设置 Odoo 实例。本章集中讲解为 Odoo 实例添加非核心插件。Odoo中，你可以从多个目录中加载插件。此外，推荐你将第三方插件（如OCA模块）或你自定义的插件放在一个单独的文件夹中，这样可以避免与 Odoo 核心模块产生冲突。甚至Odoo 企业版也是一种类型的插件目录，你需要像普通插件目录一样加载它。</p>\n<blockquote>\n<p>ℹ️<strong>有关用词 – 插件(add-on) vs. 模块(module)</strong></p>\n<p>本书中，我们使用插件或插件模块来指代 Odoo 所预期安装的 Python 包。用户界面常使用应用（app）或模块的表达 ，但我们更愿意保留模块一词来表示Python模块或包，它们不一定是 Odoo 插件，而应用（app）来表示适当定义为应用的插件模块，表示它不是Odoo主菜单中的入口。</p>\n</blockquote>\n<h2 id=\"配置插件路径\"><a href=\"#配置插件路径\" class=\"headerlink\" title=\"配置插件路径\"></a>配置插件路径</h2><p>通过addons_path参数的配置，你可以在 Odoo 中加载自己的插件模块。在Odoo初始化一个新数据库时，它会搜索在addons_path配置参数中给定的这些目录。addons_path会在这些目录中搜索潜在的插件模块。addons_path中所列出的目录预期应包含子目录，每个子目录是一个插件模块。在数据库初始化完成后，你将能够安装这些目录中所给出的模块。</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>这一部分假定你已经准备好了实例并生成了配置文件，如在<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>中<em>在一个文件中存储实例配置</em>一节所描述。Odoo的源码存放在~/odoo-dev/odoo中，而配置文件存放在~/odoo-dev/myinstance.cfg中。</p>\n<h3 id=\"如何配置…\"><a href=\"#如何配置…\" class=\"headerlink\" title=\"如何配置…\"></a>如何配置…</h3><p>按如下步骤在实例的addons_path中添加~/odoo-dev/local-addons目录：</p>\n<ol>\n<li><p>编辑你的实例的配置文件，即 ~/odoo-dev/my-instance.cfg。</p>\n</li>\n<li><p>定位到以addons_path =开头一行，默认，你会看到如下内容：</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addons_path = ~/odoo-dev/odoo/odoo/addons,~/odoo-dev/odoo/add-ons</span><br></pre></td></tr></table></figure>\n<p>   译者注：</p>\n<p>   当前默认生成的配置文件中为绝对路径，且仅包含xxx/odoo/addons</p>\n<ol start=\"3\">\n<li>修改该行，添加一个逗号（英文半角），并接你想想要添加为addons_的目录名称，如以下代码所示：</li>\n</ol>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addons_path = ~/odoo-dev/odoo/odoo/addons,~/odoo-dev/odoo/addons,~/odoo-dev/local-addons</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><p>重启你的实例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ~/odoo-dev/odoo/odoo-bin -c my-instance.cfg</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"运行原理…\"><a href=\"#运行原理…\" class=\"headerlink\" title=\"运行原理…\"></a>运行原理…</h3><p>在重启 Odoo 时，会读取配置文件。addons_path变量的值应为一个逗号分隔的目录列表。可接受相对路径，但它们是相对于当前工作目录的，因此应在配置文件中尽量避免。</p>\n<p>至此，~/odoo-dev/local-addons中包含的新插件尚不在该实例的可用模块列表中。为此，你需要执行一个额外的操作，在下一部分<em>更新插件模块列表</em>中会进行讲解。</p>\n<h3 id=\"扩展知识…\"><a href=\"#扩展知识…\" class=\"headerlink\" title=\"扩展知识…\"></a>扩展知识…</h3><p>在第一次调用 odoo-bin脚本来初始化新数据库时，你可以传递一个带逗号分隔目录列表的–addons-path命令行参数。这会以所提供插件路径中所找到的所有插件来初始化可用插件模块列表。这么做时，你要显式地包含基础插件目录（odoo/odoo/addons）以及核心插件目录（odoo/addons）。</p>\n<p>与前面稍有不同的是本地插件目录不能为空（<strong>译者注：</strong>请先阅读下面的小贴士），它必须要至少包含一个子目录，并包含插件模块的最小化结构。在<a href=\"https://alanhou.org/creating-odoo-add-on-modules/\" target=\"_blank\" rel=\"noopener\">第四章 创建Odoo插件模块</a>中，我们会来看如何编写你自己的模块。同时，这里有一个生成内容来满足Odoo要求的快捷版黑科技：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p ~/odoo-dev/local-addons/dummy$ touch ~/odoo-dev/local-addons/dummy/__init__.py$ echo &apos;&#123;&quot;name&quot;: &quot;dummy&quot;, &quot;installable&quot;: False&#125;&apos; &gt; \\~/odoo-dev/local-addons/dummy/__manifest__.py</span><br></pre></td></tr></table></figure>\n<p>你可以使用–save选项来保存配置文件的路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ odoo/odoo-bin -d mydatabase \\--add-ons-path=&quot;odoo/odoo/addons,odoo/addons,~/odoo-dev/local-addons&quot; \\--save -c ~/odoo-dev/my-instance.cfg --stop-after-init</span><br></pre></td></tr></table></figure>\n<p>本例中，使用相对路径不会有问题，因为它们会在配置文件中转化为绝对路径。</p>\n<blockquote>\n<p><strong>小贴士：</strong>因为Odoo仅当从命令行中设置路径时在插件路径的目录中查看插件，而不是在从配置文件中加载路径的时候，dummy已不再必要。因此，你可以删除它（或保留到你确定不需要新建一个配置文件时）。</p>\n</blockquote>\n<h2 id=\"更新插件模块列表\"><a href=\"#更新插件模块列表\" class=\"headerlink\" title=\"更新插件模块列表\"></a>更新插件模块列表</h2><p>我们在前面的部分已经说到，在向插件路径添加目录时，仅仅重启Odoo服务是不足以安装其中一个新插件模块的。Odoo还需要有一个指定动作来扫描路径并更新可用插件模块的列表。</p>\n<h3 id=\"准备工作-1\"><a href=\"#准备工作-1\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>启动你的实例并使用管理员账号连接它。然后，激活开发者模式（如果你不知道如何激活开发者模式，请参见<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>）。</p>\n<h3 id=\"如何更新…\"><a href=\"#如何更新…\" class=\"headerlink\" title=\"如何更新…\"></a>如何更新…</h3><p>要更新你实例中的可用插件模块列表，你需要执行如下步骤：</p>\n<ol>\n<li>打开Apps菜单</li>\n<li>点击Update Apps List：<br>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902052063.jpg\" alt=\"Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902052063.jpg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902052063.jpg)</div>\n            </figure></li>\n<li>在弹出对话框中，点击Update按钮：<br>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902070776.jpg\" alt=\"Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902070776.jpg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902070776.jpg)</div>\n            </figure></li>\n<li>在更新的最后，你可以点击Apps入口来查看已更新的可用插件模块列表。你将需要删除Apps搜索框中的默认过滤器来查看所有模块。</li>\n</ol>\n<h3 id=\"运行原理…-1\"><a href=\"#运行原理…-1\" class=\"headerlink\" title=\"运行原理…\"></a>运行原理…</h3><p>在点击了Update按钮之后，Odoo会读取插件路径配置变量。对于列表中的每一个目录，它会查看包含保存在插件模块目录中名为<strong>manifest</strong>.py的插件声明文件的直接子目录。Odoo读取声明内容，并预期查找其中的Python字典。除非声明内容中包含一个键installable的值为False，插件模块的元数据就会存储在数据库中。如果模块已存在，则更新相关信息。否则，会创建一条新记录。如果此前可用的插件模块未找到，则从列表中删除该记录。</p>\n<blockquote>\n<p>ℹ️仅在初始化数据库后添加了新的插件路径时才需要更新应用列表。如果你在初始化数据库之前在配置文件中添加了新插件路径，那么就无需手动更新模块列表。</p>\n</blockquote>\n<h2 id=\"标准化你的实例目录布局\"><a href=\"#标准化你的实例目录布局\" class=\"headerlink\" title=\"标准化你的实例目录布局\"></a>标准化你的实例目录布局</h2><p>我们推荐你在开发和生产环境都使用相似的目录布局。这一标准化会在你要执行运维时体现出用处，它也会缓解你日常工作的压力。</p>\n<p>这一部分创建将相似生命周期或相似用途的文件分组放在标准化子目录中的目录结构。请自由按照自己的需求来调整这一结构，但请确保你将这一结构在某处进行记录存档。</p>\n<h3 id=\"如何标准化…\"><a href=\"#如何标准化…\" class=\"headerlink\" title=\"如何标准化…\"></a>如何标准化…</h3><p>创建所推荐实例布局，你需要执行如下步骤：</p>\n<p><strong>译者注：</strong>读者也可直接使用 Alan 在 GitHub 上准备的<a href=\"https://github.com/alanhou/odoo12-cookbook/tree/master/Chapter02\" target=\"_blank\" rel=\"noopener\">安装脚本</a>进行操作</p>\n<ol>\n<li><p>为实例创建一个目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir ~/odoo-dev/projectname$ cd ~/odoo-dev/projectname</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在名为env/的子目录中创建一个Python虚拟环境：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ virtualenv -p python3 env</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一些子目录，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir src local bin filestore logs</span><br></pre></td></tr></table></figure>\n<p>这些子目录的功能如下：</p>\n<ul>\n<li>src/：这包含Odoo本身的一个拷贝，以及一些第三方插件项目（我们在下一步中添加了Odoo源码）</li>\n<li>local/：这用于保存你针对具体实例的插件</li>\n<li>bin/：这包含各类帮助可执行shell脚本</li>\n<li>filestore/：这用于文件存储</li>\n<li>logs/（可选）：这用于存储服务日志文件</li>\n</ul>\n</li>\n<li><p>克隆Odoo并安装所需依赖包（参见</p>\n<p>第一章 安装Odoo开发环境</p>\n<p>获取更多内容）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/odoo/odoo.git src/odoo</span><br><span class=\"line\">$ env/bin/pip3 install -r src/odoo/requirements.txt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>以bin/odoo保存如下shell脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ROOT=$(dirname <span class=\"variable\">$0</span>)/..</span><br><span class=\"line\">PYTHON=<span class=\"variable\">$ROOT</span>/env/bin/python3</span><br><span class=\"line\">ODOO=<span class=\"variable\">$ROOT</span>/src/odoo/odoo-bin</span><br><span class=\"line\"><span class=\"variable\">$PYTHON</span> <span class=\"variable\">$ODOO</span> -c <span class=\"variable\">$ROOT</span>/projectname.cfg <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">exit</span> $?</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>让该脚本可执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod +x bin/odoo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个空的本地模块dummy：</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p local/dummy</span><br><span class=\"line\">$ touch local/dummy/__init__.py</span><br><span class=\"line\">$ echo &apos;&#123;&quot;name&quot;: &quot;dummy&quot;, &quot;installable&quot;: False&#125;&apos; &gt;\\local/dummy/__manifest__.py</span><br></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>为你的实例生成配置文件：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/odoo --stop-after-init --save \\ --addons-path src/odoo/odoo/addons,src/odoo/addons,local \\ --data-dir filestore</span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>添加一个.gitignore文件，用于告诉GitHub排除这些给定目录，这样Git在提交代码时就会忽略掉这些目录，例如 filestore/, env/, logs/和src/：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># dotfiles, with exceptions:</span></span><br><span class=\"line\">.*</span><br><span class=\"line\">!.gitignore</span><br><span class=\"line\"><span class=\"comment\"># python compiled files</span></span><br><span class=\"line\">*.py[co]</span><br><span class=\"line\"><span class=\"comment\"># emacs backup files</span></span><br><span class=\"line\">*~</span><br><span class=\"line\"><span class=\"comment\"># not tracked subdirectories</span></span><br><span class=\"line\">/env/</span><br><span class=\"line\">/src/</span><br><span class=\"line\">/filestore/</span><br><span class=\"line\">/logs/</span><br></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>为这个实例创建一个Git仓库并将已添加的文件添加到Git中：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init</span><br><span class=\"line\">$ git add .</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"initial version of projectname\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"运行原理…-2\"><a href=\"#运行原理…-2\" class=\"headerlink\" title=\"运行原理…\"></a>运行原理…</h3><p>我们生成了一个有明确标签目录和独立角色的干净的目录结构。我使用了不同的目录来存储如下内容：</p>\n<ul>\n<li>由其它人所维护的代码（src/中）</li>\n<li>本地相关的具体代码</li>\n<li>实例的文件存储</li>\n</ul>\n<p>通过为每个项目建一个virtualenv环境，我们可以确保该项目的依赖文件不会与其它项目的依赖产生冲突，这些项目你可能运行着不同的Odoo版本或使用了不同的第三方插件模块，这将需要不同版本的Python依赖。这当然也会带来一部分磁盘空间的开销。</p>\n<p>以类似的方式，通过为我们不同的项目使用不同的Odoo拷贝以及第三方插件模块，我们可以让每个项目单独的进行推进并仅在需要时在这些实例上安装更新，因此也减少了引入回退的风险。</p>\n<p>bin/odoo允许我们不用记住各个路径或激活虚拟环境就可以运行服务。这还为我们设置了配置文件。你可以在其中添加其它脚本来协助你的日常工作。例如，你可以添加一个脚本来检查运行实例所需的第三方项目。</p>\n<p>有关配置文件，我们仅展示了这里需要设置的最小化选项，但很明显你可以设置更多，例如数据库名、数据库过滤器或项目所监听的端口。有关这一话题的更多信息，请参见<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>。</p>\n<p>最后，通过在Git仓库中管理所有这些，在不同的电脑上复制这一设置及在团队中分享开发内容变得相当容易。</p>\n<blockquote>\n<p><strong>小贴士：</strong>加速贴士</p>\n<p>要加速项目的创建，你可以创建一个包含空结构的模板仓库，并为每个项目复制（fork）该仓库。这会省却你重新输入bin/odoo脚本、.gitignore及其它所需模板文件（持续集成配置、README.md、ChangeLog等等）所花费的时间。</p>\n</blockquote>\n<h3 id=\"参见内容\"><a href=\"#参见内容\" class=\"headerlink\" title=\"参见内容\"></a>参见内容</h3><p>如果你喜欢这种方法，我们建议你尝试<a href=\"https://alanhou.org/server-deployment/\" target=\"_blank\" rel=\"noopener\">第三章 服务器部署</a>中的使用 Docker 运行 Odoo 一部分的内容。</p>\n<h3 id=\"扩展知识…-1\"><a href=\"#扩展知识…-1\" class=\"headerlink\" title=\"扩展知识…\"></a>扩展知识…</h3><p>复杂模块的开发要求有各类配置选项，在想要尝试任何配置选项时都会要更新配置文件。更新配置常常是一件头痛的事，避免它的一种方式是通过命令行传递所有配置选项，如下：</p>\n<ol>\n<li>手动激活虚拟环境：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> env/bin/activate</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>进行Odoo源代码目录：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> src/odoo</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>运行服务：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./odoo-bin --addons-path=addons,../../<span class=\"built_in\">local</span> -d <span class=\"built_in\">test</span>-12 -i account,sale,purchase --<span class=\"built_in\">log</span>-level=debug</span><br></pre></td></tr></table></figure>\n<p>第三步中，我们直接通过命令行传递了一些参数。第一个是–addons-path，它加载Odoo的核心插件目录addons，以及你自己的插件目录local，在其中你可以放自己的插件模块。选项-d会使用test-12数据库或者在该数据库不存在时新建一个数据库。选项-i 会安装会计、销售和采购模块。接着，我们传递了log-level选项来将日志级别提升为debug，这样日志中会显示更多的信息。</p>\n<blockquote>\n<p>ℹ️通过使用命令行，你可以快速地修改配置选项。你也可以在Terminal中查看实时日志。所有可用选项可参见<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>，或使用-help命令来查看所有的选项列表及各个选项的描述。</p>\n</blockquote>\n<h2 id=\"安装并升级本地插件模块\"><a href=\"#安装并升级本地插件模块\" class=\"headerlink\" title=\"安装并升级本地插件模块\"></a>安装并升级本地插件模块</h2><p>Odoo 功能的核心来自于它的插件模块。Odoo自带的插件是你所拥有的财富，同时你也可以在应用商店下载一些插件模块或者自己写。</p>\n<p>这一部分中，我们将展示如何通过网页界面及命令行来安装并升级插件模块。</p>\n<p>对这些操作使用命令行的主要好处包含可以同时作用于一个以上的插件以及在安装或升级的过程中可以清晰地浏览到服务端日志，对于开发模式或编写脚本安装实例时都非常有用。</p>\n<h3 id=\"准备工作-2\"><a href=\"#准备工作-2\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>确保你有一个运行中的 Odoo 实例，且数据库已初始化、插件路径已进行恰当地设置。在这一部分中，我们将安装/升级一些插件模块。</p>\n<h3 id=\"如何安装升级…\"><a href=\"#如何安装升级…\" class=\"headerlink\" title=\"如何安装升级…\"></a>如何安装升级…</h3><p>安装或升级插件有两种方法-可以使用网页界面或命令行。</p>\n<h4 id=\"通过网页界面\"><a href=\"#通过网页界面\" class=\"headerlink\" title=\"通过网页界面\"></a>通过网页界面</h4><p>可按照如下步骤来使用网页界面安装新的插件模块到数据库中：</p>\n<ol>\n<li>使用管理员账户连接实例并打开Apps菜单<br>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906002399.jpg\" alt=\"Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906002399.jpg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906002399.jpg)</div>\n            </figure></li>\n<li>使用搜索框来定位你想要安装的插件。这里有一些帮助你完成该任务的操作指南：<ul>\n<li>激活Not Installed过滤器</li>\n<li>如果你要查找一个具体的功能插件而不是广泛的功能插件，删除Apps过滤器</li>\n<li>在搜索框中输入模块名的一部分并使用它来作为模块过滤器</li>\n<li>你会发现使用列表视图可以阅读到更多的信息</li>\n</ul>\n</li>\n<li>点击卡片中模块名下的Install按钮。</li>\n</ol>\n<p>注意有些Odoo插件模块需要有外部Python依赖，如果你的系统中未安装该Python依赖，那么 Odoo 会中止安装并显示如下的对话框：</p>\n<p>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906125210.jpg\" alt=\"Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906125210.jpg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906125210.jpg)</div>\n            </figure><br><strong>译者注：</strong>按正常安装不会出现一错误，需通过 pip uninstall pyldap 才能复现这一错误</p>\n<p>修复这一问题，仅需在你的系统中安装相关的Python依赖即可。</p>\n<p>要升级已安装到数据库的模块，使用如下步骤：</p>\n<ol>\n<li>使用管理员账户连接到实例</li>\n<li>打开Apps菜单</li>\n<li>点击Apps:<br>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906203077.jpg\" alt=\"Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906203077.jpg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906203077.jpg)</div>\n            </figure></li>\n<li>使用搜索框来定位你所安装的插件。有如下的小贴士：<ul>\n<li>激活Installed过滤器</li>\n<li>如果你要查找一个具体的功能插件而不是广泛的功能插件，删除Apps过滤器</li>\n<li>在搜索框中输入部分插件模块的名称并按下 Enter 来使用它作为模块过滤器。例如，输入CRM并按下 Enter 来搜索CRM应用</li>\n<li>你会发现使用列表视图可以阅读到更多的信息</li>\n</ul>\n</li>\n<li>点击卡片右上角的的三个点，然后点击Upgrade选项：</li>\n</ol>\n<p>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906265357.jpg\" alt=\"Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906265357.jpg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906265357.jpg)</div>\n            </figure></p>\n<p>激活开发者模式来查看模块的技术名称。如果你不知道如何激活开发者模式，请参见<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>：</p>\n<p>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906302261.jpg\" alt=\"Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906302261.jpg)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906302261.jpg)</div>\n            </figure></p>\n<p>在激活开发者模式之后，它会以红色显示模块的技术名称。如果你使用的是Odoo社区版，会看到一些带有Upgrade的附加应用。这些是Odoo企业版的应用，要想安装/使用它们，需要购买一个证书。</p>\n<h4 id=\"通过命令行\"><a href=\"#通过命令行\" class=\"headerlink\" title=\"通过命令行\"></a>通过命令行</h4><p>要在你的数据库中安装新插件，可按照如下步骤：</p>\n<ol>\n<li><p>查找插件的名称。这是包含<strong>manifest</strong>.py文件的目录名，不带前面的路径。</p>\n</li>\n<li><p>停止实例。如果你在操作生产数据库，请进行备份。</p>\n</li>\n<li><p>运行如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">odoo/odoo-bin -c instance.cfg -d dbname -i addon1,addon2 --stop-after-init</span><br></pre></td></tr></table></figure>\n<p>译者注：</p>\n<p>请将addon1,addon2替换为你所要安装的插件名</p>\n</li>\n</ol>\n<blockquote>\n<p><strong>小贴士：</strong>你可以省略掉-d dbname，因为这在配置文件中进行了设置。</p>\n</blockquote>\n<ol start=\"4\">\n<li>重新启动实例</li>\n</ol>\n<h3 id=\"运行原理…-3\"><a href=\"#运行原理…-3\" class=\"headerlink\" title=\"运行原理…\"></a>运行原理…</h3><p>插件模块的安装和升级是两个紧密关联的操作，但有一些重要的区别，在下面两部分中进行了强调：</p>\n<h4 id=\"插件安装\"><a href=\"#插件安装\" class=\"headerlink\" title=\"插件安装\"></a>插件安装</h4><p>在你安装插件时，Odoo以提供的名称检查它的可用插件列表中未安装插件。它还会检查该插件的依赖，并且如果有依赖的话，它会在安装插件前递归安装这些依赖。</p>\n<p>单个模块的安装包含如下步骤：</p>\n<ol>\n<li>如果存在，运行插件preinit钩子</li>\n<li>从Python源代码中加载模型定义并在必要时更新数据库结构（参见<a href=\"https://alanhou.org/application-models/\" target=\"_blank\" rel=\"noopener\">第五章 应用模型</a>了解更多信息）</li>\n<li>加载插件的数据文件并在必要时更新数据库内容（参见<a href=\"https://alanhou.org/odoo12-module-data/\" target=\"_blank\" rel=\"noopener\">第七章 模块数据</a>了解更多信息）</li>\n<li>如果实例中启用了演示数据则安装插件演示数据</li>\n<li>如果存在，运行插件postinit钩子</li>\n<li>运行对插件视图定义的验证</li>\n<li>如果启用了演示数据并启用了测试，运行该插件的测试（参见<a href=\"https://alanhou.org/automated-test-cases/\" target=\"_blank\" rel=\"noopener\">第十八章 自动化测试用例</a>了解更多信息）</li>\n<li>在数据库中更新模块状态</li>\n<li>从插件的翻译文件中更新数据库中的翻译（参见<a href=\"https://alanhou.org/internationalization/\" target=\"_blank\" rel=\"noopener\">第十二章 国际化</a>了解更多信息）</li>\n</ol>\n<blockquote>\n<p>ℹ️preinit和postinit钩子分别使用pre_init_hook和post_init_hook键名在<strong>manifest</strong>.py文件中定义。这些钩子用于在插件模块的安装之前及之后触发Python函数。参见<a href=\"https://alanhou.org/creating-odoo-add-on-modules/\" target=\"_blank\" rel=\"noopener\">第四章 创建Odoo插件模块</a>了解更多有关 init 钩子的知识。</p>\n</blockquote>\n<h4 id=\"插件升级\"><a href=\"#插件升级\" class=\"headerlink\" title=\"插件升级\"></a>插件升级</h4><p>升级插件时，Odoo以给定的名称在可用的插件模块列表中检查已安装插件。它还会检查该插件的反向依赖（即依赖于所升级插件的那些插件）。如果存在，则也会对它们进行递归升级。</p>\n<p>单个插件模块的升级过程包含如下步骤：</p>\n<ol>\n<li>如果有的话，先运行插件模块的预迁移步骤（参见<a href=\"https://alanhou.org/odoo12-module-data/\" target=\"_blank\" rel=\"noopener\">第七章 模块数据</a>了解更多信息）</li>\n<li>从Python源码中加载模型定义并在必要时更新数据库结构（参见<a href=\"https://alanhou.org/application-models/\" target=\"_blank\" rel=\"noopener\">第五章 应用模型</a>了解更多信息）</li>\n<li>加载插件的数据文件并在必要时更新数据库内容（参见<a href=\"https://alanhou.org/odoo12-module-data/\" target=\"_blank\" rel=\"noopener\">第七章 模块数据</a>了解更多信息）</li>\n<li>如果实例中启用了演示数据更新插件演示数据</li>\n<li>如果模块有任何迁移方法的话，先运行插件模块的后置迁移步骤（参见<a href=\"https://alanhou.org/odoo12-module-data/\" target=\"_blank\" rel=\"noopener\">第七章 模块数据</a>了解更多信息）</li>\n<li>运行对插件视图定义的验证</li>\n<li>如果启用了演示数据并启用了测试，运行该插件的测试（参见<a href=\"https://alanhou.org/automated-test-cases/\" target=\"_blank\" rel=\"noopener\">第十八章 自动化测试用例</a>了解更多信息）</li>\n<li>在数据库中更新模块状态</li>\n<li>从插件的翻译文件中更新数据库中的翻译（参见<a href=\"https://alanhou.org/internationalization/\" target=\"_blank\" rel=\"noopener\">第十二章 国际化</a>了解更多信息）</li>\n</ol>\n<blockquote>\n<p>ℹ️注意更新未安装的插件模块什么也不会做。但是安装已安装的插件模块会重新安装该插件，这会通过一些包含数据的数据文件产生一些预期外的问题，这些文件可能应由用户进行更新而非在常规的模块升级处理时进行更新（参见<a href=\"https://alanhou.org/odoo12-module-data/\" target=\"_blank\" rel=\"noopener\">第七章 模块数据</a>中使用noupdate和forcecreate标记部分的内容）。通过用户界面不存在错误的风险，但通过命令行时则有可能发生。</p>\n</blockquote>\n<h3 id=\"扩展知识…-2\"><a href=\"#扩展知识…-2\" class=\"headerlink\" title=\"扩展知识…\"></a>扩展知识…</h3><p>要当心依赖的处理。假定有一个实例你想要安装sale、sale_stock和sale_specific插件，sale_specific依赖于sale_stock，而sale_stock依赖于sale。要安装这三者，你只需要安装sale_specific，因为它会递归安装sale_stock和sale这两个依赖。要升级这两者，你需要升级sale，因为这样会递归升级其反向依赖，sale_stock和sale_specific。</p>\n<p>管理依赖另一个比较搞的地方是在你向已经有一个版本安装了的插件添加依赖的时候。我们继续通过前例来理解这一问题。想像一下你在sale_specific中添加了一个对stock_dropshipping的依赖。更新sale_specific插件不会自动安装新的依赖，也会要求安装sale_specific。在这种情况下，你会收到非常糟糕的错误消息，因为插件的Python代码没有成功的加载，而插件的数据和模型表则存在于数据库中。要解决这一问题，你需要停止该实例并手动安装新的依赖。</p>\n<h2 id=\"从GitHub安装插件模块\"><a href=\"#从GitHub安装插件模块\" class=\"headerlink\" title=\"从GitHub安装插件模块\"></a>从GitHub安装插件模块</h2><p>GitHub是第三方插件的一个很好的来源。很多Odoo合作伙伴使用GitHub来分享他们内部维护的插件，而Odoo社区联盟（OCA）在GitHub上共同维护着几百个插件。在你开始编写自己的插件之前，确保查看是否已有可用的插件或者作为初始以继续扩展插件。</p>\n<p>这一部分向你展示如何从GitHub上克隆OCA的partner-contact项目并让其中所包含的插件模块在我们实例中可用。</p>\n<h3 id=\"准备工作-3\"><a href=\"#准备工作-3\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>假设你想要改变你的实例中地址的处理方式，你的客户需要在Odoo两个字段（街道和街道2）之外的第三个字段来存储地址。你肯定是可以编写自己的插件来为res.partne添加一个字段的，但如果想要让地址在发票上以合适的格式显示，问题就要比看上去麻烦一些了。所幸，你邮件列表上的某个人告诉了你partner_address_street3插件，由OCA作为partner-contact项目的一部分进行维护。</p>\n<p>本部分中所使用的路径反映了我们在<em>标准化你的实例目录布局</em>一节中所推荐的布局。</p>\n<h3 id=\"如何安装…\"><a href=\"#如何安装…\" class=\"headerlink\" title=\"如何安装…\"></a>如何安装…</h3><p>按照如下步骤来安装partner_address_street3：</p>\n<ol>\n<li>进入你的项目目录：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/odoo-dev/my-odoo/src</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在src/目录中克隆partner-contact项目的12.0分支：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> --branch 12.0 \\https://github.com/OCA/partner-contact.git src/partner-contact</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><p>修改插件路径来包含该目录并更新你的实例中的插件列表（参见本章中的配置插件路径和更新插件模块列表一节）。instance.cfg中的addons_path一行应该是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addons_path = ~/odoo-dev/my-odoo/src/odoo/odoo/addons, \\~/odoo-dev/my-odoo/src/odoo/addons, \\~/odoo-dev/my-odoo/src/, \\~/odoo-dev/local-addons</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装partner_address_street3插件（如果你不知道如何安装该模块，参见前面一节，安装并升级本地插件模块）</p>\n</li>\n</ol>\n<h3 id=\"运行原理…-4\"><a href=\"#运行原理…-4\" class=\"headerlink\" title=\"运行原理…\"></a>运行原理…</h3><p>所有 Odoo社区联盟的代码仓库都将他们自己的插件放在单独的目录中，这与Odoo对插件路径中目录的预期是相一致的。因此，只需复制某处的仓库并将其添加到插件路径中就够了。</p>\n<h3 id=\"扩展知识…-3\"><a href=\"#扩展知识…-3\" class=\"headerlink\" title=\"扩展知识…\"></a>扩展知识…</h3><p>有些维护者遵循不同的方法，每个插件模块一个仓库，放在仓库的根目录下。这种情况下，你需要创建一个新的目录，在这个目录中添加插件路径并克隆你所需的维护者的插件到该目录中。记住在每次添加一个新仓库拷贝时要更新插件模块列表。</p>\n<h2 id=\"对插件应用修改\"><a href=\"#对插件应用修改\" class=\"headerlink\" title=\"对插件应用修改\"></a>对插件应用修改</h2><p>GitHub上可用的大部分插件需要进行修改并且不遵循Odoo对其稳定发行版所强制的规则。它们可能收到漏洞修复或改善，包含你提交的问题或功能请求，这些修改可能会引入数据库模式的修改或数据文件和视图中的更新。这一部分讲解如何安装升级后的版本。</p>\n<h3 id=\"准备工作-4\"><a href=\"#准备工作-4\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>假定你对partner_address_street3报告了一个问题并收到通知说该问题已在partner-contact项目12.0分支的最近一次修订中得以解决。这种情况下，你可以使用最新版本来更新你的实例。</p>\n<h3 id=\"如何修改…\"><a href=\"#如何修改…\" class=\"headerlink\" title=\"如何修改…\"></a>如何修改…</h3><p>要对GitHub的插件进行源的变更，需执行如下步骤：</p>\n<ol>\n<li><p>停止使用该插件的实例。</p>\n</li>\n<li><p>如果是生产实例请做一个备份（参见<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>中<em>管理Odoo服务端数据库</em>一节）。</p>\n</li>\n<li><p>进入克隆了partner-contact的目录：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/odoo-dev/my-odoo/src/partner-contact</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>为该项目创建一个本地标签，这样万一出现了崩溃你可以进行回退：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout 12.0$ git tag 12.0-before-update-$(date --iso)</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>获取源码的最新版本：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull --ff-only</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li><p>在你的数据库中更新partner_address_street3插件（参见<em>安装并升级本地插件模块</em>一节）</p>\n</li>\n<li><p>重启实例</p>\n</li>\n</ol>\n<h3 id=\"运行原理…-5\"><a href=\"#运行原理…-5\" class=\"headerlink\" title=\"运行原理…\"></a>运行原理…</h3><p>通常，插件模块的开发者有时会发布插件的最新版本。这一更新一般包含漏洞修复及新功能。这里，我们将获取一个插件的新版本并在我们的实例中更新它。</p>\n<p>如果git pull –ff-only失败的话，你可以使用如下命令回退到前一个版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  git reset --hard 12.0-before-update-$(date --iso)</span><br></pre></td></tr></table></figure>\n<p>然后，你可以尝试git pull（不添加–ff-only），它会产生一个合并，但这表示你对插件做了本地修改。</p>\n<h3 id=\"扩展知识…-4\"><a href=\"#扩展知识…-4\" class=\"headerlink\" title=\"扩展知识…\"></a>扩展知识…</h3><p>如果更新这一步崩溃了，参见<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a><em>从源码更新Odoo</em>一节获取恢复的操作指南。记住要总是在一个生产数据库的拷贝上先进行测试。</p>\n<h2 id=\"应用及尝试建议的拉取请求\"><a href=\"#应用及尝试建议的拉取请求\" class=\"headerlink\" title=\"应用及尝试建议的拉取请求\"></a>应用及尝试建议的拉取请求</h2><p>在GitHub的世界中，拉取请求（PR）是由开发者所提交的请求，这样项目维护人员可以添加一些新的开发。比如一个 PR 可能包含漏洞修复或新功能。这里请求在拉取到主分支之前会进行审核和测试。</p>\n<p>这一部分讲解如何对你的 Odoo 项目应用一个PR来测试漏洞修复的改进。</p>\n<h3 id=\"准备工作-5\"><a href=\"#准备工作-5\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>在前一节中，假定你对partner_address_street3 报告了一个问题并收到一条通知在拉取请求中问题已修复，尚未合并到项目的12.0分支中。开发人员要求你验证PR #123中的修复状况。你需要使用这一分支更新一个测试实例。</p>\n<p>你不应在生产数据库直接使用该分支，因此先创建一个带有生产数据库拷贝的测试环境（参见<a href=\"https://alanhou.org/installing-odoo-development-environment/\" target=\"_blank\" rel=\"noopener\">第一章 安装Odoo开发环境</a>和<a href=\"https://alanhou.org/server-deployment/\" target=\"_blank\" rel=\"noopener\">第三章 服务器部署</a>）。</p>\n<h3 id=\"如何操作…\"><a href=\"#如何操作…\" class=\"headerlink\" title=\"如何操作…\"></a>如何操作…</h3><p>应用并测试一个插件的GitHub拉取请求，你需要执行如下步骤：</p>\n<ol>\n<li><p>停止实例</p>\n</li>\n<li><p>进入partner-contact所被克隆的目录：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/odoo-dev/my-odoo/src/partner-contact</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>为该项目创建一个本地标签，这样万一出现崩溃时你可以回退：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  git checkout 12.0$ git tag 12.0-before-update-$(date --iso</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>拉取pull请求的分支。这么做最容易的方式是使用PR编号，在开发者与你沟通时你应该可以看到。在本例中，这个拉取请求编号是123：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull origin pull/123/head</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li><p>在你的数据库中更新partner_address_street3插件模块并重启该实例（如果你不知道如何更新该模块的话请参见<em>安装并升级本地插件模块</em>一节）</p>\n</li>\n<li><p>测试该更新 – 尝试重现问题，或测试你想要的功能。</p>\n</li>\n</ol>\n<p>如果这不能运行，在GitHub的PR页面进行评论，说明你做了什么以及什么不能运行，这样开发者可以更新这个拉取请求。</p>\n<p>如果它没有问题，也在PR页面说下；这是PR验证流程中非常重要的一部分；这会加速主分支中的合并。</p>\n<h3 id=\"运行原理…-6\"><a href=\"#运行原理…-6\" class=\"headerlink\" title=\"运行原理…\"></a>运行原理…</h3><p>我们在使用一个GitHub功能，使用pull/nnnn/head分支名称来通过编号进行拉取请求的拉取，其中nnnn是PR的编号。Git pull命令合并远程分支到我们的分支，在我们基础代码中应用修改。在这之后，我们更新插件模块、对其测试并向作者报回修改是成功或是失败。</p>\n<h3 id=\"扩展知识…-5\"><a href=\"#扩展知识…-5\" class=\"headerlink\" title=\"扩展知识…\"></a>扩展知识…</h3><p>如果你想要同步测试它们，你可以针对相同仓库的不同拉取请求重复本节中的第4步。如果你对结果很满意，你可以创建一个分支来保留对应用了改变的结果的引用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b 12.0-custom</span><br></pre></td></tr></table></figure>\n<p>使用一个不同的分支会帮助你记住你没有从GitHub使用该版本，而是一个自定义的版本。</p>\n<blockquote>\n<p>ℹ️git branch命令可用于列出你仓库中的所有本地分支。</p>\n</blockquote>\n<p>从这开始，如果你需要应用来自GitHub中12.0分支的最近一个审核版本，你需要不使用–ff-only来拉取它：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull origin 12.0</span><br></pre></td></tr></table></figure>\n"},{"title":"java动态代理","date":"2020-09-20T04:00:00.000Z","_content":"\n# Java 动态代理详解](https://www.cnblogs.com/whirly/p/10154887.html)\n\n\n\n动态代理在Java中有着广泛的应用，比如Spring AOP、Hibernate数据查询、测试框架的后端mock、RPC远程调用、Java注解对象获取、日志、用户鉴权、全局性异常处理、性能监控，甚至事务处理等。\n\n本文主要介绍Java中两种常见的动态代理方式：JDK原生动态代理和CGLIB动态代理。\n\n由于Java动态代理与java反射机制关系紧密，请读者确保已经了解了Java反射机制，可参考上一篇文章《[Java反射机制详解](https://mp.weixin.qq.com/s?__biz=MzI1NDU0MTE1NA==&mid=2247483785&idx=1&sn=f696c8c49cb7ecce9818247683482a1c&chksm=e9c2ed84deb564925172b2dd78d307d4dc345fa313d3e44f01e84fa22ac5561b37aec5cbd5b4&scene=0#rd)》\n\n### 代理模式\n\n本文将介绍的Java动态代理与设计模式中的代理模式有关，什么是代理模式呢？\n\n**代理模式**：给某一个对象提供一个代理，并由代理对象来控制对真实对象的访问。代理模式是一种结构型设计模式。\n\n代理模式角色分为 3 种：\n\n**Subject（抽象主题角色）**：定义代理类和真实主题的公共对外方法，也是代理类代理真实主题的方法；\n\n**RealSubject（真实主题角色**）：真正实现业务逻辑的类；\n\n**Proxy（代理主题角色）**：用来代理和封装真实主题；\n\n代理模式的结构比较简单，其核心是代理类，为了让客户端能够**一致性地对待**真实对象和代理对象，在代理模式中引入了抽象层\n\n![代理模式类图](http://image.laijianfeng.org/2018_12_20_proxyUML.jpg)\n\n代理模式**按照职责**（使用场景）来分类，至少可以分为以下几类：1、远程代理。 2、虚拟代理。 3、Copy-on-Write 代理。 4、保护（Protect or Access）代理。 5、Cache代理。 6、防火墙（Firewall）代理。 7、同步化（Synchronization）代理。 8、智能引用（Smart Reference）代理等等。\n\n如果**根据字节码的创建时机**来分类，可以分为静态代理和动态代理：\n\n- 所谓**静态**也就是在**程序运行前**就已经存在代理类的**字节码文件**，代理类和真实主题角色的关系在运行前就确定了。\n- 而动态代理的源码是在程序运行期间由**JVM**根据反射等机制**动态的生成**，所以在运行前并不存在代理类的字节码文件\n\n### 静态代理\n\n我们先通过实例来学习静态代理，然后理解静态代理的缺点，再来学习本文的主角：动态代理\n\n编写一个接口 UserService ，以及该接口的一个实现类 UserServiceImpl\n\n```java\npublic interface UserService {\n    public void select();   \n    public void update();\n}\n\npublic class UserServiceImpl implements UserService {  \n    public void select() {  \n        System.out.println(\"查询 selectById\");\n    }\n    public void update() {\n        System.out.println(\"更新 update\");\n    }\n}\n```\n\n我们将通过静态代理对 UserServiceImpl 进行功能增强，在调用 `select` 和 `update` 之前记录一些日志。写一个代理类 UserServiceProxy，代理类需要实现 UserService\n\n```java\npublic class UserServiceProxy implements UserService {\n    private UserService target; // 被代理的对象\n\n    public UserServiceProxy(UserService target) {\n        this.target = target;\n    }\n    public void select() {\n        before();\n        target.select();    // 这里才实际调用真实主题角色的方法\n        after();\n    }\n    public void update() {\n        before();\n        target.update();    // 这里才实际调用真实主题角色的方法\n        after();\n    }\n\n    private void before() {     // 在执行方法之前执行\n        System.out.println(String.format(\"log start time [%s] \", new Date()));\n    }\n    private void after() {      // 在执行方法之后执行\n        System.out.println(String.format(\"log end time [%s] \", new Date()));\n    }\n}\n```\n\n客户端测试\n\n```java\npublic class Client1 {\n    public static void main(String[] args) {\n        UserService userServiceImpl = new UserServiceImpl();\n        UserService proxy = new UserServiceProxy(userServiceImpl);\n\n        proxy.select();\n        proxy.update();\n    }\n}\n```\n\n输出\n\n```\nlog start time [Thu Dec 20 14:13:25 CST 2018] \n查询 selectById\nlog end time [Thu Dec 20 14:13:25 CST 2018] \nlog start time [Thu Dec 20 14:13:25 CST 2018] \n更新 update\nlog end time [Thu Dec 20 14:13:25 CST 2018] \n```\n\n通过静态代理，我们达到了功能增强的目的，而且没有侵入原代码，这是静态代理的一个优点。\n\n#### 静态代理的缺点\n\n虽然静态代理实现简单，且不侵入原代码，但是，当场景稍微复杂一些的时候，静态代理的缺点也会暴露出来。\n\n1、 当需要代理多个类的时候，由于代理对象要实现与目标对象一致的接口，有两种方式：\n\n- 只维护一个代理类，由这个代理类实现多个接口，但是这样就导致**代理类过于庞大**\n- 新建多个代理类，每个目标对象对应一个代理类，但是这样会**产生过多的代理类**\n\n2、 当接口需要增加、删除、修改方法的时候，目标对象与代理类都要同时修改，**不易维护**。\n\n#### 如何改进？\n\n当然是让代理类**动态的生成**啦，也就是动态代理。\n\n**为什么类可以动态的生成？**\n\n这就涉及到Java虚拟机的**类加载机制**了，推荐翻看《深入理解Java虚拟机》7.3节 类加载的过程。\n\nJava虚拟机类加载过程主要分为五个阶段：加载、验证、准备、解析、初始化。其中加载阶段需要完成以下3件事情：\n\n1. 通过一个类的全限定名来获取定义此类的二进制字节流\n2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构\n3. 在内存中生成一个代表这个类的 `java.lang.Class` 对象，作为方法区这个类的各种数据访问入口\n\n由于虚拟机规范对这3点要求并不具体，所以实际的实现是非常灵活的，关于第1点，**获取类的二进制字节流**（class字节码）就有很多途径：\n\n- 从ZIP包获取，这是JAR、EAR、WAR等格式的基础\n- 从网络中获取，典型的应用是 Applet\n- **运行时计算生成**，这种场景使用最多的是动态代理技术，在 java.lang.reflect.Proxy 类中，就是用了 ProxyGenerator.generateProxyClass 来为特定接口生成形式为 `*$Proxy` 的代理类的二进制字节流\n- 由其它文件生成，典型应用是JSP，即由JSP文件生成对应的Class类\n- 从数据库中获取等等\n\n所以，动态代理就是想办法，根据接口或目标对象，计算出代理类的字节码，然后再加载到JVM中使用。但是如何计算？如何生成？情况也许比想象的复杂得多，我们需要借助现有的方案。\n\n#### 常见的字节码操作类库\n\n> 这里有一些介绍：<https://java-source.net/open-source/bytecode-libraries>\n\n- Apache BCEL (Byte Code Engineering Library)：是Java classworking广泛使用的一种框架，它可以深入到JVM汇编语言进行类操作的细节。\n- ObjectWeb ASM：是一个Java字节码操作框架。它可以用于直接以二进制形式动态生成stub根类或其他代理类，或者在加载时动态修改类。\n- CGLIB(Code Generation Library)：是一个功能强大，高性能和高质量的代码生成库，用于扩展JAVA类并在运行时实现接口。\n- Javassist：是Java的加载时反射系统，它是一个用于在Java中编辑字节码的类库; 它使Java程序能够在运行时定义新类，并在JVM加载之前修改类文件。\n- ...\n\n#### 实现动态代理的思考方向\n\n为了让生成的代理类与目标对象（真实主题角色）保持一致性，从现在开始将介绍以下两种最常见的方式：\n\n1. 通过实现接口的方式 -> JDK动态代理\n2. 通过继承类的方式 -> CGLIB动态代理\n\n注：使用ASM对使用者要求比较高，使用Javassist会比较麻烦\n\n### JDK动态代理\n\nJDK动态代理主要涉及两个类：`java.lang.reflect.Proxy` 和 `java.lang.reflect.InvocationHandler`，我们仍然通过案例来学习\n\n编写一个调用逻辑处理器 LogHandler 类，提供日志增强功能，并实现 InvocationHandler 接口；在 LogHandler 中维护一个目标对象，这个对象是被代理的对象（真实主题角色）；在 `invoke` 方法中编写方法调用的逻辑处理\n\n```java\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.util.Date;\n\npublic class LogHandler implements InvocationHandler {\n    Object target;  // 被代理的对象，实际的方法执行者\n\n    public LogHandler(Object target) {\n        this.target = target;\n    }\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        before();\n        Object result = method.invoke(target, args);  // 调用 target 的 method 方法\n        after();\n        return result;  // 返回方法的执行结果\n    }\n    // 调用invoke方法之前执行\n    private void before() {\n        System.out.println(String.format(\"log start time [%s] \", new Date()));\n    }\n    // 调用invoke方法之后执行\n    private void after() {\n        System.out.println(String.format(\"log end time [%s] \", new Date()));\n    }\n}\n```\n\n编写客户端，获取动态生成的代理类的对象须借助 Proxy 类的 newProxyInstance 方法，具体步骤可见代码和注释\n\n```java\nimport proxy.UserService;\nimport proxy.UserServiceImpl;\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Proxy;\n\npublic class Client2 {\n    public static void main(String[] args) throws IllegalAccessException, InstantiationException {\n        // 设置变量可以保存动态代理类，默认名称以 $Proxy0 格式命名\n        // System.getProperties().setProperty(\"sun.misc.ProxyGenerator.saveGeneratedFiles\", \"true\");\n        // 1. 创建被代理的对象，UserService接口的实现类\n        UserServiceImpl userServiceImpl = new UserServiceImpl();\n        // 2. 获取对应的 ClassLoader\n        ClassLoader classLoader = userServiceImpl.getClass().getClassLoader();\n        // 3. 获取所有接口的Class，这里的UserServiceImpl只实现了一个接口UserService，\n        Class[] interfaces = userServiceImpl.getClass().getInterfaces();\n        // 4. 创建一个将传给代理类的调用请求处理器，处理所有的代理对象上的方法调用\n        //     这里创建的是一个自定义的日志处理器，须传入实际的执行对象 userServiceImpl\n        InvocationHandler logHandler = new LogHandler(userServiceImpl);\n        /*\n\t\t   5.根据上面提供的信息，创建代理对象 在这个过程中，\n               a.JDK会通过根据传入的参数信息动态地在内存中创建和.class 文件等同的字节码\n               b.然后根据相应的字节码转换成对应的class，\n               c.然后调用newInstance()创建代理实例\n\t\t */\n        UserService proxy = (UserService) Proxy.newProxyInstance(classLoader, interfaces, logHandler);\n        // 调用代理的方法\n        proxy.select();\n        proxy.update();\n        \n        // 保存JDK动态代理生成的代理类，类名保存为 UserServiceProxy\n        // ProxyUtils.generateClassFile(userServiceImpl.getClass(), \"UserServiceProxy\");\n    }\n}\n```\n\n运行结果\n\n```\nlog start time [Thu Dec 20 16:55:19 CST 2018] \n查询 selectById\nlog end time [Thu Dec 20 16:55:19 CST 2018] \nlog start time [Thu Dec 20 16:55:19 CST 2018] \n更新 update\nlog end time [Thu Dec 20 16:55:19 CST 2018] \n```\n\nInvocationHandler 和 Proxy 的主要方法介绍如下：\n\n**java.lang.reflect.InvocationHandler**\n\n`Object invoke(Object proxy, Method method, Object[] args)` 定义了代理对象调用方法时希望执行的动作，用于集中处理在动态代理类对象上的方法调用\n\n**java.lang.reflect.Proxy**\n\n`static InvocationHandler getInvocationHandler(Object proxy)` 用于获取指定代理对象所关联的调用处理器\n\n`static Class<?> getProxyClass(ClassLoader loader, Class<?>... interfaces)` 返回指定接口的代理类\n\n`static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h)` 构造实现指定接口的代理类的一个新实例，所有方法会调用给定处理器对象的 invoke 方法\n\n`static boolean isProxyClass(Class<?> cl)` 返回 cl 是否为一个代理类\n\n#### 代理类的调用过程\n\n生成的代理类到底长什么样子呢？借助下面的工具类，把代理类保存下来再探个究竟\n（通过设置环境变量sun.misc.ProxyGenerator.saveGeneratedFiles=true也可以保存代理类）\n\n```java\nimport sun.misc.ProxyGenerator;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\npublic class ProxyUtils {\n    /**\n     * 将根据类信息动态生成的二进制字节码保存到硬盘中，默认的是clazz目录下\n     * params: clazz 需要生成动态代理类的类\n     * proxyName: 为动态生成的代理类的名称\n     */\n    public static void generateClassFile(Class clazz, String proxyName) {\n        // 根据类信息和提供的代理类名称，生成字节码\n        byte[] classFile = ProxyGenerator.generateProxyClass(proxyName, clazz.getInterfaces());\n        String paths = clazz.getResource(\".\").getPath();\n        System.out.println(paths);\n        FileOutputStream out = null;\n        try {\n            //保留到硬盘中\n            out = new FileOutputStream(paths + proxyName + \".class\");\n            out.write(classFile);\n            out.flush();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                out.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n\n然后在 Client2 测试类的main的最后面加入一行代码\n\n```java\n// 保存JDK动态代理生成的代理类，类名保存为 UserServiceProxy\nProxyUtils.generateClassFile(userServiceImpl.getClass(), \"UserServiceProxy\");\n```\n\nIDEA 再次运行之后就可以在 target 的类路径下找到 UserServiceProxy.class，双击后IDEA的反编译插件会将该二进制class文件\n\n![JDK 动态代理生成的代理类](http://image.laijianfeng.org/20181220_171031.png)\n\nUserServiceProxy 的代码如下所示：\n\n```java\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.lang.reflect.UndeclaredThrowableException;\nimport proxy.UserService;\n\npublic final class UserServiceProxy extends Proxy implements UserService {\n    private static Method m1;\n    private static Method m2;\n    private static Method m4;\n    private static Method m0;\n    private static Method m3;\n\n    public UserServiceProxy(InvocationHandler var1) throws  {\n        super(var1);\n    }\n\n    public final boolean equals(Object var1) throws  {\n        // 省略...\n    }\n\n    public final String toString() throws  {\n        // 省略...\n    }\n\n    public final void select() throws  {\n        try {\n            super.h.invoke(this, m4, (Object[])null);\n        } catch (RuntimeException | Error var2) {\n            throw var2;\n        } catch (Throwable var3) {\n            throw new UndeclaredThrowableException(var3);\n        }\n    }\n\n    public final int hashCode() throws  {\n        // 省略...\n    }\n\n    public final void update() throws  {\n        try {\n            super.h.invoke(this, m3, (Object[])null);\n        } catch (RuntimeException | Error var2) {\n            throw var2;\n        } catch (Throwable var3) {\n            throw new UndeclaredThrowableException(var3);\n        }\n    }\n\n    static {\n        try {\n            m1 = Class.forName(\"java.lang.Object\").getMethod(\"equals\", Class.forName(\"java.lang.Object\"));\n            m2 = Class.forName(\"java.lang.Object\").getMethod(\"toString\");\n            m4 = Class.forName(\"proxy.UserService\").getMethod(\"select\");\n            m0 = Class.forName(\"java.lang.Object\").getMethod(\"hashCode\");\n            m3 = Class.forName(\"proxy.UserService\").getMethod(\"update\");\n        } catch (NoSuchMethodException var2) {\n            throw new NoSuchMethodError(var2.getMessage());\n        } catch (ClassNotFoundException var3) {\n            throw new NoClassDefFoundError(var3.getMessage());\n        }\n    }\n}\n```\n\n从 UserServiceProxy 的代码中我们可以发现：\n\n- UserServiceProxy 继承了 Proxy 类，并且实现了被代理的所有接口，以及equals、hashCode、toString等方法\n- 由于 UserServiceProxy 继承了 Proxy 类，所以每个代理类都会关联一个 InvocationHandler 方法调用处理器\n- 类和所有方法都被 `public final` 修饰，所以代理类只可被使用，不可以再被继承\n- 每个方法都有一个 Method 对象来描述，Method 对象在static静态代码块中创建，以 `m + 数字` 的格式命名\n- 调用方法的时候通过 `super.h.invoke(this, m1, (Object[])null);` 调用，其中的 `super.h.invoke` 实际上是在创建代理的时候传递给 `Proxy.newProxyInstance` 的 LogHandler 对象，它继承 InvocationHandler 类，负责实际的调用处理逻辑\n\n而 LogHandler 的 invoke 方法接收到 method、args 等参数后，进行一些处理，然后通过反射让被代理的对象 target 执行方法\n\n```java\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        before();\n        Object result = method.invoke(target, args);       // 调用 target 的 method 方法\n        after();\n        return result;  // 返回方法的执行结果\n    }\n```\n\nJDK动态代理执行方法调用的过程简图如下：\n\n![JDK动态代理执行方法调用过程](http://image.laijianfeng.org/2018_12_20_JDKProxy.png)\n\n代理类的调用过程相信大家都明了了，而关于Proxy的源码解析，还请大家另外查阅其他文章或者直接看源码\n\n### CGLIB动态代理\n\nmaven引入CGLIB包，然后编写一个UserDao类，它没有接口，只有两个方法，select() 和 update()\n\n```java\npublic class UserDao {\n    public void select() {\n        System.out.println(\"UserDao 查询 selectById\");\n    }\n    public void update() {\n        System.out.println(\"UserDao 更新 update\");\n    }\n}\n```\n\n编写一个 LogInterceptor ，继承了 MethodInterceptor，用于方法的拦截回调\n\n```java\nimport java.lang.reflect.Method;\nimport java.util.Date;\n\npublic class LogInterceptor implements MethodInterceptor {\n    /**\n     * @param object 表示要进行增强的对象\n     * @param method 表示拦截的方法\n     * @param objects 数组表示参数列表，基本数据类型需要传入其包装类型，如int-->Integer、long-Long、double-->Double\n     * @param methodProxy 表示对方法的代理，invokeSuper方法表示对被代理对象方法的调用\n     * @return 执行结果\n     * @throws Throwable\n     */\n    @Override\n    public Object intercept(Object object, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {\n        before();\n        Object result = methodProxy.invokeSuper(object, objects);   // 注意这里是调用 invokeSuper 而不是 invoke，否则死循环，methodProxy.invokesuper执行的是原始类的方法，method.invoke执行的是子类的方法\n        after();\n        return result;\n    }\n    private void before() {\n        System.out.println(String.format(\"log start time [%s] \", new Date()));\n    }\n    private void after() {\n        System.out.println(String.format(\"log end time [%s] \", new Date()));\n    }\n}\n```\n\n测试\n\n```java\nimport net.sf.cglib.proxy.Enhancer;\n\npublic class CglibTest {\n    public static void main(String[] args) {\n        DaoProxy daoProxy = new DaoProxy(); \n        Enhancer enhancer = new Enhancer();\n        enhancer.setSuperclass(Dao.class);  // 设置超类，cglib是通过继承来实现的\n        enhancer.setCallback(daoProxy);\n\n        Dao dao = (Dao)enhancer.create();   // 创建代理类\n        dao.update();\n        dao.select();\n    }\n}\n```\n\n运行结果\n\n```\nlog start time [Fri Dec 21 00:06:40 CST 2018] \nUserDao 查询 selectById\nlog end time [Fri Dec 21 00:06:40 CST 2018] \nlog start time [Fri Dec 21 00:06:40 CST 2018] \nUserDao 更新 update\nlog end time [Fri Dec 21 00:06:40 CST 2018] \n```\n\n还可以进一步多个 MethodInterceptor 进行过滤筛选\n\n```java\npublic class LogInterceptor2 implements MethodInterceptor {\n    @Override\n    public Object intercept(Object object, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {\n        before();\n        Object result = methodProxy.invokeSuper(object, objects);\n        after();\n        return result;\n    }\n    private void before() {\n        System.out.println(String.format(\"log2 start time [%s] \", new Date()));\n    }\n    private void after() {\n        System.out.println(String.format(\"log2 end time [%s] \", new Date()));\n    }\n}\n\n// 回调过滤器: 在CGLib回调时可以设置对不同方法执行不同的回调逻辑，或者根本不执行回调。\npublic class DaoFilter implements CallbackFilter {\n    @Override\n    public int accept(Method method) {\n        if (\"select\".equals(method.getName())) {\n            return 0;   // Callback 列表第1个拦截器\n        }\n        return 1;   // Callback 列表第2个拦截器，return 2 则为第3个，以此类推\n    }\n}\n```\n\n再次测试\n\n```java\npublic class CglibTest2 {\n    public static void main(String[] args) {\n        LogInterceptor logInterceptor = new LogInterceptor();\n        LogInterceptor2 logInterceptor2 = new LogInterceptor2();\n        Enhancer enhancer = new Enhancer();\n        enhancer.setSuperclass(UserDao.class);   // 设置超类，cglib是通过继承来实现的\n        enhancer.setCallbacks(new Callback[]{logInterceptor, logInterceptor2, NoOp.INSTANCE});   // 设置多个拦截器，NoOp.INSTANCE是一个空拦截器，不做任何处理\n        enhancer.setCallbackFilter(new DaoFilter());\n\n        UserDao proxy = (UserDao) enhancer.create();   // 创建代理类\n        proxy.select();\n        proxy.update();\n    }\n}\n```\n\n运行结果\n\n```java\nlog start time [Fri Dec 21 00:22:39 CST 2018] \nUserDao 查询 selectById\nlog end time [Fri Dec 21 00:22:39 CST 2018] \nlog2 start time [Fri Dec 21 00:22:39 CST 2018] \nUserDao 更新 update\nlog2 end time [Fri Dec 21 00:22:39 CST 2018] \n```\n\nCGLIB 创建动态代理类的模式是：\n\n1. 查找目标类上的所有非final 的public类型的方法定义；\n2. 将这些方法的定义转换成字节码；\n3. 将组成的字节码转换成相应的代理的class对象；\n4. 实现 MethodInterceptor接口，用来处理对代理类上所有方法的请求\n\n### JDK动态代理与CGLIB动态代理对比\n\nJDK动态代理：基于Java反射机制实现，必须要实现了接口的业务类才能用这种办法生成代理对象。\n\ncglib动态代理：基于ASM机制实现，通过生成业务类的子类作为代理类。\n\nJDK Proxy 的优势：\n\n- 最小化依赖关系，减少依赖意味着简化开发和维护，JDK 本身的支持，可能比 cglib 更加可靠。\n- 平滑进行 JDK 版本升级，而字节码类库通常需要进行更新以保证在新版 Java 上能够使用。\n- 代码实现简单。\n\n基于类似 cglib 框架的优势：\n\n- 无需实现接口，达到代理类无侵入\n- 只操作我们关心的类，而不必为其他相关类增加工作量。\n- 高性能\n\n### 面试题\n\n> 来源于网上，用于帮助理解和掌握，欢迎补充\n\n#### 描述动态代理的几种实现方式？分别说出相应的优缺点\n\n代理可以分为 \"静态代理\" 和 \"动态代理\"，动态代理又分为 \"JDK动态代理\" 和 \"CGLIB动态代理\" 实现。\n\n**静态代理**：代理对象和实际对象都继承了同一个接口，在代理对象中指向的是实际对象的实例，这样对外暴露的是代理对象而真正调用的是 Real Object\n\n- **优点**：可以很好的保护实际对象的业务逻辑对外暴露，从而提高安全性。\n- **缺点**：不同的接口要有不同的代理类实现，会很冗余\n\n**JDK 动态代理**：\n\n- 为了解决静态代理中，生成大量的代理类造成的冗余；\n- JDK 动态代理只需要实现 InvocationHandler 接口，重写 invoke 方法便可以完成代理的实现，\n- jdk的代理是利用反射生成代理类 Proxyxx.class 代理类字节码，并生成对象\n- jdk动态代理之所以**只能代理接口**是因为**代理类本身已经extends了Proxy，而java是不允许多重继承的**，但是允许实现多个接口\n- **优点**：解决了静态代理中冗余的代理实现类问题。\n- **缺点**：JDK 动态代理是基于接口设计实现的，如果没有接口，会抛异常。\n\n**CGLIB 代理**：\n\n- 由于 JDK 动态代理限制了只能基于接口设计，而对于没有接口的情况，JDK方式解决不了；\n- CGLib 采用了非常底层的字节码技术，其原理是通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑，来完成动态代理的实现。\n- 实现方式实现 MethodInterceptor 接口，重写 intercept 方法，通过 Enhancer 类的回调方法来实现。\n- 但是CGLib在创建代理对象时所花费的时间却比JDK多得多，所以对于单例的对象，因为无需频繁创建对象，用CGLib合适，反之，使用JDK方式要更为合适一些。\n- 同时，由于CGLib由于是采用动态创建子类的方法，对于final方法，无法进行代理。\n- **优点**：没有接口也能实现动态代理，而且采用字节码增强技术，性能也不错。\n- **缺点**：技术实现相对难理解些。\n\n#### CGlib 对接口实现代理？\n\n```java\nimport net.sf.cglib.proxy.Enhancer;\nimport net.sf.cglib.proxy.MethodInterceptor;\nimport net.sf.cglib.proxy.MethodProxy;\nimport proxy.UserService;\nimport java.lang.reflect.Method;\n\n/**\n * 创建代理类的工厂 该类要实现 MethodInterceptor 接口。\n * 该类中完成三样工作：\n * （1）声明目标类的成员变量，并创建以目标类对象为参数的构造器。用于接收目标对象\n * （2）定义代理的生成方法，用于创建代理对象。方法名是任意的。代理对象即目标类的子类\n * （3）定义回调接口方法。对目标类的增强这在这里完成\n */\npublic class CGLibFactory implements MethodInterceptor {\n    // 声明目标类的成员变量\n    private UserService target;\n\n    public CGLibFactory(UserService target) {\n        this.target = target;\n    }\n    // 定义代理的生成方法,用于创建代理对象\n    public UserService myCGLibCreator() {\n        Enhancer enhancer = new Enhancer();\n        // 为代理对象设置父类，即指定目标类\n        enhancer.setSuperclass(UserService.class);\n        /**\n         * 设置回调接口对象 注意，只所以在setCallback()方法中可以写上this，\n         * 是因为MethodIntecepter接口继承自Callback，是其子接口\n         */\n        enhancer.setCallback(this);\n        return (UserService) enhancer.create();// create用以生成CGLib代理对象\n    }\n    @Override\n    public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n        System.out.println(\"start invoke \" + method.getName());\n        Object result = method.invoke(target, args);\n        System.out.println(\"end invoke \" + method.getName());\n        return result;\n    }\n}\n```\n\n> 参考：\n> 《Java核心技术》卷1\n> 《深入理解Java虚拟机》7.3\n> java docs: <https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Proxy.html>\n> [Java三种代理模式：静态代理、动态代理和cglib代理](https://segmentfault.com/a/1190000011291179)\n> [描述动态代理的几种实现方式 分别说出相应的优缺点](http://xzc.fun/w/index.php?title=%E6%8F%8F%E8%BF%B0%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F_%E5%88%86%E5%88%AB%E8%AF%B4%E5%87%BA%E7%9B%B8%E5%BA%94%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9)\n> [JDK动态代理详解](https://my.oschina.net/robinyao/blog/811193)\n> [Java动态代理机制详解（JDK 和CGLIB，Javassist，ASM）](https://blog.csdn.net/luanlouis/article/details/24589193)\n> [静态代理和动态代理的理解](https://blog.csdn.net/WangQYoho/article/details/77584832)\n>\n> https://www.jianshu.com/p/9bcac608c714","source":"_posts/java/java动态代理.md","raw":"---\ntitle: java动态代理\ndate: 2020-9-20 12:00:00\n---\n\n# Java 动态代理详解](https://www.cnblogs.com/whirly/p/10154887.html)\n\n\n\n动态代理在Java中有着广泛的应用，比如Spring AOP、Hibernate数据查询、测试框架的后端mock、RPC远程调用、Java注解对象获取、日志、用户鉴权、全局性异常处理、性能监控，甚至事务处理等。\n\n本文主要介绍Java中两种常见的动态代理方式：JDK原生动态代理和CGLIB动态代理。\n\n由于Java动态代理与java反射机制关系紧密，请读者确保已经了解了Java反射机制，可参考上一篇文章《[Java反射机制详解](https://mp.weixin.qq.com/s?__biz=MzI1NDU0MTE1NA==&mid=2247483785&idx=1&sn=f696c8c49cb7ecce9818247683482a1c&chksm=e9c2ed84deb564925172b2dd78d307d4dc345fa313d3e44f01e84fa22ac5561b37aec5cbd5b4&scene=0#rd)》\n\n### 代理模式\n\n本文将介绍的Java动态代理与设计模式中的代理模式有关，什么是代理模式呢？\n\n**代理模式**：给某一个对象提供一个代理，并由代理对象来控制对真实对象的访问。代理模式是一种结构型设计模式。\n\n代理模式角色分为 3 种：\n\n**Subject（抽象主题角色）**：定义代理类和真实主题的公共对外方法，也是代理类代理真实主题的方法；\n\n**RealSubject（真实主题角色**）：真正实现业务逻辑的类；\n\n**Proxy（代理主题角色）**：用来代理和封装真实主题；\n\n代理模式的结构比较简单，其核心是代理类，为了让客户端能够**一致性地对待**真实对象和代理对象，在代理模式中引入了抽象层\n\n![代理模式类图](http://image.laijianfeng.org/2018_12_20_proxyUML.jpg)\n\n代理模式**按照职责**（使用场景）来分类，至少可以分为以下几类：1、远程代理。 2、虚拟代理。 3、Copy-on-Write 代理。 4、保护（Protect or Access）代理。 5、Cache代理。 6、防火墙（Firewall）代理。 7、同步化（Synchronization）代理。 8、智能引用（Smart Reference）代理等等。\n\n如果**根据字节码的创建时机**来分类，可以分为静态代理和动态代理：\n\n- 所谓**静态**也就是在**程序运行前**就已经存在代理类的**字节码文件**，代理类和真实主题角色的关系在运行前就确定了。\n- 而动态代理的源码是在程序运行期间由**JVM**根据反射等机制**动态的生成**，所以在运行前并不存在代理类的字节码文件\n\n### 静态代理\n\n我们先通过实例来学习静态代理，然后理解静态代理的缺点，再来学习本文的主角：动态代理\n\n编写一个接口 UserService ，以及该接口的一个实现类 UserServiceImpl\n\n```java\npublic interface UserService {\n    public void select();   \n    public void update();\n}\n\npublic class UserServiceImpl implements UserService {  \n    public void select() {  \n        System.out.println(\"查询 selectById\");\n    }\n    public void update() {\n        System.out.println(\"更新 update\");\n    }\n}\n```\n\n我们将通过静态代理对 UserServiceImpl 进行功能增强，在调用 `select` 和 `update` 之前记录一些日志。写一个代理类 UserServiceProxy，代理类需要实现 UserService\n\n```java\npublic class UserServiceProxy implements UserService {\n    private UserService target; // 被代理的对象\n\n    public UserServiceProxy(UserService target) {\n        this.target = target;\n    }\n    public void select() {\n        before();\n        target.select();    // 这里才实际调用真实主题角色的方法\n        after();\n    }\n    public void update() {\n        before();\n        target.update();    // 这里才实际调用真实主题角色的方法\n        after();\n    }\n\n    private void before() {     // 在执行方法之前执行\n        System.out.println(String.format(\"log start time [%s] \", new Date()));\n    }\n    private void after() {      // 在执行方法之后执行\n        System.out.println(String.format(\"log end time [%s] \", new Date()));\n    }\n}\n```\n\n客户端测试\n\n```java\npublic class Client1 {\n    public static void main(String[] args) {\n        UserService userServiceImpl = new UserServiceImpl();\n        UserService proxy = new UserServiceProxy(userServiceImpl);\n\n        proxy.select();\n        proxy.update();\n    }\n}\n```\n\n输出\n\n```\nlog start time [Thu Dec 20 14:13:25 CST 2018] \n查询 selectById\nlog end time [Thu Dec 20 14:13:25 CST 2018] \nlog start time [Thu Dec 20 14:13:25 CST 2018] \n更新 update\nlog end time [Thu Dec 20 14:13:25 CST 2018] \n```\n\n通过静态代理，我们达到了功能增强的目的，而且没有侵入原代码，这是静态代理的一个优点。\n\n#### 静态代理的缺点\n\n虽然静态代理实现简单，且不侵入原代码，但是，当场景稍微复杂一些的时候，静态代理的缺点也会暴露出来。\n\n1、 当需要代理多个类的时候，由于代理对象要实现与目标对象一致的接口，有两种方式：\n\n- 只维护一个代理类，由这个代理类实现多个接口，但是这样就导致**代理类过于庞大**\n- 新建多个代理类，每个目标对象对应一个代理类，但是这样会**产生过多的代理类**\n\n2、 当接口需要增加、删除、修改方法的时候，目标对象与代理类都要同时修改，**不易维护**。\n\n#### 如何改进？\n\n当然是让代理类**动态的生成**啦，也就是动态代理。\n\n**为什么类可以动态的生成？**\n\n这就涉及到Java虚拟机的**类加载机制**了，推荐翻看《深入理解Java虚拟机》7.3节 类加载的过程。\n\nJava虚拟机类加载过程主要分为五个阶段：加载、验证、准备、解析、初始化。其中加载阶段需要完成以下3件事情：\n\n1. 通过一个类的全限定名来获取定义此类的二进制字节流\n2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构\n3. 在内存中生成一个代表这个类的 `java.lang.Class` 对象，作为方法区这个类的各种数据访问入口\n\n由于虚拟机规范对这3点要求并不具体，所以实际的实现是非常灵活的，关于第1点，**获取类的二进制字节流**（class字节码）就有很多途径：\n\n- 从ZIP包获取，这是JAR、EAR、WAR等格式的基础\n- 从网络中获取，典型的应用是 Applet\n- **运行时计算生成**，这种场景使用最多的是动态代理技术，在 java.lang.reflect.Proxy 类中，就是用了 ProxyGenerator.generateProxyClass 来为特定接口生成形式为 `*$Proxy` 的代理类的二进制字节流\n- 由其它文件生成，典型应用是JSP，即由JSP文件生成对应的Class类\n- 从数据库中获取等等\n\n所以，动态代理就是想办法，根据接口或目标对象，计算出代理类的字节码，然后再加载到JVM中使用。但是如何计算？如何生成？情况也许比想象的复杂得多，我们需要借助现有的方案。\n\n#### 常见的字节码操作类库\n\n> 这里有一些介绍：<https://java-source.net/open-source/bytecode-libraries>\n\n- Apache BCEL (Byte Code Engineering Library)：是Java classworking广泛使用的一种框架，它可以深入到JVM汇编语言进行类操作的细节。\n- ObjectWeb ASM：是一个Java字节码操作框架。它可以用于直接以二进制形式动态生成stub根类或其他代理类，或者在加载时动态修改类。\n- CGLIB(Code Generation Library)：是一个功能强大，高性能和高质量的代码生成库，用于扩展JAVA类并在运行时实现接口。\n- Javassist：是Java的加载时反射系统，它是一个用于在Java中编辑字节码的类库; 它使Java程序能够在运行时定义新类，并在JVM加载之前修改类文件。\n- ...\n\n#### 实现动态代理的思考方向\n\n为了让生成的代理类与目标对象（真实主题角色）保持一致性，从现在开始将介绍以下两种最常见的方式：\n\n1. 通过实现接口的方式 -> JDK动态代理\n2. 通过继承类的方式 -> CGLIB动态代理\n\n注：使用ASM对使用者要求比较高，使用Javassist会比较麻烦\n\n### JDK动态代理\n\nJDK动态代理主要涉及两个类：`java.lang.reflect.Proxy` 和 `java.lang.reflect.InvocationHandler`，我们仍然通过案例来学习\n\n编写一个调用逻辑处理器 LogHandler 类，提供日志增强功能，并实现 InvocationHandler 接口；在 LogHandler 中维护一个目标对象，这个对象是被代理的对象（真实主题角色）；在 `invoke` 方法中编写方法调用的逻辑处理\n\n```java\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.util.Date;\n\npublic class LogHandler implements InvocationHandler {\n    Object target;  // 被代理的对象，实际的方法执行者\n\n    public LogHandler(Object target) {\n        this.target = target;\n    }\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        before();\n        Object result = method.invoke(target, args);  // 调用 target 的 method 方法\n        after();\n        return result;  // 返回方法的执行结果\n    }\n    // 调用invoke方法之前执行\n    private void before() {\n        System.out.println(String.format(\"log start time [%s] \", new Date()));\n    }\n    // 调用invoke方法之后执行\n    private void after() {\n        System.out.println(String.format(\"log end time [%s] \", new Date()));\n    }\n}\n```\n\n编写客户端，获取动态生成的代理类的对象须借助 Proxy 类的 newProxyInstance 方法，具体步骤可见代码和注释\n\n```java\nimport proxy.UserService;\nimport proxy.UserServiceImpl;\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Proxy;\n\npublic class Client2 {\n    public static void main(String[] args) throws IllegalAccessException, InstantiationException {\n        // 设置变量可以保存动态代理类，默认名称以 $Proxy0 格式命名\n        // System.getProperties().setProperty(\"sun.misc.ProxyGenerator.saveGeneratedFiles\", \"true\");\n        // 1. 创建被代理的对象，UserService接口的实现类\n        UserServiceImpl userServiceImpl = new UserServiceImpl();\n        // 2. 获取对应的 ClassLoader\n        ClassLoader classLoader = userServiceImpl.getClass().getClassLoader();\n        // 3. 获取所有接口的Class，这里的UserServiceImpl只实现了一个接口UserService，\n        Class[] interfaces = userServiceImpl.getClass().getInterfaces();\n        // 4. 创建一个将传给代理类的调用请求处理器，处理所有的代理对象上的方法调用\n        //     这里创建的是一个自定义的日志处理器，须传入实际的执行对象 userServiceImpl\n        InvocationHandler logHandler = new LogHandler(userServiceImpl);\n        /*\n\t\t   5.根据上面提供的信息，创建代理对象 在这个过程中，\n               a.JDK会通过根据传入的参数信息动态地在内存中创建和.class 文件等同的字节码\n               b.然后根据相应的字节码转换成对应的class，\n               c.然后调用newInstance()创建代理实例\n\t\t */\n        UserService proxy = (UserService) Proxy.newProxyInstance(classLoader, interfaces, logHandler);\n        // 调用代理的方法\n        proxy.select();\n        proxy.update();\n        \n        // 保存JDK动态代理生成的代理类，类名保存为 UserServiceProxy\n        // ProxyUtils.generateClassFile(userServiceImpl.getClass(), \"UserServiceProxy\");\n    }\n}\n```\n\n运行结果\n\n```\nlog start time [Thu Dec 20 16:55:19 CST 2018] \n查询 selectById\nlog end time [Thu Dec 20 16:55:19 CST 2018] \nlog start time [Thu Dec 20 16:55:19 CST 2018] \n更新 update\nlog end time [Thu Dec 20 16:55:19 CST 2018] \n```\n\nInvocationHandler 和 Proxy 的主要方法介绍如下：\n\n**java.lang.reflect.InvocationHandler**\n\n`Object invoke(Object proxy, Method method, Object[] args)` 定义了代理对象调用方法时希望执行的动作，用于集中处理在动态代理类对象上的方法调用\n\n**java.lang.reflect.Proxy**\n\n`static InvocationHandler getInvocationHandler(Object proxy)` 用于获取指定代理对象所关联的调用处理器\n\n`static Class<?> getProxyClass(ClassLoader loader, Class<?>... interfaces)` 返回指定接口的代理类\n\n`static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h)` 构造实现指定接口的代理类的一个新实例，所有方法会调用给定处理器对象的 invoke 方法\n\n`static boolean isProxyClass(Class<?> cl)` 返回 cl 是否为一个代理类\n\n#### 代理类的调用过程\n\n生成的代理类到底长什么样子呢？借助下面的工具类，把代理类保存下来再探个究竟\n（通过设置环境变量sun.misc.ProxyGenerator.saveGeneratedFiles=true也可以保存代理类）\n\n```java\nimport sun.misc.ProxyGenerator;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\npublic class ProxyUtils {\n    /**\n     * 将根据类信息动态生成的二进制字节码保存到硬盘中，默认的是clazz目录下\n     * params: clazz 需要生成动态代理类的类\n     * proxyName: 为动态生成的代理类的名称\n     */\n    public static void generateClassFile(Class clazz, String proxyName) {\n        // 根据类信息和提供的代理类名称，生成字节码\n        byte[] classFile = ProxyGenerator.generateProxyClass(proxyName, clazz.getInterfaces());\n        String paths = clazz.getResource(\".\").getPath();\n        System.out.println(paths);\n        FileOutputStream out = null;\n        try {\n            //保留到硬盘中\n            out = new FileOutputStream(paths + proxyName + \".class\");\n            out.write(classFile);\n            out.flush();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                out.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n\n然后在 Client2 测试类的main的最后面加入一行代码\n\n```java\n// 保存JDK动态代理生成的代理类，类名保存为 UserServiceProxy\nProxyUtils.generateClassFile(userServiceImpl.getClass(), \"UserServiceProxy\");\n```\n\nIDEA 再次运行之后就可以在 target 的类路径下找到 UserServiceProxy.class，双击后IDEA的反编译插件会将该二进制class文件\n\n![JDK 动态代理生成的代理类](http://image.laijianfeng.org/20181220_171031.png)\n\nUserServiceProxy 的代码如下所示：\n\n```java\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.lang.reflect.UndeclaredThrowableException;\nimport proxy.UserService;\n\npublic final class UserServiceProxy extends Proxy implements UserService {\n    private static Method m1;\n    private static Method m2;\n    private static Method m4;\n    private static Method m0;\n    private static Method m3;\n\n    public UserServiceProxy(InvocationHandler var1) throws  {\n        super(var1);\n    }\n\n    public final boolean equals(Object var1) throws  {\n        // 省略...\n    }\n\n    public final String toString() throws  {\n        // 省略...\n    }\n\n    public final void select() throws  {\n        try {\n            super.h.invoke(this, m4, (Object[])null);\n        } catch (RuntimeException | Error var2) {\n            throw var2;\n        } catch (Throwable var3) {\n            throw new UndeclaredThrowableException(var3);\n        }\n    }\n\n    public final int hashCode() throws  {\n        // 省略...\n    }\n\n    public final void update() throws  {\n        try {\n            super.h.invoke(this, m3, (Object[])null);\n        } catch (RuntimeException | Error var2) {\n            throw var2;\n        } catch (Throwable var3) {\n            throw new UndeclaredThrowableException(var3);\n        }\n    }\n\n    static {\n        try {\n            m1 = Class.forName(\"java.lang.Object\").getMethod(\"equals\", Class.forName(\"java.lang.Object\"));\n            m2 = Class.forName(\"java.lang.Object\").getMethod(\"toString\");\n            m4 = Class.forName(\"proxy.UserService\").getMethod(\"select\");\n            m0 = Class.forName(\"java.lang.Object\").getMethod(\"hashCode\");\n            m3 = Class.forName(\"proxy.UserService\").getMethod(\"update\");\n        } catch (NoSuchMethodException var2) {\n            throw new NoSuchMethodError(var2.getMessage());\n        } catch (ClassNotFoundException var3) {\n            throw new NoClassDefFoundError(var3.getMessage());\n        }\n    }\n}\n```\n\n从 UserServiceProxy 的代码中我们可以发现：\n\n- UserServiceProxy 继承了 Proxy 类，并且实现了被代理的所有接口，以及equals、hashCode、toString等方法\n- 由于 UserServiceProxy 继承了 Proxy 类，所以每个代理类都会关联一个 InvocationHandler 方法调用处理器\n- 类和所有方法都被 `public final` 修饰，所以代理类只可被使用，不可以再被继承\n- 每个方法都有一个 Method 对象来描述，Method 对象在static静态代码块中创建，以 `m + 数字` 的格式命名\n- 调用方法的时候通过 `super.h.invoke(this, m1, (Object[])null);` 调用，其中的 `super.h.invoke` 实际上是在创建代理的时候传递给 `Proxy.newProxyInstance` 的 LogHandler 对象，它继承 InvocationHandler 类，负责实际的调用处理逻辑\n\n而 LogHandler 的 invoke 方法接收到 method、args 等参数后，进行一些处理，然后通过反射让被代理的对象 target 执行方法\n\n```java\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        before();\n        Object result = method.invoke(target, args);       // 调用 target 的 method 方法\n        after();\n        return result;  // 返回方法的执行结果\n    }\n```\n\nJDK动态代理执行方法调用的过程简图如下：\n\n![JDK动态代理执行方法调用过程](http://image.laijianfeng.org/2018_12_20_JDKProxy.png)\n\n代理类的调用过程相信大家都明了了，而关于Proxy的源码解析，还请大家另外查阅其他文章或者直接看源码\n\n### CGLIB动态代理\n\nmaven引入CGLIB包，然后编写一个UserDao类，它没有接口，只有两个方法，select() 和 update()\n\n```java\npublic class UserDao {\n    public void select() {\n        System.out.println(\"UserDao 查询 selectById\");\n    }\n    public void update() {\n        System.out.println(\"UserDao 更新 update\");\n    }\n}\n```\n\n编写一个 LogInterceptor ，继承了 MethodInterceptor，用于方法的拦截回调\n\n```java\nimport java.lang.reflect.Method;\nimport java.util.Date;\n\npublic class LogInterceptor implements MethodInterceptor {\n    /**\n     * @param object 表示要进行增强的对象\n     * @param method 表示拦截的方法\n     * @param objects 数组表示参数列表，基本数据类型需要传入其包装类型，如int-->Integer、long-Long、double-->Double\n     * @param methodProxy 表示对方法的代理，invokeSuper方法表示对被代理对象方法的调用\n     * @return 执行结果\n     * @throws Throwable\n     */\n    @Override\n    public Object intercept(Object object, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {\n        before();\n        Object result = methodProxy.invokeSuper(object, objects);   // 注意这里是调用 invokeSuper 而不是 invoke，否则死循环，methodProxy.invokesuper执行的是原始类的方法，method.invoke执行的是子类的方法\n        after();\n        return result;\n    }\n    private void before() {\n        System.out.println(String.format(\"log start time [%s] \", new Date()));\n    }\n    private void after() {\n        System.out.println(String.format(\"log end time [%s] \", new Date()));\n    }\n}\n```\n\n测试\n\n```java\nimport net.sf.cglib.proxy.Enhancer;\n\npublic class CglibTest {\n    public static void main(String[] args) {\n        DaoProxy daoProxy = new DaoProxy(); \n        Enhancer enhancer = new Enhancer();\n        enhancer.setSuperclass(Dao.class);  // 设置超类，cglib是通过继承来实现的\n        enhancer.setCallback(daoProxy);\n\n        Dao dao = (Dao)enhancer.create();   // 创建代理类\n        dao.update();\n        dao.select();\n    }\n}\n```\n\n运行结果\n\n```\nlog start time [Fri Dec 21 00:06:40 CST 2018] \nUserDao 查询 selectById\nlog end time [Fri Dec 21 00:06:40 CST 2018] \nlog start time [Fri Dec 21 00:06:40 CST 2018] \nUserDao 更新 update\nlog end time [Fri Dec 21 00:06:40 CST 2018] \n```\n\n还可以进一步多个 MethodInterceptor 进行过滤筛选\n\n```java\npublic class LogInterceptor2 implements MethodInterceptor {\n    @Override\n    public Object intercept(Object object, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {\n        before();\n        Object result = methodProxy.invokeSuper(object, objects);\n        after();\n        return result;\n    }\n    private void before() {\n        System.out.println(String.format(\"log2 start time [%s] \", new Date()));\n    }\n    private void after() {\n        System.out.println(String.format(\"log2 end time [%s] \", new Date()));\n    }\n}\n\n// 回调过滤器: 在CGLib回调时可以设置对不同方法执行不同的回调逻辑，或者根本不执行回调。\npublic class DaoFilter implements CallbackFilter {\n    @Override\n    public int accept(Method method) {\n        if (\"select\".equals(method.getName())) {\n            return 0;   // Callback 列表第1个拦截器\n        }\n        return 1;   // Callback 列表第2个拦截器，return 2 则为第3个，以此类推\n    }\n}\n```\n\n再次测试\n\n```java\npublic class CglibTest2 {\n    public static void main(String[] args) {\n        LogInterceptor logInterceptor = new LogInterceptor();\n        LogInterceptor2 logInterceptor2 = new LogInterceptor2();\n        Enhancer enhancer = new Enhancer();\n        enhancer.setSuperclass(UserDao.class);   // 设置超类，cglib是通过继承来实现的\n        enhancer.setCallbacks(new Callback[]{logInterceptor, logInterceptor2, NoOp.INSTANCE});   // 设置多个拦截器，NoOp.INSTANCE是一个空拦截器，不做任何处理\n        enhancer.setCallbackFilter(new DaoFilter());\n\n        UserDao proxy = (UserDao) enhancer.create();   // 创建代理类\n        proxy.select();\n        proxy.update();\n    }\n}\n```\n\n运行结果\n\n```java\nlog start time [Fri Dec 21 00:22:39 CST 2018] \nUserDao 查询 selectById\nlog end time [Fri Dec 21 00:22:39 CST 2018] \nlog2 start time [Fri Dec 21 00:22:39 CST 2018] \nUserDao 更新 update\nlog2 end time [Fri Dec 21 00:22:39 CST 2018] \n```\n\nCGLIB 创建动态代理类的模式是：\n\n1. 查找目标类上的所有非final 的public类型的方法定义；\n2. 将这些方法的定义转换成字节码；\n3. 将组成的字节码转换成相应的代理的class对象；\n4. 实现 MethodInterceptor接口，用来处理对代理类上所有方法的请求\n\n### JDK动态代理与CGLIB动态代理对比\n\nJDK动态代理：基于Java反射机制实现，必须要实现了接口的业务类才能用这种办法生成代理对象。\n\ncglib动态代理：基于ASM机制实现，通过生成业务类的子类作为代理类。\n\nJDK Proxy 的优势：\n\n- 最小化依赖关系，减少依赖意味着简化开发和维护，JDK 本身的支持，可能比 cglib 更加可靠。\n- 平滑进行 JDK 版本升级，而字节码类库通常需要进行更新以保证在新版 Java 上能够使用。\n- 代码实现简单。\n\n基于类似 cglib 框架的优势：\n\n- 无需实现接口，达到代理类无侵入\n- 只操作我们关心的类，而不必为其他相关类增加工作量。\n- 高性能\n\n### 面试题\n\n> 来源于网上，用于帮助理解和掌握，欢迎补充\n\n#### 描述动态代理的几种实现方式？分别说出相应的优缺点\n\n代理可以分为 \"静态代理\" 和 \"动态代理\"，动态代理又分为 \"JDK动态代理\" 和 \"CGLIB动态代理\" 实现。\n\n**静态代理**：代理对象和实际对象都继承了同一个接口，在代理对象中指向的是实际对象的实例，这样对外暴露的是代理对象而真正调用的是 Real Object\n\n- **优点**：可以很好的保护实际对象的业务逻辑对外暴露，从而提高安全性。\n- **缺点**：不同的接口要有不同的代理类实现，会很冗余\n\n**JDK 动态代理**：\n\n- 为了解决静态代理中，生成大量的代理类造成的冗余；\n- JDK 动态代理只需要实现 InvocationHandler 接口，重写 invoke 方法便可以完成代理的实现，\n- jdk的代理是利用反射生成代理类 Proxyxx.class 代理类字节码，并生成对象\n- jdk动态代理之所以**只能代理接口**是因为**代理类本身已经extends了Proxy，而java是不允许多重继承的**，但是允许实现多个接口\n- **优点**：解决了静态代理中冗余的代理实现类问题。\n- **缺点**：JDK 动态代理是基于接口设计实现的，如果没有接口，会抛异常。\n\n**CGLIB 代理**：\n\n- 由于 JDK 动态代理限制了只能基于接口设计，而对于没有接口的情况，JDK方式解决不了；\n- CGLib 采用了非常底层的字节码技术，其原理是通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑，来完成动态代理的实现。\n- 实现方式实现 MethodInterceptor 接口，重写 intercept 方法，通过 Enhancer 类的回调方法来实现。\n- 但是CGLib在创建代理对象时所花费的时间却比JDK多得多，所以对于单例的对象，因为无需频繁创建对象，用CGLib合适，反之，使用JDK方式要更为合适一些。\n- 同时，由于CGLib由于是采用动态创建子类的方法，对于final方法，无法进行代理。\n- **优点**：没有接口也能实现动态代理，而且采用字节码增强技术，性能也不错。\n- **缺点**：技术实现相对难理解些。\n\n#### CGlib 对接口实现代理？\n\n```java\nimport net.sf.cglib.proxy.Enhancer;\nimport net.sf.cglib.proxy.MethodInterceptor;\nimport net.sf.cglib.proxy.MethodProxy;\nimport proxy.UserService;\nimport java.lang.reflect.Method;\n\n/**\n * 创建代理类的工厂 该类要实现 MethodInterceptor 接口。\n * 该类中完成三样工作：\n * （1）声明目标类的成员变量，并创建以目标类对象为参数的构造器。用于接收目标对象\n * （2）定义代理的生成方法，用于创建代理对象。方法名是任意的。代理对象即目标类的子类\n * （3）定义回调接口方法。对目标类的增强这在这里完成\n */\npublic class CGLibFactory implements MethodInterceptor {\n    // 声明目标类的成员变量\n    private UserService target;\n\n    public CGLibFactory(UserService target) {\n        this.target = target;\n    }\n    // 定义代理的生成方法,用于创建代理对象\n    public UserService myCGLibCreator() {\n        Enhancer enhancer = new Enhancer();\n        // 为代理对象设置父类，即指定目标类\n        enhancer.setSuperclass(UserService.class);\n        /**\n         * 设置回调接口对象 注意，只所以在setCallback()方法中可以写上this，\n         * 是因为MethodIntecepter接口继承自Callback，是其子接口\n         */\n        enhancer.setCallback(this);\n        return (UserService) enhancer.create();// create用以生成CGLib代理对象\n    }\n    @Override\n    public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n        System.out.println(\"start invoke \" + method.getName());\n        Object result = method.invoke(target, args);\n        System.out.println(\"end invoke \" + method.getName());\n        return result;\n    }\n}\n```\n\n> 参考：\n> 《Java核心技术》卷1\n> 《深入理解Java虚拟机》7.3\n> java docs: <https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Proxy.html>\n> [Java三种代理模式：静态代理、动态代理和cglib代理](https://segmentfault.com/a/1190000011291179)\n> [描述动态代理的几种实现方式 分别说出相应的优缺点](http://xzc.fun/w/index.php?title=%E6%8F%8F%E8%BF%B0%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F_%E5%88%86%E5%88%AB%E8%AF%B4%E5%87%BA%E7%9B%B8%E5%BA%94%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9)\n> [JDK动态代理详解](https://my.oschina.net/robinyao/blog/811193)\n> [Java动态代理机制详解（JDK 和CGLIB，Javassist，ASM）](https://blog.csdn.net/luanlouis/article/details/24589193)\n> [静态代理和动态代理的理解](https://blog.csdn.net/WangQYoho/article/details/77584832)\n>\n> https://www.jianshu.com/p/9bcac608c714","slug":"java/java动态代理","published":1,"updated":"2020-09-20T03:46:45.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblpe00794tjeemjlbtco","content":"<h1 id=\"Java-动态代理详解-https-www-cnblogs-com-whirly-p-10154887-html\"><a href=\"#Java-动态代理详解-https-www-cnblogs-com-whirly-p-10154887-html\" class=\"headerlink\" title=\"Java 动态代理详解](https://www.cnblogs.com/whirly/p/10154887.html)\"></a>Java 动态代理详解](<a href=\"https://www.cnblogs.com/whirly/p/10154887.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/whirly/p/10154887.html</a>)</h1><p>动态代理在Java中有着广泛的应用，比如Spring AOP、Hibernate数据查询、测试框架的后端mock、RPC远程调用、Java注解对象获取、日志、用户鉴权、全局性异常处理、性能监控，甚至事务处理等。</p>\n<p>本文主要介绍Java中两种常见的动态代理方式：JDK原生动态代理和CGLIB动态代理。</p>\n<p>由于Java动态代理与java反射机制关系紧密，请读者确保已经了解了Java反射机制，可参考上一篇文章《<a href=\"https://mp.weixin.qq.com/s?__biz=MzI1NDU0MTE1NA==&amp;mid=2247483785&amp;idx=1&amp;sn=f696c8c49cb7ecce9818247683482a1c&amp;chksm=e9c2ed84deb564925172b2dd78d307d4dc345fa313d3e44f01e84fa22ac5561b37aec5cbd5b4&amp;scene=0#rd\" target=\"_blank\" rel=\"noopener\">Java反射机制详解</a>》</p>\n<h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><p>本文将介绍的Java动态代理与设计模式中的代理模式有关，什么是代理模式呢？</p>\n<p><strong>代理模式</strong>：给某一个对象提供一个代理，并由代理对象来控制对真实对象的访问。代理模式是一种结构型设计模式。</p>\n<p>代理模式角色分为 3 种：</p>\n<p><strong>Subject（抽象主题角色）</strong>：定义代理类和真实主题的公共对外方法，也是代理类代理真实主题的方法；</p>\n<p><strong>RealSubject（真实主题角色</strong>）：真正实现业务逻辑的类；</p>\n<p><strong>Proxy（代理主题角色）</strong>：用来代理和封装真实主题；</p>\n<p>代理模式的结构比较简单，其核心是代理类，为了让客户端能够<strong>一致性地对待</strong>真实对象和代理对象，在代理模式中引入了抽象层</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://image.laijianfeng.org/2018_12_20_proxyUML.jpg\" alt=\"代理模式类图\" title=\"\">\n                </div>\n                <div class=\"image-caption\">代理模式类图</div>\n            </figure>\n<p>代理模式<strong>按照职责</strong>（使用场景）来分类，至少可以分为以下几类：1、远程代理。 2、虚拟代理。 3、Copy-on-Write 代理。 4、保护（Protect or Access）代理。 5、Cache代理。 6、防火墙（Firewall）代理。 7、同步化（Synchronization）代理。 8、智能引用（Smart Reference）代理等等。</p>\n<p>如果<strong>根据字节码的创建时机</strong>来分类，可以分为静态代理和动态代理：</p>\n<ul>\n<li>所谓<strong>静态</strong>也就是在<strong>程序运行前</strong>就已经存在代理类的<strong>字节码文件</strong>，代理类和真实主题角色的关系在运行前就确定了。</li>\n<li>而动态代理的源码是在程序运行期间由<strong>JVM</strong>根据反射等机制<strong>动态的生成</strong>，所以在运行前并不存在代理类的字节码文件</li>\n</ul>\n<h3 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h3><p>我们先通过实例来学习静态代理，然后理解静态代理的缺点，再来学习本文的主角：动态代理</p>\n<p>编写一个接口 UserService ，以及该接口的一个实现类 UserServiceImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">()</span></span>;   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"查询 selectById\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"更新 update\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们将通过静态代理对 UserServiceImpl 进行功能增强，在调用 <code>select</code> 和 <code>update</code> 之前记录一些日志。写一个代理类 UserServiceProxy，代理类需要实现 UserService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService target; <span class=\"comment\">// 被代理的对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserServiceProxy</span><span class=\"params\">(UserService target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        target.select();    <span class=\"comment\">// 这里才实际调用真实主题角色的方法</span></span><br><span class=\"line\">        after();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        target.update();    <span class=\"comment\">// 这里才实际调用真实主题角色的方法</span></span><br><span class=\"line\">        after();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;     <span class=\"comment\">// 在执行方法之前执行</span></span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log start time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;      <span class=\"comment\">// 在执行方法之后执行</span></span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log end time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>客户端测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        UserService userServiceImpl = <span class=\"keyword\">new</span> UserServiceImpl();</span><br><span class=\"line\">        UserService proxy = <span class=\"keyword\">new</span> UserServiceProxy(userServiceImpl);</span><br><span class=\"line\"></span><br><span class=\"line\">        proxy.select();</span><br><span class=\"line\">        proxy.update();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log start time [Thu Dec 20 14:13:25 CST 2018] </span><br><span class=\"line\">查询 selectById</span><br><span class=\"line\">log end time [Thu Dec 20 14:13:25 CST 2018] </span><br><span class=\"line\">log start time [Thu Dec 20 14:13:25 CST 2018] </span><br><span class=\"line\">更新 update</span><br><span class=\"line\">log end time [Thu Dec 20 14:13:25 CST 2018]</span><br></pre></td></tr></table></figure>\n<p>通过静态代理，我们达到了功能增强的目的，而且没有侵入原代码，这是静态代理的一个优点。</p>\n<h4 id=\"静态代理的缺点\"><a href=\"#静态代理的缺点\" class=\"headerlink\" title=\"静态代理的缺点\"></a>静态代理的缺点</h4><p>虽然静态代理实现简单，且不侵入原代码，但是，当场景稍微复杂一些的时候，静态代理的缺点也会暴露出来。</p>\n<p>1、 当需要代理多个类的时候，由于代理对象要实现与目标对象一致的接口，有两种方式：</p>\n<ul>\n<li>只维护一个代理类，由这个代理类实现多个接口，但是这样就导致<strong>代理类过于庞大</strong></li>\n<li>新建多个代理类，每个目标对象对应一个代理类，但是这样会<strong>产生过多的代理类</strong></li>\n</ul>\n<p>2、 当接口需要增加、删除、修改方法的时候，目标对象与代理类都要同时修改，<strong>不易维护</strong>。</p>\n<h4 id=\"如何改进？\"><a href=\"#如何改进？\" class=\"headerlink\" title=\"如何改进？\"></a>如何改进？</h4><p>当然是让代理类<strong>动态的生成</strong>啦，也就是动态代理。</p>\n<p><strong>为什么类可以动态的生成？</strong></p>\n<p>这就涉及到Java虚拟机的<strong>类加载机制</strong>了，推荐翻看《深入理解Java虚拟机》7.3节 类加载的过程。</p>\n<p>Java虚拟机类加载过程主要分为五个阶段：加载、验证、准备、解析、初始化。其中加载阶段需要完成以下3件事情：</p>\n<ol>\n<li>通过一个类的全限定名来获取定义此类的二进制字节流</li>\n<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li>\n<li>在内存中生成一个代表这个类的 <code>java.lang.Class</code> 对象，作为方法区这个类的各种数据访问入口</li>\n</ol>\n<p>由于虚拟机规范对这3点要求并不具体，所以实际的实现是非常灵活的，关于第1点，<strong>获取类的二进制字节流</strong>（class字节码）就有很多途径：</p>\n<ul>\n<li>从ZIP包获取，这是JAR、EAR、WAR等格式的基础</li>\n<li>从网络中获取，典型的应用是 Applet</li>\n<li><strong>运行时计算生成</strong>，这种场景使用最多的是动态代理技术，在 java.lang.reflect.Proxy 类中，就是用了 ProxyGenerator.generateProxyClass 来为特定接口生成形式为 <code>*$Proxy</code> 的代理类的二进制字节流</li>\n<li>由其它文件生成，典型应用是JSP，即由JSP文件生成对应的Class类</li>\n<li>从数据库中获取等等</li>\n</ul>\n<p>所以，动态代理就是想办法，根据接口或目标对象，计算出代理类的字节码，然后再加载到JVM中使用。但是如何计算？如何生成？情况也许比想象的复杂得多，我们需要借助现有的方案。</p>\n<h4 id=\"常见的字节码操作类库\"><a href=\"#常见的字节码操作类库\" class=\"headerlink\" title=\"常见的字节码操作类库\"></a>常见的字节码操作类库</h4><blockquote>\n<p>这里有一些介绍：<a href=\"https://java-source.net/open-source/bytecode-libraries\" target=\"_blank\" rel=\"noopener\">https://java-source.net/open-source/bytecode-libraries</a></p>\n</blockquote>\n<ul>\n<li>Apache BCEL (Byte Code Engineering Library)：是Java classworking广泛使用的一种框架，它可以深入到JVM汇编语言进行类操作的细节。</li>\n<li>ObjectWeb ASM：是一个Java字节码操作框架。它可以用于直接以二进制形式动态生成stub根类或其他代理类，或者在加载时动态修改类。</li>\n<li>CGLIB(Code Generation Library)：是一个功能强大，高性能和高质量的代码生成库，用于扩展JAVA类并在运行时实现接口。</li>\n<li>Javassist：是Java的加载时反射系统，它是一个用于在Java中编辑字节码的类库; 它使Java程序能够在运行时定义新类，并在JVM加载之前修改类文件。</li>\n<li>…</li>\n</ul>\n<h4 id=\"实现动态代理的思考方向\"><a href=\"#实现动态代理的思考方向\" class=\"headerlink\" title=\"实现动态代理的思考方向\"></a>实现动态代理的思考方向</h4><p>为了让生成的代理类与目标对象（真实主题角色）保持一致性，从现在开始将介绍以下两种最常见的方式：</p>\n<ol>\n<li>通过实现接口的方式 -&gt; JDK动态代理</li>\n<li>通过继承类的方式 -&gt; CGLIB动态代理</li>\n</ol>\n<p>注：使用ASM对使用者要求比较高，使用Javassist会比较麻烦</p>\n<h3 id=\"JDK动态代理\"><a href=\"#JDK动态代理\" class=\"headerlink\" title=\"JDK动态代理\"></a>JDK动态代理</h3><p>JDK动态代理主要涉及两个类：<code>java.lang.reflect.Proxy</code> 和 <code>java.lang.reflect.InvocationHandler</code>，我们仍然通过案例来学习</p>\n<p>编写一个调用逻辑处理器 LogHandler 类，提供日志增强功能，并实现 InvocationHandler 接口；在 LogHandler 中维护一个目标对象，这个对象是被代理的对象（真实主题角色）；在 <code>invoke</code> 方法中编写方法调用的逻辑处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">    Object target;  <span class=\"comment\">// 被代理的对象，实际的方法执行者</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LogHandler</span><span class=\"params\">(Object target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        Object result = method.invoke(target, args);  <span class=\"comment\">// 调用 target 的 method 方法</span></span><br><span class=\"line\">        after();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;  <span class=\"comment\">// 返回方法的执行结果</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 调用invoke方法之前执行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log start time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 调用invoke方法之后执行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log end time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编写客户端，获取动态生成的代理类的对象须借助 Proxy 类的 newProxyInstance 方法，具体步骤可见代码和注释</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> proxy.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> proxy.UserServiceImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IllegalAccessException, InstantiationException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置变量可以保存动态代理类，默认名称以 $Proxy0 格式命名</span></span><br><span class=\"line\">        <span class=\"comment\">// System.getProperties().setProperty(\"sun.misc.ProxyGenerator.saveGeneratedFiles\", \"true\");</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. 创建被代理的对象，UserService接口的实现类</span></span><br><span class=\"line\">        UserServiceImpl userServiceImpl = <span class=\"keyword\">new</span> UserServiceImpl();</span><br><span class=\"line\">        <span class=\"comment\">// 2. 获取对应的 ClassLoader</span></span><br><span class=\"line\">        ClassLoader classLoader = userServiceImpl.getClass().getClassLoader();</span><br><span class=\"line\">        <span class=\"comment\">// 3. 获取所有接口的Class，这里的UserServiceImpl只实现了一个接口UserService，</span></span><br><span class=\"line\">        Class[] interfaces = userServiceImpl.getClass().getInterfaces();</span><br><span class=\"line\">        <span class=\"comment\">// 4. 创建一个将传给代理类的调用请求处理器，处理所有的代理对象上的方法调用</span></span><br><span class=\"line\">        <span class=\"comment\">//     这里创建的是一个自定义的日志处理器，须传入实际的执行对象 userServiceImpl</span></span><br><span class=\"line\">        InvocationHandler logHandler = <span class=\"keyword\">new</span> LogHandler(userServiceImpl);</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   5.根据上面提供的信息，创建代理对象 在这个过程中，</span></span><br><span class=\"line\"><span class=\"comment\">               a.JDK会通过根据传入的参数信息动态地在内存中创建和.class 文件等同的字节码</span></span><br><span class=\"line\"><span class=\"comment\">               b.然后根据相应的字节码转换成对应的class，</span></span><br><span class=\"line\"><span class=\"comment\">               c.然后调用newInstance()创建代理实例</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">        UserService proxy = (UserService) Proxy.newProxyInstance(classLoader, interfaces, logHandler);</span><br><span class=\"line\">        <span class=\"comment\">// 调用代理的方法</span></span><br><span class=\"line\">        proxy.select();</span><br><span class=\"line\">        proxy.update();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 保存JDK动态代理生成的代理类，类名保存为 UserServiceProxy</span></span><br><span class=\"line\">        <span class=\"comment\">// ProxyUtils.generateClassFile(userServiceImpl.getClass(), \"UserServiceProxy\");</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log start time [Thu Dec 20 16:55:19 CST 2018] </span><br><span class=\"line\">查询 selectById</span><br><span class=\"line\">log end time [Thu Dec 20 16:55:19 CST 2018] </span><br><span class=\"line\">log start time [Thu Dec 20 16:55:19 CST 2018] </span><br><span class=\"line\">更新 update</span><br><span class=\"line\">log end time [Thu Dec 20 16:55:19 CST 2018]</span><br></pre></td></tr></table></figure>\n<p>InvocationHandler 和 Proxy 的主要方法介绍如下：</p>\n<p><strong>java.lang.reflect.InvocationHandler</strong></p>\n<p><code>Object invoke(Object proxy, Method method, Object[] args)</code> 定义了代理对象调用方法时希望执行的动作，用于集中处理在动态代理类对象上的方法调用</p>\n<p><strong>java.lang.reflect.Proxy</strong></p>\n<p><code>static InvocationHandler getInvocationHandler(Object proxy)</code> 用于获取指定代理对象所关联的调用处理器</p>\n<p><code>static Class&lt;?&gt; getProxyClass(ClassLoader loader, Class&lt;?&gt;... interfaces)</code> 返回指定接口的代理类</p>\n<p><code>static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</code> 构造实现指定接口的代理类的一个新实例，所有方法会调用给定处理器对象的 invoke 方法</p>\n<p><code>static boolean isProxyClass(Class&lt;?&gt; cl)</code> 返回 cl 是否为一个代理类</p>\n<h4 id=\"代理类的调用过程\"><a href=\"#代理类的调用过程\" class=\"headerlink\" title=\"代理类的调用过程\"></a>代理类的调用过程</h4><p>生成的代理类到底长什么样子呢？借助下面的工具类，把代理类保存下来再探个究竟<br>（通过设置环境变量sun.misc.ProxyGenerator.saveGeneratedFiles=true也可以保存代理类）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sun.misc.ProxyGenerator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyUtils</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将根据类信息动态生成的二进制字节码保存到硬盘中，默认的是clazz目录下</span></span><br><span class=\"line\"><span class=\"comment\">     * params: clazz 需要生成动态代理类的类</span></span><br><span class=\"line\"><span class=\"comment\">     * proxyName: 为动态生成的代理类的名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">generateClassFile</span><span class=\"params\">(Class clazz, String proxyName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 根据类信息和提供的代理类名称，生成字节码</span></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] classFile = ProxyGenerator.generateProxyClass(proxyName, clazz.getInterfaces());</span><br><span class=\"line\">        String paths = clazz.getResource(<span class=\"string\">\".\"</span>).getPath();</span><br><span class=\"line\">        System.out.println(paths);</span><br><span class=\"line\">        FileOutputStream out = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//保留到硬盘中</span></span><br><span class=\"line\">            out = <span class=\"keyword\">new</span> FileOutputStream(paths + proxyName + <span class=\"string\">\".class\"</span>);</span><br><span class=\"line\">            out.write(classFile);</span><br><span class=\"line\">            out.flush();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                out.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在 Client2 测试类的main的最后面加入一行代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 保存JDK动态代理生成的代理类，类名保存为 UserServiceProxy</span></span><br><span class=\"line\">ProxyUtils.generateClassFile(userServiceImpl.getClass(), <span class=\"string\">\"UserServiceProxy\"</span>);</span><br></pre></td></tr></table></figure>\n<p>IDEA 再次运行之后就可以在 target 的类路径下找到 UserServiceProxy.class，双击后IDEA的反编译插件会将该二进制class文件</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://image.laijianfeng.org/20181220_171031.png\" alt=\"JDK 动态代理生成的代理类\" title=\"\">\n                </div>\n                <div class=\"image-caption\">JDK 动态代理生成的代理类</div>\n            </figure>\n<p>UserServiceProxy 的代码如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> proxy.UserService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceProxy</span> <span class=\"keyword\">extends</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m1;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m2;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m4;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m0;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m3;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserServiceProxy</span><span class=\"params\">(InvocationHandler var1)</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(var1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object var1)</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 省略...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 省略...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.h.invoke(<span class=\"keyword\">this</span>, m4, (Object[])<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var2;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(var3);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 省略...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.h.invoke(<span class=\"keyword\">this</span>, m3, (Object[])<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var2;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(var3);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            m1 = Class.forName(<span class=\"string\">\"java.lang.Object\"</span>).getMethod(<span class=\"string\">\"equals\"</span>, Class.forName(<span class=\"string\">\"java.lang.Object\"</span>));</span><br><span class=\"line\">            m2 = Class.forName(<span class=\"string\">\"java.lang.Object\"</span>).getMethod(<span class=\"string\">\"toString\"</span>);</span><br><span class=\"line\">            m4 = Class.forName(<span class=\"string\">\"proxy.UserService\"</span>).getMethod(<span class=\"string\">\"select\"</span>);</span><br><span class=\"line\">            m0 = Class.forName(<span class=\"string\">\"java.lang.Object\"</span>).getMethod(<span class=\"string\">\"hashCode\"</span>);</span><br><span class=\"line\">            m3 = Class.forName(<span class=\"string\">\"proxy.UserService\"</span>).getMethod(<span class=\"string\">\"update\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从 UserServiceProxy 的代码中我们可以发现：</p>\n<ul>\n<li>UserServiceProxy 继承了 Proxy 类，并且实现了被代理的所有接口，以及equals、hashCode、toString等方法</li>\n<li>由于 UserServiceProxy 继承了 Proxy 类，所以每个代理类都会关联一个 InvocationHandler 方法调用处理器</li>\n<li>类和所有方法都被 <code>public final</code> 修饰，所以代理类只可被使用，不可以再被继承</li>\n<li>每个方法都有一个 Method 对象来描述，Method 对象在static静态代码块中创建，以 <code>m + 数字</code> 的格式命名</li>\n<li>调用方法的时候通过 <code>super.h.invoke(this, m1, (Object[])null);</code> 调用，其中的 <code>super.h.invoke</code> 实际上是在创建代理的时候传递给 <code>Proxy.newProxyInstance</code> 的 LogHandler 对象，它继承 InvocationHandler 类，负责实际的调用处理逻辑</li>\n</ul>\n<p>而 LogHandler 的 invoke 方法接收到 method、args 等参数后，进行一些处理，然后通过反射让被代理的对象 target 执行方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">    before();</span><br><span class=\"line\">    Object result = method.invoke(target, args);       <span class=\"comment\">// 调用 target 的 method 方法</span></span><br><span class=\"line\">    after();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;  <span class=\"comment\">// 返回方法的执行结果</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>JDK动态代理执行方法调用的过程简图如下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://image.laijianfeng.org/2018_12_20_JDKProxy.png\" alt=\"JDK动态代理执行方法调用过程\" title=\"\">\n                </div>\n                <div class=\"image-caption\">JDK动态代理执行方法调用过程</div>\n            </figure>\n<p>代理类的调用过程相信大家都明了了，而关于Proxy的源码解析，还请大家另外查阅其他文章或者直接看源码</p>\n<h3 id=\"CGLIB动态代理\"><a href=\"#CGLIB动态代理\" class=\"headerlink\" title=\"CGLIB动态代理\"></a>CGLIB动态代理</h3><p>maven引入CGLIB包，然后编写一个UserDao类，它没有接口，只有两个方法，select() 和 update()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"UserDao 查询 selectById\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"UserDao 更新 update\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编写一个 LogInterceptor ，继承了 MethodInterceptor，用于方法的拦截回调</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object 表示要进行增强的对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> method 表示拦截的方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> objects 数组表示参数列表，基本数据类型需要传入其包装类型，如int--&gt;Integer、long-Long、double--&gt;Double</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> methodProxy 表示对方法的代理，invokeSuper方法表示对被代理对象方法的调用</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 执行结果</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Throwable</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object object, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        Object result = methodProxy.invokeSuper(object, objects);   <span class=\"comment\">// 注意这里是调用 invokeSuper 而不是 invoke，否则死循环，methodProxy.invokesuper执行的是原始类的方法，method.invoke执行的是子类的方法</span></span><br><span class=\"line\">        after();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log start time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log end time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CglibTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        DaoProxy daoProxy = <span class=\"keyword\">new</span> DaoProxy(); </span><br><span class=\"line\">        Enhancer enhancer = <span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">        enhancer.setSuperclass(Dao.class);  <span class=\"comment\">// 设置超类，cglib是通过继承来实现的</span></span><br><span class=\"line\">        enhancer.setCallback(daoProxy);</span><br><span class=\"line\"></span><br><span class=\"line\">        Dao dao = (Dao)enhancer.create();   <span class=\"comment\">// 创建代理类</span></span><br><span class=\"line\">        dao.update();</span><br><span class=\"line\">        dao.select();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log start time [Fri Dec 21 00:06:40 CST 2018] </span><br><span class=\"line\">UserDao 查询 selectById</span><br><span class=\"line\">log end time [Fri Dec 21 00:06:40 CST 2018] </span><br><span class=\"line\">log start time [Fri Dec 21 00:06:40 CST 2018] </span><br><span class=\"line\">UserDao 更新 update</span><br><span class=\"line\">log end time [Fri Dec 21 00:06:40 CST 2018]</span><br></pre></td></tr></table></figure>\n<p>还可以进一步多个 MethodInterceptor 进行过滤筛选</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogInterceptor2</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object object, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        Object result = methodProxy.invokeSuper(object, objects);</span><br><span class=\"line\">        after();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log2 start time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log2 end time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 回调过滤器: 在CGLib回调时可以设置对不同方法执行不同的回调逻辑，或者根本不执行回调。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DaoFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">CallbackFilter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">accept</span><span class=\"params\">(Method method)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"select\"</span>.equals(method.getName())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;   <span class=\"comment\">// Callback 列表第1个拦截器</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;   <span class=\"comment\">// Callback 列表第2个拦截器，return 2 则为第3个，以此类推</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再次测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CglibTest2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        LogInterceptor logInterceptor = <span class=\"keyword\">new</span> LogInterceptor();</span><br><span class=\"line\">        LogInterceptor2 logInterceptor2 = <span class=\"keyword\">new</span> LogInterceptor2();</span><br><span class=\"line\">        Enhancer enhancer = <span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">        enhancer.setSuperclass(UserDao.class);   <span class=\"comment\">// 设置超类，cglib是通过继承来实现的</span></span><br><span class=\"line\">        enhancer.setCallbacks(<span class=\"keyword\">new</span> Callback[]&#123;logInterceptor, logInterceptor2, NoOp.INSTANCE&#125;);   <span class=\"comment\">// 设置多个拦截器，NoOp.INSTANCE是一个空拦截器，不做任何处理</span></span><br><span class=\"line\">        enhancer.setCallbackFilter(<span class=\"keyword\">new</span> DaoFilter());</span><br><span class=\"line\"></span><br><span class=\"line\">        UserDao proxy = (UserDao) enhancer.create();   <span class=\"comment\">// 创建代理类</span></span><br><span class=\"line\">        proxy.select();</span><br><span class=\"line\">        proxy.update();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log start time [Fri Dec <span class=\"number\">21</span> <span class=\"number\">00</span>:<span class=\"number\">22</span>:<span class=\"number\">39</span> CST <span class=\"number\">2018</span>] </span><br><span class=\"line\">UserDao 查询 selectById</span><br><span class=\"line\">log end time [Fri Dec <span class=\"number\">21</span> <span class=\"number\">00</span>:<span class=\"number\">22</span>:<span class=\"number\">39</span> CST <span class=\"number\">2018</span>] </span><br><span class=\"line\">log2 start time [Fri Dec <span class=\"number\">21</span> <span class=\"number\">00</span>:<span class=\"number\">22</span>:<span class=\"number\">39</span> CST <span class=\"number\">2018</span>] </span><br><span class=\"line\">UserDao 更新 update</span><br><span class=\"line\">log2 end time [Fri Dec <span class=\"number\">21</span> <span class=\"number\">00</span>:<span class=\"number\">22</span>:<span class=\"number\">39</span> CST <span class=\"number\">2018</span>]</span><br></pre></td></tr></table></figure>\n<p>CGLIB 创建动态代理类的模式是：</p>\n<ol>\n<li>查找目标类上的所有非final 的public类型的方法定义；</li>\n<li>将这些方法的定义转换成字节码；</li>\n<li>将组成的字节码转换成相应的代理的class对象；</li>\n<li>实现 MethodInterceptor接口，用来处理对代理类上所有方法的请求</li>\n</ol>\n<h3 id=\"JDK动态代理与CGLIB动态代理对比\"><a href=\"#JDK动态代理与CGLIB动态代理对比\" class=\"headerlink\" title=\"JDK动态代理与CGLIB动态代理对比\"></a>JDK动态代理与CGLIB动态代理对比</h3><p>JDK动态代理：基于Java反射机制实现，必须要实现了接口的业务类才能用这种办法生成代理对象。</p>\n<p>cglib动态代理：基于ASM机制实现，通过生成业务类的子类作为代理类。</p>\n<p>JDK Proxy 的优势：</p>\n<ul>\n<li>最小化依赖关系，减少依赖意味着简化开发和维护，JDK 本身的支持，可能比 cglib 更加可靠。</li>\n<li>平滑进行 JDK 版本升级，而字节码类库通常需要进行更新以保证在新版 Java 上能够使用。</li>\n<li>代码实现简单。</li>\n</ul>\n<p>基于类似 cglib 框架的优势：</p>\n<ul>\n<li>无需实现接口，达到代理类无侵入</li>\n<li>只操作我们关心的类，而不必为其他相关类增加工作量。</li>\n<li>高性能</li>\n</ul>\n<h3 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h3><blockquote>\n<p>来源于网上，用于帮助理解和掌握，欢迎补充</p>\n</blockquote>\n<h4 id=\"描述动态代理的几种实现方式？分别说出相应的优缺点\"><a href=\"#描述动态代理的几种实现方式？分别说出相应的优缺点\" class=\"headerlink\" title=\"描述动态代理的几种实现方式？分别说出相应的优缺点\"></a>描述动态代理的几种实现方式？分别说出相应的优缺点</h4><p>代理可以分为 “静态代理” 和 “动态代理”，动态代理又分为 “JDK动态代理” 和 “CGLIB动态代理” 实现。</p>\n<p><strong>静态代理</strong>：代理对象和实际对象都继承了同一个接口，在代理对象中指向的是实际对象的实例，这样对外暴露的是代理对象而真正调用的是 Real Object</p>\n<ul>\n<li><strong>优点</strong>：可以很好的保护实际对象的业务逻辑对外暴露，从而提高安全性。</li>\n<li><strong>缺点</strong>：不同的接口要有不同的代理类实现，会很冗余</li>\n</ul>\n<p><strong>JDK 动态代理</strong>：</p>\n<ul>\n<li>为了解决静态代理中，生成大量的代理类造成的冗余；</li>\n<li>JDK 动态代理只需要实现 InvocationHandler 接口，重写 invoke 方法便可以完成代理的实现，</li>\n<li>jdk的代理是利用反射生成代理类 Proxyxx.class 代理类字节码，并生成对象</li>\n<li>jdk动态代理之所以<strong>只能代理接口</strong>是因为<strong>代理类本身已经extends了Proxy，而java是不允许多重继承的</strong>，但是允许实现多个接口</li>\n<li><strong>优点</strong>：解决了静态代理中冗余的代理实现类问题。</li>\n<li><strong>缺点</strong>：JDK 动态代理是基于接口设计实现的，如果没有接口，会抛异常。</li>\n</ul>\n<p><strong>CGLIB 代理</strong>：</p>\n<ul>\n<li>由于 JDK 动态代理限制了只能基于接口设计，而对于没有接口的情况，JDK方式解决不了；</li>\n<li>CGLib 采用了非常底层的字节码技术，其原理是通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑，来完成动态代理的实现。</li>\n<li>实现方式实现 MethodInterceptor 接口，重写 intercept 方法，通过 Enhancer 类的回调方法来实现。</li>\n<li>但是CGLib在创建代理对象时所花费的时间却比JDK多得多，所以对于单例的对象，因为无需频繁创建对象，用CGLib合适，反之，使用JDK方式要更为合适一些。</li>\n<li>同时，由于CGLib由于是采用动态创建子类的方法，对于final方法，无法进行代理。</li>\n<li><strong>优点</strong>：没有接口也能实现动态代理，而且采用字节码增强技术，性能也不错。</li>\n<li><strong>缺点</strong>：技术实现相对难理解些。</li>\n</ul>\n<h4 id=\"CGlib-对接口实现代理？\"><a href=\"#CGlib-对接口实现代理？\" class=\"headerlink\" title=\"CGlib 对接口实现代理？\"></a>CGlib 对接口实现代理？</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> proxy.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建代理类的工厂 该类要实现 MethodInterceptor 接口。</span></span><br><span class=\"line\"><span class=\"comment\"> * 该类中完成三样工作：</span></span><br><span class=\"line\"><span class=\"comment\"> * （1）声明目标类的成员变量，并创建以目标类对象为参数的构造器。用于接收目标对象</span></span><br><span class=\"line\"><span class=\"comment\"> * （2）定义代理的生成方法，用于创建代理对象。方法名是任意的。代理对象即目标类的子类</span></span><br><span class=\"line\"><span class=\"comment\"> * （3）定义回调接口方法。对目标类的增强这在这里完成</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CGLibFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 声明目标类的成员变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CGLibFactory</span><span class=\"params\">(UserService target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 定义代理的生成方法,用于创建代理对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UserService <span class=\"title\">myCGLibCreator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Enhancer enhancer = <span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">        <span class=\"comment\">// 为代理对象设置父类，即指定目标类</span></span><br><span class=\"line\">        enhancer.setSuperclass(UserService.class);</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 设置回调接口对象 注意，只所以在setCallback()方法中可以写上this，</span></span><br><span class=\"line\"><span class=\"comment\">         * 是因为MethodIntecepter接口继承自Callback，是其子接口</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        enhancer.setCallback(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (UserService) enhancer.create();<span class=\"comment\">// create用以生成CGLib代理对象</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"start invoke \"</span> + method.getName());</span><br><span class=\"line\">        Object result = method.invoke(target, args);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"end invoke \"</span> + method.getName());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参考：<br>《Java核心技术》卷1<br>《深入理解Java虚拟机》7.3<br>java docs: <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Proxy.html\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Proxy.html</a><br><a href=\"https://segmentfault.com/a/1190000011291179\" target=\"_blank\" rel=\"noopener\">Java三种代理模式：静态代理、动态代理和cglib代理</a><br><a href=\"http://xzc.fun/w/index.php?title=%E6%8F%8F%E8%BF%B0%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F_%E5%88%86%E5%88%AB%E8%AF%B4%E5%87%BA%E7%9B%B8%E5%BA%94%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9\" target=\"_blank\" rel=\"noopener\">描述动态代理的几种实现方式 分别说出相应的优缺点</a><br><a href=\"https://my.oschina.net/robinyao/blog/811193\" target=\"_blank\" rel=\"noopener\">JDK动态代理详解</a><br><a href=\"https://blog.csdn.net/luanlouis/article/details/24589193\" target=\"_blank\" rel=\"noopener\">Java动态代理机制详解（JDK 和CGLIB，Javassist，ASM）</a><br><a href=\"https://blog.csdn.net/WangQYoho/article/details/77584832\" target=\"_blank\" rel=\"noopener\">静态代理和动态代理的理解</a></p>\n<p><a href=\"https://www.jianshu.com/p/9bcac608c714\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/9bcac608c714</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Java-动态代理详解-https-www-cnblogs-com-whirly-p-10154887-html\"><a href=\"#Java-动态代理详解-https-www-cnblogs-com-whirly-p-10154887-html\" class=\"headerlink\" title=\"Java 动态代理详解](https://www.cnblogs.com/whirly/p/10154887.html)\"></a>Java 动态代理详解](<a href=\"https://www.cnblogs.com/whirly/p/10154887.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/whirly/p/10154887.html</a>)</h1><p>动态代理在Java中有着广泛的应用，比如Spring AOP、Hibernate数据查询、测试框架的后端mock、RPC远程调用、Java注解对象获取、日志、用户鉴权、全局性异常处理、性能监控，甚至事务处理等。</p>\n<p>本文主要介绍Java中两种常见的动态代理方式：JDK原生动态代理和CGLIB动态代理。</p>\n<p>由于Java动态代理与java反射机制关系紧密，请读者确保已经了解了Java反射机制，可参考上一篇文章《<a href=\"https://mp.weixin.qq.com/s?__biz=MzI1NDU0MTE1NA==&amp;mid=2247483785&amp;idx=1&amp;sn=f696c8c49cb7ecce9818247683482a1c&amp;chksm=e9c2ed84deb564925172b2dd78d307d4dc345fa313d3e44f01e84fa22ac5561b37aec5cbd5b4&amp;scene=0#rd\" target=\"_blank\" rel=\"noopener\">Java反射机制详解</a>》</p>\n<h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><p>本文将介绍的Java动态代理与设计模式中的代理模式有关，什么是代理模式呢？</p>\n<p><strong>代理模式</strong>：给某一个对象提供一个代理，并由代理对象来控制对真实对象的访问。代理模式是一种结构型设计模式。</p>\n<p>代理模式角色分为 3 种：</p>\n<p><strong>Subject（抽象主题角色）</strong>：定义代理类和真实主题的公共对外方法，也是代理类代理真实主题的方法；</p>\n<p><strong>RealSubject（真实主题角色</strong>）：真正实现业务逻辑的类；</p>\n<p><strong>Proxy（代理主题角色）</strong>：用来代理和封装真实主题；</p>\n<p>代理模式的结构比较简单，其核心是代理类，为了让客户端能够<strong>一致性地对待</strong>真实对象和代理对象，在代理模式中引入了抽象层</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://image.laijianfeng.org/2018_12_20_proxyUML.jpg\" alt=\"代理模式类图\" title=\"\">\n                </div>\n                <div class=\"image-caption\">代理模式类图</div>\n            </figure>\n<p>代理模式<strong>按照职责</strong>（使用场景）来分类，至少可以分为以下几类：1、远程代理。 2、虚拟代理。 3、Copy-on-Write 代理。 4、保护（Protect or Access）代理。 5、Cache代理。 6、防火墙（Firewall）代理。 7、同步化（Synchronization）代理。 8、智能引用（Smart Reference）代理等等。</p>\n<p>如果<strong>根据字节码的创建时机</strong>来分类，可以分为静态代理和动态代理：</p>\n<ul>\n<li>所谓<strong>静态</strong>也就是在<strong>程序运行前</strong>就已经存在代理类的<strong>字节码文件</strong>，代理类和真实主题角色的关系在运行前就确定了。</li>\n<li>而动态代理的源码是在程序运行期间由<strong>JVM</strong>根据反射等机制<strong>动态的生成</strong>，所以在运行前并不存在代理类的字节码文件</li>\n</ul>\n<h3 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h3><p>我们先通过实例来学习静态代理，然后理解静态代理的缺点，再来学习本文的主角：动态代理</p>\n<p>编写一个接口 UserService ，以及该接口的一个实现类 UserServiceImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">()</span></span>;   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"查询 selectById\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"更新 update\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们将通过静态代理对 UserServiceImpl 进行功能增强，在调用 <code>select</code> 和 <code>update</code> 之前记录一些日志。写一个代理类 UserServiceProxy，代理类需要实现 UserService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService target; <span class=\"comment\">// 被代理的对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserServiceProxy</span><span class=\"params\">(UserService target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        target.select();    <span class=\"comment\">// 这里才实际调用真实主题角色的方法</span></span><br><span class=\"line\">        after();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        target.update();    <span class=\"comment\">// 这里才实际调用真实主题角色的方法</span></span><br><span class=\"line\">        after();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;     <span class=\"comment\">// 在执行方法之前执行</span></span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log start time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;      <span class=\"comment\">// 在执行方法之后执行</span></span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log end time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>客户端测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        UserService userServiceImpl = <span class=\"keyword\">new</span> UserServiceImpl();</span><br><span class=\"line\">        UserService proxy = <span class=\"keyword\">new</span> UserServiceProxy(userServiceImpl);</span><br><span class=\"line\"></span><br><span class=\"line\">        proxy.select();</span><br><span class=\"line\">        proxy.update();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log start time [Thu Dec 20 14:13:25 CST 2018] </span><br><span class=\"line\">查询 selectById</span><br><span class=\"line\">log end time [Thu Dec 20 14:13:25 CST 2018] </span><br><span class=\"line\">log start time [Thu Dec 20 14:13:25 CST 2018] </span><br><span class=\"line\">更新 update</span><br><span class=\"line\">log end time [Thu Dec 20 14:13:25 CST 2018]</span><br></pre></td></tr></table></figure>\n<p>通过静态代理，我们达到了功能增强的目的，而且没有侵入原代码，这是静态代理的一个优点。</p>\n<h4 id=\"静态代理的缺点\"><a href=\"#静态代理的缺点\" class=\"headerlink\" title=\"静态代理的缺点\"></a>静态代理的缺点</h4><p>虽然静态代理实现简单，且不侵入原代码，但是，当场景稍微复杂一些的时候，静态代理的缺点也会暴露出来。</p>\n<p>1、 当需要代理多个类的时候，由于代理对象要实现与目标对象一致的接口，有两种方式：</p>\n<ul>\n<li>只维护一个代理类，由这个代理类实现多个接口，但是这样就导致<strong>代理类过于庞大</strong></li>\n<li>新建多个代理类，每个目标对象对应一个代理类，但是这样会<strong>产生过多的代理类</strong></li>\n</ul>\n<p>2、 当接口需要增加、删除、修改方法的时候，目标对象与代理类都要同时修改，<strong>不易维护</strong>。</p>\n<h4 id=\"如何改进？\"><a href=\"#如何改进？\" class=\"headerlink\" title=\"如何改进？\"></a>如何改进？</h4><p>当然是让代理类<strong>动态的生成</strong>啦，也就是动态代理。</p>\n<p><strong>为什么类可以动态的生成？</strong></p>\n<p>这就涉及到Java虚拟机的<strong>类加载机制</strong>了，推荐翻看《深入理解Java虚拟机》7.3节 类加载的过程。</p>\n<p>Java虚拟机类加载过程主要分为五个阶段：加载、验证、准备、解析、初始化。其中加载阶段需要完成以下3件事情：</p>\n<ol>\n<li>通过一个类的全限定名来获取定义此类的二进制字节流</li>\n<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li>\n<li>在内存中生成一个代表这个类的 <code>java.lang.Class</code> 对象，作为方法区这个类的各种数据访问入口</li>\n</ol>\n<p>由于虚拟机规范对这3点要求并不具体，所以实际的实现是非常灵活的，关于第1点，<strong>获取类的二进制字节流</strong>（class字节码）就有很多途径：</p>\n<ul>\n<li>从ZIP包获取，这是JAR、EAR、WAR等格式的基础</li>\n<li>从网络中获取，典型的应用是 Applet</li>\n<li><strong>运行时计算生成</strong>，这种场景使用最多的是动态代理技术，在 java.lang.reflect.Proxy 类中，就是用了 ProxyGenerator.generateProxyClass 来为特定接口生成形式为 <code>*$Proxy</code> 的代理类的二进制字节流</li>\n<li>由其它文件生成，典型应用是JSP，即由JSP文件生成对应的Class类</li>\n<li>从数据库中获取等等</li>\n</ul>\n<p>所以，动态代理就是想办法，根据接口或目标对象，计算出代理类的字节码，然后再加载到JVM中使用。但是如何计算？如何生成？情况也许比想象的复杂得多，我们需要借助现有的方案。</p>\n<h4 id=\"常见的字节码操作类库\"><a href=\"#常见的字节码操作类库\" class=\"headerlink\" title=\"常见的字节码操作类库\"></a>常见的字节码操作类库</h4><blockquote>\n<p>这里有一些介绍：<a href=\"https://java-source.net/open-source/bytecode-libraries\" target=\"_blank\" rel=\"noopener\">https://java-source.net/open-source/bytecode-libraries</a></p>\n</blockquote>\n<ul>\n<li>Apache BCEL (Byte Code Engineering Library)：是Java classworking广泛使用的一种框架，它可以深入到JVM汇编语言进行类操作的细节。</li>\n<li>ObjectWeb ASM：是一个Java字节码操作框架。它可以用于直接以二进制形式动态生成stub根类或其他代理类，或者在加载时动态修改类。</li>\n<li>CGLIB(Code Generation Library)：是一个功能强大，高性能和高质量的代码生成库，用于扩展JAVA类并在运行时实现接口。</li>\n<li>Javassist：是Java的加载时反射系统，它是一个用于在Java中编辑字节码的类库; 它使Java程序能够在运行时定义新类，并在JVM加载之前修改类文件。</li>\n<li>…</li>\n</ul>\n<h4 id=\"实现动态代理的思考方向\"><a href=\"#实现动态代理的思考方向\" class=\"headerlink\" title=\"实现动态代理的思考方向\"></a>实现动态代理的思考方向</h4><p>为了让生成的代理类与目标对象（真实主题角色）保持一致性，从现在开始将介绍以下两种最常见的方式：</p>\n<ol>\n<li>通过实现接口的方式 -&gt; JDK动态代理</li>\n<li>通过继承类的方式 -&gt; CGLIB动态代理</li>\n</ol>\n<p>注：使用ASM对使用者要求比较高，使用Javassist会比较麻烦</p>\n<h3 id=\"JDK动态代理\"><a href=\"#JDK动态代理\" class=\"headerlink\" title=\"JDK动态代理\"></a>JDK动态代理</h3><p>JDK动态代理主要涉及两个类：<code>java.lang.reflect.Proxy</code> 和 <code>java.lang.reflect.InvocationHandler</code>，我们仍然通过案例来学习</p>\n<p>编写一个调用逻辑处理器 LogHandler 类，提供日志增强功能，并实现 InvocationHandler 接口；在 LogHandler 中维护一个目标对象，这个对象是被代理的对象（真实主题角色）；在 <code>invoke</code> 方法中编写方法调用的逻辑处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">    Object target;  <span class=\"comment\">// 被代理的对象，实际的方法执行者</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LogHandler</span><span class=\"params\">(Object target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        Object result = method.invoke(target, args);  <span class=\"comment\">// 调用 target 的 method 方法</span></span><br><span class=\"line\">        after();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;  <span class=\"comment\">// 返回方法的执行结果</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 调用invoke方法之前执行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log start time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 调用invoke方法之后执行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log end time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编写客户端，获取动态生成的代理类的对象须借助 Proxy 类的 newProxyInstance 方法，具体步骤可见代码和注释</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> proxy.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> proxy.UserServiceImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IllegalAccessException, InstantiationException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置变量可以保存动态代理类，默认名称以 $Proxy0 格式命名</span></span><br><span class=\"line\">        <span class=\"comment\">// System.getProperties().setProperty(\"sun.misc.ProxyGenerator.saveGeneratedFiles\", \"true\");</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. 创建被代理的对象，UserService接口的实现类</span></span><br><span class=\"line\">        UserServiceImpl userServiceImpl = <span class=\"keyword\">new</span> UserServiceImpl();</span><br><span class=\"line\">        <span class=\"comment\">// 2. 获取对应的 ClassLoader</span></span><br><span class=\"line\">        ClassLoader classLoader = userServiceImpl.getClass().getClassLoader();</span><br><span class=\"line\">        <span class=\"comment\">// 3. 获取所有接口的Class，这里的UserServiceImpl只实现了一个接口UserService，</span></span><br><span class=\"line\">        Class[] interfaces = userServiceImpl.getClass().getInterfaces();</span><br><span class=\"line\">        <span class=\"comment\">// 4. 创建一个将传给代理类的调用请求处理器，处理所有的代理对象上的方法调用</span></span><br><span class=\"line\">        <span class=\"comment\">//     这里创建的是一个自定义的日志处理器，须传入实际的执行对象 userServiceImpl</span></span><br><span class=\"line\">        InvocationHandler logHandler = <span class=\"keyword\">new</span> LogHandler(userServiceImpl);</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t   5.根据上面提供的信息，创建代理对象 在这个过程中，</span></span><br><span class=\"line\"><span class=\"comment\">               a.JDK会通过根据传入的参数信息动态地在内存中创建和.class 文件等同的字节码</span></span><br><span class=\"line\"><span class=\"comment\">               b.然后根据相应的字节码转换成对应的class，</span></span><br><span class=\"line\"><span class=\"comment\">               c.然后调用newInstance()创建代理实例</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">        UserService proxy = (UserService) Proxy.newProxyInstance(classLoader, interfaces, logHandler);</span><br><span class=\"line\">        <span class=\"comment\">// 调用代理的方法</span></span><br><span class=\"line\">        proxy.select();</span><br><span class=\"line\">        proxy.update();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 保存JDK动态代理生成的代理类，类名保存为 UserServiceProxy</span></span><br><span class=\"line\">        <span class=\"comment\">// ProxyUtils.generateClassFile(userServiceImpl.getClass(), \"UserServiceProxy\");</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log start time [Thu Dec 20 16:55:19 CST 2018] </span><br><span class=\"line\">查询 selectById</span><br><span class=\"line\">log end time [Thu Dec 20 16:55:19 CST 2018] </span><br><span class=\"line\">log start time [Thu Dec 20 16:55:19 CST 2018] </span><br><span class=\"line\">更新 update</span><br><span class=\"line\">log end time [Thu Dec 20 16:55:19 CST 2018]</span><br></pre></td></tr></table></figure>\n<p>InvocationHandler 和 Proxy 的主要方法介绍如下：</p>\n<p><strong>java.lang.reflect.InvocationHandler</strong></p>\n<p><code>Object invoke(Object proxy, Method method, Object[] args)</code> 定义了代理对象调用方法时希望执行的动作，用于集中处理在动态代理类对象上的方法调用</p>\n<p><strong>java.lang.reflect.Proxy</strong></p>\n<p><code>static InvocationHandler getInvocationHandler(Object proxy)</code> 用于获取指定代理对象所关联的调用处理器</p>\n<p><code>static Class&lt;?&gt; getProxyClass(ClassLoader loader, Class&lt;?&gt;... interfaces)</code> 返回指定接口的代理类</p>\n<p><code>static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</code> 构造实现指定接口的代理类的一个新实例，所有方法会调用给定处理器对象的 invoke 方法</p>\n<p><code>static boolean isProxyClass(Class&lt;?&gt; cl)</code> 返回 cl 是否为一个代理类</p>\n<h4 id=\"代理类的调用过程\"><a href=\"#代理类的调用过程\" class=\"headerlink\" title=\"代理类的调用过程\"></a>代理类的调用过程</h4><p>生成的代理类到底长什么样子呢？借助下面的工具类，把代理类保存下来再探个究竟<br>（通过设置环境变量sun.misc.ProxyGenerator.saveGeneratedFiles=true也可以保存代理类）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sun.misc.ProxyGenerator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyUtils</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将根据类信息动态生成的二进制字节码保存到硬盘中，默认的是clazz目录下</span></span><br><span class=\"line\"><span class=\"comment\">     * params: clazz 需要生成动态代理类的类</span></span><br><span class=\"line\"><span class=\"comment\">     * proxyName: 为动态生成的代理类的名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">generateClassFile</span><span class=\"params\">(Class clazz, String proxyName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 根据类信息和提供的代理类名称，生成字节码</span></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] classFile = ProxyGenerator.generateProxyClass(proxyName, clazz.getInterfaces());</span><br><span class=\"line\">        String paths = clazz.getResource(<span class=\"string\">\".\"</span>).getPath();</span><br><span class=\"line\">        System.out.println(paths);</span><br><span class=\"line\">        FileOutputStream out = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//保留到硬盘中</span></span><br><span class=\"line\">            out = <span class=\"keyword\">new</span> FileOutputStream(paths + proxyName + <span class=\"string\">\".class\"</span>);</span><br><span class=\"line\">            out.write(classFile);</span><br><span class=\"line\">            out.flush();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                out.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在 Client2 测试类的main的最后面加入一行代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 保存JDK动态代理生成的代理类，类名保存为 UserServiceProxy</span></span><br><span class=\"line\">ProxyUtils.generateClassFile(userServiceImpl.getClass(), <span class=\"string\">\"UserServiceProxy\"</span>);</span><br></pre></td></tr></table></figure>\n<p>IDEA 再次运行之后就可以在 target 的类路径下找到 UserServiceProxy.class，双击后IDEA的反编译插件会将该二进制class文件</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://image.laijianfeng.org/20181220_171031.png\" alt=\"JDK 动态代理生成的代理类\" title=\"\">\n                </div>\n                <div class=\"image-caption\">JDK 动态代理生成的代理类</div>\n            </figure>\n<p>UserServiceProxy 的代码如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> proxy.UserService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceProxy</span> <span class=\"keyword\">extends</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m1;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m2;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m4;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m0;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m3;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserServiceProxy</span><span class=\"params\">(InvocationHandler var1)</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(var1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object var1)</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 省略...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 省略...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.h.invoke(<span class=\"keyword\">this</span>, m4, (Object[])<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var2;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(var3);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 省略...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.h.invoke(<span class=\"keyword\">this</span>, m3, (Object[])<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var2;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(var3);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            m1 = Class.forName(<span class=\"string\">\"java.lang.Object\"</span>).getMethod(<span class=\"string\">\"equals\"</span>, Class.forName(<span class=\"string\">\"java.lang.Object\"</span>));</span><br><span class=\"line\">            m2 = Class.forName(<span class=\"string\">\"java.lang.Object\"</span>).getMethod(<span class=\"string\">\"toString\"</span>);</span><br><span class=\"line\">            m4 = Class.forName(<span class=\"string\">\"proxy.UserService\"</span>).getMethod(<span class=\"string\">\"select\"</span>);</span><br><span class=\"line\">            m0 = Class.forName(<span class=\"string\">\"java.lang.Object\"</span>).getMethod(<span class=\"string\">\"hashCode\"</span>);</span><br><span class=\"line\">            m3 = Class.forName(<span class=\"string\">\"proxy.UserService\"</span>).getMethod(<span class=\"string\">\"update\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从 UserServiceProxy 的代码中我们可以发现：</p>\n<ul>\n<li>UserServiceProxy 继承了 Proxy 类，并且实现了被代理的所有接口，以及equals、hashCode、toString等方法</li>\n<li>由于 UserServiceProxy 继承了 Proxy 类，所以每个代理类都会关联一个 InvocationHandler 方法调用处理器</li>\n<li>类和所有方法都被 <code>public final</code> 修饰，所以代理类只可被使用，不可以再被继承</li>\n<li>每个方法都有一个 Method 对象来描述，Method 对象在static静态代码块中创建，以 <code>m + 数字</code> 的格式命名</li>\n<li>调用方法的时候通过 <code>super.h.invoke(this, m1, (Object[])null);</code> 调用，其中的 <code>super.h.invoke</code> 实际上是在创建代理的时候传递给 <code>Proxy.newProxyInstance</code> 的 LogHandler 对象，它继承 InvocationHandler 类，负责实际的调用处理逻辑</li>\n</ul>\n<p>而 LogHandler 的 invoke 方法接收到 method、args 等参数后，进行一些处理，然后通过反射让被代理的对象 target 执行方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">    before();</span><br><span class=\"line\">    Object result = method.invoke(target, args);       <span class=\"comment\">// 调用 target 的 method 方法</span></span><br><span class=\"line\">    after();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;  <span class=\"comment\">// 返回方法的执行结果</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>JDK动态代理执行方法调用的过程简图如下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://image.laijianfeng.org/2018_12_20_JDKProxy.png\" alt=\"JDK动态代理执行方法调用过程\" title=\"\">\n                </div>\n                <div class=\"image-caption\">JDK动态代理执行方法调用过程</div>\n            </figure>\n<p>代理类的调用过程相信大家都明了了，而关于Proxy的源码解析，还请大家另外查阅其他文章或者直接看源码</p>\n<h3 id=\"CGLIB动态代理\"><a href=\"#CGLIB动态代理\" class=\"headerlink\" title=\"CGLIB动态代理\"></a>CGLIB动态代理</h3><p>maven引入CGLIB包，然后编写一个UserDao类，它没有接口，只有两个方法，select() 和 update()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"UserDao 查询 selectById\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"UserDao 更新 update\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编写一个 LogInterceptor ，继承了 MethodInterceptor，用于方法的拦截回调</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object 表示要进行增强的对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> method 表示拦截的方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> objects 数组表示参数列表，基本数据类型需要传入其包装类型，如int--&gt;Integer、long-Long、double--&gt;Double</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> methodProxy 表示对方法的代理，invokeSuper方法表示对被代理对象方法的调用</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 执行结果</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Throwable</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object object, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        Object result = methodProxy.invokeSuper(object, objects);   <span class=\"comment\">// 注意这里是调用 invokeSuper 而不是 invoke，否则死循环，methodProxy.invokesuper执行的是原始类的方法，method.invoke执行的是子类的方法</span></span><br><span class=\"line\">        after();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log start time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log end time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CglibTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        DaoProxy daoProxy = <span class=\"keyword\">new</span> DaoProxy(); </span><br><span class=\"line\">        Enhancer enhancer = <span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">        enhancer.setSuperclass(Dao.class);  <span class=\"comment\">// 设置超类，cglib是通过继承来实现的</span></span><br><span class=\"line\">        enhancer.setCallback(daoProxy);</span><br><span class=\"line\"></span><br><span class=\"line\">        Dao dao = (Dao)enhancer.create();   <span class=\"comment\">// 创建代理类</span></span><br><span class=\"line\">        dao.update();</span><br><span class=\"line\">        dao.select();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log start time [Fri Dec 21 00:06:40 CST 2018] </span><br><span class=\"line\">UserDao 查询 selectById</span><br><span class=\"line\">log end time [Fri Dec 21 00:06:40 CST 2018] </span><br><span class=\"line\">log start time [Fri Dec 21 00:06:40 CST 2018] </span><br><span class=\"line\">UserDao 更新 update</span><br><span class=\"line\">log end time [Fri Dec 21 00:06:40 CST 2018]</span><br></pre></td></tr></table></figure>\n<p>还可以进一步多个 MethodInterceptor 进行过滤筛选</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogInterceptor2</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object object, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        Object result = methodProxy.invokeSuper(object, objects);</span><br><span class=\"line\">        after();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log2 start time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"log2 end time [%s] \"</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 回调过滤器: 在CGLib回调时可以设置对不同方法执行不同的回调逻辑，或者根本不执行回调。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DaoFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">CallbackFilter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">accept</span><span class=\"params\">(Method method)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"select\"</span>.equals(method.getName())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;   <span class=\"comment\">// Callback 列表第1个拦截器</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;   <span class=\"comment\">// Callback 列表第2个拦截器，return 2 则为第3个，以此类推</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再次测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CglibTest2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        LogInterceptor logInterceptor = <span class=\"keyword\">new</span> LogInterceptor();</span><br><span class=\"line\">        LogInterceptor2 logInterceptor2 = <span class=\"keyword\">new</span> LogInterceptor2();</span><br><span class=\"line\">        Enhancer enhancer = <span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">        enhancer.setSuperclass(UserDao.class);   <span class=\"comment\">// 设置超类，cglib是通过继承来实现的</span></span><br><span class=\"line\">        enhancer.setCallbacks(<span class=\"keyword\">new</span> Callback[]&#123;logInterceptor, logInterceptor2, NoOp.INSTANCE&#125;);   <span class=\"comment\">// 设置多个拦截器，NoOp.INSTANCE是一个空拦截器，不做任何处理</span></span><br><span class=\"line\">        enhancer.setCallbackFilter(<span class=\"keyword\">new</span> DaoFilter());</span><br><span class=\"line\"></span><br><span class=\"line\">        UserDao proxy = (UserDao) enhancer.create();   <span class=\"comment\">// 创建代理类</span></span><br><span class=\"line\">        proxy.select();</span><br><span class=\"line\">        proxy.update();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log start time [Fri Dec <span class=\"number\">21</span> <span class=\"number\">00</span>:<span class=\"number\">22</span>:<span class=\"number\">39</span> CST <span class=\"number\">2018</span>] </span><br><span class=\"line\">UserDao 查询 selectById</span><br><span class=\"line\">log end time [Fri Dec <span class=\"number\">21</span> <span class=\"number\">00</span>:<span class=\"number\">22</span>:<span class=\"number\">39</span> CST <span class=\"number\">2018</span>] </span><br><span class=\"line\">log2 start time [Fri Dec <span class=\"number\">21</span> <span class=\"number\">00</span>:<span class=\"number\">22</span>:<span class=\"number\">39</span> CST <span class=\"number\">2018</span>] </span><br><span class=\"line\">UserDao 更新 update</span><br><span class=\"line\">log2 end time [Fri Dec <span class=\"number\">21</span> <span class=\"number\">00</span>:<span class=\"number\">22</span>:<span class=\"number\">39</span> CST <span class=\"number\">2018</span>]</span><br></pre></td></tr></table></figure>\n<p>CGLIB 创建动态代理类的模式是：</p>\n<ol>\n<li>查找目标类上的所有非final 的public类型的方法定义；</li>\n<li>将这些方法的定义转换成字节码；</li>\n<li>将组成的字节码转换成相应的代理的class对象；</li>\n<li>实现 MethodInterceptor接口，用来处理对代理类上所有方法的请求</li>\n</ol>\n<h3 id=\"JDK动态代理与CGLIB动态代理对比\"><a href=\"#JDK动态代理与CGLIB动态代理对比\" class=\"headerlink\" title=\"JDK动态代理与CGLIB动态代理对比\"></a>JDK动态代理与CGLIB动态代理对比</h3><p>JDK动态代理：基于Java反射机制实现，必须要实现了接口的业务类才能用这种办法生成代理对象。</p>\n<p>cglib动态代理：基于ASM机制实现，通过生成业务类的子类作为代理类。</p>\n<p>JDK Proxy 的优势：</p>\n<ul>\n<li>最小化依赖关系，减少依赖意味着简化开发和维护，JDK 本身的支持，可能比 cglib 更加可靠。</li>\n<li>平滑进行 JDK 版本升级，而字节码类库通常需要进行更新以保证在新版 Java 上能够使用。</li>\n<li>代码实现简单。</li>\n</ul>\n<p>基于类似 cglib 框架的优势：</p>\n<ul>\n<li>无需实现接口，达到代理类无侵入</li>\n<li>只操作我们关心的类，而不必为其他相关类增加工作量。</li>\n<li>高性能</li>\n</ul>\n<h3 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h3><blockquote>\n<p>来源于网上，用于帮助理解和掌握，欢迎补充</p>\n</blockquote>\n<h4 id=\"描述动态代理的几种实现方式？分别说出相应的优缺点\"><a href=\"#描述动态代理的几种实现方式？分别说出相应的优缺点\" class=\"headerlink\" title=\"描述动态代理的几种实现方式？分别说出相应的优缺点\"></a>描述动态代理的几种实现方式？分别说出相应的优缺点</h4><p>代理可以分为 “静态代理” 和 “动态代理”，动态代理又分为 “JDK动态代理” 和 “CGLIB动态代理” 实现。</p>\n<p><strong>静态代理</strong>：代理对象和实际对象都继承了同一个接口，在代理对象中指向的是实际对象的实例，这样对外暴露的是代理对象而真正调用的是 Real Object</p>\n<ul>\n<li><strong>优点</strong>：可以很好的保护实际对象的业务逻辑对外暴露，从而提高安全性。</li>\n<li><strong>缺点</strong>：不同的接口要有不同的代理类实现，会很冗余</li>\n</ul>\n<p><strong>JDK 动态代理</strong>：</p>\n<ul>\n<li>为了解决静态代理中，生成大量的代理类造成的冗余；</li>\n<li>JDK 动态代理只需要实现 InvocationHandler 接口，重写 invoke 方法便可以完成代理的实现，</li>\n<li>jdk的代理是利用反射生成代理类 Proxyxx.class 代理类字节码，并生成对象</li>\n<li>jdk动态代理之所以<strong>只能代理接口</strong>是因为<strong>代理类本身已经extends了Proxy，而java是不允许多重继承的</strong>，但是允许实现多个接口</li>\n<li><strong>优点</strong>：解决了静态代理中冗余的代理实现类问题。</li>\n<li><strong>缺点</strong>：JDK 动态代理是基于接口设计实现的，如果没有接口，会抛异常。</li>\n</ul>\n<p><strong>CGLIB 代理</strong>：</p>\n<ul>\n<li>由于 JDK 动态代理限制了只能基于接口设计，而对于没有接口的情况，JDK方式解决不了；</li>\n<li>CGLib 采用了非常底层的字节码技术，其原理是通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑，来完成动态代理的实现。</li>\n<li>实现方式实现 MethodInterceptor 接口，重写 intercept 方法，通过 Enhancer 类的回调方法来实现。</li>\n<li>但是CGLib在创建代理对象时所花费的时间却比JDK多得多，所以对于单例的对象，因为无需频繁创建对象，用CGLib合适，反之，使用JDK方式要更为合适一些。</li>\n<li>同时，由于CGLib由于是采用动态创建子类的方法，对于final方法，无法进行代理。</li>\n<li><strong>优点</strong>：没有接口也能实现动态代理，而且采用字节码增强技术，性能也不错。</li>\n<li><strong>缺点</strong>：技术实现相对难理解些。</li>\n</ul>\n<h4 id=\"CGlib-对接口实现代理？\"><a href=\"#CGlib-对接口实现代理？\" class=\"headerlink\" title=\"CGlib 对接口实现代理？\"></a>CGlib 对接口实现代理？</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> proxy.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建代理类的工厂 该类要实现 MethodInterceptor 接口。</span></span><br><span class=\"line\"><span class=\"comment\"> * 该类中完成三样工作：</span></span><br><span class=\"line\"><span class=\"comment\"> * （1）声明目标类的成员变量，并创建以目标类对象为参数的构造器。用于接收目标对象</span></span><br><span class=\"line\"><span class=\"comment\"> * （2）定义代理的生成方法，用于创建代理对象。方法名是任意的。代理对象即目标类的子类</span></span><br><span class=\"line\"><span class=\"comment\"> * （3）定义回调接口方法。对目标类的增强这在这里完成</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CGLibFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 声明目标类的成员变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CGLibFactory</span><span class=\"params\">(UserService target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 定义代理的生成方法,用于创建代理对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> UserService <span class=\"title\">myCGLibCreator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Enhancer enhancer = <span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">        <span class=\"comment\">// 为代理对象设置父类，即指定目标类</span></span><br><span class=\"line\">        enhancer.setSuperclass(UserService.class);</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 设置回调接口对象 注意，只所以在setCallback()方法中可以写上this，</span></span><br><span class=\"line\"><span class=\"comment\">         * 是因为MethodIntecepter接口继承自Callback，是其子接口</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        enhancer.setCallback(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (UserService) enhancer.create();<span class=\"comment\">// create用以生成CGLib代理对象</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"start invoke \"</span> + method.getName());</span><br><span class=\"line\">        Object result = method.invoke(target, args);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"end invoke \"</span> + method.getName());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参考：<br>《Java核心技术》卷1<br>《深入理解Java虚拟机》7.3<br>java docs: <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Proxy.html\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Proxy.html</a><br><a href=\"https://segmentfault.com/a/1190000011291179\" target=\"_blank\" rel=\"noopener\">Java三种代理模式：静态代理、动态代理和cglib代理</a><br><a href=\"http://xzc.fun/w/index.php?title=%E6%8F%8F%E8%BF%B0%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F_%E5%88%86%E5%88%AB%E8%AF%B4%E5%87%BA%E7%9B%B8%E5%BA%94%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9\" target=\"_blank\" rel=\"noopener\">描述动态代理的几种实现方式 分别说出相应的优缺点</a><br><a href=\"https://my.oschina.net/robinyao/blog/811193\" target=\"_blank\" rel=\"noopener\">JDK动态代理详解</a><br><a href=\"https://blog.csdn.net/luanlouis/article/details/24589193\" target=\"_blank\" rel=\"noopener\">Java动态代理机制详解（JDK 和CGLIB，Javassist，ASM）</a><br><a href=\"https://blog.csdn.net/WangQYoho/article/details/77584832\" target=\"_blank\" rel=\"noopener\">静态代理和动态代理的理解</a></p>\n<p><a href=\"https://www.jianshu.com/p/9bcac608c714\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/9bcac608c714</a></p>\n</blockquote>\n"},{"title":"postgresql账号管理","date":"2020-09-16T10:37:46.000Z","_content":"\n**注意：**创建好用户（角色）之后需要连接的话，还需要修改2个权限控制的配置文件（pg_hba.conf、pg_ident.conf）。并且创建用户（user）和创建角色（role）一样，唯一的区别是用户默认可以登录，而创建的角色默认不能登录。创建用户和角色的各个参数选项是一样的。\n\n**Tip：安装PostgreSQL会自动创建一个postgres用户，需要切换到该用户下访问PostgreSQL。**\n\n- [创建用户/角色](https://www.postgresql.org/docs/11/sql-createuser.html)\n\n  ```\n  CREATE USER/ROLE name [ [ WITH ] option [ ... ] ]  : 关键词 USER,ROLE； name 用户或角色名； \n  \n  where option can be:\n  \n        SUPERUSER | NOSUPERUSER      :超级权限，拥有所有权限，默认nosuperuser。\n      | CREATEDB | NOCREATEDB        :建库权限，默认nocreatedb。\n      | CREATEROLE | NOCREATEROLE    :建角色权限，拥有创建、修改、删除角色，默认nocreaterole。\n      | INHERIT | NOINHERIT          :继承权限，可以把除superuser权限继承给其他用户/角色，默认inherit。\n      | LOGIN | NOLOGIN              :登录权限，作为连接的用户，默认nologin，除非是create user（默认登录）。\n      | REPLICATION | NOREPLICATION  :复制权限，用于物理或则逻辑复制（复制和删除slots），默认是noreplication。\n      | BYPASSRLS | NOBYPASSRLS      :安全策略RLS权限，默认nobypassrls。\n  ```\n\n  ```\n      | CONNECTION LIMIT connlimit   :限制用户并发数，默认-1，不限制。正常连接会受限制，后台连接和prepared事务不受限制。\n      | [ ENCRYPTED ] PASSWORD 'password' | PASSWORD NULL :设置密码，密码仅用于有login属性的用户，不使用密码身份验证，则可以省略此选项。可以选择将空密码显式写为PASSWORD NULL。\n                                                           加密方法由配置参数password_encryption确定，密码始终以加密方式存储在系统目录中。\n      | VALID UNTIL 'timestamp'      :密码有效期时间，不设置则用不失效。\n      | IN ROLE role_name [, ...]    :新角色将立即添加为新成员。\n      | IN GROUP role_name [, ...]   :同上\n      | ROLE role_name [, ...]       :ROLE子句列出一个或多个现有角色，这些角色自动添加为新角色的成员。 （这实际上使新角色成为“组”）。\n      | ADMIN role_name [, ...]      :与ROLE类似，但命名角色将添加到新角色WITH ADMIN OPTION，使他们有权将此角色的成员资格授予其他人。\n      | USER role_name [, ...]       :同上\n      | SYSID uid                    :被忽略，但是为向后兼容性而存在。\n  ```\n\n\n\n​      **示例：**\n\n1. 创建不需要密码登陆的用户zjy：\n\n   ```\n   postgres=# CREATE ROLE zjy LOGIN;\n   CREATE ROLE\n   ```\n\n   创建该用户后，还不能直接登录。需要修改 **pg_hba.conf** 文件（后面会对该文件进行说明），加入：\n\n   ①：本地登陆：local   all    all    **trust**②：远程登陆：host   all    all    192.168.163.132/32     **trust**\n\n2. 创建需要密码登陆的用户zjy1：\n\n   ```\n   postgres=# CREATE USER zjy1 WITH PASSWORD 'zjy1';\n   CREATE ROLE\n   ```\n\n   和ROLE的区别是：USER带LOGIN属性。也需要修改 **pg_hba.conf** 文件（后面会对该文件进行说明），加入：\n   host    all     all     192.168.163.132/32    **md5**\n\n3. 创建有时间限制的用户zjy2：\n\n   ```\n   postgres=# CREATE ROLE zjy2 WITH LOGIN PASSWORD 'zjy2' VALID UNTIL '2019-05-30';\n   CREATE ROLE\n   ```\n\n   和2的处理方法一样，修改 **pg_hba.conf** 文件，该用户会的密码在给定的时间之后过期不可用。\n\n4. 创建有创建数据库和管理角色权限的用户admin：\n\n   ```\n   postgres=# CREATE ROLE admin WITH CREATEDB CREATEROLE;\n   CREATE ROLE\n   ```\n\n   注意：拥有创建数据库，角色的用户，也可以删除和修改这些对象。\n\n5. 创建具有超级权限的用户：admin\n\n   ```\n   postgres=# CREATE ROLE admin WITH SUPERUSER LOGIN PASSWORD 'admin';\n   CREATE ROLE\n   ```\n\n6. 创建复制账号：repl \n\n   ```\n   postgres=# CREATE USER repl REPLICATION LOGIN ENCRYPTED PASSWORD 'repl';\n   CREATE ROLE\n   ```\n\n7. 其他说明\n\n\n\n8. \n\n- [授权，定义访问权限](https://www.postgresql.org/docs/11/sql-grant.html)\n\n\n\n  ```\n  GRANT { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }\n      [, ...] | ALL [ PRIVILEGES ] }\n      ON { [ TABLE ] table_name [, ...]\n           | ALL TABLES IN SCHEMA schema_name [, ...] }\n      TO role_specification [, ...] [ WITH GRANT OPTION ]\n  \n  ##单表授权：授权zjy账号可以访问schema为zjy的zjy表\n  grant select,insert,update,delete on zjy.zjy to zjy;\n  ##所有表授权：\n  grant select,insert,update,delete on all tables in schema zjy to zjy;\n  \n  \n  GRANT { { SELECT | INSERT | UPDATE | REFERENCES } ( column_name [, ...] )\n      [, ...] | ALL [ PRIVILEGES ] ( column_name [, ...] ) }\n      ON [ TABLE ] table_name [, ...]\n      TO role_specification [, ...] [ WITH GRANT OPTION ]\n  \n  ##列授权，授权指定列(zjy schema下的zjy表的name列)的更新权限给zjy用户\n  grant update (name) on zjy.zjy to zjy;\n  ##指定列授不同权限，zjy schema下的zjy表，查看更新name、age字段，插入name字段\n  grant select (name,age),update (name,age),insert(name) on zjy.xxx to zjy;\n  \n  \n  GRANT { { USAGE | SELECT | UPDATE }\n      [, ...] | ALL [ PRIVILEGES ] }\n      ON { SEQUENCE sequence_name [, ...]\n           | ALL SEQUENCES IN SCHEMA schema_name [, ...] }\n      TO role_specification [, ...] [ WITH GRANT OPTION ]\n  \n  ##序列（自增键）属性授权，指定zjy schema下的seq_id_seq 给zjy用户\n  grant select,update on sequence zjy.seq_id_seq to zjy;\n  ##序列（自增键）属性授权，给用户zjy授权zjy schema下的所有序列\n  grant select,update on all sequences in schema zjy to zjy;\n  \n  \n  GRANT { { CREATE | CONNECT | TEMPORARY | TEMP } [, ...] | ALL [ PRIVILEGES ] }\n      ON DATABASE database_name [, ...]\n      TO role_specification [, ...] [ WITH GRANT OPTION ]\n  \n  ##连接数据库权限，授权cc用户连接数据库zjy\n  grant connect on database zjy to cc;\n  \n  \n  GRANT { USAGE | ALL [ PRIVILEGES ] }\n      ON DOMAIN domain_name [, ...]\n      TO role_specification [, ...] [ WITH GRANT OPTION ]\n  \n  ##\n  ```\n\n  ```\n  GRANT { USAGE | ALL [ PRIVILEGES ] }\n      ON FOREIGN DATA WRAPPER fdw_name [, ...]\n      TO role_specification [, ...] [ WITH GRANT OPTION ]\n  ```\n\n    \\##\n\n  ```\n  GRANT { USAGE | ALL [ PRIVILEGES ] }\n      ON FOREIGN SERVER server_name [, ...]\n      TO role_specification [, ...] [ WITH GRANT OPTION ]\n  ```\n\n  ```\n  ##\n  ```\n\n  ```\n  GRANT { EXECUTE | ALL [ PRIVILEGES ] }\n      ON { { FUNCTION | PROCEDURE | ROUTINE } routine_name [ ( [ [ argmode ] [ arg_name ] arg_type [, ...] ] ) ] [, ...]\n           | ALL { FUNCTIONS | PROCEDURES | ROUTINES } IN SCHEMA schema_name [, ...] }\n      TO role_specification [, ...] [ WITH GRANT OPTION ]\n  ```\n\n  ```\n  ##\n  \n  \n  GRANT { USAGE | ALL [ PRIVILEGES ] }\n      ON LANGUAGE lang_name [, ...]\n      TO role_specification [, ...] [ WITH GRANT OPTION ]\n  ```\n\n    \\##\n\n  ```\n  GRANT { { SELECT | UPDATE } [, ...] | ALL [ PRIVILEGES ] }\n      ON LARGE OBJECT loid [, ...]\n      TO role_specification [, ...] [ WITH GRANT OPTION ]\n  ```\n\n  ```\n  ##\n  \n  GRANT { { CREATE | USAGE } [, ...] | ALL [ PRIVILEGES ] }\n      ON SCHEMA schema_name [, ...]\n      TO role_specification [, ...] [ WITH GRANT OPTION ]\n  \n  ##连接schema权限，授权cc访问zjy schema权限\n  grant usage on schema zjy to cc;\n  \n  GRANT { CREATE | ALL [ PRIVILEGES ] }\n      ON TABLESPACE tablespace_name [, ...]\n      TO role_specification [, ...] [ WITH GRANT OPTION ]\n  \n  GRANT { USAGE | ALL [ PRIVILEGES ] }\n      ON TYPE type_name [, ...]\n      TO role_specification [, ...] [ WITH GRANT OPTION ]\n  \n  where role_specification can be:\n  \n      [ GROUP ] role_name\n    | PUBLIC\n    | CURRENT_USER\n    | SESSION_USER\n  \n  GRANT role_name [, ...] TO role_name [, ...] [ WITH ADMIN OPTION ]\n  ##把zjy用户的权限授予用户cc。\n  grant zjy to cc;\n  ```\n\n\n\n  [权限说明](https://blog.51cto.com/riverxyz/1880795)：\n\n\n\n  ```\n  SELECT：允许从指定表，视图或序列的任何列或列出的特定列进行SELECT。也允许使用COPY TO。在UPDATE或DELETE中引用现有列值也需要此权限。对于序列，此权限还允许使用currval函数。对于大对象，此权限允许读取对象。\n  \n  INSERT：允许将新行INSERT到指定的表中。如果列出了特定列，则只能在INSERT命令中为这些列分配（因此其他列将接收默认值）。也允许COPY FROM。\n  \n  UPDATE：允许更新指定表的任何列或列出的特定列，需要SELECT权限。\n  \n  DELETE：允许删除指定表中的行，需要SELECT权限。\n  \n  TRUNCATE：允许在指定的表上创建触发器。\n  \n  REFERENCES：允许创建引用指定表或表的指定列的外键约束。\n  \n  TRIGGER：允许在指定的表上创建触发器。 \n  \n  CREATE：对于数据库，允许在数据库中创建新的schema、table、index。\n  \n  CONNECT：允许用户连接到指定的数据库。在连接启动时检查此权限。\n  \n  TEMPORARY、TEMP：允许在使用指定数据库时创建临时表。\n  \n  EXECUTE：允许使用指定的函数或过程以及在函数。\n  \n  USAGE：对于schema，允许访问指定模式中包含的对象；对于sequence，允许使用currval和nextval函数。对于类型和域，允许在创建表，函数和其他模式对象时使用类型或域。\n  \n  ALL PRIVILEGES：一次授予所有可用权限。\n  ```\n\n\n\n- [撤销权限\n  ](https://www.postgresql.org/docs/11/sql-revoke.html)\n\n\n\n  ```\n  REVOKE [ GRANT OPTION FOR ]\n      { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }\n      [, ...] | ALL [ PRIVILEGES ] }\n      ON { [ TABLE ] table_name [, ...]\n           | ALL TABLES IN SCHEMA schema_name [, ...] }\n      FROM { [ GROUP ] role_name | PUBLIC } [, ...]\n      [ CASCADE | RESTRICT ]\n  \n   ##移除用户zjy在schema zjy上所有表的select权限\n   revoke select on all tables in schema zjy from zjy;\n  \n  \n  REVOKE [ GRANT OPTION FOR ]\n      { { SELECT | INSERT | UPDATE | REFERENCES } ( column_name [, ...] )\n      [, ...] | ALL [ PRIVILEGES ] ( column_name [, ...] ) }\n      ON [ TABLE ] table_name [, ...]\n      FROM { [ GROUP ] role_name | PUBLIC } [, ...]\n      [ CASCADE | RESTRICT ]\n  \n   ##移除用户zjy在zjy schema的zjy表的age列的查询权限\n   revoke select (age) on zjy.zjy from zjy;\n  \n  \n  REVOKE [ GRANT OPTION FOR ]\n      { { USAGE | SELECT | UPDATE }\n      [, ...] | ALL [ PRIVILEGES ] }\n      ON { SEQUENCE sequence_name [, ...]\n           | ALL SEQUENCES IN SCHEMA schema_name [, ...] }\n      FROM { [ GROUP ] role_name | PUBLIC } [, ...]\n      [ CASCADE | RESTRICT ]\n  ##序列\n  \n  \n  REVOKE [ GRANT OPTION FOR ]\n      { { CREATE | CONNECT | TEMPORARY | TEMP } [, ...] | ALL [ PRIVILEGES ] }\n      ON DATABASE database_name [, ...]\n      FROM { [ GROUP ] role_name | PUBLIC } [, ...]\n      [ CASCADE | RESTRICT ]\n  ##库\n  \n  \n  REVOKE [ GRANT OPTION FOR ]\n      { USAGE | ALL [ PRIVILEGES ] }\n      ON DOMAIN domain_name [, ...]\n      FROM { [ GROUP ] role_name | PUBLIC } [, ...]\n      [ CASCADE | RESTRICT]\n  ##\n  \n  \n  REVOKE [ GRANT OPTION FOR ]\n      { USAGE | ALL [ PRIVILEGES ] }\n      ON FOREIGN DATA WRAPPER fdw_name [, ...]\n      FROM { [ GROUP ] role_name | PUBLIC } [, ...]\n      [ CASCADE | RESTRICT]\n  ##\n  \n  REVOKE [ GRANT OPTION FOR ]\n      { USAGE | ALL [ PRIVILEGES ] }\n      ON FOREIGN SERVER server_name [, ...]\n      FROM { [ GROUP ] role_name | PUBLIC } [, ...]\n      [ CASCADE | RESTRICT]\n  ##\n  \n  \n  REVOKE [ GRANT OPTION FOR ]\n      { EXECUTE | ALL [ PRIVILEGES ] }\n      ON { { FUNCTION | PROCEDURE | ROUTINE } function_name [ ( [ [ argmode ] [ arg_name ] arg_type [, ...] ] ) ] [, ...]\n           | ALL { FUNCTIONS | PROCEDURES | ROUTINES } IN SCHEMA schema_name [, ...] }\n      FROM { [ GROUP ] role_name | PUBLIC } [, ...]\n      [ CASCADE | RESTRICT ]\n  ##\n  ```\n\n  ```\n  REVOKE [ GRANT OPTION FOR ]\n      { USAGE | ALL [ PRIVILEGES ] }\n      ON LANGUAGE lang_name [, ...]\n      FROM { [ GROUP ] role_name | PUBLIC } [, ...]\n      [ CASCADE | RESTRICT ]\n  ##\n  \n  \n  REVOKE [ GRANT OPTION FOR ]\n      { { SELECT | UPDATE } [, ...] | ALL [ PRIVILEGES ] }\n      ON LARGE OBJECT loid [, ...]\n      FROM { [ GROUP ] role_name | PUBLIC } [, ...]\n      [ CASCADE | RESTRICT ]\n  ##\n  \n  \n  REVOKE [ GRANT OPTION FOR ]\n      { { CREATE | USAGE } [, ...] | ALL [ PRIVILEGES ] }\n      ON SCHEMA schema_name [, ...]\n      FROM { [ GROUP ] role_name | PUBLIC } [, ...]\n      [ CASCADE | RESTRICT ]\n  ##schena权限\n  \n  \n  REVOKE [ GRANT OPTION FOR ]\n      { CREATE | ALL [ PRIVILEGES ] }\n      ON TABLESPACE tablespace_name [, ...]\n      FROM { [ GROUP ] role_name | PUBLIC } [, ...]\n      [ CASCADE | RESTRICT ]\n  ##\n  \n  \n  REVOKE [ GRANT OPTION FOR ]\n      { USAGE | ALL [ PRIVILEGES ] }\n      ON TYPE type_name [, ...]\n      FROM { [ GROUP ] role_name | PUBLIC } [, ...]\n      [ CASCADE | RESTRICT ]\n  ##\n  ```\n\n  ```\n  REVOKE [ ADMIN OPTION FOR ]\n      role_name [, ...] FROM role_name [, ...]\n      [ CASCADE | RESTRICT ]\n  ##\n  ```\n\n\n\n  注意：任何用户对public的schema都有all的权限，为了安全可以禁止用户对public schema\n\n  ```\n  ##移除所有用户（public），superuser除外，对指定DB下的public schema的create 权限。\n  zjy=# revoke  create  on schema public from public;\n  REVOKE\n  ```\n\n- [修改用户属性\n  ](https://www.postgresql.org/docs/11/sql-alteruser.html)\n\n\n  ```\n  ALTER USER role_specification [ WITH ] option [ ... ]\n  \n  where option can be:\n  \n        SUPERUSER | NOSUPERUSER\n      | CREATEDB | NOCREATEDB\n      | CREATEROLE | NOCREATEROLE\n      | INHERIT | NOINHERIT\n      | LOGIN | NOLOGIN\n      | REPLICATION | NOREPLICATION\n      | BYPASSRLS | NOBYPASSRLS\n      | CONNECTION LIMIT connlimit\n      | [ ENCRYPTED ] PASSWORD 'password' | PASSWORD NULL\n      | VALID UNTIL 'timestamp'\n  \n  ALTER USER name RENAME TO new_name\n  \n  ALTER USER { role_specification | ALL } [ IN DATABASE database_name ] SET configuration_parameter { TO | = } { value | DEFAULT }\n  ALTER USER { role_specification | ALL } [ IN DATABASE database_name ] SET configuration_parameter FROM CURRENT\n  ALTER USER { role_specification | ALL } [ IN DATABASE database_name ] RESET configuration_parameter\n  ALTER USER { role_specification | ALL } [ IN DATABASE database_name ] RESET ALL\n  \n  where role_specification can be:\n  \n      role_name\n    | CURRENT_USER\n    | SESSION_USER\n  ```\n\n\n\n  **示例：**     注意：option选项里的用户都可以通过alter role进行修改\n\n- - 修改用户为超级/非超级用户\n\n    ```\n    alter role caocao with superuser/nosuperuser;\n    ```\n\n  - 修改用户为可/不可登陆用户\n\n    ```\n    alter role caocao with nologin/login;\n    ```\n\n  - 修改用户名：\n\n    ```\n    alter role caocao rename to youxing;\n    ```\n\n  - 修改用户密码，移除密码用NULL\n\n    ```\n    alter role youxing with password 'youxing';\n    ```\n\n  - 修改用户参数，该用户登陆后的以该参数为准\n\n    ```\n    alter role zjy in database zjy SET geqo to 0/default;\n    ```\n\n- [控制访问文件](https://www.postgresql.org/docs/11/auth-pg-hba-conf.html) pg_hba.conf[\n  ](https://www.postgresql.org/docs/11/auth-pg-hba-conf.html)\n\n\n\n  ```\n  local      database  user  auth-method  [auth-options]\n  host       database  user  address  auth-method  [auth-options]\n  hostssl    database  user  address  auth-method  [auth-options]\n  hostnossl  database  user  address  auth-method  [auth-options]\n  host       database  user  IP-address  IP-mask  auth-method  [auth-options]\n  hostssl    database  user  IP-address  IP-mask  auth-method  [auth-options]\n  hostnossl  database  user  IP-address  IP-mask  auth-method  [auth-options]\n  ```\n\n\n\n  **local**：匹配使用Unix域套接字的连接，如果没有此类型的记录，则不允许使用Unix域套接字连接。\n  **host**：匹配使用TCP/IP进行的连接，主机记录匹配SSL或非SSL连接，需要配置listen_addresses。\n  **hostssl**：匹配使用TCP/IP进行的连接，仅限于使用SSL加密进行连接，需要配置ssl参数。\n  **hostnossl**：匹配通过TCP/IP进行的连接，不使用SSL的连接。\n  **database**：匹配的数据库名称，all指定它匹配所有数据库。如果请求的数据库与请求的用户具有相同的名称则可以使用samerole值。复制（replication）不指定数据库，多个数据库可以用逗号分隔。\n  **user**：匹配的数据库用户名，值all指定它匹配所有用户。 可以通过用逗号分隔来提供多个用户名。\n  **address**：匹配的客户端计算机地址，可以包含主机名，IP地址范围。如：172.20.143.89/32、172.20.143.0/24、10.6.0.0/16、:: 1/128。 0.0.0.0/0表示所有IPv4地址，:: 0/0表示所有IPv6地址。要指定单个主机，请使用掩码长度32（对于IPv4）或128（对于IPv6）。all以匹配任何IP地址。\n  **IP-address、IP-mask**：这两个字段可用作IP地址/掩码长度，如：127.0.0.1 255.255.255.255。\n  **auth-method**：指定连接与此记录匹配时要使用的身份验证方法：trust、reject、scram-sha-256、md5、password、gss、sspi、ident、peer、ldap、radius、cert、pam、bsd。\n\n\n\n  ```\n  trust：允许无条件连接，允许任何PostgreSQL用户身份登录，而无需密码或任何其他身份验证。\n  reject：拒绝任何条件连接，这对于从组中“过滤掉”某些主机非常有用。\n  scram-sha-256：执行SCRAM-SHA-256身份验证以验证用户的密码。\n  md5：执行SCRAM-SHA-256或MD5身份验证以验证用户的密码。\n  password：要提供未加密的密码以进行身份验证。由于密码是通过网络以明文形式发送的，因此不应在不受信任的网络上使用。\n  gss：使用GSSAPI对用户进行身份验证，这仅适用于TCP / IP连接。\n  sspi：使用SSPI对用户进行身份验证，这仅适用于Windows。\n  ident：通过联系客户端上的ident服务器获取客户端的操作系统用户名，并检查它是否与请求的数据库用户名匹配。 Ident身份验证只能用于TCP / IP连接。为本地连接指定时，将使用对等身份验证。\n  peer：从操作系统获取客户端的操作系统用户名，并检查它是否与请求的数据库用户名匹配。这仅适用于本地连接。\n  ldap：使用LDAP服务器进行身份验证。\n  radius：使用RADIUS服务器进行身份验证。\n  cert：使用SSL客户端证书进行身份验证。\n  pam：使用操作系统提供的可插入身份验证模块（PAM）服务进行身份验证。\n  bsd：使用操作系统提供的BSD身份验证服务进行身份验证。\n  ```\n\n\n\n  **auth-options**：在auth-method字段之后，可以存在name = value形式的字段，用于指定认证方法的选项。\n  例子：\n\n\n\n  ```\n  # TYPE  DATABASE    USER   ADDRESS   METHOD\n  local          all               all                         trust\n  --在本地允许任何用户无密码登录\n  local          all                all                        peer\n  --操作系统的登录用户和pg的用户是否一致，一致则可以登录\n  local          all                all                        ident\n  --操作系统的登录用户和pg的用户是否一致，一致则可以登录\n  host          all                all    192.168.163.0/24   md5\n  --指定客户端IP访问通过md5身份验证进行登录\n  host          all                all     192.168.163.132/32   password\n  --指定客户端IP通过passwotd身份验证进行登录\n  \n  host    all             all     192.168.54.1/32         reject\n  host    all             all     192.168.0.0/16           ident  \n  host    all             all     127.0.0.1       255.255.255.255     trust\n  ...\n  ```\n\n\n\n  设置完之后可以通过查看表来查看hba：\n\n\n\n  ```\n  zjy=# select * from pg_hba_file_rules;\n   line_number | type  |   database    | user_name |    address    |                 netmask                 | auth_method | options | error \n  -------------+-------+---------------+-----------+---------------+-----------------------------------------+-------------+---------+-------\n            87 | host  | {all}         | {all}     | 192.168.163.0 | 255.255.255.0                           | md5         |         | \n            92 | local | {all}         | {all}     |               |                                         | peer        |         | \n            94 | host  | {all}         | {all}     | 127.0.0.1     | 255.255.255.255                         | md5         |         | \n            96 | host  | {all}         | {all}     | ::1           | ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff | md5         |         | \n            99 | local | {replication} | {all}     |               |                                         | peer        |         | \n           100 | host  | {replication} | {all}     | 127.0.0.1     | 255.255.255.255                         | md5         |         | \n           101 | host  | {replication} | {all}     | ::1           | ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff | md5         |         | \n  ```\n\n\n\n  当然，修改完pg_hba.conf文件之后，需要重新加载配置，不用重启数据库：\n\n  ```\n  postgres=# select pg_reload_conf();\n   pg_reload_conf \n  ----------------\n   t\n  ```\n\n- ### 日常使用\n\n用户权限管理涉及到的东西很多，本文也只是大致说明了一小部分，大部分的还得继续学习。那么现在按照一个正常项目上线的流程来创建一个应用账号为例，看看需要怎么操作。\n\n比如一个项目**zjy**上线：用管理账号来操作\n\n- 创建数据库：\n\n  ```\n  postgres=# create database zjy;\n  CREATE DATABASE\n  ```\n\n- 创建账号：账号和数据库名字保持一致（search_path）\n\n  ```\n  postgres=# create user zjy with password 'zjy';\n  CREATE ROLE\n  ```\n\n- 创建schema：不能用默认的public的schma\n\n  ```\n  postgres=# \\c zjy\n  You are now connected to database \"zjy\" as user \"postgres\".\n  zjy=# create schema zjy;\n  CREATE SCHEMA\n  ```\n\n- 授权：\n\n  [![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0);)\n\n  ```\n  #访问库\n  zjy=# grant connect on database zjy to zjy;\n  GRANT\n  #访问schmea\n  zjy=# grant usage on schema zjy to zjy;\n  GRANT\n  #访问表\n  zjy=# grant select,insert,update,delete on all tables in schema zjy to zjy;\n  GRANT\n  #如果访问自增序列，需要授权\n  zjy=# grant select,update on all sequences in schema zjy to zjy;\n  GRANT\n  \n  注意：上面的授权只对历史的一些对象授权，后期增加的对象是没有权限的，需要给个默认权限\n  \n  #默认表权限\n  zjy=# ALTER DEFAULT PRIVILEGES IN SCHEMA zjy GRANT select,insert,update,delete ON TABLES TO zjy;\n  ALTER DEFAULT PRIVILEGES\n  \n  #默认自增序列权限\n  zjy=# ALTER DEFAULT PRIVILEGES IN SCHEMA zjy GRANT select,update ON sequences TO zjy;\n  ALTER DEFAULT PRIVILEGES\n  ```\n\n- ### 常用命令\n\n1. 查看当前用户javascript:void(0);)\n\n   ```\n   zjy=# \\du\n                                      List of roles\n    Role name |                         Attributes                         | Member of \n   -----------+------------------------------------------------------------+-----------\n    admin     | Superuser, Cannot login                                    | {}\n    postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}\n    zjy       |                                                            | {}\n   \n   zjy=# select * from pg_roles;\n          rolname        | rolsuper | rolinherit | rolcreaterole | rolcreatedb | rolcanlogin | rolreplication | rolconnlimit | rolpassword | rolvaliduntil | rolbypassrls | rolconfig |  oid  \n   ----------------------+----------+------------+---------------+-------------+-------------+----------------+--------------+-------------+---------------+--------------+-----------+-------\n    pg_signal_backend    | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  4200\n    postgres             | t        | t          | t             | t           | t           | t              |           -1 | ********    |               | t            |           |    10\n    admin                | t        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           | 16456\n    pg_read_all_stats    | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  3375\n    zjy                  | f        | t          | f             | f           | t           | f              |           -1 | ********    |               | f            |           | 16729\n    pg_monitor           | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  3373\n    pg_read_all_settings | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  3374\n    pg_stat_scan_tables  | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  3377\n   (8 rows)\n   ```\n\n2. 查看用户权限javascript:void(0);)\n\n   ```\n   zjy=# select * from information_schema.table_privileges where grantee='zjy';\n    grantor  | grantee | table_catalog | table_schema | table_name | privilege_type | is_grantable | with_hierarchy \n   ----------+---------+---------------+--------------+------------+----------------+--------------+----------------\n    postgres | zjy     | zjy           | zjy          | zjy        | INSERT         | NO           | NO\n    postgres | zjy     | zjy           | zjy          | zjy        | SELECT         | NO           | YES\n    postgres | zjy     | zjy           | zjy          | zjy        | UPDATE         | NO           | NO\n    postgres | zjy     | zjy           | zjy          | zjy        | DELETE         | NO           | NO\n    postgres | zjy     | zjy           | zjy          | zjy1       | INSERT         | NO           | NO\n    postgres | zjy     | zjy           | zjy          | zjy1       | SELECT         | NO           | YES\n    postgres | zjy     | zjy           | zjy          | zjy1       | UPDATE         | NO           | NO\n    postgres | zjy     | zjy           | zjy          | zjy1       | DELETE         | NO           | NO\n    postgres | zjy     | zjy           | zjy          | zjy2       | INSERT         | NO           | NO\n    postgres | zjy     | zjy           | zjy          | zjy2       | SELECT         | NO           | YES\n    postgres | zjy     | zjy           | zjy          | zjy2       | UPDATE         | NO           | NO\n    postgres | zjy     | zjy           | zjy          | zjy2       | DELETE         | NO           | NO\n    postgres | zjy     | zjy           | zjy          | zjy3       | INSERT         | NO           | NO\n    postgres | zjy     | zjy           | zjy          | zjy3       | SELECT         | NO           | YES\n    postgres | zjy     | zjy           | zjy          | zjy3       | UPDATE         | NO           | NO\n    postgres | zjy     | zjy           | zjy          | zjy3       | DELETE         | NO           | NO\n   ```\n\n\n","source":"_posts/postgresql/postgresql账号管理.md","raw":"---\ntitle: postgresql账号管理\ndate: 2020-09-16 18:37:46\ntags:\n- linux\n---\n\n**注意：**创建好用户（角色）之后需要连接的话，还需要修改2个权限控制的配置文件（pg_hba.conf、pg_ident.conf）。并且创建用户（user）和创建角色（role）一样，唯一的区别是用户默认可以登录，而创建的角色默认不能登录。创建用户和角色的各个参数选项是一样的。\n\n**Tip：安装PostgreSQL会自动创建一个postgres用户，需要切换到该用户下访问PostgreSQL。**\n\n- [创建用户/角色](https://www.postgresql.org/docs/11/sql-createuser.html)\n\n  ```\n  CREATE USER/ROLE name [ [ WITH ] option [ ... ] ]  : 关键词 USER,ROLE； name 用户或角色名； \n  \n  where option can be:\n  \n        SUPERUSER | NOSUPERUSER      :超级权限，拥有所有权限，默认nosuperuser。\n      | CREATEDB | NOCREATEDB        :建库权限，默认nocreatedb。\n      | CREATEROLE | NOCREATEROLE    :建角色权限，拥有创建、修改、删除角色，默认nocreaterole。\n      | INHERIT | NOINHERIT          :继承权限，可以把除superuser权限继承给其他用户/角色，默认inherit。\n      | LOGIN | NOLOGIN              :登录权限，作为连接的用户，默认nologin，除非是create user（默认登录）。\n      | REPLICATION | NOREPLICATION  :复制权限，用于物理或则逻辑复制（复制和删除slots），默认是noreplication。\n      | BYPASSRLS | NOBYPASSRLS      :安全策略RLS权限，默认nobypassrls。\n  ```\n\n  ```\n      | CONNECTION LIMIT connlimit   :限制用户并发数，默认-1，不限制。正常连接会受限制，后台连接和prepared事务不受限制。\n      | [ ENCRYPTED ] PASSWORD 'password' | PASSWORD NULL :设置密码，密码仅用于有login属性的用户，不使用密码身份验证，则可以省略此选项。可以选择将空密码显式写为PASSWORD NULL。\n                                                           加密方法由配置参数password_encryption确定，密码始终以加密方式存储在系统目录中。\n      | VALID UNTIL 'timestamp'      :密码有效期时间，不设置则用不失效。\n      | IN ROLE role_name [, ...]    :新角色将立即添加为新成员。\n      | IN GROUP role_name [, ...]   :同上\n      | ROLE role_name [, ...]       :ROLE子句列出一个或多个现有角色，这些角色自动添加为新角色的成员。 （这实际上使新角色成为“组”）。\n      | ADMIN role_name [, ...]      :与ROLE类似，但命名角色将添加到新角色WITH ADMIN OPTION，使他们有权将此角色的成员资格授予其他人。\n      | USER role_name [, ...]       :同上\n      | SYSID uid                    :被忽略，但是为向后兼容性而存在。\n  ```\n\n\n\n​      **示例：**\n\n1. 创建不需要密码登陆的用户zjy：\n\n   ```\n   postgres=# CREATE ROLE zjy LOGIN;\n   CREATE ROLE\n   ```\n\n   创建该用户后，还不能直接登录。需要修改 **pg_hba.conf** 文件（后面会对该文件进行说明），加入：\n\n   ①：本地登陆：local   all    all    **trust**②：远程登陆：host   all    all    192.168.163.132/32     **trust**\n\n2. 创建需要密码登陆的用户zjy1：\n\n   ```\n   postgres=# CREATE USER zjy1 WITH PASSWORD 'zjy1';\n   CREATE ROLE\n   ```\n\n   和ROLE的区别是：USER带LOGIN属性。也需要修改 **pg_hba.conf** 文件（后面会对该文件进行说明），加入：\n   host    all     all     192.168.163.132/32    **md5**\n\n3. 创建有时间限制的用户zjy2：\n\n   ```\n   postgres=# CREATE ROLE zjy2 WITH LOGIN PASSWORD 'zjy2' VALID UNTIL '2019-05-30';\n   CREATE ROLE\n   ```\n\n   和2的处理方法一样，修改 **pg_hba.conf** 文件，该用户会的密码在给定的时间之后过期不可用。\n\n4. 创建有创建数据库和管理角色权限的用户admin：\n\n   ```\n   postgres=# CREATE ROLE admin WITH CREATEDB CREATEROLE;\n   CREATE ROLE\n   ```\n\n   注意：拥有创建数据库，角色的用户，也可以删除和修改这些对象。\n\n5. 创建具有超级权限的用户：admin\n\n   ```\n   postgres=# CREATE ROLE admin WITH SUPERUSER LOGIN PASSWORD 'admin';\n   CREATE ROLE\n   ```\n\n6. 创建复制账号：repl \n\n   ```\n   postgres=# CREATE USER repl REPLICATION LOGIN ENCRYPTED PASSWORD 'repl';\n   CREATE ROLE\n   ```\n\n7. 其他说明\n\n\n\n8. \n\n- [授权，定义访问权限](https://www.postgresql.org/docs/11/sql-grant.html)\n\n\n\n  ```\n  GRANT { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }\n      [, ...] | ALL [ PRIVILEGES ] }\n      ON { [ TABLE ] table_name [, ...]\n           | ALL TABLES IN SCHEMA schema_name [, ...] }\n      TO role_specification [, ...] [ WITH GRANT OPTION ]\n  \n  ##单表授权：授权zjy账号可以访问schema为zjy的zjy表\n  grant select,insert,update,delete on zjy.zjy to zjy;\n  ##所有表授权：\n  grant select,insert,update,delete on all tables in schema zjy to zjy;\n  \n  \n  GRANT { { SELECT | INSERT | UPDATE | REFERENCES } ( column_name [, ...] )\n      [, ...] | ALL [ PRIVILEGES ] ( column_name [, ...] ) }\n      ON [ TABLE ] table_name [, ...]\n      TO role_specification [, ...] [ WITH GRANT OPTION ]\n  \n  ##列授权，授权指定列(zjy schema下的zjy表的name列)的更新权限给zjy用户\n  grant update (name) on zjy.zjy to zjy;\n  ##指定列授不同权限，zjy schema下的zjy表，查看更新name、age字段，插入name字段\n  grant select (name,age),update (name,age),insert(name) on zjy.xxx to zjy;\n  \n  \n  GRANT { { USAGE | SELECT | UPDATE }\n      [, ...] | ALL [ PRIVILEGES ] }\n      ON { SEQUENCE sequence_name [, ...]\n           | ALL SEQUENCES IN SCHEMA schema_name [, ...] }\n      TO role_specification [, ...] [ WITH GRANT OPTION ]\n  \n  ##序列（自增键）属性授权，指定zjy schema下的seq_id_seq 给zjy用户\n  grant select,update on sequence zjy.seq_id_seq to zjy;\n  ##序列（自增键）属性授权，给用户zjy授权zjy schema下的所有序列\n  grant select,update on all sequences in schema zjy to zjy;\n  \n  \n  GRANT { { CREATE | CONNECT | TEMPORARY | TEMP } [, ...] | ALL [ PRIVILEGES ] }\n      ON DATABASE database_name [, ...]\n      TO role_specification [, ...] [ WITH GRANT OPTION ]\n  \n  ##连接数据库权限，授权cc用户连接数据库zjy\n  grant connect on database zjy to cc;\n  \n  \n  GRANT { USAGE | ALL [ PRIVILEGES ] }\n      ON DOMAIN domain_name [, ...]\n      TO role_specification [, ...] [ WITH GRANT OPTION ]\n  \n  ##\n  ```\n\n  ```\n  GRANT { USAGE | ALL [ PRIVILEGES ] }\n      ON FOREIGN DATA WRAPPER fdw_name [, ...]\n      TO role_specification [, ...] [ WITH GRANT OPTION ]\n  ```\n\n    \\##\n\n  ```\n  GRANT { USAGE | ALL [ PRIVILEGES ] }\n      ON FOREIGN SERVER server_name [, ...]\n      TO role_specification [, ...] [ WITH GRANT OPTION ]\n  ```\n\n  ```\n  ##\n  ```\n\n  ```\n  GRANT { EXECUTE | ALL [ PRIVILEGES ] }\n      ON { { FUNCTION | PROCEDURE | ROUTINE } routine_name [ ( [ [ argmode ] [ arg_name ] arg_type [, ...] ] ) ] [, ...]\n           | ALL { FUNCTIONS | PROCEDURES | ROUTINES } IN SCHEMA schema_name [, ...] }\n      TO role_specification [, ...] [ WITH GRANT OPTION ]\n  ```\n\n  ```\n  ##\n  \n  \n  GRANT { USAGE | ALL [ PRIVILEGES ] }\n      ON LANGUAGE lang_name [, ...]\n      TO role_specification [, ...] [ WITH GRANT OPTION ]\n  ```\n\n    \\##\n\n  ```\n  GRANT { { SELECT | UPDATE } [, ...] | ALL [ PRIVILEGES ] }\n      ON LARGE OBJECT loid [, ...]\n      TO role_specification [, ...] [ WITH GRANT OPTION ]\n  ```\n\n  ```\n  ##\n  \n  GRANT { { CREATE | USAGE } [, ...] | ALL [ PRIVILEGES ] }\n      ON SCHEMA schema_name [, ...]\n      TO role_specification [, ...] [ WITH GRANT OPTION ]\n  \n  ##连接schema权限，授权cc访问zjy schema权限\n  grant usage on schema zjy to cc;\n  \n  GRANT { CREATE | ALL [ PRIVILEGES ] }\n      ON TABLESPACE tablespace_name [, ...]\n      TO role_specification [, ...] [ WITH GRANT OPTION ]\n  \n  GRANT { USAGE | ALL [ PRIVILEGES ] }\n      ON TYPE type_name [, ...]\n      TO role_specification [, ...] [ WITH GRANT OPTION ]\n  \n  where role_specification can be:\n  \n      [ GROUP ] role_name\n    | PUBLIC\n    | CURRENT_USER\n    | SESSION_USER\n  \n  GRANT role_name [, ...] TO role_name [, ...] [ WITH ADMIN OPTION ]\n  ##把zjy用户的权限授予用户cc。\n  grant zjy to cc;\n  ```\n\n\n\n  [权限说明](https://blog.51cto.com/riverxyz/1880795)：\n\n\n\n  ```\n  SELECT：允许从指定表，视图或序列的任何列或列出的特定列进行SELECT。也允许使用COPY TO。在UPDATE或DELETE中引用现有列值也需要此权限。对于序列，此权限还允许使用currval函数。对于大对象，此权限允许读取对象。\n  \n  INSERT：允许将新行INSERT到指定的表中。如果列出了特定列，则只能在INSERT命令中为这些列分配（因此其他列将接收默认值）。也允许COPY FROM。\n  \n  UPDATE：允许更新指定表的任何列或列出的特定列，需要SELECT权限。\n  \n  DELETE：允许删除指定表中的行，需要SELECT权限。\n  \n  TRUNCATE：允许在指定的表上创建触发器。\n  \n  REFERENCES：允许创建引用指定表或表的指定列的外键约束。\n  \n  TRIGGER：允许在指定的表上创建触发器。 \n  \n  CREATE：对于数据库，允许在数据库中创建新的schema、table、index。\n  \n  CONNECT：允许用户连接到指定的数据库。在连接启动时检查此权限。\n  \n  TEMPORARY、TEMP：允许在使用指定数据库时创建临时表。\n  \n  EXECUTE：允许使用指定的函数或过程以及在函数。\n  \n  USAGE：对于schema，允许访问指定模式中包含的对象；对于sequence，允许使用currval和nextval函数。对于类型和域，允许在创建表，函数和其他模式对象时使用类型或域。\n  \n  ALL PRIVILEGES：一次授予所有可用权限。\n  ```\n\n\n\n- [撤销权限\n  ](https://www.postgresql.org/docs/11/sql-revoke.html)\n\n\n\n  ```\n  REVOKE [ GRANT OPTION FOR ]\n      { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }\n      [, ...] | ALL [ PRIVILEGES ] }\n      ON { [ TABLE ] table_name [, ...]\n           | ALL TABLES IN SCHEMA schema_name [, ...] }\n      FROM { [ GROUP ] role_name | PUBLIC } [, ...]\n      [ CASCADE | RESTRICT ]\n  \n   ##移除用户zjy在schema zjy上所有表的select权限\n   revoke select on all tables in schema zjy from zjy;\n  \n  \n  REVOKE [ GRANT OPTION FOR ]\n      { { SELECT | INSERT | UPDATE | REFERENCES } ( column_name [, ...] )\n      [, ...] | ALL [ PRIVILEGES ] ( column_name [, ...] ) }\n      ON [ TABLE ] table_name [, ...]\n      FROM { [ GROUP ] role_name | PUBLIC } [, ...]\n      [ CASCADE | RESTRICT ]\n  \n   ##移除用户zjy在zjy schema的zjy表的age列的查询权限\n   revoke select (age) on zjy.zjy from zjy;\n  \n  \n  REVOKE [ GRANT OPTION FOR ]\n      { { USAGE | SELECT | UPDATE }\n      [, ...] | ALL [ PRIVILEGES ] }\n      ON { SEQUENCE sequence_name [, ...]\n           | ALL SEQUENCES IN SCHEMA schema_name [, ...] }\n      FROM { [ GROUP ] role_name | PUBLIC } [, ...]\n      [ CASCADE | RESTRICT ]\n  ##序列\n  \n  \n  REVOKE [ GRANT OPTION FOR ]\n      { { CREATE | CONNECT | TEMPORARY | TEMP } [, ...] | ALL [ PRIVILEGES ] }\n      ON DATABASE database_name [, ...]\n      FROM { [ GROUP ] role_name | PUBLIC } [, ...]\n      [ CASCADE | RESTRICT ]\n  ##库\n  \n  \n  REVOKE [ GRANT OPTION FOR ]\n      { USAGE | ALL [ PRIVILEGES ] }\n      ON DOMAIN domain_name [, ...]\n      FROM { [ GROUP ] role_name | PUBLIC } [, ...]\n      [ CASCADE | RESTRICT]\n  ##\n  \n  \n  REVOKE [ GRANT OPTION FOR ]\n      { USAGE | ALL [ PRIVILEGES ] }\n      ON FOREIGN DATA WRAPPER fdw_name [, ...]\n      FROM { [ GROUP ] role_name | PUBLIC } [, ...]\n      [ CASCADE | RESTRICT]\n  ##\n  \n  REVOKE [ GRANT OPTION FOR ]\n      { USAGE | ALL [ PRIVILEGES ] }\n      ON FOREIGN SERVER server_name [, ...]\n      FROM { [ GROUP ] role_name | PUBLIC } [, ...]\n      [ CASCADE | RESTRICT]\n  ##\n  \n  \n  REVOKE [ GRANT OPTION FOR ]\n      { EXECUTE | ALL [ PRIVILEGES ] }\n      ON { { FUNCTION | PROCEDURE | ROUTINE } function_name [ ( [ [ argmode ] [ arg_name ] arg_type [, ...] ] ) ] [, ...]\n           | ALL { FUNCTIONS | PROCEDURES | ROUTINES } IN SCHEMA schema_name [, ...] }\n      FROM { [ GROUP ] role_name | PUBLIC } [, ...]\n      [ CASCADE | RESTRICT ]\n  ##\n  ```\n\n  ```\n  REVOKE [ GRANT OPTION FOR ]\n      { USAGE | ALL [ PRIVILEGES ] }\n      ON LANGUAGE lang_name [, ...]\n      FROM { [ GROUP ] role_name | PUBLIC } [, ...]\n      [ CASCADE | RESTRICT ]\n  ##\n  \n  \n  REVOKE [ GRANT OPTION FOR ]\n      { { SELECT | UPDATE } [, ...] | ALL [ PRIVILEGES ] }\n      ON LARGE OBJECT loid [, ...]\n      FROM { [ GROUP ] role_name | PUBLIC } [, ...]\n      [ CASCADE | RESTRICT ]\n  ##\n  \n  \n  REVOKE [ GRANT OPTION FOR ]\n      { { CREATE | USAGE } [, ...] | ALL [ PRIVILEGES ] }\n      ON SCHEMA schema_name [, ...]\n      FROM { [ GROUP ] role_name | PUBLIC } [, ...]\n      [ CASCADE | RESTRICT ]\n  ##schena权限\n  \n  \n  REVOKE [ GRANT OPTION FOR ]\n      { CREATE | ALL [ PRIVILEGES ] }\n      ON TABLESPACE tablespace_name [, ...]\n      FROM { [ GROUP ] role_name | PUBLIC } [, ...]\n      [ CASCADE | RESTRICT ]\n  ##\n  \n  \n  REVOKE [ GRANT OPTION FOR ]\n      { USAGE | ALL [ PRIVILEGES ] }\n      ON TYPE type_name [, ...]\n      FROM { [ GROUP ] role_name | PUBLIC } [, ...]\n      [ CASCADE | RESTRICT ]\n  ##\n  ```\n\n  ```\n  REVOKE [ ADMIN OPTION FOR ]\n      role_name [, ...] FROM role_name [, ...]\n      [ CASCADE | RESTRICT ]\n  ##\n  ```\n\n\n\n  注意：任何用户对public的schema都有all的权限，为了安全可以禁止用户对public schema\n\n  ```\n  ##移除所有用户（public），superuser除外，对指定DB下的public schema的create 权限。\n  zjy=# revoke  create  on schema public from public;\n  REVOKE\n  ```\n\n- [修改用户属性\n  ](https://www.postgresql.org/docs/11/sql-alteruser.html)\n\n\n  ```\n  ALTER USER role_specification [ WITH ] option [ ... ]\n  \n  where option can be:\n  \n        SUPERUSER | NOSUPERUSER\n      | CREATEDB | NOCREATEDB\n      | CREATEROLE | NOCREATEROLE\n      | INHERIT | NOINHERIT\n      | LOGIN | NOLOGIN\n      | REPLICATION | NOREPLICATION\n      | BYPASSRLS | NOBYPASSRLS\n      | CONNECTION LIMIT connlimit\n      | [ ENCRYPTED ] PASSWORD 'password' | PASSWORD NULL\n      | VALID UNTIL 'timestamp'\n  \n  ALTER USER name RENAME TO new_name\n  \n  ALTER USER { role_specification | ALL } [ IN DATABASE database_name ] SET configuration_parameter { TO | = } { value | DEFAULT }\n  ALTER USER { role_specification | ALL } [ IN DATABASE database_name ] SET configuration_parameter FROM CURRENT\n  ALTER USER { role_specification | ALL } [ IN DATABASE database_name ] RESET configuration_parameter\n  ALTER USER { role_specification | ALL } [ IN DATABASE database_name ] RESET ALL\n  \n  where role_specification can be:\n  \n      role_name\n    | CURRENT_USER\n    | SESSION_USER\n  ```\n\n\n\n  **示例：**     注意：option选项里的用户都可以通过alter role进行修改\n\n- - 修改用户为超级/非超级用户\n\n    ```\n    alter role caocao with superuser/nosuperuser;\n    ```\n\n  - 修改用户为可/不可登陆用户\n\n    ```\n    alter role caocao with nologin/login;\n    ```\n\n  - 修改用户名：\n\n    ```\n    alter role caocao rename to youxing;\n    ```\n\n  - 修改用户密码，移除密码用NULL\n\n    ```\n    alter role youxing with password 'youxing';\n    ```\n\n  - 修改用户参数，该用户登陆后的以该参数为准\n\n    ```\n    alter role zjy in database zjy SET geqo to 0/default;\n    ```\n\n- [控制访问文件](https://www.postgresql.org/docs/11/auth-pg-hba-conf.html) pg_hba.conf[\n  ](https://www.postgresql.org/docs/11/auth-pg-hba-conf.html)\n\n\n\n  ```\n  local      database  user  auth-method  [auth-options]\n  host       database  user  address  auth-method  [auth-options]\n  hostssl    database  user  address  auth-method  [auth-options]\n  hostnossl  database  user  address  auth-method  [auth-options]\n  host       database  user  IP-address  IP-mask  auth-method  [auth-options]\n  hostssl    database  user  IP-address  IP-mask  auth-method  [auth-options]\n  hostnossl  database  user  IP-address  IP-mask  auth-method  [auth-options]\n  ```\n\n\n\n  **local**：匹配使用Unix域套接字的连接，如果没有此类型的记录，则不允许使用Unix域套接字连接。\n  **host**：匹配使用TCP/IP进行的连接，主机记录匹配SSL或非SSL连接，需要配置listen_addresses。\n  **hostssl**：匹配使用TCP/IP进行的连接，仅限于使用SSL加密进行连接，需要配置ssl参数。\n  **hostnossl**：匹配通过TCP/IP进行的连接，不使用SSL的连接。\n  **database**：匹配的数据库名称，all指定它匹配所有数据库。如果请求的数据库与请求的用户具有相同的名称则可以使用samerole值。复制（replication）不指定数据库，多个数据库可以用逗号分隔。\n  **user**：匹配的数据库用户名，值all指定它匹配所有用户。 可以通过用逗号分隔来提供多个用户名。\n  **address**：匹配的客户端计算机地址，可以包含主机名，IP地址范围。如：172.20.143.89/32、172.20.143.0/24、10.6.0.0/16、:: 1/128。 0.0.0.0/0表示所有IPv4地址，:: 0/0表示所有IPv6地址。要指定单个主机，请使用掩码长度32（对于IPv4）或128（对于IPv6）。all以匹配任何IP地址。\n  **IP-address、IP-mask**：这两个字段可用作IP地址/掩码长度，如：127.0.0.1 255.255.255.255。\n  **auth-method**：指定连接与此记录匹配时要使用的身份验证方法：trust、reject、scram-sha-256、md5、password、gss、sspi、ident、peer、ldap、radius、cert、pam、bsd。\n\n\n\n  ```\n  trust：允许无条件连接，允许任何PostgreSQL用户身份登录，而无需密码或任何其他身份验证。\n  reject：拒绝任何条件连接，这对于从组中“过滤掉”某些主机非常有用。\n  scram-sha-256：执行SCRAM-SHA-256身份验证以验证用户的密码。\n  md5：执行SCRAM-SHA-256或MD5身份验证以验证用户的密码。\n  password：要提供未加密的密码以进行身份验证。由于密码是通过网络以明文形式发送的，因此不应在不受信任的网络上使用。\n  gss：使用GSSAPI对用户进行身份验证，这仅适用于TCP / IP连接。\n  sspi：使用SSPI对用户进行身份验证，这仅适用于Windows。\n  ident：通过联系客户端上的ident服务器获取客户端的操作系统用户名，并检查它是否与请求的数据库用户名匹配。 Ident身份验证只能用于TCP / IP连接。为本地连接指定时，将使用对等身份验证。\n  peer：从操作系统获取客户端的操作系统用户名，并检查它是否与请求的数据库用户名匹配。这仅适用于本地连接。\n  ldap：使用LDAP服务器进行身份验证。\n  radius：使用RADIUS服务器进行身份验证。\n  cert：使用SSL客户端证书进行身份验证。\n  pam：使用操作系统提供的可插入身份验证模块（PAM）服务进行身份验证。\n  bsd：使用操作系统提供的BSD身份验证服务进行身份验证。\n  ```\n\n\n\n  **auth-options**：在auth-method字段之后，可以存在name = value形式的字段，用于指定认证方法的选项。\n  例子：\n\n\n\n  ```\n  # TYPE  DATABASE    USER   ADDRESS   METHOD\n  local          all               all                         trust\n  --在本地允许任何用户无密码登录\n  local          all                all                        peer\n  --操作系统的登录用户和pg的用户是否一致，一致则可以登录\n  local          all                all                        ident\n  --操作系统的登录用户和pg的用户是否一致，一致则可以登录\n  host          all                all    192.168.163.0/24   md5\n  --指定客户端IP访问通过md5身份验证进行登录\n  host          all                all     192.168.163.132/32   password\n  --指定客户端IP通过passwotd身份验证进行登录\n  \n  host    all             all     192.168.54.1/32         reject\n  host    all             all     192.168.0.0/16           ident  \n  host    all             all     127.0.0.1       255.255.255.255     trust\n  ...\n  ```\n\n\n\n  设置完之后可以通过查看表来查看hba：\n\n\n\n  ```\n  zjy=# select * from pg_hba_file_rules;\n   line_number | type  |   database    | user_name |    address    |                 netmask                 | auth_method | options | error \n  -------------+-------+---------------+-----------+---------------+-----------------------------------------+-------------+---------+-------\n            87 | host  | {all}         | {all}     | 192.168.163.0 | 255.255.255.0                           | md5         |         | \n            92 | local | {all}         | {all}     |               |                                         | peer        |         | \n            94 | host  | {all}         | {all}     | 127.0.0.1     | 255.255.255.255                         | md5         |         | \n            96 | host  | {all}         | {all}     | ::1           | ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff | md5         |         | \n            99 | local | {replication} | {all}     |               |                                         | peer        |         | \n           100 | host  | {replication} | {all}     | 127.0.0.1     | 255.255.255.255                         | md5         |         | \n           101 | host  | {replication} | {all}     | ::1           | ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff | md5         |         | \n  ```\n\n\n\n  当然，修改完pg_hba.conf文件之后，需要重新加载配置，不用重启数据库：\n\n  ```\n  postgres=# select pg_reload_conf();\n   pg_reload_conf \n  ----------------\n   t\n  ```\n\n- ### 日常使用\n\n用户权限管理涉及到的东西很多，本文也只是大致说明了一小部分，大部分的还得继续学习。那么现在按照一个正常项目上线的流程来创建一个应用账号为例，看看需要怎么操作。\n\n比如一个项目**zjy**上线：用管理账号来操作\n\n- 创建数据库：\n\n  ```\n  postgres=# create database zjy;\n  CREATE DATABASE\n  ```\n\n- 创建账号：账号和数据库名字保持一致（search_path）\n\n  ```\n  postgres=# create user zjy with password 'zjy';\n  CREATE ROLE\n  ```\n\n- 创建schema：不能用默认的public的schma\n\n  ```\n  postgres=# \\c zjy\n  You are now connected to database \"zjy\" as user \"postgres\".\n  zjy=# create schema zjy;\n  CREATE SCHEMA\n  ```\n\n- 授权：\n\n  [![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0);)\n\n  ```\n  #访问库\n  zjy=# grant connect on database zjy to zjy;\n  GRANT\n  #访问schmea\n  zjy=# grant usage on schema zjy to zjy;\n  GRANT\n  #访问表\n  zjy=# grant select,insert,update,delete on all tables in schema zjy to zjy;\n  GRANT\n  #如果访问自增序列，需要授权\n  zjy=# grant select,update on all sequences in schema zjy to zjy;\n  GRANT\n  \n  注意：上面的授权只对历史的一些对象授权，后期增加的对象是没有权限的，需要给个默认权限\n  \n  #默认表权限\n  zjy=# ALTER DEFAULT PRIVILEGES IN SCHEMA zjy GRANT select,insert,update,delete ON TABLES TO zjy;\n  ALTER DEFAULT PRIVILEGES\n  \n  #默认自增序列权限\n  zjy=# ALTER DEFAULT PRIVILEGES IN SCHEMA zjy GRANT select,update ON sequences TO zjy;\n  ALTER DEFAULT PRIVILEGES\n  ```\n\n- ### 常用命令\n\n1. 查看当前用户javascript:void(0);)\n\n   ```\n   zjy=# \\du\n                                      List of roles\n    Role name |                         Attributes                         | Member of \n   -----------+------------------------------------------------------------+-----------\n    admin     | Superuser, Cannot login                                    | {}\n    postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}\n    zjy       |                                                            | {}\n   \n   zjy=# select * from pg_roles;\n          rolname        | rolsuper | rolinherit | rolcreaterole | rolcreatedb | rolcanlogin | rolreplication | rolconnlimit | rolpassword | rolvaliduntil | rolbypassrls | rolconfig |  oid  \n   ----------------------+----------+------------+---------------+-------------+-------------+----------------+--------------+-------------+---------------+--------------+-----------+-------\n    pg_signal_backend    | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  4200\n    postgres             | t        | t          | t             | t           | t           | t              |           -1 | ********    |               | t            |           |    10\n    admin                | t        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           | 16456\n    pg_read_all_stats    | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  3375\n    zjy                  | f        | t          | f             | f           | t           | f              |           -1 | ********    |               | f            |           | 16729\n    pg_monitor           | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  3373\n    pg_read_all_settings | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  3374\n    pg_stat_scan_tables  | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  3377\n   (8 rows)\n   ```\n\n2. 查看用户权限javascript:void(0);)\n\n   ```\n   zjy=# select * from information_schema.table_privileges where grantee='zjy';\n    grantor  | grantee | table_catalog | table_schema | table_name | privilege_type | is_grantable | with_hierarchy \n   ----------+---------+---------------+--------------+------------+----------------+--------------+----------------\n    postgres | zjy     | zjy           | zjy          | zjy        | INSERT         | NO           | NO\n    postgres | zjy     | zjy           | zjy          | zjy        | SELECT         | NO           | YES\n    postgres | zjy     | zjy           | zjy          | zjy        | UPDATE         | NO           | NO\n    postgres | zjy     | zjy           | zjy          | zjy        | DELETE         | NO           | NO\n    postgres | zjy     | zjy           | zjy          | zjy1       | INSERT         | NO           | NO\n    postgres | zjy     | zjy           | zjy          | zjy1       | SELECT         | NO           | YES\n    postgres | zjy     | zjy           | zjy          | zjy1       | UPDATE         | NO           | NO\n    postgres | zjy     | zjy           | zjy          | zjy1       | DELETE         | NO           | NO\n    postgres | zjy     | zjy           | zjy          | zjy2       | INSERT         | NO           | NO\n    postgres | zjy     | zjy           | zjy          | zjy2       | SELECT         | NO           | YES\n    postgres | zjy     | zjy           | zjy          | zjy2       | UPDATE         | NO           | NO\n    postgres | zjy     | zjy           | zjy          | zjy2       | DELETE         | NO           | NO\n    postgres | zjy     | zjy           | zjy          | zjy3       | INSERT         | NO           | NO\n    postgres | zjy     | zjy           | zjy          | zjy3       | SELECT         | NO           | YES\n    postgres | zjy     | zjy           | zjy          | zjy3       | UPDATE         | NO           | NO\n    postgres | zjy     | zjy           | zjy          | zjy3       | DELETE         | NO           | NO\n   ```\n\n\n","slug":"postgresql/postgresql账号管理","published":1,"updated":"2020-09-20T03:22:55.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgepblpf007b4tjef2khim8u","content":"<p><strong>注意：</strong>创建好用户（角色）之后需要连接的话，还需要修改2个权限控制的配置文件（pg_hba.conf、pg_ident.conf）。并且创建用户（user）和创建角色（role）一样，唯一的区别是用户默认可以登录，而创建的角色默认不能登录。创建用户和角色的各个参数选项是一样的。</p>\n<p><strong>Tip：安装PostgreSQL会自动创建一个postgres用户，需要切换到该用户下访问PostgreSQL。</strong></p>\n<ul>\n<li><p><a href=\"https://www.postgresql.org/docs/11/sql-createuser.html\" target=\"_blank\" rel=\"noopener\">创建用户/角色</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER/ROLE name [ [ WITH ] option [ ... ] ]  : 关键词 USER,ROLE； name 用户或角色名； </span><br><span class=\"line\"></span><br><span class=\"line\">where option can be:</span><br><span class=\"line\"></span><br><span class=\"line\">      SUPERUSER | NOSUPERUSER      :超级权限，拥有所有权限，默认nosuperuser。</span><br><span class=\"line\">    | CREATEDB | NOCREATEDB        :建库权限，默认nocreatedb。</span><br><span class=\"line\">    | CREATEROLE | NOCREATEROLE    :建角色权限，拥有创建、修改、删除角色，默认nocreaterole。</span><br><span class=\"line\">    | INHERIT | NOINHERIT          :继承权限，可以把除superuser权限继承给其他用户/角色，默认inherit。</span><br><span class=\"line\">    | LOGIN | NOLOGIN              :登录权限，作为连接的用户，默认nologin，除非是create user（默认登录）。</span><br><span class=\"line\">    | REPLICATION | NOREPLICATION  :复制权限，用于物理或则逻辑复制（复制和删除slots），默认是noreplication。</span><br><span class=\"line\">    | BYPASSRLS | NOBYPASSRLS      :安全策略RLS权限，默认nobypassrls。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| CONNECTION LIMIT connlimit   :限制用户并发数，默认-1，不限制。正常连接会受限制，后台连接和prepared事务不受限制。</span><br><span class=\"line\">| [ ENCRYPTED ] PASSWORD &apos;password&apos; | PASSWORD NULL :设置密码，密码仅用于有login属性的用户，不使用密码身份验证，则可以省略此选项。可以选择将空密码显式写为PASSWORD NULL。</span><br><span class=\"line\">                                                     加密方法由配置参数password_encryption确定，密码始终以加密方式存储在系统目录中。</span><br><span class=\"line\">| VALID UNTIL &apos;timestamp&apos;      :密码有效期时间，不设置则用不失效。</span><br><span class=\"line\">| IN ROLE role_name [, ...]    :新角色将立即添加为新成员。</span><br><span class=\"line\">| IN GROUP role_name [, ...]   :同上</span><br><span class=\"line\">| ROLE role_name [, ...]       :ROLE子句列出一个或多个现有角色，这些角色自动添加为新角色的成员。 （这实际上使新角色成为“组”）。</span><br><span class=\"line\">| ADMIN role_name [, ...]      :与ROLE类似，但命名角色将添加到新角色WITH ADMIN OPTION，使他们有权将此角色的成员资格授予其他人。</span><br><span class=\"line\">| USER role_name [, ...]       :同上</span><br><span class=\"line\">| SYSID uid                    :被忽略，但是为向后兼容性而存在。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>​      <strong>示例：</strong></p>\n<ol>\n<li><p>创建不需要密码登陆的用户zjy：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=# CREATE ROLE zjy LOGIN;</span><br><span class=\"line\">CREATE ROLE</span><br></pre></td></tr></table></figure>\n<p>创建该用户后，还不能直接登录。需要修改 <strong>pg_hba.conf</strong> 文件（后面会对该文件进行说明），加入：</p>\n<p>①：本地登陆：local   all    all    <strong>trust</strong>②：远程登陆：host   all    all    192.168.163.132/32     <strong>trust</strong></p>\n</li>\n<li><p>创建需要密码登陆的用户zjy1：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=# CREATE USER zjy1 WITH PASSWORD &apos;zjy1&apos;;</span><br><span class=\"line\">CREATE ROLE</span><br></pre></td></tr></table></figure>\n<p>和ROLE的区别是：USER带LOGIN属性。也需要修改 <strong>pg_hba.conf</strong> 文件（后面会对该文件进行说明），加入：<br>host    all     all     192.168.163.132/32    <strong>md5</strong></p>\n</li>\n<li><p>创建有时间限制的用户zjy2：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=# CREATE ROLE zjy2 WITH LOGIN PASSWORD &apos;zjy2&apos; VALID UNTIL &apos;2019-05-30&apos;;</span><br><span class=\"line\">CREATE ROLE</span><br></pre></td></tr></table></figure>\n<p>和2的处理方法一样，修改 <strong>pg_hba.conf</strong> 文件，该用户会的密码在给定的时间之后过期不可用。</p>\n</li>\n<li><p>创建有创建数据库和管理角色权限的用户admin：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=# CREATE ROLE admin WITH CREATEDB CREATEROLE;</span><br><span class=\"line\">CREATE ROLE</span><br></pre></td></tr></table></figure>\n<p>注意：拥有创建数据库，角色的用户，也可以删除和修改这些对象。</p>\n</li>\n<li><p>创建具有超级权限的用户：admin</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=# CREATE ROLE admin WITH SUPERUSER LOGIN PASSWORD &apos;admin&apos;;</span><br><span class=\"line\">CREATE ROLE</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建复制账号：repl </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=# CREATE USER repl REPLICATION LOGIN ENCRYPTED PASSWORD &apos;repl&apos;;</span><br><span class=\"line\">CREATE ROLE</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>其他说明</p>\n</li>\n</ol>\n<ol start=\"8\">\n<li></li>\n</ol>\n<ul>\n<li><a href=\"https://www.postgresql.org/docs/11/sql-grant.html\" target=\"_blank\" rel=\"noopener\">授权，定义访问权限</a></li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT &#123; &#123; SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER &#125;</span><br><span class=\"line\">    [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON &#123; [ TABLE ] table_name [, ...]</span><br><span class=\"line\">         | ALL TABLES IN SCHEMA schema_name [, ...] &#125;</span><br><span class=\"line\">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br><span class=\"line\"></span><br><span class=\"line\">##单表授权：授权zjy账号可以访问schema为zjy的zjy表</span><br><span class=\"line\">grant select,insert,update,delete on zjy.zjy to zjy;</span><br><span class=\"line\">##所有表授权：</span><br><span class=\"line\">grant select,insert,update,delete on all tables in schema zjy to zjy;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">GRANT &#123; &#123; SELECT | INSERT | UPDATE | REFERENCES &#125; ( column_name [, ...] )</span><br><span class=\"line\">    [, ...] | ALL [ PRIVILEGES ] ( column_name [, ...] ) &#125;</span><br><span class=\"line\">    ON [ TABLE ] table_name [, ...]</span><br><span class=\"line\">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br><span class=\"line\"></span><br><span class=\"line\">##列授权，授权指定列(zjy schema下的zjy表的name列)的更新权限给zjy用户</span><br><span class=\"line\">grant update (name) on zjy.zjy to zjy;</span><br><span class=\"line\">##指定列授不同权限，zjy schema下的zjy表，查看更新name、age字段，插入name字段</span><br><span class=\"line\">grant select (name,age),update (name,age),insert(name) on zjy.xxx to zjy;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">GRANT &#123; &#123; USAGE | SELECT | UPDATE &#125;</span><br><span class=\"line\">    [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON &#123; SEQUENCE sequence_name [, ...]</span><br><span class=\"line\">         | ALL SEQUENCES IN SCHEMA schema_name [, ...] &#125;</span><br><span class=\"line\">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br><span class=\"line\"></span><br><span class=\"line\">##序列（自增键）属性授权，指定zjy schema下的seq_id_seq 给zjy用户</span><br><span class=\"line\">grant select,update on sequence zjy.seq_id_seq to zjy;</span><br><span class=\"line\">##序列（自增键）属性授权，给用户zjy授权zjy schema下的所有序列</span><br><span class=\"line\">grant select,update on all sequences in schema zjy to zjy;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">GRANT &#123; &#123; CREATE | CONNECT | TEMPORARY | TEMP &#125; [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON DATABASE database_name [, ...]</span><br><span class=\"line\">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br><span class=\"line\"></span><br><span class=\"line\">##连接数据库权限，授权cc用户连接数据库zjy</span><br><span class=\"line\">grant connect on database zjy to cc;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">GRANT &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON DOMAIN domain_name [, ...]</span><br><span class=\"line\">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br><span class=\"line\"></span><br><span class=\"line\">##</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON FOREIGN DATA WRAPPER fdw_name [, ...]</span><br><span class=\"line\">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br></pre></td></tr></table></figure>\n<pre><code>\\##\n</code></pre>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON FOREIGN SERVER server_name [, ...]</span><br><span class=\"line\">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT &#123; EXECUTE | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON &#123; &#123; FUNCTION | PROCEDURE | ROUTINE &#125; routine_name [ ( [ [ argmode ] [ arg_name ] arg_type [, ...] ] ) ] [, ...]</span><br><span class=\"line\">         | ALL &#123; FUNCTIONS | PROCEDURES | ROUTINES &#125; IN SCHEMA schema_name [, ...] &#125;</span><br><span class=\"line\">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">GRANT &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON LANGUAGE lang_name [, ...]</span><br><span class=\"line\">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br></pre></td></tr></table></figure>\n<pre><code>\\##\n</code></pre>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT &#123; &#123; SELECT | UPDATE &#125; [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON LARGE OBJECT loid [, ...]</span><br><span class=\"line\">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##</span><br><span class=\"line\"></span><br><span class=\"line\">GRANT &#123; &#123; CREATE | USAGE &#125; [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON SCHEMA schema_name [, ...]</span><br><span class=\"line\">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br><span class=\"line\"></span><br><span class=\"line\">##连接schema权限，授权cc访问zjy schema权限</span><br><span class=\"line\">grant usage on schema zjy to cc;</span><br><span class=\"line\"></span><br><span class=\"line\">GRANT &#123; CREATE | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON TABLESPACE tablespace_name [, ...]</span><br><span class=\"line\">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br><span class=\"line\"></span><br><span class=\"line\">GRANT &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON TYPE type_name [, ...]</span><br><span class=\"line\">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br><span class=\"line\"></span><br><span class=\"line\">where role_specification can be:</span><br><span class=\"line\"></span><br><span class=\"line\">    [ GROUP ] role_name</span><br><span class=\"line\">  | PUBLIC</span><br><span class=\"line\">  | CURRENT_USER</span><br><span class=\"line\">  | SESSION_USER</span><br><span class=\"line\"></span><br><span class=\"line\">GRANT role_name [, ...] TO role_name [, ...] [ WITH ADMIN OPTION ]</span><br><span class=\"line\">##把zjy用户的权限授予用户cc。</span><br><span class=\"line\">grant zjy to cc;</span><br></pre></td></tr></table></figure>\n<p>  <a href=\"https://blog.51cto.com/riverxyz/1880795\" target=\"_blank\" rel=\"noopener\">权限说明</a>：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT：允许从指定表，视图或序列的任何列或列出的特定列进行SELECT。也允许使用COPY TO。在UPDATE或DELETE中引用现有列值也需要此权限。对于序列，此权限还允许使用currval函数。对于大对象，此权限允许读取对象。</span><br><span class=\"line\"></span><br><span class=\"line\">INSERT：允许将新行INSERT到指定的表中。如果列出了特定列，则只能在INSERT命令中为这些列分配（因此其他列将接收默认值）。也允许COPY FROM。</span><br><span class=\"line\"></span><br><span class=\"line\">UPDATE：允许更新指定表的任何列或列出的特定列，需要SELECT权限。</span><br><span class=\"line\"></span><br><span class=\"line\">DELETE：允许删除指定表中的行，需要SELECT权限。</span><br><span class=\"line\"></span><br><span class=\"line\">TRUNCATE：允许在指定的表上创建触发器。</span><br><span class=\"line\"></span><br><span class=\"line\">REFERENCES：允许创建引用指定表或表的指定列的外键约束。</span><br><span class=\"line\"></span><br><span class=\"line\">TRIGGER：允许在指定的表上创建触发器。 </span><br><span class=\"line\"></span><br><span class=\"line\">CREATE：对于数据库，允许在数据库中创建新的schema、table、index。</span><br><span class=\"line\"></span><br><span class=\"line\">CONNECT：允许用户连接到指定的数据库。在连接启动时检查此权限。</span><br><span class=\"line\"></span><br><span class=\"line\">TEMPORARY、TEMP：允许在使用指定数据库时创建临时表。</span><br><span class=\"line\"></span><br><span class=\"line\">EXECUTE：允许使用指定的函数或过程以及在函数。</span><br><span class=\"line\"></span><br><span class=\"line\">USAGE：对于schema，允许访问指定模式中包含的对象；对于sequence，允许使用currval和nextval函数。对于类型和域，允许在创建表，函数和其他模式对象时使用类型或域。</span><br><span class=\"line\"></span><br><span class=\"line\">ALL PRIVILEGES：一次授予所有可用权限。</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://www.postgresql.org/docs/11/sql-revoke.html\" target=\"_blank\" rel=\"noopener\">撤销权限\n</a></li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REVOKE [ GRANT OPTION FOR ]</span><br><span class=\"line\">    &#123; &#123; SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER &#125;</span><br><span class=\"line\">    [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON &#123; [ TABLE ] table_name [, ...]</span><br><span class=\"line\">         | ALL TABLES IN SCHEMA schema_name [, ...] &#125;</span><br><span class=\"line\">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class=\"line\">    [ CASCADE | RESTRICT ]</span><br><span class=\"line\"></span><br><span class=\"line\"> ##移除用户zjy在schema zjy上所有表的select权限</span><br><span class=\"line\"> revoke select on all tables in schema zjy from zjy;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">REVOKE [ GRANT OPTION FOR ]</span><br><span class=\"line\">    &#123; &#123; SELECT | INSERT | UPDATE | REFERENCES &#125; ( column_name [, ...] )</span><br><span class=\"line\">    [, ...] | ALL [ PRIVILEGES ] ( column_name [, ...] ) &#125;</span><br><span class=\"line\">    ON [ TABLE ] table_name [, ...]</span><br><span class=\"line\">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class=\"line\">    [ CASCADE | RESTRICT ]</span><br><span class=\"line\"></span><br><span class=\"line\"> ##移除用户zjy在zjy schema的zjy表的age列的查询权限</span><br><span class=\"line\"> revoke select (age) on zjy.zjy from zjy;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">REVOKE [ GRANT OPTION FOR ]</span><br><span class=\"line\">    &#123; &#123; USAGE | SELECT | UPDATE &#125;</span><br><span class=\"line\">    [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON &#123; SEQUENCE sequence_name [, ...]</span><br><span class=\"line\">         | ALL SEQUENCES IN SCHEMA schema_name [, ...] &#125;</span><br><span class=\"line\">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class=\"line\">    [ CASCADE | RESTRICT ]</span><br><span class=\"line\">##序列</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">REVOKE [ GRANT OPTION FOR ]</span><br><span class=\"line\">    &#123; &#123; CREATE | CONNECT | TEMPORARY | TEMP &#125; [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON DATABASE database_name [, ...]</span><br><span class=\"line\">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class=\"line\">    [ CASCADE | RESTRICT ]</span><br><span class=\"line\">##库</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">REVOKE [ GRANT OPTION FOR ]</span><br><span class=\"line\">    &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON DOMAIN domain_name [, ...]</span><br><span class=\"line\">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class=\"line\">    [ CASCADE | RESTRICT]</span><br><span class=\"line\">##</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">REVOKE [ GRANT OPTION FOR ]</span><br><span class=\"line\">    &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON FOREIGN DATA WRAPPER fdw_name [, ...]</span><br><span class=\"line\">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class=\"line\">    [ CASCADE | RESTRICT]</span><br><span class=\"line\">##</span><br><span class=\"line\"></span><br><span class=\"line\">REVOKE [ GRANT OPTION FOR ]</span><br><span class=\"line\">    &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON FOREIGN SERVER server_name [, ...]</span><br><span class=\"line\">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class=\"line\">    [ CASCADE | RESTRICT]</span><br><span class=\"line\">##</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">REVOKE [ GRANT OPTION FOR ]</span><br><span class=\"line\">    &#123; EXECUTE | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON &#123; &#123; FUNCTION | PROCEDURE | ROUTINE &#125; function_name [ ( [ [ argmode ] [ arg_name ] arg_type [, ...] ] ) ] [, ...]</span><br><span class=\"line\">         | ALL &#123; FUNCTIONS | PROCEDURES | ROUTINES &#125; IN SCHEMA schema_name [, ...] &#125;</span><br><span class=\"line\">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class=\"line\">    [ CASCADE | RESTRICT ]</span><br><span class=\"line\">##</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REVOKE [ GRANT OPTION FOR ]</span><br><span class=\"line\">    &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON LANGUAGE lang_name [, ...]</span><br><span class=\"line\">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class=\"line\">    [ CASCADE | RESTRICT ]</span><br><span class=\"line\">##</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">REVOKE [ GRANT OPTION FOR ]</span><br><span class=\"line\">    &#123; &#123; SELECT | UPDATE &#125; [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON LARGE OBJECT loid [, ...]</span><br><span class=\"line\">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class=\"line\">    [ CASCADE | RESTRICT ]</span><br><span class=\"line\">##</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">REVOKE [ GRANT OPTION FOR ]</span><br><span class=\"line\">    &#123; &#123; CREATE | USAGE &#125; [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON SCHEMA schema_name [, ...]</span><br><span class=\"line\">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class=\"line\">    [ CASCADE | RESTRICT ]</span><br><span class=\"line\">##schena权限</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">REVOKE [ GRANT OPTION FOR ]</span><br><span class=\"line\">    &#123; CREATE | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON TABLESPACE tablespace_name [, ...]</span><br><span class=\"line\">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class=\"line\">    [ CASCADE | RESTRICT ]</span><br><span class=\"line\">##</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">REVOKE [ GRANT OPTION FOR ]</span><br><span class=\"line\">    &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON TYPE type_name [, ...]</span><br><span class=\"line\">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class=\"line\">    [ CASCADE | RESTRICT ]</span><br><span class=\"line\">##</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REVOKE [ ADMIN OPTION FOR ]</span><br><span class=\"line\">    role_name [, ...] FROM role_name [, ...]</span><br><span class=\"line\">    [ CASCADE | RESTRICT ]</span><br><span class=\"line\">##</span><br></pre></td></tr></table></figure>\n<p>  注意：任何用户对public的schema都有all的权限，为了安全可以禁止用户对public schema</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##移除所有用户（public），superuser除外，对指定DB下的public schema的create 权限。</span><br><span class=\"line\">zjy=# revoke  create  on schema public from public;</span><br><span class=\"line\">REVOKE</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://www.postgresql.org/docs/11/sql-alteruser.html\" target=\"_blank\" rel=\"noopener\">修改用户属性\n</a></li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER role_specification [ WITH ] option [ ... ]</span><br><span class=\"line\"></span><br><span class=\"line\">where option can be:</span><br><span class=\"line\"></span><br><span class=\"line\">      SUPERUSER | NOSUPERUSER</span><br><span class=\"line\">    | CREATEDB | NOCREATEDB</span><br><span class=\"line\">    | CREATEROLE | NOCREATEROLE</span><br><span class=\"line\">    | INHERIT | NOINHERIT</span><br><span class=\"line\">    | LOGIN | NOLOGIN</span><br><span class=\"line\">    | REPLICATION | NOREPLICATION</span><br><span class=\"line\">    | BYPASSRLS | NOBYPASSRLS</span><br><span class=\"line\">    | CONNECTION LIMIT connlimit</span><br><span class=\"line\">    | [ ENCRYPTED ] PASSWORD &apos;password&apos; | PASSWORD NULL</span><br><span class=\"line\">    | VALID UNTIL &apos;timestamp&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER USER name RENAME TO new_name</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER USER &#123; role_specification | ALL &#125; [ IN DATABASE database_name ] SET configuration_parameter &#123; TO | = &#125; &#123; value | DEFAULT &#125;</span><br><span class=\"line\">ALTER USER &#123; role_specification | ALL &#125; [ IN DATABASE database_name ] SET configuration_parameter FROM CURRENT</span><br><span class=\"line\">ALTER USER &#123; role_specification | ALL &#125; [ IN DATABASE database_name ] RESET configuration_parameter</span><br><span class=\"line\">ALTER USER &#123; role_specification | ALL &#125; [ IN DATABASE database_name ] RESET ALL</span><br><span class=\"line\"></span><br><span class=\"line\">where role_specification can be:</span><br><span class=\"line\"></span><br><span class=\"line\">    role_name</span><br><span class=\"line\">  | CURRENT_USER</span><br><span class=\"line\">  | SESSION_USER</span><br></pre></td></tr></table></figure>\n<p>  <strong>示例：</strong>     注意：option选项里的用户都可以通过alter role进行修改</p>\n<ul>\n<li><ul>\n<li><p>修改用户为超级/非超级用户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter role caocao with superuser/nosuperuser;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改用户为可/不可登陆用户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter role caocao with nologin/login;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改用户名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter role caocao rename to youxing;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改用户密码，移除密码用NULL</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter role youxing with password &apos;youxing&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改用户参数，该用户登陆后的以该参数为准</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter role zjy in database zjy SET geqo to 0/default;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><a href=\"https://www.postgresql.org/docs/11/auth-pg-hba-conf.html\" target=\"_blank\" rel=\"noopener\">控制访问文件</a> pg_hba.conf<a href=\"https://www.postgresql.org/docs/11/auth-pg-hba-conf.html\" target=\"_blank\" rel=\"noopener\">\n</a></p>\n</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local      database  user  auth-method  [auth-options]</span><br><span class=\"line\">host       database  user  address  auth-method  [auth-options]</span><br><span class=\"line\">hostssl    database  user  address  auth-method  [auth-options]</span><br><span class=\"line\">hostnossl  database  user  address  auth-method  [auth-options]</span><br><span class=\"line\">host       database  user  IP-address  IP-mask  auth-method  [auth-options]</span><br><span class=\"line\">hostssl    database  user  IP-address  IP-mask  auth-method  [auth-options]</span><br><span class=\"line\">hostnossl  database  user  IP-address  IP-mask  auth-method  [auth-options]</span><br></pre></td></tr></table></figure>\n<p>  <strong>local</strong>：匹配使用Unix域套接字的连接，如果没有此类型的记录，则不允许使用Unix域套接字连接。<br>  <strong>host</strong>：匹配使用TCP/IP进行的连接，主机记录匹配SSL或非SSL连接，需要配置listen_addresses。<br>  <strong>hostssl</strong>：匹配使用TCP/IP进行的连接，仅限于使用SSL加密进行连接，需要配置ssl参数。<br>  <strong>hostnossl</strong>：匹配通过TCP/IP进行的连接，不使用SSL的连接。<br>  <strong>database</strong>：匹配的数据库名称，all指定它匹配所有数据库。如果请求的数据库与请求的用户具有相同的名称则可以使用samerole值。复制（replication）不指定数据库，多个数据库可以用逗号分隔。<br>  <strong>user</strong>：匹配的数据库用户名，值all指定它匹配所有用户。 可以通过用逗号分隔来提供多个用户名。<br>  <strong>address</strong>：匹配的客户端计算机地址，可以包含主机名，IP地址范围。如：172.20.143.89/32、172.20.143.0/24、10.6.0.0/16、:: 1/128。 0.0.0.0/0表示所有IPv4地址，:: 0/0表示所有IPv6地址。要指定单个主机，请使用掩码长度32（对于IPv4）或128（对于IPv6）。all以匹配任何IP地址。<br>  <strong>IP-address、IP-mask</strong>：这两个字段可用作IP地址/掩码长度，如：127.0.0.1 255.255.255.255。<br>  <strong>auth-method</strong>：指定连接与此记录匹配时要使用的身份验证方法：trust、reject、scram-sha-256、md5、password、gss、sspi、ident、peer、ldap、radius、cert、pam、bsd。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trust：允许无条件连接，允许任何PostgreSQL用户身份登录，而无需密码或任何其他身份验证。</span><br><span class=\"line\">reject：拒绝任何条件连接，这对于从组中“过滤掉”某些主机非常有用。</span><br><span class=\"line\">scram-sha-256：执行SCRAM-SHA-256身份验证以验证用户的密码。</span><br><span class=\"line\">md5：执行SCRAM-SHA-256或MD5身份验证以验证用户的密码。</span><br><span class=\"line\">password：要提供未加密的密码以进行身份验证。由于密码是通过网络以明文形式发送的，因此不应在不受信任的网络上使用。</span><br><span class=\"line\">gss：使用GSSAPI对用户进行身份验证，这仅适用于TCP / IP连接。</span><br><span class=\"line\">sspi：使用SSPI对用户进行身份验证，这仅适用于Windows。</span><br><span class=\"line\">ident：通过联系客户端上的ident服务器获取客户端的操作系统用户名，并检查它是否与请求的数据库用户名匹配。 Ident身份验证只能用于TCP / IP连接。为本地连接指定时，将使用对等身份验证。</span><br><span class=\"line\">peer：从操作系统获取客户端的操作系统用户名，并检查它是否与请求的数据库用户名匹配。这仅适用于本地连接。</span><br><span class=\"line\">ldap：使用LDAP服务器进行身份验证。</span><br><span class=\"line\">radius：使用RADIUS服务器进行身份验证。</span><br><span class=\"line\">cert：使用SSL客户端证书进行身份验证。</span><br><span class=\"line\">pam：使用操作系统提供的可插入身份验证模块（PAM）服务进行身份验证。</span><br><span class=\"line\">bsd：使用操作系统提供的BSD身份验证服务进行身份验证。</span><br></pre></td></tr></table></figure>\n<p>  <strong>auth-options</strong>：在auth-method字段之后，可以存在name = value形式的字段，用于指定认证方法的选项。<br>  例子：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># TYPE  DATABASE    USER   ADDRESS   METHOD</span><br><span class=\"line\">local          all               all                         trust</span><br><span class=\"line\">--在本地允许任何用户无密码登录</span><br><span class=\"line\">local          all                all                        peer</span><br><span class=\"line\">--操作系统的登录用户和pg的用户是否一致，一致则可以登录</span><br><span class=\"line\">local          all                all                        ident</span><br><span class=\"line\">--操作系统的登录用户和pg的用户是否一致，一致则可以登录</span><br><span class=\"line\">host          all                all    192.168.163.0/24   md5</span><br><span class=\"line\">--指定客户端IP访问通过md5身份验证进行登录</span><br><span class=\"line\">host          all                all     192.168.163.132/32   password</span><br><span class=\"line\">--指定客户端IP通过passwotd身份验证进行登录</span><br><span class=\"line\"></span><br><span class=\"line\">host    all             all     192.168.54.1/32         reject</span><br><span class=\"line\">host    all             all     192.168.0.0/16           ident  </span><br><span class=\"line\">host    all             all     127.0.0.1       255.255.255.255     trust</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>  设置完之后可以通过查看表来查看hba：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zjy=# select * from pg_hba_file_rules;</span><br><span class=\"line\"> line_number | type  |   database    | user_name |    address    |                 netmask                 | auth_method | options | error </span><br><span class=\"line\">-------------+-------+---------------+-----------+---------------+-----------------------------------------+-------------+---------+-------</span><br><span class=\"line\">          87 | host  | &#123;all&#125;         | &#123;all&#125;     | 192.168.163.0 | 255.255.255.0                           | md5         |         | </span><br><span class=\"line\">          92 | local | &#123;all&#125;         | &#123;all&#125;     |               |                                         | peer        |         | </span><br><span class=\"line\">          94 | host  | &#123;all&#125;         | &#123;all&#125;     | 127.0.0.1     | 255.255.255.255                         | md5         |         | </span><br><span class=\"line\">          96 | host  | &#123;all&#125;         | &#123;all&#125;     | ::1           | ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff | md5         |         | </span><br><span class=\"line\">          99 | local | &#123;replication&#125; | &#123;all&#125;     |               |                                         | peer        |         | </span><br><span class=\"line\">         100 | host  | &#123;replication&#125; | &#123;all&#125;     | 127.0.0.1     | 255.255.255.255                         | md5         |         | </span><br><span class=\"line\">         101 | host  | &#123;replication&#125; | &#123;all&#125;     | ::1           | ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff | md5         |         |</span><br></pre></td></tr></table></figure>\n<p>  当然，修改完pg_hba.conf文件之后，需要重新加载配置，不用重启数据库：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=# select pg_reload_conf();</span><br><span class=\"line\"> pg_reload_conf </span><br><span class=\"line\">----------------</span><br><span class=\"line\"> t</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h3 id=\"日常使用\"><a href=\"#日常使用\" class=\"headerlink\" title=\"日常使用\"></a>日常使用</h3></li>\n</ul>\n<p>用户权限管理涉及到的东西很多，本文也只是大致说明了一小部分，大部分的还得继续学习。那么现在按照一个正常项目上线的流程来创建一个应用账号为例，看看需要怎么操作。</p>\n<p>比如一个项目<strong>zjy</strong>上线：用管理账号来操作</p>\n<ul>\n<li><p>创建数据库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=# create database zjy;</span><br><span class=\"line\">CREATE DATABASE</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建账号：账号和数据库名字保持一致（search_path）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=# create user zjy with password &apos;zjy&apos;;</span><br><span class=\"line\">CREATE ROLE</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建schema：不能用默认的public的schma</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=# \\c zjy</span><br><span class=\"line\">You are now connected to database &quot;zjy&quot; as user &quot;postgres&quot;.</span><br><span class=\"line\">zjy=# create schema zjy;</span><br><span class=\"line\">CREATE SCHEMA</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>授权：</p>\n<p>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"javascript:void(0);\" alt=\"复制代码](https://common.cnblogs.com/images/copycode.gif)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">复制代码](https://common.cnblogs.com/images/copycode.gif)</div>\n            </figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#访问库</span><br><span class=\"line\">zjy=# grant connect on database zjy to zjy;</span><br><span class=\"line\">GRANT</span><br><span class=\"line\">#访问schmea</span><br><span class=\"line\">zjy=# grant usage on schema zjy to zjy;</span><br><span class=\"line\">GRANT</span><br><span class=\"line\">#访问表</span><br><span class=\"line\">zjy=# grant select,insert,update,delete on all tables in schema zjy to zjy;</span><br><span class=\"line\">GRANT</span><br><span class=\"line\">#如果访问自增序列，需要授权</span><br><span class=\"line\">zjy=# grant select,update on all sequences in schema zjy to zjy;</span><br><span class=\"line\">GRANT</span><br><span class=\"line\"></span><br><span class=\"line\">注意：上面的授权只对历史的一些对象授权，后期增加的对象是没有权限的，需要给个默认权限</span><br><span class=\"line\"></span><br><span class=\"line\">#默认表权限</span><br><span class=\"line\">zjy=# ALTER DEFAULT PRIVILEGES IN SCHEMA zjy GRANT select,insert,update,delete ON TABLES TO zjy;</span><br><span class=\"line\">ALTER DEFAULT PRIVILEGES</span><br><span class=\"line\"></span><br><span class=\"line\">#默认自增序列权限</span><br><span class=\"line\">zjy=# ALTER DEFAULT PRIVILEGES IN SCHEMA zjy GRANT select,update ON sequences TO zjy;</span><br><span class=\"line\">ALTER DEFAULT PRIVILEGES</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3></li>\n</ul>\n<ol>\n<li><p>查看当前用户javascript:void(0);)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zjy=# \\du</span><br><span class=\"line\">                                   List of roles</span><br><span class=\"line\"> Role name |                         Attributes                         | Member of </span><br><span class=\"line\">-----------+------------------------------------------------------------+-----------</span><br><span class=\"line\"> admin     | Superuser, Cannot login                                    | &#123;&#125;</span><br><span class=\"line\"> postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | &#123;&#125;</span><br><span class=\"line\"> zjy       |                                                            | &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">zjy=# select * from pg_roles;</span><br><span class=\"line\">       rolname        | rolsuper | rolinherit | rolcreaterole | rolcreatedb | rolcanlogin | rolreplication | rolconnlimit | rolpassword | rolvaliduntil | rolbypassrls | rolconfig |  oid  </span><br><span class=\"line\">----------------------+----------+------------+---------------+-------------+-------------+----------------+--------------+-------------+---------------+--------------+-----------+-------</span><br><span class=\"line\"> pg_signal_backend    | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  4200</span><br><span class=\"line\"> postgres             | t        | t          | t             | t           | t           | t              |           -1 | ********    |               | t            |           |    10</span><br><span class=\"line\"> admin                | t        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           | 16456</span><br><span class=\"line\"> pg_read_all_stats    | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  3375</span><br><span class=\"line\"> zjy                  | f        | t          | f             | f           | t           | f              |           -1 | ********    |               | f            |           | 16729</span><br><span class=\"line\"> pg_monitor           | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  3373</span><br><span class=\"line\"> pg_read_all_settings | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  3374</span><br><span class=\"line\"> pg_stat_scan_tables  | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  3377</span><br><span class=\"line\">(8 rows)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看用户权限javascript:void(0);)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zjy=# select * from information_schema.table_privileges where grantee=&apos;zjy&apos;;</span><br><span class=\"line\"> grantor  | grantee | table_catalog | table_schema | table_name | privilege_type | is_grantable | with_hierarchy </span><br><span class=\"line\">----------+---------+---------------+--------------+------------+----------------+--------------+----------------</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy        | INSERT         | NO           | NO</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy        | SELECT         | NO           | YES</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy        | UPDATE         | NO           | NO</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy        | DELETE         | NO           | NO</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy1       | INSERT         | NO           | NO</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy1       | SELECT         | NO           | YES</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy1       | UPDATE         | NO           | NO</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy1       | DELETE         | NO           | NO</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy2       | INSERT         | NO           | NO</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy2       | SELECT         | NO           | YES</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy2       | UPDATE         | NO           | NO</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy2       | DELETE         | NO           | NO</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy3       | INSERT         | NO           | NO</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy3       | SELECT         | NO           | YES</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy3       | UPDATE         | NO           | NO</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy3       | DELETE         | NO           | NO</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>注意：</strong>创建好用户（角色）之后需要连接的话，还需要修改2个权限控制的配置文件（pg_hba.conf、pg_ident.conf）。并且创建用户（user）和创建角色（role）一样，唯一的区别是用户默认可以登录，而创建的角色默认不能登录。创建用户和角色的各个参数选项是一样的。</p>\n<p><strong>Tip：安装PostgreSQL会自动创建一个postgres用户，需要切换到该用户下访问PostgreSQL。</strong></p>\n<ul>\n<li><p><a href=\"https://www.postgresql.org/docs/11/sql-createuser.html\" target=\"_blank\" rel=\"noopener\">创建用户/角色</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER/ROLE name [ [ WITH ] option [ ... ] ]  : 关键词 USER,ROLE； name 用户或角色名； </span><br><span class=\"line\"></span><br><span class=\"line\">where option can be:</span><br><span class=\"line\"></span><br><span class=\"line\">      SUPERUSER | NOSUPERUSER      :超级权限，拥有所有权限，默认nosuperuser。</span><br><span class=\"line\">    | CREATEDB | NOCREATEDB        :建库权限，默认nocreatedb。</span><br><span class=\"line\">    | CREATEROLE | NOCREATEROLE    :建角色权限，拥有创建、修改、删除角色，默认nocreaterole。</span><br><span class=\"line\">    | INHERIT | NOINHERIT          :继承权限，可以把除superuser权限继承给其他用户/角色，默认inherit。</span><br><span class=\"line\">    | LOGIN | NOLOGIN              :登录权限，作为连接的用户，默认nologin，除非是create user（默认登录）。</span><br><span class=\"line\">    | REPLICATION | NOREPLICATION  :复制权限，用于物理或则逻辑复制（复制和删除slots），默认是noreplication。</span><br><span class=\"line\">    | BYPASSRLS | NOBYPASSRLS      :安全策略RLS权限，默认nobypassrls。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| CONNECTION LIMIT connlimit   :限制用户并发数，默认-1，不限制。正常连接会受限制，后台连接和prepared事务不受限制。</span><br><span class=\"line\">| [ ENCRYPTED ] PASSWORD &apos;password&apos; | PASSWORD NULL :设置密码，密码仅用于有login属性的用户，不使用密码身份验证，则可以省略此选项。可以选择将空密码显式写为PASSWORD NULL。</span><br><span class=\"line\">                                                     加密方法由配置参数password_encryption确定，密码始终以加密方式存储在系统目录中。</span><br><span class=\"line\">| VALID UNTIL &apos;timestamp&apos;      :密码有效期时间，不设置则用不失效。</span><br><span class=\"line\">| IN ROLE role_name [, ...]    :新角色将立即添加为新成员。</span><br><span class=\"line\">| IN GROUP role_name [, ...]   :同上</span><br><span class=\"line\">| ROLE role_name [, ...]       :ROLE子句列出一个或多个现有角色，这些角色自动添加为新角色的成员。 （这实际上使新角色成为“组”）。</span><br><span class=\"line\">| ADMIN role_name [, ...]      :与ROLE类似，但命名角色将添加到新角色WITH ADMIN OPTION，使他们有权将此角色的成员资格授予其他人。</span><br><span class=\"line\">| USER role_name [, ...]       :同上</span><br><span class=\"line\">| SYSID uid                    :被忽略，但是为向后兼容性而存在。</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>​      <strong>示例：</strong></p>\n<ol>\n<li><p>创建不需要密码登陆的用户zjy：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=# CREATE ROLE zjy LOGIN;</span><br><span class=\"line\">CREATE ROLE</span><br></pre></td></tr></table></figure>\n<p>创建该用户后，还不能直接登录。需要修改 <strong>pg_hba.conf</strong> 文件（后面会对该文件进行说明），加入：</p>\n<p>①：本地登陆：local   all    all    <strong>trust</strong>②：远程登陆：host   all    all    192.168.163.132/32     <strong>trust</strong></p>\n</li>\n<li><p>创建需要密码登陆的用户zjy1：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=# CREATE USER zjy1 WITH PASSWORD &apos;zjy1&apos;;</span><br><span class=\"line\">CREATE ROLE</span><br></pre></td></tr></table></figure>\n<p>和ROLE的区别是：USER带LOGIN属性。也需要修改 <strong>pg_hba.conf</strong> 文件（后面会对该文件进行说明），加入：<br>host    all     all     192.168.163.132/32    <strong>md5</strong></p>\n</li>\n<li><p>创建有时间限制的用户zjy2：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=# CREATE ROLE zjy2 WITH LOGIN PASSWORD &apos;zjy2&apos; VALID UNTIL &apos;2019-05-30&apos;;</span><br><span class=\"line\">CREATE ROLE</span><br></pre></td></tr></table></figure>\n<p>和2的处理方法一样，修改 <strong>pg_hba.conf</strong> 文件，该用户会的密码在给定的时间之后过期不可用。</p>\n</li>\n<li><p>创建有创建数据库和管理角色权限的用户admin：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=# CREATE ROLE admin WITH CREATEDB CREATEROLE;</span><br><span class=\"line\">CREATE ROLE</span><br></pre></td></tr></table></figure>\n<p>注意：拥有创建数据库，角色的用户，也可以删除和修改这些对象。</p>\n</li>\n<li><p>创建具有超级权限的用户：admin</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=# CREATE ROLE admin WITH SUPERUSER LOGIN PASSWORD &apos;admin&apos;;</span><br><span class=\"line\">CREATE ROLE</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建复制账号：repl </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=# CREATE USER repl REPLICATION LOGIN ENCRYPTED PASSWORD &apos;repl&apos;;</span><br><span class=\"line\">CREATE ROLE</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>其他说明</p>\n</li>\n</ol>\n<ol start=\"8\">\n<li></li>\n</ol>\n<ul>\n<li><a href=\"https://www.postgresql.org/docs/11/sql-grant.html\" target=\"_blank\" rel=\"noopener\">授权，定义访问权限</a></li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT &#123; &#123; SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER &#125;</span><br><span class=\"line\">    [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON &#123; [ TABLE ] table_name [, ...]</span><br><span class=\"line\">         | ALL TABLES IN SCHEMA schema_name [, ...] &#125;</span><br><span class=\"line\">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br><span class=\"line\"></span><br><span class=\"line\">##单表授权：授权zjy账号可以访问schema为zjy的zjy表</span><br><span class=\"line\">grant select,insert,update,delete on zjy.zjy to zjy;</span><br><span class=\"line\">##所有表授权：</span><br><span class=\"line\">grant select,insert,update,delete on all tables in schema zjy to zjy;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">GRANT &#123; &#123; SELECT | INSERT | UPDATE | REFERENCES &#125; ( column_name [, ...] )</span><br><span class=\"line\">    [, ...] | ALL [ PRIVILEGES ] ( column_name [, ...] ) &#125;</span><br><span class=\"line\">    ON [ TABLE ] table_name [, ...]</span><br><span class=\"line\">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br><span class=\"line\"></span><br><span class=\"line\">##列授权，授权指定列(zjy schema下的zjy表的name列)的更新权限给zjy用户</span><br><span class=\"line\">grant update (name) on zjy.zjy to zjy;</span><br><span class=\"line\">##指定列授不同权限，zjy schema下的zjy表，查看更新name、age字段，插入name字段</span><br><span class=\"line\">grant select (name,age),update (name,age),insert(name) on zjy.xxx to zjy;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">GRANT &#123; &#123; USAGE | SELECT | UPDATE &#125;</span><br><span class=\"line\">    [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON &#123; SEQUENCE sequence_name [, ...]</span><br><span class=\"line\">         | ALL SEQUENCES IN SCHEMA schema_name [, ...] &#125;</span><br><span class=\"line\">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br><span class=\"line\"></span><br><span class=\"line\">##序列（自增键）属性授权，指定zjy schema下的seq_id_seq 给zjy用户</span><br><span class=\"line\">grant select,update on sequence zjy.seq_id_seq to zjy;</span><br><span class=\"line\">##序列（自增键）属性授权，给用户zjy授权zjy schema下的所有序列</span><br><span class=\"line\">grant select,update on all sequences in schema zjy to zjy;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">GRANT &#123; &#123; CREATE | CONNECT | TEMPORARY | TEMP &#125; [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON DATABASE database_name [, ...]</span><br><span class=\"line\">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br><span class=\"line\"></span><br><span class=\"line\">##连接数据库权限，授权cc用户连接数据库zjy</span><br><span class=\"line\">grant connect on database zjy to cc;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">GRANT &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON DOMAIN domain_name [, ...]</span><br><span class=\"line\">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br><span class=\"line\"></span><br><span class=\"line\">##</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON FOREIGN DATA WRAPPER fdw_name [, ...]</span><br><span class=\"line\">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br></pre></td></tr></table></figure>\n<pre><code>\\##\n</code></pre>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON FOREIGN SERVER server_name [, ...]</span><br><span class=\"line\">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT &#123; EXECUTE | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON &#123; &#123; FUNCTION | PROCEDURE | ROUTINE &#125; routine_name [ ( [ [ argmode ] [ arg_name ] arg_type [, ...] ] ) ] [, ...]</span><br><span class=\"line\">         | ALL &#123; FUNCTIONS | PROCEDURES | ROUTINES &#125; IN SCHEMA schema_name [, ...] &#125;</span><br><span class=\"line\">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">GRANT &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON LANGUAGE lang_name [, ...]</span><br><span class=\"line\">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br></pre></td></tr></table></figure>\n<pre><code>\\##\n</code></pre>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT &#123; &#123; SELECT | UPDATE &#125; [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON LARGE OBJECT loid [, ...]</span><br><span class=\"line\">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##</span><br><span class=\"line\"></span><br><span class=\"line\">GRANT &#123; &#123; CREATE | USAGE &#125; [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON SCHEMA schema_name [, ...]</span><br><span class=\"line\">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br><span class=\"line\"></span><br><span class=\"line\">##连接schema权限，授权cc访问zjy schema权限</span><br><span class=\"line\">grant usage on schema zjy to cc;</span><br><span class=\"line\"></span><br><span class=\"line\">GRANT &#123; CREATE | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON TABLESPACE tablespace_name [, ...]</span><br><span class=\"line\">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br><span class=\"line\"></span><br><span class=\"line\">GRANT &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON TYPE type_name [, ...]</span><br><span class=\"line\">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br><span class=\"line\"></span><br><span class=\"line\">where role_specification can be:</span><br><span class=\"line\"></span><br><span class=\"line\">    [ GROUP ] role_name</span><br><span class=\"line\">  | PUBLIC</span><br><span class=\"line\">  | CURRENT_USER</span><br><span class=\"line\">  | SESSION_USER</span><br><span class=\"line\"></span><br><span class=\"line\">GRANT role_name [, ...] TO role_name [, ...] [ WITH ADMIN OPTION ]</span><br><span class=\"line\">##把zjy用户的权限授予用户cc。</span><br><span class=\"line\">grant zjy to cc;</span><br></pre></td></tr></table></figure>\n<p>  <a href=\"https://blog.51cto.com/riverxyz/1880795\" target=\"_blank\" rel=\"noopener\">权限说明</a>：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT：允许从指定表，视图或序列的任何列或列出的特定列进行SELECT。也允许使用COPY TO。在UPDATE或DELETE中引用现有列值也需要此权限。对于序列，此权限还允许使用currval函数。对于大对象，此权限允许读取对象。</span><br><span class=\"line\"></span><br><span class=\"line\">INSERT：允许将新行INSERT到指定的表中。如果列出了特定列，则只能在INSERT命令中为这些列分配（因此其他列将接收默认值）。也允许COPY FROM。</span><br><span class=\"line\"></span><br><span class=\"line\">UPDATE：允许更新指定表的任何列或列出的特定列，需要SELECT权限。</span><br><span class=\"line\"></span><br><span class=\"line\">DELETE：允许删除指定表中的行，需要SELECT权限。</span><br><span class=\"line\"></span><br><span class=\"line\">TRUNCATE：允许在指定的表上创建触发器。</span><br><span class=\"line\"></span><br><span class=\"line\">REFERENCES：允许创建引用指定表或表的指定列的外键约束。</span><br><span class=\"line\"></span><br><span class=\"line\">TRIGGER：允许在指定的表上创建触发器。 </span><br><span class=\"line\"></span><br><span class=\"line\">CREATE：对于数据库，允许在数据库中创建新的schema、table、index。</span><br><span class=\"line\"></span><br><span class=\"line\">CONNECT：允许用户连接到指定的数据库。在连接启动时检查此权限。</span><br><span class=\"line\"></span><br><span class=\"line\">TEMPORARY、TEMP：允许在使用指定数据库时创建临时表。</span><br><span class=\"line\"></span><br><span class=\"line\">EXECUTE：允许使用指定的函数或过程以及在函数。</span><br><span class=\"line\"></span><br><span class=\"line\">USAGE：对于schema，允许访问指定模式中包含的对象；对于sequence，允许使用currval和nextval函数。对于类型和域，允许在创建表，函数和其他模式对象时使用类型或域。</span><br><span class=\"line\"></span><br><span class=\"line\">ALL PRIVILEGES：一次授予所有可用权限。</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://www.postgresql.org/docs/11/sql-revoke.html\" target=\"_blank\" rel=\"noopener\">撤销权限\n</a></li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REVOKE [ GRANT OPTION FOR ]</span><br><span class=\"line\">    &#123; &#123; SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER &#125;</span><br><span class=\"line\">    [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON &#123; [ TABLE ] table_name [, ...]</span><br><span class=\"line\">         | ALL TABLES IN SCHEMA schema_name [, ...] &#125;</span><br><span class=\"line\">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class=\"line\">    [ CASCADE | RESTRICT ]</span><br><span class=\"line\"></span><br><span class=\"line\"> ##移除用户zjy在schema zjy上所有表的select权限</span><br><span class=\"line\"> revoke select on all tables in schema zjy from zjy;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">REVOKE [ GRANT OPTION FOR ]</span><br><span class=\"line\">    &#123; &#123; SELECT | INSERT | UPDATE | REFERENCES &#125; ( column_name [, ...] )</span><br><span class=\"line\">    [, ...] | ALL [ PRIVILEGES ] ( column_name [, ...] ) &#125;</span><br><span class=\"line\">    ON [ TABLE ] table_name [, ...]</span><br><span class=\"line\">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class=\"line\">    [ CASCADE | RESTRICT ]</span><br><span class=\"line\"></span><br><span class=\"line\"> ##移除用户zjy在zjy schema的zjy表的age列的查询权限</span><br><span class=\"line\"> revoke select (age) on zjy.zjy from zjy;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">REVOKE [ GRANT OPTION FOR ]</span><br><span class=\"line\">    &#123; &#123; USAGE | SELECT | UPDATE &#125;</span><br><span class=\"line\">    [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON &#123; SEQUENCE sequence_name [, ...]</span><br><span class=\"line\">         | ALL SEQUENCES IN SCHEMA schema_name [, ...] &#125;</span><br><span class=\"line\">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class=\"line\">    [ CASCADE | RESTRICT ]</span><br><span class=\"line\">##序列</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">REVOKE [ GRANT OPTION FOR ]</span><br><span class=\"line\">    &#123; &#123; CREATE | CONNECT | TEMPORARY | TEMP &#125; [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON DATABASE database_name [, ...]</span><br><span class=\"line\">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class=\"line\">    [ CASCADE | RESTRICT ]</span><br><span class=\"line\">##库</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">REVOKE [ GRANT OPTION FOR ]</span><br><span class=\"line\">    &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON DOMAIN domain_name [, ...]</span><br><span class=\"line\">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class=\"line\">    [ CASCADE | RESTRICT]</span><br><span class=\"line\">##</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">REVOKE [ GRANT OPTION FOR ]</span><br><span class=\"line\">    &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON FOREIGN DATA WRAPPER fdw_name [, ...]</span><br><span class=\"line\">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class=\"line\">    [ CASCADE | RESTRICT]</span><br><span class=\"line\">##</span><br><span class=\"line\"></span><br><span class=\"line\">REVOKE [ GRANT OPTION FOR ]</span><br><span class=\"line\">    &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON FOREIGN SERVER server_name [, ...]</span><br><span class=\"line\">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class=\"line\">    [ CASCADE | RESTRICT]</span><br><span class=\"line\">##</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">REVOKE [ GRANT OPTION FOR ]</span><br><span class=\"line\">    &#123; EXECUTE | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON &#123; &#123; FUNCTION | PROCEDURE | ROUTINE &#125; function_name [ ( [ [ argmode ] [ arg_name ] arg_type [, ...] ] ) ] [, ...]</span><br><span class=\"line\">         | ALL &#123; FUNCTIONS | PROCEDURES | ROUTINES &#125; IN SCHEMA schema_name [, ...] &#125;</span><br><span class=\"line\">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class=\"line\">    [ CASCADE | RESTRICT ]</span><br><span class=\"line\">##</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REVOKE [ GRANT OPTION FOR ]</span><br><span class=\"line\">    &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON LANGUAGE lang_name [, ...]</span><br><span class=\"line\">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class=\"line\">    [ CASCADE | RESTRICT ]</span><br><span class=\"line\">##</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">REVOKE [ GRANT OPTION FOR ]</span><br><span class=\"line\">    &#123; &#123; SELECT | UPDATE &#125; [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON LARGE OBJECT loid [, ...]</span><br><span class=\"line\">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class=\"line\">    [ CASCADE | RESTRICT ]</span><br><span class=\"line\">##</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">REVOKE [ GRANT OPTION FOR ]</span><br><span class=\"line\">    &#123; &#123; CREATE | USAGE &#125; [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON SCHEMA schema_name [, ...]</span><br><span class=\"line\">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class=\"line\">    [ CASCADE | RESTRICT ]</span><br><span class=\"line\">##schena权限</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">REVOKE [ GRANT OPTION FOR ]</span><br><span class=\"line\">    &#123; CREATE | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON TABLESPACE tablespace_name [, ...]</span><br><span class=\"line\">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class=\"line\">    [ CASCADE | RESTRICT ]</span><br><span class=\"line\">##</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">REVOKE [ GRANT OPTION FOR ]</span><br><span class=\"line\">    &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class=\"line\">    ON TYPE type_name [, ...]</span><br><span class=\"line\">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class=\"line\">    [ CASCADE | RESTRICT ]</span><br><span class=\"line\">##</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REVOKE [ ADMIN OPTION FOR ]</span><br><span class=\"line\">    role_name [, ...] FROM role_name [, ...]</span><br><span class=\"line\">    [ CASCADE | RESTRICT ]</span><br><span class=\"line\">##</span><br></pre></td></tr></table></figure>\n<p>  注意：任何用户对public的schema都有all的权限，为了安全可以禁止用户对public schema</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##移除所有用户（public），superuser除外，对指定DB下的public schema的create 权限。</span><br><span class=\"line\">zjy=# revoke  create  on schema public from public;</span><br><span class=\"line\">REVOKE</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://www.postgresql.org/docs/11/sql-alteruser.html\" target=\"_blank\" rel=\"noopener\">修改用户属性\n</a></li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER USER role_specification [ WITH ] option [ ... ]</span><br><span class=\"line\"></span><br><span class=\"line\">where option can be:</span><br><span class=\"line\"></span><br><span class=\"line\">      SUPERUSER | NOSUPERUSER</span><br><span class=\"line\">    | CREATEDB | NOCREATEDB</span><br><span class=\"line\">    | CREATEROLE | NOCREATEROLE</span><br><span class=\"line\">    | INHERIT | NOINHERIT</span><br><span class=\"line\">    | LOGIN | NOLOGIN</span><br><span class=\"line\">    | REPLICATION | NOREPLICATION</span><br><span class=\"line\">    | BYPASSRLS | NOBYPASSRLS</span><br><span class=\"line\">    | CONNECTION LIMIT connlimit</span><br><span class=\"line\">    | [ ENCRYPTED ] PASSWORD &apos;password&apos; | PASSWORD NULL</span><br><span class=\"line\">    | VALID UNTIL &apos;timestamp&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER USER name RENAME TO new_name</span><br><span class=\"line\"></span><br><span class=\"line\">ALTER USER &#123; role_specification | ALL &#125; [ IN DATABASE database_name ] SET configuration_parameter &#123; TO | = &#125; &#123; value | DEFAULT &#125;</span><br><span class=\"line\">ALTER USER &#123; role_specification | ALL &#125; [ IN DATABASE database_name ] SET configuration_parameter FROM CURRENT</span><br><span class=\"line\">ALTER USER &#123; role_specification | ALL &#125; [ IN DATABASE database_name ] RESET configuration_parameter</span><br><span class=\"line\">ALTER USER &#123; role_specification | ALL &#125; [ IN DATABASE database_name ] RESET ALL</span><br><span class=\"line\"></span><br><span class=\"line\">where role_specification can be:</span><br><span class=\"line\"></span><br><span class=\"line\">    role_name</span><br><span class=\"line\">  | CURRENT_USER</span><br><span class=\"line\">  | SESSION_USER</span><br></pre></td></tr></table></figure>\n<p>  <strong>示例：</strong>     注意：option选项里的用户都可以通过alter role进行修改</p>\n<ul>\n<li><ul>\n<li><p>修改用户为超级/非超级用户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter role caocao with superuser/nosuperuser;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改用户为可/不可登陆用户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter role caocao with nologin/login;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改用户名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter role caocao rename to youxing;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改用户密码，移除密码用NULL</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter role youxing with password &apos;youxing&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改用户参数，该用户登陆后的以该参数为准</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter role zjy in database zjy SET geqo to 0/default;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><a href=\"https://www.postgresql.org/docs/11/auth-pg-hba-conf.html\" target=\"_blank\" rel=\"noopener\">控制访问文件</a> pg_hba.conf<a href=\"https://www.postgresql.org/docs/11/auth-pg-hba-conf.html\" target=\"_blank\" rel=\"noopener\">\n</a></p>\n</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local      database  user  auth-method  [auth-options]</span><br><span class=\"line\">host       database  user  address  auth-method  [auth-options]</span><br><span class=\"line\">hostssl    database  user  address  auth-method  [auth-options]</span><br><span class=\"line\">hostnossl  database  user  address  auth-method  [auth-options]</span><br><span class=\"line\">host       database  user  IP-address  IP-mask  auth-method  [auth-options]</span><br><span class=\"line\">hostssl    database  user  IP-address  IP-mask  auth-method  [auth-options]</span><br><span class=\"line\">hostnossl  database  user  IP-address  IP-mask  auth-method  [auth-options]</span><br></pre></td></tr></table></figure>\n<p>  <strong>local</strong>：匹配使用Unix域套接字的连接，如果没有此类型的记录，则不允许使用Unix域套接字连接。<br>  <strong>host</strong>：匹配使用TCP/IP进行的连接，主机记录匹配SSL或非SSL连接，需要配置listen_addresses。<br>  <strong>hostssl</strong>：匹配使用TCP/IP进行的连接，仅限于使用SSL加密进行连接，需要配置ssl参数。<br>  <strong>hostnossl</strong>：匹配通过TCP/IP进行的连接，不使用SSL的连接。<br>  <strong>database</strong>：匹配的数据库名称，all指定它匹配所有数据库。如果请求的数据库与请求的用户具有相同的名称则可以使用samerole值。复制（replication）不指定数据库，多个数据库可以用逗号分隔。<br>  <strong>user</strong>：匹配的数据库用户名，值all指定它匹配所有用户。 可以通过用逗号分隔来提供多个用户名。<br>  <strong>address</strong>：匹配的客户端计算机地址，可以包含主机名，IP地址范围。如：172.20.143.89/32、172.20.143.0/24、10.6.0.0/16、:: 1/128。 0.0.0.0/0表示所有IPv4地址，:: 0/0表示所有IPv6地址。要指定单个主机，请使用掩码长度32（对于IPv4）或128（对于IPv6）。all以匹配任何IP地址。<br>  <strong>IP-address、IP-mask</strong>：这两个字段可用作IP地址/掩码长度，如：127.0.0.1 255.255.255.255。<br>  <strong>auth-method</strong>：指定连接与此记录匹配时要使用的身份验证方法：trust、reject、scram-sha-256、md5、password、gss、sspi、ident、peer、ldap、radius、cert、pam、bsd。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trust：允许无条件连接，允许任何PostgreSQL用户身份登录，而无需密码或任何其他身份验证。</span><br><span class=\"line\">reject：拒绝任何条件连接，这对于从组中“过滤掉”某些主机非常有用。</span><br><span class=\"line\">scram-sha-256：执行SCRAM-SHA-256身份验证以验证用户的密码。</span><br><span class=\"line\">md5：执行SCRAM-SHA-256或MD5身份验证以验证用户的密码。</span><br><span class=\"line\">password：要提供未加密的密码以进行身份验证。由于密码是通过网络以明文形式发送的，因此不应在不受信任的网络上使用。</span><br><span class=\"line\">gss：使用GSSAPI对用户进行身份验证，这仅适用于TCP / IP连接。</span><br><span class=\"line\">sspi：使用SSPI对用户进行身份验证，这仅适用于Windows。</span><br><span class=\"line\">ident：通过联系客户端上的ident服务器获取客户端的操作系统用户名，并检查它是否与请求的数据库用户名匹配。 Ident身份验证只能用于TCP / IP连接。为本地连接指定时，将使用对等身份验证。</span><br><span class=\"line\">peer：从操作系统获取客户端的操作系统用户名，并检查它是否与请求的数据库用户名匹配。这仅适用于本地连接。</span><br><span class=\"line\">ldap：使用LDAP服务器进行身份验证。</span><br><span class=\"line\">radius：使用RADIUS服务器进行身份验证。</span><br><span class=\"line\">cert：使用SSL客户端证书进行身份验证。</span><br><span class=\"line\">pam：使用操作系统提供的可插入身份验证模块（PAM）服务进行身份验证。</span><br><span class=\"line\">bsd：使用操作系统提供的BSD身份验证服务进行身份验证。</span><br></pre></td></tr></table></figure>\n<p>  <strong>auth-options</strong>：在auth-method字段之后，可以存在name = value形式的字段，用于指定认证方法的选项。<br>  例子：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># TYPE  DATABASE    USER   ADDRESS   METHOD</span><br><span class=\"line\">local          all               all                         trust</span><br><span class=\"line\">--在本地允许任何用户无密码登录</span><br><span class=\"line\">local          all                all                        peer</span><br><span class=\"line\">--操作系统的登录用户和pg的用户是否一致，一致则可以登录</span><br><span class=\"line\">local          all                all                        ident</span><br><span class=\"line\">--操作系统的登录用户和pg的用户是否一致，一致则可以登录</span><br><span class=\"line\">host          all                all    192.168.163.0/24   md5</span><br><span class=\"line\">--指定客户端IP访问通过md5身份验证进行登录</span><br><span class=\"line\">host          all                all     192.168.163.132/32   password</span><br><span class=\"line\">--指定客户端IP通过passwotd身份验证进行登录</span><br><span class=\"line\"></span><br><span class=\"line\">host    all             all     192.168.54.1/32         reject</span><br><span class=\"line\">host    all             all     192.168.0.0/16           ident  </span><br><span class=\"line\">host    all             all     127.0.0.1       255.255.255.255     trust</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>  设置完之后可以通过查看表来查看hba：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zjy=# select * from pg_hba_file_rules;</span><br><span class=\"line\"> line_number | type  |   database    | user_name |    address    |                 netmask                 | auth_method | options | error </span><br><span class=\"line\">-------------+-------+---------------+-----------+---------------+-----------------------------------------+-------------+---------+-------</span><br><span class=\"line\">          87 | host  | &#123;all&#125;         | &#123;all&#125;     | 192.168.163.0 | 255.255.255.0                           | md5         |         | </span><br><span class=\"line\">          92 | local | &#123;all&#125;         | &#123;all&#125;     |               |                                         | peer        |         | </span><br><span class=\"line\">          94 | host  | &#123;all&#125;         | &#123;all&#125;     | 127.0.0.1     | 255.255.255.255                         | md5         |         | </span><br><span class=\"line\">          96 | host  | &#123;all&#125;         | &#123;all&#125;     | ::1           | ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff | md5         |         | </span><br><span class=\"line\">          99 | local | &#123;replication&#125; | &#123;all&#125;     |               |                                         | peer        |         | </span><br><span class=\"line\">         100 | host  | &#123;replication&#125; | &#123;all&#125;     | 127.0.0.1     | 255.255.255.255                         | md5         |         | </span><br><span class=\"line\">         101 | host  | &#123;replication&#125; | &#123;all&#125;     | ::1           | ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff | md5         |         |</span><br></pre></td></tr></table></figure>\n<p>  当然，修改完pg_hba.conf文件之后，需要重新加载配置，不用重启数据库：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=# select pg_reload_conf();</span><br><span class=\"line\"> pg_reload_conf </span><br><span class=\"line\">----------------</span><br><span class=\"line\"> t</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h3 id=\"日常使用\"><a href=\"#日常使用\" class=\"headerlink\" title=\"日常使用\"></a>日常使用</h3></li>\n</ul>\n<p>用户权限管理涉及到的东西很多，本文也只是大致说明了一小部分，大部分的还得继续学习。那么现在按照一个正常项目上线的流程来创建一个应用账号为例，看看需要怎么操作。</p>\n<p>比如一个项目<strong>zjy</strong>上线：用管理账号来操作</p>\n<ul>\n<li><p>创建数据库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=# create database zjy;</span><br><span class=\"line\">CREATE DATABASE</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建账号：账号和数据库名字保持一致（search_path）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=# create user zjy with password &apos;zjy&apos;;</span><br><span class=\"line\">CREATE ROLE</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建schema：不能用默认的public的schma</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=# \\c zjy</span><br><span class=\"line\">You are now connected to database &quot;zjy&quot; as user &quot;postgres&quot;.</span><br><span class=\"line\">zjy=# create schema zjy;</span><br><span class=\"line\">CREATE SCHEMA</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>授权：</p>\n<p>[<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"javascript:void(0);\" alt=\"复制代码](https://common.cnblogs.com/images/copycode.gif)\" title=\"\">\n                </div>\n                <div class=\"image-caption\">复制代码](https://common.cnblogs.com/images/copycode.gif)</div>\n            </figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#访问库</span><br><span class=\"line\">zjy=# grant connect on database zjy to zjy;</span><br><span class=\"line\">GRANT</span><br><span class=\"line\">#访问schmea</span><br><span class=\"line\">zjy=# grant usage on schema zjy to zjy;</span><br><span class=\"line\">GRANT</span><br><span class=\"line\">#访问表</span><br><span class=\"line\">zjy=# grant select,insert,update,delete on all tables in schema zjy to zjy;</span><br><span class=\"line\">GRANT</span><br><span class=\"line\">#如果访问自增序列，需要授权</span><br><span class=\"line\">zjy=# grant select,update on all sequences in schema zjy to zjy;</span><br><span class=\"line\">GRANT</span><br><span class=\"line\"></span><br><span class=\"line\">注意：上面的授权只对历史的一些对象授权，后期增加的对象是没有权限的，需要给个默认权限</span><br><span class=\"line\"></span><br><span class=\"line\">#默认表权限</span><br><span class=\"line\">zjy=# ALTER DEFAULT PRIVILEGES IN SCHEMA zjy GRANT select,insert,update,delete ON TABLES TO zjy;</span><br><span class=\"line\">ALTER DEFAULT PRIVILEGES</span><br><span class=\"line\"></span><br><span class=\"line\">#默认自增序列权限</span><br><span class=\"line\">zjy=# ALTER DEFAULT PRIVILEGES IN SCHEMA zjy GRANT select,update ON sequences TO zjy;</span><br><span class=\"line\">ALTER DEFAULT PRIVILEGES</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3></li>\n</ul>\n<ol>\n<li><p>查看当前用户javascript:void(0);)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zjy=# \\du</span><br><span class=\"line\">                                   List of roles</span><br><span class=\"line\"> Role name |                         Attributes                         | Member of </span><br><span class=\"line\">-----------+------------------------------------------------------------+-----------</span><br><span class=\"line\"> admin     | Superuser, Cannot login                                    | &#123;&#125;</span><br><span class=\"line\"> postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | &#123;&#125;</span><br><span class=\"line\"> zjy       |                                                            | &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">zjy=# select * from pg_roles;</span><br><span class=\"line\">       rolname        | rolsuper | rolinherit | rolcreaterole | rolcreatedb | rolcanlogin | rolreplication | rolconnlimit | rolpassword | rolvaliduntil | rolbypassrls | rolconfig |  oid  </span><br><span class=\"line\">----------------------+----------+------------+---------------+-------------+-------------+----------------+--------------+-------------+---------------+--------------+-----------+-------</span><br><span class=\"line\"> pg_signal_backend    | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  4200</span><br><span class=\"line\"> postgres             | t        | t          | t             | t           | t           | t              |           -1 | ********    |               | t            |           |    10</span><br><span class=\"line\"> admin                | t        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           | 16456</span><br><span class=\"line\"> pg_read_all_stats    | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  3375</span><br><span class=\"line\"> zjy                  | f        | t          | f             | f           | t           | f              |           -1 | ********    |               | f            |           | 16729</span><br><span class=\"line\"> pg_monitor           | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  3373</span><br><span class=\"line\"> pg_read_all_settings | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  3374</span><br><span class=\"line\"> pg_stat_scan_tables  | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  3377</span><br><span class=\"line\">(8 rows)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看用户权限javascript:void(0);)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zjy=# select * from information_schema.table_privileges where grantee=&apos;zjy&apos;;</span><br><span class=\"line\"> grantor  | grantee | table_catalog | table_schema | table_name | privilege_type | is_grantable | with_hierarchy </span><br><span class=\"line\">----------+---------+---------------+--------------+------------+----------------+--------------+----------------</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy        | INSERT         | NO           | NO</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy        | SELECT         | NO           | YES</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy        | UPDATE         | NO           | NO</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy        | DELETE         | NO           | NO</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy1       | INSERT         | NO           | NO</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy1       | SELECT         | NO           | YES</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy1       | UPDATE         | NO           | NO</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy1       | DELETE         | NO           | NO</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy2       | INSERT         | NO           | NO</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy2       | SELECT         | NO           | YES</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy2       | UPDATE         | NO           | NO</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy2       | DELETE         | NO           | NO</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy3       | INSERT         | NO           | NO</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy3       | SELECT         | NO           | YES</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy3       | UPDATE         | NO           | NO</span><br><span class=\"line\"> postgres | zjy     | zjy           | zjy          | zjy3       | DELETE         | NO           | NO</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckgepblj600004tje75854les","tag_id":"ckgepbljc00024tje15i7telt","_id":"ckgepblji00074tje7o34hfyi"},{"post_id":"ckgepblja00014tje5mhxb3fh","tag_id":"ckgepbljc00024tje15i7telt","_id":"ckgepbljm000b4tjem9f06ygp"},{"post_id":"ckgepbljd00034tjei6zywkrm","tag_id":"ckgepbljl000a4tjemk1c7fvn","_id":"ckgepbljq000g4tjedwpn6l9k"},{"post_id":"ckgepbljf00044tjez88s3onl","tag_id":"ckgepbljo000e4tje2bmat1o0","_id":"ckgepbljt000k4tjernfsm3ro"},{"post_id":"ckgepbljg00054tje837dz628","tag_id":"ckgepbljs000i4tjemwldksuk","_id":"ckgepbljx000r4tjehqdceckw"},{"post_id":"ckgepbljg00054tje837dz628","tag_id":"ckgepblju000m4tjewf5ahmq3","_id":"ckgepblk0000t4tjetlyiluc1"},{"post_id":"ckgepbljj00084tjeyiwpljxc","tag_id":"ckgepbljx000q4tjetf05ld70","_id":"ckgepblk2000x4tjeu6pywlyq"},{"post_id":"ckgepbljk00094tjeuzhno6un","tag_id":"ckgepblk1000v4tjef20bs819","_id":"ckgepblk500114tjec7pw14vc"},{"post_id":"ckgepbljm000c4tjeucqxejrc","tag_id":"ckgepblk4000z4tjejxhq4uyk","_id":"ckgepblk700154tje3ykwb5yu"},{"post_id":"ckgepblk800164tjeyjjhqa1j","tag_id":"ckgepblju000m4tjewf5ahmq3","_id":"ckgepblka00194tjekg1k624x"},{"post_id":"ckgepbljn000d4tjeqnmiu28v","tag_id":"ckgepblk600134tje4vobmm98","_id":"ckgepblkb001b4tje9mmbgg2f"},{"post_id":"ckgepbljq000h4tjed8jpfofa","tag_id":"ckgepblka00184tjezaifqzu5","_id":"ckgepblkd001f4tjers2sswyk"},{"post_id":"ckgepblkc001e4tjepktyvphc","tag_id":"ckgepblju000m4tjewf5ahmq3","_id":"ckgepblke001h4tjee00uh1yx"},{"post_id":"ckgepbljs000j4tjevgyoyp68","tag_id":"ckgepblju000m4tjewf5ahmq3","_id":"ckgepblke001j4tje2has91gp"},{"post_id":"ckgepbljs000j4tjevgyoyp68","tag_id":"ckgepblkd001g4tjesrbmamn8","_id":"ckgepblke001k4tjet4iha7ts"},{"post_id":"ckgepbljt000l4tjesd6qrhrh","tag_id":"ckgepblju000m4tjewf5ahmq3","_id":"ckgepblke001m4tjeqfd04e7u"},{"post_id":"ckgepbljv000n4tjejsdkfby6","tag_id":"ckgepblke001l4tjemci6rj30","_id":"ckgepblkf001o4tje1pzm8znz"},{"post_id":"ckgepbljv000o4tjeah0hqalv","tag_id":"ckgepblk600134tje4vobmm98","_id":"ckgepblkf001q4tjetj4pyu58"},{"post_id":"ckgepbljw000p4tje5ffzc76f","tag_id":"ckgepblkf001p4tjewh8nupr0","_id":"ckgepblkg001s4tjewxqq8x94"},{"post_id":"ckgepblk0000u4tjeq8wyagd0","tag_id":"ckgepblk600134tje4vobmm98","_id":"ckgepblkg001u4tjebsk0ondt"},{"post_id":"ckgepblk1000w4tjejllxhs1a","tag_id":"ckgepblkg001t4tjenmddwv6x","_id":"ckgepblkg001w4tjei2fqg6j6"},{"post_id":"ckgepblk2000y4tjewf205rng","tag_id":"ckgepblkg001t4tjenmddwv6x","_id":"ckgepblkh001y4tjegzmlruuh"},{"post_id":"ckgepblk400104tjeh00n8y44","tag_id":"ckgepblkg001x4tje5gidbbvb","_id":"ckgepblkh00204tje6hda78or"},{"post_id":"ckgepblk500124tjeqpsua5rc","tag_id":"ckgepblkg001x4tje5gidbbvb","_id":"ckgepblkh00224tjenhbrxib2"},{"post_id":"ckgepblk600144tje6vn1uc0l","tag_id":"ckgepblkh00214tjewccbf8dx","_id":"ckgepblki00254tjeyw3edrs8"},{"post_id":"ckgepblk600144tje6vn1uc0l","tag_id":"ckgepblki00234tjeil27f3z7","_id":"ckgepblki00264tje2qp3b73l"},{"post_id":"ckgepblk900174tjetaj2vcdq","tag_id":"ckgepblki00244tje8z3x7rfv","_id":"ckgepblkj00284tjebd23flb7"},{"post_id":"ckgepblka001a4tjeh926l1k3","tag_id":"ckgepblki00274tjenyi284pe","_id":"ckgepblkj002a4tje3x8qab8f"},{"post_id":"ckgepblka001a4tjeh926l1k3","tag_id":"ckgepblki00234tjeil27f3z7","_id":"ckgepblkj002b4tje3evvkrvy"},{"post_id":"ckgepblka001a4tjeh926l1k3","tag_id":"ckgepbljc00024tje15i7telt","_id":"ckgepblkj002c4tjeq7fbi3wa"},{"post_id":"ckgepbll2002d4tje53ugm9gj","tag_id":"ckgepbljc00024tje15i7telt","_id":"ckgepbll5002h4tjerfhfaxgz"},{"post_id":"ckgepbll6002k4tjef358r2pv","tag_id":"ckgepblkf001p4tjewh8nupr0","_id":"ckgepbll8002m4tjefprmo549"},{"post_id":"ckgepbll4002f4tjegqen4qoq","tag_id":"ckgepblkh00214tjewccbf8dx","_id":"ckgepbll9002p4tje4ridrod0"},{"post_id":"ckgepbll4002f4tjegqen4qoq","tag_id":"ckgepbll6002j4tje0avpwuzg","_id":"ckgepblla002q4tje8seqe5te"},{"post_id":"ckgepbll5002i4tjegu5nz4c9","tag_id":"ckgepbll9002o4tjei8zhygrp","_id":"ckgepbllb002s4tjejpvopvak"},{"post_id":"ckgepbll7002l4tjesu66tuzl","tag_id":"ckgepblki00274tjenyi284pe","_id":"ckgepbllb002t4tjehty12qdc"},{"post_id":"ckgepbll7002l4tjesu66tuzl","tag_id":"ckgepbllb002r4tjertb4y6at","_id":"ckgepbllb002u4tjeq0s03xge"},{"post_id":"ckgepblmd002v4tjeas01c1r8","tag_id":"ckgepbll9002o4tjei8zhygrp","_id":"ckgepblmg002x4tjec5vm5jtp"},{"post_id":"ckgepblmi00314tjef8qytq6m","tag_id":"ckgepblke001l4tjemci6rj30","_id":"ckgepblmj00334tje50mbn2a3"},{"post_id":"ckgepblmi00324tjet5r68myb","tag_id":"ckgepblk600134tje4vobmm98","_id":"ckgepblmk00354tjegvouq05s"},{"post_id":"ckgepblmj00344tjerokxob2s","tag_id":"ckgepblk600134tje4vobmm98","_id":"ckgepblml00374tje1xood803"},{"post_id":"ckgepblmk00364tje930h8c94","tag_id":"ckgepbljc00024tje15i7telt","_id":"ckgepblmm00394tjenzn1l0j9"},{"post_id":"ckgepblml00384tje8853h5ir","tag_id":"ckgepbljc00024tje15i7telt","_id":"ckgepblmm003b4tjeaolcp8gi"},{"post_id":"ckgepblmm003a4tjejasqeix4","tag_id":"ckgepbljc00024tje15i7telt","_id":"ckgepblmn003d4tjewiutzeh8"},{"post_id":"ckgepblmo003g4tjexufmowrw","tag_id":"ckgepbljc00024tje15i7telt","_id":"ckgepblmp003i4tjec3yv2q6s"},{"post_id":"ckgepblmo003h4tjebdxsb9ag","tag_id":"ckgepbljc00024tje15i7telt","_id":"ckgepblmq003k4tjeyodwj9oa"},{"post_id":"ckgepblmo003h4tjebdxsb9ag","tag_id":"ckgepbllb002r4tjertb4y6at","_id":"ckgepblmq003n4tjesida1qt9"},{"post_id":"ckgepblmq003o4tje6kn0jc0x","tag_id":"ckgepblki00274tjenyi284pe","_id":"ckgepblmr003q4tjetur26gpf"},{"post_id":"ckgepblmr003p4tje5eoqkc08","tag_id":"ckgepblke001l4tjemci6rj30","_id":"ckgepblmt003t4tje9zsmnozi"},{"post_id":"ckgepblmp003j4tjev6q3hd83","tag_id":"ckgepbljc00024tje15i7telt","_id":"ckgepblmu003v4tjet520yuj0"},{"post_id":"ckgepblmp003j4tjev6q3hd83","tag_id":"ckgepblmq003m4tjeu3bz12r1","_id":"ckgepblmx003x4tjeesfusrdo"},{"post_id":"ckgepblmt003u4tje6wye4jjn","tag_id":"ckgepblki00274tjenyi284pe","_id":"ckgepblmz003z4tjebuwzpj0j"},{"post_id":"ckgepblmq003l4tjev36roqii","tag_id":"ckgepblms003s4tje0rwbm2r5","_id":"ckgepbln000414tjeq0bszy4k"},{"post_id":"ckgepblmq003l4tjev36roqii","tag_id":"ckgepbljc00024tje15i7telt","_id":"ckgepbln100434tjeltq12jw3"},{"post_id":"ckgepblmu003w4tje5q3bfc33","tag_id":"ckgepblke001l4tjemci6rj30","_id":"ckgepbln200454tjeisjnpx58"},{"post_id":"ckgepblmx003y4tje7azslqm3","tag_id":"ckgepblki00274tjenyi284pe","_id":"ckgepbln300474tje4sfz4dco"},{"post_id":"ckgepblmz00404tjeijk77c7o","tag_id":"ckgepblki00274tjenyi284pe","_id":"ckgepbln5004a4tje1zzer1y0"},{"post_id":"ckgepbln000424tjee51tbbr9","tag_id":"ckgepbljl000a4tjemk1c7fvn","_id":"ckgepbln7004c4tje3bu25uzl"},{"post_id":"ckgepbln000424tjee51tbbr9","tag_id":"ckgepblke001l4tjemci6rj30","_id":"ckgepbln9004e4tjeyro45iti"},{"post_id":"ckgepbln100444tje6r2qfwjz","tag_id":"ckgepblki00274tjenyi284pe","_id":"ckgepblna004h4tjegrb8ipwg"},{"post_id":"ckgepbln7004d4tjealo86ont","tag_id":"ckgepbln500494tjexd6gv8e3","_id":"ckgepblna004j4tje0sg4i1p7"},{"post_id":"ckgepbln200464tje1sdubzy5","tag_id":"ckgepbln500494tjexd6gv8e3","_id":"ckgepblnb004m4tjemb7jxe1m"},{"post_id":"ckgepbln200464tje1sdubzy5","tag_id":"ckgepblka00184tjezaifqzu5","_id":"ckgepblnc004o4tjek6s9zotc"},{"post_id":"ckgepbln300484tjey9pfhm4s","tag_id":"ckgepbln500494tjexd6gv8e3","_id":"ckgepblnc004r4tjeorx23cyu"},{"post_id":"ckgepblnb004n4tjevgislnqz","tag_id":"ckgepblka00184tjezaifqzu5","_id":"ckgepblnd004t4tje49xwzp6i"},{"post_id":"ckgepbln5004b4tjezlqbuseb","tag_id":"ckgepbln500494tjexd6gv8e3","_id":"ckgepblne004w4tjehokxp9k2"},{"post_id":"ckgepblnc004p4tjefm6juf2v","tag_id":"ckgepblka00184tjezaifqzu5","_id":"ckgepblne004y4tje475fr1ow"},{"post_id":"ckgepbln9004f4tje8pq2q020","tag_id":"ckgepblnc004q4tjep0gnmra3","_id":"ckgepblnf00514tjegho5exv8"},{"post_id":"ckgepblnd004u4tjelxbslo85","tag_id":"ckgepblka00184tjezaifqzu5","_id":"ckgepblng00534tjeqws16qc7"},{"post_id":"ckgepblne004x4tje49zfumal","tag_id":"ckgepblkg001t4tjenmddwv6x","_id":"ckgepblni00554tjekx8d0f58"},{"post_id":"ckgepblnb004k4tje5rz41mnv","tag_id":"ckgepblnc004q4tjep0gnmra3","_id":"ckgepblni00574tjeongpli64"},{"post_id":"ckgepblne004z4tjej2oo69yt","tag_id":"ckgepblka00184tjezaifqzu5","_id":"ckgepblnj00594tjem4hm4pf1"},{"post_id":"ckgepblnf00524tjez9rq9vaz","tag_id":"ckgepblkg001t4tjenmddwv6x","_id":"ckgepblnk005b4tjebbhfj1w2"},{"post_id":"ckgepblnd004s4tje4rdljxf3","tag_id":"ckgepblnf00504tje85apq2zi","_id":"ckgepblnl005d4tjex2787mpv"},{"post_id":"ckgepblng00544tje5snnain5","tag_id":"ckgepblkg001t4tjenmddwv6x","_id":"ckgepblnm005f4tjei56qozii"},{"post_id":"ckgepblni00564tjexdk8o4nm","tag_id":"ckgepblk4000z4tjejxhq4uyk","_id":"ckgepblnn005h4tje1xcfzkzr"},{"post_id":"ckgepblnj005a4tjed7urx58m","tag_id":"ckgepblkg001t4tjenmddwv6x","_id":"ckgepblnn005j4tjesfhjse7q"},{"post_id":"ckgepblnk005c4tjexp5sqdm5","tag_id":"ckgepblju000m4tjewf5ahmq3","_id":"ckgepblno005l4tje4c069zcb"},{"post_id":"ckgepblnk005c4tjexp5sqdm5","tag_id":"ckgepblk4000z4tjejxhq4uyk","_id":"ckgepblnp005n4tjejm6rptut"},{"post_id":"ckgepblnl005e4tjepiivvjyn","tag_id":"ckgepblke001l4tjemci6rj30","_id":"ckgepblnp005p4tje2rzdy0xq"},{"post_id":"ckgepblnm005g4tjebmlhaw4z","tag_id":"ckgepblke001l4tjemci6rj30","_id":"ckgepblnq005r4tjeromrho3h"},{"post_id":"ckgepblno005m4tjehste96zg","tag_id":"ckgepblke001l4tjemci6rj30","_id":"ckgepblnq005t4tjexlh3htil"},{"post_id":"ckgepblnp005o4tje8x8efql6","tag_id":"ckgepblke001l4tjemci6rj30","_id":"ckgepblnr005v4tje7nitwq5c"},{"post_id":"ckgepblnq005s4tjerhe7qifx","tag_id":"ckgepblke001l4tjemci6rj30","_id":"ckgepblnt005x4tje1fy0nt08"},{"post_id":"ckgepblnu00604tjesb9tncxh","tag_id":"ckgepblke001l4tjemci6rj30","_id":"ckgepblnw00624tjeh1j6jfus"},{"post_id":"ckgepblnx00654tjeb894ywmw","tag_id":"ckgepbljl000a4tjemk1c7fvn","_id":"ckgepblny00674tjeqx3i250i"},{"post_id":"ckgepblny00664tjexm3v4r6l","tag_id":"ckgepbljl000a4tjemk1c7fvn","_id":"ckgepblo000694tjekg6jc65x"},{"post_id":"ckgepblnv00614tje5c0eag1k","tag_id":"ckgepblnx00644tjeoa1qwult","_id":"ckgepblo4006b4tjecfzxt6o1"},{"post_id":"ckgepblny00684tjetl9eix0v","tag_id":"ckgepblke001l4tjemci6rj30","_id":"ckgepblo6006d4tje7fnlzpuu"},{"post_id":"ckgepblo1006a4tjelmajp3s0","tag_id":"ckgepblke001l4tjemci6rj30","_id":"ckgepblo7006f4tje1vk19xnv"},{"post_id":"ckgepblo6006e4tjelfbxmo86","tag_id":"ckgepblki00274tjenyi284pe","_id":"ckgepblo8006g4tjebc6rumo1"},{"post_id":"ckgepbloh006h4tjec21n2jy4","tag_id":"ckgepbljo000e4tje2bmat1o0","_id":"ckgepbloi006j4tjey1ug5pf3"},{"post_id":"ckgepbloi006i4tjeudnzwozn","tag_id":"ckgepbljc00024tje15i7telt","_id":"ckgepbloj006l4tjey6x1d7r8"},{"post_id":"ckgepblol006p4tje2h04ryho","tag_id":"ckgepbln500494tjexd6gv8e3","_id":"ckgepblom006s4tje7c98r0cd"},{"post_id":"ckgepblol006p4tje2h04ryho","tag_id":"ckgepblka00184tjezaifqzu5","_id":"ckgepblon006u4tjehragu4qk"},{"post_id":"ckgepblom006t4tje31w7c0mr","tag_id":"ckgepbln500494tjexd6gv8e3","_id":"ckgepbloo006x4tjera1khg20"},{"post_id":"ckgepblok006o4tjecx9aexjy","tag_id":"ckgepblol006q4tje6uth87fb","_id":"ckgepblop006z4tje7q6eqfuy"},{"post_id":"ckgepblon006v4tjehgqp1rw0","tag_id":"ckgepblka00184tjezaifqzu5","_id":"ckgepblot00714tjet47sxyhn"},{"post_id":"ckgepblol006r4tjesx5zckoz","tag_id":"ckgepblol006q4tje6uth87fb","_id":"ckgepblou00734tjeoah0vait"},{"post_id":"ckgepblor00704tje6a0z8j17","tag_id":"ckgepblka00184tjezaifqzu5","_id":"ckgepblov00744tjet5s4li4f"},{"post_id":"ckgepblot00724tjerarvif4m","tag_id":"ckgepblke001l4tjemci6rj30","_id":"ckgepblov00754tje2nts7sn6"},{"post_id":"ckgepblpd00764tjeanagmrvy","tag_id":"ckgepbljc00024tje15i7telt","_id":"ckgepblpe00784tje5ihkedpd"},{"post_id":"ckgepblpd00764tjeanagmrvy","tag_id":"ckgepbllb002r4tjertb4y6at","_id":"ckgepblpf007a4tjewfdkkr2q"},{"post_id":"ckgepblpe00774tjegahwo0h6","tag_id":"ckgepblka00184tjezaifqzu5","_id":"ckgepblpf007c4tjeer6dt7lf"},{"post_id":"ckgepblpe00774tjegahwo0h6","tag_id":"ckgepbln500494tjexd6gv8e3","_id":"ckgepblpg007d4tjet7p8dk7u"},{"post_id":"ckgepblpf007b4tjef2khim8u","tag_id":"ckgepblke001l4tjemci6rj30","_id":"ckgepblpg007e4tje0qlcvhc1"}],"Tag":[{"name":"java","_id":"ckgepbljc00024tje15i7telt"},{"name":"web","_id":"ckgepbljl000a4tjemk1c7fvn"},{"name":"docker","_id":"ckgepbljo000e4tje2bmat1o0"},{"name":"babel","_id":"ckgepbljs000i4tjemwldksuk"},{"name":"js","_id":"ckgepblju000m4tjewf5ahmq3"},{"name":"css","_id":"ckgepbljx000q4tjetf05ld70"},{"name":"git","_id":"ckgepblk1000v4tjef20bs819"},{"name":"vue","_id":"ckgepblk4000z4tjejxhq4uyk"},{"name":"go","_id":"ckgepblk600134tje4vobmm98"},{"name":"python","_id":"ckgepblka00184tjezaifqzu5"},{"name":"jquery","_id":"ckgepblkd001g4tjesrbmamn8"},{"name":"linux","_id":"ckgepblke001l4tjemci6rj30"},{"name":"node","_id":"ckgepblkf001p4tjewh8nupr0"},{"name":"react","_id":"ckgepblkg001t4tjenmddwv6x"},{"name":"redis","_id":"ckgepblkg001x4tje5gidbbvb"},{"name":"springboot","_id":"ckgepblkh00214tjewccbf8dx"},{"name":"mongodb","_id":"ckgepblki00234tjeil27f3z7"},{"name":"spring-cloud","_id":"ckgepblki00244tje8z3x7rfv"},{"name":"mysql","_id":"ckgepblki00274tjenyi284pe"},{"name":"quartz","_id":"ckgepbll6002j4tje0avpwuzg"},{"name":"lorawan","_id":"ckgepbll9002o4tjei8zhygrp"},{"name":"spring","_id":"ckgepbllb002r4tjertb4y6at"},{"name":"sprintboot","_id":"ckgepblmq003m4tjeu3bz12r1"},{"name":"mybatis","_id":"ckgepblms003s4tje0rwbm2r5"},{"name":"odoo","_id":"ckgepbln500494tjexd6gv8e3"},{"name":"oracle","_id":"ckgepblnc004q4tjep0gnmra3"},{"name":"postgresql","_id":"ckgepblnf00504tje85apq2zi"},{"name":"frp","_id":"ckgepblnx00644tjeoa1qwult"},{"name":"nginx","_id":"ckgepblol006q4tje6uth87fb"}]}}