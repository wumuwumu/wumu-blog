<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wumu&#39;s blog</title>
  
  <subtitle>wumu的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wumuwumu.github.io/"/>
  <updated>2019-10-28T08:41:15.657Z</updated>
  <id>http://wumuwumu.github.io/</id>
  
  <author>
    <name>wumu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://wumuwumu.github.io/2019/10/28/java-%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://wumuwumu.github.io/2019/10/28/java-线程池/</id>
    <published>2019-10-28T08:41:15.626Z</published>
    <updated>2019-10-28T08:41:15.657Z</updated>
    
    <content type="html"><![CDATA[<p>title: java-线程池<br>date: 2019-04-10 10:32:39<br>tags:</p><ul><li>java</li></ul><h2 id="1-线程池的关系"><a href="#1-线程池的关系" class="headerlink" title="1. 线程池的关系"></a>1. 线程池的关系</h2><p>ExecutorService<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![1536473588949](assets/1536473588949.png)</span><br><span class="line"></span><br><span class="line">## 2. ```Executor</span><br></pre></td></tr></table></figure></p><p>public interface Executor {<br>    void execute(Runnable command);<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 3.</span><br></pre></td></tr></table></figure></p><p>javapublic abstract class AbstractExecutorService implements ExecutorService {    // RunnableFuture 是用于获取执行结果的，我们常用它的子类 FutureTask    // 下面两个 newTaskFor 方法用于将我们的任务包装成 FutureTask 提交到线程池中执行    protected <t> RunnableFuture<t> newTaskFor(Runnable runnable, T value) {        return new FutureTask<t>(runnable, value);    }    protected <t> RunnableFuture<t> newTaskFor(Callable<t> callable) {        return new FutureTask<t>(callable);    }    // 提交任务    public Future&lt;?&gt; submit(Runnable task) {        if (task == null) throw new NullPointerException();        RunnableFuture<void> ftask = newTaskFor(task, null);        execute(ftask);        return ftask;    }    /*<em>     </em> @throws RejectedExecutionException {@inheritDoc}     <em> @throws NullPointerException       {@inheritDoc}     </em>/    public <t> Future<t> submit(Runnable task, T result) {        if (task == null) throw new NullPointerException();         // 1. 将任务包装成 FutureTask        RunnableFuture<t> ftask = newTaskFor(task, result);        // 2. 交给执行器执行，execute 方法由具体的子类来实现        // 前面也说了，FutureTask 间接实现了Runnable 接口。        execute(ftask);        return ftask;    }    public <t> Future<t> submit(Callable<t> task) {        if (task == null) throw new NullPointerException();        RunnableFuture<t> ftask = newTaskFor(task);        execute(ftask);        return ftask;    }     // 此方法目的：将 tasks 集合中的任务提交到线程池执行，任意一个线程执行完后就可以结束了    // 第二个参数 timed 代表是否设置超时机制，超时时间为第三个参数，    // 如果 timed 为 true，同时超时了还没有一个线程返回结果，那么抛出 TimeoutException 异常    private <t> T doInvokeAny(Collection&lt;? extends Callable<t>&gt; tasks,                              boolean timed, long nanos)        throws InterruptedException, ExecutionException, TimeoutException {        if (tasks == null)            throw new NullPointerException();        int ntasks = tasks.size();        if (ntasks == 0)            throw new IllegalArgumentException();        ArrayList&lt;Future<t>&gt; futures = new ArrayList&lt;Future<t>&gt;(ntasks);         // ExecutorCompletionService 不是一个真正的执行器，参数 this 才是真正的执行器        // 它对执行器进行了包装，每个任务结束后，将结果保存到内部的一个 completionQueue 队列中        // 这也是为什么这个类的名字里面有个 Completion 的原因吧。        ExecutorCompletionService<t> ecs =            new ExecutorCompletionService<t>(this);        // For efficiency, especially in executors with limited        // parallelism, check to see if previously submitted tasks are        // done before submitting more of them. This interleaving        // plus the exception mechanics account for messiness of main        // loop.        try {            // 用于保存异常信息，此方法如果没有得到任何有效的结果，那么我们可以抛出最后得到的一个异常            ExecutionException ee = null;            final long deadline = timed ? System.nanoTime() + nanos : 0L;            Iterator&lt;? extends Callable<t>&gt; it = tasks.iterator();             // 首先先提交一个任务，后面的任务到下面的 for 循环一个个提交            futures.add(ecs.submit(it.next()));            –ntasks;            int active = 1;            for (;;) {                // ecs 上面说了，其内部有一个 completionQueue 用于保存执行完成的结果                // BlockingQueue 的 poll 方法不阻塞，返回 null 代表队列为空                Future<t> f = ecs.poll();                 // 为 null，说明刚刚提交的第一个线程还没有执行完成                // 在前面先提交一个任务，加上这里做一次检查，也是为了提高性能                if (f == null) {                    if (ntasks &gt; 0) {                        –ntasks;                        futures.add(ecs.submit(it.next()));                        ++active;                    }                     // 这里是 else if，不是 if。这里说明，没有任务了，同时 active 为 0 说明                    // 任务都执行完成了。其实我也没理解为什么这里做一次 break？                    // 因为我认为 active 为 0 的情况，必然从下面的 f.get() 返回了                    else if (active == 0)                        break;                     // 这里也是 else if。这里说的是，没有任务了，但是设置了超时时间，这里检测是否超时                    else if (timed) {                        f = ecs.poll(nanos, TimeUnit.NANOSECONDS);                        if (f == null)                            throw new TimeoutException();                        nanos = deadline - System.nanoTime();                    }                    else                   // else。说明，没有任务需要提交，但是池中的任务没有完成，还没有超时(如果设置了超时)                    // take() 方法会阻塞，直到有元素返回，说明有任务结束了                        f = ecs.take();                }                // 有任务结束了                if (f != null) {                    –active;                    try {                        // 返回执行结果，如果有异常，都包装成 ExecutionException                        return f.get();                    } catch (ExecutionException eex) {                        ee = eex;                    } catch (RuntimeException rex) {                        ee = new ExecutionException(rex);                    }                }            }            if (ee == null)                ee = new ExecutionException();            throw ee;        } finally {            for (int i = 0, size = futures.size(); i &lt; size; i++)                futures.get(i).cancel(true);        }    }    public <t> T invokeAny(Collection&lt;? extends Callable<t>&gt; tasks)        throws InterruptedException, ExecutionException {        try {            return doInvokeAny(tasks, false, 0);        } catch (TimeoutException cannotHappen) {            assert false;            return null;        }    }    public <t> T invokeAny(Collection&lt;? extends Callable<t>&gt; tasks,                           long timeout, TimeUnit unit)        throws InterruptedException, ExecutionException, TimeoutException {        return doInvokeAny(tasks, true, unit.toNanos(timeout));    }      // 执行所有的任务，返回任务结果。    // 先不要看这个方法，我们先想想，其实我们自己提交任务到线程池，也是想要线程池执行所有的任务    // 只不过，我们是每次 submit 一个任务，这里以一个集合作为参数提交    public <t> List&lt;Future<t>&gt; invokeAll(Collection&lt;? extends Callable<t>&gt; tasks)        throws InterruptedException {        if (tasks == null)            throw new NullPointerException();        ArrayList&lt;Future<t>&gt; futures = new ArrayList&lt;Future<t>&gt;(tasks.size());        boolean done = false;        try {            for (Callable<t> t : tasks) {                RunnableFuture<t> f = newTaskFor(t);                futures.add(f);                execute(f);            }            for (int i = 0, size = futures.size(); i &lt; size; i++) {                Future<t> f = futures.get(i);                if (!f.isDone()) {                    try {                       // 这是一个阻塞方法，直到获取到值，或抛出了异常                       // 这里有个小细节，其实 get 方法签名上是会抛出 InterruptedException 的                       // 可是这里没有进行处理，而是抛给外层去了。此异常发生于还没执行完的任务被取消了                        f.get();                    } catch (CancellationException ignore) {                    } catch (ExecutionException ignore) {                    }                }            }            done = true;            return futures;        } finally {            if (!done)                for (int i = 0, size = futures.size(); i &lt; size; i++)                    futures.get(i).cancel(true);        }    }    public <t> List&lt;Future<t>&gt; invokeAll(Collection&lt;? extends Callable<t>&gt; tasks,                                         long timeout, TimeUnit unit)        throws InterruptedException {        if (tasks == null)            throw new NullPointerException();        long nanos = unit.toNanos(timeout);        ArrayList&lt;Future<t>&gt; futures = new ArrayList&lt;Future<t>&gt;(tasks.size());        boolean done = false;        try {            for (Callable<t> t : tasks)                futures.add(newTaskFor(t));            final long deadline = System.nanoTime() + nanos;            final int size = futures.size();            // Interleave time checks and calls to execute in case            // executor doesn’t have any/much parallelism.            for (int i = 0; i &lt; size; i++) {                execute((Runnable)futures.get(i));                nanos = deadline - System.nanoTime();                if (nanos &lt;= 0L)                    return futures;            }            for (int i = 0; i &lt; size; i++) {                Future<t> f = futures.get(i);                if (!f.isDone()) {                    if (nanos &lt;= 0L)                        return futures;                    try {                        f.get(nanos, TimeUnit.NANOSECONDS);                    } catch (CancellationException ignore) {                    } catch (ExecutionException ignore) {                    } catch (TimeoutException toe) {                        return futures;                    }                    nanos = deadline - System.nanoTime();                }            }            done = true;            return futures;        } finally {            if (!done)                for (int i = 0, size = futures.size(); i &lt; size; i++)                    futures.get(i).cancel(true);        }    }}`</t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></void></t></t></t></t></t></t></t></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 4.</span><br></pre></td></tr></table></figure><p>java/*<em>     </em> The main pool control state, ctl, is an atomic integer packing     <em> two conceptual fields     </em>   workerCount, indicating the effective number of threads     <em>   runState,    indicating whether running, shutting down etc     </em>     <em> In order to pack them into one int, we limit workerCount to     </em> (2^29)-1 (about 500 million) threads rather than (2^31)-1 (2     <em> billion) otherwise representable. If this is ever an issue in     </em> the future, the variable can be changed to be an AtomicLong,     <em> and the shift/mask constants below adjusted. But until the need     </em> arises, this code is a bit faster and simpler using an int.     <em>     </em> The workerCount is the number of workers that have been     <em> permitted to start and not permitted to stop.  The value may be     </em> transiently different from the actual number of live threads,     <em> for example when a ThreadFactory fails to create a thread when     </em> asked, and when exiting threads are still performing     <em> bookkeeping before terminating. The user-visible pool size is     </em> reported as the current size of the workers set.     <em>     </em> The runState provides the main lifecycle control, taking on values:     <em>     </em>   RUNNING:  Accept new tasks and process queued tasks     <em>   SHUTDOWN: Don’t accept new tasks, but process queued tasks     </em>   STOP:     Don’t accept new tasks, don’t process queued tasks,     <em>             and interrupt in-progress tasks     </em>   TIDYING:  All tasks have terminated, workerCount is zero,     <em>             the thread transitioning to state TIDYING     </em>             will run the terminated() hook method     <em>   TERMINATED: terminated() has completed     </em>     <em> The numerical order among these values matters, to allow     </em> ordered comparisons. The runState monotonically increases over     <em> time, but need not hit each state. The transitions are:     </em>     <em> RUNNING -&gt; SHUTDOWN     </em>    On invocation of shutdown(), perhaps implicitly in finalize()     <em> (RUNNING or SHUTDOWN) -&gt; STOP     </em>    On invocation of shutdownNow()     <em> SHUTDOWN -&gt; TIDYING     </em>    When both queue and pool are empty     <em> STOP -&gt; TIDYING     </em>    When pool is empty     <em> TIDYING -&gt; TERMINATED     </em>    When the terminated() hook method has completed     <em>     </em> Threads waiting in awaitTermination() will return when the     <em> state reaches TERMINATED.     </em>     <em> Detecting the transition from SHUTDOWN to TIDYING is less     </em> straightforward than you’d like because the queue may become     <em> empty after non-empty and vice versa during SHUTDOWN state, but     </em> we can only terminate if, after seeing that it is empty, we see     <em> that workerCount is 0 (which sometimes entails a recheck – see     </em> below).     <em>/    private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));public void execute(Runnable command) {        if (command == null)            throw new NullPointerException();        /</em>         <em> Proceed in 3 steps:         </em>         <em> 1. If fewer than corePoolSize threads are running, try to         </em> start a new thread with the given command as its first         <em> task.  The call to addWorker atomically checks runState and         </em> workerCount, and so prevents false alarms that would add         <em> threads when it shouldn’t, by returning false.         </em>         <em> 2. If a task can be successfully queued, then we still need         </em> to double-check whether we should have added a thread         <em> (because existing ones died since last checking) or that         </em> the pool shut down since entry into this method. So we         <em> recheck state and if necessary roll back the enqueuing if         </em> stopped, or start a new thread if there are none.         <em>         </em> 3. If we cannot queue task, then we try to add a new         <em> thread.  If it fails, we know we are shut down or saturated         </em> and so reject the task.         */        int c = ctl.get();        if (workerCountOf(c) &lt; corePoolSize) {            if (addWorker(command, true))                return;            c = ctl.get();        }        if (isRunning(c) &amp;&amp; workQueue.offer(command)) {            int recheck = ctl.get();            if (! isRunning(recheck) &amp;&amp; remove(command))                reject(command);            else if (workerCountOf(recheck) == 0)                addWorker(null, false);        }        else if (!addWorker(command, false))            reject(command);    }<code>``</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: java-线程池&lt;br&gt;date: 2019-04-10 10:32:39&lt;br&gt;tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;java&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-线程池的关系&quot;&gt;&lt;a href=&quot;#1-线程池的关系&quot; class=&quot;headerlin
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python中and和or用法</title>
    <link href="http://wumuwumu.github.io/2019/10/25/python/python%E4%B8%ADand%E5%92%8Cor%E7%94%A8%E6%B3%95/"/>
    <id>http://wumuwumu.github.io/2019/10/25/python/python中and和or用法/</id>
    <published>2019-10-25T07:41:30.000Z</published>
    <updated>2019-10-25T07:44:07.393Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="http://lib.csdn.net/base/python" target="_blank" rel="noopener">Python</a> 中，and 和 or 执行布尔逻辑演算，如你所期待的一样。但是它们并不返回布尔值，而是返回它们实际进行比较的值之一。</p><p>（类似C++里面的&amp;&amp;和||的短路求值）</p><p>（ 在布尔环境中，0、”、[]、()、{}、None为假；其它任何东西都为真。但是可以在类中定义特定的方法使得类实例的演算值为假。）</p><h1 id="and实例："><a href="#and实例：" class="headerlink" title="and实例："></a>and实例：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a'</span> <span class="keyword">and</span> <span class="string">'b'</span></span><br><span class="line"><span class="string">'b'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span> <span class="keyword">and</span> <span class="string">'b'</span></span><br><span class="line"><span class="string">''</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a'</span> <span class="keyword">and</span> <span class="string">'b'</span> <span class="keyword">and</span> <span class="string">'c'</span></span><br><span class="line"><span class="string">'c'</span><span class="number">12345</span></span><br></pre></td></tr></table></figure><p>从左到右扫描，返回第一个为假的表达式值，无假值则返回最后一个表达式值。</p><h1 id="or实例："><a href="#or实例：" class="headerlink" title="or实例："></a>or实例：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a'</span> <span class="keyword">or</span> <span class="string">'b'</span></span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span> <span class="keyword">or</span> <span class="string">'b'</span></span><br><span class="line"><span class="string">'b'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span> <span class="keyword">or</span> [] <span class="keyword">or</span>&#123;&#125;</span><br><span class="line">&#123;&#125;<span class="number">12345</span></span><br></pre></td></tr></table></figure><p>从左到右扫描，返回第一个为真的表达式值，无真值则返回最后一个表达式值。</p><h1 id="and-or搭配："><a href="#and-or搭配：" class="headerlink" title="and-or搭配："></a>and-or搭配：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"betabin"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">"python"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="keyword">and</span> a <span class="keyword">or</span> b</span><br><span class="line"><span class="string">'betabin'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span> <span class="keyword">and</span> a <span class="keyword">or</span> b</span><br><span class="line"><span class="string">'python'</span><span class="number">12345</span></span><br></pre></td></tr></table></figure><p>看起来类似于于我们Ｃ＋＋中的条件运算符（bool？a：b），是的，当a为true的时候是一样的。但是，当a为false的时候，就明显不同了。</p><p>如果坚持要用and-or技巧来实现条件运算符的话，可以用种安全的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">""</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">"betabin"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">1</span> <span class="keyword">and</span> [a] <span class="keyword">or</span> [b])[<span class="number">0</span>]</span><br><span class="line"><span class="string">''</span><span class="number">123</span></span><br></pre></td></tr></table></figure><p>就是万能的[]，把a为假的可能性给抹杀掉，然后通过[0]再获得（因为要通过[0]获得元素，所以b也得加上[]）。</p><p>这个and-or技巧主要在lambda中使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在&lt;a href=&quot;http://lib.csdn.net/base/python&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python&lt;/a&gt; 中，and 和 or 执行布尔逻辑演算，如你所期待的一样。但是它们并不返回布尔值，而是返回它们实际进行比
      
    
    </summary>
    
    
      <category term="python" scheme="http://wumuwumu.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>使用jenv对java多版本管理</title>
    <link href="http://wumuwumu.github.io/2019/10/25/java/%E4%BD%BF%E7%94%A8jenv%E5%AF%B9java%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    <id>http://wumuwumu.github.io/2019/10/25/java/使用jenv对java多版本管理/</id>
    <published>2019-10-25T02:42:43.000Z</published>
    <updated>2019-10-25T02:44:27.960Z</updated>
    
    <content type="html"><![CDATA[<ul><li>配置JDK环境变量</li></ul><p>打开 vim ~/.bash_profile 文件 进行添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_8_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home</span><br><span class="line"><span class="built_in">export</span> JAVA_7_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home</span><br><span class="line"><span class="comment"># 默认激活 jdk8</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=<span class="variable">$JAVA_8_HOME</span></span><br></pre></td></tr></table></figure><p>编辑完成，重新加载 .bash_profile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source ~/.bash_profile</span><br></pre></td></tr></table></figure><h4 id="jEnv安装"><a href="#jEnv安装" class="headerlink" title="jEnv安装"></a>jEnv安装</h4><ul><li>安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install jenv</span><br></pre></td></tr></table></figure><ul><li>配置</li></ul><p>安装了zsh，配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo &apos;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrc</span><br><span class="line">$ echo &apos;eval &quot;$(jenv init -)&quot;&apos; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><p>如果是默认的bash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo &apos;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&apos; &gt;&gt; ~/.bash_profile</span><br><span class="line">$ echo &apos;eval &quot;$(jenv init -)&quot;&apos; &gt;&gt; ~/.bash_profilec</span><br></pre></td></tr></table></figure><h4 id="jEnv配置JDK"><a href="#jEnv配置JDK" class="headerlink" title="jEnv配置JDK"></a>jEnv配置JDK</h4><p>查看安装的java版本，如果我们一开始未添加jdk，执行jenv versions 应该是空的，* 号位置表示当前的jdk版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ jenv versions</span><br><span class="line">  system</span><br><span class="line">  1.7</span><br><span class="line">* 1.7.0.80 (<span class="built_in">set</span> by /Users/gulj/.java-version)</span><br><span class="line">  1.8</span><br><span class="line">  1.8.0.112</span><br><span class="line">  oracle64-1.7.0.80</span><br><span class="line">  oracle64-1.8.0.112</span><br></pre></td></tr></table></figure><p>重启下terminal，为jEnv添加java版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">添加jdk7</span><br><span class="line">$ jenv add /Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home</span><br><span class="line">添加jdk8</span><br><span class="line">$ jenv add /Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home</span><br></pre></td></tr></table></figure><blockquote><p>添加完jdk7和jdk8之后，再执行 <strong>jenv versions</strong> 命令就会看到我们添加的jdk</p></blockquote><h4 id="jEnv常用命令"><a href="#jEnv常用命令" class="headerlink" title="jEnv常用命令"></a>jEnv常用命令</h4><ul><li>移除指定版本jdk</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jenv remove 1.8.0.111</span><br></pre></td></tr></table></figure><ul><li>选择一个jdk版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jenv local 1.8.0.111</span><br></pre></td></tr></table></figure><ul><li>设置默认的jdk版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jenv global 1.8.0.111</span><br></pre></td></tr></table></figure><ul><li>查看当前版本jdk的路径</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jenv which java</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;配置JDK环境变量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;打开 vim ~/.bash_profile 文件 进行添加&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="java" scheme="http://wumuwumu.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>react-tree-walker学习</title>
    <link href="http://wumuwumu.github.io/2019/10/19/react-tree-walker%E5%AD%A6%E4%B9%A0/"/>
    <id>http://wumuwumu.github.io/2019/10/19/react-tree-walker学习/</id>
    <published>2019-10-19T09:02:13.000Z</published>
    <updated>2019-10-25T02:20:42.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="react-tree-walker"><a href="#react-tree-walker" class="headerlink" title="react-tree-walker"></a><code>react-tree-walker</code></h1><p>这个主要用于遍历react的dom树，用于在react服务端渲染数据请求的时候。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> reactTreeWalker <span class="keyword">from</span> <span class="string">'react-tree-walker'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataFetcher</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.getData = <span class="keyword">this</span>.getData.bind(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getData() &#123;</span><br><span class="line">    <span class="comment">// Supports promises! You could call an API for example to fetch some</span></span><br><span class="line">    <span class="comment">// data, or do whatever "bootstrapping" you desire.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="keyword">this</span>.props.id)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;Hello World!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    &lt;DataFetcher id=&#123;<span class="number">1</span>&#125; /&gt;</span><br><span class="line">    &lt;DataFetcher id=&#123;<span class="number">2</span>&#125;&gt;</span><br><span class="line">      &lt;DataFetcher id=&#123;<span class="number">3</span>&#125;&gt;</span><br><span class="line">        &lt;DataFetcher id=&#123;<span class="number">4</span>&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/DataFetcher&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>DataFetcher&gt;</span><br><span class="line">    &lt;DataFetcher id=&#123;<span class="number">5</span>&#125; /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const values = []</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ You provide this! See the API docs below for full details.</span></span><br><span class="line"><span class="regexp">function visitor(element, instance) &#123;</span></span><br><span class="line"><span class="regexp">  if (instance &amp;&amp; typeof instance.getData) &#123;</span></span><br><span class="line"><span class="regexp">    return instance.getData().then(value =&gt; &#123;</span></span><br><span class="line"><span class="regexp">      values.push(value)</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ Return "false" to indicate that we do not want to visit "3"'s children,</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ therefore we do not expect "4" to make it into our values array.</span></span><br><span class="line"><span class="regexp">      return value !== 3</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">reactTreeWalker(app, visitor)</span></span><br><span class="line"><span class="regexp">  .then(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    console.log(values) /</span><span class="regexp">/ [1, 2, 3, 5];</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ Now is a good time to call React's renderToString whilst exposing</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ whatever values you built up to your app.</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ since v3.0.0 you need to do your own error handling!</span></span><br><span class="line"><span class="regexp">  .catch(err =&gt; console.error(err))</span></span><br></pre></td></tr></table></figure><h1 id="react-ssr-prepass"><a href="#react-ssr-prepass" class="headerlink" title="react-ssr-prepass"></a><code>react-ssr-prepass</code></h1><p>这个项目还在维护，是一个不错的选择</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-ssr-prepass</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">npm install --save react-ssr-prepass</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createElement &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; renderToString &#125; <span class="keyword">from</span> <span class="string">'react-dom/server'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ssrPrepass <span class="keyword">from</span> <span class="string">'react-ssr-prepass'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> renderApp = <span class="keyword">async</span> App =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> element = createElement(App)</span><br><span class="line">  <span class="keyword">await</span> ssrPrepass(element)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> renderToString(element)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ssrPrepass(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>, (element, instance) =&gt; &#123;</span></span><br><span class="line"><span class="xml">  if (element.type === SomeData) &#123;</span></span><br><span class="line"><span class="xml">    return fetchData()</span></span><br><span class="line"><span class="xml">  &#125; else if (instance &amp;&amp; instance.fetchData) &#123;</span></span><br><span class="line"><span class="xml">    return instance.fetchData()</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;react-tree-walker&quot;&gt;&lt;a href=&quot;#react-tree-walker&quot; class=&quot;headerlink&quot; title=&quot;react-tree-walker&quot;&gt;&lt;/a&gt;&lt;code&gt;react-tree-walker&lt;/code&gt;&lt;/h1&gt;
      
    
    </summary>
    
    
      <category term="react" scheme="http://wumuwumu.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>weboack性能优化笔记</title>
    <link href="http://wumuwumu.github.io/2019/10/18/weboack%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AC%94%E8%AE%B0/"/>
    <id>http://wumuwumu.github.io/2019/10/18/weboack性能优化笔记/</id>
    <published>2019-10-18T03:52:51.000Z</published>
    <updated>2019-10-25T02:20:54.751Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.im/post/5b652b036fb9a04fa01d616b" target="_blank" rel="noopener">https://juejin.im/post/5b652b036fb9a04fa01d616b</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5b652b036fb9a04fa01d616b&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://juejin.im/post/5b652b036fb9a04fa01d616b&lt;
      
    
    </summary>
    
    
      <category term="js" scheme="http://wumuwumu.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>lodash按需加载</title>
    <link href="http://wumuwumu.github.io/2019/10/18/lodash%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD/"/>
    <id>http://wumuwumu.github.io/2019/10/18/lodash按需加载/</id>
    <published>2019-10-18T03:48:59.000Z</published>
    <updated>2019-10-25T02:20:23.073Z</updated>
    
    <content type="html"><![CDATA[<p>lodash提供了很多可用的方法供我们使用，绝对是一个很好用且用起来得心应手的工具库。但是同时，lodash的体积也不小，我们项目中使用的大概522K，可能只是使用了几个方法，但是却把整个lodash库引入了。为了吃几条鱼，就承包了整个鱼塘，代价有点大呀！</p><p>对于这个问题，有几种方案可供选择。</p><p><strong>一.引入单个函数</strong></p><p>　lodash整个安装完之后，引用方式： lodash/function 格式，单独引入某个函数，如</p><p>let _trim= require(‘lodash/trim’) 或者 import trim from ‘lodash/trim’ </p><p>　或者 lodash 中的每个函数在 NPM 都有一个单独的发布模块，单独安装并引用部分模块，然后按以下方式引用</p><p>let _trim= require(‘lodash.trim’) 或者 import trim from ‘lodash.trim’ </p><p>trim(‘ 123123 ‘)</p><p><strong>二.借助 lodash-webpack-plugin，babel-plugin-lodash插件优化</strong></p><p>　　使用上述两种方式，在使用较多个lodash中方法的情况下，不太美观，且并不方便。那么我们可以借助于lodash-webpack-plugin，去除未引入的模块，需要和babel-plugin-lodash插件配合使用。类似于webpack的tree-shaking。</p><p>　　1）安装插件：npm i -S lodash-webpack-plugin babel-plugin-lodash</p><p>　　2）webpack.conf.js中</p><p>　　var LodashModuleReplacementPlugin = require(‘lodash-webpack-plugin’)</p><p>　　plugins: [ new LodashModuleReplacementPlugin()]</p><p>3）.babelrc中配置 “plugins”: [“transform-runtime”,”transform-vue-jsx”,”lodash”]</p><p>　　或者在webpack.conf.js的rules配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: /\.(js|jsx)$/,</span><br><span class="line">  loader: &apos;babel-loader&apos;,</span><br><span class="line">  exclude: /node_modules/,</span><br><span class="line">  include: [resolve(&apos;src&apos;), resolve(&apos;test&apos;)]</span><br><span class="line">  options: &#123;plugins: [&apos;lodash&apos;]&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>三.lodash-es结合tree-shaking</strong></p><p>lodash-es 是着具备 ES6 模块化的版本，只需要直接引入就可以。</p><p>import {isEmpty,forIn, cloneDeep} from ‘lodash-es’</p><p>tree-shaking的作用，即移除上下文中未引用的代码（dead code）</p><p>只有当函数给定输入后，产生相应的输出，且不修改任何外部的东西，才可以安全做shaking的操作</p><p>如何使用tree-shaking？</p><p>1）.确保代码是es6格式,即 export，import</p><p>2）.package.json中，设置sideEffects</p><p>3）.确保tree-shaking的函数没有副作用</p><p>4）.babelrc中设置presets [[“env”, { “modules”: false }]] 禁止转换模块，交由webpack进行模块化处理</p><p>5）.结合uglifyjs-webpack-plugin</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;lodash提供了很多可用的方法供我们使用，绝对是一个很好用且用起来得心应手的工具库。但是同时，lodash的体积也不小，我们项目中使用的大概522K，可能只是使用了几个方法，但是却把整个lodash库引入了。为了吃几条鱼，就承包了整个鱼塘，代价有点大呀！&lt;/p&gt;
&lt;p&gt;对
      
    
    </summary>
    
    
      <category term="js" scheme="http://wumuwumu.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>babel配置</title>
    <link href="http://wumuwumu.github.io/2019/10/18/babel%E9%85%8D%E7%BD%AE/"/>
    <id>http://wumuwumu.github.io/2019/10/18/babel配置/</id>
    <published>2019-10-18T03:21:01.000Z</published>
    <updated>2019-10-25T02:19:31.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Babel6"><a href="#Babel6" class="headerlink" title="Babel6"></a>Babel6</h1><p>Babel6 现在使用的越来越少了，但是还是做一个笔记，现在基本都使用<code>babel-preset-env</code>，不需要写<code>babel-preset-esxxxx</code>了，但是<code>babel-preset-stage-x</code>还是要自己去加的。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D babel-cli babel-preset-env</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>Babel6的配置文件是<code>.babelrc</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    //https://juejin.im/post/5a79adeef265da4e93116430</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Babel7"><a href="#Babel7" class="headerlink" title="Babel7"></a>Babel7</h1><p>Babel7 相对于babel6有很大的变化，相关的模块的名字有很大的变化，官方舍弃了<code>babel-preset-esxxxx</code>和<code>babel-preset-stage-x</code>，后者的原因是提案一直在变化。</p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D @babel/cli @babel/react @babel/plugin-transform-runtime @babel/env</span><br></pre></td></tr></table></figure><h2 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h2><p>Babel7有两种配置文件，一个是<code>.babelrc</code>，是局部的，另外一个是<code>babel.config.js</code>是全局的，具体的可以看下官网。7版本的配置文件解析也变得更加严格。</p><p>### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Babel6&quot;&gt;&lt;a href=&quot;#Babel6&quot; class=&quot;headerlink&quot; title=&quot;Babel6&quot;&gt;&lt;/a&gt;Babel6&lt;/h1&gt;&lt;p&gt;Babel6 现在使用的越来越少了，但是还是做一个笔记，现在基本都使用&lt;code&gt;babel-preset-
      
    
    </summary>
    
    
      <category term="js" scheme="http://wumuwumu.github.io/tags/js/"/>
    
      <category term="babel" scheme="http://wumuwumu.github.io/tags/babel/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://wumuwumu.github.io/2019/10/14/hello-world/"/>
    <id>http://wumuwumu.github.io/2019/10/14/hello-world/</id>
    <published>2019-10-14T09:01:07.430Z</published>
    <updated>2019-10-14T09:01:07.433Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>php5环境搭建</title>
    <link href="http://wumuwumu.github.io/2019/09/02/php5%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://wumuwumu.github.io/2019/09/02/php5环境搭建/</id>
    <published>2019-09-02T15:14:11.000Z</published>
    <updated>2019-10-14T09:01:08.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><h1 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装php</h1><p>remi源可以获取更高的版本，php-fpm是要启动的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm</span><br><span class="line">yum install --enablerepo=remi --enablerepo=remi-php56 php php-fpm</span><br><span class="line">yum install --enablerepo=remi --enablerepo=remi-php56 php-opcache php-mbstring php-mysql* php-gd php-redis php-mcrypt php-xml php-redis</span><br></pre></td></tr></table></figure><h1 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  www.test.com test.com;</span><br><span class="line">    <span class="attribute">root</span>     /data/www/Public;</span><br><span class="line">    <span class="attribute">index</span>  index.php index.html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$args</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ index.php</span> &#123;</span><br><span class="line">        <span class="attribute">fastcgi_connect_timeout</span> <span class="number">20s</span>;     <span class="comment"># default of 60s is just too long</span></span><br><span class="line">        <span class="attribute">fastcgi_read_timeout</span> <span class="number">20s</span>;       <span class="comment"># default of 60s is just too long</span></span><br><span class="line">        <span class="attribute">include</span> fastcgi_params;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:9000</span>;    <span class="comment"># assumes you are running php-fpm locally on port 9000</span></span><br><span class="line">        <span class="attribute">fastcgi_param</span>  PHP_VALUE  <span class="string">"open_basedir=/data/www/:/data/www/Data:/tmp/"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="开启php的日志"><a href="#开启php的日志" class="headerlink" title="开启php的日志"></a>开启php的日志</h1><ol><li><p>修改 php-fpm.conf 文件，添加（或修改）如下配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">  <span class="attribute">error_log</span> = log/error_log</span><br><span class="line"></span><br><span class="line">  [www]</span><br><span class="line">  catch_workers_output = <span class="literal">yes</span></span><br></pre></td></tr></table></figure></li><li><p>修改 php.ini 文件，添加（或修改）如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log_errors = On</span><br><span class="line">error_log = &quot;/usr/local/lnmp/php/var/log/error_log&quot;</span><br><span class="line">error_reporting=E_ALL&amp;~E_NOTICE</span><br></pre></td></tr></table></figure></li><li><p>重启 php-fpm </p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装nginx&quot;&gt;&lt;a href=&quot;#安装nginx&quot; class=&quot;headerlink&quot; title=&quot;安装nginx&quot;&gt;&lt;/a&gt;安装nginx&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>linux压缩</title>
    <link href="http://wumuwumu.github.io/2019/09/02/linux%E5%8E%8B%E7%BC%A9/"/>
    <id>http://wumuwumu.github.io/2019/09/02/linux压缩/</id>
    <published>2019-09-02T14:46:45.000Z</published>
    <updated>2019-10-14T09:01:07.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包</span></span><br><span class="line">tar -cvf xx.tar dirName</span><br><span class="line"><span class="comment"># 解包</span></span><br><span class="line">tar -xvf  xx.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># .gz</span></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">gunzip fileName.gz</span><br><span class="line">gzip -d fileName.gz</span><br><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">gzip fileName</span><br><span class="line"></span><br><span class="line"><span class="comment"># .tar.gz 和.tgz</span></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar zxvf fileName.tar.gz</span><br><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">tar zcvf filename.tar.gz dirName</span><br><span class="line"></span><br><span class="line"><span class="comment"># bz2</span></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">bzip2 -d fileName.bz</span><br><span class="line">bunzip2 fileName.bz</span><br><span class="line"></span><br><span class="line"><span class="comment"># .tar.bz</span></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar jxvf fileName.tar.bz</span><br><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">tar jcvf fileName.tar.bz dirName</span><br></pre></td></tr></table></figure><h1 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install zip unzip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">unzip mydata.zip -d mydatabak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">zip -r abc123.zip abc 123.txt</span><br></pre></td></tr></table></figure><h1 id="rar"><a href="#rar" class="headerlink" title="rar"></a>rar</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">wget http://www.rarlab.com/rar/rarlinux-x64-5.3.0.tar.gz</span><br><span class="line">tar -zxvf rarlinux-x64-5.3.0.tar.gz // 对应64位下载的</span><br><span class="line"><span class="built_in">cd</span> rar</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">rar x fileName.rar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">rar fileName.rar dirName</span><br></pre></td></tr></table></figure><h1 id="7z"><a href="#7z" class="headerlink" title="7z"></a>7z</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install p7zip p7zip-plugins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">7za a 压缩包.7z 被压缩文件或目录</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line"><span class="comment">#将压缩包解压到指定目录，注意：指定目录参数-o后面不要有空格</span></span><br><span class="line">7za x 压缩包.7z -o解压目录</span><br><span class="line"><span class="comment">#将压缩包解压到当前目录</span></span><br><span class="line">7za x 压缩包.7z</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;tar&quot;&gt;&lt;a href=&quot;#tar&quot; class=&quot;headerlink&quot; title=&quot;tar&quot;&gt;&lt;/a&gt;tar&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp
      
    
    </summary>
    
    
      <category term="linux" scheme="http://wumuwumu.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>nginx伪静态</title>
    <link href="http://wumuwumu.github.io/2019/09/02/nginx/nginx%E4%BC%AA%E9%9D%99%E6%80%81/"/>
    <id>http://wumuwumu.github.io/2019/09/02/nginx/nginx伪静态/</id>
    <published>2019-09-02T14:26:40.000Z</published>
    <updated>2019-10-14T09:01:07.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="伪静态"><a href="#伪静态" class="headerlink" title="伪静态"></a>伪静态</h1><p>伪静态是一种可以把文件后缀改成任何可能的一种方法，如果我想把PHP文件伪静态成html文件，这种相当简单的。<br>nginx里使用伪静态是直接在nginx.conf 中写规则的，而apache要开启写模块(mod_rewrite)才能进行伪静态。<br>nginx只需要打开nginx.conf配置文件,然后在里面写需要的规则就可以了。</p><p><strong>1、Nginx伪静态案例：（Nginx用伪静态是不需要配置的）</strong></p><p>找到nginx.conf配置文件：nginx.conf，然后打开，找到server {} 在里面加上：</p><p>下面加的意思是隐藏掉index.php：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;         </span><br><span class="line">    <span class="comment"># 其他的一些规则，自己加</span></span><br><span class="line">    if(!-e $request_filename) &#123;         </span><br><span class="line">        <span class="attribute">rewrite</span> <span class="regexp"> ^(.*)$</span>  /index.php?s=<span class="variable">$1</span>  <span class="literal">last</span>; </span><br><span class="line">        break;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、每个网站独立的配置文件（独立的伪静态规则）：</strong></p><p>我们正常的时候每个网站都会有独立的配置文件，直接去改配置文件就好了。然后nginx.conf引入他们所有的配置文件就好了：</p><p>如：在nginx.conf配置文件最下面添加以下代码：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">include</span> vhost/<span class="regexp">*.conf</span>;</span><br></pre></td></tr></table></figure><p>说明：引入nginx.conf配置文件所在目录下vhost目录下的所有以.conf的配置文件！</p><p>以下就是其中一个网站的配置文件内容：规则就是隐藏掉index.php</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">root</span> /www/web/admin/public;</span><br><span class="line">        <span class="attribute">server_name</span> www.admin.com;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.php index.htm;</span><br><span class="line">        <span class="attribute">error_page</span>  <span class="number">400</span> /errpage/<span class="number">400</span>.html;</span><br><span class="line">        <span class="attribute">error_page</span>  <span class="number">403</span> /errpage/<span class="number">403</span>.html;</span><br><span class="line">        <span class="attribute">error_page</span>  <span class="number">404</span> /errpage/<span class="number">404</span>.html;</span><br><span class="line">        <span class="attribute">error_page</span>  <span class="number">503</span> /errpage/<span class="number">503</span>.html;</span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">                <span class="attribute">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">                <span class="attribute">fastcgi_index</span>  index.php;</span><br><span class="line">                <span class="attribute">include</span> fcgi.conf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ /\.ht</span> &#123;</span><br><span class="line">                <span class="attribute">deny</span>  all;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">location</span> / &#123; </span><br><span class="line">            <span class="attribute">if</span> (!-e <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">                 <span class="attribute">rewrite</span> <span class="regexp"> ^(.*)$</span>  /index.php?s=<span class="variable">$1</span>  <span class="literal">last</span>;</span><br><span class="line">                 break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="nginx-url重写"><a href="#nginx-url重写" class="headerlink" title="nginx url重写"></a>nginx url重写</h1><p>url重写是指通过配置conf文件，以让网站的url中达到某种状态时则定向/跳转到某个规则，比如常见的伪静态、301重定向、浏览器定向等</p><h2 id="rewrite"><a href="#rewrite" class="headerlink" title="rewrite"></a>rewrite</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>在配置文件的<code>server</code>块中写，如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;   </span><br><span class="line">    <span class="attribute">rewrite</span> 规则 定向路径 重写类型;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>规则：可以是字符串或者正则来表示想匹配的目标url</li><li>定向路径：表示匹配到规则后要定向的路径，如果规则里有正则，则可以使用<code>$index</code>来表示正则里的捕获分组</li><li>重写类型：<ul><li>last ：相当于Apache里德(L)标记，表示完成rewrite，浏览器地址栏URL地址不变</li><li>break；本条规则匹配完成后，终止匹配，不再匹配后面的规则，浏览器地址栏URL地址不变</li><li>redirect：返回302临时重定向，浏览器地址会显示跳转后的URL地址</li><li>permanent：返回301永久重定向，浏览器地址栏会显示跳转后的URL地址</li></ul></li></ul><h3 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment"># 访问 /last.html 的时候，页面内容重写到 /index.html 中</span></span><br><span class="line">    <span class="attribute">rewrite</span> /last.html /index.html <span class="literal">last</span>;</span><br><span class="line">    <span class="comment"># 访问 /break.html 的时候，页面内容重写到 /index.html 中，并停止后续的匹配</span></span><br><span class="line">    <span class="attribute">rewrite</span> /break.html /index.html <span class="literal">break</span>;</span><br><span class="line">    <span class="comment"># 访问 /redirect.html 的时候，页面直接302定向到 /index.html中</span></span><br><span class="line">    <span class="attribute">rewrite</span> /redirect.html /index.html <span class="literal">redirect</span>;</span><br><span class="line">    <span class="comment"># 访问 /permanent.html 的时候，页面直接301定向到 /index.html中</span></span><br><span class="line">    <span class="attribute">rewrite</span> /permanent.html /index.html <span class="literal">permanent</span>;</span><br><span class="line">    <span class="comment"># 把 /html/*.html =&gt; /post/*.html ，301定向</span></span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/html/(.+?).html$</span> /post/<span class="variable">$1</span>.html <span class="literal">permanent</span>;</span><br><span class="line">    <span class="comment"># 把 /search/key =&gt; /search.html?keyword=key</span></span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/search\/([^\/]+?)(\/|$)</span> /search.html?keyword=<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="last和break的区别"><a href="#last和break的区别" class="headerlink" title="last和break的区别"></a>last和break的区别</h4><p>因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里 last 和 break 区别有点难以理解：</p><ul><li>last一般写在server和if中，而break一般使用在location中</li><li>last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配</li><li>break和last都能组织继续执行后面的rewrite指令</li></ul><p>在<code>location</code>里一旦返回<code>break</code>则直接生效并停止后续的匹配<code>location</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">rewrite</span> /last/ /q.html <span class="literal">last</span>;</span><br><span class="line">        <span class="attribute">rewrite</span> /break/ /q.html <span class="literal">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> = /q.html &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">400</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>访问<code>/last/</code>时重写到<code>/q.html</code>，然后使用新的<code>uri</code>再匹配，正好匹配到<code>locatoin = /q.html</code>然后返回了<code>400</code></li><li>访问<code>/break</code>时重写到<code>/q.html</code>，由于返回了<code>break</code>，则直接停止了</li></ul><h2 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h2><p>只是上面的简单重写很多时候满足不了需求，比如需要判断当文件不存在时、当路径包含xx时等条件，则需要用到<code>if</code></p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (表达式) &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false</li><li>直接比较变量和内容时，使用=或!=</li><li>~正则表达式匹配，~*不区分大小写的匹配，!~区分大小写的不匹配</li></ul><p>一些内置的条件判断：</p><ul><li>-f和!-f用来判断是否存在文件</li><li>-d和!-d用来判断是否存在目录</li><li>-e和!-e用来判断是否存在文件或目录</li><li>-x和!-x用来判断文件是否可执行</li></ul><h3 id="内置的全局变量"><a href="#内置的全局变量" class="headerlink" title="内置的全局变量"></a>内置的全局变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$args ：这个变量等于请求行中的参数，同$query_string</span><br><span class="line">$content_length ： 请求头中的Content-length字段。</span><br><span class="line">$content_type ： 请求头中的Content-Type字段。</span><br><span class="line">$document_root ： 当前请求在root指令中指定的值。</span><br><span class="line">$host ： 请求主机头字段，否则为服务器名称。</span><br><span class="line">$http_user_agent ： 客户端agent信息</span><br><span class="line">$http_cookie ： 客户端cookie信息</span><br><span class="line">$limit_rate ： 这个变量可以限制连接速率。</span><br><span class="line">$request_method ： 客户端请求的动作，通常为GET或POST。</span><br><span class="line">$remote_addr ： 客户端的IP地址。</span><br><span class="line">$remote_port ： 客户端的端口。</span><br><span class="line">$remote_user ： 已经经过Auth Basic Module验证的用户名。</span><br><span class="line">$request_filename ： 当前请求的文件路径，由root或alias指令与URI请求生成。</span><br><span class="line">$scheme ： HTTP方法（如http，https）。</span><br><span class="line">$server_protocol ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</span><br><span class="line">$server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。</span><br><span class="line">$server_name ： 服务器名称。</span><br><span class="line">$server_port ： 请求到达服务器的端口号。</span><br><span class="line">$request_uri ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。</span><br><span class="line">$uri ： 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。</span><br><span class="line">$document_uri ： 与$uri相同。</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">访问链接是：http:<span class="comment">//localhost:88/test1/test2/test.php </span></span><br><span class="line">网站路径是：/var/www/html</span><br><span class="line"><span class="variable">$host</span>：localhost</span><br><span class="line"><span class="variable">$server_port</span>：<span class="number">88</span></span><br><span class="line"><span class="variable">$request_uri</span>：http:<span class="comment">//localhost:88/test1/test2/test.php</span></span><br><span class="line"><span class="variable">$document_uri</span>：/test1/test2/test.php</span><br><span class="line"><span class="variable">$document_root</span>：/var/www/html</span><br><span class="line"><span class="variable">$request_filename</span>：/var/www/html/test1/test2/test.php</span><br></pre></td></tr></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果文件不存在则返回400</span></span><br><span class="line"><span class="attribute">if</span> (!-f <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">400</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 如果host不是xuexb.com，则301到xuexb.com中</span></span><br><span class="line"><span class="attribute">if</span> ( <span class="variable">$host</span> != <span class="string">'xuexb.com'</span> )&#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> https://xuexb.com/<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 如果请求类型不是POST则返回405</span></span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$request_method</span> = POST) &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">405</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 如果参数中有 a=1 则301到指定域名</span></span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$args</span> <span class="regexp">~ a=1)</span> &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^</span> http://example.com/ <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在某种场景下可结合<code>location</code>规则来使用，如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问 /test.html 时</span></span><br><span class="line"><span class="attribute">location</span> = /test.html &#123;</span><br><span class="line">    <span class="comment"># 默认值为xiaowu</span></span><br><span class="line">    <span class="attribute">set</span> <span class="variable">$name</span> xiaowu;</span><br><span class="line">    <span class="comment"># 如果参数中有 name=xx 则使用该值</span></span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$args</span> <span class="regexp">~* name=(\w+?)(&amp;|$))</span> &#123;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$name</span> <span class="variable">$1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 301</span></span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^</span> /<span class="variable">$name</span>.html <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面表示：</p><ul><li>/test.html =&gt; /xiaowu.html</li><li>/test.html?name=ok =&gt; /ok.html?name=ok</li></ul><h2 id="location"><a href="#location" class="headerlink" title="location"></a>location</h2><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>在<code>server</code>块中使用，如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123; </span><br><span class="line">    <span class="attribute">location</span> 表达式 &#123;    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>location表达式类型</p><ul><li>如果直接写一个路径，则匹配该路径下的</li><li>~ 表示执行一个正则匹配，区分大小写</li><li>~* 表示执行一个正则匹配，不区分大小写</li><li>^~ 表示普通字符匹配。使用前缀匹配。如果匹配成功，则不再匹配其他location。</li><li>= 进行普通字符精确匹配。也就是完全匹配。</li></ul><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><ol><li>等号类型（=）的优先级最高。一旦匹配成功，则不再查找其他匹配项。</li><li>^~类型表达式。一旦匹配成功，则不再查找其他匹配项。</li><li>正则表达式类型（~ ~*）的优先级次之。如果有多个location的正则能匹配的话，则使用正则表达式最长的那个。</li><li>常规字符串匹配类型。按前缀匹配。</li></ol><h3 id="例子-假地址掩饰真地址"><a href="#例子-假地址掩饰真地址" class="headerlink" title="例子 - 假地址掩饰真地址"></a>例子 - 假地址掩饰真地址</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment"># 用 xxoo_admin 来掩饰 admin</span></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="comment"># 使用break拿一旦匹配成功则忽略后续location</span></span><br><span class="line">        <span class="attribute">rewrite</span> /xxoo_admin /admin <span class="literal">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 访问真实地址直接报没权限</span></span><br><span class="line">    <span class="attribute">location</span> /admin &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.toolnb.com/tools/rewriteTools.html" target="_blank" rel="noopener">https://www.toolnb.com/tools/rewriteTools.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;伪静态&quot;&gt;&lt;a href=&quot;#伪静态&quot; class=&quot;headerlink&quot; title=&quot;伪静态&quot;&gt;&lt;/a&gt;伪静态&lt;/h1&gt;&lt;p&gt;伪静态是一种可以把文件后缀改成任何可能的一种方法，如果我想把PHP文件伪静态成html文件，这种相当简单的。&lt;br&gt;nginx里使用
      
    
    </summary>
    
    
      <category term="nginx" scheme="http://wumuwumu.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>spring数据库事务</title>
    <link href="http://wumuwumu.github.io/2019/09/01/spring%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/"/>
    <id>http://wumuwumu.github.io/2019/09/01/spring数据库事务/</id>
    <published>2019-09-01T12:22:24.000Z</published>
    <updated>2019-10-14T09:01:08.295Z</updated>
    
    <content type="html"><![CDATA[<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="PlatformTransactionManager"><a href="#PlatformTransactionManager" class="headerlink" title="PlatformTransactionManager"></a>PlatformTransactionManager</h2><p>PlatformTransactionManager接口中定义了三个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Public interface <span class="title">PlatformTransactionManager</span><span class="params">()</span>...</span>&#123;  </span><br><span class="line">    <span class="comment">// Return a currently active transaction or create a new one, according to the specified propagation behavior（根据指定的传播行为，返回当前活动的事务或创建一个新事务。）</span></span><br><span class="line">    <span class="function">TransactionStatus <span class="title">getTransaction</span><span class="params">(TransactionDefinition definition)</span> <span class="keyword">throws</span> TransactionException</span>; </span><br><span class="line">    <span class="comment">// Commit the given transaction, with regard to its status（使用事务目前的状态提交事务）</span></span><br><span class="line">    <span class="function">Void <span class="title">commit</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException</span>;  </span><br><span class="line">    <span class="comment">// Perform a rollback of the given transaction（对执行的事务进行回滚）</span></span><br><span class="line">    <span class="function">Void <span class="title">rollback</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException</span>;  </span><br><span class="line">    &#125; </span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>我们刚刚也说了Spring中PlatformTransactionManager根据不同持久层框架所对应的接口实现类,几个比较常见的如下图所示</p><p><img src="http://wumu.sciento.cn/20190901203705.png" alt="PlatformTransactionManager根据不同持久层框架所对应的接口实现"></p><p>比如我们在使用JDBC或者iBatis（就是Mybatis）进行数据持久化操作时,我们的xml配置通常如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="TransactionDefinition"><a href="#TransactionDefinition" class="headerlink" title="TransactionDefinition"></a>TransactionDefinition</h2><p>事务管理器接口 <strong>PlatformTransactionManager</strong> 通过 <strong>getTransaction(TransactionDefinition definition)</strong> 方法来得到一个事务，这个方法里面的参数是 <strong>TransactionDefinition类</strong> ，这个类就定义了一些基本的事务属性。</p><p><strong>那么什么是事务属性呢？</strong></p><p>事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。事务属性包含了5个方面。 </p><p><img src="http://wumu.sciento.cn/20190901203901.png" alt=""></p><h3 id="TransactionDefinition接口中的方法如下："><a href="#TransactionDefinition接口中的方法如下：" class="headerlink" title="TransactionDefinition接口中的方法如下："></a>TransactionDefinition接口中的方法如下：</h3><p>TransactionDefinition接口中定义了5个方法以及一些表示事务属性的常量比如隔离级别、传播行为等等的常量。</p><p>我下面只是列出了TransactionDefinition接口中的方法而没有给出接口中定义的常量，该接口中的常量信息会在后面依次介绍到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionDefinition</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 返回事务的传播行为</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPropagationBehavior</span><span class="params">()</span></span>; </span><br><span class="line">    <span class="comment">// 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getIsolationLevel</span><span class="params">()</span></span>; </span><br><span class="line">    <span class="comment">// 返回事务必须在多少秒内完成</span></span><br><span class="line">    <span class="comment">//返回事务的名字</span></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span>；</span></span><br><span class="line"><span class="function">    <span class="keyword">int</span> <span class="title">getTimeout</span><span class="params">()</span></span>;  </span><br><span class="line">    <span class="comment">// 返回是否优化为只读事务。</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isReadOnly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TransactionStatus"><a href="#TransactionStatus" class="headerlink" title="TransactionStatus"></a>TransactionStatus</h2><p>PlatformTransactionManager.getTransaction(…) 方法返回一个 TransactionStatus 对象。返回的TransactionStatus 对象可能代表一个新的或已经存在的事务（如果在当前调用堆栈有一个符合条件的事务）。TransactionStatus 接口提供了一个简单的控制事务执行和查询事务状态的方法。该接口定义如清单3所示：</p><h5 id="清单3-TransactionStatus-接口中定义的主要方法"><a href="#清单3-TransactionStatus-接口中定义的主要方法" class="headerlink" title="清单3. TransactionStatus 接口中定义的主要方法"></a>清单3. TransactionStatus 接口中定义的主要方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="keyword">public</span>  <span class="class"><span class="keyword">interface</span> <span class="title">TransactionStatus</span></span>&#123;``   ``<span class="function"><span class="keyword">boolean</span> <span class="title">isNewTransaction</span><span class="params">()</span></span>;``   ``<span class="function"><span class="keyword">void</span> <span class="title">setRollbackOnly</span><span class="params">()</span></span>;``   ``<span class="function"><span class="keyword">boolean</span> <span class="title">isRollbackOnly</span><span class="params">()</span></span>;``&#125;`</span><br></pre></td></tr></table></figure><h1 id="事务管理API分析"><a href="#事务管理API分析" class="headerlink" title="事务管理API分析"></a>事务管理API分析</h1><h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><p>隔离级别是指若干个并发的事务之间的隔离程度。TransactionDefinition 接口中定义了五个表示隔离级别的常量：</p><ul><li><p>TransactionDefinition.ISOLATION_DEFAULT：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是TransactionDefinition.ISOLATION_READ_COMMITTED。</p></li><li><p>TransactionDefinition.ISOLATION_READ_UNCOMMITTED：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读和不可重复读，因此很少使用该隔离级别。</p></li><li><p>TransactionDefinition.ISOLATION_READ_COMMITTED：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。</p></li><li><p>TransactionDefinition.ISOLATION_REPEATABLE_READ：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。即使在多次查询之间有新增的数据满足该查询，这些新增的记录也会被忽略。该级别可以防止脏读和不可重复读。</p></li><li><p>TransactionDefinition.ISOLATION_SERIALIZABLE：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</p></li></ul><h2 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h2><p>所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：</p><ul><li>TransactionDefinition.PROPAGATION_REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li><li>TransactionDefinition.PROPAGATION_REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li><li>TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li><li>TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li><li>TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。</li><li>TransactionDefinition.PROPAGATION_MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</li><li>TransactionDefinition.PROPAGATION_NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</li></ul><p>这里需要指出的是，前面的六种事务传播行为是 Spring 从 EJB 中引入的，他们共享相同的概念。而 PROPAGATION_NESTED是 Spring 所特有的。以 PROPAGATION_NESTED 启动的事务内嵌于外部事务中（如果存在外部事务的话），此时，内嵌事务并不是一个独立的事务，它依赖于外部事务的存在，只有通过外部的事务提交，才能引起内部事务的提交，嵌套的子事务不能单独提交。如果熟悉 JDBC 中的保存点（SavePoint）的概念，那嵌套事务就很容易理解了，其实嵌套的子事务就是保存点的一个应用，一个事务中可以包括多个保存点，每一个嵌套子事务。另外，外部事务的回滚也会导致嵌套子事务的回滚。</p><h2 id="事务超时"><a href="#事务超时" class="headerlink" title="事务超时"></a>事务超时</h2><p>所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。</p><h2 id="事务的只读属性"><a href="#事务的只读属性" class="headerlink" title="事务的只读属性"></a>事务的只读属性</h2><p>事务的只读属性是指，对事务性资源进行只读操作或者是读写操作。所谓事务性资源就是指那些被事务管理的资源，比如数据源、 JMS 资源，以及自定义的事务性资源等等。如果确定只对事务性资源进行只读操作，那么我们可以将事务标志为只读的，以提高事务处理的性能。在 TransactionDefinition 中以 boolean 类型来表示该事务是否只读。</p><p>应用场合：</p><p>如果你一次执行单条查询语句，则没有必要启用事务支持，数据库默认支持SQL执行期间的读一致性；<br>如果你一次执行多条查询语句，例如统计查询，报表查询，在这种场景下，多条查询SQL必须保证整体的读一致性，否则，在前条SQL查询之后，后条SQL查询之前，数据被其他用户改变，则该次整体的统计查询将会出现读数据不一致的状态，此时，应该启用事务支持。<br>【注意是一次执行多次查询来统计某些信息，这时为了保证数据整体的一致性，要用只读事务】</p><p>怎样设置：</p><p>对于只读查询，可以指定事务类型为readonly，即只读事务。<br>由于只读事务不存在数据的修改，因此数据库将会为只读事务提供一些优化手段，例如Oracle对于只读事务，不启动回滚段，不记录回滚log。</p><p>（1）在JDBC中，指定只读事务的办法为： connection.setReadOnly(true);</p><p>（2）在Hibernate中，指定只读事务的办法为： session.setFlushMode(FlushMode.NEVER);<br>此时，Hibernate也会为只读事务提供Session方面的一些优化手段</p><p>（3）在Spring的Hibernate封装中，指定只读事务的办法为： bean配置文件中，prop属性增加“readOnly”<br>或者用注解方式@Transactional(readOnly=true)<br>【 if the transaction is marked as read-only, Spring will set the Hibernate Session’s flush mode to FLUSH_NEVER,<br>and will set the JDBC transaction to read-only】也就是说在Spring中设置只读事务是利用上面两种方式</p><h2 id="事务的回滚规则"><a href="#事务的回滚规则" class="headerlink" title="事务的回滚规则"></a>事务的回滚规则</h2><p>通常情况下，如果在事务中抛出了未检查异常（继承自 RuntimeException 的异常），则默认将回滚事务。如果没有抛出任何异常，或者抛出了已检查异常，则仍然提交事务。这通常也是大多数开发者希望的处理方式，也是 EJB 中的默认处理方式。但是，我们可以根据需要人为控制事务在抛出某些未检查异常时任然提交事务，或者在抛出某些已检查异常时回滚事务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;接口&quot;&gt;&lt;a href=&quot;#接口&quot; class=&quot;headerlink&quot; title=&quot;接口&quot;&gt;&lt;/a&gt;接口&lt;/h1&gt;&lt;h2 id=&quot;PlatformTransactionManager&quot;&gt;&lt;a href=&quot;#PlatformTransactionManager&quot;
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://wumuwumu.github.io/tags/mysql/"/>
    
      <category term="spring" scheme="http://wumuwumu.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>数据库事务</title>
    <link href="http://wumuwumu.github.io/2019/09/01/mysql/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/"/>
    <id>http://wumuwumu.github.io/2019/09/01/mysql/数据库事务/</id>
    <published>2019-09-01T12:18:43.000Z</published>
    <updated>2019-10-14T09:01:07.924Z</updated>
    
    <content type="html"><![CDATA[<p>　本篇讲诉数据库中事务的四大特性（ACID），并且将会详细地说明事务的隔离级别。</p><p>　　如果一个数据库声称支持事务的操作，那么该数据库必须要具备以下四个特性：</p><h2 id="⑴-原子性（Atomicity）"><a href="#⑴-原子性（Atomicity）" class="headerlink" title="⑴ 原子性（Atomicity）"></a>⑴ 原子性（Atomicity）</h2><p>　　原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，这和前面两篇博客介绍事务的功能是一样的概念，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</p><h2 id="⑵-一致性（Consistency）"><a href="#⑵-一致性（Consistency）" class="headerlink" title="⑵ 一致性（Consistency）"></a>⑵ 一致性（Consistency）</h2><p>　　一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</p><p>　　拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。</p><h2 id="⑶-隔离性（Isolation）"><a href="#⑶-隔离性（Isolation）" class="headerlink" title="⑶ 隔离性（Isolation）"></a>⑶ 隔离性（Isolation）</h2><p>　　隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</p><p>　　即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</p><p>　　关于事务的隔离性数据库提供了多种隔离级别，稍后会介绍到。</p><h2 id="⑷-持久性（Durability）"><a href="#⑷-持久性（Durability）" class="headerlink" title="⑷ 持久性（Durability）"></a>⑷ 持久性（Durability）</h2><p>　　持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p><p>　　例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。</p><p>　　以上介绍完事务的四大特性(简称ACID)，现在重点来说明下事务的隔离性，当多个线程都开启事务操作数据库中的数据时，数据库系统要能进行隔离操作，以保证各个线程获取数据的准确性，在介绍数据库提供的各种隔离级别之前，我们先看看如果不考虑事务的隔离性，会发生的几种问题：</p><h2 id="1，脏读"><a href="#1，脏读" class="headerlink" title="1，脏读"></a>1，脏读</h2><p>　　脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。</p><p>　　当一个事务正在多次修改某个数据，而在这个事务中这多次的修改都还未提交，这时一个并发的事务来访问该数据，就会造成两个事务得到的数据不一致。例如：用户A向用户B转账100元，对应SQL命令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update account set money=money+100 where name=’B’;  (此时A通知B)</span><br><span class="line"></span><br><span class="line">update account set money=money - 100 where name=’A’;</span><br></pre></td></tr></table></figure><p>　　当只执行第一条SQL时，A通知B查看账户，B发现确实钱已到账（此时即发生了脏读），而之后无论第二条SQL是否执行，只要该事务不提交，则所有操作都将回滚，那么当B以后再次查看账户时就会发现钱其实并没有转。</p><h2 id="2，不可重复读"><a href="#2，不可重复读" class="headerlink" title="2，不可重复读"></a>2，不可重复读</h2><p>　　不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了。</p><p>　　例如事务T1在读取某一数据，而事务T2立马修改了这个数据并且提交事务给数据库，事务T1再次读取该数据就得到了不同的结果，发送了不可重复读。</p><p>　　不可重复读和脏读的区别是，脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据。</p><p>　　在某些情况下，不可重复读并不是问题，比如我们多次查询某个数据当然以最后查询得到的结果为主。但在另一些情况下就有可能发生问题，例如对于同一个数据A和B依次查询就可能不同，A和B就可能打起来了……</p><h2 id="3，虚读-幻读"><a href="#3，虚读-幻读" class="headerlink" title="3，虚读(幻读)"></a>3，虚读(幻读)</h2><p>　　幻读是事务非独立执行时发生的一种现象。例如事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。</p><p>　　幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）。<br>　　现在来看看MySQL数据库为我们提供的四种隔离级别：<br>　　① Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。<br>　　② Repeatable read (可重复读)：可避免脏读、不可重复读的发生。<br>　　③ Read committed (读已提交)：可避免脏读的发生。<br>　　④ Read uncommitted (读未提交)：最低级别，任何情况都无法保证。</p><p>　　以上四种隔离级别最高的是Serializable级别，最低的是Read uncommitted级别，当然级别越高，执行效率就越低。像Serializable这样的级别，就是以锁表的方式(类似于Java多线程中的锁)使得其他的线程只能在锁外等待，所以平时选用何种隔离级别应该根据实际情况。在MySQL数据库中默认的隔离级别为Repeatable read (可重复读)。</p><p>　　在MySQL数据库中，支持上面四种隔离级别，默认的为Repeatable read (可重复读)；而在Oracle数据库中，只支持Serializable (串行化)级别和Read committed (读已提交)这两种级别，其中默认的为Read committed级别。</p><p>　　在MySQL数据库中查看当前事务的隔离级别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@tx_isolation;</span><br></pre></td></tr></table></figure><p>　　在MySQL数据库中设置事务的隔离 级别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set  [glogal | session]  transaction isolation level 隔离级别名称;</span><br><span class="line">set tx_isolation=’隔离级别名称;’</span><br></pre></td></tr></table></figure><p>　　后记：隔离级别的设置只对当前链接有效。对于使用MySQL命令窗口而言，一个窗口就相当于一个链接，当前窗口设置的隔离级别只对当前窗口中的事务有效；对于JDBC操作数据库来说，一个Connection对象相当于一个链接，而对于Connection对象设置的隔离级别只对该Connection对象有效，与其他链接Connection对象无关。</p><h1 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h1><p><a href="http://www.zhihu.com/question/23989904" target="_blank" rel="noopener">http://www.zhihu.com/question/23989904</a><br><a href="http://dev.mysql.com/doc/refman/5.6/en/set-transaction.html" target="_blank" rel="noopener">http://dev.mysql.com/doc/refman/5.6/en/set-transaction.html</a><br><a href="http://www.cnblogs.com/xdp-gacl/p/3984001.html" target="_blank" rel="noopener">http://www.cnblogs.com/xdp-gacl/p/3984001.html</a><br><a href="https://www.cnblogs.com/fjdingsd/p/5273008.html" target="_blank" rel="noopener">https://www.cnblogs.com/fjdingsd/p/5273008.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　本篇讲诉数据库中事务的四大特性（ACID），并且将会详细地说明事务的隔离级别。&lt;/p&gt;
&lt;p&gt;　　如果一个数据库声称支持事务的操作，那么该数据库必须要具备以下四个特性：&lt;/p&gt;
&lt;h2 id=&quot;⑴-原子性（Atomicity）&quot;&gt;&lt;a href=&quot;#⑴-原子性（Atomi
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://wumuwumu.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql性能检测</title>
    <link href="http://wumuwumu.github.io/2019/08/31/mysql/mysql%E6%80%A7%E8%83%BD%E6%A3%80%E6%B5%8B/"/>
    <id>http://wumuwumu.github.io/2019/08/31/mysql/mysql性能检测/</id>
    <published>2019-08-31T15:26:45.000Z</published>
    <updated>2019-10-14T09:01:07.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="性能检测蝉蛹命令"><a href="#性能检测蝉蛹命令" class="headerlink" title="性能检测蝉蛹命令"></a>性能检测蝉蛹命令</h1><ol><li>show status</li><li>show processlist</li><li>show variables</li></ol><h1 id="瓶颈分析常用命令"><a href="#瓶颈分析常用命令" class="headerlink" title="瓶颈分析常用命令"></a>瓶颈分析常用命令</h1><h2 id="获取mysql用户下的进程总数"><a href="#获取mysql用户下的进程总数" class="headerlink" title="获取mysql用户下的进程总数"></a>获取mysql用户下的进程总数</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | awk '&#123;print $1&#125;' | grep "mysql" | grep -v "grep" | wc -l</span><br></pre></td></tr></table></figure><h2 id="主机性能状态"><a href="#主机性能状态" class="headerlink" title="主机性能状态"></a>主机性能状态</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uptime</span><br></pre></td></tr></table></figure><h2 id="CPU使用率"><a href="#CPU使用率" class="headerlink" title="CPU使用率"></a>CPU使用率</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">top</span><br><span class="line">vmstat</span><br></pre></td></tr></table></figure><h2 id="磁盘IO量"><a href="#磁盘IO量" class="headerlink" title="磁盘IO量"></a>磁盘IO量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vmstat</span><br><span class="line">iostat</span><br></pre></td></tr></table></figure><h2 id="swap进出量"><a href="#swap进出量" class="headerlink" title="swap进出量"></a>swap进出量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free -m</span><br></pre></td></tr></table></figure><h1 id="数据库性能状态"><a href="#数据库性能状态" class="headerlink" title="数据库性能状态"></a>数据库性能状态</h1><h2 id="QPS"><a href="#QPS" class="headerlink" title="QPS"></a>QPS</h2><p><strong>方法一 基于 questions  计算qps,基于  com_commit  com_rollback 计算tps</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">questions = <span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'questions'</span>;</span><br><span class="line"></span><br><span class="line">uptime = <span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'uptime'</span>;</span><br><span class="line"></span><br><span class="line">qps=questions/uptime</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">com_commit = <span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'com_commit'</span>;</span><br><span class="line"></span><br><span class="line">com_rollback = <span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'com_rollback'</span>;</span><br><span class="line"></span><br><span class="line">uptime = <span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'uptime'</span>;</span><br><span class="line"></span><br><span class="line">tps=(com_commit + com_rollback)/uptime</span><br></pre></td></tr></table></figure><p><strong>方法二  基于 com_* 的status 变量计算tps ,qps</strong></p><p>使用如下命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">where</span> variable_name <span class="keyword">in</span>(<span class="string">'com_select'</span>,<span class="string">'com_insert'</span>,<span class="string">'com_delete'</span>,<span class="string">'com_update'</span>);</span><br><span class="line"></span><br><span class="line">获取间隔1s 的 com_*的值，并作差值运算</span><br><span class="line"></span><br><span class="line">del_diff = (int(mystat2['com_delete'])   - int(mystat1['com_delete']) ) / diff</span><br><span class="line"></span><br><span class="line">ins_diff = (int(mystat2['com_insert'])    - int(mystat1['com_insert']) ) / diff</span><br><span class="line"></span><br><span class="line">sel_diff = (int(mystat2['com_select'])    - int(mystat1['com_select']) ) / diff</span><br><span class="line"></span><br><span class="line">upd_diff = (int(mystat2['com_update'])   - int(mystat1['com_update']) ) / diff</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>Questions 是记录了从mysqld启动以来所有的select，dml 次数包括show 命令的查询的次数。这样多少有失准确性，比如很多数据库有监控系统在运行，每5秒对数据库进行一次show 查询来获取当前数据库的状态，而这些查询就被记录到QPS,TPS统计中，造成一定的”数据污染”.</p><p>如果数据库中存在比较多的myisam表，则计算还是questions 比较合适。</p><p>如果数据库中存在比较多的innodb表，则计算以com_*数据来源比较合适</p><h2 id="TPS"><a href="#TPS" class="headerlink" title="TPS"></a>TPS</h2><p>TPS = (Com_commit + Com_rollback) / seconds </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Com_commit'</span>; </span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Com_rollback'</span>;</span><br></pre></td></tr></table></figure><h2 id="key-Buffer-命中率"><a href="#key-Buffer-命中率" class="headerlink" title="key Buffer 命中率"></a>key Buffer 命中率</h2><p>key_buffer_read_hits = (1-key_reads / key_read_requests) <em> 100%<br>key_buffer_write_hits = (1-key_writes / key_write_requests) </em> 100%</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Key%'</span>;</span><br></pre></td></tr></table></figure><h2 id="InnoDB-Buffer命中率"><a href="#InnoDB-Buffer命中率" class="headerlink" title="InnoDB Buffer命中率"></a>InnoDB Buffer命中率</h2><p>innodb_buffer_read_hits = (1 - innodb_buffer_pool_reads / innodb_buffer_pool_read_requests) * 100%</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'innodb_buffer_pool_read%'</span>;</span><br></pre></td></tr></table></figure><h2 id="Query-Cache命中率"><a href="#Query-Cache命中率" class="headerlink" title="Query Cache命中率"></a>Query Cache命中率</h2><p>Query_cache_hits = (Qcahce_hits / (Qcache_hits + Qcache_inserts )) * 100%;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure><h2 id="Table-Cache状态量"><a href="#Table-Cache状态量" class="headerlink" title="Table Cache状态量"></a>Table Cache状态量</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'open%'</span>;</span><br></pre></td></tr></table></figure><h2 id="Thread-Cache-命中率"><a href="#Thread-Cache-命中率" class="headerlink" title="Thread Cache 命中率"></a>Thread Cache 命中率</h2><p>Thread_cache_hits = (1 - Threads_created / connections ) * 100%</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Thread%'</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Connections'</span>;</span><br></pre></td></tr></table></figure><h2 id="锁定状态"><a href="#锁定状态" class="headerlink" title="锁定状态"></a>锁定状态</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'%lock%'</span>;</span><br></pre></td></tr></table></figure><h2 id="复制延时量"><a href="#复制延时量" class="headerlink" title="复制延时量"></a>复制延时量</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">slave</span> <span class="keyword">status</span>;</span><br></pre></td></tr></table></figure><h2 id="Tmp-Table-状况-临时表状况"><a href="#Tmp-Table-状况-临时表状况" class="headerlink" title="Tmp Table 状况(临时表状况)"></a>Tmp Table 状况(临时表状况)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Create_tmp%'</span>;</span><br></pre></td></tr></table></figure><h2 id="Binlog-Cache-使用状况"><a href="#Binlog-Cache-使用状况" class="headerlink" title="Binlog Cache 使用状况"></a>Binlog Cache 使用状况</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Binlog_cache%'</span>;</span><br></pre></td></tr></table></figure><h2 id="Innodb-log-waits"><a href="#Innodb-log-waits" class="headerlink" title="Innodb_log_waits"></a>Innodb_log_waits</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'innodb_log_waits'</span>;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/li_adou/article/details/78791972" target="_blank" rel="noopener">https://blog.csdn.net/li_adou/article/details/78791972</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;性能检测蝉蛹命令&quot;&gt;&lt;a href=&quot;#性能检测蝉蛹命令&quot; class=&quot;headerlink&quot; title=&quot;性能检测蝉蛹命令&quot;&gt;&lt;/a&gt;性能检测蝉蛹命令&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;show status&lt;/li&gt;
&lt;li&gt;show processlist&lt;/l
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://wumuwumu.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>hibernate_Embedded和@Embeddable</title>
    <link href="http://wumuwumu.github.io/2019/08/10/java/hibernate-@Embedded%E5%92%8C-Embeddable/"/>
    <id>http://wumuwumu.github.io/2019/08/10/java/hibernate-@Embedded和-Embeddable/</id>
    <published>2019-08-10T02:57:59.000Z</published>
    <updated>2019-10-14T09:01:07.581Z</updated>
    
    <content type="html"><![CDATA[<p>在使用实体类生成对应的数据库表时，很多的时候都会遇到这种情况：在一个实体类中引用另外的实体类，一般遇上这种情况，我们使用@OneToOne、@OneToMany、@ManyToOne、@ManyToMany这4个注解比较多，但是好奇害死猫，除了这四个有没有别的使用情况，尤其是一个实体类要在多个不同的实体类中进行使用，而本身又不需要独立生成一个数据库表，这就是需要@Embedded、@Embeddable的时候了，下面分成4类来说明在一个实体类中引用另外的实体类的情况，具体的数据库环境是MySQL 5.7。</p><p>使用的两个实体类如下：</p><p>Address类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8849870114128959929L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String country;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//setter、getter&#125;</span></span><br></pre></td></tr></table></figure></p><p>Person类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8849870114127659929L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//setter、getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="两个注解全不使用"><a href="#两个注解全不使用" class="headerlink" title="两个注解全不使用"></a>两个注解全不使用</h1><p>当这两个注解都不使用时，那么两个实体类和上面的相同，那么生成的表结构如下： </p><p><img src="http://wumu.sciento.cn/img/20190810110112.png" alt=""></p><p>Address属性字段会映射成tinyblob类型的字段，这是用来存储不超过255字符的二进制字符串的数据类型，显然我们通常不会这么使用。</p><h1 id="只使用-Embeddable"><a href="#只使用-Embeddable" class="headerlink" title="只使用@Embeddable"></a>只使用@Embeddable</h1><p>我们在Address实体类上加上@Embeddable注解，变成如下类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Embeddable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8849870114128959929L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String country;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//setter、getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而Person实体类不变，生成的数据库表结构如下： </p><p><img src="http://wumu.sciento.cn/img/20190810110330.png" alt=""></p><p>可以看出这次是把Address中的字段映射成数据库列嵌入到Person表中了，而这些字段的类型和长度也使用默认值。如果我们在Address中的字段中设置列的相关属性，则会按照我们设定的值去生成，如下Address类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Embeddable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8849870114128959929L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String country;</span><br><span class="line">    <span class="meta">@Column</span>(length = <span class="number">30</span>)</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="meta">@Column</span>(unique = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="meta">@Column</span>(length = <span class="number">50</span>)</span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line">    <span class="comment">//setter、getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>生成的表结构如下：</p><p> <img src="http://wumu.sciento.cn/img/20190810110454.png" alt=""></p><p>我们在Address中配置的属性全部成功映射到Person表中。</p><h1 id="只使用-Embedded"><a href="#只使用-Embedded" class="headerlink" title="只使用@Embedded"></a>只使用@Embedded</h1><p>这里我们只在Person中使用@Embedded,如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8849870114127659929L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Embedded</span></span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//setter、getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Adddress类和最开始的不同POJO类相同，此时生成的表结构如下： </p><p><img src="http://wumu.sciento.cn/img/20190810110619.png" alt=""></p><p>可以看出这个表结构和在Address中只使用@Embeddable注解时相同，在进入深一步试验，我们在Address中加入列属性，但是不使用@Embeddable注解会发生什么？<br>Address类如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8849870114128959929L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String country;</span><br><span class="line">    <span class="meta">@Column</span>(length = <span class="number">30</span>)</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="meta">@Column</span>(unique = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="meta">@Column</span>(length = <span class="number">50</span>)</span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line">    <span class="comment">//setter、getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>生成数据表结构如下： </p><p><img src="http://wumu.sciento.cn/img/20190810110728.png" alt=""></p><p>所以只使用@Embedded和只使用@Embeddable产生的效果是相同的。</p><h1 id="两个注解全使用"><a href="#两个注解全使用" class="headerlink" title="两个注解全使用"></a>两个注解全使用</h1><p>既然单独使用@Embedded或者只使用@Embeddable都会产生作用，那么这两个都使用效果也一定是一样的，我们平时也是这么用的。所以在这部分我们就不演示和上面相同的效果了，而是说两个深入的话题。</p><h2 id="覆盖-Embeddable类中字段的列属性"><a href="#覆盖-Embeddable类中字段的列属性" class="headerlink" title="覆盖@Embeddable类中字段的列属性"></a>覆盖@Embeddable类中字段的列属性</h2><p>这里就要使用另外的两个注解@AttributeOverrides和@AttributeOverride，这两个注解是用来覆盖@Embeddable类中字段的属性的。</p><p>@AttributeOverrides：里面只包含了@AttributeOverride类型数组；<br>@AttributeOverride：包含要覆盖的@Embeddable类中字段名name和新增的@Column字段的属性；<br>使用如下：<br>Person类如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8849870114127659929L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Embedded</span></span><br><span class="line">    <span class="meta">@AttributeOverrides</span>(&#123;<span class="meta">@AttributeOverride</span>(name=<span class="string">"country"</span>, column=<span class="meta">@Column</span>(name = <span class="string">"person_country"</span>, length = <span class="number">25</span>, nullable = <span class="keyword">false</span>)),</span><br><span class="line">                        <span class="meta">@AttributeOverride</span>(name=<span class="string">"city"</span>, column = <span class="meta">@Column</span>(name = <span class="string">"person_city"</span>, length = <span class="number">15</span>))&#125;)</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//setter、getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Address类如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Embeddable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8849870114128959929L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String country;</span><br><span class="line">    <span class="meta">@Column</span>(length = <span class="number">30</span>)</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="meta">@Column</span>(unique = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="meta">@Column</span>(length = <span class="number">50</span>)</span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line">    <span class="comment">//setter、getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>生成的数据表如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wumu.sciento.cn/img/20190810110901.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看出我们的@AttributeOverrides和@AttributeOverride两个注解起作用了。</p><h2 id="多层嵌入实体类属性"><a href="#多层嵌入实体类属性" class="headerlink" title="多层嵌入实体类属性"></a>多层嵌入实体类属性</h2><p>上面所有的例子都是使用两层实体类嵌入，其实这种实体类的嵌入映射是可以使用多层的，具体的例子如下。<br>我们新建立一个类Direction表示方位如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Embeddable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Direction</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer longitude;</span><br><span class="line">    <span class="keyword">private</span> Integer latitude;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Address如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Embeddable</span><br><span class="line">public class Address implements Serializable&#123;</span><br><span class="line">    private static final long serialVersionUID = 8849870114128959929L;</span><br><span class="line"></span><br><span class="line">    @Column(nullable = false)</span><br><span class="line">    private String country;</span><br><span class="line">    @Column(length = 30)</span><br><span class="line">    private String province;</span><br><span class="line">    @Column(unique = true)</span><br><span class="line">    private String city;</span><br><span class="line">    @Column(length = 50)</span><br><span class="line">    private String detail;</span><br><span class="line">    </span><br><span class="line">    @Embedded</span><br><span class="line">    private Direction direction;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Person类如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8849870114127659929L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Embedded</span></span><br><span class="line">    <span class="meta">@AttributeOverrides</span>(&#123;<span class="meta">@AttributeOverride</span>(name=<span class="string">"direction.latitude"</span>, column=<span class="meta">@Column</span>(name = <span class="string">"person_latitude"</span>)),</span><br><span class="line">                        <span class="meta">@AttributeOverride</span>(name=<span class="string">"direction.longitude"</span>, column = <span class="meta">@Column</span>(name = <span class="string">"person_longitude"</span>))&#125;)</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>生成的数据表如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wumu.sciento.cn/img/20190810111050.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="在上面需要注意如下几点："><a href="#在上面需要注意如下几点：" class="headerlink" title="在上面需要注意如下几点："></a>在上面需要注意如下几点：</h1><p>在Person中定义Direction中的属性时，需要用”.”将所有相关的属性连接起来；<br>在Direction中longitude属性定义为not null，但是由于使用了@AttributeOverride注解，其中虽然没有定义null属性，但是这时使用的是默认的nullable属性，默认为true;</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://blog.csdn.net/lmy86263/article/details/52108130" target="_blank" rel="noopener">https://blog.csdn.net/lmy86263/article/details/52108130</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用实体类生成对应的数据库表时，很多的时候都会遇到这种情况：在一个实体类中引用另外的实体类，一般遇上这种情况，我们使用@OneToOne、@OneToMany、@ManyToOne、@ManyToMany这4个注解比较多，但是好奇害死猫，除了这四个有没有别的使用情况，尤其
      
    
    </summary>
    
    
      <category term="java" scheme="http://wumuwumu.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>create-react-app脚手架</title>
    <link href="http://wumuwumu.github.io/2019/08/07/react/create-react-app%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    <id>http://wumuwumu.github.io/2019/08/07/react/create-react-app脚手架/</id>
    <published>2019-08-07T01:38:30.000Z</published>
    <updated>2019-10-14T09:01:08.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g create-react-app</span><br><span class="line"><span class="comment"># 切记项目名称不能大写</span></span><br><span class="line">create-react-app firstapp</span><br><span class="line"><span class="built_in">cd</span> firstapp</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure><h1 id="eject"><a href="#eject" class="headerlink" title="eject"></a>eject</h1><p>这是一次性的操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run eject</span><br></pre></td></tr></table></figure><h1 id="启动less或者sass"><a href="#启动less或者sass" class="headerlink" title="启动less或者sass"></a>启动less或者sass</h1><h2 id="sass"><a href="#sass" class="headerlink" title="sass"></a>sass</h2><p>create-react-app默认有sass的配置，只需要安装依赖就行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install node-sass --save</span><br></pre></td></tr></table></figure><h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><p>默认没有less的配置，需要自己在webpack中配置</p><ol><li><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install less less-loader --save</span><br></pre></td></tr></table></figure></li><li><p>运行完成之后，打开 config 目录下的 webpack.config.js 文件，找到 <code>// style files regexes</code> 注释位置，仿照其解析 sass 的规则，在下面添加两行代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加 less 解析规则</span></span><br><span class="line"><span class="keyword">const</span> lessRegex = <span class="regexp">/\.less$/</span>;</span><br><span class="line"><span class="keyword">const</span> lessModuleRegex = <span class="regexp">/\.module\.less$/</span>;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>找到 rules 属性配置，在其中添加 less 解析配置</p><blockquote><p><strong>!!!注意：</strong> 这里有一个需要注意的地方，下面的这些 <code>less</code> 配置规则放在 <code>sass</code> 的解析规则下面即可，如果放在了 <code>file-loader</code> 的解析规则下面，<code>less</code> 文件解析不会生效。</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// Less 解析配置</span><br><span class="line">&#123;</span><br><span class="line">    test: lessRegex,</span><br><span class="line">    exclude: lessModuleRegex,</span><br><span class="line">    use: getStyleLoaders(</span><br><span class="line">        &#123;</span><br><span class="line">            importLoaders: 2,</span><br><span class="line">            sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">        &#125;,</span><br><span class="line">        'less-loader'</span><br><span class="line">    ),</span><br><span class="line">    sideEffects: true,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    test: lessModuleRegex,</span><br><span class="line">    use: getStyleLoaders(</span><br><span class="line">        &#123;</span><br><span class="line">            importLoaders: 2,</span><br><span class="line">            sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">            modules: true,</span><br><span class="line">            getLocalIdent: getCSSModuleLocalIdent,</span><br><span class="line">        &#125;,</span><br><span class="line">        'less-loader'</span><br><span class="line">    )</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><h1 id="css-module"><a href="#css-module" class="headerlink" title="css module"></a>css module</h1><p>在css的命名中使用*.module.css就可以使用css module，也可以自己修改webpack的文件。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.jianshu.com/p/1f054623ecac" target="_blank" rel="noopener">https://www.jianshu.com/p/1f054623ecac</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
    
      <category term="react" scheme="http://wumuwumu.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>python-类</title>
    <link href="http://wumuwumu.github.io/2019/08/04/python/python-%E7%B1%BB/"/>
    <id>http://wumuwumu.github.io/2019/08/04/python/python-类/</id>
    <published>2019-08-04T10:12:22.000Z</published>
    <updated>2019-10-14T09:01:08.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类中默认函数"><a href="#类中默认函数" class="headerlink" title="类中默认函数"></a>类中默认函数</h1><h2 id="new和init区别"><a href="#new和init区别" class="headerlink" title="new和init区别"></a><strong><strong>new</strong></strong>和<strong><strong>init</strong></strong>区别</h2><p><strong>new</strong>:创建对象时调用，会返回当前对象的一个实例</p><p><strong>init</strong>:创建完对象后调用，对当前对象的一些实例初始化，无返回值</p><p>1、在类中，如果<strong>new</strong>和<strong>init</strong>同时存在，会优先调用<strong>new</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span><span class="params">(object)</span>:</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(self)</span>:</span></span><br><span class="line">             <span class="keyword">print</span> <span class="string">"new"</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">             <span class="keyword">print</span> <span class="string">"init"</span></span><br><span class="line"> </span><br><span class="line">data = Data()</span><br><span class="line"><span class="comment"># new</span></span><br></pre></td></tr></table></figure><p>2、<strong>new</strong>方法会返回所构造的对象，<strong>init</strong>则不会。<strong>init</strong>无返回值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span><span class="params">(object)</span>:</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(cls)</span>:</span></span><br><span class="line">            cls.x = <span class="number">2</span></span><br><span class="line">             <span class="keyword">print</span> <span class="string">"init"</span></span><br><span class="line">            <span class="keyword">return</span> cls</span><br><span class="line"></span><br><span class="line">data = Data()</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">init</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "&lt;stdin&gt;", line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="string">TypeError: __init__() should return None, not 'Data'</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">"new"</span>)</span><br><span class="line">        cls.x = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> cls</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">"init"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = Data()</span><br><span class="line">print(data.x)</span><br><span class="line"><span class="comment"># new</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line">data.x =<span class="number">2</span></span><br><span class="line">print(data.x)</span><br><span class="line"><span class="comment"># 2</span></span><br></pre></td></tr></table></figure><p>If <strong>new</strong>() returns an instance of cls, then the new instance’s <strong>init</strong>() method will be invoked like <strong>init</strong>(self[, …]), where self is the new instance and the remaining arguments are the same as were passed to <strong>new</strong>().</p><p>如果<strong>new</strong>返回一个对象的实例，会隐式调用<strong>init</strong></p><p>If <strong>new</strong>() does not return an instance of cls, then the new instance’s <strong>init</strong>() method will not be invoked.</p><p>如果<strong>new</strong>不返回一个对象的实例，<strong>init</strong>不会被调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(Class)</span>:</span></span><br><span class="line">             object = super(A,Class).__new__(Class)</span><br><span class="line">             <span class="keyword">print</span> <span class="string">"in New"</span></span><br><span class="line">             <span class="keyword">return</span> object</span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">             <span class="keyword">print</span> <span class="string">"in init"</span></span><br><span class="line"> </span><br><span class="line">A()</span><br><span class="line"><span class="comment"># in New</span></span><br><span class="line"><span class="comment"># in init</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls)</span>:</span></span><br><span class="line">             <span class="keyword">print</span> <span class="string">"in New"</span></span><br><span class="line">             <span class="keyword">return</span> cls</span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">             <span class="keyword">print</span> <span class="string">"in init"</span></span><br><span class="line"> </span><br><span class="line">a = A()      </span><br><span class="line"><span class="comment"># in New</span></span><br></pre></td></tr></table></figure><p>object.<strong>init</strong>(self[, …])<br>Called when the instance is created. The arguments are those passed to the class constructor expression. If a base class has an <strong>init</strong>() method, the derived class’s <strong>init</strong>() method, if any, must explicitly call it to ensure proper initialization of the base class part of the instance; for example: BaseClass.<strong>init</strong>(self, [args…]). As a special constraint on constructors, no value may be returned; doing so will cause a TypeError to be raised at runtime.</p><p>在对象的实例创建完成后调用。参数被传给类的构造函数。如果基类有<strong>init</strong>方法，子类必须显示调用基类的<strong>init</strong>。</p><p>没有返回值，否则会再引发TypeError错误。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类中默认函数&quot;&gt;&lt;a href=&quot;#类中默认函数&quot; class=&quot;headerlink&quot; title=&quot;类中默认函数&quot;&gt;&lt;/a&gt;类中默认函数&lt;/h1&gt;&lt;h2 id=&quot;new和init区别&quot;&gt;&lt;a href=&quot;#new和init区别&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="python" scheme="http://wumuwumu.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>spring的jms事务</title>
    <link href="http://wumuwumu.github.io/2019/08/03/java/spring%E7%9A%84jms%E4%BA%8B%E5%8A%A1/"/>
    <id>http://wumuwumu.github.io/2019/08/03/java/spring的jms事务/</id>
    <published>2019-08-03T07:05:17.000Z</published>
    <updated>2019-10-14T09:01:07.607Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="java" scheme="http://wumuwumu.github.io/tags/java/"/>
    
      <category term="spring" scheme="http://wumuwumu.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring事务实现</title>
    <link href="http://wumuwumu.github.io/2019/08/03/java/spring%E4%BA%8B%E5%8A%A1%E5%AE%9E%E7%8E%B0/"/>
    <id>http://wumuwumu.github.io/2019/08/03/java/spring事务实现/</id>
    <published>2019-08-03T06:40:33.000Z</published>
    <updated>2019-10-14T09:01:07.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事务概念回顾"><a href="#事务概念回顾" class="headerlink" title="事务概念回顾"></a>事务概念回顾</h1><blockquote><h2 id="什么是事务？"><a href="#什么是事务？" class="headerlink" title="什么是事务？"></a>什么是事务？</h2></blockquote><p>事务是逻辑上的一组操作，要么都执行，要么都不执行.</p><blockquote><h2 id="事物的特性（ACID）："><a href="#事物的特性（ACID）：" class="headerlink" title="事物的特性（ACID）："></a>事物的特性（ACID）：</h2></blockquote><ol><li><strong>原子性：</strong> 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</li><li><strong>一致性：</strong> 执行事务前后，数据保持一致；</li><li><strong>隔离性：</strong> 并发访问数据库时，一个用户的事物不被其他事物所干扰，各并发事务之间数据库是独立的；</li><li><strong>持久性:</strong>  一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</li></ol><h1 id="Spring事务管理接口介绍"><a href="#Spring事务管理接口介绍" class="headerlink" title="Spring事务管理接口介绍"></a>Spring事务管理接口介绍</h1><blockquote><h2 id="Spring事务管理接口："><a href="#Spring事务管理接口：" class="headerlink" title="Spring事务管理接口："></a>Spring事务管理接口：</h2></blockquote><ul><li><strong>PlatformTransactionManager：</strong> （平台）事务管理器</li><li><strong>TransactionDefinition：</strong> 事务定义信息(事务隔离级别、传播行为、超时、只读、回滚规则)</li><li><strong>TransactionStatus：</strong> 事务运行状态</li></ul><p><strong>所谓事务管理，其实就是“按照给定的事务规则来执行提交或者回滚操作”。</strong></p><blockquote><h2 id="PlatformTransactionManager接口介绍"><a href="#PlatformTransactionManager接口介绍" class="headerlink" title="PlatformTransactionManager接口介绍"></a>PlatformTransactionManager接口介绍</h2></blockquote><p><strong>Spring并不直接管理事务，而是提供了多种事务管理器</strong> ，他们将事务管理的职责委托给Hibernate或者JTA等持久化机制所提供的相关平台框架的事务来实现。 Spring事务管理器的接口是： <strong>org.springframework.transaction.PlatformTransactionManager</strong> ，通过这个接口，Spring为各个平台如JDBC、Hibernate等都提供了对应的事务管理器，但是具体的实现就是各个平台自己的事情了。</p><h3 id="PlatformTransactionManager接口代码如下："><a href="#PlatformTransactionManager接口代码如下：" class="headerlink" title="PlatformTransactionManager接口代码如下："></a>PlatformTransactionManager接口代码如下：</h3><p>PlatformTransactionManager接口中定义了三个方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Public interface PlatformTransactionManager()...&#123;  </span><br><span class="line">    // Return a currently active transaction or create a new one, according to the specified propagation behavior（根据指定的传播行为，返回当前活动的事务或创建一个新事务。）</span><br><span class="line">    TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException; </span><br><span class="line">    // Commit the given transaction, with regard to its status（使用事务目前的状态提交事务）</span><br><span class="line">    Void commit(TransactionStatus status) throws TransactionException;  </span><br><span class="line">    // Perform a rollback of the given transaction（对执行的事务进行回滚）</span><br><span class="line">    Void rollback(TransactionStatus status) throws TransactionException;  </span><br><span class="line">    &#125; </span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>我们刚刚也说了Spring中PlatformTransactionManager根据不同持久层框架所对应的接口实现类,几个比较常见的如下图所示</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wumu.sciento.cn/img/20190803144836.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>比如我们在使用JDBC或者iBatis（就是Mybatis）进行数据持久化操作时,我们的xml配置通常如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 事务管理器 --&gt;</span><br><span class="line">&lt;bean id=&quot;transactionManager&quot;</span><br><span class="line">class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">&lt;!-- 数据源 --&gt;</span><br><span class="line">&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><blockquote><h2 id="TransactionDefinition接口介绍"><a href="#TransactionDefinition接口介绍" class="headerlink" title="TransactionDefinition接口介绍"></a>TransactionDefinition接口介绍</h2></blockquote><p>事务管理器接口 <strong>PlatformTransactionManager</strong> 通过 <strong>getTransaction(TransactionDefinition definition)</strong> 方法来得到一个事务，这个方法里面的参数是 <strong>TransactionDefinition类</strong> ，这个类就定义了一些基本的事务属性。</p><p><strong>那么什么是事务属性呢？</strong></p><p>事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。事务属性包含了5个方面。 </p><p><img src="http://wumu.sciento.cn/img/20190803144913.png" alt=""></p><h3 id="TransactionDefinition接口中的方法如下："><a href="#TransactionDefinition接口中的方法如下：" class="headerlink" title="TransactionDefinition接口中的方法如下："></a>TransactionDefinition接口中的方法如下：</h3><p>TransactionDefinition接口中定义了5个方法以及一些表示事务属性的常量比如隔离级别、传播行为等等的常量。</p><p>我下面只是列出了TransactionDefinition接口中的方法而没有给出接口中定义的常量，该接口中的常量信息会在后面依次介绍到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public interface TransactionDefinition &#123;</span><br><span class="line">    // 返回事务的传播行为</span><br><span class="line">    int getPropagationBehavior(); </span><br><span class="line">    // 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据</span><br><span class="line">    int getIsolationLevel(); </span><br><span class="line">    // 返回事务必须在多少秒内完成</span><br><span class="line">    //返回事务的名字</span><br><span class="line">    String getName()；</span><br><span class="line">    int getTimeout();  </span><br><span class="line">    // 返回是否优化为只读事务。</span><br><span class="line">    boolean isReadOnly();</span><br><span class="line">&#125; </span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="（1）事务隔离级别（定义了一个事务可能受其他并发事务影响的程度）："><a href="#（1）事务隔离级别（定义了一个事务可能受其他并发事务影响的程度）：" class="headerlink" title="（1）事务隔离级别（定义了一个事务可能受其他并发事务影响的程度）："></a>（1）事务隔离级别（定义了一个事务可能受其他并发事务影响的程度）：</h3><p>我们先来看一下 <strong>并发事务带来的问题</strong> ，然后再来介绍一下 <strong>TransactionDefinition 接口</strong> 中定义了五个表示隔离级别的常量。</p><blockquote><h4 id="并发事务带来的问题"><a href="#并发事务带来的问题" class="headerlink" title="并发事务带来的问题"></a>并发事务带来的问题</h4></blockquote><p>在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对统一数据进行操作）。并发虽然是必须的，但可能会导致一下的问题。</p><ul><li><p><strong>脏读（Dirty read）:</strong> 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。</p></li><li><p><strong>丢失修改（Lost to modify）:</strong> 指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。</p><p>例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。</p></li><li><p><strong>不可重复读（Unrepeatableread）:</strong> 指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</p></li><li><p><strong>幻读（Phantom read）:</strong> 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</p></li></ul><p><strong>不可重复度和幻读区别：</strong></p><p>不可重复读的重点是修改，幻读的重点在于新增或者删除。</p><p>例1（同样的条件, 你读取过的数据, 再次读取出来发现值不一样了 ）：事务1中的A先生读取自己的工资为     1000的操作还没完成，事务2中的B先生就修改了A的工资为2000，导        致A再读自己的工资时工资变为  2000；这就是不可重复读。</p><p>例2（同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。</p><blockquote><h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4></blockquote><p>TransactionDefinition 接口中定义了五个表示隔离级别的常量：</p><ul><li><strong>TransactionDefinition.ISOLATION_DEFAULT:</strong>    使用后端数据库默认的隔离级别，Mysql 默认采用的 REPEATABLE_READ隔离级别 Oracle 默认采用的 READ_COMMITTED隔离级别.</li><li><strong>TransactionDefinition.ISOLATION_READ_UNCOMMITTED:</strong> 最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能会导致脏读、幻读或不可重复读</strong></li><li><strong>TransactionDefinition.ISOLATION_READ_COMMITTED:</strong>     允许读取并发事务已经提交的数据，<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong></li><li><strong>TransactionDefinition.ISOLATION_REPEATABLE_READ:</strong>     对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生。</strong></li><li><strong>TransactionDefinition.ISOLATION_SERIALIZABLE:</strong>     最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读</strong>。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</li></ul><h3 id="（2）事务传播行为（为了解决业务层方法之间互相调用的事务问题）："><a href="#（2）事务传播行为（为了解决业务层方法之间互相调用的事务问题）：" class="headerlink" title="（2）事务传播行为（为了解决业务层方法之间互相调用的事务问题）："></a>（2）事务传播行为（为了解决业务层方法之间互相调用的事务问题）：</h3><p>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：</p><p><strong>支持当前事务的情况：</strong></p><ul><li><strong>TransactionDefinition.PROPAGATION_REQUIRED：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li><li><strong>TransactionDefinition.PROPAGATION_SUPPORTS：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li><li><strong>TransactionDefinition.PROPAGATION_MANDATORY：</strong> 如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）</li></ul><p><strong>不支持当前事务的情况：</strong></p><ul><li><strong>TransactionDefinition.PROPAGATION_REQUIRES_NEW：</strong> 创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li><li><strong>TransactionDefinition.PROPAGATION_NOT_SUPPORTED：</strong> 以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li><li><strong>TransactionDefinition.PROPAGATION_NEVER：</strong> 以非事务方式运行，如果当前存在事务，则抛出异常。</li></ul><p><strong>其他情况：</strong></p><ul><li><strong>TransactionDefinition.PROPAGATION_NESTED：</strong> 如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</li></ul><p>这里需要指出的是，前面的六种事务传播行为是 Spring 从 EJB 中引入的，他们共享相同的概念。而 <strong>PROPAGATION_NESTED</strong> 是 Spring 所特有的。以 PROPAGATION_NESTED 启动的事务内嵌于外部事务中（如果存在外部事务的话），此时，内嵌事务并不是一个独立的事务，它依赖于外部事务的存在，只有通过外部的事务提交，才能引起内部事务的提交，嵌套的子事务不能单独提交。如果熟悉 JDBC 中的保存点（SavePoint）的概念，那嵌套事务就很容易理解了，其实嵌套的子事务就是保存点的一个应用，一个事务中可以包括多个保存点，每一个嵌套子事务。另外，外部事务的回滚也会导致嵌套子事务的回滚。</p><h3 id="3-事务超时属性-一个事务允许执行的最长时间"><a href="#3-事务超时属性-一个事务允许执行的最长时间" class="headerlink" title="(3) 事务超时属性(一个事务允许执行的最长时间)"></a>(3) 事务超时属性(一个事务允许执行的最长时间)</h3><p>所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。</p><h3 id="4-事务只读属性（对事物资源是否执行只读操作）"><a href="#4-事务只读属性（对事物资源是否执行只读操作）" class="headerlink" title="(4) 事务只读属性（对事物资源是否执行只读操作）"></a>(4) 事务只读属性（对事物资源是否执行只读操作）</h3><p>事务的只读属性是指，对事务性资源进行只读操作或者是读写操作。所谓事务性资源就是指那些被事务管理的资源，比如数据源、 JMS 资源，以及自定义的事务性资源等等。如果确定只对事务性资源进行只读操作，那么我们可以将事务标志为只读的，以提高事务处理的性能。在 TransactionDefinition 中以 boolean 类型来表示该事务是否只读。</p><h3 id="5-回滚规则（定义事务回滚规则）"><a href="#5-回滚规则（定义事务回滚规则）" class="headerlink" title="(5) 回滚规则（定义事务回滚规则）"></a>(5) 回滚规则（定义事务回滚规则）</h3><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><h2 id="使用API"><a href="#使用API" class="headerlink" title="使用API"></a>使用API</h2><p>下面给出一个基于底层 API 的编程式事务管理的示例，<br>基于PlatformTransactionManager、TransactionDefinition 和 TransactionStatus 三个核心接口，我们完全可以通过编程的方式来进行事务管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankServiceImpl</span> <span class="keyword">implements</span> <span class="title">BankService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BankDao bankDao;</span><br><span class="line">    <span class="keyword">private</span> TransactionDefinition txDefinition;</span><br><span class="line">    <span class="keyword">private</span> PlatformTransactionManager txManager;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">transfer</span><span class="params">(Long fromId， Long toId， <span class="keyword">double</span> amount)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取一个事务</span></span><br><span class="line">    TransactionStatus txStatus = txManager.getTransaction(txDefinition);</span><br><span class="line">    <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        result = bankDao.transfer(fromId， toId， amount);</span><br><span class="line">        txManager.commit(txStatus);    <span class="comment">// 事务提交</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        result = <span class="keyword">false</span>;</span><br><span class="line">        txManager.rollback(txStatus);      <span class="comment">// 事务回滚</span></span><br><span class="line">        System.out.println(<span class="string">"Transfer Error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">相应的配置文件如下所示：</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bankService"</span> <span class="attr">class</span>=<span class="string">"footmark.spring.core.tx.programmatic.origin.BankServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bankDao"</span> <span class="attr">ref</span>=<span class="string">"bankDao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"txManager"</span> <span class="attr">ref</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"txDefinition"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.support.DefaultTransactionDefinition"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"propagationBehaviorName"</span> <span class="attr">value</span>=<span class="string">"PROPAGATION_REQUIRED"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>如上所示，我们在BankServiceImpl类中增加了两个属性：一个是 TransactionDefinition 类型的属性，它用于定义事务的规则；另一个是 PlatformTransactionManager 类型的属性，用于执行事务管理操作。如果一个业务方法需要添加事务，我们首先需要在方法开始执行前调用PlatformTransactionManager.getTransaction(…) 方法启动一个事务；创建并启动了事务之后，便可以开始编写业务逻辑代码，然后在适当的地方执行事务的提交或者回滚。</span><br></pre></td></tr></table></figure><h2 id="基于-TransactionTemplate-的编程式事务管理"><a href="#基于-TransactionTemplate-的编程式事务管理" class="headerlink" title="基于 TransactionTemplate 的编程式事务管理"></a>基于 TransactionTemplate 的编程式事务管理</h2><p>　　当然，除了可以使用基于底层 API 的编程式事务外，还可以使用基于 TransactionTemplate 的编程式事务管理。通过上面的示例可以发现，上述事务管理的代码散落在业务逻辑代码中，破坏了原有代码的条理性，并且每一个业务方法都包含了类似的启动事务、提交/回滚事务的样板代码。Spring 也意识到了这些，并提供了简化的方法，这就是 Spring 在数据访问层非常常见的 模板回调模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankServiceImpl</span> <span class="keyword">implements</span> <span class="title">BankService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BankDao bankDao;</span><br><span class="line">    <span class="keyword">private</span> TransactionTemplate transactionTemplate;</span><br><span class="line">    ......</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">transfer</span><span class="params">(<span class="keyword">final</span> Long fromId， <span class="keyword">final</span> Long toId， <span class="keyword">final</span> <span class="keyword">double</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Boolean) transactionTemplate.execute(<span class="keyword">new</span> TransactionCallback()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">doInTransaction</span><span class="params">(TransactionStatus status)</span> </span>&#123;</span><br><span class="line">                Object result;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                        result = bankDao.transfer(fromId， toId， amount);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        status.setRollbackOnly();</span><br><span class="line">                        result = <span class="keyword">false</span>;</span><br><span class="line">                        System.out.println(<span class="string">"Transfer Error!"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相应的配置文件如下所示：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"bankService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"footmark.spring.core.tx.programmatic.template.BankServiceImpl"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"bankDao"</span> ref=<span class="string">"bankDao"</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">"transactionTemplate"</span> ref=<span class="string">"transactionTemplate"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>TransactionTemplate 的 execute() 方法有一个 TransactionCallback 类型的参数，该接口中定义了一个 doInTransaction() 方法，通常我们以匿名内部类的方式实现 TransactionCallback 接口，并在其 doInTransaction() 方法中书写业务逻辑代码。这里可以使用默认的事务提交和回滚规则，这样在业务代码中就不需要显式调用任何事务管理的 API。doInTransaction() 方法有一个TransactionStatus 类型的参数，我们可以在方法的任何位置调用该参数的 setRollbackOnly() 方法将事务标识为回滚的，以执行事务回滚。</p><p>​    此外，TransactionCallback 接口有一个子接口 TransactionCallbackWithoutResult，该接口中定义了一个 doInTransactionWithoutResult() 方法，TransactionCallbackWithoutResult 接口主要用于事务过程中不需要返回值的情况。当然，对于不需要返回值的情况，我们仍然可以使用 TransactionCallback 接口，并在方法中返回任意值即可。</p><h2 id="基于底层-API-的编程式事务管理"><a href="#基于底层-API-的编程式事务管理" class="headerlink" title="基于底层 API 的编程式事务管理"></a>基于底层 API 的编程式事务管理</h2><p>　　下面给出一个基于底层 API 的编程式事务管理的示例，<br>基于PlatformTransactionManager、TransactionDefinition 和 TransactionStatus 三个核心接口，我们完全可以通过编程的方式来进行事务管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankServiceImpl</span> <span class="keyword">implements</span> <span class="title">BankService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BankDao bankDao;</span><br><span class="line">    <span class="keyword">private</span> TransactionDefinition txDefinition;</span><br><span class="line">    <span class="keyword">private</span> PlatformTransactionManager txManager;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">transfer</span><span class="params">(Long fromId， Long toId， <span class="keyword">double</span> amount)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取一个事务</span></span><br><span class="line">    TransactionStatus txStatus = txManager.getTransaction(txDefinition);</span><br><span class="line">    <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        result = bankDao.transfer(fromId， toId， amount);</span><br><span class="line">        txManager.commit(txStatus);    <span class="comment">// 事务提交</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        result = <span class="keyword">false</span>;</span><br><span class="line">        txManager.rollback(txStatus);      <span class="comment">// 事务回滚</span></span><br><span class="line">        System.out.println(<span class="string">"Transfer Error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">相应的配置文件如下所示：</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bankService"</span> <span class="attr">class</span>=<span class="string">"footmark.spring.core.tx.programmatic.origin.BankServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bankDao"</span> <span class="attr">ref</span>=<span class="string">"bankDao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"txManager"</span> <span class="attr">ref</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"txDefinition"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.support.DefaultTransactionDefinition"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"propagationBehaviorName"</span> <span class="attr">value</span>=<span class="string">"PROPAGATION_REQUIRED"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如上所示，我们在BankServiceImpl类中增加了两个属性：一个是 TransactionDefinition 类型的属性，它用于定义事务的规则；另一个是 PlatformTransactionManager 类型的属性，用于执行事务管理操作。如果一个业务方法需要添加事务，我们首先需要在方法开始执行前调用PlatformTransactionManager.getTransaction(…) 方法启动一个事务；创建并启动了事务之后，便可以开始编写业务逻辑代码，然后在适当的地方执行事务的提交或者回滚。</p><h2 id="基于-TransactionTemplate-的编程式事务管理-1"><a href="#基于-TransactionTemplate-的编程式事务管理-1" class="headerlink" title="基于 TransactionTemplate 的编程式事务管理"></a>基于 TransactionTemplate 的编程式事务管理</h2><p>　　当然，除了可以使用基于底层 API 的编程式事务外，还可以使用基于 TransactionTemplate 的编程式事务管理。通过上面的示例可以发现，上述事务管理的代码散落在业务逻辑代码中，破坏了原有代码的条理性，并且每一个业务方法都包含了类似的启动事务、提交/回滚事务的样板代码。Spring 也意识到了这些，并提供了简化的方法，这就是 Spring 在数据访问层非常常见的 模板回调模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankServiceImpl</span> <span class="keyword">implements</span> <span class="title">BankService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BankDao bankDao;</span><br><span class="line">    <span class="keyword">private</span> TransactionTemplate transactionTemplate;</span><br><span class="line">    ......</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">transfer</span><span class="params">(<span class="keyword">final</span> Long fromId， <span class="keyword">final</span> Long toId， <span class="keyword">final</span> <span class="keyword">double</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Boolean) transactionTemplate.execute(<span class="keyword">new</span> TransactionCallback()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">doInTransaction</span><span class="params">(TransactionStatus status)</span> </span>&#123;</span><br><span class="line">                Object result;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                        result = bankDao.transfer(fromId， toId， amount);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        status.setRollbackOnly();</span><br><span class="line">                        result = <span class="keyword">false</span>;</span><br><span class="line">                        System.out.println(<span class="string">"Transfer Error!"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相应的配置文件如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bankService"</span> <span class="attr">class</span>=<span class="string">"footmark.spring.core.tx.programmatic.template.BankServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bankDao"</span> <span class="attr">ref</span>=<span class="string">"bankDao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionTemplate"</span> <span class="attr">ref</span>=<span class="string">"transactionTemplate"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>TransactionTemplate 的 execute() 方法有一个 TransactionCallback 类型的参数，该接口中定义了一个 doInTransaction() 方法，通常我们以匿名内部类的方式实现 TransactionCallback 接口，并在其 doInTransaction() 方法中书写业务逻辑代码。这里可以使用默认的事务提交和回滚规则，这样在业务代码中就不需要显式调用任何事务管理的 API。doInTransaction() 方法有一个TransactionStatus 类型的参数，我们可以在方法的任何位置调用该参数的 setRollbackOnly() 方法将事务标识为回滚的，以执行事务回滚。</p><p>　　此外，TransactionCallback 接口有一个子接口 TransactionCallbackWithoutResult，该接口中定义了一个 doInTransactionWithoutResult() 方法，TransactionCallbackWithoutResult 接口主要用于事务过程中不需要返回值的情况。当然，对于不需要返回值的情况，我们仍然可以使用 TransactionCallback 接口，并在方法中返回任意值即可。</p><h2 id="Spring-声明式事务管理"><a href="#Spring-声明式事务管理" class="headerlink" title="Spring 声明式事务管理"></a>Spring 声明式事务管理</h2><p>　　Spring 的声明式事务管理是建立在 Spring AOP 机制之上的，其本质是对目标方法前后进行拦截，并在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。</p><p>　　声明式事务最大的优点就是不需要通过编程的方式管理事务，这样就不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中作相关的事务规则声明（或通过等价的基于标注的方式），便可以将事务规则应用到业务逻辑中。总的来说，声明式事务得益于 Spring IoC容器 和 Spring AOP 机制的支持：IoC容器为声明式事务管理提供了基础设施，使得 Bean 对于 Spring 框架而言是可管理的；而由于事务管理本身就是一个典型的横切逻辑（正是 AOP 的用武之地），因此 Spring AOP 机制是声明式事务管理的直接实现者。</p><p>　　显然，声明式事务管理要优于编程式事务管理，这正是spring倡导的非侵入式的开发方式。声明式事务管理使业务代码不受污染，一个普通的POJO对象，只要在XML文件中配置或者添加注解就可以获得完全的事务支持。因此，通常情况下，笔者强烈建议在开发中使用声明式事务，不仅因为其简单，更主要是因为这样使得纯业务代码不被污染，极大方便后期的代码维护。</p><h2 id="基于-命名空间的声明式事务管理"><a href="#基于-命名空间的声明式事务管理" class="headerlink" title="基于  命名空间的声明式事务管理"></a>基于 <tx> 命名空间的声明式事务管理</tx></h2><p>　　Spring 2.x 引入了 <tx> 命名空间，结合使用 <aop> 命名空间，带给开发人员配置声明式事务的全新体验，配置变得更加简单和灵活。总的来说，开发者只需基于<tx>和<aop>命名空间在XML中进行简答配置便可实现声明式事务管理。下面基于<tx>使用Hibernate事务管理的配置文件：</tx></aop></tx></aop></tx></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置 DataSourece --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- results in a setDriverClassName(String) call --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://localhost:3306/ssh<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置 sessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据源的设置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用于持久化的实体类类列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"annotatedClasses"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>cn.edu.tju.rico.model.entity.User<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>cn.edu.tju.rico.model.entity.Log<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Hibernate 的配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 方言设置   --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 显示sql --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 格式化sql --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 自动创建/更新数据表 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置 TransactionManager --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate3.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置事务增强处理的切入点，以保证其被恰当的织入 --&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 切点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.edu.tju.rico.service.impl.*.*(..))"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">"bussinessService"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 声明式事务的切入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"bussinessService"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 由txAdvice切面定义事务增强处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- get打头的方法为只读方法,因此将read-only设为 true --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 其他方法为读写方法,因此将read-only设为 false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">isolation</span>=<span class="string">"DEFAULT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 事实上，Spring配置文件中关于事务的配置总是由三个部分组成，即：DataSource、TransactionManager和代理机制三部分，无论哪种配置方式，一般变化的只是代理机制这部分。其中，DataSource、TransactionManager这两部分只是会根据数据访问方式有所变化，比如使用hibernate进行数据访问时，DataSource实际为SessionFactory，TransactionManager的实现为 HibernateTransactionManager。如下图所示：</p><h2 id="基于-Transactional-的声明式事务管理"><a href="#基于-Transactional-的声明式事务管理" class="headerlink" title="基于 @Transactional 的声明式事务管理"></a>基于 @Transactional 的声明式事务管理</h2><p>　　除了基于命名空间的事务配置方式，Spring 还引入了基于 Annotation 的方式，具体主要涉及@Transactional 标注。@Transactional 可以作用于接口、接口方法、类以及类方法上：当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性；当作用于方法上时，该标注来覆盖类级别的定义。如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">transfer</span><span class="params">(Long fromId， Long toId， <span class="keyword">double</span> amount)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bankDao.transfer(fromId， toId， amount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring 使用 BeanPostProcessor 来处理 Bean 中的标注，因此我们需要在配置文件中作如下声明来激活该后处理 Bean，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;tx:annotation-driven transaction-manager=<span class="string">"transactionManager”/&gt;</span></span><br></pre></td></tr></table></figure><p>1 与前面相似，transaction-manager、datasource 和 sessionFactory的配置不变，只需将基于<tx>和<aop>命名空间的配置更换为上述配置即可。</aop></tx></p><h2 id="Spring-声明式事务的本质"><a href="#Spring-声明式事务的本质" class="headerlink" title="Spring 声明式事务的本质"></a>Spring 声明式事务的本质</h2><p>　　就Spring 声明式事务而言，无论其基于 <tx> 命名空间的实现还是基于 @Transactional 的实现，其本质都是 Spring AOP 机制的应用：即通过以@Transactional的方式或者XML配置文件的方式向业务组件中的目标业务方法插入事务增强处理并生成相应的代理对象供应用程序(客户端)使用从而达到无污染地添加事务的目的。如下图所示：</tx></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://juejin.im/post/5b00c52ef265da0b95276091" target="_blank" rel="noopener">https://juejin.im/post/5b00c52ef265da0b95276091</a></p><p><a href="https://blog.csdn.net/justloveyou_/article/details/73733278" target="_blank" rel="noopener">https://blog.csdn.net/justloveyou_/article/details/73733278</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;事务概念回顾&quot;&gt;&lt;a href=&quot;#事务概念回顾&quot; class=&quot;headerlink&quot; title=&quot;事务概念回顾&quot;&gt;&lt;/a&gt;事务概念回顾&lt;/h1&gt;&lt;blockquote&gt;
&lt;h2 id=&quot;什么是事务？&quot;&gt;&lt;a href=&quot;#什么是事务？&quot; class=&quot;hea
      
    
    </summary>
    
    
      <category term="java" scheme="http://wumuwumu.github.io/tags/java/"/>
    
      <category term="spring" scheme="http://wumuwumu.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>python-装饰器</title>
    <link href="http://wumuwumu.github.io/2019/07/31/python/python-%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>http://wumuwumu.github.io/2019/07/31/python/python-装饰器/</id>
    <published>2019-07-31T11:44:57.000Z</published>
    <updated>2019-10-14T09:01:08.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单的装饰器"><a href="#简单的装饰器" class="headerlink" title="简单的装饰器"></a>简单的装饰器</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_logging</span><span class="params">(func)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        logging.warning(<span class="string">"%s is running"</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func()   <span class="comment"># 把 foo 当做参数传递进来时，执行func()就相当于执行foo()</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'i am foo'</span>)</span><br><span class="line"></span><br><span class="line">foo = use_logging(foo)  <span class="comment"># 因为装饰器 use_logging(foo) 返回的时函数对象 wrapper，这条语句相当于  foo = wrapper</span></span><br><span class="line">foo()                   <span class="comment"># 执行foo()就相当于执行 wrapper()</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">WARNING:root:foo is running</span></span><br><span class="line"><span class="string">i am foo</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h1 id="语法糖"><a href="#语法糖" class="headerlink" title="@ 语法糖"></a>@ 语法糖</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_logging</span><span class="params">(func)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        logging.warn(<span class="string">"%s is running"</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@use_logging</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"i am foo"</span>)</span><br><span class="line"></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><h1 id="args、-kwargs"><a href="#args、-kwargs" class="headerlink" title="*args、**kwargs"></a>*args、**kwargs</h1><p>可能有人问，如果我的业务逻辑函数 foo 需要参数怎么办？比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def foo(name):</span><br><span class="line">    print(&quot;i am %s&quot; % name)</span><br></pre></td></tr></table></figure><p>我们可以在定义 wrapper 函数的时候指定参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(name)</span>:</span></span><br><span class="line">        logging.warn(<span class="string">"%s is running"</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(name)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>这样 foo 函数定义的参数就可以定义在 wrapper 函数中。这时，又有人要问了，如果 foo 函数接收两个参数呢？三个参数呢？更有甚者，我可能传很多个。当装饰器不知道 foo 到底有多少个参数时，我们可以用 *args 来代替：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args)</span>:</span></span><br><span class="line">        logging.warn(<span class="string">"%s is running"</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>如此一来，甭管 foo 定义了多少个参数，我都可以完整地传递到 func 中去。这样就不影响 foo 的业务逻辑了。这时还有读者会问，如果 foo 函数还定义了一些关键字参数呢？比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(name, age=None, height=None)</span>:</span></span><br><span class="line">    print(<span class="string">"I am %s, age %s, height %s"</span> % (name, age, height))</span><br></pre></td></tr></table></figure><p>这时，你就可以把 wrapper 函数指定关键字函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># args是一个数组，kwargs一个字典</span></span><br><span class="line">        logging.warn(<span class="string">"%s is running"</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><h1 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h1><p>装饰器还有更大的灵活性，例如带参数的装饰器，在上面的装饰器调用中，该装饰器接收唯一的参数就是执行业务的函数 foo 。装饰器的语法允许我们在调用时，提供其它参数，比如<code>@decorator(a)</code>。这样，就为装饰器的编写和使用提供了更大的灵活性。比如，我们可以在装饰器中指定日志的等级，因为不同业务函数可能需要的日志级别是不一样的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_logging</span><span class="params">(level)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> level == <span class="string">"warn"</span>:</span><br><span class="line">                logging.warn(<span class="string">"%s is running"</span> % func.__name__)</span><br><span class="line">            <span class="keyword">elif</span> level == <span class="string">"info"</span>:</span><br><span class="line">                logging.info(<span class="string">"%s is running"</span> % func.__name__)</span><br><span class="line">            <span class="keyword">return</span> func(*args)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@use_logging(level="warn")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(name=<span class="string">'foo'</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"i am %s"</span> % name)</span><br><span class="line"></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><p>上面的 use_logging 是允许带参数的装饰器。它实际上是对原有装饰器的一个函数封装，并返回一个装饰器。我们可以将它理解为一个含有参数的闭包。当我 们使用<code>@use_logging(level=&quot;warn&quot;)</code>调用的时候，Python 能够发现这一层的封装，并把参数传递到装饰器的环境中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@use_logging(level="warn")`等价于`@decorator</span></span><br></pre></td></tr></table></figure><h1 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h1><p>没错，装饰器不仅可以是函数，还可以是类，相比函数装饰器，类装饰器具有灵活度大、高内聚、封装性等优点。使用类装饰器主要依靠类的<code>__call__</code>方法，当使用 @ 形式将装饰器附加到函数上时，就会调用此方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">        self._func = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'class decorator runing'</span>)</span><br><span class="line">        self._func()</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'class decorator ending'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Foo</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'bar'</span>)</span><br><span class="line"></span><br><span class="line">bar()</span><br></pre></td></tr></table></figure><h3 id="functools-wraps"><a href="#functools-wraps" class="headerlink" title="functools.wraps"></a>functools.wraps</h3><p>使用装饰器极大地复用了代码，但是他有一个缺点就是原函数的元信息不见了，比如函数的<code>docstring</code>、<code>__name__</code>、参数列表，先看例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logged</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">with_logging</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> func.__name__      <span class="comment"># 输出 'with_logging'</span></span><br><span class="line">        <span class="keyword">print</span> func.__doc__       <span class="comment"># 输出 None</span></span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> with_logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数</span></span><br><span class="line"><span class="meta">@logged</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">   <span class="string">"""does some math"""</span></span><br><span class="line">   <span class="keyword">return</span> x + x * x</span><br><span class="line"></span><br><span class="line">logged(f)</span><br></pre></td></tr></table></figure><p>不难发现，函数 f 被<code>with_logging</code>取代了，当然它的<code>docstring</code>，<code>__name__</code>就是变成了<code>with_logging</code>函数的信息了。好在我们有<code>functools.wraps</code>，<code>wraps</code>本身也是一个装饰器，它能把原函数的元信息拷贝到装饰器里面的 func 函数中，这使得装饰器里面的 func 函数也有和原函数 foo 一样的元信息了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logged</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">with_logging</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> func.__name__      <span class="comment"># 输出 'f'</span></span><br><span class="line">        <span class="keyword">print</span> func.__doc__       <span class="comment"># 输出 'does some math'</span></span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> with_logging</span><br><span class="line"></span><br><span class="line"><span class="meta">@logged</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">   <span class="string">"""does some math"""</span></span><br><span class="line">   <span class="keyword">return</span> x + x * x</span><br></pre></td></tr></table></figure><h1 id="装饰器顺序"><a href="#装饰器顺序" class="headerlink" title="装饰器顺序"></a>装饰器顺序</h1><p>一个函数还可以同时定义多个装饰器，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@a</span></span><br><span class="line"><span class="meta">@b</span></span><br><span class="line"><span class="meta">@c</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span> <span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>它的执行顺序是从里到外，最先调用最里层的装饰器，最后调用最外层的装饰器，它等效于</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = a(b(c(f)))</span><br></pre></td></tr></table></figure><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="与-区别"><a href="#与-区别" class="headerlink" title="*与**区别"></a>*与**区别</h2><p>在Python的函数定义中使用<em>args和**kwargs可传递可变参数。</em>args用作传递非命名键值可变长参数列表（位置参数），**kwargs用作传递键值可变长参数列表。在函数调用的时候也有解构的使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_var_args</span><span class="params">(farg, *args)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"formal arg:"</span>, farg</span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"another arg:"</span>, arg</span><br><span class="line"> </span><br><span class="line">test_var_args(<span class="number">1</span>, <span class="string">"two"</span>, <span class="number">3</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">formal arg: 1</span></span><br><span class="line"><span class="string">another arg: two</span></span><br><span class="line"><span class="string">another arg: 3</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_var_kwargs</span><span class="params">(farg, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"formal arg:"</span>, farg</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> kwargs:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"another keyword arg: %s: %s"</span> % (key, kwargs[key])</span><br><span class="line"> </span><br><span class="line">test_var_kwargs(farg=<span class="number">1</span>, myarg2=<span class="string">"two"</span>, myarg3=<span class="number">3</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Required argument:  1</span></span><br><span class="line"><span class="string">Optional argument (*args):  2</span></span><br><span class="line"><span class="string">Optional argument (*args):  3</span></span><br><span class="line"><span class="string">Optional argument (*args):  4</span></span><br><span class="line"><span class="string">Optional argument k2 (*kwargs): 6</span></span><br><span class="line"><span class="string">Optional argument k1 (*kwargs): 5</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_var_args_call</span><span class="params">(arg1, arg2, arg3)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"arg1:"</span>, arg1</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"arg2:"</span>, arg2</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"arg3:"</span>, arg3</span><br><span class="line"> </span><br><span class="line">args = (<span class="string">"two"</span>, <span class="number">3</span>)</span><br><span class="line">test_var_args_call(<span class="number">1</span>, *args)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_var_args_call</span><span class="params">(arg1, arg2, arg3)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"arg1:"</span>, arg1</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"arg2:"</span>, arg2</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"arg3:"</span>, arg3</span><br><span class="line"> </span><br><span class="line">kwargs = &#123;<span class="string">"arg3"</span>: <span class="number">3</span>, <span class="string">"arg2"</span>: <span class="string">"two"</span>&#125;</span><br><span class="line">test_var_args_call(<span class="number">1</span>, **kwargs)</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://foofish.net/python-decorator.html" target="_blank" rel="noopener">https://foofish.net/python-decorator.html</a></p><p><a href="https://www.biaodianfu.com/python-args-kwargs.html" target="_blank" rel="noopener">https://www.biaodianfu.com/python-args-kwargs.html</a></p><p><a href="https://my.oschina.net/leejun2005/blog/477614" target="_blank" rel="noopener">https://my.oschina.net/leejun2005/blog/477614</a> 例子介绍的很详细</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简单的装饰器&quot;&gt;&lt;a href=&quot;#简单的装饰器&quot; class=&quot;headerlink&quot; title=&quot;简单的装饰器&quot;&gt;&lt;/a&gt;简单的装饰器&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
    
      <category term="python" scheme="http://wumuwumu.github.io/tags/python/"/>
    
  </entry>
  
</feed>
