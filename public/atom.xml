<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wumu&#39;s blog</title>
  
  <subtitle>wumu的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wumuwumu.github.io/"/>
  <updated>2020-09-17T09:49:21.558Z</updated>
  <id>http://wumuwumu.github.io/</id>
  
  <author>
    <name>wumu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>postgresql账号管理</title>
    <link href="http://wumuwumu.github.io/2020/09/16/postgresql/postgresql%E8%B4%A6%E5%8F%B7%E7%AE%A1%E7%90%86/"/>
    <id>http://wumuwumu.github.io/2020/09/16/postgresql/postgresql账号管理/</id>
    <published>2020-09-16T10:37:46.000Z</published>
    <updated>2020-09-17T09:49:21.558Z</updated>
    
    <content type="html"><![CDATA[<p><strong>注意：</strong>创建好用户（角色）之后需要连接的话，还需要修改2个权限控制的配置文件（pg_hba.conf、pg_ident.conf）。并且创建用户（user）和创建角色（role）一样，唯一的区别是用户默认可以登录，而创建的角色默认不能登录。创建用户和角色的各个参数选项是一样的。</p><p><strong>Tip：安装PostgreSQL会自动创建一个postgres用户，需要切换到该用户下访问PostgreSQL。</strong></p><ul><li><p><a href="https://www.postgresql.org/docs/11/sql-createuser.html" target="_blank" rel="noopener">创建用户/角色</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER/ROLE name [ [ WITH ] option [ ... ] ]  : 关键词 USER,ROLE； name 用户或角色名； </span><br><span class="line"></span><br><span class="line">where option can be:</span><br><span class="line"></span><br><span class="line">      SUPERUSER | NOSUPERUSER      :超级权限，拥有所有权限，默认nosuperuser。</span><br><span class="line">    | CREATEDB | NOCREATEDB        :建库权限，默认nocreatedb。</span><br><span class="line">    | CREATEROLE | NOCREATEROLE    :建角色权限，拥有创建、修改、删除角色，默认nocreaterole。</span><br><span class="line">    | INHERIT | NOINHERIT          :继承权限，可以把除superuser权限继承给其他用户/角色，默认inherit。</span><br><span class="line">    | LOGIN | NOLOGIN              :登录权限，作为连接的用户，默认nologin，除非是create user（默认登录）。</span><br><span class="line">    | REPLICATION | NOREPLICATION  :复制权限，用于物理或则逻辑复制（复制和删除slots），默认是noreplication。</span><br><span class="line">    | BYPASSRLS | NOBYPASSRLS      :安全策略RLS权限，默认nobypassrls。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">| CONNECTION LIMIT connlimit   :限制用户并发数，默认-1，不限制。正常连接会受限制，后台连接和prepared事务不受限制。</span><br><span class="line">| [ ENCRYPTED ] PASSWORD &apos;password&apos; | PASSWORD NULL :设置密码，密码仅用于有login属性的用户，不使用密码身份验证，则可以省略此选项。可以选择将空密码显式写为PASSWORD NULL。</span><br><span class="line">                                                     加密方法由配置参数password_encryption确定，密码始终以加密方式存储在系统目录中。</span><br><span class="line">| VALID UNTIL &apos;timestamp&apos;      :密码有效期时间，不设置则用不失效。</span><br><span class="line">| IN ROLE role_name [, ...]    :新角色将立即添加为新成员。</span><br><span class="line">| IN GROUP role_name [, ...]   :同上</span><br><span class="line">| ROLE role_name [, ...]       :ROLE子句列出一个或多个现有角色，这些角色自动添加为新角色的成员。 （这实际上使新角色成为“组”）。</span><br><span class="line">| ADMIN role_name [, ...]      :与ROLE类似，但命名角色将添加到新角色WITH ADMIN OPTION，使他们有权将此角色的成员资格授予其他人。</span><br><span class="line">| USER role_name [, ...]       :同上</span><br><span class="line">| SYSID uid                    :被忽略，但是为向后兼容性而存在。</span><br></pre></td></tr></table></figure></li></ul><p>​      <strong>示例：</strong></p><ol><li><p>创建不需要密码登陆的用户zjy：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">postgres=# CREATE ROLE zjy LOGIN;</span><br><span class="line">CREATE ROLE</span><br></pre></td></tr></table></figure><p>创建该用户后，还不能直接登录。需要修改 <strong>pg_hba.conf</strong> 文件（后面会对该文件进行说明），加入：</p><p>①：本地登陆：local   all    all    <strong>trust</strong>②：远程登陆：host   all    all    192.168.163.132/32     <strong>trust</strong></p></li><li><p>创建需要密码登陆的用户zjy1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">postgres=# CREATE USER zjy1 WITH PASSWORD &apos;zjy1&apos;;</span><br><span class="line">CREATE ROLE</span><br></pre></td></tr></table></figure><p>和ROLE的区别是：USER带LOGIN属性。也需要修改 <strong>pg_hba.conf</strong> 文件（后面会对该文件进行说明），加入：<br>host    all     all     192.168.163.132/32    <strong>md5</strong></p></li><li><p>创建有时间限制的用户zjy2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">postgres=# CREATE ROLE zjy2 WITH LOGIN PASSWORD &apos;zjy2&apos; VALID UNTIL &apos;2019-05-30&apos;;</span><br><span class="line">CREATE ROLE</span><br></pre></td></tr></table></figure><p>和2的处理方法一样，修改 <strong>pg_hba.conf</strong> 文件，该用户会的密码在给定的时间之后过期不可用。</p></li><li><p>创建有创建数据库和管理角色权限的用户admin：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">postgres=# CREATE ROLE admin WITH CREATEDB CREATEROLE;</span><br><span class="line">CREATE ROLE</span><br></pre></td></tr></table></figure><p>注意：拥有创建数据库，角色的用户，也可以删除和修改这些对象。</p></li><li><p>创建具有超级权限的用户：admin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">postgres=# CREATE ROLE admin WITH SUPERUSER LOGIN PASSWORD &apos;admin&apos;;</span><br><span class="line">CREATE ROLE</span><br></pre></td></tr></table></figure></li><li><p>创建复制账号：repl </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">postgres=# CREATE USER repl REPLICATION LOGIN ENCRYPTED PASSWORD &apos;repl&apos;;</span><br><span class="line">CREATE ROLE</span><br></pre></td></tr></table></figure></li><li><p>其他说明</p></li></ol><ol start="8"><li></li></ol><ul><li><a href="https://www.postgresql.org/docs/11/sql-grant.html" target="_blank" rel="noopener">授权，定义访问权限</a></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">GRANT &#123; &#123; SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER &#125;</span><br><span class="line">    [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class="line">    ON &#123; [ TABLE ] table_name [, ...]</span><br><span class="line">         | ALL TABLES IN SCHEMA schema_name [, ...] &#125;</span><br><span class="line">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br><span class="line"></span><br><span class="line">##单表授权：授权zjy账号可以访问schema为zjy的zjy表</span><br><span class="line">grant select,insert,update,delete on zjy.zjy to zjy;</span><br><span class="line">##所有表授权：</span><br><span class="line">grant select,insert,update,delete on all tables in schema zjy to zjy;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GRANT &#123; &#123; SELECT | INSERT | UPDATE | REFERENCES &#125; ( column_name [, ...] )</span><br><span class="line">    [, ...] | ALL [ PRIVILEGES ] ( column_name [, ...] ) &#125;</span><br><span class="line">    ON [ TABLE ] table_name [, ...]</span><br><span class="line">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br><span class="line"></span><br><span class="line">##列授权，授权指定列(zjy schema下的zjy表的name列)的更新权限给zjy用户</span><br><span class="line">grant update (name) on zjy.zjy to zjy;</span><br><span class="line">##指定列授不同权限，zjy schema下的zjy表，查看更新name、age字段，插入name字段</span><br><span class="line">grant select (name,age),update (name,age),insert(name) on zjy.xxx to zjy;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GRANT &#123; &#123; USAGE | SELECT | UPDATE &#125;</span><br><span class="line">    [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class="line">    ON &#123; SEQUENCE sequence_name [, ...]</span><br><span class="line">         | ALL SEQUENCES IN SCHEMA schema_name [, ...] &#125;</span><br><span class="line">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br><span class="line"></span><br><span class="line">##序列（自增键）属性授权，指定zjy schema下的seq_id_seq 给zjy用户</span><br><span class="line">grant select,update on sequence zjy.seq_id_seq to zjy;</span><br><span class="line">##序列（自增键）属性授权，给用户zjy授权zjy schema下的所有序列</span><br><span class="line">grant select,update on all sequences in schema zjy to zjy;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GRANT &#123; &#123; CREATE | CONNECT | TEMPORARY | TEMP &#125; [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class="line">    ON DATABASE database_name [, ...]</span><br><span class="line">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br><span class="line"></span><br><span class="line">##连接数据库权限，授权cc用户连接数据库zjy</span><br><span class="line">grant connect on database zjy to cc;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GRANT &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class="line">    ON DOMAIN domain_name [, ...]</span><br><span class="line">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br><span class="line"></span><br><span class="line">##</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GRANT &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class="line">    ON FOREIGN DATA WRAPPER fdw_name [, ...]</span><br><span class="line">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br></pre></td></tr></table></figure><pre><code>\##</code></pre>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GRANT &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class="line">    ON FOREIGN SERVER server_name [, ...]</span><br><span class="line">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">##</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GRANT &#123; EXECUTE | ALL [ PRIVILEGES ] &#125;</span><br><span class="line">    ON &#123; &#123; FUNCTION | PROCEDURE | ROUTINE &#125; routine_name [ ( [ [ argmode ] [ arg_name ] arg_type [, ...] ] ) ] [, ...]</span><br><span class="line">         | ALL &#123; FUNCTIONS | PROCEDURES | ROUTINES &#125; IN SCHEMA schema_name [, ...] &#125;</span><br><span class="line">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">##</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GRANT &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class="line">    ON LANGUAGE lang_name [, ...]</span><br><span class="line">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br></pre></td></tr></table></figure><pre><code>\##</code></pre>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GRANT &#123; &#123; SELECT | UPDATE &#125; [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class="line">    ON LARGE OBJECT loid [, ...]</span><br><span class="line">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">##</span><br><span class="line"></span><br><span class="line">GRANT &#123; &#123; CREATE | USAGE &#125; [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class="line">    ON SCHEMA schema_name [, ...]</span><br><span class="line">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br><span class="line"></span><br><span class="line">##连接schema权限，授权cc访问zjy schema权限</span><br><span class="line">grant usage on schema zjy to cc;</span><br><span class="line"></span><br><span class="line">GRANT &#123; CREATE | ALL [ PRIVILEGES ] &#125;</span><br><span class="line">    ON TABLESPACE tablespace_name [, ...]</span><br><span class="line">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br><span class="line"></span><br><span class="line">GRANT &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class="line">    ON TYPE type_name [, ...]</span><br><span class="line">    TO role_specification [, ...] [ WITH GRANT OPTION ]</span><br><span class="line"></span><br><span class="line">where role_specification can be:</span><br><span class="line"></span><br><span class="line">    [ GROUP ] role_name</span><br><span class="line">  | PUBLIC</span><br><span class="line">  | CURRENT_USER</span><br><span class="line">  | SESSION_USER</span><br><span class="line"></span><br><span class="line">GRANT role_name [, ...] TO role_name [, ...] [ WITH ADMIN OPTION ]</span><br><span class="line">##把zjy用户的权限授予用户cc。</span><br><span class="line">grant zjy to cc;</span><br></pre></td></tr></table></figure><p>  <a href="https://blog.51cto.com/riverxyz/1880795" target="_blank" rel="noopener">权限说明</a>：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">SELECT：允许从指定表，视图或序列的任何列或列出的特定列进行SELECT。也允许使用COPY TO。在UPDATE或DELETE中引用现有列值也需要此权限。对于序列，此权限还允许使用currval函数。对于大对象，此权限允许读取对象。</span><br><span class="line"></span><br><span class="line">INSERT：允许将新行INSERT到指定的表中。如果列出了特定列，则只能在INSERT命令中为这些列分配（因此其他列将接收默认值）。也允许COPY FROM。</span><br><span class="line"></span><br><span class="line">UPDATE：允许更新指定表的任何列或列出的特定列，需要SELECT权限。</span><br><span class="line"></span><br><span class="line">DELETE：允许删除指定表中的行，需要SELECT权限。</span><br><span class="line"></span><br><span class="line">TRUNCATE：允许在指定的表上创建触发器。</span><br><span class="line"></span><br><span class="line">REFERENCES：允许创建引用指定表或表的指定列的外键约束。</span><br><span class="line"></span><br><span class="line">TRIGGER：允许在指定的表上创建触发器。 </span><br><span class="line"></span><br><span class="line">CREATE：对于数据库，允许在数据库中创建新的schema、table、index。</span><br><span class="line"></span><br><span class="line">CONNECT：允许用户连接到指定的数据库。在连接启动时检查此权限。</span><br><span class="line"></span><br><span class="line">TEMPORARY、TEMP：允许在使用指定数据库时创建临时表。</span><br><span class="line"></span><br><span class="line">EXECUTE：允许使用指定的函数或过程以及在函数。</span><br><span class="line"></span><br><span class="line">USAGE：对于schema，允许访问指定模式中包含的对象；对于sequence，允许使用currval和nextval函数。对于类型和域，允许在创建表，函数和其他模式对象时使用类型或域。</span><br><span class="line"></span><br><span class="line">ALL PRIVILEGES：一次授予所有可用权限。</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.postgresql.org/docs/11/sql-revoke.html" target="_blank" rel="noopener">撤销权限</a></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">REVOKE [ GRANT OPTION FOR ]</span><br><span class="line">    &#123; &#123; SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER &#125;</span><br><span class="line">    [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class="line">    ON &#123; [ TABLE ] table_name [, ...]</span><br><span class="line">         | ALL TABLES IN SCHEMA schema_name [, ...] &#125;</span><br><span class="line">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class="line">    [ CASCADE | RESTRICT ]</span><br><span class="line"></span><br><span class="line"> ##移除用户zjy在schema zjy上所有表的select权限</span><br><span class="line"> revoke select on all tables in schema zjy from zjy;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">REVOKE [ GRANT OPTION FOR ]</span><br><span class="line">    &#123; &#123; SELECT | INSERT | UPDATE | REFERENCES &#125; ( column_name [, ...] )</span><br><span class="line">    [, ...] | ALL [ PRIVILEGES ] ( column_name [, ...] ) &#125;</span><br><span class="line">    ON [ TABLE ] table_name [, ...]</span><br><span class="line">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class="line">    [ CASCADE | RESTRICT ]</span><br><span class="line"></span><br><span class="line"> ##移除用户zjy在zjy schema的zjy表的age列的查询权限</span><br><span class="line"> revoke select (age) on zjy.zjy from zjy;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">REVOKE [ GRANT OPTION FOR ]</span><br><span class="line">    &#123; &#123; USAGE | SELECT | UPDATE &#125;</span><br><span class="line">    [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class="line">    ON &#123; SEQUENCE sequence_name [, ...]</span><br><span class="line">         | ALL SEQUENCES IN SCHEMA schema_name [, ...] &#125;</span><br><span class="line">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class="line">    [ CASCADE | RESTRICT ]</span><br><span class="line">##序列</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">REVOKE [ GRANT OPTION FOR ]</span><br><span class="line">    &#123; &#123; CREATE | CONNECT | TEMPORARY | TEMP &#125; [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class="line">    ON DATABASE database_name [, ...]</span><br><span class="line">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class="line">    [ CASCADE | RESTRICT ]</span><br><span class="line">##库</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">REVOKE [ GRANT OPTION FOR ]</span><br><span class="line">    &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class="line">    ON DOMAIN domain_name [, ...]</span><br><span class="line">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class="line">    [ CASCADE | RESTRICT]</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">REVOKE [ GRANT OPTION FOR ]</span><br><span class="line">    &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class="line">    ON FOREIGN DATA WRAPPER fdw_name [, ...]</span><br><span class="line">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class="line">    [ CASCADE | RESTRICT]</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line">REVOKE [ GRANT OPTION FOR ]</span><br><span class="line">    &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class="line">    ON FOREIGN SERVER server_name [, ...]</span><br><span class="line">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class="line">    [ CASCADE | RESTRICT]</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">REVOKE [ GRANT OPTION FOR ]</span><br><span class="line">    &#123; EXECUTE | ALL [ PRIVILEGES ] &#125;</span><br><span class="line">    ON &#123; &#123; FUNCTION | PROCEDURE | ROUTINE &#125; function_name [ ( [ [ argmode ] [ arg_name ] arg_type [, ...] ] ) ] [, ...]</span><br><span class="line">         | ALL &#123; FUNCTIONS | PROCEDURES | ROUTINES &#125; IN SCHEMA schema_name [, ...] &#125;</span><br><span class="line">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class="line">    [ CASCADE | RESTRICT ]</span><br><span class="line">##</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">REVOKE [ GRANT OPTION FOR ]</span><br><span class="line">    &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class="line">    ON LANGUAGE lang_name [, ...]</span><br><span class="line">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class="line">    [ CASCADE | RESTRICT ]</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">REVOKE [ GRANT OPTION FOR ]</span><br><span class="line">    &#123; &#123; SELECT | UPDATE &#125; [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class="line">    ON LARGE OBJECT loid [, ...]</span><br><span class="line">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class="line">    [ CASCADE | RESTRICT ]</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">REVOKE [ GRANT OPTION FOR ]</span><br><span class="line">    &#123; &#123; CREATE | USAGE &#125; [, ...] | ALL [ PRIVILEGES ] &#125;</span><br><span class="line">    ON SCHEMA schema_name [, ...]</span><br><span class="line">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class="line">    [ CASCADE | RESTRICT ]</span><br><span class="line">##schena权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">REVOKE [ GRANT OPTION FOR ]</span><br><span class="line">    &#123; CREATE | ALL [ PRIVILEGES ] &#125;</span><br><span class="line">    ON TABLESPACE tablespace_name [, ...]</span><br><span class="line">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class="line">    [ CASCADE | RESTRICT ]</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">REVOKE [ GRANT OPTION FOR ]</span><br><span class="line">    &#123; USAGE | ALL [ PRIVILEGES ] &#125;</span><br><span class="line">    ON TYPE type_name [, ...]</span><br><span class="line">    FROM &#123; [ GROUP ] role_name | PUBLIC &#125; [, ...]</span><br><span class="line">    [ CASCADE | RESTRICT ]</span><br><span class="line">##</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REVOKE [ ADMIN OPTION FOR ]</span><br><span class="line">    role_name [, ...] FROM role_name [, ...]</span><br><span class="line">    [ CASCADE | RESTRICT ]</span><br><span class="line">##</span><br></pre></td></tr></table></figure><p>  注意：任何用户对public的schema都有all的权限，为了安全可以禁止用户对public schema</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">##移除所有用户（public），superuser除外，对指定DB下的public schema的create 权限。</span><br><span class="line">zjy=# revoke  create  on schema public from public;</span><br><span class="line">REVOKE</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.postgresql.org/docs/11/sql-alteruser.html" target="_blank" rel="noopener">修改用户属性</a></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER role_specification [ WITH ] option [ ... ]</span><br><span class="line"></span><br><span class="line">where option can be:</span><br><span class="line"></span><br><span class="line">      SUPERUSER | NOSUPERUSER</span><br><span class="line">    | CREATEDB | NOCREATEDB</span><br><span class="line">    | CREATEROLE | NOCREATEROLE</span><br><span class="line">    | INHERIT | NOINHERIT</span><br><span class="line">    | LOGIN | NOLOGIN</span><br><span class="line">    | REPLICATION | NOREPLICATION</span><br><span class="line">    | BYPASSRLS | NOBYPASSRLS</span><br><span class="line">    | CONNECTION LIMIT connlimit</span><br><span class="line">    | [ ENCRYPTED ] PASSWORD &apos;password&apos; | PASSWORD NULL</span><br><span class="line">    | VALID UNTIL &apos;timestamp&apos;</span><br><span class="line"></span><br><span class="line">ALTER USER name RENAME TO new_name</span><br><span class="line"></span><br><span class="line">ALTER USER &#123; role_specification | ALL &#125; [ IN DATABASE database_name ] SET configuration_parameter &#123; TO | = &#125; &#123; value | DEFAULT &#125;</span><br><span class="line">ALTER USER &#123; role_specification | ALL &#125; [ IN DATABASE database_name ] SET configuration_parameter FROM CURRENT</span><br><span class="line">ALTER USER &#123; role_specification | ALL &#125; [ IN DATABASE database_name ] RESET configuration_parameter</span><br><span class="line">ALTER USER &#123; role_specification | ALL &#125; [ IN DATABASE database_name ] RESET ALL</span><br><span class="line"></span><br><span class="line">where role_specification can be:</span><br><span class="line"></span><br><span class="line">    role_name</span><br><span class="line">  | CURRENT_USER</span><br><span class="line">  | SESSION_USER</span><br></pre></td></tr></table></figure><p>  <strong>示例：</strong>     注意：option选项里的用户都可以通过alter role进行修改</p><ul><li><ul><li><p>修改用户为超级/非超级用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter role caocao with superuser/nosuperuser;</span><br></pre></td></tr></table></figure></li><li><p>修改用户为可/不可登陆用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter role caocao with nologin/login;</span><br></pre></td></tr></table></figure></li><li><p>修改用户名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter role caocao rename to youxing;</span><br></pre></td></tr></table></figure></li><li><p>修改用户密码，移除密码用NULL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter role youxing with password &apos;youxing&apos;;</span><br></pre></td></tr></table></figure></li><li><p>修改用户参数，该用户登陆后的以该参数为准</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter role zjy in database zjy SET geqo to 0/default;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><a href="https://www.postgresql.org/docs/11/auth-pg-hba-conf.html" target="_blank" rel="noopener">控制访问文件</a> pg_hba.conf<a href="https://www.postgresql.org/docs/11/auth-pg-hba-conf.html" target="_blank" rel="noopener"></a></p></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">local      database  user  auth-method  [auth-options]</span><br><span class="line">host       database  user  address  auth-method  [auth-options]</span><br><span class="line">hostssl    database  user  address  auth-method  [auth-options]</span><br><span class="line">hostnossl  database  user  address  auth-method  [auth-options]</span><br><span class="line">host       database  user  IP-address  IP-mask  auth-method  [auth-options]</span><br><span class="line">hostssl    database  user  IP-address  IP-mask  auth-method  [auth-options]</span><br><span class="line">hostnossl  database  user  IP-address  IP-mask  auth-method  [auth-options]</span><br></pre></td></tr></table></figure><p>  <strong>local</strong>：匹配使用Unix域套接字的连接，如果没有此类型的记录，则不允许使用Unix域套接字连接。<br>  <strong>host</strong>：匹配使用TCP/IP进行的连接，主机记录匹配SSL或非SSL连接，需要配置listen_addresses。<br>  <strong>hostssl</strong>：匹配使用TCP/IP进行的连接，仅限于使用SSL加密进行连接，需要配置ssl参数。<br>  <strong>hostnossl</strong>：匹配通过TCP/IP进行的连接，不使用SSL的连接。<br>  <strong>database</strong>：匹配的数据库名称，all指定它匹配所有数据库。如果请求的数据库与请求的用户具有相同的名称则可以使用samerole值。复制（replication）不指定数据库，多个数据库可以用逗号分隔。<br>  <strong>user</strong>：匹配的数据库用户名，值all指定它匹配所有用户。 可以通过用逗号分隔来提供多个用户名。<br>  <strong>address</strong>：匹配的客户端计算机地址，可以包含主机名，IP地址范围。如：172.20.143.89/32、172.20.143.0/24、10.6.0.0/16、:: 1/128。 0.0.0.0/0表示所有IPv4地址，:: 0/0表示所有IPv6地址。要指定单个主机，请使用掩码长度32（对于IPv4）或128（对于IPv6）。all以匹配任何IP地址。<br>  <strong>IP-address、IP-mask</strong>：这两个字段可用作IP地址/掩码长度，如：127.0.0.1 255.255.255.255。<br>  <strong>auth-method</strong>：指定连接与此记录匹配时要使用的身份验证方法：trust、reject、scram-sha-256、md5、password、gss、sspi、ident、peer、ldap、radius、cert、pam、bsd。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">trust：允许无条件连接，允许任何PostgreSQL用户身份登录，而无需密码或任何其他身份验证。</span><br><span class="line">reject：拒绝任何条件连接，这对于从组中“过滤掉”某些主机非常有用。</span><br><span class="line">scram-sha-256：执行SCRAM-SHA-256身份验证以验证用户的密码。</span><br><span class="line">md5：执行SCRAM-SHA-256或MD5身份验证以验证用户的密码。</span><br><span class="line">password：要提供未加密的密码以进行身份验证。由于密码是通过网络以明文形式发送的，因此不应在不受信任的网络上使用。</span><br><span class="line">gss：使用GSSAPI对用户进行身份验证，这仅适用于TCP / IP连接。</span><br><span class="line">sspi：使用SSPI对用户进行身份验证，这仅适用于Windows。</span><br><span class="line">ident：通过联系客户端上的ident服务器获取客户端的操作系统用户名，并检查它是否与请求的数据库用户名匹配。 Ident身份验证只能用于TCP / IP连接。为本地连接指定时，将使用对等身份验证。</span><br><span class="line">peer：从操作系统获取客户端的操作系统用户名，并检查它是否与请求的数据库用户名匹配。这仅适用于本地连接。</span><br><span class="line">ldap：使用LDAP服务器进行身份验证。</span><br><span class="line">radius：使用RADIUS服务器进行身份验证。</span><br><span class="line">cert：使用SSL客户端证书进行身份验证。</span><br><span class="line">pam：使用操作系统提供的可插入身份验证模块（PAM）服务进行身份验证。</span><br><span class="line">bsd：使用操作系统提供的BSD身份验证服务进行身份验证。</span><br></pre></td></tr></table></figure><p>  <strong>auth-options</strong>：在auth-method字段之后，可以存在name = value形式的字段，用于指定认证方法的选项。<br>  例子：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># TYPE  DATABASE    USER   ADDRESS   METHOD</span><br><span class="line">local          all               all                         trust</span><br><span class="line">--在本地允许任何用户无密码登录</span><br><span class="line">local          all                all                        peer</span><br><span class="line">--操作系统的登录用户和pg的用户是否一致，一致则可以登录</span><br><span class="line">local          all                all                        ident</span><br><span class="line">--操作系统的登录用户和pg的用户是否一致，一致则可以登录</span><br><span class="line">host          all                all    192.168.163.0/24   md5</span><br><span class="line">--指定客户端IP访问通过md5身份验证进行登录</span><br><span class="line">host          all                all     192.168.163.132/32   password</span><br><span class="line">--指定客户端IP通过passwotd身份验证进行登录</span><br><span class="line"></span><br><span class="line">host    all             all     192.168.54.1/32         reject</span><br><span class="line">host    all             all     192.168.0.0/16           ident  </span><br><span class="line">host    all             all     127.0.0.1       255.255.255.255     trust</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>  设置完之后可以通过查看表来查看hba：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">zjy=# select * from pg_hba_file_rules;</span><br><span class="line"> line_number | type  |   database    | user_name |    address    |                 netmask                 | auth_method | options | error </span><br><span class="line">-------------+-------+---------------+-----------+---------------+-----------------------------------------+-------------+---------+-------</span><br><span class="line">          87 | host  | &#123;all&#125;         | &#123;all&#125;     | 192.168.163.0 | 255.255.255.0                           | md5         |         | </span><br><span class="line">          92 | local | &#123;all&#125;         | &#123;all&#125;     |               |                                         | peer        |         | </span><br><span class="line">          94 | host  | &#123;all&#125;         | &#123;all&#125;     | 127.0.0.1     | 255.255.255.255                         | md5         |         | </span><br><span class="line">          96 | host  | &#123;all&#125;         | &#123;all&#125;     | ::1           | ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff | md5         |         | </span><br><span class="line">          99 | local | &#123;replication&#125; | &#123;all&#125;     |               |                                         | peer        |         | </span><br><span class="line">         100 | host  | &#123;replication&#125; | &#123;all&#125;     | 127.0.0.1     | 255.255.255.255                         | md5         |         | </span><br><span class="line">         101 | host  | &#123;replication&#125; | &#123;all&#125;     | ::1           | ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff | md5         |         |</span><br></pre></td></tr></table></figure><p>  当然，修改完pg_hba.conf文件之后，需要重新加载配置，不用重启数据库：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">postgres=# select pg_reload_conf();</span><br><span class="line"> pg_reload_conf </span><br><span class="line">----------------</span><br><span class="line"> t</span><br></pre></td></tr></table></figure><ul><li><h3 id="日常使用"><a href="#日常使用" class="headerlink" title="日常使用"></a>日常使用</h3></li></ul><p>用户权限管理涉及到的东西很多，本文也只是大致说明了一小部分，大部分的还得继续学习。那么现在按照一个正常项目上线的流程来创建一个应用账号为例，看看需要怎么操作。</p><p>比如一个项目<strong>zjy</strong>上线：用管理账号来操作</p><ul><li><p>创建数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">postgres=# create database zjy;</span><br><span class="line">CREATE DATABASE</span><br></pre></td></tr></table></figure></li><li><p>创建账号：账号和数据库名字保持一致（search_path）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">postgres=# create user zjy with password &apos;zjy&apos;;</span><br><span class="line">CREATE ROLE</span><br></pre></td></tr></table></figure></li><li><p>创建schema：不能用默认的public的schma</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">postgres=# \c zjy</span><br><span class="line">You are now connected to database &quot;zjy&quot; as user &quot;postgres&quot;.</span><br><span class="line">zjy=# create schema zjy;</span><br><span class="line">CREATE SCHEMA</span><br></pre></td></tr></table></figure></li><li><p>授权：</p><p>[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="javascript:void(0);" alt="复制代码](https://common.cnblogs.com/images/copycode.gif)" title="">                </div>                <div class="image-caption">复制代码](https://common.cnblogs.com/images/copycode.gif)</div>            </figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#访问库</span><br><span class="line">zjy=# grant connect on database zjy to zjy;</span><br><span class="line">GRANT</span><br><span class="line">#访问schmea</span><br><span class="line">zjy=# grant usage on schema zjy to zjy;</span><br><span class="line">GRANT</span><br><span class="line">#访问表</span><br><span class="line">zjy=# grant select,insert,update,delete on all tables in schema zjy to zjy;</span><br><span class="line">GRANT</span><br><span class="line">#如果访问自增序列，需要授权</span><br><span class="line">zjy=# grant select,update on all sequences in schema zjy to zjy;</span><br><span class="line">GRANT</span><br><span class="line"></span><br><span class="line">注意：上面的授权只对历史的一些对象授权，后期增加的对象是没有权限的，需要给个默认权限</span><br><span class="line"></span><br><span class="line">#默认表权限</span><br><span class="line">zjy=# ALTER DEFAULT PRIVILEGES IN SCHEMA zjy GRANT select,insert,update,delete ON TABLES TO zjy;</span><br><span class="line">ALTER DEFAULT PRIVILEGES</span><br><span class="line"></span><br><span class="line">#默认自增序列权限</span><br><span class="line">zjy=# ALTER DEFAULT PRIVILEGES IN SCHEMA zjy GRANT select,update ON sequences TO zjy;</span><br><span class="line">ALTER DEFAULT PRIVILEGES</span><br></pre></td></tr></table></figure></li><li><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3></li></ul><ol><li><p>查看当前用户javascript:void(0);)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">zjy=# \du</span><br><span class="line">                                   List of roles</span><br><span class="line"> Role name |                         Attributes                         | Member of </span><br><span class="line">-----------+------------------------------------------------------------+-----------</span><br><span class="line"> admin     | Superuser, Cannot login                                    | &#123;&#125;</span><br><span class="line"> postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | &#123;&#125;</span><br><span class="line"> zjy       |                                                            | &#123;&#125;</span><br><span class="line"></span><br><span class="line">zjy=# select * from pg_roles;</span><br><span class="line">       rolname        | rolsuper | rolinherit | rolcreaterole | rolcreatedb | rolcanlogin | rolreplication | rolconnlimit | rolpassword | rolvaliduntil | rolbypassrls | rolconfig |  oid  </span><br><span class="line">----------------------+----------+------------+---------------+-------------+-------------+----------------+--------------+-------------+---------------+--------------+-----------+-------</span><br><span class="line"> pg_signal_backend    | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  4200</span><br><span class="line"> postgres             | t        | t          | t             | t           | t           | t              |           -1 | ********    |               | t            |           |    10</span><br><span class="line"> admin                | t        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           | 16456</span><br><span class="line"> pg_read_all_stats    | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  3375</span><br><span class="line"> zjy                  | f        | t          | f             | f           | t           | f              |           -1 | ********    |               | f            |           | 16729</span><br><span class="line"> pg_monitor           | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  3373</span><br><span class="line"> pg_read_all_settings | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  3374</span><br><span class="line"> pg_stat_scan_tables  | f        | t          | f             | f           | f           | f              |           -1 | ********    |               | f            |           |  3377</span><br><span class="line">(8 rows)</span><br></pre></td></tr></table></figure></li><li><p>查看用户权限javascript:void(0);)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">zjy=# select * from information_schema.table_privileges where grantee=&apos;zjy&apos;;</span><br><span class="line"> grantor  | grantee | table_catalog | table_schema | table_name | privilege_type | is_grantable | with_hierarchy </span><br><span class="line">----------+---------+---------------+--------------+------------+----------------+--------------+----------------</span><br><span class="line"> postgres | zjy     | zjy           | zjy          | zjy        | INSERT         | NO           | NO</span><br><span class="line"> postgres | zjy     | zjy           | zjy          | zjy        | SELECT         | NO           | YES</span><br><span class="line"> postgres | zjy     | zjy           | zjy          | zjy        | UPDATE         | NO           | NO</span><br><span class="line"> postgres | zjy     | zjy           | zjy          | zjy        | DELETE         | NO           | NO</span><br><span class="line"> postgres | zjy     | zjy           | zjy          | zjy1       | INSERT         | NO           | NO</span><br><span class="line"> postgres | zjy     | zjy           | zjy          | zjy1       | SELECT         | NO           | YES</span><br><span class="line"> postgres | zjy     | zjy           | zjy          | zjy1       | UPDATE         | NO           | NO</span><br><span class="line"> postgres | zjy     | zjy           | zjy          | zjy1       | DELETE         | NO           | NO</span><br><span class="line"> postgres | zjy     | zjy           | zjy          | zjy2       | INSERT         | NO           | NO</span><br><span class="line"> postgres | zjy     | zjy           | zjy          | zjy2       | SELECT         | NO           | YES</span><br><span class="line"> postgres | zjy     | zjy           | zjy          | zjy2       | UPDATE         | NO           | NO</span><br><span class="line"> postgres | zjy     | zjy           | zjy          | zjy2       | DELETE         | NO           | NO</span><br><span class="line"> postgres | zjy     | zjy           | zjy          | zjy3       | INSERT         | NO           | NO</span><br><span class="line"> postgres | zjy     | zjy           | zjy          | zjy3       | SELECT         | NO           | YES</span><br><span class="line"> postgres | zjy     | zjy           | zjy          | zjy3       | UPDATE         | NO           | NO</span><br><span class="line"> postgres | zjy     | zjy           | zjy          | zjy3       | DELETE         | NO           | NO</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;创建好用户（角色）之后需要连接的话，还需要修改2个权限控制的配置文件（pg_hba.conf、pg_ident.conf）。并且创建用户（user）和创建角色（role）一样，唯一的区别是用户默认可以登录，而创建的角色默认不能登录。创
      
    
    </summary>
    
    
      <category term="linux" scheme="http://wumuwumu.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://wumuwumu.github.io/2020/09/15/%E8%BF%90%E7%BB%B4/centos8%E5%AE%89%E8%A3%85kvm/"/>
    <id>http://wumuwumu.github.io/2020/09/15/运维/centos8安装kvm/</id>
    <published>2020-09-15T09:25:13.620Z</published>
    <updated>2020-09-15T10:02:55.614Z</updated>
    
    <content type="html"><![CDATA[<hr><hr><h1 id="如何在CentOS-RHEL-8上安装KVM虚拟化"><a href="#如何在CentOS-RHEL-8上安装KVM虚拟化" class="headerlink" title="如何在CentOS/RHEL 8上安装KVM虚拟化"></a>如何在CentOS/RHEL 8上安装KVM虚拟化</h1><p>基于内核的虚拟机（简称KVM）是一种开源的标准虚拟化解决方案，已紧密集成到Linux中。它是一个可加载的内核模块，将Linux转换为Type-1（裸机）虚拟机管理程序，该虚拟机管理程序创建了用于运行虚拟机（VM）的虚拟操作平台。</p><h3 id="精选回答"><a href="#精选回答" class="headerlink" title="精选回答"></a>精选回答</h3><p>在KVM下，每个VM是一个Linux进程，由内核调度和管理，并具有专用的虚拟化硬件（即CPU，网卡，磁盘等）。它还支持嵌套虚拟化，使您可以在另一个VM内运行一个VM。</p><p>它的一些主要功能包括支持广泛的Linux支持的硬件平台（带有虚拟化扩展的x86硬件（Intel VT或AMD-V）），它使用SELinux和安全虚拟化（sVirt）提供增强的VM安全性和隔离，它继承了内核内存管理功能，并且支持脱机和实时迁移（在物理主机之间迁移正在运行的VM）。</p><p>在本文中，您将学习如何在CentOS 8和RHEL 8 Linux中安装KVM虚拟化，创建和管理虚拟机。</p><p>准备工作：</p><p>全新安装的CentOS 8<a href="https://www.a5idc.net/" target="_blank" rel="noopener">服务器</a></p><p>全新安装的RHEL 8服务器</p><p>在RHEL 8服务器上启用了RedHat订阅</p><p>此外，通过运行以下命令，确保您的硬件平台支持虚拟化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># grep -e &apos;vmx&apos; /proc/cpuinfo #Intel systems</span><br><span class="line"># grep -e &apos;svm&apos; /proc/cpuinfo #AMD systems</span><br></pre></td></tr></table></figure><p>另外，请确认内核中已加载KVM模块（默认情况下应为KVM模块）。</p><p>＃lsmod | grep kvm</p><p>这是基于英特尔的测试系统上的示例输出：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tp.a5idc.net/wd/1a.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>在以前的KVM指南系列中，我们展示了如何使用KVM（基于内核的虚拟机）在Linux中创建虚拟机，并展示了如何使用virt-manager GUI工具（根据RHEL已弃用）创建和管理VM。8个文档）。对于本指南，我们将采用不同的方法，我们将使用Cockpit Web控制台。</p><p>步骤1：在CentOS 8上设置Cockpit Web控制台</p><p>1.在Cockpit是一个易于使用的集成和可扩展的基于Web的界面在网页浏览器来管理Linux服务器。它使您能够执行系统任务，例如配置网络，管理存储，创建VM和使用鼠标检查日志。它使用系统的普通用户登录名和特权，但也支持其他身份验证方法。</p><p>它是预先安装的，并已在新安装的CentOS 8和RHEL 8系统上启用，如果尚未安装，请使用以下dnf命令进行安装。应安装cockpit-machines扩展程序以管理基于Libvirt的 VM 。</p><p># dnf install cockpit cockpit-machines</p><p>2.软件包安装完成后，启动座舱插座，使其在系统启动时自动启动，并检查其状态以确认其已启动并正在运行。</p><p># systemctl start cockpit.socket</p><p># systemctl enable cockpit.socket</p><p># systemctl status cockpit.socket</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr7689tj30p807nwej.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>3.接下来，使用firewall-cmd命令将cockpit服务添加到默认启用的系统防火墙中，然后重新加载防火墙配置以应用新更改。</p><p># firewall-cmd –add-service=cockpit –permanent</p><p># firewall-cmd –reload</p><p>4.要访问CockpitWeb控制台，请打开Web浏览器并使用以下URL进行导航。</p><p><a href="https://FQDN:9090/或者https://SERVER_IP:9090/" target="_blank" rel="noopener">https://FQDN:9090/或者https://SERVER_IP:9090/</a></p><p>该Cockpit采用的是自签名证书启用HTTPS，只需使用该连接，当你在浏览器的警告。在登录页面上，使用您的服务器用户帐户凭据。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrar1fvj30wq0n4glu.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrbov8uj30wq0nldgf.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>步骤2：安装KVM虚拟化CentOS 8</p><p>5.接下来，如下安装虚拟化模块和其他虚拟化软件包。所述的virt安装包提供用于从所述命令行界面进行安装的虚拟机的工具，和一个的virt查看器用于查看虚拟机。</p><p># dnf module install virt</p><p># dnf install virt-install virt-viewer</p><p>6.接下来，运行virt-host-validate命令以验证主机是否设置为运行libvirt系统管理程序驱动程序。</p><p># virt-host-validate</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr7hgijj30o506mt8o.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>7.接下来，启动libvirtd守护程序（libvirtd），并使它在每次引导时自动启动。然后检查其状态以确认它已启动并正在运行。</p><p># systemctl start libvirtd.service</p><p># systemctl enable libvirtd.service</p><p># systemctl status libvirtd.service</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrd3s9zj30vz0bj74i.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>步骤3：通过Cockpit设置网桥（虚拟网络交换机）</p><p>8.现在创建一个网桥（虚拟网络交换机），将虚拟机集成到与主机相同的网络中。默认情况下，一旦启动libvirtd守护程序，它将激活默认网络接口virbr0，该接口代表以NAT模式运行的虚拟网络交换机。</p><p>在本指南中，我们将以桥接模式创建名为br0的网络接口。这将使虚拟机可在主机网络上访问。</p><p>在座舱主界面中，单击“ 网络”，然后单击“ 添加网桥”，如以下屏幕截图所示。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrf0gggj30yd0n8dgd.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>9.从弹出窗口中，输入网桥名称，然后选择网桥从站或端口设备（例如，代表以太网接口的enp2s0），如以下屏幕截图所示。然后单击“ 应用”。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr9t6d6j30ls0dedfu.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>10.现在，当您查看“ 接口 ”列表时，新的网桥应显示在此处，几秒钟后，应禁用以太网接口（关闭）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgraacb2j30ya0bz3yo.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>步骤4：通过Cockpit Web控制台创建和管理虚拟机</p><p>11.在座舱主界面中，单击“ 虚拟机”选项，如以下屏幕快照中突出显示。在“ 虚拟机”页面上，单击创建虚拟机。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrejb9rj30wm0ckq30.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>12.将显示一个带有用于创建新VM的选项的窗口。输入连接，名称（例如ubuntu18.04），安装源类型（在测试系统上，我们已将ISO映像存储在存储池下，即/ var / lib / libvirt / images /），安装源，存储，大小，内存如下图所示。输入安装源后，应自动选择OS供应商和操作系统。</p><p>还要选中立即启动VM的选项，然后单击“ 创建”。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr9d2jdj30hp0gedg2.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>13.在上一步中单击“ 创建”后，应自动启动VM，并使用提供的ISO映像启动VM。继续安装客户机操作系统（在本例中为Ubuntu 18.04）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr7y5kjj30wj0hst90.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>如果你点击网络接口的的虚拟机，网络源应注明新建桥网络接口。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr8w9jwj30wm09o74g.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>并且在安装过程中，在配置网络接口的步骤中，您应该能够注意到VM以太网接口从主机网络的DHCP服务器接收IP地址。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrcmjofj30wm0c1q33.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>请注意，您需要安装OpenSSH软件包才能从主机网络上的任何计算机通过SSH访问来宾OS，如上一节所述。</p><p>14.客户机操作系统安装完成后，请重新引导VM，然后转到“ 磁盘”并分离/除去VM磁盘下的cdrom设备。然后单击“运行”以启动VM。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrb8getj30rs090wek.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrc5he7j30s206mdfr.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>15.现在，在Consoles（控制台）下，您可以使用在OS安装期间创建的用户帐户登录来宾OS。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgr8ep0jj30qu0il74f.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>步骤5：通过SSH访问虚拟机访客操作系统</p><p>16.要通过SSH从主机网络访问新安装的来宾OS，请运行以下命令（将10.42.0.197替换为来宾的IP地址）。</p><p>$ ssh <a href="mailto:tecmint@10.42.0.197" target="_blank" rel="noopener">tecmint@10.42.0.197</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgrdqnrej30qj0ent91.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>17.要关闭，重新启动或删除VM，请从VM列表中单击它，然后使用以下屏幕快照中突出显示的按钮。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girgre19rij30sy0b2dfw.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>在本文中，介绍了如何安装KVM虚拟化软件包以及如何通过cockpit Web控制台创建和管理VM。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;hr&gt;
&lt;h1 id=&quot;如何在CentOS-RHEL-8上安装KVM虚拟化&quot;&gt;&lt;a href=&quot;#如何在CentOS-RHEL-8上安装KVM虚拟化&quot; class=&quot;headerlink&quot; title=&quot;如何在CentOS/RHEL 8上安装KVM虚拟化&quot;&gt;&lt;/a&gt;如
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>centos安装vnc</title>
    <link href="http://wumuwumu.github.io/2020/09/15/%E8%BF%90%E7%BB%B4/centos%E5%AE%89%E8%A3%85vnc/"/>
    <id>http://wumuwumu.github.io/2020/09/15/运维/centos安装vnc/</id>
    <published>2020-09-15T01:32:57.000Z</published>
    <updated>2020-09-15T01:32:57.995Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>centos8扩容root分区</title>
    <link href="http://wumuwumu.github.io/2020/09/05/%E8%BF%90%E7%BB%B4/centos8%E6%89%A9%E5%AE%B9root%E5%88%86%E5%8C%BA/"/>
    <id>http://wumuwumu.github.io/2020/09/05/运维/centos8扩容root分区/</id>
    <published>2020-09-05T13:40:23.000Z</published>
    <updated>2020-09-15T08:32:28.724Z</updated>
    
    <content type="html"><![CDATA[<h1 id="扩展磁盘"><a href="#扩展磁盘" class="headerlink" title="扩展磁盘"></a>扩展磁盘</h1><p>最近使用虚拟机的方式弄了个centos8的虚拟机，体验最新centos系统，分配了127g的空间，由于实际需要，发现home空间有好几十g的空间，而我都是使用root用户，无需home空间，因此找到在centos8中把home空间调整到root的方法，这里跟网上找到的centos7是有差别的。</p><p>步骤：</p><ol><li>使用usb系统进入修复</li><li>使用df-h查看空间使用情况，备份home</li><li>卸载home文件系统</li><li>删除/home所在的lv</li><li>扩展/root所在的lv</li><li>扩展/root文件系统</li><li>重新创建home lv并挂载home</li><li>查看最终调整结果</li></ol><h2 id="使用df-lh查看空间使用情况，备份home"><a href="#使用df-lh查看空间使用情况，备份home" class="headerlink" title="使用df-lh查看空间使用情况，备份home"></a>使用df-lh查看空间使用情况，备份home</h2><p>首先登陆ssh，使用df -lh查看空间使用情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -lh</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gireyleo0zj30kf07cjsm.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>root已经不够了，而vps也就自己一个人用，根本不需要用到home，home设置1个g就够了，其余的都给root，这样就可以给root多出来73个g的空间。 这因为一开始没有截图，所以看到的是后面的1g大小，一开始home是74g大小的。 备份home文件到/tmp目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar cvf  /tmp/home.tar /home</span><br><span class="line"><span class="comment"># zip -r /tmp/home.zip /home</span></span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gireyr28toj30go0c5dh3.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="卸载home文件系统"><a href="#卸载home文件系统" class="headerlink" title="卸载home文件系统"></a>卸载home文件系统</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fuser -km /home/</span><br><span class="line">umount /home</span><br></pre></td></tr></table></figure><p>解除home目录的占用，卸载home目录</p><h2 id="删除-home所在的lv"><a href="#删除-home所在的lv" class="headerlink" title="删除/home所在的lv"></a>删除/home所在的lv</h2><p>这一步centos8有很大不同，因为centos7中目录是/dev/mapper/centos-home,而在centos8中为 /dev/mapper/cl-home，因此注意卸载设备名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lvremove /dev/mapper/cl-home</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girez61asuj30nf01xmxc.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="扩展-root所在的lv"><a href="#扩展-root所在的lv" class="headerlink" title="扩展/root所在的lv"></a>扩展/root所在的lv</h2><p>扩展root空间lv</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lvextend -L +73G /dev/mapper/cl-root</span><br></pre></td></tr></table></figure><h2 id="扩展-root文件系统"><a href="#扩展-root文件系统" class="headerlink" title="扩展/root文件系统"></a>扩展/root文件系统</h2><p>这一步是真正增加root空间，centos7和centos8具有非常大的差别，centos7中是使用xfs_growfs /dev/mapper/centos-root，按逻辑centos8就应该是 xfs_growfs /dev/mapper/cl-root，但是结果就是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xfs_growfs /dev/mapper/cl-root</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girezkj110j30li01gdfw.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>经过摸索发现应该直接使用/就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xfs_growfs /</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girf0736ygj30pp0810ub.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="重新创建home-lv并挂载home"><a href="#重新创建home-lv并挂载home" class="headerlink" title="重新创建home lv并挂载home"></a>重新创建home lv并挂载home</h2><p>创建1g空间的home</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lvcreate -L 1G -n home cl</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girf0kmo2hj30qq02rq39.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>文件系统类型设置<br><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.xfs /dev/cl/home</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girf0uu0ecj30pa07dq4c.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>挂载到home目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/cl/home /home</span><br></pre></td></tr></table></figure><p>恢复home目录下文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mv /tmp/home.tar /home</span><br><span class="line"><span class="built_in">cd</span> /home</span><br><span class="line">tar xvf  home.tar</span><br><span class="line">mv home/* .</span><br><span class="line">rm -rf home*</span><br></pre></td></tr></table></figure><h2 id="查看最终调整结果"><a href="#查看最终调整结果" class="headerlink" title="查看最终调整结果"></a>查看最终调整结果</h2><p>查看各分区大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -lh</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1girf13w9foj30jt06qjsf.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>本文主要介绍了在centos8系统下调整各分区大小，这里就是/home分区和/root分区，介绍在centos7和centos8下参数差异。熟悉linux系统下的文件系统的分区调整。对于刚装系统分区不合适需要调整centos各分区大小的用户起到指导作用，有疑问再邮件联系吧。</p><h1 id="lvm修改根分区大小"><a href="#lvm修改根分区大小" class="headerlink" title="lvm修改根分区大小"></a>lvm修改根分区大小</h1><ul><li>参考：<ol><li>减小lvm根分区容量: <a href="http://kwokchivu.blog.51cto.com/1128937/724128" target="_blank" rel="noopener">http://kwokchivu.blog.51cto.com/1128937/724128</a></li><li>CentOS 5 LVM逻辑卷管理: <a href="http://sunshyfangtian.blog.51cto.com/1405751/860018" target="_blank" rel="noopener">http://sunshyfangtian.blog.51cto.com/1405751/860018</a></li></ol></li></ul><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>home、根各为50GB空间，根空间不足，需缩小home至10GB、扩大根为90GB。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lvm&gt; lvscan</span><br><span class="line">  ACTIVE            &apos;/dev/vg_db/lv_root&apos; [50.00 GiB] inherit</span><br><span class="line">  ACTIVE            &apos;/dev/vg_db/lv_home&apos; [50.00 GiB] inherit</span><br><span class="line">  ACTIVE            &apos;/dev/vg_db/lv_swap&apos; [9.83 GiB] inherit</span><br></pre></td></tr></table></figure><h2 id="缩小home、增大根分区"><a href="#缩小home、增大根分区" class="headerlink" title="缩小home、增大根分区"></a>缩小home、增大根分区</h2><h3 id="进入rescue模式"><a href="#进入rescue模式" class="headerlink" title="进入rescue模式"></a>进入rescue模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">增大root分区是否可以在线完成、不用进rescue状态？找机会试试...</span><br></pre></td></tr></table></figure><p>从Linux安装光盘启动进入rescue模式；</p><p>选择相关的语言，键盘模式，当系统提示启用网络设备时，选择“NO”；</p><p>然后在提示允许rescue模式挂载本地Linux系统到/mnt/sysimage下时选择“Skip”，文件系统必须不被挂载才可以对/分区减小容量操作。</p><p>最后系统会提示选择进入shell终端还是reboot机器，选择进入shell终端。</p><h3 id="激活分区"><a href="#激活分区" class="headerlink" title="激活分区"></a>激活分区</h3><p>输入lvm命令，进入lvm界面，依次输入pvscan、vgscan、lvscan三个命令扫描pv、vg、lv相关信息。</p><p>然后输入lvchange -ay /dev/vg_db/lv_root（上文提到的/分区名称）此命令是激活/分区所在的逻辑卷，输入 quit返回到bash shell界面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lvchange -ay /dev/vg_db/lv_home</span><br><span class="line">lvchange -ay /dev/vg_db/lv_root</span><br></pre></td></tr></table></figure><h3 id="缩小home分区"><a href="#缩小home分区" class="headerlink" title="缩小home分区"></a>缩小home分区</h3><ul><li><p>先检查下分区: e2fsck -f /dev/vg_db/lv_home</p></li><li><p>缩小文件系统大小：resize2fs /dev/vg_db/lv_home 10G</p></li><li><p>缩小逻辑卷</p><ul><li>输入lvm命令进入lvm模式</li><li>缩小逻辑卷：lvreduce -L 10G /dev/vg_db/lv_home</li><li>系统会询问是否缩小逻辑卷，输入 y 确定。</li></ul></li><li><p>查看修改结果: vgdisplay，lvdisplay</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">减小LVM中的文件系统必须离线操作(处于umount装态)，要减小文件系统和LV:</span><br><span class="line">    # Unmount相应的文件系统</span><br><span class="line">    # 运行磁盘检查确保卷的完整</span><br><span class="line">    # 减小文件系统</span><br><span class="line">    # 减小LV</span><br></pre></td></tr></table></figure></li></ul><h3 id="扩大根分区"><a href="#扩大根分区" class="headerlink" title="扩大根分区"></a>扩大根分区</h3><ul><li>先检查下分区: e2fsck -f /dev/vg_db/lv_root</li><li>扩大逻辑卷:<ul><li>输入lvm命令进入lvm模式</li><li>扩大逻辑卷：lvresize -L +40G /dev/vg_db/lv_root</li></ul></li><li>更改文件系统大小<ul><li>resize2fs -p /dev/vg_db/lv_root</li></ul></li><li>查看修改结果: lvscan</li></ul><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><h3 id="修改swap卷大小"><a href="#修改swap卷大小" class="headerlink" title="修改swap卷大小"></a>修改swap卷大小</h3><ul><li>取消激活swap空间: swapoff</li><li>修改swap分区大小: lvresize -L 4G /dev/vg_db/lv_swap</li><li>重新格区化: mkswap -f /dev/vb_db/lv_swap</li><li>激活swap空间: swapon</li></ul><h3 id="新建逻辑卷lv-develop"><a href="#新建逻辑卷lv-develop" class="headerlink" title="新建逻辑卷lv_develop"></a>新建逻辑卷lv_develop</h3><ul><li>创建逻辑卷 : lvcreate -L 2.8G -n lv_develop /dev/vb_db</li><li>创建文件系统 : mkfs.ext3 /dev/vg_db/lv_develop</li></ul><h3 id="增加物理盘"><a href="#增加物理盘" class="headerlink" title="增加物理盘"></a>增加物理盘</h3><ul><li>fdisk分区，并将分区类型为0×8e(Linux LVM)</li><li>创建物理卷PV: pvcreate /dev/hdb1</li><li>创建卷组VG: vgcreate vgtest /dev/hdb1</li><li>添加PV到VG: vgextend</li><li>创建逻辑卷LV: lvcreate -L 6000M -n mysql vgtest</li><li>创建文件系统: mkfs -t ext3 /dev/vgtest/mysql</li><li>建立新分区卷标: tune2fs –L /mysql /dev/vgtest/mysql</li><li>加载新分区: mount –t ext3 /dev/vgtest/mysql /mysql</li><li>卸载卷的顺序:<ol><li>umount</li><li>卸载逻辑卷:lvremove LVDEVICE</li><li>卸载卷组:vgremove VGNAME</li><li>卸载物理卷:pvremove PVDEVICE</li></ol></li></ul><h1 id="LVM分区在线扩容"><a href="#LVM分区在线扩容" class="headerlink" title="LVM分区在线扩容"></a>LVM分区在线扩容</h1><p>2011-12-19 15:24:16</p><p><a href="http://share.blog.51cto.com/278008/745479" target="_blank" rel="noopener">http://share.blog.51cto.com/278008/745479</a></p><p>今天对三台服务器的LV分区进行了一次扩容。本文有点标题党嫌疑，因为只有一台服务器是在线扩容，其它两台都是先卸载再扩容的。</p><p>在线扩容的这台服务器，LV分区格式为xfs，原大小1.2TB。增加了一块硬盘，大小为1.8TB。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`fdisk` `/dev/cciss/c0d1`                              `# 创建分区，并指定分区类型为LVM (8e) ``pvcreate ``/dev/cciss/c0d1p1`                         `# 创建pv``vgextend VolGroup00 ``/dev/cciss/c0d1p1`              `# 添加新创建的pv到原有vg``lvextend -L +1.8T ``/dev/mapper/VolGroup00-LogVol05`  `# 在线扩容指定lv分区``xfs_growfs ``/dev/mapper/VolGroup00-LogVol05`         `# 使扩容生效。注意xfs文件系统的生效命令！ `</span><br></pre></td></tr></table></figure><p>其它两台服务器也是新增了一个1.8TB的硬盘，要扩容的LV分区格式为ext3。之所以没有进行在线扩容，是因为没有找到ext2online命令；后来发现，resize2fs也是支持在线扩容的！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`lvextend -l +100%FREE ``/dev/mapper/VolGroup00-LogVol05``umount` `-l ``/dev/mapper/VolGroup00-LogVol05``e2fsck -f ``/dev/mapper/VolGroup00-LogVol05`    `# 过程比较长 ``resize2fs ``/dev/mapper/VolGroup00-LogVol05`    `# 也要几分钟时间 ``mount` `/dev/mapper/VolGroup00-LogVol05` `/hdfs`</span><br></pre></td></tr></table></figure><p>虽然resize2fs可以在线使用，但是对在线lv分区执行e2fsck有点风险！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;扩展磁盘&quot;&gt;&lt;a href=&quot;#扩展磁盘&quot; class=&quot;headerlink&quot; title=&quot;扩展磁盘&quot;&gt;&lt;/a&gt;扩展磁盘&lt;/h1&gt;&lt;p&gt;最近使用虚拟机的方式弄了个centos8的虚拟机，体验最新centos系统，分配了127g的空间，由于实际需要，发现home
      
    
    </summary>
    
    
      <category term="linux" scheme="http://wumuwumu.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>centos使用cockpit</title>
    <link href="http://wumuwumu.github.io/2020/09/05/%E8%BF%90%E7%BB%B4/centos%E4%BD%BF%E7%94%A8cockpit/"/>
    <id>http://wumuwumu.github.io/2020/09/05/运维/centos使用cockpit/</id>
    <published>2020-09-05T13:40:23.000Z</published>
    <updated>2020-09-17T01:34:55.941Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> --now cockpit.socket</span><br><span class="line"></span><br><span class="line">[leiakun@centos8 ~]$ sudo systemctl <span class="built_in">enable</span> --now cockpit.socket</span><br><span class="line">[sudo] leiakun 的密码：</span><br><span class="line">Created symlink /etc/systemd/system/sockets.target.wants/cockpit.socket → /usr/lib/systemd/system/cockpit.socket.</span><br><span class="line">[leiakun@centos8 ~]$ </span><br><span class="line"></span><br><span class="line">[leiakun@centos8 ~]$ sudo firewall-cmd --get-services |grep cockpit</span><br><span class="line">RH-Satellite-6 amanda-client amanda-k5-client amqp amqps apcupsd audit</span><br><span class="line">bacula bacula-client bb bgp bitcoin bitcoin-rpc bitcoin-testnet bitcoin-testnet-rpc</span><br><span class="line">bittorrent-lsd ceph ceph-mon cfengine cockpit condor-collector ctdb dhcp dhcpv6 </span><br><span class="line">dhcpv6-client distcc dns dns-over-tls docker-registry docker-swarm dropbox-lansync </span><br><span class="line">elasticsearch etcd-client etcd-server finger freeipa-4 freeipa-ldap freeipa-ldaps </span><br><span class="line">freeipa-replication freeipa-trust ftp ganglia-client ganglia-master git grafana </span><br><span class="line">gre high-availability http https imap imaps ipp ipp-client ipsec irc ircs </span><br><span class="line">iscsi-target isns jenkins kadmin kdeconnect kerberos kibana klogin kpasswd </span><br><span class="line">kprop kshell ldap ldaps libvirt libvirt-tls lightning-network llmnr managesieve</span><br><span class="line">matrix mdns memcache minidlna mongodb mosh mountd mqtt mqtt-tls ms-wbt mssql</span><br><span class="line">murmur mysql nfs nfs3 nmea-0183 nrpe ntp nut openvpn ovirt-imageio ovirt-storageconsole </span><br><span class="line">ovirt-vmconsole plex pmcd pmproxy pmwebapi pmwebapis pop3 pop3s postgresql privoxy</span><br><span class="line">prometheus proxy-dhcp ptp pulseaudio puppetmaster quassel radius rdp redis </span><br><span class="line">redis-sentinel rpc-bind rsh rsyncd rtsp salt-master samba samba-client samba-dc</span><br><span class="line">sane sip sips slp smtp smtp-submission smtps snmp snmptrap spideroak-lansync </span><br><span class="line">spotify-sync squid ssdp ssh steam-streaming svdrp svn syncthing syncthing-gui </span><br><span class="line">synergy syslog syslog-tls telnet tentacle tftp tftp-client tile38 tinc tor-socks </span><br><span class="line">transmission-client upnp-client vdsm vnc-server wbem-http wbem-https wsman wsmans</span><br><span class="line">xdmcp xmpp-bosh xmpp-client xmpp-local xmpp-server zabbix-agent zabbix-server</span><br><span class="line"></span><br><span class="line">sudo firewall-cmd --add-service=cockpit --permanent</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><h1 id="多主机管理"><a href="#多主机管理" class="headerlink" title="多主机管理"></a>多主机管理</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y cockpit-dashboard</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="linux" scheme="http://wumuwumu.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>centos创建用户</title>
    <link href="http://wumuwumu.github.io/2020/09/05/%E8%BF%90%E7%BB%B4/centos%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7/"/>
    <id>http://wumuwumu.github.io/2020/09/05/运维/centos创建用户/</id>
    <published>2020-09-05T13:40:23.000Z</published>
    <updated>2020-09-15T10:13:58.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">useradd wumu</span><br><span class="line"></span><br><span class="line"><span class="comment">## 给用户添加组，一定要加a</span></span><br><span class="line">(FC4: usermod -G groupA,groupB,groupC user)</span><br><span class="line">-a 代表 append， 也就是 将自己添加到 用户组groupA 中，而不必离开 其他用户组。</span><br><span class="line"><span class="comment">#命令的所有的选项，及其含义：</span></span><br><span class="line">Options:</span><br><span class="line">-c, --comment COMMENT         new value of the GECOS field</span><br><span class="line">-d, --home HOME_DIR           new home directory <span class="keyword">for</span> the user account</span><br><span class="line">-e, --expiredate EXPIRE_DATE <span class="built_in">set</span> account expiration date to EXPIRE_DATE</span><br><span class="line">-f, --inactive INACTIVE       <span class="built_in">set</span> password inactive after expiration</span><br><span class="line">to INACTIVE</span><br><span class="line">-g, --gid GROUP               force use GROUP as new primary group</span><br><span class="line">-G, --groups GROUPS           new list of supplementary GROUPS</span><br><span class="line">-a, --append          append the user to the supplemental GROUPS</span><br><span class="line">mentioned by the -G option without removing</span><br><span class="line">him/her from other groups</span><br><span class="line">-h, --<span class="built_in">help</span>                    display this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line">-l, --login NEW_LOGIN         new value of the login name</span><br><span class="line">-L, --lock                    lock the user account</span><br><span class="line">-m, --move-home               move contents of the home directory to the new</span><br><span class="line">location (use only with -d)</span><br><span class="line">-o, --non-unique              allow using duplicate (non-unique) UID</span><br><span class="line">-p, --password PASSWORD       use encrypted password <span class="keyword">for</span> the new password</span><br><span class="line">-s, --shell SHELL             new login shell <span class="keyword">for</span> the user account</span><br><span class="line">-u, --uid UID                 new UID <span class="keyword">for</span> the user account</span><br><span class="line">-U, --unlock                  unlock the user account</span><br><span class="line"></span><br><span class="line">usermod -a -G wumugroup wumu</span><br><span class="line">passwd wumu</span><br></pre></td></tr></table></figure><h1 id="添加sudo权限"><a href="#添加sudo权限" class="headerlink" title="添加sudo权限"></a>添加sudo权限</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">visudo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#找到如下行数</span></span><br><span class="line">root  ALL=(ALL)   ALL</span><br><span class="line"><span class="comment">#添加</span></span><br><span class="line">username ALL=(ALL) ALL</span><br></pre></td></tr></table></figure><h1 id="免密码登录"><a href="#免密码登录" class="headerlink" title="免密码登录"></a>免密码登录</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line">ssh-copy-id -i .ssh/id_rsa.pub  用户名字@192.168.x.xxx</span><br><span class="line">ssh 用户名字@192.168.x.xxx</span><br></pre></td></tr></table></figure><h1 id="使用pem登录"><a href="#使用pem登录" class="headerlink" title="使用pem登录"></a>使用pem登录</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在本地生成公钥私钥</span></span><br><span class="line">ssh-keygen</span><br><span class="line"><span class="comment">#输入命令后，一路回车，即可。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将本地的公钥传到服务器上</span></span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub remote-host</span><br><span class="line"><span class="comment">#会提示你输入密码，成功之后，会帮助你把公钥放在服务器上，供登录使用。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#把本地的私钥转为 pem 格式，供windows上的 ssh 客户端使用</span></span><br><span class="line">openssl rsa -<span class="keyword">in</span> ~/.ssh/id_rsa -outform pem &gt; id_rsa.pem</span><br><span class="line">chmod 700 id_rsa.pem</span><br><span class="line"><span class="comment">#这样就导出了pem格式的私钥，因为公钥已经在服务器了，所以只要服务器上的公钥不删除，用这把私钥就能登录服务器,一般来说，经过这样设置之后，可以把ssh 密码登录的方式禁用掉，使得服务器更加安全。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭 ssh 密码登录</span></span><br><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line"><span class="comment">#修改</span></span><br><span class="line"></span><br><span class="line">PasswordAuthentication no</span><br><span class="line"><span class="comment">#重启 ssh 服务</span></span><br><span class="line">service sshd restart</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;创建用户&quot;&gt;&lt;a href=&quot;#创建用户&quot; class=&quot;headerlink&quot; title=&quot;创建用户&quot;&gt;&lt;/a&gt;创建用户&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
      
    
    </summary>
    
    
      <category term="linux" scheme="http://wumuwumu.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>sudoer文件解析</title>
    <link href="http://wumuwumu.github.io/2020/09/05/%E8%BF%90%E7%BB%B4/sudoer%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/"/>
    <id>http://wumuwumu.github.io/2020/09/05/运维/sudoer文件解析/</id>
    <published>2020-09-05T13:40:23.000Z</published>
    <updated>2020-09-15T02:51:26.395Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>sudo的权限控制可以在<code>/etc/sudoers</code>文件中查看到。</p><p>如果想要控制某个用户(或某个组用户)只能执行root权限中的一部分命令, 或者允许某些用户使用sudo时不需要输入密码,就需要对该文件有所了解。</p><p>一般来说，通过<code>cat /etc/sudoers</code>指令来查看该文件, 会看到如下几行代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root   ALL=(ALL:ALL) ALL</span><br><span class="line">%wheel ALL=(ALL) ALL</span><br><span class="line">%sudo  ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure><p>对<code>/etc/sudoers</code>文件进行编辑的代码公式可以概括为:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">授权用户/组 主机=[(切换到哪些用户或组)] [是否需要输入密码验证] 命令1,命令2,...</span><br></pre></td></tr></table></figure><p>凡是<code>[ ]</code>中的内容, 都能省略; 命令和命令之间用<code>,</code>号分隔;</p><p>为了方便说明, 将公式的各个部分称呼为字段1 - 字段5:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">授权用户/组 主机  =[(切换到哪些用户或组)] [是否需要输入密码验证] 命令1,命令2,...</span><br><span class="line">字段1      字段2  =[(字段3)] [字段4] 字段5</span><br></pre></td></tr></table></figure><p>字段3、字段4，是可以省略的。</p><p>在上面的默认例子中, “字段1”不以<code>%</code>号开头的表示”将要授权的用户”, 比如例子中的<code>root</code>；<br>以<code>%</code>号开头的表示”将要授权的组”, 比如例子中的<code>%wheel</code>组 和 <code>%sudo</code>组。</p><p>“字段2”表示允许登录的主机, ALL表示所有; 如果该字段不为ALL,表示授权用户只能在某些机器上登录本服务器来执行sudo命令. 比如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jack mycomputer=/usr/sbin/reboot,/usr/sbin/shutdown</span><br></pre></td></tr></table></figure><p>表示: 普通用户jack在主机(或主机组)mycomputer上, 可以通过sudo执行reboot和shutdown两个命令。”字段3”和”字段4”省略。</p><p>“字段3”如果省略, 相当于<code>(root:root)</code>，表示可以通过<code>sudo</code>提权到root; 如果为<code>(ALL)</code>或者<code>(ALL:ALL)</code>, 表示能够提权到<code>(任意用户:任意用户组)</code>。</p><p>请注意，”字段3”如果没省略,必须使用<code>( )</code>双括号包含起来。这样才能区分是省略了”字段3”还是省略了”字段4”。</p><p>“字段4”的可能取值是<code>NOPASSWD:</code>。请注意NOPASSWD后面带有冒号<code>:</code>。表示执行sudo时可以不需要输入密码。比如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lucy ALL=(ALL) NOPASSWD: /bin/useradd</span><br></pre></td></tr></table></figure><p>表示: 普通用户lucy可以在任何主机上, 通过sudo执行<code>/bin/useradd</code>命令, 并且不需要输入密码.</p><p>又比如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peter ALL=(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure><p>表示: 普通用户peter可以在任何主机上, 通过sudo执行任何命令, 并且不需要输入密码。</p><p>“字段5”是使用逗号分开一系列命令,这些命令就是授权给用户的操作; ALL表示允许所有操作。</p><p>你可能已经注意到了, 命令都是使用绝对路径, 这是为了避免目录下有同名命令被执行，从而造成安全隐患。</p><p>如果你将授权写成如下安全性欠妥的格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lucy ALL=(ALL) chown,chmod,useradd</span><br></pre></td></tr></table></figure><p>那么用户就有可能创建一个他自己的程序, 也命名为userad, 然后放在它的本地路径中, 如此一来他就能够使用root来执行这个”名为useradd的程序”。这是相当危险的!</p><p>命令的绝对路径可通过<code>which</code>指令查看到: 比如<code>which useradd</code>可以查看到命令<code>useradd</code>的绝对路径: <code>/usr/sbin/useradd</code></p><h3 id="公式还要扩充"><a href="#公式还要扩充" class="headerlink" title="公式还要扩充"></a>公式还要扩充</h3><p>例子1:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">papi ALL=(root) NOPASSWD: /bin/chown,/usr/sbin/useradd</span><br></pre></td></tr></table></figure><p>表示: 用户papi能在所有可能出现的主机上, 提权到root下执行/bin/chown, 不必输入密码; 但运行/usr/sbin/useradd 命令时需要密码.</p><p>这是因为<code>NOPASSWD:</code>只影响了其后的第一个命令: 命令1.</p><p>上面给出的公式只是简化版，完整的公式如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">授权用户/组 主机=[(切换到哪些用户或组)] [是否需要输入密码验证] 命令1, [(字段3)] [字段4] 命令2, ...</span><br></pre></td></tr></table></figure><p>在具有sudo操作的用户下, 执行<code>sudo -l</code>可以查看到该用户被允许和被禁止运行的命令.</p><h3 id="通配符和取消命令"><a href="#通配符和取消命令" class="headerlink" title="通配符和取消命令"></a>通配符和取消命令</h3><p>例子2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">papi ALL=/usr/sbin/*,/sbin/*,!/usr/sbin/fdisk</span><br></pre></td></tr></table></figure><p>用例子2来说明通配符<code>*</code>的用法, 以及命令前面加上<code>!</code>号表示取消该命令。</p><p>该例子的意思是: 用户papi在所有可能出现的主机上, 能够运行目录/usr/sbin和/sbin下所有的程序, 但fdisk除外.</p><h3 id="开始编辑"><a href="#开始编辑" class="headerlink" title="开始编辑"></a>开始编辑</h3><p>“你讲了这么多,但是在实践中,我去编辑/etc/sudoers文件，系统提示我没权限啊，怎么办?”</p><p>这是因为<code>/etc/sudoers</code>的内容如此敏感，以至于该文件是只读的。所以，编辑该文件前，请确认清楚你知道自己正在做什么。</p><p>强烈建议通过<code>visudo</code>命令来修改该文件，通过<code>visudo</code>修改，如果配置出错，会有提示。</p><p>不过，系统文档推荐的做法，不是直接修改<code>/etc/sudoers</code>文件，而是将修改写在<code>/etc/sudoers.d/</code>目录下的文件中。</p><p>如果使用这种方式修改sudoers，需要在<code>/etc/sudoers</code>文件的最后行，加上<code>#includedir /etc/sudoers.d</code>一行(默认已有):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#includedir /etc/sudoers.d</span><br></pre></td></tr></table></figure><p>注意了，这里的指令<code>#includedir</code>是一个整体, 前面的<code>#</code>号不能丢，并非注释，也不能在<code>#</code>号后有空格。</p><p>任何在<code>/etc/sudoers.d/</code>目录下，不以<code>~</code>号结尾的文件和不包含<code>.</code>号的文件，都会被解析成<code>/etc/sudoers</code>的内容。</p><p>文档中是这么说的:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This will cause sudo to read and parse any files in the /etc/sudoers.d</span></span><br><span class="line"><span class="comment"># directory that do not end in '~' or contain a '.' character.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note that there must be at least one file in the sudoers.d directory (this</span></span><br><span class="line"><span class="comment"># one will do), and all files in this directory should be mode 0440.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note also, that because sudoers contents can vary widely, no attempt is</span></span><br><span class="line"><span class="comment"># made to add this directive to existing sudoers files on upgrade.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Finally, please note that using the visudo command is the recommended way</span></span><br><span class="line"><span class="comment"># to update sudoers content, since it protects against many failure modes.</span></span><br></pre></td></tr></table></figure><h3 id="其他小知识"><a href="#其他小知识" class="headerlink" title="其他小知识"></a>其他小知识</h3><h4 id="输入密码时有反馈"><a href="#输入密码时有反馈" class="headerlink" title="输入密码时有反馈"></a>输入密码时有反馈</h4><p>当使用sudo后输入密码，并不会显示任何东西 —— 甚至连常规的星号都没有。有个办法可以解决该问题。</p><p>打开<code>/etc/sudoers</code>文件找到下述一行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Defaults env_reset</span><br></pre></td></tr></table></figure><p>修改成:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Defaults        env_reset,pwfeedback</span><br></pre></td></tr></table></figure><h4 id="修改sudo会话时间"><a href="#修改sudo会话时间" class="headerlink" title="修改sudo会话时间"></a>修改sudo会话时间</h4><p>如果你经常使用sudo 命令，你肯定注意到过当你成功输入一次密码后，可以不用再输入密码就可以运行几次sudo命令。<br>但是一段时间后，sudo 命令会再次要求你输入密码。默认是15分钟，该时间可以调整。添加<code>timestamp_timeout=分钟数</code>即可。<br>时间以分钟为单位，-1表示永不过期，但强烈不推荐。</p><p>比如我希望将时间延长到1小时，还是打开<code>/etc/sudoers</code>文件找到下述一行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Defaults env_reset</span><br></pre></td></tr></table></figure><p>修改成:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Defaults        env_reset,pwfeedback,timestamp_timeout=60</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;sudo的权限控制可以在&lt;code&gt;/etc/sudoers&lt;/code&gt;文件中查看到。&lt;/p&gt;
&lt;p&gt;如果想要控制某个用户(或某个组用户)只能执行root权限中的一部分命令, 或者允许某些用户使用sudo时不需要输入密码,就需要对该文件有所了解。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="linux" scheme="http://wumuwumu.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>centos配置网络</title>
    <link href="http://wumuwumu.github.io/2020/09/05/%E8%BF%90%E7%BB%B4/centos%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C/"/>
    <id>http://wumuwumu.github.io/2020/09/05/运维/centos配置网络/</id>
    <published>2020-09-05T13:40:23.000Z</published>
    <updated>2020-09-15T10:12:51.109Z</updated>
    
    <content type="html"><![CDATA[<p>centos8已经发布了，下载了一个体验一下，新安装好的centos8默认网卡是没有启动的，安装好后需要先配置网络。在<code>/etc/sysconfig/network-scripts</code>目录下存放着网卡的配置文件，文件名称是<code>ifcfg- 网卡名称</code>。</p><h4 id="一-修改配置文件"><a href="#一-修改配置文件" class="headerlink" title="一 修改配置文件"></a>一 修改配置文件</h4><p>设置网络时首先打开配置文件，配置文件默认如下所示，如果使用dhcp自动获取ip，只需将<code>ONBOOT=no</code>修改为<code>ONBOOT=no</code>即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 网卡配置文件按默认配置</span><br><span class="line"></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=dhcp</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=e4987998-a4ce-4cef-96f5-a3106a97f5bf</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=no  #如果使用dhcp分配ip的话，只需要将这里no改为yes，然后重启网络服务就行</span><br></pre></td></tr></table></figure><p>如果需要配置静态ip，则按照以下修改方法修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static   #将dhcp修改为stati表示使用静态ip</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPADDR=192.168.128.129   #设置IP地址</span><br><span class="line">NETMASK=255.255.255.0    #设置子网掩码</span><br><span class="line">GATEWAY=192.168.128.1    #设置网关</span><br><span class="line">DNS1=114.114.114.114     #设置dns</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=e4987998-a4ce-4cef-96f5-a3106a97f5bf</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes  #将no改为yes</span><br></pre></td></tr></table></figure><h4 id="二-重启网络服务"><a href="#二-重启网络服务" class="headerlink" title="二 重启网络服务"></a>二 重启网络服务</h4><p>使用<strong>nmcli c reload</strong>命令重启网络服务，网络这块算是centos8改动较大的一块了，nmcli命令的参数如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[hk@localhost network-scripts]$ nmcli  -h</span><br><span class="line">Usage: nmcli [OPTIONS] OBJECT &#123; COMMAND | help &#125;</span><br><span class="line"></span><br><span class="line">OPTIONS</span><br><span class="line">  -o[verview]                                    overview mode (hide default values)</span><br><span class="line">  -t[erse]                                       terse output</span><br><span class="line">  -p[retty]                                      pretty output</span><br><span class="line">  -m[ode] tabular|multiline                      output mode</span><br><span class="line">  -c[olors] auto|yes|no                          whether to use colors in output</span><br><span class="line">  -f[ields] &lt;field1,field2,...&gt;|all|common       specify fields to output</span><br><span class="line">  -g[et-values] &lt;field1,field2,...&gt;|all|common   shortcut for -m tabular -t -f</span><br><span class="line">  -e[scape] yes|no                               escape columns separators in values</span><br><span class="line">  -a[sk]                                         ask for missing parameters</span><br><span class="line">  -s[how-secrets]                                allow displaying passwords</span><br><span class="line">  -w[ait] &lt;seconds&gt;                              set timeout waiting for finishing operations</span><br><span class="line">  -v[ersion]                                     show program version</span><br><span class="line">  -h[elp]                                        print this help</span><br><span class="line">OBJECT</span><br><span class="line">  g[eneral]       NetworkManager&apos;s general status and operations</span><br><span class="line">  n[etworking]    overall networking control</span><br><span class="line">  r[adio]         NetworkManager radio switches</span><br><span class="line">  c[onnection]    NetworkManager&apos;s connections  # 网络管理一般使用 nmcli c</span><br><span class="line">  d[evice]        devices managed by NetworkManager</span><br><span class="line">  a[gent]         NetworkManager secret agent or polkit agent</span><br><span class="line">  m[onitor]       monitor NetworkManager changes</span><br><span class="line"></span><br><span class="line">[hk@localhost network-scripts]$</span><br></pre></td></tr></table></figure><p>网络管理一般使用 <code>nmclli c</code>，用法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[hk@localhost network-scripts]$ nmcli c -h</span><br><span class="line"></span><br><span class="line">Usage: nmcli connection &#123; COMMAND | help &#125;</span><br><span class="line">COMMAND := &#123; show | up | down | add | modify | clone | edit | delete | monitor | reload | load | import | export &#125;</span><br><span class="line"></span><br><span class="line">  show [--active] [--order &lt;order spec&gt;]</span><br><span class="line"></span><br><span class="line">  show [--active] [id | uuid | path | apath] &lt;ID&gt; ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  up [[id | uuid | path] &lt;ID&gt;] [ifname &lt;ifname&gt;] [ap &lt;BSSID&gt;] [passwd-file &lt;file with passwords&gt;]</span><br><span class="line"></span><br><span class="line">  down [id | uuid | path | apath] &lt;ID&gt; ...</span><br><span class="line"></span><br><span class="line">  add COMMON_OPTIONS TYPE_SPECIFIC_OPTIONS SLAVE_OPTIONS IP_OPTIONS [-- ([+|-]&lt;setting&gt;.&lt;property&gt; &lt;value&gt;)+]</span><br><span class="line"></span><br><span class="line">  modify [--temporary] [id | uuid | path] &lt;ID&gt; ([+|-]&lt;setting&gt;.&lt;property&gt; &lt;value&gt;)+</span><br><span class="line"></span><br><span class="line">  clone [--temporary] [id | uuid | path ] &lt;ID&gt; &lt;new name&gt;</span><br><span class="line"></span><br><span class="line">  edit [id | uuid | path] &lt;ID&gt;</span><br><span class="line">  edit [type &lt;new_con_type&gt;] [con-name &lt;new_con_name&gt;]</span><br><span class="line">  delete [id | uuid | path] &lt;ID&gt;</span><br><span class="line">  monitor [id | uuid | path] &lt;ID&gt; ...</span><br><span class="line">  reload</span><br><span class="line">  load &lt;filename&gt; [ &lt;filename&gt;... ]</span><br><span class="line">  import [--temporary] type &lt;type&gt; file &lt;file to import&gt;</span><br><span class="line">  export [id | uuid | path] &lt;ID&gt; [&lt;output file&gt;]</span><br><span class="line"></span><br><span class="line">[hk@localhost network-scripts]$</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;centos8已经发布了，下载了一个体验一下，新安装好的centos8默认网卡是没有启动的，安装好后需要先配置网络。在&lt;code&gt;/etc/sysconfig/network-scripts&lt;/code&gt;目录下存放着网卡的配置文件，文件名称是&lt;code&gt;ifcfg- 网卡名
      
    
    </summary>
    
    
      <category term="linux" scheme="http://wumuwumu.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>网络配置三种模式对比（桥接模式，主机模式，网络地址转换）</title>
    <link href="http://wumuwumu.github.io/2020/08/27/docker/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E4%B8%89%E7%A7%8D%E6%A8%A1%E5%BC%8F%E5%AF%B9%E6%AF%94%EF%BC%88%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F%EF%BC%8C%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F%EF%BC%8C%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2%EF%BC%89/"/>
    <id>http://wumuwumu.github.io/2020/08/27/docker/网络配置三种模式对比（桥接模式，主机模式，网络地址转换）/</id>
    <published>2020-08-27T10:29:58.000Z</published>
    <updated>2020-08-27T10:40:26.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VMware三种网络模式简介"><a href="#VMware三种网络模式简介" class="headerlink" title="VMware三种网络模式简介"></a>VMware三种网络模式简介</h1><p>​    VMWare提供了三种工作模式，它们是bridged(桥接模式)、NAT(网络地址转换模式)和host-only(主机模式)。安装好虚拟机以后，在网络连接里面可以看到多了两块网卡。如下图。</p><h1 id="1-bridged-桥接模式"><a href="#1-bridged-桥接模式" class="headerlink" title="1 bridged(桥接模式)"></a>1 bridged(桥接模式)</h1><h2 id="1-1-模式简介"><a href="#1-1-模式简介" class="headerlink" title="1.1 模式简介"></a>1.1 模式简介</h2><p>　　在这种模式下，VMWare虚拟出来的操作系统就像是局域网中的一台独立的主机，它可以访问网内任何一台机器。  　　在桥接模式下，你需要手工为虚拟系统配置IP地址、子网掩码，而且还要和<a href="https://cloud.tencent.com/product/cdh?from=10680" target="_blank" rel="noopener">宿主机</a>器处于同一网段，这样虚拟系统才能和宿主机器进行通信。同时，由 于这个虚拟系统是局域网中的一个独立的主机系统，那么就可以手工配置它的TCP/IP配置信息，以实现通过局域网的网关或路由器访问互联网。  　　使用桥接模式的虚拟系统和宿主机器的关系，就像连接在同一个Hub上的两台电脑。想让它们相互通讯，你就需要为虚拟系统配置IP地址和子网掩码，否则就无法通信。    </p><h2 id="1-2-工作的虚拟网卡"><a href="#1-2-工作的虚拟网卡" class="headerlink" title="1.2 工作的虚拟网卡"></a>1.2 工作的虚拟网卡</h2><p>​    bridged模式下的VMnet0虚拟网络    </p><h2 id="1-3-架构图"><a href="#1-3-架构图" class="headerlink" title="1.3 架构图"></a>1.3 架构图</h2><p>1）使用VMnet0虚拟交换机，此时虚拟机相当与网络上的一台独立计算机与主机一样，拥有一个独立的IP地址。使用<strong>桥接方式</strong>，A，A1，A2，B可互访。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5jxbkbk6j30ir0a00ta.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>2）虚拟机就像一台真正的计算机一样，直接连接到实际的网络上，可以理解为与宿主机没有任何联系。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5jzb54q3j30ig08caam.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="1-4-使用范围"><a href="#1-4-使用范围" class="headerlink" title="1.4 使用范围"></a>1.4 使用范围</h2><p>​    1）如果你想利用VMWare在局域网内新建一个虚拟服务器，为局域网用户提供网络服务，就应该选择桥接模式。      2）如果你有路由器的话，那么就可以使用桥接方式上网，因为此时你申请的IP地址是写在了路由器上，而不是你的机器上，这样包括你的主机，虚拟机，也包括 连在路由器上的其他人的机器，都将可以上网，使用着由路由器分配的IP地址。  </p><h1 id="2-host-only-主机模式"><a href="#2-host-only-主机模式" class="headerlink" title="2 host-only(主机模式)"></a>2 host-only(主机模式)</h1><h2 id="2-1-模式简介"><a href="#2-1-模式简介" class="headerlink" title="2.1 模式简介"></a>2.1 模式简介</h2><p>​    在某些特殊的网络调试环境中，要求将真实环境和虚拟环境隔离开，这时你就可采用host-only模式。在host-only模式中，所有的虚拟系统是可以相互通信的，但虚拟系统和真实的网络是被隔离开的。  　　提示：在host-only模式下，虚拟系统和宿主机器系统是可以相互通信的，相当于这两台机器通过双绞线互连。  　　在host-only模式下，虚拟系统的TCP/IP配置信息(如IP地址、网关地址、DNS服务器等)，都是由VMnet1(host-only)虚拟网络的DHCP服务器来动态分配的。  　　如果你想利用VMWare创建一个与网内其他机器相隔离的虚拟系统，进行某些特殊的网络调试工作，可以选择host-only模式。    <a href="http://blog.csdn.net/suneqing/article/details/51787336" target="_blank" rel="noopener">Linux虚拟机实现Host-only方式上网</a></p><h2 id="2-2-工作的虚拟网卡"><a href="#2-2-工作的虚拟网卡" class="headerlink" title="2.2 工作的虚拟网卡"></a>2.2 工作的虚拟网卡</h2><p>   host-only模式下的 VMnet1虚拟网络  </p><h2 id="2-3-架构图"><a href="#2-3-架构图" class="headerlink" title="2.3 架构图"></a>2.3 架构图</h2><p>1）使用Vmnet1虚拟交换机，此时虚拟机只能与虚拟机、主机互访。也就是不能上Internet。使用Host方式，A，A1，A2可以互访，但A1，A2不能访问B，也不能被B访问。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5jzy56yqj30h709ajs1.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>2）这种方式下，虚拟机的网卡连接到宿主的 VMnet1 上，但系统并不为虚拟机提供任何路由服务，因此虚拟机只能和宿主机进行通信，而不能连接到实际网络上。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5k09nm0nj30hb086dgg.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="2-4-使用范围"><a href="#2-4-使用范围" class="headerlink" title="2.4 使用范围"></a>2.4 使用范围</h2><p>   如果你想利用VMWare创建一个与网内其他机器相隔离的虚拟系统，进行某些特殊的网络调试工作，可以选择host-only模式。  </p><h1 id="3-NAT-网络地址转换模式"><a href="#3-NAT-网络地址转换模式" class="headerlink" title="3 NAT(网络地址转换模式)"></a>3 NAT(网络地址转换模式)</h1><h2 id="3-1-模式简介"><a href="#3-1-模式简介" class="headerlink" title="3.1 模式简介"></a>3.1 模式简介</h2><p>​    使用NAT模式，就是让虚拟系统借助NAT(网络地址转换)功能，通过宿主机器所在的网络来访问公网。也就是说，使用NAT模式可以实现在虚拟 系统里访问互联网。NAT模式下的虚拟系统的TCP/IP配置信息是由VMnet8(NAT)虚拟网络的DHCP服务器提供的，无法进行手工修改，因此虚拟系统也就无法和本局域网中的其他真实主机进行通讯。采用NAT模式最大的优势是虚拟系统接入互联网非常简单，你不需要进行任何其他的配置，只需要宿主机 器能访问互联网即可。    </p><h2 id="3-2-工作的虚拟网卡"><a href="#3-2-工作的虚拟网卡" class="headerlink" title="3.2 工作的虚拟网卡"></a>3.2 工作的虚拟网卡</h2><p>   NAT模式下的VMnet8虚拟网络    </p><h2 id="3-3-架构图"><a href="#3-3-架构图" class="headerlink" title="3.3 架构图"></a>3.3 架构图</h2><p>1） 使用Vmnet8虚拟交换机，此时虚拟机可以通过主机单向网络上的其他工作站，其他工作站不能访问虚拟机。用NAT方式，A1，A2可以访问B，但B不可以访问A1，A2。但A，A1，A2可以互访。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5k0pewx6j30i909gaav.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>2） 这种方式下，虚拟机的网卡连接到宿主的 VMnet8 上。此时系统的 VMWare NAT Service 服务就充当了路由器的作用，负责将虚拟机发到 VMnet8 的包进行地址转换之后发到实际的网络上，再将实际网络上返回的包进行地址转换后通过 VMnet8 发送给虚拟机。VMWare DHCP Service 负责为虚拟机提供 DHCP 服务。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5k0w2pqrj30hm0863z4.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="3-4-使用范围"><a href="#3-4-使用范围" class="headerlink" title="3.4 使用范围"></a>3.4 使用范围</h2><p>​    如果你想利用VMWare安装一个新的虚拟系统，在虚拟系统中不用进行任何手工配置就能直接访问互联网，建议你采用NAT模式。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/CleverCode/article/details/45934233" target="_blank" rel="noopener">https://blog.csdn.net/CleverCode/article/details/45934233</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;VMware三种网络模式简介&quot;&gt;&lt;a href=&quot;#VMware三种网络模式简介&quot; class=&quot;headerlink&quot; title=&quot;VMware三种网络模式简介&quot;&gt;&lt;/a&gt;VMware三种网络模式简介&lt;/h1&gt;&lt;p&gt;​    VMWare提供了三种工作模式，它
      
    
    </summary>
    
    
      <category term="linux" scheme="http://wumuwumu.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>docker-compose文件编写</title>
    <link href="http://wumuwumu.github.io/2020/08/27/docker/docker-compose%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99/"/>
    <id>http://wumuwumu.github.io/2020/08/27/docker/docker-compose文件编写/</id>
    <published>2020-08-27T10:10:37.000Z</published>
    <updated>2020-08-27T10:10:37.427Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot+Quartz框架的实现</title>
    <link href="http://wumuwumu.github.io/2020/08/14/SpringBoot-Quartz%E6%A1%86%E6%9E%B6%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://wumuwumu.github.io/2020/08/14/SpringBoot-Quartz框架的实现/</id>
    <published>2020-08-14T10:39:29.000Z</published>
    <updated>2020-08-14T10:48:22.911Z</updated>
    
    <content type="html"><![CDATA[<p>定时任务 想必做程序的都或多或少的接触过,以便于我们以某个特定的 时间/频率 去执行所需要的程序,Quartz 是一个优秀的框架,可以根据我们的配置将 定时任务的执行 时间/频率 持久化至数据库, 我们通过修改数据库中的任务下次执行时间,达到不需要等到任务配置执行的原始 时间/频率,随时地运行定时任务; 并且可以看到任务的运行状态 WATING BLOCKING等</p><p>   1.导入依赖</p><p>   quartz自定义配置的数据源会使用C3P0创建连接,所以要引入C3P0依赖</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!-- Quartz定时任务 --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-quartz&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">&lt;!--C3P0 --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;com.mchange&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;c3p0&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;0.9.5.5&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2.quartz 配置文件,yml方式</p><p>创建定时任务表的sql太长,这里就不贴了,我会将sql上传至GitHub,文末我会贴地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">## quartz定时任务</span><br><span class="line">spring:</span><br><span class="line">  quartz:</span><br><span class="line">    #jdbc 采用数据库方式  memory 采用内存方式</span><br><span class="line">    job-store-type: jdbc  </span><br><span class="line">    initialize-schema: embedded</span><br><span class="line">    #设置自动启动，默认为 true</span><br><span class="line">    auto-startup: <span class="keyword">true</span></span><br><span class="line">    #启动时更新己存在的Job</span><br><span class="line">    overwrite-existing-jobs: <span class="keyword">true</span></span><br><span class="line">    properties:</span><br><span class="line">      org:</span><br><span class="line">        quartz:</span><br><span class="line">          scheduler:</span><br><span class="line">            instanceName: MyScheduler</span><br><span class="line">            instanceId: AUTO</span><br><span class="line">          jobStore:</span><br><span class="line">            #指定使用的JobStore</span><br><span class="line">            class: org.quartz.impl.jdbcjobstore.JobStoreTX</span><br><span class="line">            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span><br><span class="line">            #数据库前缀</span><br><span class="line">            tablePrefix: QRTZ_</span><br><span class="line">            #是否为集群</span><br><span class="line">            isClustered: <span class="keyword">false</span></span><br><span class="line">            #检测任务执行时间的间隔  毫秒</span><br><span class="line">            misfireThreshold: <span class="number">5000</span></span><br><span class="line">            clusterCheckinInterval: <span class="number">10000</span></span><br><span class="line">            #数据源名称</span><br><span class="line">            dataSource: myDS</span><br><span class="line">          #线程池配置</span><br><span class="line">          threadPool:</span><br><span class="line">            class: org.quartz.simpl.SimpleThreadPool</span><br><span class="line">            threadCount: <span class="number">20</span></span><br><span class="line">            threadPriority: <span class="number">5</span></span><br><span class="line">            threadsInheritContextClassLoaderOfInitializingThread: <span class="keyword">true</span></span><br><span class="line">          #数据源</span><br><span class="line">          dataSource:</span><br><span class="line">            myDS:</span><br><span class="line">              driver: com.mysql.cj.jdbc.Driver</span><br><span class="line">              URL: jdbc:mysql:<span class="comment">//localhost:3306/test?characterEncoding=UTF-8&amp;useUnicode=true&amp;useSSL=false&amp;tinyInt1isBit=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">              user: root</span><br><span class="line">              password: root</span><br><span class="line">              maxConnections: <span class="number">5</span></span><br></pre></td></tr></table></figure><p>有同学可能会问了,配置文件是配置好了,是在哪引用的呢? 别急, 且听我娓娓道来</p><p>spring-boot-starter-quartz (为方便诉说,下文中使用 bootquartz代替) 这个包下的QuartzProperties会帮我们自动加载配置文件,且看以下部分截图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200617111853517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RlbW9fTGl1,size_16,color_FFFFFF,t_70" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>可以看到, QuartzProperties 使用了 @ConfigurationProperties 加载了 spring.quartz 前缀的配置,也就是上面我们的配置文件中的配置;加载之后呢, bootquartz包下有 类 QuartzAutoConfiguration, 看名字就可以知道,这个就是自动配置 quartz的类了.</p><p>所以我们不需要再去通过代码去配置 SchedulerFactoryBean 了,这是后话</p><p>QuartzAutoConfiguration 类注释</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20200617113632769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RlbW9fTGl1,size_16,color_FFFFFF,t_70" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>通过上面的截图我们发现,这里引用了 QuartzProperties</p><p>其中的 quartzScheduler()方法帮助我们创建了 SchedulerFactoryBean 并使用了<strong> </strong>QuartzProperties 中的自定义配置,以下是quartzScheduler()部分代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SchedulerFactoryBean <span class="title">quartzScheduler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SchedulerFactoryBean schedulerFactoryBean = <span class="keyword">new</span> SchedulerFactoryBean();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.properties.getProperties().isEmpty()) &#123;</span><br><span class="line">schedulerFactoryBean</span><br><span class="line">.setQuartzProperties(asProperties(<span class="keyword">this</span>.properties.getProperties()));</span><br><span class="line">&#125;</span><br><span class="line">customize(schedulerFactoryBean);</span><br><span class="line"><span class="keyword">return</span> schedulerFactoryBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>姑且一提,方法中调用了 customize(SchedulerFactoryBean  schedulerFactoryBean) 方法,这个方法会寻找实现了 SchedulerFactoryBeanCustomizer 接口的配置类,在其实现方法 customize(SchedulerFactoryBean  schedulerFactoryBean)中 可对 SchedulerFactoryBean  使用代码自定义配置</p><p>那么到这里结束了吗?不! 这里还有本文中最大的一个坑,作者深受其扰,扒了两天的源码才找到这个问题!!!</p><p>如果我们的项目中有其它的默认数据源,那么quartz会忽略配置文件中自定义数据源,使用默认数据源,原因看以下源码</p><p>首先是 QuartzAutoConfiguration 中的 静态内部类 JdbcStoreTypeConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnSingleCandidate</span>(DataSource.class)</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcStoreTypeConfiguration</span> </span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">0</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> SchedulerFactoryBeanCustomizer <span class="title">dataSourceCustomizer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">QuartzProperties properties, DataSource dataSource,</span></span></span><br><span class="line"><span class="function"><span class="params">@QuartzDataSource ObjectProvider&lt;DataSource&gt; quartzDataSource,</span></span></span><br><span class="line"><span class="function"><span class="params">ObjectProvider&lt;PlatformTransactionManager&gt; transactionManager)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (schedulerFactoryBean) -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (properties.getJobStoreType() == JobStoreType.JDBC) &#123;</span><br><span class="line">                              <span class="comment">//重点在这里 begin</span></span><br><span class="line">DataSource dataSourceToUse = getDataSource(dataSource,quartzDataSource);</span><br><span class="line">schedulerFactoryBean.setDataSource(dataSourceToUse);</span><br><span class="line">                              <span class="comment">//重点在这里 end</span></span><br><span class="line">PlatformTransactionManager txManager = transactionManager.getIfUnique();</span><br><span class="line"><span class="keyword">if</span> (txManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">schedulerFactoryBean.setTransactionManager(txManager);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">private</span> DataSource <span class="title">getDataSource</span><span class="params">(DataSource dataSource,</span></span></span><br><span class="line"><span class="function"><span class="params">ObjectProvider&lt;DataSource&gt; quartzDataSource)</span> </span>&#123;</span><br><span class="line">DataSource dataSourceIfAvailable = quartzDataSource.getIfAvailable();</span><br><span class="line"><span class="keyword">return</span> (dataSourceIfAvailable != <span class="keyword">null</span>) ? dataSourceIfAvailable : dataSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的getDataSource 方法判断了我们项目中的 quartzDataSource是否为空,如果为空,那么就使用默认的数据源;quartzDataSource怎么才能不为空呢? 可以看到dataSourceCustomizer 方法参数中有 @QuartzDataSource 注解, 这个注解会去寻找我们项目中使用@QuartzDataSource配置的数据源,但是 我都已经在配置文件中自定义了数据源,再去手动配置一遍不是多此一举吗? 接着往下看</p><p><strong>SchedulerFactoryBean 的初始化方法部分源码▼</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initSchedulerFactory</span><span class="params">(StdSchedulerFactory schedulerFactory)</span> <span class="keyword">throws</span> SchedulerException, IOException </span>&#123;</span><br><span class="line">Properties mergedProps = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.dataSource != <span class="keyword">null</span>) &#123;</span><br><span class="line">mergedProps.setProperty(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在静态内部类设置过了数据源,初始化方法只要发现数据源不为空,那么就使用会使用 LocalDataSourceJobStore 覆盖我们quartz配置文件中设置的  org.quartz.jobStore.class: org.quartz.impl.jdbcjobstore.JobStoreTX</p><p>而LocalDataSourceJobStore 中的初始化方法使用的是 SchedulerFactoryBean 中设置的数据源,所以我们quartz配置文件中的数据源才不会生效!!!</p><p>怎么解决呢?   我们上面提到了customize(SchedulerFactoryBean  schedulerFactoryBean) 方法,这个方法会寻找实现了 SchedulerFactoryBeanCustomizer 接口的配置类,在其实现方法 customize(SchedulerFactoryBean  schedulerFactoryBean)中 可对 SchedulerFactoryBean  使用代码自定义配置</p><p>所以 我们只要在SchedulerFactoryBean 创建后调用初始化方法之前,再将DataSource设置为null,那么SchedulerFactoryBean 初始化时,将会使用我们配置文件中的JobStoreTX去寻找我们配置的数据源了,至此,填坑完毕▼</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.quartz.SchedulerFactoryBeanCustomizer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.SchedulerFactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Demo-Liu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-06-12 11:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 配置定时任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerConfig</span> <span class="keyword">implements</span> <span class="title">SchedulerFactoryBeanCustomizer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> Demo-Liu</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 20200614 12:44</span></span><br><span class="line"><span class="comment">     * 自定义 quartz配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> schedulerFactoryBean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(SchedulerFactoryBean schedulerFactoryBean)</span> </span>&#123;</span><br><span class="line">        schedulerFactoryBean.setDataSource(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>以上</strong></p><p><strong>在文末附上我的GitHub小demo,其中包含了quartz的数据库建表sql,并提供了一种可以更加灵活便捷的通过yml文件配置定时任务的方式  地址: GitHub-BootQuartzYml</strong></p><p><strong>以下是yml配置文件配置定时任务的例子</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#通过加载此配置文件实现动态创建Job 旨在通过一种更灵活便捷的方式来控制定时任务</span><br><span class="line"></span><br><span class="line">#20200611 by Demo-Liu</span><br><span class="line"></span><br><span class="line">#jobs:</span><br><span class="line">#  jobList:</span><br><span class="line">#    - jobConf:</span><br><span class="line">#        name: 测试任务                             #任务名 可选</span><br><span class="line">#        job: com.example.demo.quartz.DemoJob  #任务类包路径 必须</span><br><span class="line">#        param:                                     #可为job类注入参数(可配置多项)   可选</span><br><span class="line">#          jtbs: test</span><br><span class="line">#        cron: 10 * * * * ?                         #任务执行频率 必须</span><br><span class="line">#        active: true                               #任务激活状态 必须</span><br><span class="line">jobs:</span><br><span class="line">  jobList:</span><br><span class="line">    - jobConf:</span><br><span class="line">        name: 测试任务</span><br><span class="line">        job: com.example.demo.quartz.DemoJob</span><br><span class="line">        param:</span><br><span class="line">          jtbs: test</span><br><span class="line">          ss: test2</span><br><span class="line">        cron: <span class="number">0</span>/<span class="number">10</span> * * * * ?</span><br><span class="line">        active: <span class="keyword">true</span></span><br><span class="line">    - jobConf:</span><br><span class="line">        name: 测试任务<span class="number">2</span></span><br><span class="line">        job: com.example.demo.quartz.DemoJob2</span><br><span class="line">        param:</span><br><span class="line">          jtbs: test</span><br><span class="line">          ss: test2</span><br><span class="line">        cron: <span class="number">0</span>/<span class="number">10</span> * * * * ?</span><br><span class="line">        active: <span class="keyword">false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;定时任务 想必做程序的都或多或少的接触过,以便于我们以某个特定的 时间/频率 去执行所需要的程序,Quartz 是一个优秀的框架,可以根据我们的配置将 定时任务的执行 时间/频率 持久化至数据库, 我们通过修改数据库中的任务下次执行时间,达到不需要等到任务配置执行的原始 时
      
    
    </summary>
    
    
      <category term="springboot" scheme="http://wumuwumu.github.io/tags/springboot/"/>
    
      <category term="quartz" scheme="http://wumuwumu.github.io/tags/quartz/"/>
    
  </entry>
  
  <entry>
    <title>框架的实现</title>
    <link href="http://wumuwumu.github.io/2020/08/14/%E6%A1%86%E6%9E%B6%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://wumuwumu.github.io/2020/08/14/框架的实现/</id>
    <published>2020-08-14T10:39:21.000Z</published>
    <updated>2020-08-14T10:39:21.051Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://wumuwumu.github.io/2020/06/05/%E8%BF%90%E7%BB%B4/frp%E6%90%AD%E5%BB%BA/"/>
    <id>http://wumuwumu.github.io/2020/06/05/运维/frp搭建/</id>
    <published>2020-06-05T07:54:05.000Z</published>
    <updated>2020-08-15T07:20:40.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>frp是有个内网穿透的工具，分为客户端和服务端。客户端的程序名称是frpc，服务端的程序名称是frps。</p><h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// lorawan gateway 下载mipsle版本</span><br><span class="line">https://github.com/fatedier/frp/releases</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frps.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span>   # 用于与客户端之间通信</span><br></pre></td></tr></table></figure><h2 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><h2 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h2><p>详细看<a href="https://github.com/fatedier/frp/blob/master/README_zh.md#dashboard" target="_blank" rel="noopener">https://github.com/fatedier/frp/blob/master/README_zh.md#dashboard</a></p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="comment"># frp multi user 插件</span></span><br><span class="line"><span class="attr">user</span> = user1</span><br><span class="line"><span class="attr">meta_token</span> = <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="section">[web]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_port</span> = <span class="number">80</span></span><br><span class="line"><span class="attr">custom_domains</span> = www.yourdomain.com</span><br><span class="line"></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span></span><br></pre></td></tr></table></figure><h2 id="运行程序-1"><a href="#运行程序-1" class="headerlink" title="运行程序"></a>运行程序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure><h2 id="openwrt开机启动"><a href="#openwrt开机启动" class="headerlink" title="openwrt开机启动"></a>openwrt开机启动</h2><ol><li><p>配置服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">## /etc/init.d/frpc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#!/bin/sh /etc/rc.common</span><br><span class="line"># &quot;new&quot; style init script</span><br><span class="line"># Look at /lib/functions/service.sh on a running system for explanations of what other SERVICE_</span><br><span class="line"># options you can use, and when you might want them.</span><br><span class="line"></span><br><span class="line">START=80</span><br><span class="line">APP=frpc</span><br><span class="line"></span><br><span class="line">start() &#123;</span><br><span class="line">      service_start /usr/sbin/$APP -c /etc/frpc.ini &gt; /usr/frpc.log &amp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stop() &#123;</span><br><span class="line">        service_stop /usr/sbin/$APP</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>开机启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/init.d/frpc</span><br><span class="line">/etc/init.d/frpc enable</span><br><span class="line">/etc/init.d/frpc start</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h1&gt;&lt;p&gt;frp是有个内网穿透的工具，分为客户端和服务端。客户端的程序名称是frpc，服务端的程序名称是frps。&lt;/p&gt;
&lt;h1 id=&quot;服务器&quot;&gt;
      
    
    </summary>
    
    
      <category term="frp" scheme="http://wumuwumu.github.io/tags/frp/"/>
    
  </entry>
  
  <entry>
    <title>Vue3工程搭建</title>
    <link href="http://wumuwumu.github.io/2020/05/09/vue/Vue3%E5%B7%A5%E7%A8%8B%E6%90%AD%E5%BB%BA/"/>
    <id>http://wumuwumu.github.io/2020/05/09/vue/Vue3工程搭建/</id>
    <published>2020-05-09T06:23:23.000Z</published>
    <updated>2020-05-09T06:25:03.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -g @vue/cli</span><br><span class="line">vue create <span class="built_in">test</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;创建工程&quot;&gt;&lt;a href=&quot;#创建工程&quot; class=&quot;headerlink&quot; title=&quot;创建工程&quot;&gt;&lt;/a&gt;创建工程&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
      
    
    </summary>
    
    
      <category term="vue" scheme="http://wumuwumu.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>编写自己的Springboot-starter</title>
    <link href="http://wumuwumu.github.io/2020/04/18/java/%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84Springboot-starter/"/>
    <id>http://wumuwumu.github.io/2020/04/18/java/编写自己的Springboot-starter/</id>
    <published>2020-04-18T07:53:46.000Z</published>
    <updated>2020-04-18T07:54:45.516Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们都知道可以使用SpringBoot快速的开发基于Spring框架的项目。由于围绕SpringBoot存在很多开箱即用的Starter依赖，使得我们在开发业务代码时能够非常方便的、不需要过多关注框架的配置，而只需要关注业务即可。</p><p>例如我想要在SpringBoot项目中集成Redis，那么我只需要加入spring-data-redis-starter的依赖，并简单配置一下连接信息以及Jedis连接池配置就可以。这为我们省去了之前很多的配置操作。甚至有些功能的开启只需要在启动类或配置类上增加一个注解即可完成。</p><p>那么如果我们想要自己实现自己的Starter需要做些什么呢？下面就开始介绍如何实现自己的SpringBoot-xxx-starter。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>首先说说原理，我们知道使用一个公用的starter的时候，只需要将相应的依赖添加的Maven的配置文件当中即可，免去了自己需要引用很多依赖类，并且SpringBoot会自动进行类的自动配置。那么 SpringBoot 是如何知道要实例化哪些类，并进行自动配置的呢？ 下面简单说一下。</p><p>首先，SpringBoot 在启动时会去依赖的starter包中寻找 <code>resources/META-INF/spring.factories</code>文件，然后根据文件中配置的Jar包去扫描项目所依赖的Jar包，这类似于 Java 的 <strong>SPI</strong> 机制。</p><p>第二步，根据 <code>spring.factories</code>配置加载<code>AutoConfigure</code>类。</p><p>最后，根据 <code>@Conditional</code>注解的条件，进行自动配置并将Bean注入Spring Context 上下文当中。</p><p>我们也可以使用<code>@ImportAutoConfiguration({MyServiceAutoConfiguration.class})</code> 指定自动配置哪些类。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>终于到了代码实现的步骤，接下来就开始编码我们自己的SpringBoot-starter。</p><h4 id="第一步创建一个SpringBoot-项目，并添加下面两个依赖到pom-xml文件当中"><a href="#第一步创建一个SpringBoot-项目，并添加下面两个依赖到pom-xml文件当中" class="headerlink" title="第一步创建一个SpringBoot 项目，并添加下面两个依赖到pom.xml文件当中"></a>第一步创建一个SpringBoot 项目，并添加下面两个依赖到pom.xml文件当中</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中 <code>spring-boot-configuration-processor</code>的作用是编译时生成 <code>spring-configuration-metadata.json</code>，此文件主要给IDE使用。如当配置此jar相关配置属性在 <code>application.yml</code>，你可以用ctlr+鼠标左键点击属性名，IDE会跳转到你配置此属性的类中。</p><p>我们日常使用的Spring官方的Starter一般采取<code>spring-boot-starter-{name}</code>的命名方式，如 <code>spring-boot-starter-web</code>。</p><p>而非官方的Starter，官方建议 <code>artifactId</code> 命名应遵循<code>{name}-spring-boot-starter</code>的格式。 例如：<code>ysc-spring-boot-starter</code> 。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ysc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simple-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="第二步编写我们的Service类"><a href="#第二步编写我们的Service类" class="headerlink" title="第二步编写我们的Service类"></a>第二步编写我们的Service类</h4><p>这里讲一下我们的Starter要实现的功能，很简单，提供一个<code>Service</code>，包含一个能够将配置文件中配置的字符串根据传入的字符进行分割的方法<code>String[] split(String separatorChar)</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StarterService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String config;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StarterService</span><span class="params">(String config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = config;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String[] split(String separatorChar) &#123;</span><br><span class="line">        <span class="keyword">return</span> StringUtils.split(<span class="keyword">this</span>.config, separatorChar);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第三步编写配置文件读取类"><a href="#第三步编写配置文件读取类" class="headerlink" title="第三步编写配置文件读取类"></a>第三步编写配置文件读取类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"example.service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StarterServiceProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String config;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfig</span><span class="params">(String config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = config;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="第四步，编写AutoConfigure类-，这步是关键点"><a href="#第四步，编写AutoConfigure类-，这步是关键点" class="headerlink" title="第四步，编写AutoConfigure类 ，这步是关键点"></a>第四步，编写<code>AutoConfigure</code>类 ，这步是关键点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(StarterService.class)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(StarterServiceProperties.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StarterAutoConfigure</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StarterServiceProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"example.service"</span>, value = <span class="string">"enabled"</span>, havingValue = <span class="string">"true"</span>)</span><br><span class="line">    <span class="function">StarterService <span class="title">starterService</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StarterService(properties.getConfig());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释一下代码中用到的几个注解：</p><ul><li><code>@ConditionalOnClass</code>，当<code>classpath</code>下发现该类的情况下进行自动配置。</li><li><code>@ConditionalOnMissingBean</code>，当<code>Spring Context</code>中不存在该<code>Bean</code>时。</li><li><code>@ConditionalOnProperty(prefix = &quot;example.service&quot;,value = &quot;enabled&quot;,havingValue = &quot;true&quot;)</code>，当配置文件中<code>example.service.enabled=true</code>时。</li></ul><h5 id="下面列举SpringBoot中的所有-Conditional注解及作用"><a href="#下面列举SpringBoot中的所有-Conditional注解及作用" class="headerlink" title="下面列举SpringBoot中的所有@Conditional注解及作用"></a>下面列举SpringBoot中的所有@Conditional注解及作用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@ConditionalOnBean:当容器中有指定的Bean的条件下  </span><br><span class="line">@ConditionalOnClass：当类路径下有指定的类的条件下  </span><br><span class="line">@ConditionalOnExpression:基于SpEL表达式作为判断条件  </span><br><span class="line">@ConditionalOnJava:基于JVM版本作为判断条件  </span><br><span class="line">@ConditionalOnJndi:在JNDI存在的条件下查找指定的位置  </span><br><span class="line">@ConditionalOnMissingBean:当容器中没有指定Bean的情况下  </span><br><span class="line">@ConditionalOnMissingClass:当类路径下没有指定的类的条件下  </span><br><span class="line">@ConditionalOnNotWebApplication:当前项目不是Web项目的条件下  </span><br><span class="line">@ConditionalOnProperty:指定的属性是否有指定的值  </span><br><span class="line">@ConditionalOnResource:类路径下是否有指定的资源  </span><br><span class="line">@ConditionalOnSingleCandidate:当指定的Bean在容器中只有一个，或者在有多个Bean的情况下，用来指定首选的Bean @ConditionalOnWebApplication:当前项目是Web项目的条件下</span><br></pre></td></tr></table></figure><h4 id="最后一步，在resources-META-INF-下创建spring-factories文件，并添加如下内容："><a href="#最后一步，在resources-META-INF-下创建spring-factories文件，并添加如下内容：" class="headerlink" title="最后一步，在resources/META-INF/下创建spring.factories文件，并添加如下内容："></a>最后一步，在<code>resources/META-INF/</code>下创建<code>spring.factories</code>文件，并添加如下内容：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.example.autocinfigure.StarterAutoConfigure</span><br></pre></td></tr></table></figure><p>至此，我们的一个Starter代码部分就是完成了，下面将项目安装到本地Maven仓库中。</p><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>在项目根目录执行 <code>mvn install</code> 进行打包安装。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>将Starter项目的依赖添加到我们自己的SpringBoot项目中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ysc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simple-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>application.yml</code> 配置文件中添加配置信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">example</span><br><span class="line">  service</span><br><span class="line">    enabled: true</span><br><span class="line">    config： abc-des-dde,SSS-DRS-RE,SDR-SDFR-XXX</span><br></pre></td></tr></table></figure><p>在本地使用<code>JUnit</code>进行代码测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StarterService starterService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">starterTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String[] splitArray = starterService.split(<span class="string">","</span>);</span><br><span class="line">    System.out.println(splitArray);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们都知道可以使用SpringBoot快速的开发基于Spring框架的项目。由于围绕SpringBoot存在很多开箱即用的Starter依赖
      
    
    </summary>
    
    
      <category term="java" scheme="http://wumuwumu.github.io/tags/java/"/>
    
      <category term="sprintboot" scheme="http://wumuwumu.github.io/tags/sprintboot/"/>
    
  </entry>
  
  <entry>
    <title>redis开启远程连接</title>
    <link href="http://wumuwumu.github.io/2019/12/16/redis%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    <id>http://wumuwumu.github.io/2019/12/16/redis开启远程连接/</id>
    <published>2019-12-16T09:44:28.000Z</published>
    <updated>2019-12-16T09:44:56.967Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、修改redis服务器的配置文件"><a href="#1、修改redis服务器的配置文件" class="headerlink" title="1、修改redis服务器的配置文件"></a>1、修改redis服务器的配置文件</h4><p>vi redis.conf</p><p>注释以下绑定的主机地址</p><p># bind 127.0.0.1</p><h4 id="或"><a href="#或" class="headerlink" title="或"></a>或</h4><p>vim  redis.conf</p><p>bind  0.0.0.0</p><p>protected-mode   no</p><h4 id="2、修改redis服务器的参数配置"><a href="#2、修改redis服务器的参数配置" class="headerlink" title="2、修改redis服务器的参数配置"></a>2、修改redis服务器的参数配置</h4><p>修改redis的守护进程为no，不启用</p><p>127.0.0.1:6379&gt; config  set   daemonize  “no”</p><p>OK</p><p>修改redis的保护模式为no，不启用</p><p>127.0.0.1:6379&gt; config   set   protected-mode”no”</p><p>OK</p><p>或者</p><p>config set requirepass 123 -&gt;123是密码</p><h4 id="注意：开启-6379端口"><a href="#注意：开启-6379端口" class="headerlink" title="注意：开启 6379端口"></a>注意：开启 6379端口</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1、修改redis服务器的配置文件&quot;&gt;&lt;a href=&quot;#1、修改redis服务器的配置文件&quot; class=&quot;headerlink&quot; title=&quot;1、修改redis服务器的配置文件&quot;&gt;&lt;/a&gt;1、修改redis服务器的配置文件&lt;/h4&gt;&lt;p&gt;vi redis.c
      
    
    </summary>
    
    
      <category term="redis" scheme="http://wumuwumu.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>nginx的servername配置</title>
    <link href="http://wumuwumu.github.io/2019/12/16/nginx/nginx%E7%9A%84servername%E9%85%8D%E7%BD%AE/"/>
    <id>http://wumuwumu.github.io/2019/12/16/nginx/nginx的servername配置/</id>
    <published>2019-12-16T09:42:19.000Z</published>
    <updated>2019-12-16T09:43:51.589Z</updated>
    
    <content type="html"><![CDATA[<p>编译自：<br> <a href="https://link.jianshu.com?t=http://nginx.org/en/docs/http/server_names.html" target="_blank" rel="noopener">server_names</a></p><p><strong>目录</strong>：</p><ul><li>通配符主机名</li><li>正则表达式主机名</li><li>混杂主机名</li><li>对主机名的优化</li><li>兼容性</li></ul><p>nginx 的 server names 由 server_name 指令定义，server name 是 nginx 用于选择以哪个 server 区块处理访问请求的依据参数。可参考 《nginx 是如何处理请求的》 的描述。</p><p>server name 可以用三种方式定义：</p><ul><li>定义准确的名字</li><li>定义通配符名字</li><li>定义正则表达式名字</li></ul><p>例如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  example.org  www.example.org;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  <span class="regexp">*.example.org</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  <span class="regexp">mail.*</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  ~^(?&lt;user&gt;.+)\.example\.net$;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 nginx 以请求的 server name 查找匹配的虚拟主机时，如果匹配的 server 区块不止一个，nginx 按照如下的优先顺序选择 server 区块：</p><ol><li>准确的主机名</li><li>以 “*” 起始的最长的通配主机名</li><li>以 “*” 结尾的最长的通配主机名</li><li>第一个匹配的正则表达式（按照配置文件中的顺序）</li></ol><p>所以，如果同时有一个通配主机名和正则表达式主机名与访问请求的 server name 匹配，nginx 会选择通配主机名的 server 区块处理请求。</p><h2 id="通配主机名"><a href="#通配主机名" class="headerlink" title="通配主机名"></a>通配主机名</h2><hr><p>通配主机名只能在起始和末尾使用 “<code>*</code>” 字符，而且必须以 “<code>.</code>” 分隔。形如 “<code>www.*.example.org</code>” 或者 “<code>w*.example.org</code>” 的通配主机名是无效的。要达到这个匹配效果，只有使用正则表达式：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">“www.*.example.org” -&gt;  “~^www\..+\.example\.org$”</span><br><span class="line">“w*.example.org”    -&gt;  “~^w.*\.example\.org$”</span><br></pre></td></tr></table></figure><p>“<code>*</code>” 号可以匹配多个名字区域，“<code>*.example.org</code>” 不仅可以匹配 <a href="https://link.jianshu.com?t=http://www.example.org" target="_blank" rel="noopener">www.example.org</a>，也能够匹配 <a href="https://link.jianshu.com?t=http://www.sub.example.org" target="_blank" rel="noopener">www.sub.example.org</a>。</p><h2 id="正则表达式主机名"><a href="#正则表达式主机名" class="headerlink" title="正则表达式主机名"></a>正则表达式主机名</h2><hr><p>nginx 使用的正则表达式与 Perl 语言的正则表达式（PCRE）兼容。使用正则表达式主机名，server name 必须以 “~” 字符为起始字符。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server_name  ~^www\d+\.example\.net$;</span><br></pre></td></tr></table></figure><p>如果不以 “~” 字符为起始字符，该 server name 将被视为 “准确的主机名” 或者当 server name 包含 “<code>*</code>” 时被视为 “通配主机名” (多数情况是非法通配主机名，因为只有当 “<code>*</code>” 在 server name 的起始或结尾时才合法)。</p><p>不要忘记设置 “<code>^</code>” 和 “<code>$</code>” 锚定符对主机名进行界定，这不是 nginx 的配置语法要求，而是为了使正则表达式能正确匹配。</p><p>同时也要注意，域名的分隔符 “.” 在正则表达式中应该以 “\” 引用。如果在正则表达式中使用了 “<code>{</code>” 和 “<code>}</code>” 字符，应该将整个正则表达式引用起来，因为花括弧在 nginx 配置中也有特殊意义，引用起来以避免被 nginx 错误解析。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server_name  <span class="string">"~^(?&lt;name&gt;\w\d&#123;1,3&#125;+)\.example\.net$"</span>;</span><br></pre></td></tr></table></figure><p>如果不引用起来，nginx 会启动失败，并显示如下错误信息：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">directive <span class="string">"server_name"</span> <span class="keyword">is</span> not terminated <span class="keyword">by</span> <span class="string">";"</span> <span class="keyword">in</span> ...</span><br></pre></td></tr></table></figure><p>正则表达式的 named capture （使用一个名字对匹配的字符串进行引用）可被视为一个变量，在后面的配置中使用：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    server_name   ~^(www\.)?(?&lt;domain&gt;.+)$;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /sites/$domain;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PCRE 库支持 named capture，有如下几种语法：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?&lt;name&gt;     Perl <span class="number">5.10</span> compatible syntax, supported since PCRE-<span class="number">7.0</span></span><br><span class="line">?'name<span class="string">'     Perl 5.10 compatible syntax, supported since PCRE-7.0</span></span><br><span class="line"><span class="string">?P&lt;name&gt;    Python compatible syntax, supported since PCRE-4.0</span></span><br></pre></td></tr></table></figure><p>可参考：<a href="https://link.jianshu.com?t=http://www.pcre.org/current/doc/html/pcre2pattern.html#SEC16" target="_blank" rel="noopener">pcre2pattern</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">\d     any decimal digit</span><br><span class="line">\D     any character that is not a decimal digit</span><br><span class="line">\h     any horizontal white space character</span><br><span class="line">\H     any character that is not a horizontal white space character</span><br><span class="line">\s     any white space character</span><br><span class="line">\S     any character that is not a white space character</span><br><span class="line">\v     any vertical white space character</span><br><span class="line">\V     any character that is not a vertical white space character</span><br><span class="line">\w     any &quot;word&quot; character</span><br><span class="line">\W     any &quot;non-word&quot; character</span><br></pre></td></tr></table></figure><p>如果 nginx 启动失败，并显示如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcre_compile() failed: unrecognized character after (?&lt; in ...</span><br></pre></td></tr></table></figure><p>这表示 PCRE 库太老旧，可尝试使用 “<code>?P&lt;name&gt;</code>” 替代 “<code>?&lt;name&gt;</code>”。</p><p>named capture 也能以数字形式使用：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    server_name   ~^(www\.)?(.+)$;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /sites/$2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无论如何，数字形式的使用应尽量简单，因为数字是只是顺序标识，而不是被匹配的字符串的标识，这导致数字引用很容易被覆盖。</p><h2 id="混杂主机名"><a href="#混杂主机名" class="headerlink" title="混杂主机名"></a>混杂主机名</h2><hr><p>有一些主机名是被特殊对待的。</p><p>对于未定义 “Host” 请求首部的请求，如果希望在某个 server 区块中处理这样的请求，应在 server_name 指令的参数中添加 “” 空字符串参数：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  example.org  www.example.org  <span class="string">""</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在《nginx 是如何处理访问请求的》一文中曾经介绍过，如果 server 区块中没有定义 server_name 指令，便如同定义了 server_name “”。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Note</span>:</span><br><span class="line">在 0<span class="selector-class">.8</span><span class="selector-class">.48</span> 版以前，遇到 <span class="selector-tag">server</span> 区块中没有定义 <span class="selector-tag">server_name</span> 指令的情况，</span><br><span class="line">会将系统的主机名设置为 <span class="selector-tag">server</span> 区块的 <span class="selector-tag">server</span> <span class="selector-tag">name</span>，而不是自动设置 "" 为</span><br><span class="line"><span class="selector-tag">server</span> <span class="selector-tag">name</span>。</span><br></pre></td></tr></table></figure><p>在 0.9.4 版本，如果设置：<code>server_name $hostname</code>，会将系统的主机名设置为 server name。</p><p>如果某个访问使用了 IP 地址 而不是 server name，“Host” 请求首部会包含 IP 地址。对于这样的请求，可使用如下的配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  example.org</span><br><span class="line">                 www.example.org</span><br><span class="line">                 <span class="string">""</span></span><br><span class="line">                 <span class="number">192.168.1.1</span></span><br><span class="line">                 ;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是一个 catch-all server 区块的配置，使用了 “_” 作为 server name:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>  default_server;</span><br><span class="line">    <span class="attribute">server_name</span>  _;</span><br><span class="line">    <span class="attribute">return</span>       <span class="number">444</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 server name 并没有什么特殊之处，它仅是一个无效的域名而已，也可以使用其他类似的名字，如 “–” and “!@#” 。</p><p>0.6.25 版以前的 nginx 曾经支持一个特殊的 server name: “<code>*</code>”，这个特殊主机名被错误的解释成一个 catch-all 主机名。但它从未以一个 catch-all 或者 通配主机名工作，它的功能实际上与现在的 server_name_in_redirect 指令的功能相同：<a href="https://link.jianshu.com?t=http://nginx.org/en/docs/http/ngx_http_core_module.html#server_name_in_redirect" target="_blank" rel="noopener">server_name_in_redirect</a></p><p>特殊的 server name “<code>*</code>” 现在已经被弃用，应使用 server_name_in_redirect 指令。</p><p>要注意的是，使用 server_name 指令无法指定 defalt server 或是 catch-all name，这是 listen 指令的属性，不是 server_name 指令的属性。可参考《nginx 是如何处理访问请求的》。</p><p>我们可以定义两个 server，它们都同时监听于 <em>:80 端口 和 </em>:8080 端口，将其中一个设置为 <em>:80 端口的默认 server，将另一个设置为 </em>:8080 端口的默认 server：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">8080</span>  default_server;</span><br><span class="line">    <span class="attribute">server_name</span>  example.net;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>  default_server;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  example.org;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对主机名的优化"><a href="#对主机名的优化" class="headerlink" title="对主机名的优化"></a>对主机名的优化</h2><hr><p>准确的主机名、以 “<code>*</code>” 起始的通配主机名、以 “<code>*</code>” 结尾的通配主机名，这三种主机名被存放在三个 hash table 中。这三个 hash table 是与监听端口绑定的。hash table 的大小在配置阶段被优化，优化的目的是努力降低这些名字在 CPU 缓存中命中失败的几率。关于设置 hash table 的详细讨论请参考：<a href="https://link.jianshu.com?t=http://nginx.org/en/docs/hash.html" target="_blank" rel="noopener">hash</a></p><p>在匹配主机名时，首先查找“准确主机名”的 hash table，如果没有找到，会查找以 “<code>*</code>” 起始的“通配主机名”的 hash table，如果没有仍未找到，会查找以 “<code>*</code>” 结尾的“通配主机名”的 hash table。</p><p>对于“通配主机名”的 hash table 的检索会更慢，因为是以主机名的域名部分去检索的。</p><p>注意，对于特殊的通配主机名，形如 “.example.org”，这样的主机名是存放在“通配主机名”的 hash table 中，而不是存放在“准确主机名”的 hash table 中。</p><p>如果前面都未找到，正则表达式会按写在配置文件中的顺序被测试，因此正则表达式是最慢的方法，并且没有可扩展性。</p><p>因为以上这些原因，在可能的情况下最好使用 “准确的主机名”。例如，如果对于 <a href="https://link.jianshu.com?t=http://example.org" target="_blank" rel="noopener">example.org</a> 和 <a href="https://link.jianshu.com?t=http://www.example.org" target="_blank" rel="noopener">www.example.org</a> 的请求最为频繁，对他们进行显式的定义会更有效率：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  example.org  www.example.org  <span class="regexp">*.example.org</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的定义方法不如上面的配置有效率：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  .example.org;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果定义了大量的主机名，或者使用了很长的主机名，应在配置文件的 http context 中调整这个两个参数：</p><ul><li><a href="https://link.jianshu.com?t=http://nginx.org/en/docs/http/ngx_http_core_module.html#server_names_hash_max_size" target="_blank" rel="noopener">server_names_hash_max_size</a></li><li><a href="https://link.jianshu.com?t=http://nginx.org/en/docs/http/ngx_http_core_module.html#server_names_hash_bucket_size" target="_blank" rel="noopener">server_names_hash_bucket_size</a></li></ul><p><code>server_names_hash_bucket_size</code> 指令的默认值可能为 32 或 64 或 其他数字，这是根据 CPU 缓存线大小而定的。如果默认值为 32，而且定义了一个 server name 为：“<code>too.long.server.name.example.org</code>” 这时 nginx 就不能启动，而且显示如下的错误信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">could not build the server_names_hash,</span><br><span class="line">you should increase server_names_hash_bucket_size: 32</span><br></pre></td></tr></table></figure><p>遇到这种情况，应将默认值设置为原来的两倍：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    server_names_hash_bucket_size  64;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>如果定义了大量的主机名，可能显示如下的错误信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">could not build the server_names_hash,</span><br><span class="line">you should increase either server_names_hash_max_size: 512</span><br><span class="line">or server_names_hash_bucket_size: 32</span><br></pre></td></tr></table></figure><p>遇到这种情况，首先尝试调整 <code>server_names_hash_max_size</code> 的值，设置为大于 server name 总数的值。如果这样设置仍不能让 nginx 正常启动，或者 nginx 启动的时间变得过长，再尝试增加 <code>server_names_hash_bucket_size</code> 的值。</p><p>如果一个 server 是某个监听端口唯一的 server，这时 nginx 根本不会去测试 server name，同时也不会为该监听端口构建 hash table。但其中又有一个例外，如果 server name 是正则表达式，而且正则表达式中包含了 captures，这时 nginx 不得不执行该正则表达式以获取 captures。（正则表达式的 capture 是指被圆括号引用的表达式部分，它们所匹配的字符串，可通过名字或数字引用）</p><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><hr><p>从 0.9.4 开始支持特殊主机名 “$hostname”</p><p>从 0.8.48 开始，如果 server 区块中未定义 server_name 指令，nginx 默认设定空字符串为主机名，如同定义了 server_name “”</p><p>从 0.8.25 开始支持在“正则表达式主机名”中使用 named capture 特性</p><p>从 0.7.40 开始支持在“正则表达式主机名”中使用 capture 特性</p><p>从 0.7.12 开始支持 “” 空字符串主机名</p><p>从 0.6.25 开始，支持使用“正则表达式主机名”或者“通配主机名”作为第一个主机名。</p><p>从 0.6.7 开始支持“正则表达式主机名”</p><p>从 0.6.0 开始支持形如 example.* 的“通配主机名”</p><p>从 0.3.18 开始支持形如 .example.org 的特殊“通配主机名”</p><p>从 0.1.13 开始支持形如 *.example.org 的“通配主机名”</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/1430e4046fd9" target="_blank" rel="noopener">https://www.jianshu.com/p/1430e4046fd9</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;编译自：&lt;br&gt; &lt;a href=&quot;https://link.jianshu.com?t=http://nginx.org/en/docs/http/server_names.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;server_names
      
    
    </summary>
    
    
      <category term="nginx" scheme="http://wumuwumu.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>odoo的dbfilter配置</title>
    <link href="http://wumuwumu.github.io/2019/12/16/odoo/odoo%E7%9A%84dbfilter%E9%85%8D%E7%BD%AE/"/>
    <id>http://wumuwumu.github.io/2019/12/16/odoo/odoo的dbfilter配置/</id>
    <published>2019-12-16T09:37:50.000Z</published>
    <updated>2019-12-16T09:41:28.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于-Odoo-的-dbfilter-配置项"><a href="#关于-Odoo-的-dbfilter-配置项" class="headerlink" title="关于 Odoo 的 dbfilter 配置项"></a>关于 Odoo 的 dbfilter 配置项</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>默认情况下首次访问odoo页面时，会要求选择要访问的数据库，db中的所有库都会被列出来供选择，这种在生产环境下通常是不希望的看到，如果在启动时指定连接的数据库名可以解决这个问题</p><ol><li>.conf文件中指定 <code>db_name = xxx</code></li><li>或者启动命令加参数<code>-d xxx</code></li></ol><h2 id="dbfilter"><a href="#dbfilter" class="headerlink" title="dbfilter"></a>dbfilter</h2><p>当我们需要根据域名来匹配数据库时（比如saas环境）这样就不适用了，这个时候就可以用 dbfilter 这个配置项来实现</p><p>dbfilter 默认值为 <code>.*</code></p><p>eg: <code>dbfilter = ^%h$</code> 表示按域名精确匹配数据库服务器中名称为域名的数据库</p><p>启动参数 <code>--db-filter=&#39;^%d$&#39;</code> 表示按二级域名前缀精确匹配对应名称的数据库（注意：127.0.0.1访问时会被匹配为 127 库名）</p><p>可用的匹配替代符号有 %h 和 %d</p><h3 id="h"><a href="#h" class="headerlink" title="%h"></a>%h</h3><p>%h 代表访问访问的域名，比如 <a href="http://www.abc.com" target="_blank" rel="noopener">www.abc.com</a></p><h3 id="d"><a href="#d" class="headerlink" title="%d"></a>%d</h3><p>当访问地址为 <a href="http://www.abc.com" target="_blank" rel="noopener">www.abc.com</a> 时 %d 为 abc<br>当访问地址为 shop.abc.com 时 %d 为 shop</p><h2 id="相关源代码"><a href="#相关源代码" class="headerlink" title="相关源代码"></a>相关源代码</h2><p>odoo中的相应的解析代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">db_filter</span><span class="params">(dbs, httprequest=None)</span>:</span></span><br><span class="line">    httprequest = httprequest <span class="keyword">or</span> request.httprequest</span><br><span class="line">    h = httprequest.environ.get(<span class="string">'HTTP_HOST'</span>, <span class="string">''</span>).split(<span class="string">':'</span>)[<span class="number">0</span>]</span><br><span class="line">    d, _, r = h.partition(<span class="string">'.'</span>)</span><br><span class="line">    <span class="keyword">if</span> d == <span class="string">"www"</span> <span class="keyword">and</span> r:</span><br><span class="line">        d = r.partition(<span class="string">'.'</span>)[<span class="number">0</span>]</span><br><span class="line">    r = openerp.tools.config[<span class="string">'dbfilter'</span>].replace(<span class="string">'%h'</span>, h).replace(<span class="string">'%d'</span>, d)</span><br><span class="line">    dbs = [i <span class="keyword">for</span> i <span class="keyword">in</span> dbs <span class="keyword">if</span> re.match(r, i)]</span><br><span class="line">    <span class="keyword">return</span> dbs</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关于-Odoo-的-dbfilter-配置项&quot;&gt;&lt;a href=&quot;#关于-Odoo-的-dbfilter-配置项&quot; class=&quot;headerlink&quot; title=&quot;关于 Odoo 的 dbfilter 配置项&quot;&gt;&lt;/a&gt;关于 Odoo 的 dbfilter 配
      
    
    </summary>
    
    
      <category term="odoo" scheme="http://wumuwumu.github.io/tags/odoo/"/>
    
  </entry>
  
  <entry>
    <title>postgresql配置文件</title>
    <link href="http://wumuwumu.github.io/2019/12/09/postgresql/postgresql%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://wumuwumu.github.io/2019/12/09/postgresql/postgresql配置文件/</id>
    <published>2019-12-09T08:29:39.000Z</published>
    <updated>2019-12-09T08:30:40.971Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h1><p>配置文件控制着一个PostgreSQL服务器实例的基本行为，主要包含postgresql.conf、pg_hba.conf、pg_ident.conf</p><p>（1）postgresql.conf</p><p>   该文件包含一些通用设置，比如内存分配，新建database的默认存储位置，PostgreSQL服务器的IP地址，日志的位置以及许多其他设置。9.4版引入了</p><p>   一个新的postgresql.auto.conf文件，任何时候执行Altersystem SQL命令，都会创建或重写该文件。该文件中的设置会替代postgresql.conf文件中的设置。</p><p>（2）pg_hba.conf</p><p>​    该文件用于控制访问安全性，管理客户端对Postgresql服务器的访问权限，内容包括：允许哪些用户连接到哪个数据库，允许哪些IP或者哪个网段的IP连</p><p>​    接到本服务器，以及指定连接时使用的身份验证模式</p><p>（3）pg_ident.conf</p><p>   pg_hba.conf的权限控制信息中的身份验证模式字段如果指定为ident方式，则用户连接时系统会尝试访问pg_ident文件，如果该文件存在，则系统会基于</p><p>​    文件内容将当前执行登录操作的操作系统用户映射为一个PostgreSQL数据库内部用户的身份来登录。</p><h1 id="2、查看配置文件的位置："><a href="#2、查看配置文件的位置：" class="headerlink" title="2、查看配置文件的位置："></a>2、查看配置文件的位置：</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">postgres=<span class="comment"># selectname,setting from pg_settings where category='File Locations';</span></span><br><span class="line">       name        |                 setting                 </span><br><span class="line">-------------------+-----------------------------------------</span><br><span class="line"> config_file       |/var/lib/pgsql/9.6/data/postgresql.conf</span><br><span class="line"> data_directory    | /var/lib/pgsql/9.6/data</span><br><span class="line"> external_pid_file | </span><br><span class="line"> hba_file          | /var/lib/pgsql/9.6/data/pg_hba.conf</span><br><span class="line"> ident_file        | /var/lib/pgsql/9.6/data/pg_ident.conf</span><br></pre></td></tr></table></figure><h1 id="3、postgresql-conf"><a href="#3、postgresql-conf" class="headerlink" title="3、postgresql.conf"></a>3、postgresql.conf</h1><p>3.1、关键的设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">postgres=<span class="comment"># selectname,context,unit,setting,boot_val,reset_val from pg_settings where namein('listen_addresses','max_connections','shared_buffers','effective_cache_size','work_mem','maintenance_work_mem')order by context,name;</span></span><br><span class="line">         name         | context   | unit | setting |boot_val  | reset_val </span><br><span class="line">----------------------+------------+------+---------+-----------+-----------</span><br><span class="line"> listen_addresses     | postmaster |      | *      | localhost | *</span><br><span class="line"> max_connections      | postmaster |      | 100    | 100       | 100</span><br><span class="line"> shared_buffers       | postmaster | 8kB  | 16384  | 1024      | 16384</span><br><span class="line"> effective_cache_size | user       | 8kB | 524288  | 524288    | 524288</span><br><span class="line"> maintenance_work_mem | user       | kB  | 65536   | 65536     | 65536</span><br><span class="line"> work_mem             | user       | kB  | 4096    | 4096      | 4096</span><br><span class="line">(6 rows)</span><br></pre></td></tr></table></figure><p>context 设置为postmaster，更改此形参后需要重启PostgreSQL服务才能生效；</p><p>设置为user，那么只需要执行一次重新加载即可全局生效。重启数据库服务会终止活动连接，但重新加载不会。  </p><p>unit 字段表示这些设置的单位</p><p>setting是指当前设置；boot_val是指默认设置；reset_val是指重新启动服务器或重新加载设置之后的新设置</p><p>在postgresql.conf中修改了设置后，一定记得查看一下setting和reset_val并确保二者是一致，否则说明设置并未生效，需要重新启动服务器或者重新加载设置</p><p>3.2、postgresql.auto.conf与postgresql.conf区别</p><p>对于9.4版及之后的版本来说，Postgresql.auto.conf的优先级是高于postgresql.conf的，如果这两个文件中存在同名配置项，则系统会优先选择前者设定的值。</p><p>3.3、postgresql.conf以下网络设置，修改这些值是一定要重新启动数据库服务的</p><p>listen_addresses 一般设定为localhost或者local，但也有很多人会设为*，表示使用本机任一IP地址均可连接到Postgresql服务</p><p>port 默认值 为5432</p><p>max_connections</p><p>3.4、以下四个设置对系统性能有着全局性的影响，建议你在实际环境下通过实测来找到最优值</p><p>(1)share_buffers</p><p>​    用于缓存最近访问过的数据页的内存区大小，所有用户会话均可共享此缓存区</p><p>​    一般来说越大越好，至少应该达到系统总内存的25%，但不宜超过8GB，因为超过后会出现“边际收益递减”效应。</p><p>​    需重启postgreSQL服务</p><p>（2）effective_cache_size</p><p>一个查询执行过程中可以使用的最大缓存，包括操作系统使用的部分以及PostgreSQL使用部分，系统并不会根据这个值来真实地分配这么多内存，但是规划器会根据这个值来判断系统能否提供查询执行过程中所需的内存。如果将此设置设得过小，远远小于系统真实可用内存量，那么可能会给规划器造成误导，让规划器认为系统可用内存有限，从而选择不使用索引而是走全表扫描（因为使用索引虽然速度快，但需要占用更多的中间内存）。</p><p>在一台专用于运行PostgreSQL数据库服务的服务器上，建议将effective_cache_size的值设为系统总内存的一半或者更多。</p><p>此设置可动态生效，执行重新加载即可。</p><p>（3）work_mem</p><p>此设置指定了用于执行排序，哈希关联，表扫描等操作的最大内存量。</p><p>此设置可动态生效，执行重新加载即可。</p><p>   （4）mintenance_work_mem</p><p>​     此设置指定可用于vaccum操作（即清空已标记为“被删除”状态的记录）这类系统内部维护操作的内存总量。</p><p>​     其值不应大于1GB</p><p>此设置可动态生效，执行重新加载即可。</p><p>3.5修改参数命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Alter system <span class="built_in">set</span> work_mem=8192;</span><br></pre></td></tr></table></figure><p>设置重新加载命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select pg_reload_conf();</span><br></pre></td></tr></table></figure><p>3.6、遇到修改了postgresql.conf文件，结果服务器崩溃了这种情况</p><p>定位这种问题最简单的方法是查看日志文件，该文件位于postgresql数据文件夹的根目录或者pg_log子文件夹下。</p><h1 id="4、pg-hba-conf"><a href="#4、pg-hba-conf" class="headerlink" title="4、pg_hba.conf"></a>4、pg_hba.conf</h1><p>cat /var/lib/pgsql/9.6/data/pg_hba.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TYPE  DATABASE        USER            ADDRESS                 METHOD</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># "local" isfor Unix domain socket connections only</span></span><br><span class="line"><span class="built_in">local</span>   all             all                                     peer</span><br><span class="line"><span class="comment"># IPv4 localconnections:</span></span><br><span class="line">host    all             all             0.0.0.0/0               trust</span><br><span class="line"><span class="comment"># IPv6 localconnections:</span></span><br><span class="line">host    all             all             ::1/128                 ident</span><br><span class="line"><span class="comment"># Allow replicationconnections from localhost, by a user with the</span></span><br><span class="line"><span class="comment"># replication privilege.</span></span><br><span class="line"><span class="comment">#local   replication     postgres                                peer</span></span><br><span class="line"><span class="comment">#host    replication     postgres        127.0.0.1/32            ident</span></span><br><span class="line"><span class="comment">#host    replication     postgres        ::1/128                 ident</span></span><br></pre></td></tr></table></figure><p>(1)   身份验证模式，一般以下几种常用选项：ident、trust、md5以及password</p><ol><li>1版本开始引入了peer身份验证模式。</li></ol><p>Ident和peer模式公适用于Linux，Unix和Mac,不适用于windwos</p><p>Reject模式，其作用是拒绝所有请求。</p><p>(2)   如果你将+0.0.0./0 reject+规则放到+127.0.0.1/32 trust+的前面，那么此时本地用户全都无法连接，即使下面有规则允许也不行。</p><p>（3）各模式</p><p>trust最不安全的身份验证模式，该模式允许用户“自证清白”，即可以不用密码就连到数据库</p><p>md5该模式最常用，要求连接发起者携带用md5算法加密的密码</p><p>password 不推荐，因为该模式使用明文密码进行身份验证，不安全</p><p>ident：该身份验证模式下，系统会将请求发起的操作系统用户映射为PostgreSQL数据库内部用户，并以该内部用户的权限登录，且此时无需提供登录密码。操作系统用户与数据库内部用户之间的映射关系会记录在pg_ident.conf文件中。</p><p>peer使用发起端的操作系统名进行身份验证</p><h1 id="5、配置文件的重新加载"><a href="#5、配置文件的重新加载" class="headerlink" title="5、配置文件的重新加载"></a>5、配置文件的重新加载</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/pgsql-9.6/bin/pg_ctlreload -D /var/lib/pgsql/9.6/data/ </span><br><span class="line">systemctlreload postgresql-9.6.service </span><br><span class="line">selectpg_reload_conf();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、配置文件&quot;&gt;&lt;a href=&quot;#1、配置文件&quot; class=&quot;headerlink&quot; title=&quot;1、配置文件&quot;&gt;&lt;/a&gt;1、配置文件&lt;/h1&gt;&lt;p&gt;配置文件控制着一个PostgreSQL服务器实例的基本行为，主要包含postgresql.conf、pg_h
      
    
    </summary>
    
    
      <category term="postgresql" scheme="http://wumuwumu.github.io/tags/postgresql/"/>
    
  </entry>
  
  <entry>
    <title>postgresql安装</title>
    <link href="http://wumuwumu.github.io/2019/12/09/postgresql/postgresql%E5%AE%89%E8%A3%85/"/>
    <id>http://wumuwumu.github.io/2019/12/09/postgresql/postgresql安装/</id>
    <published>2019-12-09T07:53:51.000Z</published>
    <updated>2020-09-16T10:36:17.280Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install the repository RPM:</span></span><br><span class="line">dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable the built-in PostgreSQL module:</span></span><br><span class="line">dnf -qy module <span class="built_in">disable</span> postgresql</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install PostgreSQL:</span></span><br><span class="line">dnf install -y postgresql12-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># Optionally initialize the database and enable automatic start:</span></span><br><span class="line">/usr/pgsql-12/bin/postgresql-12-setup initdb</span><br><span class="line">systemctl <span class="built_in">enable</span> postgresql-12</span><br><span class="line">systemctl start postgresql-12</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
  </entry>
  
</feed>
