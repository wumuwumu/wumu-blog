<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wumu&#39;s blog</title>
  
  <subtitle>wumu的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wumuwumu.github.io/"/>
  <updated>2019-11-16T07:40:42.036Z</updated>
  <id>http://wumuwumu.github.io/</id>
  
  <author>
    <name>wumu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>odoo源码解析4-wsgi_server</title>
    <link href="http://wumuwumu.github.io/2019/11/16/odoo/odoo%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%904-wsgi-server/"/>
    <id>http://wumuwumu.github.io/2019/11/16/odoo/odoo源码解析4-wsgi-server/</id>
    <published>2019-11-16T07:35:05.000Z</published>
    <updated>2019-11-16T07:40:42.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="application"><a href="#application" class="headerlink" title="application"></a>application</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    <span class="comment">## 是否启动代理</span></span><br><span class="line">    <span class="comment"># <span class="doctag">FIXME:</span> is checking for the presence of HTTP_X_FORWARDED_HOST really useful?</span></span><br><span class="line">    <span class="comment">#        we're ignoring the user configuration, and that means we won't</span></span><br><span class="line">    <span class="comment">#        support the standardised Forwarded header once werkzeug supports</span></span><br><span class="line">    <span class="comment">#        it</span></span><br><span class="line">    <span class="keyword">if</span> config[<span class="string">'proxy_mode'</span>] <span class="keyword">and</span> <span class="string">'HTTP_X_FORWARDED_HOST'</span> <span class="keyword">in</span> environ:</span><br><span class="line">        <span class="keyword">return</span> ProxyFix(application_unproxied)(environ, start_response)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> application_unproxied(environ, start_response)</span><br></pre></td></tr></table></figure><h1 id="application-unproxied"><a href="#application-unproxied" class="headerlink" title="application_unproxied"></a>application_unproxied</h1><p>清除数据库和用户的追踪<br>清除动作在application方法的结尾不能完成，因为werkzeu在后面还会生成有关的日志。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application_unproxied</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    <span class="string">""" WSGI entry point."""</span></span><br><span class="line">    <span class="comment"># cleanup db/uid trackers - they're set at HTTP dispatch in</span></span><br><span class="line">    <span class="comment"># web.session.OpenERPSession.send() and at RPC dispatch in</span></span><br><span class="line">    <span class="comment"># odoo.service.web_services.objects_proxy.dispatch().</span></span><br><span class="line">    <span class="comment"># /!\ The cleanup cannot be done at the end of this `application`</span></span><br><span class="line">    <span class="comment"># method because werkzeug still produces relevant logging afterwards</span></span><br><span class="line">    <span class="keyword">if</span> hasattr(threading.current_thread(), <span class="string">'uid'</span>):</span><br><span class="line">        <span class="keyword">del</span> threading.current_thread().uid</span><br><span class="line">    <span class="keyword">if</span> hasattr(threading.current_thread(), <span class="string">'dbname'</span>):</span><br><span class="line">        <span class="keyword">del</span> threading.current_thread().dbname</span><br><span class="line">    <span class="keyword">if</span> hasattr(threading.current_thread(), <span class="string">'url'</span>):</span><br><span class="line">        <span class="keyword">del</span> threading.current_thread().url</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> odoo.api.Environment.manage():</span><br><span class="line">        result = odoo.http.root(environ, start_response)</span><br><span class="line">        <span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="comment"># We never returned from the loop.</span></span><br><span class="line">    <span class="keyword">return</span> werkzeug.exceptions.NotFound(<span class="string">"No handler found.\n"</span>)(environ, start_response)</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://blog.csdn.net/weixin_35737303/article/details/79038982" target="_blank" rel="noopener">https://blog.csdn.net/weixin_35737303/article/details/79038982</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;application&quot;&gt;&lt;a href=&quot;#application&quot; class=&quot;headerlink&quot; title=&quot;application&quot;&gt;&lt;/a&gt;application&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;tab
      
    
    </summary>
    
    
      <category term="odoo" scheme="http://wumuwumu.github.io/tags/odoo/"/>
    
  </entry>
  
  <entry>
    <title>odoo源码解析-启动web服务器</title>
    <link href="http://wumuwumu.github.io/2019/11/16/odoo/odoo%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%903-%E5%90%AF%E5%8A%A8web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://wumuwumu.github.io/2019/11/16/odoo/odoo源码解析3-启动web服务器/</id>
    <published>2019-11-16T06:41:42.000Z</published>
    <updated>2019-11-16T07:32:09.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(preload=None, stop=False)</span>:</span></span><br><span class="line">    <span class="string">""" Start the odoo http server and cron processor.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">global</span> server</span><br><span class="line"><span class="comment">## 这里加载两个模块web和web_kan，在这里加载模块才能够在用户没有登录的时候才能够访问路由</span></span><br><span class="line">    load_server_wide_modules()</span><br><span class="line">    odoo.service.wsgi_server._patch_xmlrpc_marshaller()</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    ·GeventServer</span></span><br><span class="line"><span class="string">    ·PreforkServer</span></span><br><span class="line"><span class="string">    ·ThreadedServer(默认)</span></span><br><span class="line"><span class="string">    CommonServer是后面三个类的父类</span></span><br><span class="line"><span class="string">Odoo服务器通过ThreadedServer.run()运行</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> odoo.evented:</span><br><span class="line">        server = GeventServer(odoo.service.wsgi_server.application)</span><br><span class="line">    <span class="keyword">elif</span> config[<span class="string">'workers'</span>]:</span><br><span class="line">        <span class="keyword">if</span> config[<span class="string">'test_enable'</span>] <span class="keyword">or</span> config[<span class="string">'test_file'</span>]:</span><br><span class="line">            _logger.warning(<span class="string">"Unit testing in workers mode could fail; use --workers 0."</span>)</span><br><span class="line"></span><br><span class="line">        server = PreforkServer(odoo.service.wsgi_server.application)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Workaround for Python issue24291, fixed in 3.6 (see Python issue26721)</span></span><br><span class="line">        <span class="keyword">if</span> sys.version_info[:<span class="number">2</span>] == (<span class="number">3</span>,<span class="number">5</span>):</span><br><span class="line">            <span class="comment"># turn on buffering also for wfile, to avoid partial writes (Default buffer = 8k)</span></span><br><span class="line">            werkzeug.serving.WSGIRequestHandler.wbufsize = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        server = ThreadedServer(odoo.service.wsgi_server.application)</span><br><span class="line"></span><br><span class="line">    watcher = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'reload'</span> <span class="keyword">in</span> config[<span class="string">'dev_mode'</span>] <span class="keyword">and</span> <span class="keyword">not</span> odoo.evented:</span><br><span class="line">        <span class="keyword">if</span> inotify:</span><br><span class="line">            watcher = FSWatcherInotify()</span><br><span class="line">            watcher.start()</span><br><span class="line">        <span class="keyword">elif</span> watchdog:</span><br><span class="line">            watcher = FSWatcherWatchdog()</span><br><span class="line">            watcher.start()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> os.name == <span class="string">'posix'</span> <span class="keyword">and</span> platform.system() != <span class="string">'Darwin'</span>:</span><br><span class="line">                module = <span class="string">'inotify'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                module = <span class="string">'watchdog'</span></span><br><span class="line">            _logger.warning(<span class="string">"'%s' module not installed. Code autoreload feature is disabled"</span>, module)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'werkzeug'</span> <span class="keyword">in</span> config[<span class="string">'dev_mode'</span>]:</span><br><span class="line">        server.app = DebuggedApplication(server.app, evalex=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">##  启动web服务器</span></span><br><span class="line">    rc = server.run(preload, stop)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> watcher:</span><br><span class="line">        watcher.stop()</span><br><span class="line">    <span class="comment"># like the legend of the phoenix, all ends with beginnings</span></span><br><span class="line">    <span class="keyword">if</span> getattr(odoo, <span class="string">'phoenix'</span>, <span class="keyword">False</span>):</span><br><span class="line">        _reexec()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rc <span class="keyword">if</span> rc <span class="keyword">else</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="ThreadedServer-CommandServer"><a href="#ThreadedServer-CommandServer" class="headerlink" title="ThreadedServer(CommandServer)"></a>ThreadedServer(CommandServer)</h1><h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""" Start the http server and the cron thread then wait for a signal.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The first SIGINT or SIGTERM signal will initiate a graceful shutdown while</span></span><br><span class="line"><span class="string">        a second one if any will force an immediate exit.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"><span class="comment">## 启动一个系统命令监测。。。</span></span><br><span class="line">self.start(stop=stop)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装、更新、加载模块</span></span><br><span class="line">rc = preload_registries(preload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> stop:</span><br><span class="line">    self.stop()</span><br><span class="line">    <span class="keyword">return</span> rc</span><br><span class="line"></span><br><span class="line"><span class="comment">## 加载定时任务</span></span><br><span class="line">self.cron_spawn()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Wait for a first signal to be handled. (time.sleep will be interrupted</span></span><br><span class="line"><span class="comment"># by the signal handler)</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> self.quit_signals_received == <span class="number">0</span>:</span><br><span class="line">        self.process_limit()</span><br><span class="line">        <span class="keyword">if</span> self.limit_reached_time:</span><br><span class="line">            has_other_valid_requests = any(</span><br><span class="line">                <span class="keyword">not</span> t.daemon <span class="keyword">and</span></span><br><span class="line">                t <span class="keyword">not</span> <span class="keyword">in</span> self.limits_reached_threads</span><br><span class="line">                <span class="keyword">for</span> t <span class="keyword">in</span> threading.enumerate()</span><br><span class="line">                <span class="keyword">if</span> getattr(t, <span class="string">'type'</span>, <span class="keyword">None</span>) == <span class="string">'http'</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">not</span> has_other_valid_requests <span class="keyword">or</span></span><br><span class="line">                (time.time() - self.limit_reached_time) &gt; SLEEP_INTERVAL):</span><br><span class="line">                <span class="comment"># We wait there is no processing requests</span></span><br><span class="line">                <span class="comment"># other than the ones exceeding the limits, up to 1 min,</span></span><br><span class="line">                <span class="comment"># before asking for a reload.</span></span><br><span class="line">                _logger.info(<span class="string">'Dumping stacktrace of limit exceeding threads before reloading'</span>)</span><br><span class="line">                dumpstacks(thread_idents=[thread.ident <span class="keyword">for</span> thread <span class="keyword">in</span> self.limits_reached_threads])</span><br><span class="line">                self.reload()</span><br><span class="line">                <span class="comment"># `reload` increments `self.quit_signals_received`</span></span><br><span class="line">                <span class="comment"># and the loop will end after this iteration,</span></span><br><span class="line">                <span class="comment"># therefore leading to the server stop.</span></span><br><span class="line">                <span class="comment"># `reload` also sets the `phoenix` flag</span></span><br><span class="line">                <span class="comment"># to tell the server to restart the server after shutting down.</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    time.sleep(<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        time.sleep(SLEEP_INTERVAL)</span><br><span class="line">                        <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">                        self.stop()</span><br></pre></td></tr></table></figure><h2 id="start"><a href="#start" class="headerlink" title="start"></a>start</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self, stop=False)</span>:</span></span><br><span class="line">    _logger.debug(<span class="string">"Setting signal handlers"</span>)</span><br><span class="line">    set_limit_memory_hard()</span><br><span class="line">    <span class="keyword">if</span> os.name == <span class="string">'posix'</span>:</span><br><span class="line">        signal.signal(signal.SIGINT, self.signal_handler)</span><br><span class="line">        signal.signal(signal.SIGTERM, self.signal_handler)</span><br><span class="line">        signal.signal(signal.SIGCHLD, self.signal_handler)</span><br><span class="line">        signal.signal(signal.SIGHUP, self.signal_handler)</span><br><span class="line">        signal.signal(signal.SIGXCPU, self.signal_handler)</span><br><span class="line">        signal.signal(signal.SIGQUIT, dumpstacks)</span><br><span class="line">        signal.signal(signal.SIGUSR1, log_ormcache_stats)</span><br><span class="line">        <span class="keyword">elif</span> os.name == <span class="string">'nt'</span>:</span><br><span class="line">            <span class="keyword">import</span> win32api</span><br><span class="line">            win32api.SetConsoleCtrlHandler(<span class="keyword">lambda</span> sig: self.signal_handler(sig, <span class="keyword">None</span>), <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            test_mode = config[<span class="string">'test_enable'</span>] <span class="keyword">or</span> config[<span class="string">'test_file'</span>]</span><br><span class="line">            <span class="keyword">if</span> test_mode <span class="keyword">or</span> (config[<span class="string">'http_enable'</span>] <span class="keyword">and</span> <span class="keyword">not</span> stop):</span><br><span class="line">                <span class="comment"># some tests need the http deamon to be available...</span></span><br><span class="line">                self.http_spawn()</span><br></pre></td></tr></table></figure><h1 id="ThreadedWSGIServerReloadable"><a href="#ThreadedWSGIServerReloadable" class="headerlink" title="ThreadedWSGIServerReloadable"></a>ThreadedWSGIServerReloadable</h1><p>这个服务可以不启动也能够运行程序。他的作用是debug保持端口是开启的。</p><p>Werkzeug是Python的WSGI规范的实现函数库。基于BSD协议。<br>WSGI(Web Server Gateway Interface)<br>WSGI服务允许重用环境提供的监听套接字，它通过自动重加载使用，用于保持当有重加载的时候监听套接字是打开状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadedWSGIServerReloadable</span><span class="params">(LoggingBaseWSGIServerMixIn, werkzeug.serving.ThreadedWSGIServer)</span>:</span></span><br><span class="line">    <span class="string">""" werkzeug Threaded WSGI Server patched to allow reusing a listen socket</span></span><br><span class="line"><span class="string">    given by the environement, this is used by autoreload to keep the listen</span></span><br><span class="line"><span class="string">    socket open when a reload happens.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, host, port, app)</span>:</span></span><br><span class="line">        super(ThreadedWSGIServerReloadable, self).__init__(host, port, app,</span><br><span class="line">                                                           handler=RequestHandler)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># See https://github.com/pallets/werkzeug/pull/770</span></span><br><span class="line">        <span class="comment"># This allow the request threads to not be set as daemon</span></span><br><span class="line">        <span class="comment"># so the server waits for them when shutting down gracefully.</span></span><br><span class="line">        self.daemon_threads = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">server_bind</span><span class="params">(self)</span>:</span></span><br><span class="line">        SD_LISTEN_FDS_START = <span class="number">3</span></span><br><span class="line">        <span class="keyword">if</span> os.environ.get(<span class="string">'LISTEN_FDS'</span>) == <span class="string">'1'</span> <span class="keyword">and</span> os.environ.get(<span class="string">'LISTEN_PID'</span>) == str(os.getpid()):</span><br><span class="line">            self.reload_socket = <span class="keyword">True</span></span><br><span class="line">            self.socket = socket.fromfd(SD_LISTEN_FDS_START, socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">            _logger.info(<span class="string">'HTTP service (werkzeug) running through socket activation'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.reload_socket = <span class="keyword">False</span></span><br><span class="line">            super(ThreadedWSGIServerReloadable, self).server_bind()</span><br><span class="line">            _logger.info(<span class="string">'HTTP service (werkzeug) running on %s:%s'</span>, self.server_name, self.server_port)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">server_activate</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.reload_socket:</span><br><span class="line">            super(ThreadedWSGIServerReloadable, self).server_activate()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, client_address)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Start a new thread to process the request.</span></span><br><span class="line"><span class="string">        Override the default method of class socketserver.ThreadingMixIn</span></span><br><span class="line"><span class="string">        to be able to get the thread object which is instantiated</span></span><br><span class="line"><span class="string">        and set its start time as an attribute</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        t = threading.Thread(target = self.process_request_thread,</span><br><span class="line">                             args = (request, client_address))</span><br><span class="line">        t.daemon = self.daemon_threads</span><br><span class="line">        t.type = <span class="string">'http'</span></span><br><span class="line">        t.start_time = time.time()</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> Remove this method as soon as either of the revision</span></span><br><span class="line">    <span class="comment"># - python/cpython@8b1f52b5a93403acd7d112cd1c1bc716b31a418a for Python 3.6,</span></span><br><span class="line">    <span class="comment"># - python/cpython@908082451382b8b3ba09ebba638db660edbf5d8e for Python 3.7,</span></span><br><span class="line">    <span class="comment"># is included in all Python 3 releases installed on all operating systems supported by Odoo.</span></span><br><span class="line">    <span class="comment"># These revisions are included in Python from releases 3.6.8 and Python 3.7.2 respectively.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_handle_request_noblock</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        In the python module `socketserver` `process_request` loop,</span></span><br><span class="line"><span class="string">        the __shutdown_request flag is not checked between select and accept.</span></span><br><span class="line"><span class="string">        Thus when we set it to `True` thanks to the call `httpd.shutdown`,</span></span><br><span class="line"><span class="string">        a last request is accepted before exiting the loop.</span></span><br><span class="line"><span class="string">        We override this function to add an additional check before the accept().</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self._BaseServer__shutdown_request:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        super(ThreadedWSGIServerReloadable, self)._handle_request_noblock()</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://blog.csdn.net/weixin_35737303/article/details/79038879" target="_blank" rel="noopener">https://blog.csdn.net/weixin_35737303/article/details/79038879</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;启动&quot;&gt;&lt;a href=&quot;#启动&quot; class=&quot;headerlink&quot; title=&quot;启动&quot;&gt;&lt;/a&gt;启动&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
    
      <category term="odoo" scheme="http://wumuwumu.github.io/tags/odoo/"/>
    
  </entry>
  
  <entry>
    <title>hibernate使用hbm2ddl.auto=在生产环境更新.md</title>
    <link href="http://wumuwumu.github.io/2019/11/16/java/hibernate%E4%BD%BF%E7%94%A8hbm2ddl.auto=%E5%9C%A8%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E6%9B%B4%E6%96%B0/"/>
    <id>http://wumuwumu.github.io/2019/11/16/java/hibernate使用hbm2ddl.auto=在生产环境更新/</id>
    <published>2019-11-16T06:22:56.000Z</published>
    <updated>2019-11-16T06:24:51.013Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.codenong.com/221379/" target="_blank" rel="noopener">https://www.codenong.com/221379/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.codenong.com/221379/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.codenong.com/221379/&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="java" scheme="http://wumuwumu.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>odoo源码解析2-server命令</title>
    <link href="http://wumuwumu.github.io/2019/11/16/odoo/odoo%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%902-server%E5%91%BD%E4%BB%A4/"/>
    <id>http://wumuwumu.github.io/2019/11/16/odoo/odoo源码解析2-server命令/</id>
    <published>2019-11-16T03:40:07.000Z</published>
    <updated>2019-11-16T06:41:19.352Z</updated>
    
    <content type="html"><![CDATA[<p>默认情况下的启动命令的server，这个是将odoo运行起来的命令。核心代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 判断是否为root用户，如果为root用户就发送警告</span></span><br><span class="line">check_root_user() </span><br><span class="line"><span class="comment">## 解析命令行参数</span></span><br><span class="line">odoo.tools.config.parse_config(args)</span><br><span class="line"><span class="comment">## 如果为postgres用户就停止运行</span></span><br><span class="line">check_postgres_user()</span><br><span class="line">report_configuration()</span><br><span class="line"></span><br><span class="line">config = odoo.tools.config</span><br><span class="line"></span><br><span class="line"><span class="comment"># the default limit for CSV fields in the module is 128KiB, which is not</span></span><br><span class="line"><span class="comment"># quite sufficient to import images to store in attachment. 500MiB is a</span></span><br><span class="line"><span class="comment"># bit overkill, but better safe than sorry I guess</span></span><br><span class="line">csv.field_size_limit(<span class="number">500</span> * <span class="number">1024</span> * <span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建加载的数据库</span></span><br><span class="line">preload = []</span><br><span class="line"><span class="keyword">if</span> config[<span class="string">'db_name'</span>]:</span><br><span class="line">    preload = config[<span class="string">'db_name'</span>].split(<span class="string">','</span>)</span><br><span class="line">    <span class="keyword">for</span> db_name <span class="keyword">in</span> preload:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            odoo.service.db._create_empty_database(db_name)</span><br><span class="line">            config[<span class="string">'init'</span>][<span class="string">'base'</span>] = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">except</span> ProgrammingError <span class="keyword">as</span> err:</span><br><span class="line">            <span class="keyword">if</span> err.pgcode == errorcodes.INSUFFICIENT_PRIVILEGE:</span><br><span class="line">                <span class="comment"># We use an INFO loglevel on purpose in order to avoid</span></span><br><span class="line">                <span class="comment"># reporting unnecessary warnings on build environment</span></span><br><span class="line">                <span class="comment"># using restricted database access.</span></span><br><span class="line">                _logger.info(<span class="string">"Could not determine if database %s exists, "</span></span><br><span class="line">                             <span class="string">"skipping auto-creation: %s"</span>, db_name, err)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> err</span><br><span class="line">        <span class="keyword">except</span> odoo.service.db.DatabaseExists:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> config[<span class="string">"translate_out"</span>]:</span><br><span class="line">    export_translation()</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> config[<span class="string">"translate_in"</span>]:</span><br><span class="line">    import_translation()</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># This needs to be done now to ensure the use of the multiprocessing</span></span><br><span class="line"><span class="comment"># signaling mecanism for registries loaded with -d</span></span><br><span class="line"><span class="keyword">if</span> config[<span class="string">'workers'</span>]:</span><br><span class="line">    odoo.multi_process = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 是否在启动服务后停止，用户创建更新数据库</span></span><br><span class="line">stop = config[<span class="string">"stop_after_init"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置pid文件</span></span><br><span class="line">setup_pid_file()</span><br><span class="line"><span class="comment">## 启动server</span></span><br><span class="line">rc = odoo.service.server.start(preload=preload, stop=stop)</span><br><span class="line">sys.exit(rc)</span><br></pre></td></tr></table></figure><p>参考</p><blockquote><p><a href="https://blog.csdn.net/weixin_35737303/article/details/79038671" target="_blank" rel="noopener">https://blog.csdn.net/weixin_35737303/article/details/79038671</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;默认情况下的启动命令的server，这个是将odoo运行起来的命令。核心代码如下&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/sp
      
    
    </summary>
    
    
      <category term="odoo" scheme="http://wumuwumu.github.io/tags/odoo/"/>
    
  </entry>
  
  <entry>
    <title>odoo模块加载机制</title>
    <link href="http://wumuwumu.github.io/2019/11/08/odoo/odoo%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <id>http://wumuwumu.github.io/2019/11/08/odoo/odoo模块加载机制/</id>
    <published>2019-11-08T12:36:34.000Z</published>
    <updated>2019-11-08T12:41:43.709Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Odoo的启动通过openerp-server脚本完成，它是系统的入口。</strong></p><p><strong>然后加载配置文件openerp-server.conf 或者 openerp_serverrc；</strong></p><p>openerp-server.conf的主要内容：</p><p>这个文件缺省是没有的，Odoo系统会有一个默认值，但是一般情况我们都需配置这个文件。</p><p>启动http服务器，监听端口。</p><p><strong>模块加载：</strong></p><p>模块加载外层就是封装一个Registry(Mapping)对象:实际是一个字典，它包含对应的db，model等映射关系，一个DB对应一个Registry。后续的操作都会围绕这个Registry进行，将相关的数据赋值给相应的属性项。</p><h2 id="初始化数据库（初次运行"><a href="#初始化数据库（初次运行" class="headerlink" title="初始化数据库（初次运行)"></a>初始化数据库（初次运行)</h2><p><strong>1)加载base模块下的base.sql文件并执行。</strong><br>此时数据库表为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ir_actions (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">serial</span>,</span><br><span class="line">  primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ir_act_window (primary <span class="keyword">key</span>(<span class="keyword">id</span>)) INHERITS (ir_actions);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ir_act_report_xml (primary <span class="keyword">key</span>(<span class="keyword">id</span>)) INHERITS (ir_actions);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ir_act_url (primary <span class="keyword">key</span>(<span class="keyword">id</span>)) INHERITS (ir_actions);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ir_act_server (primary <span class="keyword">key</span>(<span class="keyword">id</span>)) INHERITS (ir_actions);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ir_act_client (primary <span class="keyword">key</span>(<span class="keyword">id</span>)) INHERITS (ir_actions);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ir_model (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">serial</span>,</span><br><span class="line">  <span class="keyword">model</span> <span class="built_in">varchar</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>,</span><br><span class="line">  state <span class="built_in">varchar</span>,</span><br><span class="line">  info <span class="built_in">text</span>,</span><br><span class="line">  primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ir_model_fields (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">serial</span>,</span><br><span class="line">  <span class="keyword">model</span> <span class="built_in">varchar</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  model_id <span class="built_in">integer</span> <span class="keyword">references</span> ir_model <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  relation <span class="built_in">varchar</span>,</span><br><span class="line">  select_level <span class="built_in">varchar</span>,</span><br><span class="line">  field_description <span class="built_in">varchar</span>,</span><br><span class="line">  ttype <span class="built_in">varchar</span>,</span><br><span class="line">  state <span class="built_in">varchar</span> <span class="keyword">default</span> <span class="string">'base'</span>,</span><br><span class="line">  relation_field <span class="built_in">varchar</span>,</span><br><span class="line">  <span class="keyword">translate</span> <span class="built_in">boolean</span> <span class="keyword">default</span> <span class="literal">False</span>,</span><br><span class="line">  serialization_field_id <span class="built_in">integer</span> <span class="keyword">references</span> ir_model_fields <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>, </span><br><span class="line">  primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> res_lang (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">serial</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">    code <span class="built_in">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> res_users (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">serial</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    active <span class="built_in">boolean</span> <span class="keyword">default</span> <span class="literal">True</span>,</span><br><span class="line">    login <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">    <span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">-- No FK references below, will be added later by ORM</span></span><br><span class="line">    <span class="comment">-- (when the destination rows exist)</span></span><br><span class="line">    company_id <span class="built_in">integer</span>, <span class="comment">-- references res_company,</span></span><br><span class="line">    partner_id <span class="built_in">integer</span>, <span class="comment">-- references res_partner,</span></span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> wkf (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">serial</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">64</span>),</span><br><span class="line">    osv <span class="built_in">varchar</span>(<span class="number">64</span>),</span><br><span class="line">    on_create <span class="built_in">bool</span> <span class="keyword">default</span> <span class="literal">false</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ir_module_category (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">serial</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    create_uid <span class="built_in">integer</span>, <span class="comment">-- references res_users on delete set null,</span></span><br><span class="line">    create_date <span class="built_in">timestamp</span> <span class="keyword">without</span> <span class="built_in">time</span> zone,</span><br><span class="line">    write_date <span class="built_in">timestamp</span> <span class="keyword">without</span> <span class="built_in">time</span> zone,</span><br><span class="line">    write_uid <span class="built_in">integer</span>, <span class="comment">-- references res_users on delete set null,</span></span><br><span class="line">    parent_id <span class="built_in">integer</span> <span class="keyword">REFERENCES</span> ir_module_category <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">SET</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">character</span> <span class="built_in">varying</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ir_module_module (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">serial</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    create_uid <span class="built_in">integer</span>, <span class="comment">-- references res_users on delete set null,</span></span><br><span class="line">    create_date <span class="built_in">timestamp</span> <span class="keyword">without</span> <span class="built_in">time</span> zone,</span><br><span class="line">    write_date <span class="built_in">timestamp</span> <span class="keyword">without</span> <span class="built_in">time</span> zone,</span><br><span class="line">    write_uid <span class="built_in">integer</span>, <span class="comment">-- references res_users on delete set null,</span></span><br><span class="line">    website <span class="built_in">character</span> <span class="built_in">varying</span>(<span class="number">256</span>),</span><br><span class="line">    summary <span class="built_in">character</span> <span class="built_in">varying</span>(<span class="number">256</span>),</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">character</span> <span class="built_in">varying</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    author <span class="built_in">character</span> <span class="built_in">varying</span>(<span class="number">128</span>),</span><br><span class="line">    icon <span class="built_in">varchar</span>,</span><br><span class="line">    state <span class="built_in">character</span> <span class="built_in">varying</span>(<span class="number">16</span>),</span><br><span class="line">    latest_version <span class="built_in">character</span> <span class="built_in">varying</span>(<span class="number">64</span>),</span><br><span class="line">    shortdesc <span class="built_in">character</span> <span class="built_in">varying</span>(<span class="number">256</span>),</span><br><span class="line">    category_id <span class="built_in">integer</span> <span class="keyword">REFERENCES</span> ir_module_category <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">SET</span> <span class="literal">NULL</span>,</span><br><span class="line">    description <span class="built_in">text</span>,</span><br><span class="line">    application <span class="built_in">boolean</span> <span class="keyword">default</span> <span class="literal">False</span>,</span><br><span class="line">    demo <span class="built_in">boolean</span> <span class="keyword">default</span> <span class="literal">False</span>,</span><br><span class="line">    web <span class="built_in">boolean</span> <span class="keyword">DEFAULT</span> <span class="literal">FALSE</span>,</span><br><span class="line">    license <span class="built_in">character</span> <span class="built_in">varying</span>(<span class="number">32</span>),</span><br><span class="line">    <span class="keyword">sequence</span> <span class="built_in">integer</span> <span class="keyword">DEFAULT</span> <span class="number">100</span>,</span><br><span class="line">    auto_install <span class="built_in">boolean</span> <span class="keyword">default</span> <span class="literal">False</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> ir_module_module <span class="keyword">add</span> <span class="keyword">constraint</span> name_uniq <span class="keyword">unique</span> (<span class="keyword">name</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ir_module_module_dependency (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">serial</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    create_uid <span class="built_in">integer</span>, <span class="comment">-- references res_users on delete set null,</span></span><br><span class="line">    create_date <span class="built_in">timestamp</span> <span class="keyword">without</span> <span class="built_in">time</span> zone,</span><br><span class="line">    write_date <span class="built_in">timestamp</span> <span class="keyword">without</span> <span class="built_in">time</span> zone,</span><br><span class="line">    write_uid <span class="built_in">integer</span>, <span class="comment">-- references res_users on delete set null,</span></span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">character</span> <span class="built_in">varying</span>(<span class="number">128</span>),</span><br><span class="line">    module_id <span class="built_in">integer</span> <span class="keyword">REFERENCES</span> ir_module_module <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">cascade</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ir_model_data (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">serial</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    create_uid <span class="built_in">integer</span>,</span><br><span class="line">    create_date <span class="built_in">timestamp</span> <span class="keyword">without</span> <span class="built_in">time</span> zone,</span><br><span class="line">    write_date <span class="built_in">timestamp</span> <span class="keyword">without</span> <span class="built_in">time</span> zone,</span><br><span class="line">    write_uid <span class="built_in">integer</span>,</span><br><span class="line">    noupdate <span class="built_in">boolean</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    date_init <span class="built_in">timestamp</span> <span class="keyword">without</span> <span class="built_in">time</span> zone,</span><br><span class="line">    date_update <span class="built_in">timestamp</span> <span class="keyword">without</span> <span class="built_in">time</span> zone,</span><br><span class="line">    <span class="keyword">module</span> <span class="built_in">varchar</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">model</span> <span class="built_in">varchar</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    res_id <span class="built_in">integer</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Records foreign keys and constraints installed by a module (so they can be</span></span><br><span class="line"><span class="comment">-- removed when the module is uninstalled):</span></span><br><span class="line"><span class="comment">--   - for a foreign key: type is 'f',</span></span><br><span class="line"><span class="comment">--   - for a constraint: type is 'u' (this is the convention PostgreSQL uses).</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ir_model_constraint (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">serial</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    date_init <span class="built_in">timestamp</span> <span class="keyword">without</span> <span class="built_in">time</span> zone,</span><br><span class="line">    date_update <span class="built_in">timestamp</span> <span class="keyword">without</span> <span class="built_in">time</span> zone,</span><br><span class="line">    <span class="keyword">module</span> <span class="built_in">integer</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">references</span> ir_module_module <span class="keyword">on</span> <span class="keyword">delete</span> restrict,</span><br><span class="line">    <span class="keyword">model</span> <span class="built_in">integer</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">references</span> ir_model <span class="keyword">on</span> <span class="keyword">delete</span> restrict,</span><br><span class="line">    <span class="keyword">type</span> <span class="built_in">character</span> <span class="built_in">varying</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Records relation tables (i.e. implementing many2many) installed by a module</span></span><br><span class="line"><span class="comment">-- (so they can be removed when the module is uninstalled).</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ir_model_relation (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">serial</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    date_init <span class="built_in">timestamp</span> <span class="keyword">without</span> <span class="built_in">time</span> zone,</span><br><span class="line">    date_update <span class="built_in">timestamp</span> <span class="keyword">without</span> <span class="built_in">time</span> zone,</span><br><span class="line">    <span class="keyword">module</span> <span class="built_in">integer</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">references</span> ir_module_module <span class="keyword">on</span> <span class="keyword">delete</span> restrict,</span><br><span class="line">    <span class="keyword">model</span> <span class="built_in">integer</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">references</span> ir_model <span class="keyword">on</span> <span class="keyword">delete</span> restrict,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> res_currency (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">serial</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> res_company (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">serial</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    partner_id <span class="built_in">integer</span>,</span><br><span class="line">    currency_id <span class="built_in">integer</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> res_partner (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">serial</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>,</span><br><span class="line">    company_id <span class="built_in">integer</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这20张表是odoo系统级的，它是模块加载及系统运行的基础。后续模块生成的表及相关数据都可以在这20张中找到蛛丝马迹。</p><h2 id="数据库表初始化后，就可以加载模块数据（addons）到数据库了，这个也是odoo作为平台灵活的原因，所有的数据都在数据库。"><a href="#数据库表初始化后，就可以加载模块数据（addons）到数据库了，这个也是odoo作为平台灵活的原因，所有的数据都在数据库。" class="headerlink" title="数据库表初始化后，就可以加载模块数据（addons）到数据库了，这个也是odoo作为平台灵活的原因，所有的数据都在数据库。"></a>数据库表初始化后，就可以加载模块数据（addons）到数据库了，这个也是odoo作为平台灵活的原因，所有的数据都在数据库。</h2><p>找到addons-path下所有的模块,然后一个一个的加载到数据库中。<br>Info就是load模块的<strong>openerp</strong>.py文件，它是一个dict。</p><p>根据<strong>openerp</strong>.py中定义的category创建分类信息：<br>将模块信息写入ir_module_module表：<br>将module信息写入ir_model_data表：<br>一个module要写两次ir_model_data表，<br>写module的dependency表：</p><p>根据依赖关系进行判断，递归更新那些需要auto_install的模块状态为“to install”。</p><p>到目前为止，模块的加载都是在数据库级别，只是将“模块文件”信息存入数据库表，但是还没有真正加载到程序中。<br>Odoo运行时查找object是通过Registry.get()获取的，而不是通过python自己的机制来找到相应的object，所以odoo在加载模块时会把模块下包含的model全部注册到models.py的module_to_models字典中。</p><p>**下面的步骤就是加载模块到内存：</p><h2 id="加载base模块"><a href="#加载base模块" class="headerlink" title="加载base模块"></a>加载base模块</h2><p>创建一个包含model层级的节点图，第二行代码将从数据库更新数据到graph中。然后调用load_module_graph方法加载模块，最终执行加载的方法：</p><p>这个方法是odoo加载model的核心，通过 <strong>import</strong>方法加载模块，这个是python的机制，当import到某个继承了BaseModel类的class时，它的实例化将有别于python自身的实例化操作，<br>后者说它根本不会通过python自身的<strong>new</strong>方法创建实例，所有的实例创建都是通过 _build_model 方法及元类创建，并注册到module_to_models中。通过这种方式实例化model就可以解决我们在xml中配置model时指定的继承，字段，约束等各种属性。</p><h2 id="标记需要加载或者更新的模块（db）"><a href="#标记需要加载或者更新的模块（db）" class="headerlink" title="标记需要加载或者更新的模块（db）"></a>标记需要加载或者更新的模块（db）</h2><h2 id="加载被标记的模块（加载过程与加载base模块一致）"><a href="#加载被标记的模块（加载过程与加载base模块一致）" class="headerlink" title="加载被标记的模块（加载过程与加载base模块一致）"></a>加载被标记的模块（加载过程与加载base模块一致）</h2><h2 id="完成及清理安装"><a href="#完成及清理安装" class="headerlink" title="完成及清理安装"></a>完成及清理安装</h2><h2 id="清理菜单"><a href="#清理菜单" class="headerlink" title="清理菜单"></a>清理菜单</h2><h2 id="删除卸载的模块"><a href="#删除卸载的模块" class="headerlink" title="删除卸载的模块"></a>删除卸载的模块</h2><h2 id="核实model的view"><a href="#核实model的view" class="headerlink" title="核实model的view"></a>核实model的view</h2><h2 id="运行post-install测试"><a href="#运行post-install测试" class="headerlink" title="运行post-install测试"></a>运行post-install测试</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Odoo的启动通过openerp-server脚本完成，它是系统的入口。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;然后加载配置文件openerp-server.conf 或者 openerp_serverrc；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ope
      
    
    </summary>
    
    
      <category term="python" scheme="http://wumuwumu.github.io/tags/python/"/>
    
      <category term="odoo" scheme="http://wumuwumu.github.io/tags/odoo/"/>
    
  </entry>
  
  <entry>
    <title>odoo源码解析1-启动命令</title>
    <link href="http://wumuwumu.github.io/2019/11/06/odoo/odoo%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%901-%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://wumuwumu.github.io/2019/11/06/odoo/odoo源码解析1-启动命令/</id>
    <published>2019-11-06T12:01:48.000Z</published>
    <updated>2019-11-06T12:04:30.258Z</updated>
    
    <content type="html"><![CDATA[<h1 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set server timezone in UTC before time module imported</span></span><br><span class="line">__import__(<span class="string">'os'</span>).environ[<span class="string">'TZ'</span>] = <span class="string">'UTC'</span></span><br><span class="line"><span class="keyword">import</span> odoo</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    odoo.cli.main()</span><br></pre></td></tr></table></figure><p>main函数主要是进行一些初始化和启动相关的命令</p><ul><li>解析启动命令的参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    args = sys.argv[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># The only shared option is '--addons-path=' needed to discover additional</span></span><br><span class="line">    <span class="comment"># commands from modules</span></span><br><span class="line">    <span class="keyword">if</span> len(args) &gt; <span class="number">1</span> <span class="keyword">and</span> args[<span class="number">0</span>].startswith(<span class="string">'--addons-path='</span>) <span class="keyword">and</span> <span class="keyword">not</span> args[<span class="number">1</span>].startswith(<span class="string">"-"</span>):</span><br><span class="line">        <span class="comment"># parse only the addons-path, do not setup the logger...</span></span><br><span class="line">        odoo.tools.config._parse_config([args[<span class="number">0</span>]])</span><br><span class="line">        args = args[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Default legacy command</span></span><br><span class="line">    command = <span class="string">"server"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> find a way to properly discover addons subcommands without importing the world</span></span><br><span class="line">    <span class="comment"># Subcommand discovery</span></span><br><span class="line">    <span class="keyword">if</span> len(args) <span class="keyword">and</span> <span class="keyword">not</span> args[<span class="number">0</span>].startswith(<span class="string">"-"</span>):</span><br><span class="line">        logging.disable(logging.CRITICAL)</span><br><span class="line">        <span class="keyword">for</span> module <span class="keyword">in</span> get_modules():</span><br><span class="line">            <span class="keyword">if</span> isdir(joinpath(get_module_path(module), <span class="string">'cli'</span>)):</span><br><span class="line">                __import__(<span class="string">'odoo.addons.'</span> + module)</span><br><span class="line">        logging.disable(logging.NOTSET)</span><br><span class="line">        command = args[<span class="number">0</span>]</span><br><span class="line">        args = args[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> command <span class="keyword">in</span> commands:</span><br><span class="line">        o = commands[command]()</span><br><span class="line">        o.run(args)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sys.exit(<span class="string">'Unknow command %r'</span> % (command,))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;启动命令&quot;&gt;&lt;a href=&quot;#启动命令&quot; class=&quot;headerlink&quot; title=&quot;启动命令&quot;&gt;&lt;/a&gt;启动命令&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
      <category term="python" scheme="http://wumuwumu.github.io/tags/python/"/>
    
      <category term="odoo" scheme="http://wumuwumu.github.io/tags/odoo/"/>
    
  </entry>
  
  <entry>
    <title>pm2学习</title>
    <link href="http://wumuwumu.github.io/2019/11/02/pm2%E5%AD%A6%E4%B9%A0/"/>
    <id>http://wumuwumu.github.io/2019/11/02/pm2学习/</id>
    <published>2019-11-02T02:10:05.000Z</published>
    <updated>2019-11-02T02:45:00.942Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pm2基本命令"><a href="#pm2基本命令" class="headerlink" title="pm2基本命令"></a>pm2基本命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动程序</span></span><br><span class="line">pm2 start app.js</span><br><span class="line">pm2 start npm --name pro -- run dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看程序</span></span><br><span class="line">pm2 start list</span><br><span class="line">pm2 monit</span><br><span class="line">pm2 logs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">pm2 restart all</span><br><span class="line">pm2 reload all</span><br><span class="line">pm2 restartt 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">pm2 stop all</span><br><span class="line">pm2 stop 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀死</span></span><br><span class="line">pm2 delete all</span><br><span class="line">pm2 delete 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群</span></span><br><span class="line">pm2 start app.js -i max <span class="comment"># 根据cpu数目启动线程</span></span><br><span class="line">pm2 start app.js -i 3 <span class="comment"># 启动3个进程</span></span><br><span class="line">pm2 start app.js -x  <span class="comment"># 使用fork模式启动</span></span><br><span class="line">pm2 start app.json</span><br></pre></td></tr></table></figure><h1 id="日志问题"><a href="#日志问题" class="headerlink" title="日志问题"></a>日志问题</h1><p>日志系统对于任意应用而言，通常都是必不可少的一个辅助功能。pm2的相关文件默认存放于$HOME/.pm2/目录下，其日志主要有两类：</p><p>a. pm2自身的日志，存放于$HOME/.pm2/pm2.log；</p><p>b. pm2所管理的应用的日志，存放于$HOME/.pm2/logs/目录下，标准谁出日志存放于${APP_NAME}_out.log，标准错误日志存放于${APP_NAME}_error.log；</p><p>这里之所以把日志单独说明一下是因为，如果程序开发不严谨，为了调试程序，导致应用产生大量标准输出，使服务器本身记录大量的日志，导致服务磁盘满载问题。一般而言，pm2管理的应用本身都有自己日志系统，所以对于这种不必要的输出内容需禁用日志，重定向到/dev/null。</p><p>与crontab比较，也有类似情况，crontab自身日志，与其管理的应用本身的输出。应用脚本输出一定需要重定向到/dev/null，因为该输出内容会以邮件的形式发送给用户，内容存储在邮件文件，会产生意向不到的结果，或会导致脚本压根不被执行；</p><h1 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pm2 startup</span><br><span class="line">systemctl <span class="built_in">enable</span> pm2-root</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://pm2.keymetrics.io/docs/usage/monitoring/" target="_blank" rel="noopener">https://pm2.keymetrics.io/docs/usage/monitoring/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pm2基本命令&quot;&gt;&lt;a href=&quot;#pm2基本命令&quot; class=&quot;headerlink&quot; title=&quot;pm2基本命令&quot;&gt;&lt;/a&gt;pm2基本命令&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
    
      <category term="node" scheme="http://wumuwumu.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>docker网络模式</title>
    <link href="http://wumuwumu.github.io/2019/10/29/docker%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F/"/>
    <id>http://wumuwumu.github.io/2019/10/29/docker网络模式/</id>
    <published>2019-10-29T06:26:03.000Z</published>
    <updated>2019-10-29T07:27:47.248Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker的网络模式详解"><a href="#Docker的网络模式详解" class="headerlink" title="Docker的网络模式详解"></a>Docker的网络模式详解</h1><h2 id="1、Docker的四种网络模式"><a href="#1、Docker的四种网络模式" class="headerlink" title="1、Docker的四种网络模式"></a>1、Docker的四种网络模式</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3mf2e5nj30q80g5di8.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>（1）docker四种网络模式如下：</p><ul><li>Bridge contauner 桥接式网络模式</li><li>Host(open) container 开放式网络模式</li><li>Container(join) container 联合挂载式网络模式，是host网络模式的延伸</li><li>None(Close) container 封闭式网络模式</li></ul><p>（2）可以通过docker network命令查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@along ~]# docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">f23b4899add1        bridge              bridge              local</span><br><span class="line">65520497f693        host                host                local</span><br><span class="line">a0c5f18e0f04        none                null                local复制代码</span><br></pre></td></tr></table></figure><p>（3）docker run –network 命令可以指定使用网络模式</p><h2 id="2、Bridge-网络模式"><a href="#2、Bridge-网络模式" class="headerlink" title="2、Bridge 网络模式"></a>2、Bridge 网络模式</h2><h4 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h4><p>　　当Docker进程启动时，会<strong>在主机上创建一个名为docker0的虚拟网桥</strong>，此主机上启动的<strong>Docker容器会连接到这个虚拟网桥上，</strong>所以有默认地址172.17.0.0/16的地址。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。</p><p>　　从<strong>docker0子网中分配一个IP给容器使用</strong>，并设置<strong>docker0的IP地址为容器的默认网关</strong>。在主机上<strong>创建一对虚拟网卡</strong>veth pair设备，Docker将veth pair设备的<strong>一端放在新创建的容器</strong>中，并命名为eth0（容器的网卡），<strong>另一端放在主机中</strong>，以vethxxx这样类似的名字命名，并将这个网络设备加入到docker0网桥中。可以通过brctl show命令查看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@along ~]# brctl show</span><br><span class="line">bridge name    bridge id        STP enabled    interfaces</span><br><span class="line">docker0    8000.024241c45d6e    no复制代码</span><br></pre></td></tr></table></figure><p>　　<strong>bridge模式是docker的默认网络模式</strong>，不写–net参数，就是bridge模式。使用docker run -p时，docker实际是在iptables做了DNAT规则，实现端口转发功能。可以使用iptables -t nat -vnL查看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@along ~]# iptables -t nat -vnL</span><br><span class="line">Chain POSTROUTING (policy ACCEPT 20 packets, 1238 bytes)</span><br><span class="line"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class="line">    0     0 MASQUERADE  all  --  *      !docker0  172.17.0.0/16        0.0.0.0/0复制代码</span><br></pre></td></tr></table></figure><h4 id="2-2-bridge模式示意图"><a href="#2-2-bridge模式示意图" class="headerlink" title="2.2 bridge模式示意图"></a>2.2 bridge模式示意图</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3o9zcpej30m80pjab7.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="2-3-演示"><a href="#2-3-演示" class="headerlink" title="2.3 演示"></a>2.3 演示</h4><p>bridge 网络模式；–network不指定，默认也是bridge模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@along ~]# docker run --name b1 -it --network bridge --rm busybox:latest </span><br><span class="line">/ # ifconfig </span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  </span><br><span class="line">          inet addr:172.17.0.2  Bcast:0.0.0.0  Mask:255.255.0.0</span><br><span class="line">          inet6 addr: fe80::42:acff:fe11:2/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:12 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:6 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:1016 (1016.0 B)  TX bytes:508 (508.0 B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line">/ # route -n</span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">0.0.0.0         172.17.0.1      0.0.0.0         UG    0      0        0 eth0</span><br><span class="line">172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0</span><br><span class="line">/ # ping 10.11.55.5   正常访问宿主机</span><br><span class="line">PING 10.11.55.5 (10.11.55.5): 56 data bytes</span><br><span class="line">64 bytes from 10.11.55.5: seq=0 ttl=64 time=0.292 ms</span><br><span class="line">/ # exit复制代码</span><br></pre></td></tr></table></figure><h2 id="3、Host-网络模式"><a href="#3、Host-网络模式" class="headerlink" title="3、Host 网络模式"></a>3、Host 网络模式</h2><h4 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h4><p>　　如果启动容器的时候使用host模式，那么这个容器将不会获得一个独立的Network Namespace，而是<strong>和宿主机共用一个Network Namespace</strong>。容器将不会虚拟出自己的网卡，配置自己的IP等，而是<strong>使用宿主机的IP和端口</strong>。但是，<strong>容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的</strong>。</p><h4 id="3-2-Host模式示意图"><a href="#3-2-Host模式示意图" class="headerlink" title="3.2 Host模式示意图"></a>3.2 Host模式示意图</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3ox4pnoj30m80oz0tk.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="3-3-演示"><a href="#3-3-演示" class="headerlink" title="3.3 演示"></a>3.3 演示</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@along ~]# docker run --name b2 -it --network host --rm busybox:latest</span><br><span class="line">/ # ifconfig -a   和宿主机一样</span><br><span class="line">docker0   Link encap:Ethernet  HWaddr 02:42:41:C4:5D:6E  </span><br><span class="line">          inet addr:172.17.0.1  Bcast:0.0.0.0  Mask:255.255.0.0</span><br><span class="line">          inet6 addr: fe80::42:41ff:fec4:5d6e/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:90 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:26 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:5903 (5.7 KiB)  TX bytes:2381 (2.3 KiB)</span><br><span class="line"></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 00:0C:29:AB:D2:DA  </span><br><span class="line">          inet addr:10.11.55.5  Bcast:10.11.55.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:feab:d2da/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:3913 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:3327 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:354314 (346.0 KiB)  TX bytes:919096 (897.5 KiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)复制代码</span><br></pre></td></tr></table></figure><h2 id="4、Container-网络模式"><a href="#4、Container-网络模式" class="headerlink" title="4、Container 网络模式"></a>4、Container 网络模式</h2><h4 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1 介绍"></a>4.1 介绍</h4><p>　　这个模式指定<strong>新创建的容器和已经存在的一个容器共享一个 Network Namespace</strong>，而不是和宿主机共享。<strong>新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围</strong>等。同样，<strong>两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的</strong>。两个容器的进程可以通过 lo 网卡设备通信。</p><h4 id="4-2-Container模式示意图"><a href="#4-2-Container模式示意图" class="headerlink" title="4.2 Container模式示意图"></a>4.2 Container模式示意图</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3pqujjjj30m80pddgw.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="4-3-演示"><a href="#4-3-演示" class="headerlink" title="4.3 演示"></a>4.3 演示</h4><p>（1）在一个终端，使用bridge网络模式启动容器b1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@along ~]# docker run --name b1 -it --rm busybox:latest </span><br><span class="line">/ # ifconfig   b1的ip为172.17.0.2</span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  </span><br><span class="line">          inet addr:172.17.0.2  Bcast:0.0.0.0  Mask:255.255.0.0</span><br><span class="line">          inet6 addr: fe80::42:acff:fe11:2/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:6 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:6 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:508 (508.0 B)  TX bytes:508 (508.0 B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line">/ # echo &quot;hello world b1&quot; &gt; /tmp/index.html</span><br><span class="line">/ # httpd -h /tmp/  在b1上启动httpd服务</span><br><span class="line">/ # netstat -nutl</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       </span><br><span class="line">tcp        0      0 :::80                   :::*                    LISTEN 复制代码</span><br></pre></td></tr></table></figure><p>（2）在另一个终端使用Container 网络模式创建容器b2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@along ~]# docker run --name b2 -it --network container:b1 --rm busybox:latest</span><br><span class="line">/ # ifconfig -a   b2的ip和b1一样</span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02  </span><br><span class="line">          inet addr:172.17.0.2  Bcast:0.0.0.0  Mask:255.255.0.0</span><br><span class="line">          inet6 addr: fe80::42:acff:fe11:2/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:8 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:648 (648.0 B)  TX bytes:648 (648.0 B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line">/ # wget -O - -q 127.0.0.1   b1启动的httpd服务，在b2上直接访问</span><br><span class="line">hello world b1</span><br><span class="line">/ # ls /tmp/   但是文件系统并不共享，只共享网络复制代码</span><br></pre></td></tr></table></figure><h2 id="5、None-网络模式"><a href="#5、None-网络模式" class="headerlink" title="5、None 网络模式"></a>5、None 网络模式</h2><h4 id="5-1-介绍"><a href="#5-1-介绍" class="headerlink" title="5.1 介绍"></a>5.1 介绍</h4><p>　　使用none模式，Docker容器拥有自己的Network Namespace，但是，<strong>并不为Docker容器进行任何网络配置</strong>。也就是说，这个Docker容器没有网卡、IP、路由等信息，只有lo 网络接口。需要我们自己为Docker容器添加网卡、配置IP等。</p><p>　　不参与网络通信，运行于此类容器中的进程仅能访问本地回环接口；仅适用于进程无须网络通信的场景中，例如：备份、进程诊断及各种离线任务等。</p><h4 id="5-2-Node模式示意图"><a href="#5-2-Node模式示意图" class="headerlink" title="5.2 Node模式示意图"></a>5.2 Node模式示意图</h4><h4 id=""><a href="#" class="headerlink" title=""></a><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8f3q084q5j30m80pyq3o.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></h4><h4 id="5-3-演示"><a href="#5-3-演示" class="headerlink" title="5.3 演示"></a>5.3 演示</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@along ~]# docker run --name b1 -it --network none --rm busybox:latest </span><br><span class="line">/ # ifconfig </span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line">/ # route -n</span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker的网络模式详解&quot;&gt;&lt;a href=&quot;#Docker的网络模式详解&quot; class=&quot;headerlink&quot; title=&quot;Docker的网络模式详解&quot;&gt;&lt;/a&gt;Docker的网络模式详解&lt;/h1&gt;&lt;h2 id=&quot;1、Docker的四种网络模式&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="docker" scheme="http://wumuwumu.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>npm版本管理</title>
    <link href="http://wumuwumu.github.io/2019/10/29/npm%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    <id>http://wumuwumu.github.io/2019/10/29/npm版本管理/</id>
    <published>2019-10-29T06:08:30.000Z</published>
    <updated>2019-10-29T06:24:10.749Z</updated>
    
    <content type="html"><![CDATA[<p>在打包项目的时候，我们都要更新package.json的版本号，接着给给代码添加tag，最后push代码，这样的流程泰国麻烦有什么方法简化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. package.json`中修改递增`version</span><br><span class="line">2. git add -A</span><br><span class="line">3. git commit -m &quot;update version&quot;</span><br><span class="line">4. git push</span><br><span class="line">5. git tag &lt;tag version&gt;</span><br><span class="line">6. git push --tag</span><br><span class="line">7. npm publish</span><br></pre></td></tr></table></figure><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>我们可以使用<code>npm version</code>命令，从<a href="https://docs.npmjs.com/cli/version" target="_blank" rel="noopener">文档</a>上我们可以看到其依据<a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noopener">semver</a>支持了大部分alias：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm version [&lt;newversion&gt; | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]</span><br></pre></td></tr></table></figure><blockquote><p>例：初始版本为1.0.0</p><p><code>npm version prepatch</code>  //预备补丁版本号 v1.0.1-0</p><p><code>npm version prerelease</code>  //预发布版本号 v1.0.1-1</p><p><code>npm version patch</code> //补丁版本号 v1.0.2</p><p><code>npm version preminor</code> //预备次版本号 v1.1.0-0</p><p><code>npm version minor</code> //次版本号 v1.1.0</p><p><code>npm version premajor</code> //预备主版本号 v2.0.0-0</p><p><code>npm version major</code> //主版本号 v2.0.0</p></blockquote><p>当在仓库中执行<code>npm version时</code>，会自动提交<code>git commit</code>并打上<code>git tag</code>。</p><blockquote><p>当使用<code>-m</code>参数时，就可以自定义发布版本的信息，其中<code>%s</code>可以用来代替当前版本号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm version patch -m &quot;upgrade to %s for reasons&quot;</span><br><span class="line">&gt; 复制代码</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>这样以后版本迭代只需要以下步骤</p><ul><li><code>npm version patch | minor | major | ...etc</code></li><li><code>git push</code></li><li><code>git push --tag</code></li><li><code>npm publish</code></li></ul><p>npm version会同时创建时 <code>v版本号</code> 形式的tag，将tag push上去就可以自动触发构建了。</p><p>也可以简化这步操作，在npm version操作后自动 push</p><p>在 package.json中加入下面的代码，即可实现npm version操作后，自动push代码及tag，也就自动触发了 npm 发布操作。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "postversion": "git push --follow-tags"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="衍生问题"><a href="#衍生问题" class="headerlink" title="衍生问题"></a>衍生问题</h1><blockquote><p>如何发布beta，rc，alpha版本呢？如果发布了，应该如何安装？</p></blockquote><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>首先我们要理解这些版本的含义</p><ul><li>alpha：内部测试版本</li><li>beta： 公开测试版本</li><li>rc： 候选版本（Release Candidate）</li></ul><p>然后将<code>package.json</code>的<code>version</code>改成<code>x.x.x-beta</code></p><p>配合<code>npm publish --tag &lt;tag&gt;</code>，我们可以发布对应的<code>dist-tag</code></p><blockquote><p>举个例子：</p><p>使用<code>npm publish --tag beta</code>发布后，然后就可以使用<code>npm install &lt;pkg&gt;@beta</code>安装对应版本的包。</p></blockquote><p>我们可以通过<code>npm dist-tag ls &lt;pkg&gt;</code>来查看包的<code>dist-tag</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    latest: 1.0.1, // 这就是npm publish默认发布的tag</span><br><span class="line">    beta: 1.0.1-beta</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们的beta版本稳定后，可以使用<code>npm dist-tag add x.x.x-beta latest</code>设置为稳定版本。</p><h1 id="npm-version与npm-dist-tag"><a href="#npm-version与npm-dist-tag" class="headerlink" title="npm version与npm dist-tag"></a>npm version与npm dist-tag</h1><p>关于npm version prerelease的作用我这里不再赘述，你可以查看<a href="https://github.com/liangklfangl/npm-dist-tag/blob/master/NPM%E6%A8%A1%E5%9D%97%E7%9A%84TAG%E7%AE%A1%E7%90%86" target="_blank" rel="noopener">这个文章</a>。我只是记录一下关于npm version与npm dist-tag的使用：</p><p>第一步：发布第一个稳定版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish//1.0.0</span><br></pre></td></tr></table></figure><p>第二步：修改文件继续发布第二个版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add -A &amp;&amp; git commit -m &quot;c&quot;</span><br><span class="line">npm version patch</span><br><span class="line">npm publish//1.0.1</span><br></pre></td></tr></table></figure><p>第三步：继续修改文件发布一个prerelease版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add -A &amp;&amp; git commit -m &quot;c&quot;</span><br><span class="line">npm version prerelease</span><br><span class="line">npm publish --tag -beta//版本n-n-n-n@1.0.2-0</span><br></pre></td></tr></table></figure><p>第四步：继续修改发布第二个prerelease版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add -A &amp;&amp; git commit -m &quot;c&quot;</span><br><span class="line">npm version prerelease</span><br><span class="line">npm publish --tag -beta//版本n-n-n-n@1.0.2-1</span><br></pre></td></tr></table></figure><p>第五步：npm info查看我们的版本信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123; name: 'n-n-n-n',</span><br><span class="line">  'dist-tags': &#123; latest: '1.0.1', '-beta': '1.0.2-1' &#125;,</span><br><span class="line">  versions: [ '1.0.0', '1.0.1', '1.0.2-0', '1.0.2-1' ],</span><br><span class="line">  maintainers: [ 'liangklfang &lt;liangklfang@163.com&gt;' ],</span><br><span class="line">  time:</span><br><span class="line">   &#123; modified: '2017-04-01T12:17:56.755Z',</span><br><span class="line">     created: '2017-04-01T12:15:23.605Z',</span><br><span class="line">     '1.0.0': '2017-04-01T12:15:23.605Z',</span><br><span class="line">     '1.0.1': '2017-04-01T12:16:24.916Z',</span><br><span class="line">     '1.0.2-0': '2017-04-01T12:17:23.354Z',</span><br><span class="line">     '1.0.2-1': '2017-04-01T12:17:56.755Z' &#125;,</span><br><span class="line">  homepage: 'https://github.com/liangklfang/n#readme',</span><br><span class="line">  repository: &#123; type: 'git', url: 'git+https://github.com/liangklfang/n.git' &#125;,</span><br><span class="line">  bugs: &#123; url: 'https://github.com/liangklfang/n/issues' &#125;,</span><br><span class="line">  license: 'ISC',</span><br><span class="line">  readmeFilename: 'README.md',</span><br><span class="line">  version: '1.0.1',</span><br><span class="line">  description: '',</span><br><span class="line">  main: 'index.js',</span><br><span class="line">  scripts: &#123; test: 'echo "Error: no test specified" &amp;&amp; exit 1' &#125;,</span><br><span class="line">  author: '',</span><br><span class="line">  gitHead: '8123b8addf6fed83c4c5edead1dc2614241a4479',</span><br><span class="line">  dist:</span><br><span class="line">   &#123; shasum: 'a60d8b02222e4cae74e91b69b316a5b173d2ac9d',</span><br><span class="line">     tarball: 'https://registry.npmjs.org/n-n-n-n/-/n-n-n-n-1.0.1.tgz' &#125;,</span><br><span class="line">  directories: &#123;&#125; &#125;</span><br></pre></td></tr></table></figure><p>我们只要注意下面者两个部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;dist-tags&apos;: &#123; latest: &apos;1.0.1&apos;, &apos;-beta&apos;: &apos;1.0.2-1&apos; &#125;,</span><br><span class="line"> versions: [ &apos;1.0.0&apos;, &apos;1.0.1&apos;, &apos;1.0.2-0&apos;, &apos;1.0.2-1&apos; ],</span><br></pre></td></tr></table></figure><p>其中最新的稳定版本和最新的beta版本可以在dist-tags中看到，而versions数组中存储的是所有的版本。</p><p>第六步：npm dist-tag命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm dist-tag ls n-n-n-n</span><br></pre></td></tr></table></figure><p>即npm dist-tag获取到所有的最新的版本，包括prerelease与稳定版本，得到下面结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-beta: 1.0.2-1</span><br><span class="line">latest: 1.0.1</span><br></pre></td></tr></table></figure><p>第七步：当我们的prerelease版本已经稳定了，重新设置为稳定版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm dist-tag add n-n-n-n@1.0.2-1 latest</span><br></pre></td></tr></table></figure><p>此时你通过npm info查看可以知道：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123; name: 'n-n-n-n',</span><br><span class="line">  'dist-tags': &#123; latest: '1.0.2-1', '-beta': '1.0.2-1' &#125;,</span><br><span class="line">  versions: [ '1.0.0', '1.0.1', '1.0.2-0', '1.0.2-1' ],</span><br><span class="line">  maintainers: [ 'liangklfang &lt;liangklfang@163.com&gt;' ],</span><br><span class="line">  time:</span><br><span class="line">   &#123; modified: '2017-04-01T12:24:55.800Z',</span><br><span class="line">     created: '2017-04-01T12:15:23.605Z',</span><br><span class="line">     '1.0.0': '2017-04-01T12:15:23.605Z',</span><br><span class="line">     '1.0.1': '2017-04-01T12:16:24.916Z',</span><br><span class="line">     '1.0.2-0': '2017-04-01T12:17:23.354Z',</span><br><span class="line">     '1.0.2-1': '2017-04-01T12:17:56.755Z' &#125;,</span><br><span class="line">  homepage: 'https://github.com/liangklfang/n#readme',</span><br><span class="line">  repository: &#123; type: 'git', url: 'git+https://github.com/liangklfang/n.git' &#125;,</span><br><span class="line">  bugs: &#123; url: 'https://github.com/liangklfang/n/issues' &#125;,</span><br><span class="line">  license: 'ISC',</span><br><span class="line">  readmeFilename: 'README.md',</span><br><span class="line">  version: '1.0.2-1',</span><br><span class="line">  description: '',</span><br><span class="line">  main: 'index.js',</span><br><span class="line">  scripts: &#123; test: 'echo "Error: no test specified" &amp;&amp; exit 1' &#125;,</span><br><span class="line">  author: '',</span><br><span class="line">  gitHead: '03189d2cc61604aa05f4b93e429d3caa3b637f8c',</span><br><span class="line">  dist:</span><br><span class="line">   &#123; shasum: '41ea170a6b155c8d61658cd4c309f0d5d1b12ced',</span><br><span class="line">     tarball: 'https://registry.npmjs.org/n-n-n-n/-/n-n-n-n-1.0.2-1.tgz' &#125;,</span><br><span class="line">  directories: &#123;&#125; &#125;</span><br></pre></td></tr></table></figure><p>主要关注如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;dist-tags&apos;: &#123; latest: &apos;1.0.2-1&apos;, &apos;-beta&apos;: &apos;1.0.2-1&apos; &#125;,</span><br><span class="line"> versions: [ &apos;1.0.0&apos;, &apos;1.0.1&apos;, &apos;1.0.2-0&apos;, &apos;1.0.2-1&apos; ]</span><br></pre></td></tr></table></figure><p>此时latest版本已经是prerelease版本”1.0.2-1”了！此时用户如果直接运行npm install就会安装我们的prerelease版本了，因为版本已经更新了！</p><p>当然，我们的npm publish可以有很多tag的，比如上面是beta，也可以是stable, dev, canary等，比如下面你继续运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add -A &amp;&amp; git commit -m &quot;c&quot;</span><br><span class="line">npm version prerelease</span><br><span class="line">npm publish --tag -dev</span><br></pre></td></tr></table></figure><p>此时你运行npm info就会得到下面的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123; name: &apos;n-n-n-n&apos;,</span><br><span class="line">  &apos;dist-tags&apos;: &#123; latest: &apos;1.0.2-1&apos;, &apos;-beta&apos;: &apos;1.0.2-1&apos;, &apos;-dev&apos;: &apos;1.0.2-2&apos; &#125;,</span><br><span class="line">  versions: [ &apos;1.0.0&apos;, &apos;1.0.1&apos;, &apos;1.0.2-0&apos;, &apos;1.0.2-1&apos;, &apos;1.0.2-2&apos; ],</span><br><span class="line">  maintainers: [ &apos;liangklfang &lt;liangklfang@163.com&gt;&apos; ],</span><br><span class="line">  time:</span><br><span class="line">   &#123; modified: &apos;2017-04-01T13:01:17.106Z&apos;,</span><br><span class="line">     created: &apos;2017-04-01T12:15:23.605Z&apos;,</span><br><span class="line">     &apos;1.0.0&apos;: &apos;2017-04-01T12:15:23.605Z&apos;,</span><br><span class="line">     &apos;1.0.1&apos;: &apos;2017-04-01T12:16:24.916Z&apos;,</span><br><span class="line">     &apos;1.0.2-0&apos;: &apos;2017-04-01T12:17:23.354Z&apos;,</span><br><span class="line">     &apos;1.0.2-1&apos;: &apos;2017-04-01T12:17:56.755Z&apos;,</span><br><span class="line">     &apos;1.0.2-2&apos;: &apos;2017-04-01T13:01:17.106Z&apos; &#125;,</span><br><span class="line">  homepage: &apos;https://github.com/liangklfang/n#readme&apos;,</span><br><span class="line">  repository: &#123; type: &apos;git&apos;, url: &apos;git+https://github.com/liangklfang/n.git&apos; &#125;,</span><br><span class="line">  bugs: &#123; url: &apos;https://github.com/liangklfang/n/issues&apos; &#125;,</span><br><span class="line">  license: &apos;ISC&apos;,</span><br><span class="line">  readmeFilename: &apos;README.md&apos;,</span><br><span class="line">  version: &apos;1.0.2-1&apos;,</span><br><span class="line">  description: &apos;&apos;,</span><br><span class="line">  main: &apos;index.js&apos;,</span><br><span class="line">  scripts: &#123; test: &apos;echo &quot;Error: no test specified&quot; &amp;&amp; exit 1&apos; &#125;,</span><br><span class="line">  author: &apos;&apos;,</span><br><span class="line">  gitHead: &apos;03189d2cc61604aa05f4b93e429d3caa3b637f8c&apos;,</span><br><span class="line">  dist:</span><br><span class="line">   &#123; shasum: &apos;41ea170a6b155c8d61658cd4c309f0d5d1b12ced&apos;,</span><br><span class="line">     tarball: &apos;https://registry.npmjs.org/n-n-n-n/-/n-n-n-n-1.0.2-1.tgz&apos; &#125;,</span><br><span class="line">  directories: &#123;&#125; &#125;</span><br></pre></td></tr></table></figure><p>重点关注如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;dist-tags&apos;: &#123; latest: &apos;1.0.2-1&apos;, &apos;-beta&apos;: &apos;1.0.2-1&apos;, &apos;-dev&apos;: &apos;1.0.2-2&apos; &#125;,</span><br><span class="line"> versions: [ &apos;1.0.0&apos;, &apos;1.0.1&apos;, &apos;1.0.2-0&apos;, &apos;1.0.2-1&apos;, &apos;1.0.2-2&apos; ],</span><br></pre></td></tr></table></figure><p>此时你会看到-beta版本最新是1.0.2-1，而-dev版本最新是1.0.2-2</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://github.com/liangklfangl/npm-dist-tag" target="_blank" rel="noopener">https://github.com/liangklfangl/npm-dist-tag</a></p><p><a href="https://juejin.im/post/5b624d42f265da0fa1223ffa" target="_blank" rel="noopener">https://juejin.im/post/5b624d42f265da0fa1223ffa</a></p><p><a href="https://docs.npmjs.com/cli/version" target="_blank" rel="noopener">https://docs.npmjs.com/cli/version</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在打包项目的时候，我们都要更新package.json的版本号，接着给给代码添加tag，最后push代码，这样的流程泰国麻烦有什么方法简化。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
    
      <category term="node" scheme="http://wumuwumu.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>python中and和or用法</title>
    <link href="http://wumuwumu.github.io/2019/10/25/python/python%E4%B8%ADand%E5%92%8Cor%E7%94%A8%E6%B3%95/"/>
    <id>http://wumuwumu.github.io/2019/10/25/python/python中and和or用法/</id>
    <published>2019-10-25T07:41:30.000Z</published>
    <updated>2019-10-25T07:44:07.393Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="http://lib.csdn.net/base/python" target="_blank" rel="noopener">Python</a> 中，and 和 or 执行布尔逻辑演算，如你所期待的一样。但是它们并不返回布尔值，而是返回它们实际进行比较的值之一。</p><p>（类似C++里面的&amp;&amp;和||的短路求值）</p><p>（ 在布尔环境中，0、”、[]、()、{}、None为假；其它任何东西都为真。但是可以在类中定义特定的方法使得类实例的演算值为假。）</p><h1 id="and实例："><a href="#and实例：" class="headerlink" title="and实例："></a>and实例：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a'</span> <span class="keyword">and</span> <span class="string">'b'</span></span><br><span class="line"><span class="string">'b'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span> <span class="keyword">and</span> <span class="string">'b'</span></span><br><span class="line"><span class="string">''</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a'</span> <span class="keyword">and</span> <span class="string">'b'</span> <span class="keyword">and</span> <span class="string">'c'</span></span><br><span class="line"><span class="string">'c'</span><span class="number">12345</span></span><br></pre></td></tr></table></figure><p>从左到右扫描，返回第一个为假的表达式值，无假值则返回最后一个表达式值。</p><h1 id="or实例："><a href="#or实例：" class="headerlink" title="or实例："></a>or实例：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a'</span> <span class="keyword">or</span> <span class="string">'b'</span></span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span> <span class="keyword">or</span> <span class="string">'b'</span></span><br><span class="line"><span class="string">'b'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span> <span class="keyword">or</span> [] <span class="keyword">or</span>&#123;&#125;</span><br><span class="line">&#123;&#125;<span class="number">12345</span></span><br></pre></td></tr></table></figure><p>从左到右扫描，返回第一个为真的表达式值，无真值则返回最后一个表达式值。</p><h1 id="and-or搭配："><a href="#and-or搭配：" class="headerlink" title="and-or搭配："></a>and-or搭配：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"betabin"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">"python"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="keyword">and</span> a <span class="keyword">or</span> b</span><br><span class="line"><span class="string">'betabin'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span> <span class="keyword">and</span> a <span class="keyword">or</span> b</span><br><span class="line"><span class="string">'python'</span><span class="number">12345</span></span><br></pre></td></tr></table></figure><p>看起来类似于于我们Ｃ＋＋中的条件运算符（bool？a：b），是的，当a为true的时候是一样的。但是，当a为false的时候，就明显不同了。</p><p>如果坚持要用and-or技巧来实现条件运算符的话，可以用种安全的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">""</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">"betabin"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">1</span> <span class="keyword">and</span> [a] <span class="keyword">or</span> [b])[<span class="number">0</span>]</span><br><span class="line"><span class="string">''</span><span class="number">123</span></span><br></pre></td></tr></table></figure><p>就是万能的[]，把a为假的可能性给抹杀掉，然后通过[0]再获得（因为要通过[0]获得元素，所以b也得加上[]）。</p><p>这个and-or技巧主要在lambda中使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在&lt;a href=&quot;http://lib.csdn.net/base/python&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python&lt;/a&gt; 中，and 和 or 执行布尔逻辑演算，如你所期待的一样。但是它们并不返回布尔值，而是返回它们实际进行比
      
    
    </summary>
    
    
      <category term="python" scheme="http://wumuwumu.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>使用jenv对java多版本管理</title>
    <link href="http://wumuwumu.github.io/2019/10/25/java/%E4%BD%BF%E7%94%A8jenv%E5%AF%B9java%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    <id>http://wumuwumu.github.io/2019/10/25/java/使用jenv对java多版本管理/</id>
    <published>2019-10-25T02:42:43.000Z</published>
    <updated>2019-10-25T02:44:27.960Z</updated>
    
    <content type="html"><![CDATA[<ul><li>配置JDK环境变量</li></ul><p>打开 vim ~/.bash_profile 文件 进行添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_8_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home</span><br><span class="line"><span class="built_in">export</span> JAVA_7_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home</span><br><span class="line"><span class="comment"># 默认激活 jdk8</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=<span class="variable">$JAVA_8_HOME</span></span><br></pre></td></tr></table></figure><p>编辑完成，重新加载 .bash_profile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source ~/.bash_profile</span><br></pre></td></tr></table></figure><h4 id="jEnv安装"><a href="#jEnv安装" class="headerlink" title="jEnv安装"></a>jEnv安装</h4><ul><li>安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install jenv</span><br></pre></td></tr></table></figure><ul><li>配置</li></ul><p>安装了zsh，配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo &apos;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrc</span><br><span class="line">$ echo &apos;eval &quot;$(jenv init -)&quot;&apos; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><p>如果是默认的bash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo &apos;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&apos; &gt;&gt; ~/.bash_profile</span><br><span class="line">$ echo &apos;eval &quot;$(jenv init -)&quot;&apos; &gt;&gt; ~/.bash_profilec</span><br></pre></td></tr></table></figure><h4 id="jEnv配置JDK"><a href="#jEnv配置JDK" class="headerlink" title="jEnv配置JDK"></a>jEnv配置JDK</h4><p>查看安装的java版本，如果我们一开始未添加jdk，执行jenv versions 应该是空的，* 号位置表示当前的jdk版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ jenv versions</span><br><span class="line">  system</span><br><span class="line">  1.7</span><br><span class="line">* 1.7.0.80 (<span class="built_in">set</span> by /Users/gulj/.java-version)</span><br><span class="line">  1.8</span><br><span class="line">  1.8.0.112</span><br><span class="line">  oracle64-1.7.0.80</span><br><span class="line">  oracle64-1.8.0.112</span><br></pre></td></tr></table></figure><p>重启下terminal，为jEnv添加java版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">添加jdk7</span><br><span class="line">$ jenv add /Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home</span><br><span class="line">添加jdk8</span><br><span class="line">$ jenv add /Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home</span><br></pre></td></tr></table></figure><blockquote><p>添加完jdk7和jdk8之后，再执行 <strong>jenv versions</strong> 命令就会看到我们添加的jdk</p></blockquote><h4 id="jEnv常用命令"><a href="#jEnv常用命令" class="headerlink" title="jEnv常用命令"></a>jEnv常用命令</h4><ul><li>移除指定版本jdk</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jenv remove 1.8.0.111</span><br></pre></td></tr></table></figure><ul><li>选择一个jdk版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jenv local 1.8.0.111</span><br></pre></td></tr></table></figure><ul><li>设置默认的jdk版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jenv global 1.8.0.111</span><br></pre></td></tr></table></figure><ul><li>查看当前版本jdk的路径</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jenv which java</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;配置JDK环境变量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;打开 vim ~/.bash_profile 文件 进行添加&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="java" scheme="http://wumuwumu.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>react-tree-walker学习</title>
    <link href="http://wumuwumu.github.io/2019/10/19/react-tree-walker%E5%AD%A6%E4%B9%A0/"/>
    <id>http://wumuwumu.github.io/2019/10/19/react-tree-walker学习/</id>
    <published>2019-10-19T09:02:13.000Z</published>
    <updated>2019-10-25T02:20:42.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="react-tree-walker"><a href="#react-tree-walker" class="headerlink" title="react-tree-walker"></a><code>react-tree-walker</code></h1><p>这个主要用于遍历react的dom树，用于在react服务端渲染数据请求的时候。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> reactTreeWalker <span class="keyword">from</span> <span class="string">'react-tree-walker'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataFetcher</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.getData = <span class="keyword">this</span>.getData.bind(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getData() &#123;</span><br><span class="line">    <span class="comment">// Supports promises! You could call an API for example to fetch some</span></span><br><span class="line">    <span class="comment">// data, or do whatever "bootstrapping" you desire.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="keyword">this</span>.props.id)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;Hello World!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    &lt;DataFetcher id=&#123;<span class="number">1</span>&#125; /&gt;</span><br><span class="line">    &lt;DataFetcher id=&#123;<span class="number">2</span>&#125;&gt;</span><br><span class="line">      &lt;DataFetcher id=&#123;<span class="number">3</span>&#125;&gt;</span><br><span class="line">        &lt;DataFetcher id=&#123;<span class="number">4</span>&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/DataFetcher&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>DataFetcher&gt;</span><br><span class="line">    &lt;DataFetcher id=&#123;<span class="number">5</span>&#125; /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const values = []</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ You provide this! See the API docs below for full details.</span></span><br><span class="line"><span class="regexp">function visitor(element, instance) &#123;</span></span><br><span class="line"><span class="regexp">  if (instance &amp;&amp; typeof instance.getData) &#123;</span></span><br><span class="line"><span class="regexp">    return instance.getData().then(value =&gt; &#123;</span></span><br><span class="line"><span class="regexp">      values.push(value)</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ Return "false" to indicate that we do not want to visit "3"'s children,</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ therefore we do not expect "4" to make it into our values array.</span></span><br><span class="line"><span class="regexp">      return value !== 3</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">reactTreeWalker(app, visitor)</span></span><br><span class="line"><span class="regexp">  .then(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    console.log(values) /</span><span class="regexp">/ [1, 2, 3, 5];</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ Now is a good time to call React's renderToString whilst exposing</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ whatever values you built up to your app.</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ since v3.0.0 you need to do your own error handling!</span></span><br><span class="line"><span class="regexp">  .catch(err =&gt; console.error(err))</span></span><br></pre></td></tr></table></figure><h1 id="react-ssr-prepass"><a href="#react-ssr-prepass" class="headerlink" title="react-ssr-prepass"></a><code>react-ssr-prepass</code></h1><p>这个项目还在维护，是一个不错的选择</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-ssr-prepass</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">npm install --save react-ssr-prepass</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createElement &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; renderToString &#125; <span class="keyword">from</span> <span class="string">'react-dom/server'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ssrPrepass <span class="keyword">from</span> <span class="string">'react-ssr-prepass'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> renderApp = <span class="keyword">async</span> App =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> element = createElement(App)</span><br><span class="line">  <span class="keyword">await</span> ssrPrepass(element)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> renderToString(element)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ssrPrepass(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>, (element, instance) =&gt; &#123;</span></span><br><span class="line"><span class="xml">  if (element.type === SomeData) &#123;</span></span><br><span class="line"><span class="xml">    return fetchData()</span></span><br><span class="line"><span class="xml">  &#125; else if (instance &amp;&amp; instance.fetchData) &#123;</span></span><br><span class="line"><span class="xml">    return instance.fetchData()</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;react-tree-walker&quot;&gt;&lt;a href=&quot;#react-tree-walker&quot; class=&quot;headerlink&quot; title=&quot;react-tree-walker&quot;&gt;&lt;/a&gt;&lt;code&gt;react-tree-walker&lt;/code&gt;&lt;/h1&gt;
      
    
    </summary>
    
    
      <category term="react" scheme="http://wumuwumu.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>weboack性能优化笔记</title>
    <link href="http://wumuwumu.github.io/2019/10/18/weboack%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AC%94%E8%AE%B0/"/>
    <id>http://wumuwumu.github.io/2019/10/18/weboack性能优化笔记/</id>
    <published>2019-10-18T03:52:51.000Z</published>
    <updated>2019-10-25T02:20:54.751Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.im/post/5b652b036fb9a04fa01d616b" target="_blank" rel="noopener">https://juejin.im/post/5b652b036fb9a04fa01d616b</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5b652b036fb9a04fa01d616b&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://juejin.im/post/5b652b036fb9a04fa01d616b&lt;
      
    
    </summary>
    
    
      <category term="js" scheme="http://wumuwumu.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>lodash按需加载</title>
    <link href="http://wumuwumu.github.io/2019/10/18/lodash%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD/"/>
    <id>http://wumuwumu.github.io/2019/10/18/lodash按需加载/</id>
    <published>2019-10-18T03:48:59.000Z</published>
    <updated>2019-10-25T02:20:23.073Z</updated>
    
    <content type="html"><![CDATA[<p>lodash提供了很多可用的方法供我们使用，绝对是一个很好用且用起来得心应手的工具库。但是同时，lodash的体积也不小，我们项目中使用的大概522K，可能只是使用了几个方法，但是却把整个lodash库引入了。为了吃几条鱼，就承包了整个鱼塘，代价有点大呀！</p><p>对于这个问题，有几种方案可供选择。</p><p><strong>一.引入单个函数</strong></p><p>　lodash整个安装完之后，引用方式： lodash/function 格式，单独引入某个函数，如</p><p>let _trim= require(‘lodash/trim’) 或者 import trim from ‘lodash/trim’ </p><p>　或者 lodash 中的每个函数在 NPM 都有一个单独的发布模块，单独安装并引用部分模块，然后按以下方式引用</p><p>let _trim= require(‘lodash.trim’) 或者 import trim from ‘lodash.trim’ </p><p>trim(‘ 123123 ‘)</p><p><strong>二.借助 lodash-webpack-plugin，babel-plugin-lodash插件优化</strong></p><p>　　使用上述两种方式，在使用较多个lodash中方法的情况下，不太美观，且并不方便。那么我们可以借助于lodash-webpack-plugin，去除未引入的模块，需要和babel-plugin-lodash插件配合使用。类似于webpack的tree-shaking。</p><p>　　1）安装插件：npm i -S lodash-webpack-plugin babel-plugin-lodash</p><p>　　2）webpack.conf.js中</p><p>　　var LodashModuleReplacementPlugin = require(‘lodash-webpack-plugin’)</p><p>　　plugins: [ new LodashModuleReplacementPlugin()]</p><p>3）.babelrc中配置 “plugins”: [“transform-runtime”,”transform-vue-jsx”,”lodash”]</p><p>　　或者在webpack.conf.js的rules配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: /\.(js|jsx)$/,</span><br><span class="line">  loader: &apos;babel-loader&apos;,</span><br><span class="line">  exclude: /node_modules/,</span><br><span class="line">  include: [resolve(&apos;src&apos;), resolve(&apos;test&apos;)]</span><br><span class="line">  options: &#123;plugins: [&apos;lodash&apos;]&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>三.lodash-es结合tree-shaking</strong></p><p>lodash-es 是着具备 ES6 模块化的版本，只需要直接引入就可以。</p><p>import {isEmpty,forIn, cloneDeep} from ‘lodash-es’</p><p>tree-shaking的作用，即移除上下文中未引用的代码（dead code）</p><p>只有当函数给定输入后，产生相应的输出，且不修改任何外部的东西，才可以安全做shaking的操作</p><p>如何使用tree-shaking？</p><p>1）.确保代码是es6格式,即 export，import</p><p>2）.package.json中，设置sideEffects</p><p>3）.确保tree-shaking的函数没有副作用</p><p>4）.babelrc中设置presets [[“env”, { “modules”: false }]] 禁止转换模块，交由webpack进行模块化处理</p><p>5）.结合uglifyjs-webpack-plugin</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;lodash提供了很多可用的方法供我们使用，绝对是一个很好用且用起来得心应手的工具库。但是同时，lodash的体积也不小，我们项目中使用的大概522K，可能只是使用了几个方法，但是却把整个lodash库引入了。为了吃几条鱼，就承包了整个鱼塘，代价有点大呀！&lt;/p&gt;
&lt;p&gt;对
      
    
    </summary>
    
    
      <category term="js" scheme="http://wumuwumu.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>babel配置</title>
    <link href="http://wumuwumu.github.io/2019/10/18/babel%E9%85%8D%E7%BD%AE/"/>
    <id>http://wumuwumu.github.io/2019/10/18/babel配置/</id>
    <published>2019-10-18T03:21:01.000Z</published>
    <updated>2019-10-25T02:19:31.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Babel6"><a href="#Babel6" class="headerlink" title="Babel6"></a>Babel6</h1><p>Babel6 现在使用的越来越少了，但是还是做一个笔记，现在基本都使用<code>babel-preset-env</code>，不需要写<code>babel-preset-esxxxx</code>了，但是<code>babel-preset-stage-x</code>还是要自己去加的。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D babel-cli babel-preset-env</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>Babel6的配置文件是<code>.babelrc</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    //https://juejin.im/post/5a79adeef265da4e93116430</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Babel7"><a href="#Babel7" class="headerlink" title="Babel7"></a>Babel7</h1><p>Babel7 相对于babel6有很大的变化，相关的模块的名字有很大的变化，官方舍弃了<code>babel-preset-esxxxx</code>和<code>babel-preset-stage-x</code>，后者的原因是提案一直在变化。</p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D @babel/cli @babel/react @babel/plugin-transform-runtime @babel/env</span><br></pre></td></tr></table></figure><h2 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h2><p>Babel7有两种配置文件，一个是<code>.babelrc</code>，是局部的，另外一个是<code>babel.config.js</code>是全局的，具体的可以看下官网。7版本的配置文件解析也变得更加严格。</p><p>### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Babel6&quot;&gt;&lt;a href=&quot;#Babel6&quot; class=&quot;headerlink&quot; title=&quot;Babel6&quot;&gt;&lt;/a&gt;Babel6&lt;/h1&gt;&lt;p&gt;Babel6 现在使用的越来越少了，但是还是做一个笔记，现在基本都使用&lt;code&gt;babel-preset-
      
    
    </summary>
    
    
      <category term="js" scheme="http://wumuwumu.github.io/tags/js/"/>
    
      <category term="babel" scheme="http://wumuwumu.github.io/tags/babel/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://wumuwumu.github.io/2019/10/14/hello-world/"/>
    <id>http://wumuwumu.github.io/2019/10/14/hello-world/</id>
    <published>2019-10-14T09:01:07.430Z</published>
    <updated>2019-10-14T09:01:07.433Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>php5环境搭建</title>
    <link href="http://wumuwumu.github.io/2019/09/02/php5%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://wumuwumu.github.io/2019/09/02/php5环境搭建/</id>
    <published>2019-09-02T15:14:11.000Z</published>
    <updated>2019-10-14T09:01:08.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><h1 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装php</h1><p>remi源可以获取更高的版本，php-fpm是要启动的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm</span><br><span class="line">yum install --enablerepo=remi --enablerepo=remi-php56 php php-fpm</span><br><span class="line">yum install --enablerepo=remi --enablerepo=remi-php56 php-opcache php-mbstring php-mysql* php-gd php-redis php-mcrypt php-xml php-redis</span><br></pre></td></tr></table></figure><h1 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  www.test.com test.com;</span><br><span class="line">    <span class="attribute">root</span>     /data/www/Public;</span><br><span class="line">    <span class="attribute">index</span>  index.php index.html;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$args</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ index.php</span> &#123;</span><br><span class="line">        <span class="attribute">fastcgi_connect_timeout</span> <span class="number">20s</span>;     <span class="comment"># default of 60s is just too long</span></span><br><span class="line">        <span class="attribute">fastcgi_read_timeout</span> <span class="number">20s</span>;       <span class="comment"># default of 60s is just too long</span></span><br><span class="line">        <span class="attribute">include</span> fastcgi_params;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:9000</span>;    <span class="comment"># assumes you are running php-fpm locally on port 9000</span></span><br><span class="line">        <span class="attribute">fastcgi_param</span>  PHP_VALUE  <span class="string">"open_basedir=/data/www/:/data/www/Data:/tmp/"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="开启php的日志"><a href="#开启php的日志" class="headerlink" title="开启php的日志"></a>开启php的日志</h1><ol><li><p>修改 php-fpm.conf 文件，添加（或修改）如下配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">  <span class="attribute">error_log</span> = log/error_log</span><br><span class="line"></span><br><span class="line">  [www]</span><br><span class="line">  catch_workers_output = <span class="literal">yes</span></span><br></pre></td></tr></table></figure></li><li><p>修改 php.ini 文件，添加（或修改）如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log_errors = On</span><br><span class="line">error_log = &quot;/usr/local/lnmp/php/var/log/error_log&quot;</span><br><span class="line">error_reporting=E_ALL&amp;~E_NOTICE</span><br></pre></td></tr></table></figure></li><li><p>重启 php-fpm </p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装nginx&quot;&gt;&lt;a href=&quot;#安装nginx&quot; class=&quot;headerlink&quot; title=&quot;安装nginx&quot;&gt;&lt;/a&gt;安装nginx&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>linux压缩</title>
    <link href="http://wumuwumu.github.io/2019/09/02/linux%E5%8E%8B%E7%BC%A9/"/>
    <id>http://wumuwumu.github.io/2019/09/02/linux压缩/</id>
    <published>2019-09-02T14:46:45.000Z</published>
    <updated>2019-10-14T09:01:07.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包</span></span><br><span class="line">tar -cvf xx.tar dirName</span><br><span class="line"><span class="comment"># 解包</span></span><br><span class="line">tar -xvf  xx.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># .gz</span></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">gunzip fileName.gz</span><br><span class="line">gzip -d fileName.gz</span><br><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">gzip fileName</span><br><span class="line"></span><br><span class="line"><span class="comment"># .tar.gz 和.tgz</span></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar zxvf fileName.tar.gz</span><br><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">tar zcvf filename.tar.gz dirName</span><br><span class="line"></span><br><span class="line"><span class="comment"># bz2</span></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">bzip2 -d fileName.bz</span><br><span class="line">bunzip2 fileName.bz</span><br><span class="line"></span><br><span class="line"><span class="comment"># .tar.bz</span></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar jxvf fileName.tar.bz</span><br><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">tar jcvf fileName.tar.bz dirName</span><br></pre></td></tr></table></figure><h1 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install zip unzip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">unzip mydata.zip -d mydatabak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">zip -r abc123.zip abc 123.txt</span><br></pre></td></tr></table></figure><h1 id="rar"><a href="#rar" class="headerlink" title="rar"></a>rar</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">wget http://www.rarlab.com/rar/rarlinux-x64-5.3.0.tar.gz</span><br><span class="line">tar -zxvf rarlinux-x64-5.3.0.tar.gz // 对应64位下载的</span><br><span class="line"><span class="built_in">cd</span> rar</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">rar x fileName.rar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">rar fileName.rar dirName</span><br></pre></td></tr></table></figure><h1 id="7z"><a href="#7z" class="headerlink" title="7z"></a>7z</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install p7zip p7zip-plugins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">7za a 压缩包.7z 被压缩文件或目录</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line"><span class="comment">#将压缩包解压到指定目录，注意：指定目录参数-o后面不要有空格</span></span><br><span class="line">7za x 压缩包.7z -o解压目录</span><br><span class="line"><span class="comment">#将压缩包解压到当前目录</span></span><br><span class="line">7za x 压缩包.7z</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;tar&quot;&gt;&lt;a href=&quot;#tar&quot; class=&quot;headerlink&quot; title=&quot;tar&quot;&gt;&lt;/a&gt;tar&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp
      
    
    </summary>
    
    
      <category term="linux" scheme="http://wumuwumu.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>nginx伪静态</title>
    <link href="http://wumuwumu.github.io/2019/09/02/nginx/nginx%E4%BC%AA%E9%9D%99%E6%80%81/"/>
    <id>http://wumuwumu.github.io/2019/09/02/nginx/nginx伪静态/</id>
    <published>2019-09-02T14:26:40.000Z</published>
    <updated>2019-10-14T09:01:07.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="伪静态"><a href="#伪静态" class="headerlink" title="伪静态"></a>伪静态</h1><p>伪静态是一种可以把文件后缀改成任何可能的一种方法，如果我想把PHP文件伪静态成html文件，这种相当简单的。<br>nginx里使用伪静态是直接在nginx.conf 中写规则的，而apache要开启写模块(mod_rewrite)才能进行伪静态。<br>nginx只需要打开nginx.conf配置文件,然后在里面写需要的规则就可以了。</p><p><strong>1、Nginx伪静态案例：（Nginx用伪静态是不需要配置的）</strong></p><p>找到nginx.conf配置文件：nginx.conf，然后打开，找到server {} 在里面加上：</p><p>下面加的意思是隐藏掉index.php：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;         </span><br><span class="line">    <span class="comment"># 其他的一些规则，自己加</span></span><br><span class="line">    if(!-e $request_filename) &#123;         </span><br><span class="line">        <span class="attribute">rewrite</span> <span class="regexp"> ^(.*)$</span>  /index.php?s=<span class="variable">$1</span>  <span class="literal">last</span>; </span><br><span class="line">        break;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、每个网站独立的配置文件（独立的伪静态规则）：</strong></p><p>我们正常的时候每个网站都会有独立的配置文件，直接去改配置文件就好了。然后nginx.conf引入他们所有的配置文件就好了：</p><p>如：在nginx.conf配置文件最下面添加以下代码：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">include</span> vhost/<span class="regexp">*.conf</span>;</span><br></pre></td></tr></table></figure><p>说明：引入nginx.conf配置文件所在目录下vhost目录下的所有以.conf的配置文件！</p><p>以下就是其中一个网站的配置文件内容：规则就是隐藏掉index.php</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">root</span> /www/web/admin/public;</span><br><span class="line">        <span class="attribute">server_name</span> www.admin.com;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.php index.htm;</span><br><span class="line">        <span class="attribute">error_page</span>  <span class="number">400</span> /errpage/<span class="number">400</span>.html;</span><br><span class="line">        <span class="attribute">error_page</span>  <span class="number">403</span> /errpage/<span class="number">403</span>.html;</span><br><span class="line">        <span class="attribute">error_page</span>  <span class="number">404</span> /errpage/<span class="number">404</span>.html;</span><br><span class="line">        <span class="attribute">error_page</span>  <span class="number">503</span> /errpage/<span class="number">503</span>.html;</span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">                <span class="attribute">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">                <span class="attribute">fastcgi_index</span>  index.php;</span><br><span class="line">                <span class="attribute">include</span> fcgi.conf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ /\.ht</span> &#123;</span><br><span class="line">                <span class="attribute">deny</span>  all;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">location</span> / &#123; </span><br><span class="line">            <span class="attribute">if</span> (!-e <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">                 <span class="attribute">rewrite</span> <span class="regexp"> ^(.*)$</span>  /index.php?s=<span class="variable">$1</span>  <span class="literal">last</span>;</span><br><span class="line">                 break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="nginx-url重写"><a href="#nginx-url重写" class="headerlink" title="nginx url重写"></a>nginx url重写</h1><p>url重写是指通过配置conf文件，以让网站的url中达到某种状态时则定向/跳转到某个规则，比如常见的伪静态、301重定向、浏览器定向等</p><h2 id="rewrite"><a href="#rewrite" class="headerlink" title="rewrite"></a>rewrite</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>在配置文件的<code>server</code>块中写，如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;   </span><br><span class="line">    <span class="attribute">rewrite</span> 规则 定向路径 重写类型;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>规则：可以是字符串或者正则来表示想匹配的目标url</li><li>定向路径：表示匹配到规则后要定向的路径，如果规则里有正则，则可以使用<code>$index</code>来表示正则里的捕获分组</li><li>重写类型：<ul><li>last ：相当于Apache里德(L)标记，表示完成rewrite，浏览器地址栏URL地址不变</li><li>break；本条规则匹配完成后，终止匹配，不再匹配后面的规则，浏览器地址栏URL地址不变</li><li>redirect：返回302临时重定向，浏览器地址会显示跳转后的URL地址</li><li>permanent：返回301永久重定向，浏览器地址栏会显示跳转后的URL地址</li></ul></li></ul><h3 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment"># 访问 /last.html 的时候，页面内容重写到 /index.html 中</span></span><br><span class="line">    <span class="attribute">rewrite</span> /last.html /index.html <span class="literal">last</span>;</span><br><span class="line">    <span class="comment"># 访问 /break.html 的时候，页面内容重写到 /index.html 中，并停止后续的匹配</span></span><br><span class="line">    <span class="attribute">rewrite</span> /break.html /index.html <span class="literal">break</span>;</span><br><span class="line">    <span class="comment"># 访问 /redirect.html 的时候，页面直接302定向到 /index.html中</span></span><br><span class="line">    <span class="attribute">rewrite</span> /redirect.html /index.html <span class="literal">redirect</span>;</span><br><span class="line">    <span class="comment"># 访问 /permanent.html 的时候，页面直接301定向到 /index.html中</span></span><br><span class="line">    <span class="attribute">rewrite</span> /permanent.html /index.html <span class="literal">permanent</span>;</span><br><span class="line">    <span class="comment"># 把 /html/*.html =&gt; /post/*.html ，301定向</span></span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/html/(.+?).html$</span> /post/<span class="variable">$1</span>.html <span class="literal">permanent</span>;</span><br><span class="line">    <span class="comment"># 把 /search/key =&gt; /search.html?keyword=key</span></span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/search\/([^\/]+?)(\/|$)</span> /search.html?keyword=<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="last和break的区别"><a href="#last和break的区别" class="headerlink" title="last和break的区别"></a>last和break的区别</h4><p>因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里 last 和 break 区别有点难以理解：</p><ul><li>last一般写在server和if中，而break一般使用在location中</li><li>last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配</li><li>break和last都能组织继续执行后面的rewrite指令</li></ul><p>在<code>location</code>里一旦返回<code>break</code>则直接生效并停止后续的匹配<code>location</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">rewrite</span> /last/ /q.html <span class="literal">last</span>;</span><br><span class="line">        <span class="attribute">rewrite</span> /break/ /q.html <span class="literal">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> = /q.html &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">400</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>访问<code>/last/</code>时重写到<code>/q.html</code>，然后使用新的<code>uri</code>再匹配，正好匹配到<code>locatoin = /q.html</code>然后返回了<code>400</code></li><li>访问<code>/break</code>时重写到<code>/q.html</code>，由于返回了<code>break</code>，则直接停止了</li></ul><h2 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h2><p>只是上面的简单重写很多时候满足不了需求，比如需要判断当文件不存在时、当路径包含xx时等条件，则需要用到<code>if</code></p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (表达式) &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false</li><li>直接比较变量和内容时，使用=或!=</li><li>~正则表达式匹配，~*不区分大小写的匹配，!~区分大小写的不匹配</li></ul><p>一些内置的条件判断：</p><ul><li>-f和!-f用来判断是否存在文件</li><li>-d和!-d用来判断是否存在目录</li><li>-e和!-e用来判断是否存在文件或目录</li><li>-x和!-x用来判断文件是否可执行</li></ul><h3 id="内置的全局变量"><a href="#内置的全局变量" class="headerlink" title="内置的全局变量"></a>内置的全局变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$args ：这个变量等于请求行中的参数，同$query_string</span><br><span class="line">$content_length ： 请求头中的Content-length字段。</span><br><span class="line">$content_type ： 请求头中的Content-Type字段。</span><br><span class="line">$document_root ： 当前请求在root指令中指定的值。</span><br><span class="line">$host ： 请求主机头字段，否则为服务器名称。</span><br><span class="line">$http_user_agent ： 客户端agent信息</span><br><span class="line">$http_cookie ： 客户端cookie信息</span><br><span class="line">$limit_rate ： 这个变量可以限制连接速率。</span><br><span class="line">$request_method ： 客户端请求的动作，通常为GET或POST。</span><br><span class="line">$remote_addr ： 客户端的IP地址。</span><br><span class="line">$remote_port ： 客户端的端口。</span><br><span class="line">$remote_user ： 已经经过Auth Basic Module验证的用户名。</span><br><span class="line">$request_filename ： 当前请求的文件路径，由root或alias指令与URI请求生成。</span><br><span class="line">$scheme ： HTTP方法（如http，https）。</span><br><span class="line">$server_protocol ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</span><br><span class="line">$server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。</span><br><span class="line">$server_name ： 服务器名称。</span><br><span class="line">$server_port ： 请求到达服务器的端口号。</span><br><span class="line">$request_uri ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。</span><br><span class="line">$uri ： 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。</span><br><span class="line">$document_uri ： 与$uri相同。</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">访问链接是：http:<span class="comment">//localhost:88/test1/test2/test.php </span></span><br><span class="line">网站路径是：/var/www/html</span><br><span class="line"><span class="variable">$host</span>：localhost</span><br><span class="line"><span class="variable">$server_port</span>：<span class="number">88</span></span><br><span class="line"><span class="variable">$request_uri</span>：http:<span class="comment">//localhost:88/test1/test2/test.php</span></span><br><span class="line"><span class="variable">$document_uri</span>：/test1/test2/test.php</span><br><span class="line"><span class="variable">$document_root</span>：/var/www/html</span><br><span class="line"><span class="variable">$request_filename</span>：/var/www/html/test1/test2/test.php</span><br></pre></td></tr></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果文件不存在则返回400</span></span><br><span class="line"><span class="attribute">if</span> (!-f <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">400</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 如果host不是xuexb.com，则301到xuexb.com中</span></span><br><span class="line"><span class="attribute">if</span> ( <span class="variable">$host</span> != <span class="string">'xuexb.com'</span> )&#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> https://xuexb.com/<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 如果请求类型不是POST则返回405</span></span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$request_method</span> = POST) &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">405</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 如果参数中有 a=1 则301到指定域名</span></span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$args</span> <span class="regexp">~ a=1)</span> &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^</span> http://example.com/ <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在某种场景下可结合<code>location</code>规则来使用，如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问 /test.html 时</span></span><br><span class="line"><span class="attribute">location</span> = /test.html &#123;</span><br><span class="line">    <span class="comment"># 默认值为xiaowu</span></span><br><span class="line">    <span class="attribute">set</span> <span class="variable">$name</span> xiaowu;</span><br><span class="line">    <span class="comment"># 如果参数中有 name=xx 则使用该值</span></span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$args</span> <span class="regexp">~* name=(\w+?)(&amp;|$))</span> &#123;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$name</span> <span class="variable">$1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 301</span></span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^</span> /<span class="variable">$name</span>.html <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面表示：</p><ul><li>/test.html =&gt; /xiaowu.html</li><li>/test.html?name=ok =&gt; /ok.html?name=ok</li></ul><h2 id="location"><a href="#location" class="headerlink" title="location"></a>location</h2><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>在<code>server</code>块中使用，如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123; </span><br><span class="line">    <span class="attribute">location</span> 表达式 &#123;    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>location表达式类型</p><ul><li>如果直接写一个路径，则匹配该路径下的</li><li>~ 表示执行一个正则匹配，区分大小写</li><li>~* 表示执行一个正则匹配，不区分大小写</li><li>^~ 表示普通字符匹配。使用前缀匹配。如果匹配成功，则不再匹配其他location。</li><li>= 进行普通字符精确匹配。也就是完全匹配。</li></ul><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><ol><li>等号类型（=）的优先级最高。一旦匹配成功，则不再查找其他匹配项。</li><li>^~类型表达式。一旦匹配成功，则不再查找其他匹配项。</li><li>正则表达式类型（~ ~*）的优先级次之。如果有多个location的正则能匹配的话，则使用正则表达式最长的那个。</li><li>常规字符串匹配类型。按前缀匹配。</li></ol><h3 id="例子-假地址掩饰真地址"><a href="#例子-假地址掩饰真地址" class="headerlink" title="例子 - 假地址掩饰真地址"></a>例子 - 假地址掩饰真地址</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment"># 用 xxoo_admin 来掩饰 admin</span></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="comment"># 使用break拿一旦匹配成功则忽略后续location</span></span><br><span class="line">        <span class="attribute">rewrite</span> /xxoo_admin /admin <span class="literal">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 访问真实地址直接报没权限</span></span><br><span class="line">    <span class="attribute">location</span> /admin &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.toolnb.com/tools/rewriteTools.html" target="_blank" rel="noopener">https://www.toolnb.com/tools/rewriteTools.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;伪静态&quot;&gt;&lt;a href=&quot;#伪静态&quot; class=&quot;headerlink&quot; title=&quot;伪静态&quot;&gt;&lt;/a&gt;伪静态&lt;/h1&gt;&lt;p&gt;伪静态是一种可以把文件后缀改成任何可能的一种方法，如果我想把PHP文件伪静态成html文件，这种相当简单的。&lt;br&gt;nginx里使用
      
    
    </summary>
    
    
      <category term="nginx" scheme="http://wumuwumu.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>spring数据库事务</title>
    <link href="http://wumuwumu.github.io/2019/09/01/spring%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/"/>
    <id>http://wumuwumu.github.io/2019/09/01/spring数据库事务/</id>
    <published>2019-09-01T12:22:24.000Z</published>
    <updated>2019-10-14T09:01:08.295Z</updated>
    
    <content type="html"><![CDATA[<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="PlatformTransactionManager"><a href="#PlatformTransactionManager" class="headerlink" title="PlatformTransactionManager"></a>PlatformTransactionManager</h2><p>PlatformTransactionManager接口中定义了三个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Public interface <span class="title">PlatformTransactionManager</span><span class="params">()</span>...</span>&#123;  </span><br><span class="line">    <span class="comment">// Return a currently active transaction or create a new one, according to the specified propagation behavior（根据指定的传播行为，返回当前活动的事务或创建一个新事务。）</span></span><br><span class="line">    <span class="function">TransactionStatus <span class="title">getTransaction</span><span class="params">(TransactionDefinition definition)</span> <span class="keyword">throws</span> TransactionException</span>; </span><br><span class="line">    <span class="comment">// Commit the given transaction, with regard to its status（使用事务目前的状态提交事务）</span></span><br><span class="line">    <span class="function">Void <span class="title">commit</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException</span>;  </span><br><span class="line">    <span class="comment">// Perform a rollback of the given transaction（对执行的事务进行回滚）</span></span><br><span class="line">    <span class="function">Void <span class="title">rollback</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException</span>;  </span><br><span class="line">    &#125; </span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>我们刚刚也说了Spring中PlatformTransactionManager根据不同持久层框架所对应的接口实现类,几个比较常见的如下图所示</p><p><img src="http://wumu.sciento.cn/20190901203705.png" alt="PlatformTransactionManager根据不同持久层框架所对应的接口实现"></p><p>比如我们在使用JDBC或者iBatis（就是Mybatis）进行数据持久化操作时,我们的xml配置通常如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="TransactionDefinition"><a href="#TransactionDefinition" class="headerlink" title="TransactionDefinition"></a>TransactionDefinition</h2><p>事务管理器接口 <strong>PlatformTransactionManager</strong> 通过 <strong>getTransaction(TransactionDefinition definition)</strong> 方法来得到一个事务，这个方法里面的参数是 <strong>TransactionDefinition类</strong> ，这个类就定义了一些基本的事务属性。</p><p><strong>那么什么是事务属性呢？</strong></p><p>事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。事务属性包含了5个方面。 </p><p><img src="http://wumu.sciento.cn/20190901203901.png" alt=""></p><h3 id="TransactionDefinition接口中的方法如下："><a href="#TransactionDefinition接口中的方法如下：" class="headerlink" title="TransactionDefinition接口中的方法如下："></a>TransactionDefinition接口中的方法如下：</h3><p>TransactionDefinition接口中定义了5个方法以及一些表示事务属性的常量比如隔离级别、传播行为等等的常量。</p><p>我下面只是列出了TransactionDefinition接口中的方法而没有给出接口中定义的常量，该接口中的常量信息会在后面依次介绍到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionDefinition</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 返回事务的传播行为</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPropagationBehavior</span><span class="params">()</span></span>; </span><br><span class="line">    <span class="comment">// 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getIsolationLevel</span><span class="params">()</span></span>; </span><br><span class="line">    <span class="comment">// 返回事务必须在多少秒内完成</span></span><br><span class="line">    <span class="comment">//返回事务的名字</span></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span>；</span></span><br><span class="line"><span class="function">    <span class="keyword">int</span> <span class="title">getTimeout</span><span class="params">()</span></span>;  </span><br><span class="line">    <span class="comment">// 返回是否优化为只读事务。</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isReadOnly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TransactionStatus"><a href="#TransactionStatus" class="headerlink" title="TransactionStatus"></a>TransactionStatus</h2><p>PlatformTransactionManager.getTransaction(…) 方法返回一个 TransactionStatus 对象。返回的TransactionStatus 对象可能代表一个新的或已经存在的事务（如果在当前调用堆栈有一个符合条件的事务）。TransactionStatus 接口提供了一个简单的控制事务执行和查询事务状态的方法。该接口定义如清单3所示：</p><h5 id="清单3-TransactionStatus-接口中定义的主要方法"><a href="#清单3-TransactionStatus-接口中定义的主要方法" class="headerlink" title="清单3. TransactionStatus 接口中定义的主要方法"></a>清单3. TransactionStatus 接口中定义的主要方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="keyword">public</span>  <span class="class"><span class="keyword">interface</span> <span class="title">TransactionStatus</span></span>&#123;``   ``<span class="function"><span class="keyword">boolean</span> <span class="title">isNewTransaction</span><span class="params">()</span></span>;``   ``<span class="function"><span class="keyword">void</span> <span class="title">setRollbackOnly</span><span class="params">()</span></span>;``   ``<span class="function"><span class="keyword">boolean</span> <span class="title">isRollbackOnly</span><span class="params">()</span></span>;``&#125;`</span><br></pre></td></tr></table></figure><h1 id="事务管理API分析"><a href="#事务管理API分析" class="headerlink" title="事务管理API分析"></a>事务管理API分析</h1><h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><p>隔离级别是指若干个并发的事务之间的隔离程度。TransactionDefinition 接口中定义了五个表示隔离级别的常量：</p><ul><li><p>TransactionDefinition.ISOLATION_DEFAULT：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是TransactionDefinition.ISOLATION_READ_COMMITTED。</p></li><li><p>TransactionDefinition.ISOLATION_READ_UNCOMMITTED：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读和不可重复读，因此很少使用该隔离级别。</p></li><li><p>TransactionDefinition.ISOLATION_READ_COMMITTED：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。</p></li><li><p>TransactionDefinition.ISOLATION_REPEATABLE_READ：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。即使在多次查询之间有新增的数据满足该查询，这些新增的记录也会被忽略。该级别可以防止脏读和不可重复读。</p></li><li><p>TransactionDefinition.ISOLATION_SERIALIZABLE：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</p></li></ul><h2 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h2><p>所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：</p><ul><li>TransactionDefinition.PROPAGATION_REQUIRED：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。</li><li>TransactionDefinition.PROPAGATION_REQUIRES_NEW：创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li><li>TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li><li>TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li><li>TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。</li><li>TransactionDefinition.PROPAGATION_MANDATORY：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</li><li>TransactionDefinition.PROPAGATION_NESTED：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</li></ul><p>这里需要指出的是，前面的六种事务传播行为是 Spring 从 EJB 中引入的，他们共享相同的概念。而 PROPAGATION_NESTED是 Spring 所特有的。以 PROPAGATION_NESTED 启动的事务内嵌于外部事务中（如果存在外部事务的话），此时，内嵌事务并不是一个独立的事务，它依赖于外部事务的存在，只有通过外部的事务提交，才能引起内部事务的提交，嵌套的子事务不能单独提交。如果熟悉 JDBC 中的保存点（SavePoint）的概念，那嵌套事务就很容易理解了，其实嵌套的子事务就是保存点的一个应用，一个事务中可以包括多个保存点，每一个嵌套子事务。另外，外部事务的回滚也会导致嵌套子事务的回滚。</p><h2 id="事务超时"><a href="#事务超时" class="headerlink" title="事务超时"></a>事务超时</h2><p>所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。</p><h2 id="事务的只读属性"><a href="#事务的只读属性" class="headerlink" title="事务的只读属性"></a>事务的只读属性</h2><p>事务的只读属性是指，对事务性资源进行只读操作或者是读写操作。所谓事务性资源就是指那些被事务管理的资源，比如数据源、 JMS 资源，以及自定义的事务性资源等等。如果确定只对事务性资源进行只读操作，那么我们可以将事务标志为只读的，以提高事务处理的性能。在 TransactionDefinition 中以 boolean 类型来表示该事务是否只读。</p><p>应用场合：</p><p>如果你一次执行单条查询语句，则没有必要启用事务支持，数据库默认支持SQL执行期间的读一致性；<br>如果你一次执行多条查询语句，例如统计查询，报表查询，在这种场景下，多条查询SQL必须保证整体的读一致性，否则，在前条SQL查询之后，后条SQL查询之前，数据被其他用户改变，则该次整体的统计查询将会出现读数据不一致的状态，此时，应该启用事务支持。<br>【注意是一次执行多次查询来统计某些信息，这时为了保证数据整体的一致性，要用只读事务】</p><p>怎样设置：</p><p>对于只读查询，可以指定事务类型为readonly，即只读事务。<br>由于只读事务不存在数据的修改，因此数据库将会为只读事务提供一些优化手段，例如Oracle对于只读事务，不启动回滚段，不记录回滚log。</p><p>（1）在JDBC中，指定只读事务的办法为： connection.setReadOnly(true);</p><p>（2）在Hibernate中，指定只读事务的办法为： session.setFlushMode(FlushMode.NEVER);<br>此时，Hibernate也会为只读事务提供Session方面的一些优化手段</p><p>（3）在Spring的Hibernate封装中，指定只读事务的办法为： bean配置文件中，prop属性增加“readOnly”<br>或者用注解方式@Transactional(readOnly=true)<br>【 if the transaction is marked as read-only, Spring will set the Hibernate Session’s flush mode to FLUSH_NEVER,<br>and will set the JDBC transaction to read-only】也就是说在Spring中设置只读事务是利用上面两种方式</p><h2 id="事务的回滚规则"><a href="#事务的回滚规则" class="headerlink" title="事务的回滚规则"></a>事务的回滚规则</h2><p>通常情况下，如果在事务中抛出了未检查异常（继承自 RuntimeException 的异常），则默认将回滚事务。如果没有抛出任何异常，或者抛出了已检查异常，则仍然提交事务。这通常也是大多数开发者希望的处理方式，也是 EJB 中的默认处理方式。但是，我们可以根据需要人为控制事务在抛出某些未检查异常时任然提交事务，或者在抛出某些已检查异常时回滚事务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;接口&quot;&gt;&lt;a href=&quot;#接口&quot; class=&quot;headerlink&quot; title=&quot;接口&quot;&gt;&lt;/a&gt;接口&lt;/h1&gt;&lt;h2 id=&quot;PlatformTransactionManager&quot;&gt;&lt;a href=&quot;#PlatformTransactionManager&quot;
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://wumuwumu.github.io/tags/mysql/"/>
    
      <category term="spring" scheme="http://wumuwumu.github.io/tags/spring/"/>
    
  </entry>
  
</feed>
