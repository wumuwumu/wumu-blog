<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wumu&#39;s blog</title>
  
  <subtitle>wumu的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wumuwumu.github.io/"/>
  <updated>2019-07-27T10:01:48.000Z</updated>
  <id>http://wumuwumu.github.io/</id>
  
  <author>
    <name>wumu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql修改字符集</title>
    <link href="http://wumuwumu.github.io/2019/07/27/mysql/mysql%E4%BF%AE%E6%94%B9%E5%AD%97%E7%AC%A6%E9%9B%86/"/>
    <id>http://wumuwumu.github.io/2019/07/27/mysql/mysql修改字符集/</id>
    <published>2019-07-27T08:55:17.000Z</published>
    <updated>2019-07-27T10:01:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ol><li>字符集（character set）：定义了字符以及字符的编码。</li><li>字符序（collation）：定义了字符的比较规则。</li></ol><h1 id="Mysql字符集"><a href="#Mysql字符集" class="headerlink" title="Mysql字符集"></a>Mysql字符集</h1><ol><li>一个字符集对应至少一种字符序（一般是1对多）。</li><li>两个不同的字符集不能有相同的字符序。</li><li>每个字符集都有默认的字符序。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 第一种方式</span><br><span class="line">SHOW CHARACTER SET;</span><br><span class="line"></span><br><span class="line">-- 第二种方式</span><br><span class="line">use information_schema;</span><br><span class="line">select * from CHARACTER_SETS;</span><br><span class="line"></span><br><span class="line">-- 例子</span><br><span class="line">SHOW CHARACTER SET WHERE Charset=&quot;utf8&quot;;</span><br><span class="line">SHOW CHARACTER SET LIKE &quot;utf8%&quot;;</span><br></pre></td></tr></table></figure><h1 id="Mysql字符序"><a href="#Mysql字符序" class="headerlink" title="Mysql字符序"></a>Mysql字符序</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 第一种方式</span><br><span class="line">SHOW COLLATION WHERE Charset = &apos;utf8&apos;;</span><br><span class="line"></span><br><span class="line">-- 第二种方式</span><br><span class="line">USE information_schema;</span><br><span class="line">SELECT * FROM COLLATIONS WHERE CHARACTER_SET_NAME=&quot;utf8&quot;;</span><br></pre></td></tr></table></figure><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><p>字符序的命名，以其对应的字符集作为前缀，如下所示。比如字符序<code>utf8_general_ci</code>，标明它是字符集<code>utf8</code>的字符序。</p><p>更多规则可以参考 <a href="https://dev.mysql.com/doc/refman/5.7/en/charset-collation-names.html" target="_blank" rel="noopener">官方文档</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[information_schema]&gt; SELECT CHARACTER_SET_NAME, COLLATION_NAME FROM COLLATIONS WHERE CHARACTER_SET_NAME=&quot;utf8&quot; limit 2;</span><br></pre></td></tr></table></figure><h1 id="设置修改"><a href="#设置修改" class="headerlink" title="设置修改"></a>设置修改</h1><ol><li><p>修改数据库字符集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ALTER DATABASE db_name DEFAULT CHARACTER SET character_name [COLLATE ...];</span><br><span class="line">把表默认的字符集和所有字符列（CHAR,VARCHAR,TEXT）改为新的字符集：</span><br><span class="line">ALTER TABLE tbl_name CONVERT TO CHARACTER SET character_name [COLLATE ...]</span><br><span class="line">如：ALTER TABLE logtest CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure></li><li><p>修改表的默认字符集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tbl_name DEFAULT CHARACTER SET character_name [COLLATE...];</span><br><span class="line">如：ALTER TABLE logtest DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure></li><li><p>修改字段的字符集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE tbl_name CHANGE c_name c_name CHARACTER SET character_name [COLLATE ...];</span><br><span class="line">如：ALTER TABLE logtest CHANGE title title VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure></li><li><p>查看数据库编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE DATABASE db_name;</span><br></pre></td></tr></table></figure></li><li><p>查看表编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE TABLE tbl_name;</span><br></pre></td></tr></table></figure></li><li><p>查看字段编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW FULL COLUMNS FROM tbl_name;</span><br></pre></td></tr></table></figure></li><li><p>查看系统的编码字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES WHERE Variable_name LIKE &apos;character\_set\_%&apos; OR Variable_name LIKE &apos;collation%&apos;;</span><br></pre></td></tr></table></figure></li><li><p>MySQL字符集设置</p><p>系统变量：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">– character_set_server：默认的内部操作字符集</span><br><span class="line"></span><br><span class="line">– character_set_client：客户端来源数据使用的字符集</span><br><span class="line"></span><br><span class="line">– character_set_connection：连接层字符集</span><br><span class="line"></span><br><span class="line">– character_set_results：查询结果字符集</span><br><span class="line"></span><br><span class="line">– character_set_database：当前选中数据库的默认字符集</span><br><span class="line"></span><br><span class="line">– character_set_system：系统元数据(字段名等)字符集</span><br><span class="line"></span><br><span class="line">– 还有以collation_开头的同上面对应的变量，用来描述字符序。</span><br></pre></td></tr></table></figure><p>用introducer指定文本字符串的字符集：</p><p>– 格式为：[_charset] ‘string’ [COLLATE collation]</p><p>– 例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">• <span class="keyword">SELECT</span> _latin1 ‘<span class="keyword">string</span>’;</span><br><span class="line"></span><br><span class="line">• <span class="keyword">SELECT</span> _utf8 ‘你好’ <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line"></span><br><span class="line">–-  由introducer修饰的文本字符串在请求过程中不经过多余的转码，直接转换为内部字符集处理。</span><br></pre></td></tr></table></figure><h4 id="MySQL中的字符集转换过程"><a href="#MySQL中的字符集转换过程" class="headerlink" title="MySQL中的字符集转换过程"></a>MySQL中的字符集转换过程</h4><ol><li>MySQL Server收到请求时将请求数据从character_set_client转换为character_set_connection；</li><li>进行内部操作前将请求数据从character_set_connection转换为内部操作字符集，其确定方法如下：</li></ol><p>• 使用每个数据字段的CHARACTER SET设定值；</p><p>• 若上述值不存在，则使用对应数据表的DEFAULT CHARACTER SET设定值(MySQL扩展，非SQL标准)；</p><p>• 若上述值不存在，则使用对应数据库的DEFAULT CHARACTER SET设定值；</p><p>• 若上述值不存在，则使用character_set_server设定值。</p></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.cnblogs.com/chyingp/p/mysql-character-set-collation.html" target="_blank" rel="noopener">https://www.cnblogs.com/chyingp/p/mysql-character-set-collation.html</a></p><p><a href="https://www.cnblogs.com/qiumingcheng/p/10336170.html" target="_blank" rel="noopener">https://www.cnblogs.com/qiumingcheng/p/10336170.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;字符集（character set）：定义了字符以及字符的编码。&lt;/li&gt;
&lt;li&gt;字符序（collation）：定义了字符的比
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://wumuwumu.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>管理Odoo服务器实例</title>
    <link href="http://wumuwumu.github.io/2019/06/18/Odoo%2012%E5%BC%80%E5%8F%91%E8%80%85%E6%8C%87%E5%8D%97%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E7%AE%A1%E7%90%86Odoo%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E4%BE%8B/"/>
    <id>http://wumuwumu.github.io/2019/06/18/Odoo 12开发者指南第二章 管理Odoo服务器实例/</id>
    <published>2019-06-18T06:02:38.000Z</published>
    <updated>2019-06-18T10:41:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>全书完整目录请见：<a href="https://alanhou.org/odoo12-cookbook/" target="_blank" rel="noopener">Odoo 12开发者指南（Cookbook）第三版</a></p><p>本章中，我们将讲解如下内容：</p><ul><li>配置插件路径</li><li>更新插件模块列表</li><li>标准化你的实例目录布局</li><li>安装并升级本地插件模块</li><li>对插件应用修改</li><li>应用及尝试建议的拉取请求</li></ul><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在<a href="https://alanhou.org/installing-odoo-development-environment/" target="_blank" rel="noopener">第一章 安装Odoo开发环境</a>中，我们看了如何使用与编辑器一同发布的标准核心插件来设置 Odoo 实例。本章集中讲解为 Odoo 实例添加非核心插件。Odoo中，你可以从多个目录中加载插件。此外，推荐你将第三方插件（如OCA模块）或你自定义的插件放在一个单独的文件夹中，这样可以避免与 Odoo 核心模块产生冲突。甚至Odoo 企业版也是一种类型的插件目录，你需要像普通插件目录一样加载它。</p><blockquote><p>ℹ️<strong>有关用词 – 插件(add-on) vs. 模块(module)</strong></p><p>本书中，我们使用插件或插件模块来指代 Odoo 所预期安装的 Python 包。用户界面常使用应用（app）或模块的表达 ，但我们更愿意保留模块一词来表示Python模块或包，它们不一定是 Odoo 插件，而应用（app）来表示适当定义为应用的插件模块，表示它不是Odoo主菜单中的入口。</p></blockquote><h2 id="配置插件路径"><a href="#配置插件路径" class="headerlink" title="配置插件路径"></a>配置插件路径</h2><p>通过addons_path参数的配置，你可以在 Odoo 中加载自己的插件模块。在Odoo初始化一个新数据库时，它会搜索在addons_path配置参数中给定的这些目录。addons_path会在这些目录中搜索潜在的插件模块。addons_path中所列出的目录预期应包含子目录，每个子目录是一个插件模块。在数据库初始化完成后，你将能够安装这些目录中所给出的模块。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>这一部分假定你已经准备好了实例并生成了配置文件，如在<a href="https://alanhou.org/installing-odoo-development-environment/" target="_blank" rel="noopener">第一章 安装Odoo开发环境</a>中<em>在一个文件中存储实例配置</em>一节所描述。Odoo的源码存放在~/odoo-dev/odoo中，而配置文件存放在~/odoo-dev/myinstance.cfg中。</p><h3 id="如何配置…"><a href="#如何配置…" class="headerlink" title="如何配置…"></a>如何配置…</h3><p>按如下步骤在实例的addons_path中添加~/odoo-dev/local-addons目录：</p><ol><li><p>编辑你的实例的配置文件，即 ~/odoo-dev/my-instance.cfg。</p></li><li><p>定位到以addons_path =开头一行，默认，你会看到如下内容：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addons_path = ~/odoo-dev/odoo/odoo/addons,~/odoo-dev/odoo/add-ons</span><br></pre></td></tr></table></figure><p>   译者注：</p><p>   当前默认生成的配置文件中为绝对路径，且仅包含xxx/odoo/addons</p><ol start="3"><li>修改该行，添加一个逗号（英文半角），并接你想想要添加为addons_的目录名称，如以下代码所示：</li></ol>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addons_path = ~/odoo-dev/odoo/odoo/addons,~/odoo-dev/odoo/addons,~/odoo-dev/local-addons</span><br></pre></td></tr></table></figure><ol start="4"><li><p>重启你的实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ~/odoo-dev/odoo/odoo-bin -c my-instance.cfg</span><br></pre></td></tr></table></figure></li></ol><h3 id="运行原理…"><a href="#运行原理…" class="headerlink" title="运行原理…"></a>运行原理…</h3><p>在重启 Odoo 时，会读取配置文件。addons_path变量的值应为一个逗号分隔的目录列表。可接受相对路径，但它们是相对于当前工作目录的，因此应在配置文件中尽量避免。</p><p>至此，~/odoo-dev/local-addons中包含的新插件尚不在该实例的可用模块列表中。为此，你需要执行一个额外的操作，在下一部分<em>更新插件模块列表</em>中会进行讲解。</p><h3 id="扩展知识…"><a href="#扩展知识…" class="headerlink" title="扩展知识…"></a>扩展知识…</h3><p>在第一次调用 odoo-bin脚本来初始化新数据库时，你可以传递一个带逗号分隔目录列表的–addons-path命令行参数。这会以所提供插件路径中所找到的所有插件来初始化可用插件模块列表。这么做时，你要显式地包含基础插件目录（odoo/odoo/addons）以及核心插件目录（odoo/addons）。</p><p>与前面稍有不同的是本地插件目录不能为空（<strong>译者注：</strong>请先阅读下面的小贴士），它必须要至少包含一个子目录，并包含插件模块的最小化结构。在<a href="https://alanhou.org/creating-odoo-add-on-modules/" target="_blank" rel="noopener">第四章 创建Odoo插件模块</a>中，我们会来看如何编写你自己的模块。同时，这里有一个生成内容来满足Odoo要求的快捷版黑科技：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p ~/odoo-dev/local-addons/dummy$ touch ~/odoo-dev/local-addons/dummy/__init__.py$ echo &apos;&#123;&quot;name&quot;: &quot;dummy&quot;, &quot;installable&quot;: False&#125;&apos; &gt; \~/odoo-dev/local-addons/dummy/__manifest__.py</span><br></pre></td></tr></table></figure><p>你可以使用–save选项来保存配置文件的路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ odoo/odoo-bin -d mydatabase \--add-ons-path=&quot;odoo/odoo/addons,odoo/addons,~/odoo-dev/local-addons&quot; \--save -c ~/odoo-dev/my-instance.cfg --stop-after-init</span><br></pre></td></tr></table></figure><p>本例中，使用相对路径不会有问题，因为它们会在配置文件中转化为绝对路径。</p><blockquote><p><strong>小贴士：</strong>因为Odoo仅当从命令行中设置路径时在插件路径的目录中查看插件，而不是在从配置文件中加载路径的时候，dummy已不再必要。因此，你可以删除它（或保留到你确定不需要新建一个配置文件时）。</p></blockquote><h2 id="更新插件模块列表"><a href="#更新插件模块列表" class="headerlink" title="更新插件模块列表"></a>更新插件模块列表</h2><p>我们在前面的部分已经说到，在向插件路径添加目录时，仅仅重启Odoo服务是不足以安装其中一个新插件模块的。Odoo还需要有一个指定动作来扫描路径并更新可用插件模块的列表。</p><h3 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h3><p>启动你的实例并使用管理员账号连接它。然后，激活开发者模式（如果你不知道如何激活开发者模式，请参见<a href="https://alanhou.org/installing-odoo-development-environment/" target="_blank" rel="noopener">第一章 安装Odoo开发环境</a>）。</p><h3 id="如何更新…"><a href="#如何更新…" class="headerlink" title="如何更新…"></a>如何更新…</h3><p>要更新你实例中的可用插件模块列表，你需要执行如下步骤：</p><ol><li>打开Apps菜单</li><li>点击Update Apps List：<br>[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902052063.jpg" alt="Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902052063.jpg)" title="">                </div>                <div class="image-caption">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902052063.jpg)</div>            </figure></li><li>在弹出对话框中，点击Update按钮：<br>[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902070776.jpg" alt="Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902070776.jpg)" title="">                </div>                <div class="image-caption">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050902070776.jpg)</div>            </figure></li><li>在更新的最后，你可以点击Apps入口来查看已更新的可用插件模块列表。你将需要删除Apps搜索框中的默认过滤器来查看所有模块。</li></ol><h3 id="运行原理…-1"><a href="#运行原理…-1" class="headerlink" title="运行原理…"></a>运行原理…</h3><p>在点击了Update按钮之后，Odoo会读取插件路径配置变量。对于列表中的每一个目录，它会查看包含保存在插件模块目录中名为<strong>manifest</strong>.py的插件声明文件的直接子目录。Odoo读取声明内容，并预期查找其中的Python字典。除非声明内容中包含一个键installable的值为False，插件模块的元数据就会存储在数据库中。如果模块已存在，则更新相关信息。否则，会创建一条新记录。如果此前可用的插件模块未找到，则从列表中删除该记录。</p><blockquote><p>ℹ️仅在初始化数据库后添加了新的插件路径时才需要更新应用列表。如果你在初始化数据库之前在配置文件中添加了新插件路径，那么就无需手动更新模块列表。</p></blockquote><h2 id="标准化你的实例目录布局"><a href="#标准化你的实例目录布局" class="headerlink" title="标准化你的实例目录布局"></a>标准化你的实例目录布局</h2><p>我们推荐你在开发和生产环境都使用相似的目录布局。这一标准化会在你要执行运维时体现出用处，它也会缓解你日常工作的压力。</p><p>这一部分创建将相似生命周期或相似用途的文件分组放在标准化子目录中的目录结构。请自由按照自己的需求来调整这一结构，但请确保你将这一结构在某处进行记录存档。</p><h3 id="如何标准化…"><a href="#如何标准化…" class="headerlink" title="如何标准化…"></a>如何标准化…</h3><p>创建所推荐实例布局，你需要执行如下步骤：</p><p><strong>译者注：</strong>读者也可直接使用 Alan 在 GitHub 上准备的<a href="https://github.com/alanhou/odoo12-cookbook/tree/master/Chapter02" target="_blank" rel="noopener">安装脚本</a>进行操作</p><ol><li><p>为实例创建一个目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir ~/odoo-dev/projectname$ cd ~/odoo-dev/projectname</span><br></pre></td></tr></table></figure></li><li><p>在名为env/的子目录中创建一个Python虚拟环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ virtualenv -p python3 env</span><br></pre></td></tr></table></figure></li><li><p>创建一些子目录，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir src local bin filestore logs</span><br></pre></td></tr></table></figure><p>这些子目录的功能如下：</p><ul><li>src/：这包含Odoo本身的一个拷贝，以及一些第三方插件项目（我们在下一步中添加了Odoo源码）</li><li>local/：这用于保存你针对具体实例的插件</li><li>bin/：这包含各类帮助可执行shell脚本</li><li>filestore/：这用于文件存储</li><li>logs/（可选）：这用于存储服务日志文件</li></ul></li><li><p>克隆Odoo并安装所需依赖包（参见</p><p>第一章 安装Odoo开发环境</p><p>获取更多内容）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/odoo/odoo.git src/odoo</span><br><span class="line">$ env/bin/pip3 install -r src/odoo/requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>以bin/odoo保存如下shell脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ROOT=$(dirname <span class="variable">$0</span>)/..</span><br><span class="line">PYTHON=<span class="variable">$ROOT</span>/env/bin/python3</span><br><span class="line">ODOO=<span class="variable">$ROOT</span>/src/odoo/odoo-bin</span><br><span class="line"><span class="variable">$PYTHON</span> <span class="variable">$ODOO</span> -c <span class="variable">$ROOT</span>/projectname.cfg <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line"><span class="built_in">exit</span> $?</span><br></pre></td></tr></table></figure></li><li><p>让该脚本可执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x bin/odoo</span><br></pre></td></tr></table></figure></li><li><p>创建一个空的本地模块dummy：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p local/dummy</span><br><span class="line">$ touch local/dummy/__init__.py</span><br><span class="line">$ echo &apos;&#123;&quot;name&quot;: &quot;dummy&quot;, &quot;installable&quot;: False&#125;&apos; &gt;\local/dummy/__manifest__.py</span><br></pre></td></tr></table></figure><ol start="8"><li>为你的实例生成配置文件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bin/odoo --stop-after-init --save \ --addons-path src/odoo/odoo/addons,src/odoo/addons,local \ --data-dir filestore</span><br></pre></td></tr></table></figure><ol start="9"><li>添加一个.gitignore文件，用于告诉GitHub排除这些给定目录，这样Git在提交代码时就会忽略掉这些目录，例如 filestore/, env/, logs/和src/：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dotfiles, with exceptions:</span></span><br><span class="line">.*</span><br><span class="line">!.gitignore</span><br><span class="line"><span class="comment"># python compiled files</span></span><br><span class="line">*.py[co]</span><br><span class="line"><span class="comment"># emacs backup files</span></span><br><span class="line">*~</span><br><span class="line"><span class="comment"># not tracked subdirectories</span></span><br><span class="line">/env/</span><br><span class="line">/src/</span><br><span class="line">/filestore/</span><br><span class="line">/logs/</span><br></pre></td></tr></table></figure><ol start="10"><li>为这个实例创建一个Git仓库并将已添加的文件添加到Git中：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">"initial version of projectname"</span></span><br></pre></td></tr></table></figure><h3 id="运行原理…-2"><a href="#运行原理…-2" class="headerlink" title="运行原理…"></a>运行原理…</h3><p>我们生成了一个有明确标签目录和独立角色的干净的目录结构。我使用了不同的目录来存储如下内容：</p><ul><li>由其它人所维护的代码（src/中）</li><li>本地相关的具体代码</li><li>实例的文件存储</li></ul><p>通过为每个项目建一个virtualenv环境，我们可以确保该项目的依赖文件不会与其它项目的依赖产生冲突，这些项目你可能运行着不同的Odoo版本或使用了不同的第三方插件模块，这将需要不同版本的Python依赖。这当然也会带来一部分磁盘空间的开销。</p><p>以类似的方式，通过为我们不同的项目使用不同的Odoo拷贝以及第三方插件模块，我们可以让每个项目单独的进行推进并仅在需要时在这些实例上安装更新，因此也减少了引入回退的风险。</p><p>bin/odoo允许我们不用记住各个路径或激活虚拟环境就可以运行服务。这还为我们设置了配置文件。你可以在其中添加其它脚本来协助你的日常工作。例如，你可以添加一个脚本来检查运行实例所需的第三方项目。</p><p>有关配置文件，我们仅展示了这里需要设置的最小化选项，但很明显你可以设置更多，例如数据库名、数据库过滤器或项目所监听的端口。有关这一话题的更多信息，请参见<a href="https://alanhou.org/installing-odoo-development-environment/" target="_blank" rel="noopener">第一章 安装Odoo开发环境</a>。</p><p>最后，通过在Git仓库中管理所有这些，在不同的电脑上复制这一设置及在团队中分享开发内容变得相当容易。</p><blockquote><p><strong>小贴士：</strong>加速贴士</p><p>要加速项目的创建，你可以创建一个包含空结构的模板仓库，并为每个项目复制（fork）该仓库。这会省却你重新输入bin/odoo脚本、.gitignore及其它所需模板文件（持续集成配置、README.md、ChangeLog等等）所花费的时间。</p></blockquote><h3 id="参见内容"><a href="#参见内容" class="headerlink" title="参见内容"></a>参见内容</h3><p>如果你喜欢这种方法，我们建议你尝试<a href="https://alanhou.org/server-deployment/" target="_blank" rel="noopener">第三章 服务器部署</a>中的使用 Docker 运行 Odoo 一部分的内容。</p><h3 id="扩展知识…-1"><a href="#扩展知识…-1" class="headerlink" title="扩展知识…"></a>扩展知识…</h3><p>复杂模块的开发要求有各类配置选项，在想要尝试任何配置选项时都会要更新配置文件。更新配置常常是一件头痛的事，避免它的一种方式是通过命令行传递所有配置选项，如下：</p><ol><li>手动激活虚拟环境：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> env/bin/activate</span><br></pre></td></tr></table></figure><ol start="2"><li>进行Odoo源代码目录：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> src/odoo</span><br></pre></td></tr></table></figure><ol start="3"><li>运行服务：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./odoo-bin --addons-path=addons,../../<span class="built_in">local</span> -d <span class="built_in">test</span>-12 -i account,sale,purchase --<span class="built_in">log</span>-level=debug</span><br></pre></td></tr></table></figure><p>第三步中，我们直接通过命令行传递了一些参数。第一个是–addons-path，它加载Odoo的核心插件目录addons，以及你自己的插件目录local，在其中你可以放自己的插件模块。选项-d会使用test-12数据库或者在该数据库不存在时新建一个数据库。选项-i 会安装会计、销售和采购模块。接着，我们传递了log-level选项来将日志级别提升为debug，这样日志中会显示更多的信息。</p><blockquote><p>ℹ️通过使用命令行，你可以快速地修改配置选项。你也可以在Terminal中查看实时日志。所有可用选项可参见<a href="https://alanhou.org/installing-odoo-development-environment/" target="_blank" rel="noopener">第一章 安装Odoo开发环境</a>，或使用-help命令来查看所有的选项列表及各个选项的描述。</p></blockquote><h2 id="安装并升级本地插件模块"><a href="#安装并升级本地插件模块" class="headerlink" title="安装并升级本地插件模块"></a>安装并升级本地插件模块</h2><p>Odoo 功能的核心来自于它的插件模块。Odoo自带的插件是你所拥有的财富，同时你也可以在应用商店下载一些插件模块或者自己写。</p><p>这一部分中，我们将展示如何通过网页界面及命令行来安装并升级插件模块。</p><p>对这些操作使用命令行的主要好处包含可以同时作用于一个以上的插件以及在安装或升级的过程中可以清晰地浏览到服务端日志，对于开发模式或编写脚本安装实例时都非常有用。</p><h3 id="准备工作-2"><a href="#准备工作-2" class="headerlink" title="准备工作"></a>准备工作</h3><p>确保你有一个运行中的 Odoo 实例，且数据库已初始化、插件路径已进行恰当地设置。在这一部分中，我们将安装/升级一些插件模块。</p><h3 id="如何安装升级…"><a href="#如何安装升级…" class="headerlink" title="如何安装升级…"></a>如何安装升级…</h3><p>安装或升级插件有两种方法-可以使用网页界面或命令行。</p><h4 id="通过网页界面"><a href="#通过网页界面" class="headerlink" title="通过网页界面"></a>通过网页界面</h4><p>可按照如下步骤来使用网页界面安装新的插件模块到数据库中：</p><ol><li>使用管理员账户连接实例并打开Apps菜单<br>[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906002399.jpg" alt="Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906002399.jpg)" title="">                </div>                <div class="image-caption">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906002399.jpg)</div>            </figure></li><li>使用搜索框来定位你想要安装的插件。这里有一些帮助你完成该任务的操作指南：<ul><li>激活Not Installed过滤器</li><li>如果你要查找一个具体的功能插件而不是广泛的功能插件，删除Apps过滤器</li><li>在搜索框中输入模块名的一部分并使用它来作为模块过滤器</li><li>你会发现使用列表视图可以阅读到更多的信息</li></ul></li><li>点击卡片中模块名下的Install按钮。</li></ol><p>注意有些Odoo插件模块需要有外部Python依赖，如果你的系统中未安装该Python依赖，那么 Odoo 会中止安装并显示如下的对话框：</p><p>[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906125210.jpg" alt="Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906125210.jpg)" title="">                </div>                <div class="image-caption">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906125210.jpg)</div>            </figure><br><strong>译者注：</strong>按正常安装不会出现一错误，需通过 pip uninstall pyldap 才能复现这一错误</p><p>修复这一问题，仅需在你的系统中安装相关的Python依赖即可。</p><p>要升级已安装到数据库的模块，使用如下步骤：</p><ol><li>使用管理员账户连接到实例</li><li>打开Apps菜单</li><li>点击Apps:<br>[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906203077.jpg" alt="Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906203077.jpg)" title="">                </div>                <div class="image-caption">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906203077.jpg)</div>            </figure></li><li>使用搜索框来定位你所安装的插件。有如下的小贴士：<ul><li>激活Installed过滤器</li><li>如果你要查找一个具体的功能插件而不是广泛的功能插件，删除Apps过滤器</li><li>在搜索框中输入部分插件模块的名称并按下 Enter 来使用它作为模块过滤器。例如，输入CRM并按下 Enter 来搜索CRM应用</li><li>你会发现使用列表视图可以阅读到更多的信息</li></ul></li><li>点击卡片右上角的的三个点，然后点击Upgrade选项：</li></ol><p>[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906265357.jpg" alt="Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906265357.jpg)" title="">                </div>                <div class="image-caption">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906265357.jpg)</div>            </figure></p><p>激活开发者模式来查看模块的技术名称。如果你不知道如何激活开发者模式，请参见<a href="https://alanhou.org/installing-odoo-development-environment/" target="_blank" rel="noopener">第一章 安装Odoo开发环境</a>：</p><p>[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906302261.jpg" alt="Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906302261.jpg)" title="">                </div>                <div class="image-caption">Odoo 12开发者指南第二章 管理Odoo服务器实例](https://alanhou.org/homepage/wp-content/uploads/2019/05/2019050906302261.jpg)</div>            </figure></p><p>在激活开发者模式之后，它会以红色显示模块的技术名称。如果你使用的是Odoo社区版，会看到一些带有Upgrade的附加应用。这些是Odoo企业版的应用，要想安装/使用它们，需要购买一个证书。</p><h4 id="通过命令行"><a href="#通过命令行" class="headerlink" title="通过命令行"></a>通过命令行</h4><p>要在你的数据库中安装新插件，可按照如下步骤：</p><ol><li><p>查找插件的名称。这是包含<strong>manifest</strong>.py文件的目录名，不带前面的路径。</p></li><li><p>停止实例。如果你在操作生产数据库，请进行备份。</p></li><li><p>运行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">odoo/odoo-bin -c instance.cfg -d dbname -i addon1,addon2 --stop-after-init</span><br></pre></td></tr></table></figure><p>译者注：</p><p>请将addon1,addon2替换为你所要安装的插件名</p></li></ol><blockquote><p><strong>小贴士：</strong>你可以省略掉-d dbname，因为这在配置文件中进行了设置。</p></blockquote><ol start="4"><li>重新启动实例</li></ol><h3 id="运行原理…-3"><a href="#运行原理…-3" class="headerlink" title="运行原理…"></a>运行原理…</h3><p>插件模块的安装和升级是两个紧密关联的操作，但有一些重要的区别，在下面两部分中进行了强调：</p><h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><p>在你安装插件时，Odoo以提供的名称检查它的可用插件列表中未安装插件。它还会检查该插件的依赖，并且如果有依赖的话，它会在安装插件前递归安装这些依赖。</p><p>单个模块的安装包含如下步骤：</p><ol><li>如果存在，运行插件preinit钩子</li><li>从Python源代码中加载模型定义并在必要时更新数据库结构（参见<a href="https://alanhou.org/application-models/" target="_blank" rel="noopener">第五章 应用模型</a>了解更多信息）</li><li>加载插件的数据文件并在必要时更新数据库内容（参见<a href="https://alanhou.org/odoo12-module-data/" target="_blank" rel="noopener">第七章 模块数据</a>了解更多信息）</li><li>如果实例中启用了演示数据则安装插件演示数据</li><li>如果存在，运行插件postinit钩子</li><li>运行对插件视图定义的验证</li><li>如果启用了演示数据并启用了测试，运行该插件的测试（参见<a href="https://alanhou.org/automated-test-cases/" target="_blank" rel="noopener">第十八章 自动化测试用例</a>了解更多信息）</li><li>在数据库中更新模块状态</li><li>从插件的翻译文件中更新数据库中的翻译（参见<a href="https://alanhou.org/internationalization/" target="_blank" rel="noopener">第十二章 国际化</a>了解更多信息）</li></ol><blockquote><p>ℹ️preinit和postinit钩子分别使用pre_init_hook和post_init_hook键名在<strong>manifest</strong>.py文件中定义。这些钩子用于在插件模块的安装之前及之后触发Python函数。参见<a href="https://alanhou.org/creating-odoo-add-on-modules/" target="_blank" rel="noopener">第四章 创建Odoo插件模块</a>了解更多有关 init 钩子的知识。</p></blockquote><h4 id="插件升级"><a href="#插件升级" class="headerlink" title="插件升级"></a>插件升级</h4><p>升级插件时，Odoo以给定的名称在可用的插件模块列表中检查已安装插件。它还会检查该插件的反向依赖（即依赖于所升级插件的那些插件）。如果存在，则也会对它们进行递归升级。</p><p>单个插件模块的升级过程包含如下步骤：</p><ol><li>如果有的话，先运行插件模块的预迁移步骤（参见<a href="https://alanhou.org/odoo12-module-data/" target="_blank" rel="noopener">第七章 模块数据</a>了解更多信息）</li><li>从Python源码中加载模型定义并在必要时更新数据库结构（参见<a href="https://alanhou.org/application-models/" target="_blank" rel="noopener">第五章 应用模型</a>了解更多信息）</li><li>加载插件的数据文件并在必要时更新数据库内容（参见<a href="https://alanhou.org/odoo12-module-data/" target="_blank" rel="noopener">第七章 模块数据</a>了解更多信息）</li><li>如果实例中启用了演示数据更新插件演示数据</li><li>如果模块有任何迁移方法的话，先运行插件模块的后置迁移步骤（参见<a href="https://alanhou.org/odoo12-module-data/" target="_blank" rel="noopener">第七章 模块数据</a>了解更多信息）</li><li>运行对插件视图定义的验证</li><li>如果启用了演示数据并启用了测试，运行该插件的测试（参见<a href="https://alanhou.org/automated-test-cases/" target="_blank" rel="noopener">第十八章 自动化测试用例</a>了解更多信息）</li><li>在数据库中更新模块状态</li><li>从插件的翻译文件中更新数据库中的翻译（参见<a href="https://alanhou.org/internationalization/" target="_blank" rel="noopener">第十二章 国际化</a>了解更多信息）</li></ol><blockquote><p>ℹ️注意更新未安装的插件模块什么也不会做。但是安装已安装的插件模块会重新安装该插件，这会通过一些包含数据的数据文件产生一些预期外的问题，这些文件可能应由用户进行更新而非在常规的模块升级处理时进行更新（参见<a href="https://alanhou.org/odoo12-module-data/" target="_blank" rel="noopener">第七章 模块数据</a>中使用noupdate和forcecreate标记部分的内容）。通过用户界面不存在错误的风险，但通过命令行时则有可能发生。</p></blockquote><h3 id="扩展知识…-2"><a href="#扩展知识…-2" class="headerlink" title="扩展知识…"></a>扩展知识…</h3><p>要当心依赖的处理。假定有一个实例你想要安装sale、sale_stock和sale_specific插件，sale_specific依赖于sale_stock，而sale_stock依赖于sale。要安装这三者，你只需要安装sale_specific，因为它会递归安装sale_stock和sale这两个依赖。要升级这两者，你需要升级sale，因为这样会递归升级其反向依赖，sale_stock和sale_specific。</p><p>管理依赖另一个比较搞的地方是在你向已经有一个版本安装了的插件添加依赖的时候。我们继续通过前例来理解这一问题。想像一下你在sale_specific中添加了一个对stock_dropshipping的依赖。更新sale_specific插件不会自动安装新的依赖，也会要求安装sale_specific。在这种情况下，你会收到非常糟糕的错误消息，因为插件的Python代码没有成功的加载，而插件的数据和模型表则存在于数据库中。要解决这一问题，你需要停止该实例并手动安装新的依赖。</p><h2 id="从GitHub安装插件模块"><a href="#从GitHub安装插件模块" class="headerlink" title="从GitHub安装插件模块"></a>从GitHub安装插件模块</h2><p>GitHub是第三方插件的一个很好的来源。很多Odoo合作伙伴使用GitHub来分享他们内部维护的插件，而Odoo社区联盟（OCA）在GitHub上共同维护着几百个插件。在你开始编写自己的插件之前，确保查看是否已有可用的插件或者作为初始以继续扩展插件。</p><p>这一部分向你展示如何从GitHub上克隆OCA的partner-contact项目并让其中所包含的插件模块在我们实例中可用。</p><h3 id="准备工作-3"><a href="#准备工作-3" class="headerlink" title="准备工作"></a>准备工作</h3><p>假设你想要改变你的实例中地址的处理方式，你的客户需要在Odoo两个字段（街道和街道2）之外的第三个字段来存储地址。你肯定是可以编写自己的插件来为res.partne添加一个字段的，但如果想要让地址在发票上以合适的格式显示，问题就要比看上去麻烦一些了。所幸，你邮件列表上的某个人告诉了你partner_address_street3插件，由OCA作为partner-contact项目的一部分进行维护。</p><p>本部分中所使用的路径反映了我们在<em>标准化你的实例目录布局</em>一节中所推荐的布局。</p><h3 id="如何安装…"><a href="#如何安装…" class="headerlink" title="如何安装…"></a>如何安装…</h3><p>按照如下步骤来安装partner_address_street3：</p><ol><li>进入你的项目目录：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/odoo-dev/my-odoo/src</span><br></pre></td></tr></table></figure><ol start="2"><li>在src/目录中克隆partner-contact项目的12.0分支：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --branch 12.0 \https://github.com/OCA/partner-contact.git src/partner-contact</span><br></pre></td></tr></table></figure><ol start="3"><li><p>修改插件路径来包含该目录并更新你的实例中的插件列表（参见本章中的配置插件路径和更新插件模块列表一节）。instance.cfg中的addons_path一行应该是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addons_path = ~/odoo-dev/my-odoo/src/odoo/odoo/addons, \~/odoo-dev/my-odoo/src/odoo/addons, \~/odoo-dev/my-odoo/src/, \~/odoo-dev/local-addons</span><br></pre></td></tr></table></figure></li><li><p>安装partner_address_street3插件（如果你不知道如何安装该模块，参见前面一节，安装并升级本地插件模块）</p></li></ol><h3 id="运行原理…-4"><a href="#运行原理…-4" class="headerlink" title="运行原理…"></a>运行原理…</h3><p>所有 Odoo社区联盟的代码仓库都将他们自己的插件放在单独的目录中，这与Odoo对插件路径中目录的预期是相一致的。因此，只需复制某处的仓库并将其添加到插件路径中就够了。</p><h3 id="扩展知识…-3"><a href="#扩展知识…-3" class="headerlink" title="扩展知识…"></a>扩展知识…</h3><p>有些维护者遵循不同的方法，每个插件模块一个仓库，放在仓库的根目录下。这种情况下，你需要创建一个新的目录，在这个目录中添加插件路径并克隆你所需的维护者的插件到该目录中。记住在每次添加一个新仓库拷贝时要更新插件模块列表。</p><h2 id="对插件应用修改"><a href="#对插件应用修改" class="headerlink" title="对插件应用修改"></a>对插件应用修改</h2><p>GitHub上可用的大部分插件需要进行修改并且不遵循Odoo对其稳定发行版所强制的规则。它们可能收到漏洞修复或改善，包含你提交的问题或功能请求，这些修改可能会引入数据库模式的修改或数据文件和视图中的更新。这一部分讲解如何安装升级后的版本。</p><h3 id="准备工作-4"><a href="#准备工作-4" class="headerlink" title="准备工作"></a>准备工作</h3><p>假定你对partner_address_street3报告了一个问题并收到通知说该问题已在partner-contact项目12.0分支的最近一次修订中得以解决。这种情况下，你可以使用最新版本来更新你的实例。</p><h3 id="如何修改…"><a href="#如何修改…" class="headerlink" title="如何修改…"></a>如何修改…</h3><p>要对GitHub的插件进行源的变更，需执行如下步骤：</p><ol><li><p>停止使用该插件的实例。</p></li><li><p>如果是生产实例请做一个备份（参见<a href="https://alanhou.org/installing-odoo-development-environment/" target="_blank" rel="noopener">第一章 安装Odoo开发环境</a>中<em>管理Odoo服务端数据库</em>一节）。</p></li><li><p>进入克隆了partner-contact的目录：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/odoo-dev/my-odoo/src/partner-contact</span><br></pre></td></tr></table></figure><ol start="4"><li>为该项目创建一个本地标签，这样万一出现了崩溃你可以进行回退：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout 12.0$ git tag 12.0-before-update-$(date --iso)</span><br></pre></td></tr></table></figure><ol start="4"><li>获取源码的最新版本：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull --ff-only</span><br></pre></td></tr></table></figure><ol start="6"><li><p>在你的数据库中更新partner_address_street3插件（参见<em>安装并升级本地插件模块</em>一节）</p></li><li><p>重启实例</p></li></ol><h3 id="运行原理…-5"><a href="#运行原理…-5" class="headerlink" title="运行原理…"></a>运行原理…</h3><p>通常，插件模块的开发者有时会发布插件的最新版本。这一更新一般包含漏洞修复及新功能。这里，我们将获取一个插件的新版本并在我们的实例中更新它。</p><p>如果git pull –ff-only失败的话，你可以使用如下命令回退到前一个版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  git reset --hard 12.0-before-update-$(date --iso)</span><br></pre></td></tr></table></figure><p>然后，你可以尝试git pull（不添加–ff-only），它会产生一个合并，但这表示你对插件做了本地修改。</p><h3 id="扩展知识…-4"><a href="#扩展知识…-4" class="headerlink" title="扩展知识…"></a>扩展知识…</h3><p>如果更新这一步崩溃了，参见<a href="https://alanhou.org/installing-odoo-development-environment/" target="_blank" rel="noopener">第一章 安装Odoo开发环境</a><em>从源码更新Odoo</em>一节获取恢复的操作指南。记住要总是在一个生产数据库的拷贝上先进行测试。</p><h2 id="应用及尝试建议的拉取请求"><a href="#应用及尝试建议的拉取请求" class="headerlink" title="应用及尝试建议的拉取请求"></a>应用及尝试建议的拉取请求</h2><p>在GitHub的世界中，拉取请求（PR）是由开发者所提交的请求，这样项目维护人员可以添加一些新的开发。比如一个 PR 可能包含漏洞修复或新功能。这里请求在拉取到主分支之前会进行审核和测试。</p><p>这一部分讲解如何对你的 Odoo 项目应用一个PR来测试漏洞修复的改进。</p><h3 id="准备工作-5"><a href="#准备工作-5" class="headerlink" title="准备工作"></a>准备工作</h3><p>在前一节中，假定你对partner_address_street3 报告了一个问题并收到一条通知在拉取请求中问题已修复，尚未合并到项目的12.0分支中。开发人员要求你验证PR #123中的修复状况。你需要使用这一分支更新一个测试实例。</p><p>你不应在生产数据库直接使用该分支，因此先创建一个带有生产数据库拷贝的测试环境（参见<a href="https://alanhou.org/installing-odoo-development-environment/" target="_blank" rel="noopener">第一章 安装Odoo开发环境</a>和<a href="https://alanhou.org/server-deployment/" target="_blank" rel="noopener">第三章 服务器部署</a>）。</p><h3 id="如何操作…"><a href="#如何操作…" class="headerlink" title="如何操作…"></a>如何操作…</h3><p>应用并测试一个插件的GitHub拉取请求，你需要执行如下步骤：</p><ol><li><p>停止实例</p></li><li><p>进入partner-contact所被克隆的目录：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/odoo-dev/my-odoo/src/partner-contact</span><br></pre></td></tr></table></figure><ol start="3"><li>为该项目创建一个本地标签，这样万一出现崩溃时你可以回退：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  git checkout 12.0$ git tag 12.0-before-update-$(date --iso</span><br></pre></td></tr></table></figure><ol start="4"><li>拉取pull请求的分支。这么做最容易的方式是使用PR编号，在开发者与你沟通时你应该可以看到。在本例中，这个拉取请求编号是123：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin pull/123/head</span><br></pre></td></tr></table></figure><ol start="5"><li><p>在你的数据库中更新partner_address_street3插件模块并重启该实例（如果你不知道如何更新该模块的话请参见<em>安装并升级本地插件模块</em>一节）</p></li><li><p>测试该更新 – 尝试重现问题，或测试你想要的功能。</p></li></ol><p>如果这不能运行，在GitHub的PR页面进行评论，说明你做了什么以及什么不能运行，这样开发者可以更新这个拉取请求。</p><p>如果它没有问题，也在PR页面说下；这是PR验证流程中非常重要的一部分；这会加速主分支中的合并。</p><h3 id="运行原理…-6"><a href="#运行原理…-6" class="headerlink" title="运行原理…"></a>运行原理…</h3><p>我们在使用一个GitHub功能，使用pull/nnnn/head分支名称来通过编号进行拉取请求的拉取，其中nnnn是PR的编号。Git pull命令合并远程分支到我们的分支，在我们基础代码中应用修改。在这之后，我们更新插件模块、对其测试并向作者报回修改是成功或是失败。</p><h3 id="扩展知识…-5"><a href="#扩展知识…-5" class="headerlink" title="扩展知识…"></a>扩展知识…</h3><p>如果你想要同步测试它们，你可以针对相同仓库的不同拉取请求重复本节中的第4步。如果你对结果很满意，你可以创建一个分支来保留对应用了改变的结果的引用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b 12.0-custom</span><br></pre></td></tr></table></figure><p>使用一个不同的分支会帮助你记住你没有从GitHub使用该版本，而是一个自定义的版本。</p><blockquote><p>ℹ️git branch命令可用于列出你仓库中的所有本地分支。</p></blockquote><p>从这开始，如果你需要应用来自GitHub中12.0分支的最近一个审核版本，你需要不使用–ff-only来拉取它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin 12.0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;全书完整目录请见：&lt;a href=&quot;https://alanhou.org/odoo12-cookbook/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Odoo 12开发者指南（Cookbook）第三版&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本章中，我们将讲解如下内容
      
    
    </summary>
    
    
      <category term="python" scheme="http://wumuwumu.github.io/tags/python/"/>
    
      <category term="odoo" scheme="http://wumuwumu.github.io/tags/odoo/"/>
    
  </entry>
  
  <entry>
    <title>__import__在python中的区别</title>
    <link href="http://wumuwumu.github.io/2019/06/01/import-%E5%9C%A8python%E4%B8%AD%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://wumuwumu.github.io/2019/06/01/import-在python中的区别/</id>
    <published>2019-06-01T07:49:16.000Z</published>
    <updated>2019-06-01T07:54:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>作用：导入/引入一个python标准模块，其中包括.py文件、带有<strong>init</strong>.py文件的目录(自定义模块)。</p><p>import module_name[,module1,…]  </p><p>from module import *|child[,child1,…]  </p><p>注意：多次重复使用import语句时，不会重新加载被指定的模块，只是把对该模块的内存地址给引用到本地变量环境。</p><p>实例：</p><p>pythontab.py  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="comment">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `os  ``print` `'in pythontab'``,``id``(os)`</span></span><br></pre></td></tr></table></figure><p>test.py  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`#!/usr/bin/env python    ``#encoding: utf-8  ``import` `pythontab   ``#第一次会打印pythontab里面的语句  ``import` `os  ``#再次导入os后，其内存地址和pythontab里面的是一样的，因此这里只是对os的本地引用  ``print` `&apos;in c&apos;``,``id``(os)  ``import` `pythontab  ``#第二次不会打印pythontab里面的语句，因为没有重新加载`</span><br></pre></td></tr></table></figure><h3 id="reload"><a href="#reload" class="headerlink" title="reload"></a>reload</h3><p>作用：对已经加载的模块进行重新加载，一般用于原模块有变化等特殊情况，reload前该模块必须已经import过。</p><p>import os</p><p>reload(os)</p><p>说明：</p><p>reload会重新加载已加载的模块，但原来已经使用的实例还是会使用旧的模块，而新生产的实例会使用新的模块；reload后还是用原来的内存地址；不能支持from。。import。。格式的模块进行重新加载。</p><p>实例：</p><p>pythontab.py  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="comment">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `os  ``print` `'in pythontab'``,``id``(os)`</span></span><br></pre></td></tr></table></figure><p>test.py  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="comment">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `pythontab   ``#第一次import会打印pythontab里面的语句  ``print` `id``(pythontab) ``#原来pythontab的内存地址  ``reload``(pythontab)  ``#第二次reload还会打印pythontab里面的语句，因为有重新加载  ``print` `id``(pythontab) ``#reload后pythontab的内存地址，和原来一样`</span></span><br></pre></td></tr></table></figure><p>扩展：</p><p>上面说了，在特殊情况的下才会使用reload函数；除了原来模块文件有修改外，还有哪些情况需要使用reload函数呢，这里举个例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="comment">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys   ``#引用sys模块进来，并不是进行sys的第一次加载  ``reload``(sys)  ``#重新加载sys  ``sys.setdefaultencoding(``'utf8'``)  ``##调用setdefaultencoding函数`</span></span><br></pre></td></tr></table></figure><p>上面的代码是正确的，再测试下面的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="comment">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys     ``sys.setdefaultencoding(``'utf8'``)`</span></span><br></pre></td></tr></table></figure><p>上面的测试会失败，那么为什么要在调用setdefaultencoding时必须要先reload一次sys模块呢？因为这里的import语句其实并不是sys的第一次导入语句，也就是说这里其实可能是第二、三次进行sys模块的import，这里只是一个对sys的引用，只能reload才能进行重新加载；那么为什么要重新加载，而直接引用过来则不能调用该函数呢？因为setdefaultencoding函数在被系统调用后被删除了，所以通过import引用进来时其实已经没有了，所以必须reload一次sys模块，这样setdefaultencoding才会为可用，才能在代码里修改解释器当前的字符编码。试试下面的代码，同样会报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="comment">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys    ``reload``(sys)   ``sys.setdefaultencoding(``'utf8'``)    ``del` `sys.setdefaultencoding   ``##删除原来的setdefaultencoding函数     ``sys.setdefaultencoding(``'gb2312'``)`</span></span><br></pre></td></tr></table></figure><p>那么到底是谁在之前就导入sys并且调用了setdefaultencoding函数呢？答案就在python安装目录的Lib文件夹下，有一个叫site.py的文件【python2.6】，在里面可以找到main() –&gt; setencoding()–&gt;sys.setdefaultencoding(encoding),因为这个site.py每次启动python解释器时会自动加载，所以main函数每次都会被执行，setdefaultencoding函数一出来就已经被删除了。</p><h3 id="import-1"><a href="#import-1" class="headerlink" title="import"></a><strong>import</strong></h3><p>作用：</p><p>同import语句同样的功能，但<strong>import</strong>是一个函数，并且只接收字符串作为参数，所以它的作用就可想而知了。其实import语句就是调用这个函数进行导入工作的，import sys &lt;==&gt;sys = <strong>import</strong>(‘sys’)</p><p>使用：</p><p><strong>import</strong>(module_name[, globals[, locals[, fromlist]]]) #可选参数默认为globals(),locals(),[]</p><p><strong>import</strong>(‘os’)    </p><p><strong>import</strong>(‘os’,globals(),locals(),[‘path’,’pip’])  #等价于from os import path, pip</p><p>说明：</p><p>通常在动态加载时可以使用到这个函数，比如你希望加载某个文件夹下的所用模块，但是其下的模块名称又会经常变化时，就可以使用这个函数动态加载所有模块了，最常见的场景就是插件功能的支持。</p><p>扩展：</p><p>既然可以通过字符串来动态导入模块，那么是否可以通过字符串动态重新加载模块吗？试试reload(‘os’)直接报错，是不是没有其他方式呢?虽然不能直接reload但是可以先unimport一个模块，然后再<strong>import</strong>来重新加载模块。现在看看unimport操作如何实现，在Python解释里可以通过globals(),locals(),vars(),dir()等函数查看到当前环境下加载的模块及其位置，但是这些都只能看不能删除，所以无法unimport；不过除此之外还有一个地方是专门存放模块的，这就是sys.modules，通过sys.modules可以查看所有的已加载并且成功的模块，而且比globals要多，说明默认会加载一些额外的模块，接下来就是unimport了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="comment">#!/usr/bin/env python    ``#encoding: utf-8  ``import` `sys  ``__import__``(``'a'``)      ``#第一次导入会打印消息  ``del` `sys.modules[``'a'``]   ``#unimport  ``__import__``(``'a'``)    ``#再次导入还是会打印消息，因为已经unimport一次了  ``__import__``(``'a'``)    ``#这次就不会打印消息了`</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;import&quot;&gt;&lt;a href=&quot;#import&quot; class=&quot;headerlink&quot; title=&quot;import&quot;&gt;&lt;/a&gt;import&lt;/h3&gt;&lt;p&gt;作用：导入/引入一个python标准模块，其中包括.py文件、带有&lt;strong&gt;init&lt;/strong&gt;
      
    
    </summary>
    
    
      <category term="python" scheme="http://wumuwumu.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>java多线程自问</title>
    <link href="http://wumuwumu.github.io/2019/04/15/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%87%AA%E9%97%AE/"/>
    <id>http://wumuwumu.github.io/2019/04/15/java多线程自问/</id>
    <published>2019-04-15T02:31:35.000Z</published>
    <updated>2019-04-16T08:00:26.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li>java创建线程的方式</li><li>java的线程的类型</li><li>Timer与TimerTask的区别</li><li>怎么启动、停止、加入、礼让线程</li><li>线程的生命周期以及其切换</li><li>CountDownLatch、CyclicBarrier和Semaphore</li><li>什么是线程安全？Vector是一个线程安全类吗？ </li><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;java创建线程的方式&lt;/li&gt;
&lt;li&gt;java的线程的类型&lt;/li&gt;
&lt;li&gt;Timer与TimerTask的区别&lt;/li&gt;
&lt;li&gt;怎么启动、停止、加入、礼让线程&lt;/li&gt;
&lt;li&gt;线程的生命周期以及其切换&lt;/li&gt;
&lt;li&gt;CountDownLatch、
      
    
    </summary>
    
    
      <category term="java" scheme="http://wumuwumu.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>redis分布式锁</title>
    <link href="http://wumuwumu.github.io/2019/04/11/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>http://wumuwumu.github.io/2019/04/11/redis分布式锁/</id>
    <published>2019-04-11T09:55:56.000Z</published>
    <updated>2019-04-28T01:38:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单机Redis实现分布式锁"><a href="#单机Redis实现分布式锁" class="headerlink" title="单机Redis实现分布式锁"></a>单机Redis实现分布式锁</h1><h2 id="获取锁"><a href="#获取锁" class="headerlink" title="获取锁"></a>获取锁</h2><p>获取锁的过程很简单，客户端向Redis发送命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SET resource_name my_random_value NX PX 30000</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><code>my_random_value</code>是由客户端生成的一个随机字符串，它要保证在足够长的一段时间内在所有客户端的所有获取锁的请求中都是唯一的。 NX表示只有当<code>resource_name</code>对应的key值不存在的时候才能SET成功。这保证了只有第一个请求的客户端才能获得锁，而其它客户端在锁被释放之前都无法获得锁。 PX 30000表示这个锁有一个30秒的自动过期时间。</p><h2 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if redis.call(&quot;get&quot;,KEYS[1]) == ARGV[1] then</span><br><span class="line">    return redis.call(&quot;del&quot;,KEYS[1])</span><br><span class="line">else</span><br><span class="line">    return 0</span><br><span class="line">end</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>之前获取锁的时候生成的<code>my_random_value</code> 作为参数传到Lua脚本里面，作为：<code>ARGV[1]</code>,而 <code>resource_name</code>作为<code>KEYS[1]</code>。Lua脚本可以保证操作的原子性。</p><h2 id="关于单点Redis实现分布式锁的讨论"><a href="#关于单点Redis实现分布式锁的讨论" class="headerlink" title="关于单点Redis实现分布式锁的讨论"></a>关于单点Redis实现分布式锁的讨论</h2><p>网络上有文章说用如下命令获取锁:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SETNX resource_name my_random_value</span><br><span class="line">EXPIRE resource_name 30</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>由于这两个命令不是原子的。如果客户端在执行完<code>SETNX</code>后<code>crash</code>了，那么就没有机会执行<code>EXPIRE</code>了，导致它一直持有这个锁，其他的客户端就永远获取不到这个锁了。</p><ul><li>为什么<code>my_random_value</code> 要设置成随机值? 保证了一个客户端释放的锁是自己持有的那个锁。如若不然，可能出现锁不安全的情况。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">客户端1获取锁成功。</span><br><span class="line">客户端1在某个操作上阻塞了很长时间。</span><br><span class="line">过期时间到了，锁自动释放了。</span><br><span class="line">客户端2获取到了对应同一个资源的锁。</span><br><span class="line">客户端1从阻塞中恢复过来，释放掉了客户端2持有的锁。</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><ul><li>用 SETNX获取锁 网上大量文章说用如下命令获取锁：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SETNX lock.foo &lt;current Unix time + lock timeout + 1&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>原文在Redis对SETNX的官网说明，Redis官网文档建议用Set命令来代替，主要原因是SETNX不支持超时时间的设置。</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fredis.io%2Fcommands%2Fsetnx" target="_blank" rel="noopener">redis.io/commands/se…</a></p><h1 id="Redis集群实现分布式锁"><a href="#Redis集群实现分布式锁" class="headerlink" title="Redis集群实现分布式锁"></a>Redis集群实现分布式锁</h1><p>上面的讨论中我们有一个非常重要的假设：Redis是单点的。如果Redis是集群模式，我们考虑如下场景:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">客户端1从Master获取了锁。</span><br><span class="line">Master宕机了，存储锁的key还没有来得及同步到Slave上。</span><br><span class="line">Slave升级为Master。</span><br><span class="line">客户端2从新的Master获取到了对应同一个资源的锁。</span><br><span class="line">客户端1和客户端2同时持有了同一个资源的锁，锁不再具有安全性。</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>就此问题，Redis作者antirez写了RedLock算法来解决这种问题。</p><h2 id="RedLock获取锁"><a href="#RedLock获取锁" class="headerlink" title="RedLock获取锁"></a>RedLock获取锁</h2><ul><li>获取当前时间。</li><li>按顺序依次向N个Redis节点执行获取锁的操作。这个获取操作跟前面基于单Redis节点的获取锁的过程相同，包含随机字符串my_random_value，也包含过期时间(比如PX 30000，即锁的有效时间)。为了保证在某个Redis节点不可用的时候算法能够继续运行，这个获取锁的操作还有一个超时时间(time out)，它要远小于锁的有效时间（几十毫秒量级）。客户端在向某个Redis节点获取锁失败以后，应该立即尝试下一个Redis节点。</li><li>计算整个获取锁的过程总共消耗了多长时间，计算方法是用当前时间减去第1步记录的时间。如果客户端从大多数Redis节点（&gt;= N/2+1）成功获取到了锁，并且获取锁总共消耗的时间没有超过锁的有效时间(lock validity time)，那么这时客户端才认为最终获取锁成功；否则，认为最终获取锁失败。</li><li>如果最终获取锁成功了，那么这个锁的有效时间应该重新计算，它等于最初的锁的有效时间减去第3步计算出来的获取锁消耗的时间。</li><li>如果最终获取锁失败了（可能由于获取到锁的Redis节点个数少于N/2+1，或者整个获取锁的过程消耗的时间超过了锁的最初有效时间），那么客户端应该立即向所有Redis节点发起释放锁的操作（即前面介绍的单机Redis Lua脚本释放锁的方法）。</li></ul><h2 id="RedLock释放锁"><a href="#RedLock释放锁" class="headerlink" title="RedLock释放锁"></a>RedLock释放锁</h2><p>客户端向所有Redis节点发起释放锁的操作，不管这些节点当时在获取锁的时候成功与否。</p><h2 id="关于RedLock的问题讨论"><a href="#关于RedLock的问题讨论" class="headerlink" title="关于RedLock的问题讨论"></a>关于RedLock的问题讨论</h2><ul><li>如果有节点发生崩溃重启 假设一共有5个Redis节点：A, B, C, D, E。设想发生了如下的事件序列：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">客户端1成功锁住了A, B, C，获取锁成功（但D和E没有锁住）。</span><br><span class="line">节点C崩溃重启了，但客户端1在C上加的锁没有持久化下来，丢失了。</span><br><span class="line">节点C重启后，客户端2锁住了C, D, E，获取锁成功。</span><br><span class="line">客户端1和客户端2同时获得了锁。</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>为了应对这一问题，antirez又提出了延迟重启(delayed restarts)的概念。也就是说，一个节点崩溃后，先不立即重启它，而是等待一段时间再重启，这段时间应该大于锁的有效时间(lock validity time)。这样的话，这个节点在重启前所参与的锁都会过期，它在重启后就不会对现有的锁造成影响。</p><ul><li><p>如果客户端长期阻塞导致锁过期</p><p><img src="http://wumu.sciento.cn/img/16a07877f982bd5c.png" alt=""></p></li></ul><p>解释一下这个时序图，客户端1在获得锁之后发生了很长时间的GC pause，在此期间，它获得的锁过期了，而客户端2获得了锁。当客户端1从GC pause中恢复过来的时候，它不知道自己持有的锁已经过期了，它依然向共享资源（上图中是一个存储服务）发起了写数据请求，而这时锁实际上被客户端2持有，因此两个客户端的写请求就有可能冲突（锁的互斥作用失效了）。</p><p>如何解决这个问题呢?引入了fencing token的概念：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wumu.sciento.cn/img/16a07879db4e469e.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>客户端1先获取到的锁，因此有一个较小的fencing token，等于33，而客户端2后获取到的锁，有一个较大的fencing token，等于34。客户端1从GC pause中恢复过来之后，依然是向存储服务发送访问请求，但是带了fencing token = 33。存储服务发现它之前已经处理过34的请求，所以会拒绝掉这次33的请求。这样就避免了冲突。</p><p>但是其实这已经超出了Redis实现分布式锁的范围，单纯用Redis没有命令来实现生成Token。</p><ul><li>时钟跳跃问题 假设有5个Redis节点A, B, C, D, E。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">客户端1从Redis节点A, B, C成功获取了锁（多数节点）。由于网络问题，与D和E通信失败。</span><br><span class="line">节点C上的时钟发生了向前跳跃，导致它上面维护的锁快速过期。</span><br><span class="line">客户端2从Redis节点C, D, E成功获取了同一个资源的锁（多数节点）。</span><br><span class="line">客户端1和客户端2现在都认为自己持有了锁。</span><br><span class="line">这个问题用Redis实现分布式锁暂时无解。而生产环境这种情况是存在的。</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>结论 Redis并不能实现严格意义上的分布式锁。但是这并不意味着上面讨论的方案一无是处。如果你的应用场景为了效率(efficiency)，协调各个客户端避免做重复的工作，即使锁失效了，只是可能把某些操作多做一遍而已，不会产生其它的不良后果。但是如果你的应用场景是为了正确性(correctness)，那么用Redis实现分布式锁并不合适，会存在各种各样的问题，且解决起来就很复杂，为了正确性，需要使用zab、raft共识算法，或者使用带有事务的数据库来实现严格意义上的分布式锁。</p><p>参考资料 Distributed locks with Redis 基于Redis的分布式锁到底安全吗（上）？ - 铁蕾的个人博客 <a href="https://link.juejin.im?target=https%3A%2F%2Fmartin.kleppmann.com%2F2016%2F02%2F08%2Fhow-to-do-distributed-locking.html" target="_blank" rel="noopener">martin.kleppmann.com/2016/02/08/…</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;单机Redis实现分布式锁&quot;&gt;&lt;a href=&quot;#单机Redis实现分布式锁&quot; class=&quot;headerlink&quot; title=&quot;单机Redis实现分布式锁&quot;&gt;&lt;/a&gt;单机Redis实现分布式锁&lt;/h1&gt;&lt;h2 id=&quot;获取锁&quot;&gt;&lt;a href=&quot;#获取锁&quot; c
      
    
    </summary>
    
    
      <category term="redis" scheme="http://wumuwumu.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://wumuwumu.github.io/2019/04/10/java-%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://wumuwumu.github.io/2019/04/10/java-线程池/</id>
    <published>2019-04-10T02:32:39.000Z</published>
    <updated>2019-04-10T02:35:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>title: java-线程池<br>date: 2019-04-10 10:32:39<br>tags:</p><ul><li>java</li></ul><h2 id="1-线程池的关系"><a href="#1-线程池的关系" class="headerlink" title="1. 线程池的关系"></a>1. 线程池的关系</h2><p>ExecutorService<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![1536473588949](assets/1536473588949.png)</span><br><span class="line"></span><br><span class="line">## 2. ```Executor</span><br></pre></td></tr></table></figure></p><p>public interface Executor {<br>    void execute(Runnable command);<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 3.</span><br></pre></td></tr></table></figure></p><p>javapublic abstract class AbstractExecutorService implements ExecutorService {    // RunnableFuture 是用于获取执行结果的，我们常用它的子类 FutureTask    // 下面两个 newTaskFor 方法用于将我们的任务包装成 FutureTask 提交到线程池中执行    protected <t> RunnableFuture<t> newTaskFor(Runnable runnable, T value) {        return new FutureTask<t>(runnable, value);    }    protected <t> RunnableFuture<t> newTaskFor(Callable<t> callable) {        return new FutureTask<t>(callable);    }    // 提交任务    public Future&lt;?&gt; submit(Runnable task) {        if (task == null) throw new NullPointerException();        RunnableFuture<void> ftask = newTaskFor(task, null);        execute(ftask);        return ftask;    }    /*<em>     </em> @throws RejectedExecutionException {@inheritDoc}     <em> @throws NullPointerException       {@inheritDoc}     </em>/    public <t> Future<t> submit(Runnable task, T result) {        if (task == null) throw new NullPointerException();         // 1. 将任务包装成 FutureTask        RunnableFuture<t> ftask = newTaskFor(task, result);        // 2. 交给执行器执行，execute 方法由具体的子类来实现        // 前面也说了，FutureTask 间接实现了Runnable 接口。        execute(ftask);        return ftask;    }    public <t> Future<t> submit(Callable<t> task) {        if (task == null) throw new NullPointerException();        RunnableFuture<t> ftask = newTaskFor(task);        execute(ftask);        return ftask;    }     // 此方法目的：将 tasks 集合中的任务提交到线程池执行，任意一个线程执行完后就可以结束了    // 第二个参数 timed 代表是否设置超时机制，超时时间为第三个参数，    // 如果 timed 为 true，同时超时了还没有一个线程返回结果，那么抛出 TimeoutException 异常    private <t> T doInvokeAny(Collection&lt;? extends Callable<t>&gt; tasks,                              boolean timed, long nanos)        throws InterruptedException, ExecutionException, TimeoutException {        if (tasks == null)            throw new NullPointerException();        int ntasks = tasks.size();        if (ntasks == 0)            throw new IllegalArgumentException();        ArrayList&lt;Future<t>&gt; futures = new ArrayList&lt;Future<t>&gt;(ntasks);         // ExecutorCompletionService 不是一个真正的执行器，参数 this 才是真正的执行器        // 它对执行器进行了包装，每个任务结束后，将结果保存到内部的一个 completionQueue 队列中        // 这也是为什么这个类的名字里面有个 Completion 的原因吧。        ExecutorCompletionService<t> ecs =            new ExecutorCompletionService<t>(this);        // For efficiency, especially in executors with limited        // parallelism, check to see if previously submitted tasks are        // done before submitting more of them. This interleaving        // plus the exception mechanics account for messiness of main        // loop.        try {            // 用于保存异常信息，此方法如果没有得到任何有效的结果，那么我们可以抛出最后得到的一个异常            ExecutionException ee = null;            final long deadline = timed ? System.nanoTime() + nanos : 0L;            Iterator&lt;? extends Callable<t>&gt; it = tasks.iterator();             // 首先先提交一个任务，后面的任务到下面的 for 循环一个个提交            futures.add(ecs.submit(it.next()));            –ntasks;            int active = 1;            for (;;) {                // ecs 上面说了，其内部有一个 completionQueue 用于保存执行完成的结果                // BlockingQueue 的 poll 方法不阻塞，返回 null 代表队列为空                Future<t> f = ecs.poll();                 // 为 null，说明刚刚提交的第一个线程还没有执行完成                // 在前面先提交一个任务，加上这里做一次检查，也是为了提高性能                if (f == null) {                    if (ntasks &gt; 0) {                        –ntasks;                        futures.add(ecs.submit(it.next()));                        ++active;                    }                     // 这里是 else if，不是 if。这里说明，没有任务了，同时 active 为 0 说明                    // 任务都执行完成了。其实我也没理解为什么这里做一次 break？                    // 因为我认为 active 为 0 的情况，必然从下面的 f.get() 返回了                    else if (active == 0)                        break;                     // 这里也是 else if。这里说的是，没有任务了，但是设置了超时时间，这里检测是否超时                    else if (timed) {                        f = ecs.poll(nanos, TimeUnit.NANOSECONDS);                        if (f == null)                            throw new TimeoutException();                        nanos = deadline - System.nanoTime();                    }                    else                   // else。说明，没有任务需要提交，但是池中的任务没有完成，还没有超时(如果设置了超时)                    // take() 方法会阻塞，直到有元素返回，说明有任务结束了                        f = ecs.take();                }                // 有任务结束了                if (f != null) {                    –active;                    try {                        // 返回执行结果，如果有异常，都包装成 ExecutionException                        return f.get();                    } catch (ExecutionException eex) {                        ee = eex;                    } catch (RuntimeException rex) {                        ee = new ExecutionException(rex);                    }                }            }            if (ee == null)                ee = new ExecutionException();            throw ee;        } finally {            for (int i = 0, size = futures.size(); i &lt; size; i++)                futures.get(i).cancel(true);        }    }    public <t> T invokeAny(Collection&lt;? extends Callable<t>&gt; tasks)        throws InterruptedException, ExecutionException {        try {            return doInvokeAny(tasks, false, 0);        } catch (TimeoutException cannotHappen) {            assert false;            return null;        }    }    public <t> T invokeAny(Collection&lt;? extends Callable<t>&gt; tasks,                           long timeout, TimeUnit unit)        throws InterruptedException, ExecutionException, TimeoutException {        return doInvokeAny(tasks, true, unit.toNanos(timeout));    }      // 执行所有的任务，返回任务结果。    // 先不要看这个方法，我们先想想，其实我们自己提交任务到线程池，也是想要线程池执行所有的任务    // 只不过，我们是每次 submit 一个任务，这里以一个集合作为参数提交    public <t> List&lt;Future<t>&gt; invokeAll(Collection&lt;? extends Callable<t>&gt; tasks)        throws InterruptedException {        if (tasks == null)            throw new NullPointerException();        ArrayList&lt;Future<t>&gt; futures = new ArrayList&lt;Future<t>&gt;(tasks.size());        boolean done = false;        try {            for (Callable<t> t : tasks) {                RunnableFuture<t> f = newTaskFor(t);                futures.add(f);                execute(f);            }            for (int i = 0, size = futures.size(); i &lt; size; i++) {                Future<t> f = futures.get(i);                if (!f.isDone()) {                    try {                       // 这是一个阻塞方法，直到获取到值，或抛出了异常                       // 这里有个小细节，其实 get 方法签名上是会抛出 InterruptedException 的                       // 可是这里没有进行处理，而是抛给外层去了。此异常发生于还没执行完的任务被取消了                        f.get();                    } catch (CancellationException ignore) {                    } catch (ExecutionException ignore) {                    }                }            }            done = true;            return futures;        } finally {            if (!done)                for (int i = 0, size = futures.size(); i &lt; size; i++)                    futures.get(i).cancel(true);        }    }    public <t> List&lt;Future<t>&gt; invokeAll(Collection&lt;? extends Callable<t>&gt; tasks,                                         long timeout, TimeUnit unit)        throws InterruptedException {        if (tasks == null)            throw new NullPointerException();        long nanos = unit.toNanos(timeout);        ArrayList&lt;Future<t>&gt; futures = new ArrayList&lt;Future<t>&gt;(tasks.size());        boolean done = false;        try {            for (Callable<t> t : tasks)                futures.add(newTaskFor(t));            final long deadline = System.nanoTime() + nanos;            final int size = futures.size();            // Interleave time checks and calls to execute in case            // executor doesn’t have any/much parallelism.            for (int i = 0; i &lt; size; i++) {                execute((Runnable)futures.get(i));                nanos = deadline - System.nanoTime();                if (nanos &lt;= 0L)                    return futures;            }            for (int i = 0; i &lt; size; i++) {                Future<t> f = futures.get(i);                if (!f.isDone()) {                    if (nanos &lt;= 0L)                        return futures;                    try {                        f.get(nanos, TimeUnit.NANOSECONDS);                    } catch (CancellationException ignore) {                    } catch (ExecutionException ignore) {                    } catch (TimeoutException toe) {                        return futures;                    }                    nanos = deadline - System.nanoTime();                }            }            done = true;            return futures;        } finally {            if (!done)                for (int i = 0, size = futures.size(); i &lt; size; i++)                    futures.get(i).cancel(true);        }    }}`</t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></t></void></t></t></t></t></t></t></t></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 4.</span><br></pre></td></tr></table></figure><p>java/*<em>     </em> The main pool control state, ctl, is an atomic integer packing     <em> two conceptual fields     </em>   workerCount, indicating the effective number of threads     <em>   runState,    indicating whether running, shutting down etc     </em>     <em> In order to pack them into one int, we limit workerCount to     </em> (2^29)-1 (about 500 million) threads rather than (2^31)-1 (2     <em> billion) otherwise representable. If this is ever an issue in     </em> the future, the variable can be changed to be an AtomicLong,     <em> and the shift/mask constants below adjusted. But until the need     </em> arises, this code is a bit faster and simpler using an int.     <em>     </em> The workerCount is the number of workers that have been     <em> permitted to start and not permitted to stop.  The value may be     </em> transiently different from the actual number of live threads,     <em> for example when a ThreadFactory fails to create a thread when     </em> asked, and when exiting threads are still performing     <em> bookkeeping before terminating. The user-visible pool size is     </em> reported as the current size of the workers set.     <em>     </em> The runState provides the main lifecycle control, taking on values:     <em>     </em>   RUNNING:  Accept new tasks and process queued tasks     <em>   SHUTDOWN: Don’t accept new tasks, but process queued tasks     </em>   STOP:     Don’t accept new tasks, don’t process queued tasks,     <em>             and interrupt in-progress tasks     </em>   TIDYING:  All tasks have terminated, workerCount is zero,     <em>             the thread transitioning to state TIDYING     </em>             will run the terminated() hook method     <em>   TERMINATED: terminated() has completed     </em>     <em> The numerical order among these values matters, to allow     </em> ordered comparisons. The runState monotonically increases over     <em> time, but need not hit each state. The transitions are:     </em>     <em> RUNNING -&gt; SHUTDOWN     </em>    On invocation of shutdown(), perhaps implicitly in finalize()     <em> (RUNNING or SHUTDOWN) -&gt; STOP     </em>    On invocation of shutdownNow()     <em> SHUTDOWN -&gt; TIDYING     </em>    When both queue and pool are empty     <em> STOP -&gt; TIDYING     </em>    When pool is empty     <em> TIDYING -&gt; TERMINATED     </em>    When the terminated() hook method has completed     <em>     </em> Threads waiting in awaitTermination() will return when the     <em> state reaches TERMINATED.     </em>     <em> Detecting the transition from SHUTDOWN to TIDYING is less     </em> straightforward than you’d like because the queue may become     <em> empty after non-empty and vice versa during SHUTDOWN state, but     </em> we can only terminate if, after seeing that it is empty, we see     <em> that workerCount is 0 (which sometimes entails a recheck – see     </em> below).     <em>/    private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));public void execute(Runnable command) {        if (command == null)            throw new NullPointerException();        /</em>         <em> Proceed in 3 steps:         </em>         <em> 1. If fewer than corePoolSize threads are running, try to         </em> start a new thread with the given command as its first         <em> task.  The call to addWorker atomically checks runState and         </em> workerCount, and so prevents false alarms that would add         <em> threads when it shouldn’t, by returning false.         </em>         <em> 2. If a task can be successfully queued, then we still need         </em> to double-check whether we should have added a thread         <em> (because existing ones died since last checking) or that         </em> the pool shut down since entry into this method. So we         <em> recheck state and if necessary roll back the enqueuing if         </em> stopped, or start a new thread if there are none.         <em>         </em> 3. If we cannot queue task, then we try to add a new         <em> thread.  If it fails, we know we are shut down or saturated         </em> and so reject the task.         */        int c = ctl.get();        if (workerCountOf(c) &lt; corePoolSize) {            if (addWorker(command, true))                return;            c = ctl.get();        }        if (isRunning(c) &amp;&amp; workQueue.offer(command)) {            int recheck = ctl.get();            if (! isRunning(recheck) &amp;&amp; remove(command))                reject(command);            else if (workerCountOf(recheck) == 0)                addWorker(null, false);        }        else if (!addWorker(command, false))            reject(command);    }<code>``</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: java-线程池&lt;br&gt;date: 2019-04-10 10:32:39&lt;br&gt;tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;java&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-线程池的关系&quot;&gt;&lt;a href=&quot;#1-线程池的关系&quot; class=&quot;headerlin
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>protobuf使用</title>
    <link href="http://wumuwumu.github.io/2019/04/10/protobuf%E4%BD%BF%E7%94%A8/"/>
    <id>http://wumuwumu.github.io/2019/04/10/protobuf使用/</id>
    <published>2019-04-10T02:31:04.000Z</published>
    <updated>2019-04-10T02:32:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protobuf-all-3.6.1.zip</span><br><span class="line">unzop protobuf-all-3.6.1.zip</span><br><span class="line">cd protobuf-all-3.6.1</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h1 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// 声明版本，默认是proto2</span><br><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">// 声明包名</span><br><span class="line">package tutorial</span><br><span class="line">option java_package = &quot;com.example.tutorial&quot;;</span><br><span class="line">// java类名</span><br><span class="line">option java_outer_classname = &quot;AddressBookProtos&quot;;</span><br><span class="line"></span><br><span class="line">message Person &#123;</span><br><span class="line">    required string name =1;</span><br><span class="line">    required int32 id = 2;</span><br><span class="line">    optional string email = 3;</span><br><span class="line">    </span><br><span class="line">    enum PhoneType &#123;</span><br><span class="line">        MOBILE = 0;</span><br><span class="line">        HOME = 1;</span><br><span class="line">        WORK = 2;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    message PhoneNumber &#123;</span><br><span class="line">        required string number = 1;</span><br><span class="line">        optional PhoneType type = 2[default = HOME]; </span><br><span class="line">    &#125;</span><br><span class="line">    repeated PhoneNumber phones = 4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message AddressBook &#123;</span><br><span class="line">    repreated Person people = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 保留字段，编程过程中某些功能没有想好，可以先把该tag 进行保留，以备以后使用。</span><br><span class="line">message Foo &#123;</span><br><span class="line">  reserved 2, 15, 9 to 11;</span><br><span class="line">  reserved &quot;foo&quot;, &quot;bar&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><blockquote><p><a href="https://blog.csdn.net/zxhoo/article/details/53228303" target="_blank" rel="noopener">https://blog.csdn.net/zxhoo/article/details/53228303</a></p></blockquote><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><ol><li>Standard Message Methods</li></ol><ul><li><code>isInitialized()</code>: checks if all the required fields have been set.</li><li><code>toString()</code>: returns a human-readable representation of the message, particularly useful for debugging.</li><li><code>mergeFrom(Message other)</code>: (builder only) merges the contents of <code>other</code> into this message, overwriting singular scalar fields, merging composite fields, and concatenating repeated fields.</li><li><code>clear()</code>: (builder only) clears all the fields back to the empty state.</li></ul><ol><li>Parsing and Serialization</li></ol><ul><li><code>byte[] toByteArray();</code>: serializes the message and returns a byte array containing its raw bytes.</li><li><code>static Person parseFrom(byte[] data);</code>: parses a message from the given byte array.</li><li><code>void writeTo(OutputStream output);</code>: serializes the message and writes it to an <code>OutputStream</code>.</li><li><code>static Person parseFrom(InputStream input);</code>: reads and parses a message from an <code>InputStream</code>.</li></ul><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ol><li>升级协议</li></ol><ul><li>you <em>must not</em> change the tag numbers of any existing fields.</li><li>you <em>must not</em> add or delete any required fields.</li><li>you <em>may</em> delete optional or repeated fields.</li><li>you <em>may</em> add new optional or repeated fields but you must use fresh tag numbers (i.e. tag numbers that were never used in this protocol buffer, not even by deleted fields).</li></ul><ol><li>protobuf对repeated压缩不够好，所以尽量在后面加上[packed = true]。</li><li>不要让protobuf对象成为全局变量或者类成员，因为其clear方法只会把占用的内存空间清零，而不会释放，使得进程空间越来越大，可参考<a href="http://www.kuqin.com/shuoit/20141117/343247.html" target="_blank" rel="noopener">《Protobuf使用不当导致的程序内存上涨问题》</a>。</li></ol><blockquote><p><a href="https://www.jianshu.com/p/27fdf44dd63b" target="_blank" rel="noopener">https://www.jianshu.com/p/27fdf44dd63b</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="go" scheme="http://wumuwumu.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go基本语法</title>
    <link href="http://wumuwumu.github.io/2019/04/10/go%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://wumuwumu.github.io/2019/04/10/go基本语法/</id>
    <published>2019-04-10T02:29:55.000Z</published>
    <updated>2019-04-10T02:30:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><ol><li>duck typing了解</li></ol><p>在<a href="https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1" target="_blank" rel="noopener">程序设计</a>中，<strong>鸭子类型</strong>（英语：<strong>duck typing</strong>）是<a href="https://zh.wikipedia.org/wiki/%E9%A1%9E%E5%9E%8B%E7%B3%BB%E7%B5%B1" target="_blank" rel="noopener">动态类型</a>的一种风格。在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由“当前<a href="https://zh.wikipedia.org/wiki/%E6%96%B9%E6%B3%95_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8" target="_blank" rel="noopener">方法</a>)和属性的集合”决定。</p><h1 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h1><h1 id="Sync"><a href="#Sync" class="headerlink" title="Sync"></a>Sync</h1><h3 id="1-WaitGroup"><a href="#1-WaitGroup" class="headerlink" title="1. WaitGroup"></a>1. <code>WaitGroup</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Add()</span><br><span class="line">Done()</span><br><span class="line">Wait()</span><br></pre></td></tr></table></figure><h3 id="2-Context"><a href="#2-Context" class="headerlink" title="2. Context"></a>2. Context</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Regexp"><a href="#Regexp" class="headerlink" title="Regexp"></a><code>Regexp</code></h2><blockquote><p><a href="https://www.cnblogs.com/golove/p/3269099.html" target="_blank" rel="noopener">https://www.cnblogs.com/golove/p/3269099.html</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">// MatchString</span><br><span class="line">matched, err := regexp.MatchString(&quot;foo.*&quot;, &quot;seafood&quot;)</span><br><span class="line">fmt.Println(matched, err)</span><br><span class="line">matched, err = regexp.MatchString(&quot;bar.*&quot;, &quot;seafood&quot;)</span><br><span class="line">fmt.Println(matched, err)</span><br><span class="line">// false error parsing regexp: missing closing ): `a(b`</span><br><span class="line">matched, err = regexp.MatchString(&quot;a(b&quot;, &quot;seafood&quot;)</span><br><span class="line">fmt.Println(matched, err)</span><br><span class="line">// true &lt;nil&gt;</span><br><span class="line">matched, err = regexp.MatchString(`a\(b`, &quot;a(b&quot;)</span><br><span class="line">fmt.Println(matched, err)</span><br><span class="line">// false error parsing regexp: missing closing ): `a(b`</span><br><span class="line">matched, err = regexp.MatchString(`a(b`, &quot;a(b&quot;)</span><br><span class="line">fmt.Println(matched, err)</span><br><span class="line">// true &lt;nil&gt;</span><br><span class="line">matched, err = regexp.MatchString(&quot;a\\(b&quot;, &quot;a(b&quot;)</span><br><span class="line">fmt.Println(matched, err)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 将所有特殊字符进行转义</span><br><span class="line">fmt.Println(regexp.QuoteMeta(&quot;Escaping symbols like: .+*?()|[]&#123;&#125;^$&quot;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// ExpandString</span><br><span class="line">content := `</span><br><span class="line"># comment line</span><br><span class="line">option1: value1</span><br><span class="line">option2: value2</span><br><span class="line"></span><br><span class="line"># another comment line</span><br><span class="line">option3: value3</span><br><span class="line">`</span><br><span class="line"></span><br><span class="line">// Regex pattern captures &quot;key: value&quot; pair from the content.</span><br><span class="line">pattern := regexp.MustCompile(`(?m)(?P&lt;key&gt;\w+):\s+(?P&lt;value&gt;\w+)$`)</span><br><span class="line"></span><br><span class="line">// Template to convert &quot;key: value&quot; to &quot;key=value&quot; by</span><br><span class="line">// referencing the values captured by the regex pattern.</span><br><span class="line">template := &quot;$key=$value\n&quot;</span><br><span class="line"></span><br><span class="line">result := []byte&#123;&#125;</span><br><span class="line"></span><br><span class="line">// For each match of the regex in the content.</span><br><span class="line">for _, submatches := range pattern.FindAllStringSubmatchIndex(content, -1) &#123;</span><br><span class="line">    // Apply the captured submatches to the template and append the output</span><br><span class="line">    // to the result.</span><br><span class="line">    result = pattern.ExpandString(result, template, content, submatches)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(string(result))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// findAllString</span><br><span class="line">re := regexp.MustCompile(&quot;a.&quot;)</span><br><span class="line">fmt.Println(re.FindAllString(&quot;paranormal&quot;, -1))</span><br><span class="line">fmt.Println(re.FindAllString(&quot;paranormal&quot;, 2))</span><br><span class="line">fmt.Println(re.FindAllString(&quot;graal&quot;, -1))</span><br><span class="line">fmt.Println(re.FindAllString(&quot;none&quot;, -1))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// FindAllStringSubmatch</span><br><span class="line">re := regexp.MustCompile(&quot;a(x*)b&quot;)</span><br><span class="line">fmt.Printf(&quot;%q\n&quot;, re.FindAllStringSubmatch(&quot;-ab-&quot;, -1))</span><br><span class="line">fmt.Printf(&quot;%q\n&quot;, re.FindAllStringSubmatch(&quot;-axxb-&quot;, -1))</span><br><span class="line">fmt.Printf(&quot;%q\n&quot;, re.FindAllStringSubmatch(&quot;-ab-axb-&quot;, -1))</span><br><span class="line">fmt.Printf(&quot;%q\n&quot;, re.FindAllStringSubmatch(&quot;-axxb-ab-&quot;, -1))</span><br><span class="line"></span><br><span class="line">// findStringSubmatch，只查找第一个</span><br><span class="line">re := regexp.MustCompile(&quot;a(x*)b(y|z)c&quot;)</span><br><span class="line">fmt.Printf(&quot;%q\n&quot;, re.FindStringSubmatch(&quot;-axxxbyc-&quot;))</span><br><span class="line">fmt.Printf(&quot;%q\n&quot;, re.FindStringSubmatch(&quot;-abzc-&quot;))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;接口&quot;&gt;&lt;a href=&quot;#接口&quot; class=&quot;headerlink&quot; title=&quot;接口&quot;&gt;&lt;/a&gt;接口&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;duck typing了解&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在&lt;a href=&quot;https://zh.wikipedia.org/w
      
    
    </summary>
    
    
      <category term="go" scheme="http://wumuwumu.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>makefile编写</title>
    <link href="http://wumuwumu.github.io/2019/04/10/makefile%E7%BC%96%E5%86%99/"/>
    <id>http://wumuwumu.github.io/2019/04/10/makefile编写/</id>
    <published>2019-04-10T02:27:53.000Z</published>
    <updated>2019-04-10T02:29:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">.PHONY: build clean test package package-deb ui api statics requirements ui-requirements serve update-vendor internal/statics internal/migrations static/swagger/api.swagger.json</span><br><span class="line">PKGS := $(shell go list ./... | grep -v /vendor |grep -v lora-app-server/api | grep -v /migrations | grep -v /static | grep -v /ui)</span><br><span class="line">VERSION := $(shell git describe --always |sed -e &quot;s/^v//&quot;)</span><br><span class="line"></span><br><span class="line">build: ui/build internal/statics internal/migrations</span><br><span class="line">mkdir -p build</span><br><span class="line">go build $(GO_EXTRA_BUILD_ARGS) -ldflags &quot;-s -w -X main.version=$(VERSION)&quot; -o build/lora-app-server cmd/lora-app-server/main.go</span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">@echo &quot;Cleaning up workspace&quot;</span><br><span class="line">@rm -rf build dist internal/migrations internal/static ui/build static/static</span><br><span class="line">@rm -f static/index.html static/icon.png static/manifest.json static/asset-manifest.json static/service-worker.js</span><br><span class="line">@rm -rf static/logo</span><br><span class="line">@rm -rf docs/public</span><br><span class="line">@rm -rf dist</span><br><span class="line"></span><br><span class="line">test: internal/statics internal/migrations</span><br><span class="line">@echo &quot;Running tests&quot;</span><br><span class="line">@for pkg in $(PKGS) ; do \</span><br><span class="line">golint $$pkg ; \</span><br><span class="line">done</span><br><span class="line">@go vet $(PKGS)</span><br><span class="line">@go test -p 1 -v $(PKGS)</span><br><span class="line"></span><br><span class="line">documentation:</span><br><span class="line">@echo &quot;Building documentation&quot;</span><br><span class="line">@mkdir -p dist/docs</span><br><span class="line">@cd docs &amp;&amp; hugo</span><br><span class="line">@cd docs/public/ &amp;&amp; tar -pczf ../../dist/lora-app-server-documentation.tar.gz .</span><br><span class="line"></span><br><span class="line">dist: ui/build internal/statics internal/migrations</span><br><span class="line">@goreleaser</span><br><span class="line"></span><br><span class="line">build-snapshot: ui/build internal/statics internal/migrations</span><br><span class="line">@goreleaser --snapshot</span><br><span class="line"></span><br><span class="line">package-deb: package</span><br><span class="line">@echo &quot;Building deb package&quot;</span><br><span class="line">@cd packaging &amp;&amp; TARGET=deb ./package.sh</span><br><span class="line"></span><br><span class="line">ui/build:</span><br><span class="line">@echo &quot;Building ui&quot;</span><br><span class="line">@cd ui &amp;&amp; npm run build</span><br><span class="line">@mv ui/build/* static</span><br><span class="line"></span><br><span class="line">api:</span><br><span class="line">@echo &quot;Generating API code from .proto files&quot;</span><br><span class="line">@go generate api/api.go</span><br><span class="line"></span><br><span class="line">internal/statics internal/migrations: static/swagger/api.swagger.json</span><br><span class="line">@echo &quot;Generating static files&quot;</span><br><span class="line">@go generate cmd/lora-app-server/main.go</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">static/swagger/api.swagger.json:</span><br><span class="line">@echo &quot;Generating combined Swagger JSON&quot;</span><br><span class="line">@GOOS=&quot;&quot; GOARCH=&quot;&quot; go run api/swagger/main.go api/swagger &gt; static/swagger/api.swagger.json</span><br><span class="line">@cp api/swagger/*.json static/swagger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># shortcuts for development</span><br><span class="line"></span><br><span class="line">requirements:</span><br><span class="line">echo &quot;Installing development tools&quot;</span><br><span class="line">go get -u github.com/golang/lint/golint</span><br><span class="line">go get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway</span><br><span class="line">go get -u github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger</span><br><span class="line">go get -u github.com/golang/protobuf/protoc-gen-go</span><br><span class="line">go get -u github.com/elazarl/go-bindata-assetfs/...</span><br><span class="line">go get -u github.com/jteeuwen/go-bindata/...</span><br><span class="line">go get -u github.com/kisielk/errcheck</span><br><span class="line">go get -u github.com/smartystreets/goconvey</span><br><span class="line">go get -u golang.org/x/tools/cmd/stringer</span><br><span class="line">go get -u github.com/golang/dep/cmd/dep</span><br><span class="line">go get -u github.com/goreleaser/goreleaser</span><br><span class="line">dep ensure -v</span><br><span class="line"></span><br><span class="line">ui-requirements:</span><br><span class="line">@echo &quot;Installing UI requirements&quot;</span><br><span class="line">@cd ui &amp;&amp; npm install</span><br><span class="line"></span><br><span class="line">serve: build</span><br><span class="line">@echo &quot;Starting Lora App Server&quot;</span><br><span class="line">./build/lora-app-server</span><br><span class="line"></span><br><span class="line">update-vendor:</span><br><span class="line">@echo &quot;Updating vendored packages&quot;</span><br><span class="line">@govendor update +external</span><br><span class="line"></span><br><span class="line">run-compose-test:</span><br><span class="line">docker-compose run --rm appserver make test</span><br></pre></td></tr></table></figure><h1 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;target&gt; : &lt;prerequisites&gt; </span><br><span class="line">[tab]  &lt;commands&gt;</span><br></pre></td></tr></table></figure><ul><li>target：执行的命令或者文件名。如果只是执行的命令这是<code>伪指令</code>，在大部分时候使用<code>.PHONY</code>声明伪指令，这样不仅仅提供效率，同时也避免和文件名冲突。</li><li>prerequisites：前置条件。</li><li>commands：需要执行的命令，<ul><li>前面需要添加<code>[tab]</code>，如果想要换成其他的，使用<code>.RECIPEPREFIX = ？</code>换成你喜欢的。</li><li>执行命令的时候会打印出相关的命令内容，这个叫做<code>回显</code>，如果不想显示出来可以在命令前面添加<code>@</code>。</li><li>命令执行的时候，每行命令在不同一个shell中执行，如果想在同一个shell中执行，有下面几个办法。</li><li>将命令写在同一行</li><li>在命令后面添加<code>\</code>，实现命令多行</li><li>使用<code>.ONESHELL:</code></li></ul></li></ul><h1 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h1><p>makefile可以通过<code>=、:=、?=、+=</code>给变量赋值，同时Make命令提供一系列内置变量，比如，((CC)指向当前使用的编译器，)(MAKE) 指向当前使用的Make工具。这主要是为了跨平台的兼容性，详细的内置变量清单见<a href="https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html" target="_blank" rel="noopener">手册</a>。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/u010230971/article/details/80335613" target="_blank" rel="noopener">https://blog.csdn.net/u010230971/article/details/80335613</a></p><p><a href="https://www.cnblogs.com/wang_yb/p/3990952.html" target="_blank" rel="noopener">https://www.cnblogs.com/wang_yb/p/3990952.html</a></p><p><a href="http://www.ruanyifeng.com/blog/2015/02/make.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/02/make.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="go" scheme="http://wumuwumu.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>mybatis-sessions</title>
    <link href="http://wumuwumu.github.io/2019/04/10/mybatis-sessions/"/>
    <id>http://wumuwumu.github.io/2019/04/10/mybatis-sessions/</id>
    <published>2019-04-10T02:25:51.000Z</published>
    <updated>2019-04-10T02:26:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h1><p><code>sqlSessionFactory</code>是工厂类的接口，默认实现是<code>DefaultSqlSessionFactory</code>，通过<code>sqlSessionFactoryBuilder</code>创建，我们不具体讨论配置文件的具体解析，主要分析mybatis的运行流程。</p><p><code>SqlSessionFactory</code>主要是用来创建<code>SqlSession</code>，<code>SqlSession</code>是线程不安全的，因此每次操作都要重新创建。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 通过数据源创建SqlSession，是我们比较常用的一种方式</span><br><span class="line">private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) &#123;</span><br><span class="line">    Transaction tx = null;</span><br><span class="line">    try &#123;</span><br><span class="line">      final Environment environment = configuration.getEnvironment();</span><br><span class="line">      final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);</span><br><span class="line">      //通过事务工厂来产生一个事务</span><br><span class="line">      tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);</span><br><span class="line">      //生成一个执行器(事务包含在执行器里)</span><br><span class="line">      final Executor executor = configuration.newExecutor(tx, execType);</span><br><span class="line">      //然后产生一个DefaultSqlSession</span><br><span class="line">      return new DefaultSqlSession(configuration, executor, autoCommit);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">      //如果打开事务出错，则关闭它</span><br><span class="line">      closeTransaction(tx); // may have fetched a connection so lets call close()</span><br><span class="line">      throw ExceptionFactory.wrapException(&quot;Error opening session.  Cause: &quot; + e, e);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">      //最后清空错误上下文</span><br><span class="line">      ErrorContext.instance().reset();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">SqlSession</span><br></pre></td></tr></table></figure><p><code>SqlSession</code>有两方式调用方法，第一种方式是通过命名空间调用，第二种方式是<code>JavaBean</code>调用，也就是通过我们常用的Mapper接口进行调用。现在<code>Myabtis3</code>我们基本使用第二种方式。</p><p>通过Mapper接口进行调用，核心是 获取Mapper接口，并通过动态代理，进行方法拦截。</p><p><code>SqlSession</code>通过<code>getMapper</code>获取相应的Mapper接口。<code>SqlSession</code>的的数据库操作是调用Executor的相关方法。</p><p>在<code>getMapper</code>调用的时候，有几个核心的类</p><ol><li><code>MapperProxyFactory</code>:用于创建<code>MapperProxyd</code>的工厂方法</li><li><code>MapperProxy</code>:动态代理的<code>InvocationHandler</code>的实现，实际中就是执行sql语句</li><li><code>MapperRegistry</code></li><li><code>MapperMethood</code>:调用<code>SqlSession</code>的方法</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SqlSessionFactory&quot;&gt;&lt;a href=&quot;#SqlSessionFactory&quot; class=&quot;headerlink&quot; title=&quot;SqlSessionFactory&quot;&gt;&lt;/a&gt;SqlSessionFactory&lt;/h1&gt;&lt;p&gt;&lt;code&gt;sqlS
      
    
    </summary>
    
    
      <category term="java" scheme="http://wumuwumu.github.io/tags/java/"/>
    
      <category term="mybatis" scheme="http://wumuwumu.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>git基本操作</title>
    <link href="http://wumuwumu.github.io/2019/04/09/git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://wumuwumu.github.io/2019/04/09/git基本操作/</id>
    <published>2019-04-09T05:59:25.000Z</published>
    <updated>2019-04-28T01:39:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在实际开发中，会使用git作为版本控制工具来完成团队协作。因此，对基本的git操作指令进行总结是十分有必要的，本文对一些术语或者理论基础，不重新码字，可以<a href="https://link.juejin.im?target=https%3A%2F%2Fwww.liaoxuefeng.com%2Fwiki%2F0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">参考廖雪峰老师的博文</a>，本文只对命令做归纳总结。</p><p>git的通用操作流程如下图（来源于网络）</p><p><img src="https://user-gold-cdn.xitu.io/2018/4/25/162fcc0987bf1c0a" alt="git操作通用流程"></p><p>主要涉及到四个关键点：</p><ol><li>工作区：本地电脑存放项目文件的地方，比如learnGitProject文件夹；</li><li>暂存区（Index/Stage）：在使用git管理项目文件的时候，其本地的项目文件会多出一个.git的文件夹，将这个.git文件夹称之为版本库。其中.git文件夹中包含了两个部分，一个是暂存区（Index或者Stage）,顾名思义就是暂时存放文件的地方，通常使用add命令将工作区的文件添加到暂存区里；</li><li>本地仓库：.git文件夹里还包括git自动创建的master分支，并且将HEAD指针指向master分支。使用commit命令可以将暂存区中的文件添加到本地仓库中；</li><li>远程仓库：不是在本地仓库中，项目代码在远程git服务器上，比如项目放在github上，就是一个远程仓库，通常使用clone命令将远程仓库拷贝到本地仓库中，开发后推送到远程仓库中即可；</li></ol><p>更细节的来看：</p><p><img src="http://wumu.sciento.cn/img/162fcc0e7e711dc7.png" alt=""></p><p>日常开发时代码实际上放置在工作区中，也就是本地的XXX.java这些文件，通过add等这些命令将代码文教提交给暂存区（Index/Stage），也就意味着代码全权交给了git进行管理，之后通过commit等命令将暂存区提交给master分支上，也就是意味打了一个版本，也可以说代码提交到了本地仓库中。另外，团队协作过程中自然而然还涉及到与远程仓库的交互。</p><p>因此，经过这样的分析，git命令可以分为这样的逻辑进行理解和记忆：</p><ol><li><p>git管理配置的命令；</p><p><strong>几个核心存储区的交互命令：</strong></p></li><li><p>工作区与暂存区的交互；</p></li><li><p>暂存区与本地仓库（分支）上的交互；</p></li><li><p>本地仓库与远程仓库的交互。</p></li></ol><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" target="_blank" rel="noopener">git安装</a></p><p><a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line">$ git config --global user.email <span class="string">"email@example.com"</span></span><br><span class="line"></span><br><span class="line">$ git config --global core.editor emacs</span><br><span class="line">$ git config --list</span><br><span class="line">$ git config user.name</span><br></pre></td></tr></table></figure><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git init  <span class="comment"># 初始化工程</span></span><br><span class="line">$ git add * <span class="comment"># 将文件添加到暂存区</span></span><br><span class="line">$ git commit -m  <span class="comment"># 提交</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/libgit2/libgit2</span><br></pre></td></tr></table></figure><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><ol><li><p>git add -A   保存所有的修改</p></li><li><p>git add .     保存新的添加和修改，但是不包括删除</p></li><li><p>git add -u   保存修改和删除，但是不包括新建文件。</p></li></ol><h2 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h2><ol><li>git commit -m</li><li>git commit -ma   // -a是添加全部修改</li><li>git commit –amend</li></ol><h2 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h2><ol><li>git checkout — //使用暂缓区替换工作区</li><li>git checkout  切换分支</li><li>git checkout head — //直接使用本地参考的文件覆盖工作区文件</li></ol><h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><ol><li>git rm  // 删除工作区，并且提交</li><li>git rm —cached  // 只删除暂存区</li><li>git rm -f   // 暂存区和工作区都删除</li></ol><h1 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h1><p><strong>谨慎使用！！！！！</strong></p><ul><li>–soft – 缓存区和工作目录都不会被改变</li><li>–mixed – 默认选项。缓存区和你指定的提交同步，但工作目录不受影响</li><li>–hard – 缓存区和工作目录都同步到你指定的提交</li></ul><h2 id="revert"><a href="#revert" class="headerlink" title="revert"></a>revert</h2><p>前提是已经提交，缺点：一次回滚过个记录会出现冲突。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;在实际开发中，会使用git作为版本控制工具来完成团队协作。因此，对基本的git操作指令进行总结是十分有必要的，本文对一些术语或者理论基础，不
      
    
    </summary>
    
    
      <category term="git" scheme="http://wumuwumu.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>go工程搭建</title>
    <link href="http://wumuwumu.github.io/2019/04/09/go/go%E5%B7%A5%E7%A8%8B%E6%90%AD%E5%BB%BA/"/>
    <id>http://wumuwumu.github.io/2019/04/09/go/go工程搭建/</id>
    <published>2019-04-09T01:26:21.000Z</published>
    <updated>2019-04-09T01:26:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工程基本结构"><a href="#工程基本结构" class="headerlink" title="工程基本结构"></a>工程基本结构</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;工程基本结构&quot;&gt;&lt;a href=&quot;#工程基本结构&quot; class=&quot;headerlink&quot; title=&quot;工程基本结构&quot;&gt;&lt;/a&gt;工程基本结构&lt;/h1&gt;
      
    
    </summary>
    
    
      <category term="go" scheme="http://wumuwumu.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>mysql权限管理</title>
    <link href="http://wumuwumu.github.io/2019/03/29/mysql/mysql%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    <id>http://wumuwumu.github.io/2019/03/29/mysql/mysql权限管理/</id>
    <published>2019-03-29T08:55:22.000Z</published>
    <updated>2019-03-29T09:16:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> zhangsan <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'zhangsan'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">current_user</span>();                                        ← 查看当前用户</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span>,host <span class="keyword">FROM</span> mysql.user;                    ← 查看用户信息</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span>;                                                  ← 当前用户权限，会生成SQL语句</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'user'</span>@<span class="string">'host'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'password'</span>;           ← 创建用户</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">'user'</span>@<span class="string">'host'</span>;                                      ← 删除用户</span><br><span class="line"><span class="keyword">RENAME</span> <span class="keyword">USER</span> <span class="string">'user'</span>@<span class="string">'host'</span> <span class="keyword">TO</span> <span class="string">'fool'</span>@<span class="string">'host'</span>;</span><br></pre></td></tr></table></figure><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER USER 'root'@'localhost' IDENTIFIED BY 'new-password';   ← 修改密码(recommand)</span><br><span class="line">mysql&gt; SET PASSWORD FOR 'root'@'localhost'=PASSWORD('new-password'); ← 修改密码</span><br><span class="line">mysql&gt; UPDATE mysql.user SET password=PASSWORD('new-password')</span><br><span class="line">       WHERE USER='root' AND Host='127.0.0.1';</span><br><span class="line">mysql&gt; UPDATE mysql.user SET password='' WHERE user='root';          ← 清除密码</span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line">$ mysqladmin -uROOT -pOLD_PASSWD password NEW_PASSWD                 ← 通过mysqladmin修改</span><br><span class="line">$ mysqladmin -uROOT -p <span class="keyword">flush</span>-<span class="keyword">privileges</span></span><br></pre></td></tr></table></figure><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; GRANT ALL ON *.* TO 'user'@'%' [IDENTIFIED BY 'password'];</span><br><span class="line">mysql&gt; GRANT ALL PRIVILIGES ON [TABLE | DATABASE] student,course TO user1,user2;</span><br><span class="line">mysql&gt; GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, CREATE TEMPORARY, ALTER,</span><br><span class="line">       <span class="keyword">DROP</span>, <span class="keyword">REFERENCES</span>, <span class="keyword">INDEX</span>, <span class="keyword">CREATE</span> <span class="keyword">VIEW</span>, <span class="keyword">SHOW</span> <span class="keyword">VIEW</span>, <span class="keyword">CREATE</span> ROUTINE,</span><br><span class="line">       <span class="keyword">ALTER</span> ROUTINE, <span class="keyword">EXECUTE</span></span><br><span class="line">       <span class="keyword">ON</span> db.tbl <span class="keyword">TO</span> <span class="string">'user'</span>@<span class="string">'host'</span> [<span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'password'</span>];</span><br><span class="line">mysql&gt; GRANT ALL ON sampdb.* TO PUBLIC WITH GRANT OPTION;            ← 所有人，可以授权给其他人</span><br><span class="line">mysql&gt; GRANT UPDATE(col),SELECT ON TABLE tbl TO user;                ← 针对列赋值</span><br><span class="line">mysql&gt; SHOW GRANTS [FOR 'user'@'host'];                              ← 查看权限信息</span><br><span class="line">mysql&gt; REVOKE ALL ON *.* FROM 'user'@'host';                         ← 撤销权限</span><br><span class="line">mysql&gt; REVOKE SELECT(user, host), UPDATE(host) ON db.tbl FROM 'user'@'%';</span><br></pre></td></tr></table></figure><h1 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h1><h2 id="admin"><a href="#admin" class="headerlink" title="admin"></a>admin</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE USER &apos;admin&apos;@&apos;IP&apos; IDENTIFIED BY &apos;password&apos;;</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;admin&apos;@&apos;IP&apos;;</span><br><span class="line"></span><br><span class="line">mysql&gt; REVOKE ALL PRIVILEGES ON *.* FROM &apos;admin&apos;@&apos;IP&apos;;</span><br><span class="line">mysql&gt; DROP USER &apos;admin&apos;@&apos;IP&apos;;</span><br></pre></td></tr></table></figure><h2 id="root"><a href="#root" class="headerlink" title="root"></a>root</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="重置root密码"><a href="#重置root密码" class="headerlink" title="重置root密码"></a>重置root密码</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">----- 1. 停止mysql服务器</span></span><br><span class="line"><span class="comment"># systemctl stop mysqld</span></span><br><span class="line"><span class="comment"># /opt/mysql-5.7/bin/mysqladmin -uroot -p'init-password' shutdown</span></span><br><span class="line">Shutting down MySQL..     done</span><br><span class="line"></span><br><span class="line"><span class="comment">----- 2. 获取跳过认证的启动参数</span></span><br><span class="line"><span class="comment"># mysqld --help --verbose | grep 'skip-grant-tables' -A1</span></span><br><span class="line">    <span class="comment">--skip-grant-tables Start without grant tables. This gives all users FULL</span></span><br><span class="line">                          ACCESS to all tables.</span><br><span class="line"></span><br><span class="line"><span class="comment">----- 3. 启动服务器，跳过认证</span></span><br><span class="line"><span class="comment"># mysqld --skip-grant-tables --user=mysql &amp;</span></span><br><span class="line">[1] 10209</span><br><span class="line"></span><br><span class="line"><span class="comment">----- 4. 取消密码</span></span><br><span class="line">mysql&gt; UPDATE mysql.user SET password='' WHERE user='root';</span><br><span class="line">Query OK, 2 rows affected (0.00 sec)</span><br><span class="line">Rows matched: 2  Changed: 2  Warnings: 0</span><br></pre></td></tr></table></figure><h2 id="MySQL-中-localhost-127-0-0-1-区别"><a href="#MySQL-中-localhost-127-0-0-1-区别" class="headerlink" title="MySQL 中 localhost 127.0.0.1 区别"></a>MySQL 中 localhost 127.0.0.1 区别</h2><p><code>%</code> 是一个通配符，用以匹配所有的 IP 地址，但是不能匹配到 <code>locahost</code> 这个特殊的域名。</p><p>也就是说，如果要允许本地登录，单纯只配置一个 <code>%</code> 是不够的 (应该是说对这种方式是不够的)，需要同时配置一个 <code>locahost</code> 的账号。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; GRANT ALL ON *.* TO 'foobar'@'%' IDENTIFIED BY '123456';</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line">mysql&gt; SELECT user, host, password FROM mysql.user WHERE user like 'foobar%';</span><br><span class="line">+<span class="comment">--------+------+-------------------------------------------+</span></span><br><span class="line">| user   | host | password                                  |</span><br><span class="line">+<span class="comment">--------+------+-------------------------------------------+</span></span><br><span class="line">| foobar | %    | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |</span><br><span class="line">+<span class="comment">--------+------+-------------------------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">$ mysql -ufoobar -h127<span class="number">.0</span><span class="number">.0</span><span class="number">.1</span> -P3307 -p<span class="string">'123456'</span></span><br><span class="line"><span class="keyword">ERROR</span> <span class="number">1045</span> (<span class="number">28000</span>): <span class="keyword">Access</span> denied <span class="keyword">for</span> <span class="keyword">user</span> <span class="string">'foobar'</span>@<span class="string">'localhost'</span> (<span class="keyword">using</span> <span class="keyword">password</span>: YES)</span><br></pre></td></tr></table></figure><p><a href="https://jin-yang.github.io/post/mysql-localhost-vs-127.0.0.1-introduce.html" target="_blank" rel="noopener">https://jin-yang.github.io/post/mysql-localhost-vs-127.0.0.1-introduce.html</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://jin-yang.github.io/post/mysql-users.html" target="_blank" rel="noopener">https://jin-yang.github.io/post/mysql-users.html</a></p><p><a href="https://www.cnblogs.com/Richardzhu/p/3318595.html" target="_blank" rel="noopener">https://www.cnblogs.com/Richardzhu/p/3318595.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;用户管理&quot;&gt;&lt;a href=&quot;#用户管理&quot; class=&quot;headerlink&quot; title=&quot;用户管理&quot;&gt;&lt;/a&gt;用户管理&lt;/h1&gt;&lt;h1 id=&quot;基本操作&quot;&gt;&lt;a href=&quot;#基本操作&quot; class=&quot;headerlink&quot; title=&quot;基本操作&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="linux" scheme="http://wumuwumu.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>centos安装mysql</title>
    <link href="http://wumuwumu.github.io/2019/03/29/mysql/mysql%E5%AE%89%E8%A3%85/"/>
    <id>http://wumuwumu.github.io/2019/03/29/mysql/mysql安装/</id>
    <published>2019-03-29T07:45:32.000Z</published>
    <updated>2019-07-09T01:43:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="添加-MySQL-YUM-源"><a href="#添加-MySQL-YUM-源" class="headerlink" title="添加 MySQL YUM 源"></a>添加 MySQL YUM 源</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$wget &apos;https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm&apos;</span><br><span class="line">$sudo rpm -Uvh mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line">$yum repolist all | grep mysql</span><br><span class="line">mysql-connectors-community/x86_64 MySQL Connectors Community                  36</span><br><span class="line">mysql-tools-community/x86_64      MySQL Tools Community                       47</span><br><span class="line">mysql57-community/x86_64          MySQL 5.7 Community Server                 187</span><br></pre></td></tr></table></figure><h1 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">## 安装最新版</span><br><span class="line">$sudo yum install mysql-community-server</span><br><span class="line">$ sudo yum install mysql   ## 安装客户端</span><br><span class="line">## 安装老版本</span><br><span class="line">## 1. yum-config-manager</span><br><span class="line">$ sudo dnf config-manager --disable mysql57-community</span><br><span class="line">$ sudo dnf config-manager --enable mysql56-community</span><br><span class="line">$ yum repolist | grep mysql</span><br><span class="line">mysql-connectors-community/x86_64 MySQL Connectors Community                  36</span><br><span class="line">mysql-tools-community/x86_64      MySQL Tools Community                       47</span><br><span class="line">mysql56-community/x86_64          MySQL 5.6 Community Server                 327</span><br><span class="line">## 2. 直接修改 /etc/yum.repos.d/mysql-community.repo</span><br><span class="line"># Enable to use MySQL 5.6</span><br><span class="line">[mysql56-community]</span><br><span class="line">name=MySQL 5.6 Community Server</span><br><span class="line">baseurl=http://repo.mysql.com/yum/mysql-5.6-community/el/7/$basearch/</span><br><span class="line">enabled=1 #表示当前版本是安装</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br><span class="line">[mysql57-community]</span><br><span class="line">name=MySQL 5.7 Community Server</span><br><span class="line">baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/</span><br><span class="line">enabled=0 #默认这个是 1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></table></figure><h1 id="启动Mysql"><a href="#启动Mysql" class="headerlink" title="启动Mysql"></a>启动Mysql</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$sudo service mysqld start </span><br><span class="line">$sudo systemctl start mysqld #CentOS 7</span><br><span class="line">$sudo systemctl status mysqld</span><br><span class="line">● mysqld.service - MySQL Community Server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Sat 2017-05-27 12:56:26 CST; 15s ago</span><br><span class="line">  Process: 2482 ExecStartPost=/usr/bin/mysql-systemd-start post (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 2421 ExecStartPre=/usr/bin/mysql-systemd-start pre (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 2481 (mysqld_safe)</span><br><span class="line">   CGroup: /system.slice/mysqld.service</span><br><span class="line">           ├─2481 /bin/sh /usr/bin/mysqld_safe --basedir=/usr</span><br><span class="line">           └─2647 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql --plugin-dir=/usr/...</span><br></pre></td></tr></table></figure><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## 获取临时密码</span><br><span class="line">sudo grep &apos;temporary password&apos; /var/log/mysqld.log</span><br><span class="line">$ mysql -uroot -p  #输入查看到的密码</span><br><span class="line">mysql&gt; ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;MyNewPass4!&apos;;</span><br></pre></td></tr></table></figure><p>mysql的密码存在安全等级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; mysql_secure_installation</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &apos;validate_password%&apos;;</span><br></pre></td></tr></table></figure><p><strong>validate_password_number_count</strong>参数是密码中至少含有的数字个数，当密码策略是MEDIUM或以上时生效。</p><p><strong>validate_password_special_char_count</strong>参数是密码中非英文数字等特殊字符的个数，当密码策略是MEDIUM或以上时生效。</p><p><strong>validate_password_mixed_case_count</strong>参数是密码中英文字符大小写的个数，当密码策略是MEDIUM或以上时生效。</p><p><strong>validate_password_length</strong>参数是密码的长度，这个参数由下面的公式生成</p><p>validate_password_number_count+ validate_password_special_char_count+ (2 * validate_password_mixed_case_count)</p><p><strong>validate_password_dictionary_file</strong>参数是指定密码验证的字典文件路径。</p><p><strong>validate_password_policy</strong>这个参数可以设为0、1、2，分别代表从低到高的密码强度，此参数的默认值为1，如果想将密码强度改弱，则更改此参数为0。</p><h2 id="修改密码策略"><a href="#修改密码策略" class="headerlink" title="修改密码策略"></a>修改密码策略</h2><p>更改密码策略为LOW  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set global validate_password_policy=0;</span><br></pre></td></tr></table></figure><p>更改密码长度  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set global validate_password_length=0;</span><br></pre></td></tr></table></figure><h2 id="安全设置"><a href="#安全设置" class="headerlink" title="安全设置"></a>安全设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">## 会提示设置5个关键位置</span><br><span class="line">## 设置 root 密码</span><br><span class="line">## 禁止 root 账号远程登录</span><br><span class="line">## 禁止匿名账号（anonymous）登录</span><br><span class="line">## 删除测试库</span><br><span class="line">## 是否确认修改</span><br><span class="line">$ mysql_secure_installation</span><br></pre></td></tr></table></figure><h1 id="安装三方插件"><a href="#安装三方插件" class="headerlink" title="安装三方插件"></a>安装三方插件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum --disablerepo=\* --enablerepo=&apos;mysql*-community*&apos; list available</span><br></pre></td></tr></table></figure><h1 id="修改编码"><a href="#修改编码" class="headerlink" title="修改编码"></a>修改编码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">## /etc/my.cnf</span><br><span class="line">[client]</span><br><span class="line">default-character-set = utf8</span><br><span class="line">[mysqld]</span><br><span class="line">default-storage-engine = INNODB</span><br><span class="line">character-set-server = utf8</span><br><span class="line">collation-server = utf8_general_ci #不区分大小写</span><br><span class="line">collation-server =  utf8_bin #区分大小写</span><br><span class="line">collation-server = utf8_unicode_ci #比 utf8_general_ci 更准确</span><br></pre></td></tr></table></figure><h1 id="修改服务器时间"><a href="#修改服务器时间" class="headerlink" title="修改服务器时间"></a>修改服务器时间</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">## mysql 中默认的时间戳是 UTC 时间，需要改为服务器时间的话官网提供了 3 种方式</span><br><span class="line">$ mysql_tzinfo_to_sql tz_dir</span><br><span class="line">$ mysql_tzinfo_to_sql tz_file tz_name</span><br><span class="line">$ mysql_tzinfo_to_sql --leap tz_file</span><br><span class="line">## tz_dir 代表服务器时间数据库，CentOS 7 中默认的目录为 /usr/share/zoneinfo ，tz_name 为具体的时区。如果设置的时区需要闰秒，则使用 --leap，具体的用法如下：</span><br><span class="line">$ mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root -p mysql</span><br><span class="line">$ mysql_tzinfo_to_sql tz_file tz_name | mysql -u root mysql</span><br><span class="line">$ mysql_tzinfo_to_sql --leap tz_file | mysql -u root mysql</span><br><span class="line">&gt; set global time_zone = &apos;+8:00&apos;;  ##修改mysql全局时区为北京时间，即我们所在的东8区</span><br><span class="line">&gt; set time_zone = &apos;+8:00&apos;;  ##修改当前会话时区</span><br><span class="line">&gt; flush privileges;  #立即生效</span><br><span class="line">## 通过修改my.cnf配置文件来修改时区</span><br><span class="line"># vim /etc/my.cnf  ##在[mysqld]区域中加上</span><br><span class="line">default-time_zone = &apos;+8:00&apos;</span><br><span class="line"># /etc/init.d/mysqld restart  ##重启mysql使新时区生效</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;添加-MySQL-YUM-源&quot;&gt;&lt;a href=&quot;#添加-MySQL-YUM-源&quot; class=&quot;headerlink&quot; title=&quot;添加 MySQL YUM 源&quot;&gt;&lt;/a&gt;添加 MySQL YUM 源&lt;/h1&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
    
      <category term="linux" scheme="http://wumuwumu.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>ngrok环境搭建</title>
    <link href="http://wumuwumu.github.io/2019/03/29/ngrok%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://wumuwumu.github.io/2019/03/29/ngrok环境搭建/</id>
    <published>2019-03-29T01:28:43.000Z</published>
    <updated>2019-03-29T07:45:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><ol><li><p>配置golang环境</p><ol><li><p>安装go</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install golang</span><br></pre></td></tr></table></figure></li><li><p>配置<code>GOPATH</code></p></li></ol></li><li><p>安装git2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove git</span><br><span class="line">sudo yum install epel-release</span><br><span class="line">sudo yum install https://centos7.iuscommunity.org/ius-release.rpm</span><br><span class="line">sudo yum install git2u</span><br></pre></td></tr></table></figure></li><li><p>下载ngrok</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/inconshreveable/ngrok</span><br></pre></td></tr></table></figure></li></ol><h1 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h1><ol><li><p>使用let’s encrypt证书</p><ol><li><p>申请证书（具体看申请证书，主要通配符证书和三级域名）</p></li><li><p>修改证书</p><p>客户端证书</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ngrok</span><br><span class="line">cp /etc/letsencrypt/live/xncoding.com/chain.pem assets/client/tls/ngrokroot.crt</span><br></pre></td></tr></table></figure><p>服务端证书</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/letsencrypt/live/xncoding.com/cert.pem assets/server/tls/snakeoil.crt</span><br><span class="line">cp /etc/letsencrypt/live/xncoding.com/privkey.pem assets/server/tls/snakeoil.key</span><br></pre></td></tr></table></figure></li></ol></li></ol><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><ol><li><p>编译服务端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make release-server</span><br></pre></td></tr></table></figure></li><li><p>编译客户端</p><p>不同平台的客户端需要分开编译。不同平台使用不同的 GOOS 和 GOARCH，GOOS为go编译出来的操作系统 (windows,linux,darwin)，GOARCH, 对应的构架 (386,amd64,arm)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GOOS=linux GOARCH=amd64 make release-client</span><br><span class="line">GOOS=windows GOARCH=amd64 make release-client</span><br><span class="line">GOOS=linux GOARCH=arm make release-client</span><br></pre></td></tr></table></figure></li></ol><h1 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h1><p>在开启之前，请主要端口是否开放</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ngrokd -domain=ngrok.sciento.top -httpAddr=:9580 -httpsAddr=:9443 -tunnelAddr=<span class="string">":9444"</span></span><br></pre></td></tr></table></figure><h1 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h1><ol><li><p>配置文件,具体看官方文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server_addr: &quot;ngrok.sciento.top:9444&quot;</span><br><span class="line">trust_host_root_certs: false</span><br><span class="line">tunnels:</span><br><span class="line">  http:</span><br><span class="line">    subdomain: &quot;demo&quot;</span><br><span class="line">    proto:</span><br><span class="line">      http: &quot;9000&quot;</span><br><span class="line">      </span><br><span class="line">  https:</span><br><span class="line">    subdomain: &quot;demo&quot;</span><br><span class="line">    proto:</span><br><span class="line">      https: &quot;9000&quot;</span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ngrok -config=ngrok.cfg start http https</span><br></pre></td></tr></table></figure></li></ol><h1 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h1><ol><li><p>安装nginx</p></li><li><p>配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  demo.ngrok.xncoding.com;</span><br><span class="line">    <span class="attribute">return</span>       <span class="number">301</span> https://demo.ngrok.xncoding.com<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">443</span> ssl http2;</span><br><span class="line">    <span class="attribute">server_name</span>  demo.ngrok.xncoding.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/letsencrypt/live/demo.ngrok.xncoding.com/fullchain.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/letsencrypt/live/demo.ngrok.xncoding.com/privkey.pem;</span><br><span class="line">    <span class="attribute">ssl_trusted_certificate</span> /etc/letsencrypt/live/demo.ngrok.xncoding.com/chain.pem;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/ngrok.log main;</span><br><span class="line">    <span class="attribute">error_log</span> /var/log/nginx/ngrok_error.log <span class="literal">error</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:5442;</span><br><span class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host       <span class="variable">$http_host</span>:<span class="number">5442</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP  <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.xncoding.com/2017/12/29/web/ngrok.html" target="_blank" rel="noopener">https://www.xncoding.com/2017/12/29/web/ngrok.html</a></p><p><a href="https://www.coldawn.com/how-to-issue-acmev2-wildcard-certificates-with-certbot-on-centos-7/" target="_blank" rel="noopener">https://www.coldawn.com/how-to-issue-acmev2-wildcard-certificates-with-certbot-on-centos-7/</a></p><p><a href="https://www.jianshu.com/p/c5c9d071e395" target="_blank" rel="noopener">https://www.jianshu.com/p/c5c9d071e395</a></p><p><a href="http://ngrok.cn/docs.html#tcp" target="_blank" rel="noopener">http://ngrok.cn/docs.html#tcp</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;下载安装&quot;&gt;&lt;a href=&quot;#下载安装&quot; class=&quot;headerlink&quot; title=&quot;下载安装&quot;&gt;&lt;/a&gt;下载安装&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;配置golang环境&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装go&lt;/p&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
    
      <category term="linux" scheme="http://wumuwumu.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Druid初始化</title>
    <link href="http://wumuwumu.github.io/2019/03/25/Druid%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>http://wumuwumu.github.io/2019/03/25/Druid初始化/</id>
    <published>2019-03-25T10:17:33.000Z</published>
    <updated>2019-03-25T10:43:25.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (inited) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// bug fixed for dead lock, for issue #2980</span></span><br><span class="line">        DruidDriver.getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lockInterruptibly();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="string">"interrupt"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> init = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//双重检查</span></span><br><span class="line">            <span class="keyword">if</span> (inited) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            initStackTrace = Utils.toString(Thread.currentThread().getStackTrace());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.id = DruidDriver.createDataSourceId();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.id &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> delta = (<span class="keyword">this</span>.id - <span class="number">1</span>) * <span class="number">100000</span>;</span><br><span class="line">                <span class="keyword">this</span>.connectionIdSeedUpdater.addAndGet(<span class="keyword">this</span>, delta);</span><br><span class="line">                <span class="keyword">this</span>.statementIdSeedUpdater.addAndGet(<span class="keyword">this</span>, delta);</span><br><span class="line">                <span class="keyword">this</span>.resultSetIdSeedUpdater.addAndGet(<span class="keyword">this</span>, delta);</span><br><span class="line">                <span class="keyword">this</span>.transactionIdSeedUpdater.addAndGet(<span class="keyword">this</span>, delta);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.jdbcUrl != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.jdbcUrl = <span class="keyword">this</span>.jdbcUrl.trim();</span><br><span class="line">                initFromWrapDriverUrl();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Filter filter : filters) &#123;</span><br><span class="line">                filter.init(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.dbType == <span class="keyword">null</span> || <span class="keyword">this</span>.dbType.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.dbType = JdbcUtils.getDbType(jdbcUrl, <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (JdbcConstants.MYSQL.equals(<span class="keyword">this</span>.dbType)</span><br><span class="line">                    || JdbcConstants.MARIADB.equals(<span class="keyword">this</span>.dbType)</span><br><span class="line">                    || JdbcConstants.ALIYUN_ADS.equals(<span class="keyword">this</span>.dbType)) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> cacheServerConfigurationSet = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.connectProperties.containsKey(<span class="string">"cacheServerConfiguration"</span>)) &#123;</span><br><span class="line">                    cacheServerConfigurationSet = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.jdbcUrl.indexOf(<span class="string">"cacheServerConfiguration"</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    cacheServerConfigurationSet = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cacheServerConfigurationSet) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.connectProperties.put(<span class="string">"cacheServerConfiguration"</span>, <span class="string">"true"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (maxActive &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"illegal maxActive "</span> + maxActive);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (maxActive &lt; minIdle) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"illegal maxActive "</span> + maxActive);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (getInitialSize() &gt; maxActive) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"illegal initialSize "</span> + <span class="keyword">this</span>.initialSize + <span class="string">", maxActive "</span> + maxActive);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (timeBetweenLogStatsMillis &gt; <span class="number">0</span> &amp;&amp; useGlobalDataSourceStat) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"timeBetweenLogStatsMillis not support useGlobalDataSourceStat=true"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (maxEvictableIdleTimeMillis &lt; minEvictableIdleTimeMillis) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="string">"maxEvictableIdleTimeMillis must be grater than minEvictableIdleTimeMillis"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.driverClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.driverClass = driverClass.trim();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            initFromSPIServiceLoader();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理驱动</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.driver == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.driverClass == <span class="keyword">null</span> || <span class="keyword">this</span>.driverClass.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.driverClass = JdbcUtils.getDriverClassName(<span class="keyword">this</span>.jdbcUrl);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (MockDriver.class.getName().equals(driverClass)) &#123;</span><br><span class="line">                    driver = MockDriver.instance;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (jdbcUrl == <span class="keyword">null</span> &amp;&amp; (driverClass == <span class="keyword">null</span> || driverClass.length() == <span class="number">0</span>)) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="string">"url not set"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                   </span><br><span class="line">                    driver = JdbcUtils.createDriver(driverClassLoader, driverClass);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.driverClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.driverClass = driver.getClass().getName();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// 进行参数的核对，没有什么逻辑</span></span><br><span class="line">            initCheck();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 为不同的数据库处理异常，这个可以借鉴</span></span><br><span class="line">            initExceptionSorter();</span><br><span class="line">            initValidConnectionChecker();</span><br><span class="line">            <span class="comment">// 做了一些检查，不知道</span></span><br><span class="line">            validationQueryCheck();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建数据统计对象</span></span><br><span class="line">            <span class="keyword">if</span> (isUseGlobalDataSourceStat()) &#123;</span><br><span class="line">                dataSourceStat = JdbcDataSourceStat.getGlobal();</span><br><span class="line">                <span class="keyword">if</span> (dataSourceStat == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    dataSourceStat = <span class="keyword">new</span> JdbcDataSourceStat(<span class="string">"Global"</span>, <span class="string">"Global"</span>, <span class="keyword">this</span>.dbType);</span><br><span class="line">                    JdbcDataSourceStat.setGlobal(dataSourceStat);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (dataSourceStat.getDbType() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    dataSourceStat.setDbType(<span class="keyword">this</span>.dbType);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dataSourceStat = <span class="keyword">new</span> JdbcDataSourceStat(<span class="keyword">this</span>.name, <span class="keyword">this</span>.jdbcUrl, <span class="keyword">this</span>.dbType, <span class="keyword">this</span>.connectProperties);</span><br><span class="line">            &#125;</span><br><span class="line">            dataSourceStat.setResetStatEnable(<span class="keyword">this</span>.resetStatEnable);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建连接池</span></span><br><span class="line">            connections = <span class="keyword">new</span> DruidConnectionHolder[maxActive];</span><br><span class="line">            evictConnections = <span class="keyword">new</span> DruidConnectionHolder[maxActive];</span><br><span class="line">            keepAliveConnections = <span class="keyword">new</span> DruidConnectionHolder[maxActive];</span><br><span class="line"></span><br><span class="line">            SQLException connectError = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 同步或者异步创建线程池</span></span><br><span class="line">            <span class="keyword">if</span> (createScheduler != <span class="keyword">null</span> &amp;&amp; asyncInit) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; initialSize; ++i) &#123;</span><br><span class="line">                    createTaskCount++;</span><br><span class="line">                    CreateConnectionTask task = <span class="keyword">new</span> CreateConnectionTask(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">this</span>.createSchedulerFuture = createScheduler.submit(task);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!asyncInit) &#123;</span><br><span class="line">                <span class="comment">// init connections</span></span><br><span class="line">                <span class="keyword">while</span> (poolingCount &lt; initialSize) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        PhysicalConnectionInfo pyConnectInfo = createPhysicalConnection();</span><br><span class="line">                        DruidConnectionHolder holder = <span class="keyword">new</span> DruidConnectionHolder(<span class="keyword">this</span>, pyConnectInfo);</span><br><span class="line">                        connections[poolingCount++] = holder;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                        LOG.error(<span class="string">"init datasource error, url: "</span> + <span class="keyword">this</span>.getUrl(), ex);</span><br><span class="line">                        <span class="keyword">if</span> (initExceptionThrow) &#123;</span><br><span class="line">                            connectError = ex;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (poolingCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    poolingPeak = poolingCount;</span><br><span class="line">                    poolingPeakTime = System.currentTimeMillis();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 用来打印线程池</span></span><br><span class="line">            createAndLogThread();</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            createAndStartCreatorThread();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 停止</span></span><br><span class="line">            createAndStartDestroyThread();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 等待线程创建完成</span></span><br><span class="line">            initedLatch.await();</span><br><span class="line">            init = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            initedTime = <span class="keyword">new</span> Date();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 注册mbean</span></span><br><span class="line">            registerMbean();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (connectError != <span class="keyword">null</span> &amp;&amp; poolingCount == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> connectError;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 检查连接池，防止连接池超出最大连接池</span></span><br><span class="line">            <span class="keyword">if</span> (keepAlive) &#123;</span><br><span class="line">                <span class="comment">// async fill to minIdle</span></span><br><span class="line">                <span class="keyword">if</span> (createScheduler != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; minIdle; ++i) &#123;</span><br><span class="line">                        createTaskCount++;</span><br><span class="line">                        CreateConnectionTask task = <span class="keyword">new</span> CreateConnectionTask(<span class="keyword">true</span>);</span><br><span class="line">                        <span class="keyword">this</span>.createSchedulerFuture = createScheduler.submit(task);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.emptySignal();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            LOG.error(<span class="string">"&#123;dataSource-"</span> + <span class="keyword">this</span>.getID() + <span class="string">"&#125; init error"</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(e.getMessage(), e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException e)&#123;</span><br><span class="line">            LOG.error(<span class="string">"&#123;dataSource-"</span> + <span class="keyword">this</span>.getID() + <span class="string">"&#125; init error"</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Error e)&#123;</span><br><span class="line">            LOG.error(<span class="string">"&#123;dataSource-"</span> + <span class="keyword">this</span>.getID() + <span class="string">"&#125; init error"</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 初始化成功</span></span><br><span class="line">            inited = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">// 解锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (init &amp;&amp; LOG.isInfoEnabled()) &#123;</span><br><span class="line">                String msg = <span class="string">"&#123;dataSource-"</span> + <span class="keyword">this</span>.getID();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.name != <span class="keyword">null</span> &amp;&amp; !<span class="keyword">this</span>.name.isEmpty()) &#123;</span><br><span class="line">                    msg += <span class="string">","</span>;</span><br><span class="line">                    msg += <span class="keyword">this</span>.name;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                msg += <span class="string">"&#125; inited"</span>;</span><br><span class="line"></span><br><span class="line">                LOG.info(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="java" scheme="http://wumuwumu.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java多线程</title>
    <link href="http://wumuwumu.github.io/2019/02/15/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://wumuwumu.github.io/2019/02/15/java多线程/</id>
    <published>2019-02-15T08:37:30.000Z</published>
    <updated>2019-02-15T09:20:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="相关的类"><a href="#相关的类" class="headerlink" title="相关的类"></a>相关的类</h1><ol><li>Runnable</li><li>Thread</li><li>Callable:比Runnable有个返回值</li><li>Future</li><li>FutureTask</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;相关的类&quot;&gt;&lt;a href=&quot;#相关的类&quot; class=&quot;headerlink&quot; title=&quot;相关的类&quot;&gt;&lt;/a&gt;相关的类&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Runnable&lt;/li&gt;
&lt;li&gt;Thread&lt;/li&gt;
&lt;li&gt;Callable:比Runnable有个返回
      
    
    </summary>
    
    
      <category term="java" scheme="http://wumuwumu.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>sqlx基本使用</title>
    <link href="http://wumuwumu.github.io/2019/02/13/go/sqlx%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://wumuwumu.github.io/2019/02/13/go/sqlx基本使用/</id>
    <published>2019-02-13T08:15:58.000Z</published>
    <updated>2019-04-12T02:21:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/jmoiron/sqlx</span><br></pre></td></tr></table></figure><h1 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db *sqlx.DB</span><br><span class="line"> </span><br><span class="line"><span class="comment">// exactly the same as the built-in</span></span><br><span class="line">db = sqlx.Open(<span class="string">"sqlite3"</span>, <span class="string">":memory:"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// from a pre-existing sql.DB; note the required driverName</span></span><br><span class="line">db = sqlx.NewDb(sql.Open(<span class="string">"sqlite3"</span>, <span class="string">":memory:"</span>), <span class="string">"sqlite3"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// force a connection and test that it worked</span></span><br><span class="line">err = db.Ping()</span><br></pre></td></tr></table></figure><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><h2 id="Exec"><a href="#Exec" class="headerlink" title="Exec"></a>Exec</h2><p>直接执行，适合add,update,delete</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">schema := <span class="string">`CREATE TABLE place (</span></span><br><span class="line"><span class="string">    country text,</span></span><br><span class="line"><span class="string">    city text NULL,</span></span><br><span class="line"><span class="string">    telcode integer);`</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// execute a query on the server</span></span><br><span class="line">result, err := db.Exec(schema)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// or, you can use MustExec, which panics on error</span></span><br><span class="line">cityState := <span class="string">`INSERT INTO place (country, telcode) VALUES (?, ?)`</span></span><br><span class="line">countryCity := <span class="string">`INSERT INTO place (country, city, telcode) VALUES (?, ?, ?)`</span></span><br><span class="line">db.MustExec(cityState, <span class="string">"Hong Kong"</span>, <span class="number">852</span>)</span><br><span class="line">db.MustExec(cityState, <span class="string">"Singapore"</span>, <span class="number">65</span>)</span><br><span class="line">db.MustExec(countryCity, <span class="string">"South Africa"</span>, <span class="string">"Johannesburg"</span>, <span class="number">27</span>)</span><br></pre></td></tr></table></figure><h2 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h2><p>查询数据库，适合select</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fetch all places from the db</span></span><br><span class="line">rows, err := db.Query(<span class="string">"SELECT country, city, telcode FROM place"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// iterate over each row</span></span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">    <span class="keyword">var</span> country <span class="keyword">string</span></span><br><span class="line">    <span class="comment">// note that city can be NULL, so we use the NullString type</span></span><br><span class="line">    <span class="keyword">var</span> city    sql.NullString</span><br><span class="line">    <span class="keyword">var</span> telcode <span class="keyword">int</span></span><br><span class="line">    err = rows.Scan(&amp;country, &amp;city, &amp;telcode)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// queryx 可以对结果转换成结构体</span></span><br><span class="line"><span class="keyword">var</span> person2 User</span><br><span class="line">rowxs,err :=db.Queryx(<span class="string">"SELECT * FROM sys_user LIMIT 1"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> rowxs.Next()&#123;</span><br><span class="line">rowxs.StructScan(&amp;person2)</span><br><span class="line">fmt.Println(person2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">p := Place&#123;&#125;</span><br><span class="line">pp := []Place&#123;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// this will pull the first place directly into p</span></span><br><span class="line">err = db.Get(&amp;p, <span class="string">"SELECT * FROM place LIMIT 1"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// this will pull places with telcode &gt; 50 into the slice pp</span></span><br><span class="line">err = db.Select(&amp;pp, <span class="string">"SELECT * FROM place WHERE telcode &gt; ?"</span>, <span class="number">50</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// they work with regular types as well</span></span><br><span class="line"><span class="keyword">var</span> id <span class="keyword">int</span></span><br><span class="line">err = db.Get(&amp;id, <span class="string">"SELECT count(*) FROM place"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// fetch at most 10 place names</span></span><br><span class="line"><span class="keyword">var</span> names []<span class="keyword">string</span></span><br><span class="line">err = db.Select(&amp;names, <span class="string">"SELECT name FROM place LIMIT 10"</span>)</span><br></pre></td></tr></table></figure><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this will not work if connection pool &gt; 1</span></span><br><span class="line">db.MustExec(<span class="string">"BEGIN;"</span>)</span><br><span class="line">db.MustExec(...)</span><br><span class="line">db.MustExec(<span class="string">"COMMIT;"</span>)</span><br></pre></td></tr></table></figure><h1 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stmt, err := db.Prepare(<span class="string">`SELECT * FROM place WHERE telcode=?`</span>)</span><br><span class="line">row = stmt.QueryRow(<span class="number">65</span>)</span><br><span class="line"> </span><br><span class="line">tx, err := db.Begin()</span><br><span class="line">txStmt, err := tx.Prepare(<span class="string">`SELECT * FROM place WHERE telcode=?`</span>)</span><br><span class="line">row = txStmt.QueryRow(<span class="number">852</span>)</span><br></pre></td></tr></table></figure><h1 id="Named-Queries"><a href="#Named-Queries" class="headerlink" title="Named Queries"></a>Named Queries</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// named query with a struct</span></span><br><span class="line">p := Place&#123;Country: <span class="string">"South Africa"</span>&#125;</span><br><span class="line">rows, err := db.NamedQuery(<span class="string">`SELECT * FROM place WHERE country=:country`</span>, p)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// named query with a map</span></span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">"city"</span>: <span class="string">"Johannesburg"</span>&#125;</span><br><span class="line">result, err := db.NamedExec(<span class="string">`SELECT * FROM place WHERE city=:city`</span>, m)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p := Place&#123;TelephoneCode: <span class="number">50</span>&#125;</span><br><span class="line">pp := []Place&#123;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// select all telcodes &gt; 50</span></span><br><span class="line">nstmt, err := db.PrepareNamed(<span class="string">`SELECT * FROM place WHERE telcode &gt; :telcode`</span>)</span><br><span class="line">err = nstmt.Select(&amp;pp, p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arg := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">    <span class="string">"published"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"authors"</span>: []&#123;<span class="number">8</span>, <span class="number">19</span>, <span class="number">32</span>, <span class="number">44</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">query, args, err := sqlx.Named(<span class="string">"SELECT * FROM articles WHERE published=:published AND author_id IN (:authors)"</span>, arg)</span><br><span class="line">query, args, err := sqlx.In(query, args...)</span><br><span class="line">query = db.Rebind(query)</span><br><span class="line">db.Query(query, args...)</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="http://jmoiron.github.io/sqlx/" target="_blank" rel="noopener">http://jmoiron.github.io/sqlx/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
    
      <category term="go" scheme="http://wumuwumu.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>jquery基本操作</title>
    <link href="http://wumuwumu.github.io/2019/01/12/jquery%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://wumuwumu.github.io/2019/01/12/jquery基本操作/</id>
    <published>2019-01-12T08:20:45.000Z</published>
    <updated>2019-01-12T09:37:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本选择器</span></span><br><span class="line">$(<span class="string">'#id'</span>)</span><br><span class="line">$(<span class="string">'.class'</span>)</span><br><span class="line">$(<span class="string">'element'</span>)</span><br><span class="line">$(<span class="string">'*'</span>)</span><br><span class="line">$(<span class="string">'select1 ,select2'</span>)<span class="comment">//可以使用css选择器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 层次选择器</span></span><br><span class="line">$(<span class="string">'ancestor descendant'</span>)</span><br><span class="line">$(<span class="string">'parent &gt;child'</span>)</span><br><span class="line">$(<span class="string">'prev+next'</span>)</span><br><span class="line">$(<span class="string">'prev~siblings'</span>)<span class="comment">//获取所有同辈元素</span></span><br></pre></td></tr></table></figure><h1 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// attr</span></span><br><span class="line">$(<span class="string">'div'</span>).attr(<span class="string">"background"</span>)<span class="comment">//获取属性</span></span><br><span class="line">$(<span class="string">'div'</span>).attr(<span class="string">"background"</span>,<span class="string">"white"</span>)</span><br><span class="line">$(<span class="string">'div'</span>).attr(&#123;<span class="string">"background"</span>:<span class="string">"white"</span>,<span class="string">"height"</span>:<span class="string">"200px"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// css</span></span><br><span class="line">$(<span class="string">"div"</span>).css(<span class="string">'background'</span>)</span><br><span class="line">$(<span class="string">'div'</span>).css(<span class="string">"background"</span>,<span class="string">"white"</span>)</span><br><span class="line">$(<span class="string">'div'</span>).css(&#123;<span class="string">'background'</span>:<span class="string">'blue'</span>,<span class="string">"height"</span>:<span class="string">'200px'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// width height</span></span><br><span class="line">width()</span><br><span class="line">height()</span><br><span class="line"></span><br><span class="line"><span class="comment">// addClass</span></span><br><span class="line">$(<span class="string">'div'</span>).addClass(<span class="string">'className'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// removeAttr</span></span><br><span class="line">$(<span class="string">'div'</span>).removeAttr(<span class="string">'background'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// removeClass 没参数删除所有</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hasClass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建节点</span></span><br><span class="line"><span class="keyword">var</span> p $(<span class="string">'&lt;p&gt;hello&lt;/p&gt;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// append() 添加内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// appendTo()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// prepend() 向元素内部前面添加内容</span></span><br><span class="line"><span class="comment">// prependTo()</span></span><br><span class="line">​<span class="string">``</span><span class="string">` html</span></span><br><span class="line"><span class="string">&lt;p&gt;hello&lt;/p&gt;</span></span><br><span class="line"><span class="string">​</span></span><br></pre></td></tr></table></figure><p>$(‘<i>hi!</i>‘).prependTo(“p”)<br>​<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>hi!<span class="tag">&lt;/<span class="name">i</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">​</span><br></pre></td></tr></table></figure></p><p>// 在相应位置添加元素，是在元素的外面<br>// after<br>// insertAfter<br>// before<br>//insertBefore</p><p>// remove()<br>// detach()：和remove()几乎一样，不同的是detach方法不会删除节点所绑定的事件和附加的数据<br>// empty() 清空内容</p><p>// clone()复制节点，可以有参数true，当有true参数时，将同时复制节点所绑定的事件<br>// replaceWith 将匹配的节点替换成指定的节点<br>// replaceAll() 只是用一个</p><p>// wrap 包裹节点<br>// wrapAll<br>// wrapInner 将匹配的节点内部的节点或者文本内容用指定的节点包裹起来<br>​<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;我是内容&lt;/p&gt;</span><br><span class="line">​</span><br></pre></td></tr></table></figure></p><p>$(“p”).wrapInner(“<span></span>“);<br>​<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&lt;span&gt;我是内容&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">​</span><br></pre></td></tr></table></figure></p><p>// html()<br>// text()<br>// val()</p><p>// children()<br>// next()<br>// prev()<br>// siblings()<br>// closest() 获取最近的符合匹配的一个父元素<br>​<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;div class=&quot;div2&quot;&gt;</span><br><span class="line">&lt;p&gt;我是内容&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">​</span><br></pre></td></tr></table></figure></p><p>var $div=$(“p”).closest();//返回class为div2的div元素</p><p>// parent()<br>// parents()</p><p>// offset()<br>// position()</p><p>// scrollTop()<br>// scrollLeft()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 事件与动画</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">$().ready()</span><br><span class="line">$(&apos;&apos;).bind(type,func)</span><br><span class="line">$(&apos;&apos;).click()</span><br><span class="line">$(&apos;&apos;).mouseover</span><br><span class="line"></span><br><span class="line">// 合成事件</span><br><span class="line">hover(enter,leave)</span><br><span class="line">toggle(fn1,fn2)</span><br><span class="line">       </span><br><span class="line">// 阻止事件</span><br><span class="line">event.stopPropagation();</span><br><span class="line">event.preventDefault();</span><br><span class="line"></span><br><span class="line">// unbind 移除事件</span><br><span class="line">// trigger 触发事件</span><br><span class="line"></span><br><span class="line">// 动画</span><br><span class="line">hide();</span><br><span class="line">show(time);</span><br><span class="line">fadeLn();</span><br><span class="line">fadeOut();</span><br><span class="line">slideUp();</span><br><span class="line">slideDown();</span><br><span class="line">slideToggle();</span><br><span class="line">fadeTo();</span><br><span class="line">fadeToggle();</span><br><span class="line">animate();</span><br><span class="line">delay();</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.jianshu.com/p/3e2768c8dad4" target="_blank" rel="noopener">jQuery简明参考手册——30分钟快速入门jQuery</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;选择器&quot;&gt;&lt;a href=&quot;#选择器&quot; class=&quot;headerlink&quot; title=&quot;选择器&quot;&gt;&lt;/a&gt;选择器&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
    
      <category term="js" scheme="http://wumuwumu.github.io/tags/js/"/>
    
      <category term="jquery" scheme="http://wumuwumu.github.io/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>springcloud-eureka</title>
    <link href="http://wumuwumu.github.io/2019/01/06/springcloud-eureka/"/>
    <id>http://wumuwumu.github.io/2019/01/06/springcloud-eureka/</id>
    <published>2019-01-06T10:27:25.000Z</published>
    <updated>2019-01-06T11:05:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="建立工程"><a href="#建立工程" class="headerlink" title="建立工程"></a>建立工程</h1><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加<code>Application</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span></span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class,arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8761</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    registerWithEureka:</span> <span class="literal">false</span> <span class="comment">## 是否注册到eureka server</span></span><br><span class="line"><span class="attr">    fetchRegistry:</span> <span class="literal">false</span>  <span class="comment">## 是否获取Eureka server 注册信息，单机可以设置为false</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line"><span class="comment">## 默认http://localhost:8761/eureka</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">eurka-server</span></span><br></pre></td></tr></table></figure></li><li><p>运行工程，访问<code>127.0.0.1:9761</code>可以看到web界面。</p></li></ol><h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><ol><li><p>添加依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>添加配置</p><ul><li>老版本</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line"><span class="attr">basic:</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="attr">    user:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">wumu</span></span><br><span class="line"><span class="attr">      password:</span> <span class="string">wumu</span></span><br></pre></td></tr></table></figure><ul><li>新版本</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line"><span class="attr">    user:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">wumu</span></span><br><span class="line"><span class="attr">      password:</span> <span class="string">wumu</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li>在依赖包中同时添加的<code>spring-cloud-starter-netflix-eureka-server</code>与<code>springb-boot-starter-web</code>两个依赖会导致tomcat的依赖问题，应用不能启动。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;建立工程&quot;&gt;&lt;a href=&quot;#建立工程&quot; class=&quot;headerlink&quot; title=&quot;建立工程&quot;&gt;&lt;/a&gt;建立工程&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;添加依赖&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
    
      <category term="spring-cloud" scheme="http://wumuwumu.github.io/tags/spring-cloud/"/>
    
  </entry>
  
</feed>
